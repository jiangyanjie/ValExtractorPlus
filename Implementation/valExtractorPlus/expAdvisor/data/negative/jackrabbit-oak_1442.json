{
    "id": 1442,
    "expression": "\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\"",
    "projectName": "jackrabbit-oak",
    "commitID": "2b32e7a4caca999ae8fa1bb4f6e58abcf1cc61b0",
    "filePath": "oak-solr-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/solr/query/SolrQueryIndex.java",
    "occurrences": 1,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\"",
            "nodeType": "InfixExpression",
            "nodePosition": {
                "charLength": 62,
                "startLineNumber": 154,
                "startColumnNumber": 48,
                "endLineNumber": 154,
                "endColumnNumber": 110
            },
            "astNodeNumber": 8,
            "astHeight": 3,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 70,
                        "startLineNumber": 154,
                        "startColumnNumber": 40,
                        "endLineNumber": 154,
                        "endColumnNumber": 110
                    },
                    "nodeContext": "kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\"",
                    "nodeType": "Assignment",
                    "astNodeNumber": 12,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 71,
                        "startLineNumber": 154,
                        "startColumnNumber": 40,
                        "endLineNumber": 154,
                        "endColumnNumber": 111
                    },
                    "nodeContext": "kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 13,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 749,
                        "startLineNumber": 145,
                        "startColumnNumber": 57,
                        "endLineNumber": 155,
                        "endColumnNumber": 37
                    },
                    "nodeContext": "{\n  int beginIndex=mltFlIndex + mltFlString.length();\n  int endIndex=parameterString.indexOf('&',beginIndex);\n  String fields;\n  if (endIndex > beginIndex) {\n    fields=parameterString.substring(beginIndex,endIndex);\n  }\n else {\n    fields=parameterString.substring(beginIndex);\n  }\n  kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 58,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 770,
                        "startLineNumber": 145,
                        "startColumnNumber": 36,
                        "endLineNumber": 155,
                        "endColumnNumber": 37
                    },
                    "nodeContext": "if (mltFlIndex > -1) {\n  int beginIndex=mltFlIndex + mltFlString.length();\n  int endIndex=parameterString.indexOf('&',beginIndex);\n  String fields;\n  if (endIndex > beginIndex) {\n    fields=parameterString.substring(beginIndex,endIndex);\n  }\n else {\n    fields=parameterString.substring(beginIndex);\n  }\n  kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 63,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1050,
                        "startLineNumber": 141,
                        "startColumnNumber": 65,
                        "endLineNumber": 156,
                        "endColumnNumber": 33
                    },
                    "nodeContext": "{\n  kv[0]=\"q\";\n  String mltFlString=\"mlt.fl=\";\n  int mltFlIndex=parameterString.indexOf(mltFlString);\n  if (mltFlIndex > -1) {\n    int beginIndex=mltFlIndex + mltFlString.length();\n    int endIndex=parameterString.indexOf('&',beginIndex);\n    String fields;\n    if (endIndex > beginIndex) {\n      fields=parameterString.substring(beginIndex,endIndex);\n    }\n else {\n      fields=parameterString.substring(beginIndex);\n    }\n    kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 84,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1083,
                        "startLineNumber": 141,
                        "startColumnNumber": 32,
                        "endLineNumber": 156,
                        "endColumnNumber": 33
                    },
                    "nodeContext": "if (\"stream.body\".equals(kv[0])) {\n  kv[0]=\"q\";\n  String mltFlString=\"mlt.fl=\";\n  int mltFlIndex=parameterString.indexOf(mltFlString);\n  if (mltFlIndex > -1) {\n    int beginIndex=mltFlIndex + mltFlString.length();\n    int endIndex=parameterString.indexOf('&',beginIndex);\n    String fields;\n    if (endIndex > beginIndex) {\n      fields=parameterString.substring(beginIndex,endIndex);\n    }\n else {\n      fields=parameterString.substring(beginIndex);\n    }\n    kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 91,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1213,
                        "startLineNumber": 140,
                        "startColumnNumber": 35,
                        "endLineNumber": 158,
                        "endColumnNumber": 29
                    },
                    "nodeContext": "{\n  if (\"stream.body\".equals(kv[0])) {\n    kv[0]=\"q\";\n    String mltFlString=\"mlt.fl=\";\n    int mltFlIndex=parameterString.indexOf(mltFlString);\n    if (mltFlIndex > -1) {\n      int beginIndex=mltFlIndex + mltFlString.length();\n      int endIndex=parameterString.indexOf('&',beginIndex);\n      String fields;\n      if (endIndex > beginIndex) {\n        fields=parameterString.substring(beginIndex,endIndex);\n      }\n else {\n        fields=parameterString.substring(beginIndex);\n      }\n      kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n    }\n  }\n  solrQuery.setParam(kv[0],kv[1]);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 102,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1367,
                        "startLineNumber": 138,
                        "startColumnNumber": 28,
                        "endLineNumber": 158,
                        "endColumnNumber": 29
                    },
                    "nodeContext": "if (kv.length != 2) {\n  throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n}\n else {\n  if (\"stream.body\".equals(kv[0])) {\n    kv[0]=\"q\";\n    String mltFlString=\"mlt.fl=\";\n    int mltFlIndex=parameterString.indexOf(mltFlString);\n    if (mltFlIndex > -1) {\n      int beginIndex=mltFlIndex + mltFlString.length();\n      int endIndex=parameterString.indexOf('&',beginIndex);\n      String fields;\n      if (endIndex > beginIndex) {\n        fields=parameterString.substring(beginIndex,endIndex);\n      }\n else {\n        fields=parameterString.substring(beginIndex);\n      }\n      kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n    }\n  }\n  solrQuery.setParam(kv[0],kv[1]);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 114,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 1483,
                        "startLineNumber": 136,
                        "startColumnNumber": 72,
                        "endLineNumber": 159,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "{\n  String[] kv=param.split(\"=\");\n  if (kv.length != 2) {\n    throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n  }\n else {\n    if (\"stream.body\".equals(kv[0])) {\n      kv[0]=\"q\";\n      String mltFlString=\"mlt.fl=\";\n      int mltFlIndex=parameterString.indexOf(mltFlString);\n      if (mltFlIndex > -1) {\n        int beginIndex=mltFlIndex + mltFlString.length();\n        int endIndex=parameterString.indexOf('&',beginIndex);\n        String fields;\n        if (endIndex > beginIndex) {\n          fields=parameterString.substring(beginIndex,endIndex);\n        }\n else {\n          fields=parameterString.substring(beginIndex);\n        }\n        kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n      }\n    }\n    solrQuery.setParam(kv[0],kv[1]);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 126,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1531,
                        "startLineNumber": 136,
                        "startColumnNumber": 24,
                        "endLineNumber": 159,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "for (String param : parameterString.split(\"&\")) {\n  String[] kv=param.split(\"=\");\n  if (kv.length != 2) {\n    throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n  }\n else {\n    if (\"stream.body\".equals(kv[0])) {\n      kv[0]=\"q\";\n      String mltFlString=\"mlt.fl=\";\n      int mltFlIndex=parameterString.indexOf(mltFlString);\n      if (mltFlIndex > -1) {\n        int beginIndex=mltFlIndex + mltFlString.length();\n        int endIndex=parameterString.indexOf('&',beginIndex);\n        String fields;\n        if (endIndex > beginIndex) {\n          fields=parameterString.substring(beginIndex,endIndex);\n        }\n else {\n          fields=parameterString.substring(beginIndex);\n        }\n        kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n      }\n    }\n    solrQuery.setParam(kv[0],kv[1]);\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 135,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 2328,
                        "startLineNumber": 126,
                        "startColumnNumber": 67,
                        "endLineNumber": 161,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n  if (!\"select\".equals(requestHandlerString)) {\n    if (requestHandlerString.charAt(0) != '/') {\n      requestHandlerString=\"/\" + requestHandlerString;\n    }\n    solrQuery.setRequestHandler(requestHandlerString);\n  }\n  String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n  for (  String param : parameterString.split(\"&\")) {\n    String[] kv=param.split(\"=\");\n    if (kv.length != 2) {\n      throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n    }\n else {\n      if (\"stream.body\".equals(kv[0])) {\n        kv[0]=\"q\";\n        String mltFlString=\"mlt.fl=\";\n        int mltFlIndex=parameterString.indexOf(mltFlString);\n        if (mltFlIndex > -1) {\n          int beginIndex=mltFlIndex + mltFlString.length();\n          int endIndex=parameterString.indexOf('&',beginIndex);\n          String fields;\n          if (endIndex > beginIndex) {\n            fields=parameterString.substring(beginIndex,endIndex);\n          }\n else {\n            fields=parameterString.substring(beginIndex);\n          }\n          kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n        }\n      }\n      solrQuery.setParam(kv[0],kv[1]);\n    }\n  }\n  return solrQuery;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 191,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2468,
                        "startLineNumber": 126,
                        "startColumnNumber": 20,
                        "endLineNumber": 163,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (isSupportedHttpRequest(nativeQueryString)) {\n  String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n  if (!\"select\".equals(requestHandlerString)) {\n    if (requestHandlerString.charAt(0) != '/') {\n      requestHandlerString=\"/\" + requestHandlerString;\n    }\n    solrQuery.setRequestHandler(requestHandlerString);\n  }\n  String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n  for (  String param : parameterString.split(\"&\")) {\n    String[] kv=param.split(\"=\");\n    if (kv.length != 2) {\n      throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n    }\n else {\n      if (\"stream.body\".equals(kv[0])) {\n        kv[0]=\"q\";\n        String mltFlString=\"mlt.fl=\";\n        int mltFlIndex=parameterString.indexOf(mltFlString);\n        if (mltFlIndex > -1) {\n          int beginIndex=mltFlIndex + mltFlString.length();\n          int endIndex=parameterString.indexOf('&',beginIndex);\n          String fields;\n          if (endIndex > beginIndex) {\n            fields=parameterString.substring(beginIndex,endIndex);\n          }\n else {\n            fields=parameterString.substring(beginIndex);\n          }\n          kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n        }\n      }\n      solrQuery.setParam(kv[0],kv[1]);\n    }\n  }\n  return solrQuery;\n}\n else {\n  queryBuilder.append(nativeQueryString);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 201,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 2610,
                        "startLineNumber": 124,
                        "startColumnNumber": 110,
                        "endLineNumber": 164,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n  if (isSupportedHttpRequest(nativeQueryString)) {\n    String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n    if (!\"select\".equals(requestHandlerString)) {\n      if (requestHandlerString.charAt(0) != '/') {\n        requestHandlerString=\"/\" + requestHandlerString;\n      }\n      solrQuery.setRequestHandler(requestHandlerString);\n    }\n    String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n    for (    String param : parameterString.split(\"&\")) {\n      String[] kv=param.split(\"=\");\n      if (kv.length != 2) {\n        throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n      }\n else {\n        if (\"stream.body\".equals(kv[0])) {\n          kv[0]=\"q\";\n          String mltFlString=\"mlt.fl=\";\n          int mltFlIndex=parameterString.indexOf(mltFlString);\n          if (mltFlIndex > -1) {\n            int beginIndex=mltFlIndex + mltFlString.length();\n            int endIndex=parameterString.indexOf('&',beginIndex);\n            String fields;\n            if (endIndex > beginIndex) {\n              fields=parameterString.substring(beginIndex,endIndex);\n            }\n else {\n              fields=parameterString.substring(beginIndex);\n            }\n            kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n          }\n        }\n        solrQuery.setParam(kv[0],kv[1]);\n      }\n    }\n    return solrQuery;\n  }\n else {\n    queryBuilder.append(nativeQueryString);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 220,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 5508,
                        "startLineNumber": 124,
                        "startColumnNumber": 16,
                        "endLineNumber": 211,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n  String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n  if (isSupportedHttpRequest(nativeQueryString)) {\n    String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n    if (!\"select\".equals(requestHandlerString)) {\n      if (requestHandlerString.charAt(0) != '/') {\n        requestHandlerString=\"/\" + requestHandlerString;\n      }\n      solrQuery.setRequestHandler(requestHandlerString);\n    }\n    String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n    for (    String param : parameterString.split(\"&\")) {\n      String[] kv=param.split(\"=\");\n      if (kv.length != 2) {\n        throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n      }\n else {\n        if (\"stream.body\".equals(kv[0])) {\n          kv[0]=\"q\";\n          String mltFlString=\"mlt.fl=\";\n          int mltFlIndex=parameterString.indexOf(mltFlString);\n          if (mltFlIndex > -1) {\n            int beginIndex=mltFlIndex + mltFlString.length();\n            int endIndex=parameterString.indexOf('&',beginIndex);\n            String fields;\n            if (endIndex > beginIndex) {\n              fields=parameterString.substring(beginIndex,endIndex);\n            }\n else {\n              fields=parameterString.substring(beginIndex);\n            }\n            kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n          }\n        }\n        solrQuery.setParam(kv[0],kv[1]);\n      }\n    }\n    return solrQuery;\n  }\n else {\n    queryBuilder.append(nativeQueryString);\n  }\n}\n else {\n  if (pr.propertyName.contains(\"/\")) {\n    continue;\n  }\n  if (\"rep:excerpt\".equals(pr.propertyName)) {\n    continue;\n  }\n  String first=null;\n  if (pr.first != null) {\n    first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n  }\n  String last=null;\n  if (pr.last != null) {\n    last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n  }\n  String prField=configuration.getFieldForPropertyRestriction(pr);\n  CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n  if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n    queryBuilder.append(configuration.getPathField());\n    queryBuilder.append(':');\n    queryBuilder.append(first);\n  }\n else {\n    if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(first);\n    }\n else     if (pr.first == null && pr.last == null) {\n      if (!queryBuilder.toString().contains(fieldName + \":\")) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append('*');\n      }\n    }\n else     if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n    }\n else     if (pr.isLike) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n    }\n else {\n      throw new RuntimeException(\"[unexpected!] not handled case\");\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 546,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 5622,
                        "startLineNumber": 122,
                        "startColumnNumber": 71,
                        "endLineNumber": 213,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n    String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n    if (isSupportedHttpRequest(nativeQueryString)) {\n      String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n      if (!\"select\".equals(requestHandlerString)) {\n        if (requestHandlerString.charAt(0) != '/') {\n          requestHandlerString=\"/\" + requestHandlerString;\n        }\n        solrQuery.setRequestHandler(requestHandlerString);\n      }\n      String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n      for (      String param : parameterString.split(\"&\")) {\n        String[] kv=param.split(\"=\");\n        if (kv.length != 2) {\n          throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n        }\n else {\n          if (\"stream.body\".equals(kv[0])) {\n            kv[0]=\"q\";\n            String mltFlString=\"mlt.fl=\";\n            int mltFlIndex=parameterString.indexOf(mltFlString);\n            if (mltFlIndex > -1) {\n              int beginIndex=mltFlIndex + mltFlString.length();\n              int endIndex=parameterString.indexOf('&',beginIndex);\n              String fields;\n              if (endIndex > beginIndex) {\n                fields=parameterString.substring(beginIndex,endIndex);\n              }\n else {\n                fields=parameterString.substring(beginIndex);\n              }\n              kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n            }\n          }\n          solrQuery.setParam(kv[0],kv[1]);\n        }\n      }\n      return solrQuery;\n    }\n else {\n      queryBuilder.append(nativeQueryString);\n    }\n  }\n else {\n    if (pr.propertyName.contains(\"/\")) {\n      continue;\n    }\n    if (\"rep:excerpt\".equals(pr.propertyName)) {\n      continue;\n    }\n    String first=null;\n    if (pr.first != null) {\n      first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n    }\n    String last=null;\n    if (pr.last != null) {\n      last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n    }\n    String prField=configuration.getFieldForPropertyRestriction(pr);\n    CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n    if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n      queryBuilder.append(configuration.getPathField());\n      queryBuilder.append(':');\n      queryBuilder.append(first);\n    }\n else {\n      if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(first);\n      }\n else       if (pr.first == null && pr.last == null) {\n        if (!queryBuilder.toString().contains(fieldName + \":\")) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append('*');\n        }\n      }\n else       if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n      }\n else       if (pr.isLike) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n      }\n else {\n        throw new RuntimeException(\"[unexpected!] not handled case\");\n      }\n    }\n  }\n  queryBuilder.append(\" \");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 552,
                    "astHeight": 20
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 5681,
                        "startLineNumber": 122,
                        "startColumnNumber": 12,
                        "endLineNumber": 213,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (Filter.PropertyRestriction pr : propertyRestrictions) {\n  if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n    String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n    if (isSupportedHttpRequest(nativeQueryString)) {\n      String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n      if (!\"select\".equals(requestHandlerString)) {\n        if (requestHandlerString.charAt(0) != '/') {\n          requestHandlerString=\"/\" + requestHandlerString;\n        }\n        solrQuery.setRequestHandler(requestHandlerString);\n      }\n      String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n      for (      String param : parameterString.split(\"&\")) {\n        String[] kv=param.split(\"=\");\n        if (kv.length != 2) {\n          throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n        }\n else {\n          if (\"stream.body\".equals(kv[0])) {\n            kv[0]=\"q\";\n            String mltFlString=\"mlt.fl=\";\n            int mltFlIndex=parameterString.indexOf(mltFlString);\n            if (mltFlIndex > -1) {\n              int beginIndex=mltFlIndex + mltFlString.length();\n              int endIndex=parameterString.indexOf('&',beginIndex);\n              String fields;\n              if (endIndex > beginIndex) {\n                fields=parameterString.substring(beginIndex,endIndex);\n              }\n else {\n                fields=parameterString.substring(beginIndex);\n              }\n              kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n            }\n          }\n          solrQuery.setParam(kv[0],kv[1]);\n        }\n      }\n      return solrQuery;\n    }\n else {\n      queryBuilder.append(nativeQueryString);\n    }\n  }\n else {\n    if (pr.propertyName.contains(\"/\")) {\n      continue;\n    }\n    if (\"rep:excerpt\".equals(pr.propertyName)) {\n      continue;\n    }\n    String first=null;\n    if (pr.first != null) {\n      first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n    }\n    String last=null;\n    if (pr.last != null) {\n      last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n    }\n    String prField=configuration.getFieldForPropertyRestriction(pr);\n    CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n    if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n      queryBuilder.append(configuration.getPathField());\n      queryBuilder.append(':');\n      queryBuilder.append(first);\n    }\n else {\n      if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(first);\n      }\n else       if (pr.first == null && pr.last == null) {\n        if (!queryBuilder.toString().contains(fieldName + \":\")) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append('*');\n        }\n      }\n else       if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n      }\n else       if (pr.isLike) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n      }\n else {\n        throw new RuntimeException(\"[unexpected!] not handled case\");\n      }\n    }\n  }\n  queryBuilder.append(\" \");\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 560,
                    "astHeight": 21
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 5705,
                        "startLineNumber": 121,
                        "startColumnNumber": 77,
                        "endLineNumber": 214,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  for (  Filter.PropertyRestriction pr : propertyRestrictions) {\n    if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n      String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n      if (isSupportedHttpRequest(nativeQueryString)) {\n        String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n        if (!\"select\".equals(requestHandlerString)) {\n          if (requestHandlerString.charAt(0) != '/') {\n            requestHandlerString=\"/\" + requestHandlerString;\n          }\n          solrQuery.setRequestHandler(requestHandlerString);\n        }\n        String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n        for (        String param : parameterString.split(\"&\")) {\n          String[] kv=param.split(\"=\");\n          if (kv.length != 2) {\n            throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n          }\n else {\n            if (\"stream.body\".equals(kv[0])) {\n              kv[0]=\"q\";\n              String mltFlString=\"mlt.fl=\";\n              int mltFlIndex=parameterString.indexOf(mltFlString);\n              if (mltFlIndex > -1) {\n                int beginIndex=mltFlIndex + mltFlString.length();\n                int endIndex=parameterString.indexOf('&',beginIndex);\n                String fields;\n                if (endIndex > beginIndex) {\n                  fields=parameterString.substring(beginIndex,endIndex);\n                }\n else {\n                  fields=parameterString.substring(beginIndex);\n                }\n                kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n              }\n            }\n            solrQuery.setParam(kv[0],kv[1]);\n          }\n        }\n        return solrQuery;\n      }\n else {\n        queryBuilder.append(nativeQueryString);\n      }\n    }\n else {\n      if (pr.propertyName.contains(\"/\")) {\n        continue;\n      }\n      if (\"rep:excerpt\".equals(pr.propertyName)) {\n        continue;\n      }\n      String first=null;\n      if (pr.first != null) {\n        first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n      }\n      String last=null;\n      if (pr.last != null) {\n        last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n      }\n      String prField=configuration.getFieldForPropertyRestriction(pr);\n      CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n      if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n        queryBuilder.append(configuration.getPathField());\n        queryBuilder.append(':');\n        queryBuilder.append(first);\n      }\n else {\n        if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(first);\n        }\n else         if (pr.first == null && pr.last == null) {\n          if (!queryBuilder.toString().contains(fieldName + \":\")) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append('*');\n          }\n        }\n else         if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n        }\n else         if (pr.isLike) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n        }\n else {\n          throw new RuntimeException(\"[unexpected!] not handled case\");\n        }\n      }\n    }\n    queryBuilder.append(\" \");\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 561,
                    "astHeight": 22
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 5774,
                        "startLineNumber": 121,
                        "startColumnNumber": 8,
                        "endLineNumber": 214,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (propertyRestrictions != null && !propertyRestrictions.isEmpty()) {\n  for (  Filter.PropertyRestriction pr : propertyRestrictions) {\n    if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n      String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n      if (isSupportedHttpRequest(nativeQueryString)) {\n        String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n        if (!\"select\".equals(requestHandlerString)) {\n          if (requestHandlerString.charAt(0) != '/') {\n            requestHandlerString=\"/\" + requestHandlerString;\n          }\n          solrQuery.setRequestHandler(requestHandlerString);\n        }\n        String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n        for (        String param : parameterString.split(\"&\")) {\n          String[] kv=param.split(\"=\");\n          if (kv.length != 2) {\n            throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n          }\n else {\n            if (\"stream.body\".equals(kv[0])) {\n              kv[0]=\"q\";\n              String mltFlString=\"mlt.fl=\";\n              int mltFlIndex=parameterString.indexOf(mltFlString);\n              if (mltFlIndex > -1) {\n                int beginIndex=mltFlIndex + mltFlString.length();\n                int endIndex=parameterString.indexOf('&',beginIndex);\n                String fields;\n                if (endIndex > beginIndex) {\n                  fields=parameterString.substring(beginIndex,endIndex);\n                }\n else {\n                  fields=parameterString.substring(beginIndex);\n                }\n                kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n              }\n            }\n            solrQuery.setParam(kv[0],kv[1]);\n          }\n        }\n        return solrQuery;\n      }\n else {\n        queryBuilder.append(nativeQueryString);\n      }\n    }\n else {\n      if (pr.propertyName.contains(\"/\")) {\n        continue;\n      }\n      if (\"rep:excerpt\".equals(pr.propertyName)) {\n        continue;\n      }\n      String first=null;\n      if (pr.first != null) {\n        first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n      }\n      String last=null;\n      if (pr.last != null) {\n        last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n      }\n      String prField=configuration.getFieldForPropertyRestriction(pr);\n      CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n      if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n        queryBuilder.append(configuration.getPathField());\n        queryBuilder.append(':');\n        queryBuilder.append(first);\n      }\n else {\n        if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(first);\n        }\n else         if (pr.first == null && pr.last == null) {\n          if (!queryBuilder.toString().contains(fieldName + \":\")) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append('*');\n          }\n        }\n else         if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n        }\n else         if (pr.isLike) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n        }\n else {\n          throw new RuntimeException(\"[unexpected!] not handled case\");\n        }\n      }\n    }\n    queryBuilder.append(\" \");\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 570,
                    "astHeight": 23
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 7985,
                        "startLineNumber": 103,
                        "startColumnNumber": 46,
                        "endLineNumber": 255,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  SolrQuery solrQuery=new SolrQuery();\n  setDefaults(solrQuery);\n  StringBuilder queryBuilder=new StringBuilder();\n  if (filter.getFullTextConstraint() != null) {\n    queryBuilder.append(getFullTextQuery(filter.getFullTextConstraint()));\n    queryBuilder.append(' ');\n  }\n else   if (filter.getFulltextConditions() != null) {\n    Collection<String> fulltextConditions=filter.getFulltextConditions();\n    for (    String fulltextCondition : fulltextConditions) {\n      queryBuilder.append(fulltextCondition).append(\" \");\n    }\n  }\n  Collection<Filter.PropertyRestriction> propertyRestrictions=filter.getPropertyRestrictions();\n  if (propertyRestrictions != null && !propertyRestrictions.isEmpty()) {\n    for (    Filter.PropertyRestriction pr : propertyRestrictions) {\n      if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n        String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n        if (isSupportedHttpRequest(nativeQueryString)) {\n          String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n          if (!\"select\".equals(requestHandlerString)) {\n            if (requestHandlerString.charAt(0) != '/') {\n              requestHandlerString=\"/\" + requestHandlerString;\n            }\n            solrQuery.setRequestHandler(requestHandlerString);\n          }\n          String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n          for (          String param : parameterString.split(\"&\")) {\n            String[] kv=param.split(\"=\");\n            if (kv.length != 2) {\n              throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n            }\n else {\n              if (\"stream.body\".equals(kv[0])) {\n                kv[0]=\"q\";\n                String mltFlString=\"mlt.fl=\";\n                int mltFlIndex=parameterString.indexOf(mltFlString);\n                if (mltFlIndex > -1) {\n                  int beginIndex=mltFlIndex + mltFlString.length();\n                  int endIndex=parameterString.indexOf('&',beginIndex);\n                  String fields;\n                  if (endIndex > beginIndex) {\n                    fields=parameterString.substring(beginIndex,endIndex);\n                  }\n else {\n                    fields=parameterString.substring(beginIndex);\n                  }\n                  kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n                }\n              }\n              solrQuery.setParam(kv[0],kv[1]);\n            }\n          }\n          return solrQuery;\n        }\n else {\n          queryBuilder.append(nativeQueryString);\n        }\n      }\n else {\n        if (pr.propertyName.contains(\"/\")) {\n          continue;\n        }\n        if (\"rep:excerpt\".equals(pr.propertyName)) {\n          continue;\n        }\n        String first=null;\n        if (pr.first != null) {\n          first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n        }\n        String last=null;\n        if (pr.last != null) {\n          last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n        }\n        String prField=configuration.getFieldForPropertyRestriction(pr);\n        CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n        if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n          queryBuilder.append(configuration.getPathField());\n          queryBuilder.append(':');\n          queryBuilder.append(first);\n        }\n else {\n          if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(first);\n          }\n else           if (pr.first == null && pr.last == null) {\n            if (!queryBuilder.toString().contains(fieldName + \":\")) {\n              queryBuilder.append(fieldName).append(':');\n              queryBuilder.append('*');\n            }\n          }\n else           if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n          }\n else           if (pr.isLike) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n          }\n else {\n            throw new RuntimeException(\"[unexpected!] not handled case\");\n          }\n        }\n      }\n      queryBuilder.append(\" \");\n    }\n  }\n  String[] pts=filter.getPrimaryTypes().toArray(new String[filter.getPrimaryTypes().size()]);\n  for (int i=0; i < pts.length; i++) {\n    String pt=pts[i];\n    if (i == 0) {\n      queryBuilder.append(\"(\");\n    }\n    if (i > 0 && i < pts.length) {\n      queryBuilder.append(\"OR \");\n    }\n    queryBuilder.append(\"jcr\\\\:primaryType\").append(':').append(partialEscape(pt)).append(\" \");\n    if (i == pts.length - 1) {\n      queryBuilder.append(\")\");\n      queryBuilder.append(' ');\n    }\n  }\n  Filter.PathRestriction pathRestriction=filter.getPathRestriction();\n  if (pathRestriction != null) {\n    String path=purgePath(filter);\n    String fieldName=configuration.getFieldForPathRestriction(pathRestriction);\n    if (fieldName != null) {\n      queryBuilder.append(fieldName);\n      queryBuilder.append(':');\n      queryBuilder.append(path);\n    }\n  }\n  if (queryBuilder.length() == 0) {\n    queryBuilder.append(\"*:*\");\n  }\n  String escapedQuery=queryBuilder.toString();\n  solrQuery.setQuery(escapedQuery);\n  if (log.isDebugEnabled()) {\n    log.debug(\"JCR query {} has been converted to Solr query {}\",filter.getQueryStatement(),solrQuery.toString());\n  }\n  return solrQuery;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 858,
                    "astHeight": 24
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8027,
                        "startLineNumber": 103,
                        "startColumnNumber": 4,
                        "endLineNumber": 255,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private SolrQuery getQuery(Filter filter){\n  SolrQuery solrQuery=new SolrQuery();\n  setDefaults(solrQuery);\n  StringBuilder queryBuilder=new StringBuilder();\n  if (filter.getFullTextConstraint() != null) {\n    queryBuilder.append(getFullTextQuery(filter.getFullTextConstraint()));\n    queryBuilder.append(' ');\n  }\n else   if (filter.getFulltextConditions() != null) {\n    Collection<String> fulltextConditions=filter.getFulltextConditions();\n    for (    String fulltextCondition : fulltextConditions) {\n      queryBuilder.append(fulltextCondition).append(\" \");\n    }\n  }\n  Collection<Filter.PropertyRestriction> propertyRestrictions=filter.getPropertyRestrictions();\n  if (propertyRestrictions != null && !propertyRestrictions.isEmpty()) {\n    for (    Filter.PropertyRestriction pr : propertyRestrictions) {\n      if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n        String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n        if (isSupportedHttpRequest(nativeQueryString)) {\n          String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n          if (!\"select\".equals(requestHandlerString)) {\n            if (requestHandlerString.charAt(0) != '/') {\n              requestHandlerString=\"/\" + requestHandlerString;\n            }\n            solrQuery.setRequestHandler(requestHandlerString);\n          }\n          String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n          for (          String param : parameterString.split(\"&\")) {\n            String[] kv=param.split(\"=\");\n            if (kv.length != 2) {\n              throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n            }\n else {\n              if (\"stream.body\".equals(kv[0])) {\n                kv[0]=\"q\";\n                String mltFlString=\"mlt.fl=\";\n                int mltFlIndex=parameterString.indexOf(mltFlString);\n                if (mltFlIndex > -1) {\n                  int beginIndex=mltFlIndex + mltFlString.length();\n                  int endIndex=parameterString.indexOf('&',beginIndex);\n                  String fields;\n                  if (endIndex > beginIndex) {\n                    fields=parameterString.substring(beginIndex,endIndex);\n                  }\n else {\n                    fields=parameterString.substring(beginIndex);\n                  }\n                  kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n                }\n              }\n              solrQuery.setParam(kv[0],kv[1]);\n            }\n          }\n          return solrQuery;\n        }\n else {\n          queryBuilder.append(nativeQueryString);\n        }\n      }\n else {\n        if (pr.propertyName.contains(\"/\")) {\n          continue;\n        }\n        if (\"rep:excerpt\".equals(pr.propertyName)) {\n          continue;\n        }\n        String first=null;\n        if (pr.first != null) {\n          first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n        }\n        String last=null;\n        if (pr.last != null) {\n          last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n        }\n        String prField=configuration.getFieldForPropertyRestriction(pr);\n        CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n        if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n          queryBuilder.append(configuration.getPathField());\n          queryBuilder.append(':');\n          queryBuilder.append(first);\n        }\n else {\n          if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(first);\n          }\n else           if (pr.first == null && pr.last == null) {\n            if (!queryBuilder.toString().contains(fieldName + \":\")) {\n              queryBuilder.append(fieldName).append(':');\n              queryBuilder.append('*');\n            }\n          }\n else           if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n          }\n else           if (pr.isLike) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n          }\n else {\n            throw new RuntimeException(\"[unexpected!] not handled case\");\n          }\n        }\n      }\n      queryBuilder.append(\" \");\n    }\n  }\n  String[] pts=filter.getPrimaryTypes().toArray(new String[filter.getPrimaryTypes().size()]);\n  for (int i=0; i < pts.length; i++) {\n    String pt=pts[i];\n    if (i == 0) {\n      queryBuilder.append(\"(\");\n    }\n    if (i > 0 && i < pts.length) {\n      queryBuilder.append(\"OR \");\n    }\n    queryBuilder.append(\"jcr\\\\:primaryType\").append(':').append(partialEscape(pt)).append(\" \");\n    if (i == pts.length - 1) {\n      queryBuilder.append(\")\");\n      queryBuilder.append(' ');\n    }\n  }\n  Filter.PathRestriction pathRestriction=filter.getPathRestriction();\n  if (pathRestriction != null) {\n    String path=purgePath(filter);\n    String fieldName=configuration.getFieldForPathRestriction(pathRestriction);\n    if (fieldName != null) {\n      queryBuilder.append(fieldName);\n      queryBuilder.append(':');\n      queryBuilder.append(path);\n    }\n  }\n  if (queryBuilder.length() == 0) {\n    queryBuilder.append(\"*:*\");\n  }\n  String escapedQuery=queryBuilder.toString();\n  solrQuery.setQuery(escapedQuery);\n  if (log.isDebugEnabled()) {\n    log.debug(\"JCR query {} has been converted to Solr query {}\",filter.getQueryStatement(),solrQuery.toString());\n  }\n  return solrQuery;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 867,
                    "astHeight": 25
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 71,
                    "startLineNumber": 154,
                    "startColumnNumber": 40,
                    "endLineNumber": 154,
                    "endColumnNumber": 111
                },
                "nodeContext": "kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 13,
                "astHeight": 5
            },
            "tokenLength": 12,
            "type": "java.lang.String"
        }
    ],
    "positionList": [
        {
            "charLength": 62,
            "startLineNumber": 154,
            "startColumnNumber": 48,
            "endLineNumber": 154,
            "endColumnNumber": 110
        }
    ],
    "layoutRelationDataList": []
}