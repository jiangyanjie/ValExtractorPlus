{
    "id": 2108,
    "expression": "b",
    "projectName": "commons-math",
    "commitID": "f040e261bfdd835d6b1908d17b03503b85dd9ced",
    "filePath": "src/main/java/org/apache/commons/math3/util/FastMath.java",
    "occurrences": 7,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 0,
    "expressionList": [
        {
            "nodeContext": "b",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 1300,
                "startColumnNumber": 12,
                "endLineNumber": 1300,
                "endColumnNumber": 13
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 5,
                        "startLineNumber": 1300,
                        "startColumnNumber": 12,
                        "endLineNumber": 1300,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "b + d",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 9,
                        "startLineNumber": 1300,
                        "startColumnNumber": 8,
                        "endLineNumber": 1300,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "b=b + d",
                    "nodeType": "Assignment",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 10,
                        "startLineNumber": 1300,
                        "startColumnNumber": 8,
                        "endLineNumber": 1300,
                        "endColumnNumber": 18
                    },
                    "nodeContext": "b=b + d;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 6,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 6912,
                        "startLineNumber": 1108,
                        "startColumnNumber": 69,
                        "endLineNumber": 1328,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (x == 0) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  long bits=Double.doubleToLongBits(x);\n  if ((bits & 0x8000000000000000L) != 0 || x != x) {\n    if (x != 0.0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NaN;\n      }\n      return Double.NaN;\n    }\n  }\n  if (x == Double.POSITIVE_INFINITY) {\n    if (hiPrec != null) {\n      hiPrec[0]=Double.POSITIVE_INFINITY;\n    }\n    return Double.POSITIVE_INFINITY;\n  }\n  int exp=(int)(bits >> 52) - 1023;\n  if ((bits & 0x7ff0000000000000L) == 0) {\n    if (x == 0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NEGATIVE_INFINITY;\n      }\n      return Double.NEGATIVE_INFINITY;\n    }\n    bits<<=1;\n    while ((bits & 0x0010000000000000L) == 0) {\n      exp--;\n      bits<<=1;\n    }\n  }\n  if (exp == -1 || exp == 0) {\n    if (x < 1.01 && x > 0.99 && hiPrec == null) {\n      double xa=x - 1.0;\n      double xb=xa - x + 1.0;\n      double tmp=xa * HEX_40000000;\n      double aa=xa + tmp - tmp;\n      double ab=xa - aa;\n      xa=aa;\n      xb=ab;\n      double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n      double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n      for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n        aa=ya * xa;\n        ab=ya * xb + yb * xa + yb * xb;\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n        aa=ya + LN_QUICK_COEF[i][0];\n        ab=yb + LN_QUICK_COEF[i][1];\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n      }\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      return ya + yb;\n    }\n  }\n  double lnm[]=lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n  double epsilon=(bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n  double lnza=0.0;\n  double lnzb=0.0;\n  if (hiPrec != null) {\n    double tmp=epsilon * HEX_40000000;\n    double aa=epsilon + tmp - tmp;\n    double ab=epsilon - aa;\n    double xa=aa;\n    double xb=ab;\n    double numer=bits & 0x3ffffffffffL;\n    double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n    aa=numer - xa * denom - xb * denom;\n    xb+=aa / denom;\n    double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n    double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n    for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_HI_PREC_COEF[i][0];\n      ab=yb + LN_HI_PREC_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    lnza=aa + ab;\n    lnzb=-(lnza - aa - ab);\n  }\n else {\n    lnza=-0.16624882440418567;\n    lnza=lnza * epsilon + 0.19999954120254515;\n    lnza=lnza * epsilon + -0.2499999997677497;\n    lnza=lnza * epsilon + 0.3333333333332802;\n    lnza=lnza * epsilon + -0.5;\n    lnza=lnza * epsilon + 1.0;\n    lnza=lnza * epsilon;\n  }\n  double a=LN_2_A * exp;\n  double b=0.0;\n  double c=a + lnm[0];\n  double d=-(c - a - lnm[0]);\n  a=c;\n  b=b + d;\n  c=a + lnza;\n  d=-(c - a - lnza);\n  a=c;\n  b=b + d;\n  c=a + LN_2_B * exp;\n  d=-(c - a - LN_2_B * exp);\n  a=c;\n  b=b + d;\n  c=a + lnm[1];\n  d=-(c - a - lnm[1]);\n  a=c;\n  b=b + d;\n  c=a + lnzb;\n  d=-(c - a - lnzb);\n  a=c;\n  b=b + d;\n  if (hiPrec != null) {\n    hiPrec[0]=a;\n    hiPrec[1]=b;\n  }\n  return a + b;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 883,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7218,
                        "startLineNumber": 1102,
                        "startColumnNumber": 4,
                        "endLineNumber": 1328,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Internal helper method for natural logarithm function.\n * @param x original argument of the natural logarithm function\n * @param hiPrec extra bits of precision on output (To Be Confirmed)\n * @return log(x)\n */\nprivate static double log(final double x,final double[] hiPrec){\n  if (x == 0) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  long bits=Double.doubleToLongBits(x);\n  if ((bits & 0x8000000000000000L) != 0 || x != x) {\n    if (x != 0.0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NaN;\n      }\n      return Double.NaN;\n    }\n  }\n  if (x == Double.POSITIVE_INFINITY) {\n    if (hiPrec != null) {\n      hiPrec[0]=Double.POSITIVE_INFINITY;\n    }\n    return Double.POSITIVE_INFINITY;\n  }\n  int exp=(int)(bits >> 52) - 1023;\n  if ((bits & 0x7ff0000000000000L) == 0) {\n    if (x == 0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NEGATIVE_INFINITY;\n      }\n      return Double.NEGATIVE_INFINITY;\n    }\n    bits<<=1;\n    while ((bits & 0x0010000000000000L) == 0) {\n      exp--;\n      bits<<=1;\n    }\n  }\n  if (exp == -1 || exp == 0) {\n    if (x < 1.01 && x > 0.99 && hiPrec == null) {\n      double xa=x - 1.0;\n      double xb=xa - x + 1.0;\n      double tmp=xa * HEX_40000000;\n      double aa=xa + tmp - tmp;\n      double ab=xa - aa;\n      xa=aa;\n      xb=ab;\n      double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n      double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n      for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n        aa=ya * xa;\n        ab=ya * xb + yb * xa + yb * xb;\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n        aa=ya + LN_QUICK_COEF[i][0];\n        ab=yb + LN_QUICK_COEF[i][1];\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n      }\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      return ya + yb;\n    }\n  }\n  double lnm[]=lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n  double epsilon=(bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n  double lnza=0.0;\n  double lnzb=0.0;\n  if (hiPrec != null) {\n    double tmp=epsilon * HEX_40000000;\n    double aa=epsilon + tmp - tmp;\n    double ab=epsilon - aa;\n    double xa=aa;\n    double xb=ab;\n    double numer=bits & 0x3ffffffffffL;\n    double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n    aa=numer - xa * denom - xb * denom;\n    xb+=aa / denom;\n    double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n    double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n    for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_HI_PREC_COEF[i][0];\n      ab=yb + LN_HI_PREC_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    lnza=aa + ab;\n    lnzb=-(lnza - aa - ab);\n  }\n else {\n    lnza=-0.16624882440418567;\n    lnza=lnza * epsilon + 0.19999954120254515;\n    lnza=lnza * epsilon + -0.2499999997677497;\n    lnza=lnza * epsilon + 0.3333333333332802;\n    lnza=lnza * epsilon + -0.5;\n    lnza=lnza * epsilon + 1.0;\n    lnza=lnza * epsilon;\n  }\n  double a=LN_2_A * exp;\n  double b=0.0;\n  double c=a + lnm[0];\n  double d=-(c - a - lnm[0]);\n  a=c;\n  b=b + d;\n  c=a + lnza;\n  d=-(c - a - lnza);\n  a=c;\n  b=b + d;\n  c=a + LN_2_B * exp;\n  d=-(c - a - LN_2_B * exp);\n  a=c;\n  b=b + d;\n  c=a + lnm[1];\n  d=-(c - a - lnm[1]);\n  a=c;\n  b=b + d;\n  c=a + lnzb;\n  d=-(c - a - lnzb);\n  a=c;\n  b=b + d;\n  if (hiPrec != null) {\n    hiPrec[0]=a;\n    hiPrec[1]=b;\n  }\n  return a + b;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 899,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 10,
                    "startLineNumber": 1300,
                    "startColumnNumber": 8,
                    "endLineNumber": 1300,
                    "endColumnNumber": 18
                },
                "nodeContext": "b=b + d;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 6,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "double"
        },
        {
            "nodeContext": "b",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 1305,
                "startColumnNumber": 12,
                "endLineNumber": 1305,
                "endColumnNumber": 13
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 5,
                        "startLineNumber": 1305,
                        "startColumnNumber": 12,
                        "endLineNumber": 1305,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "b + d",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 9,
                        "startLineNumber": 1305,
                        "startColumnNumber": 8,
                        "endLineNumber": 1305,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "b=b + d",
                    "nodeType": "Assignment",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 10,
                        "startLineNumber": 1305,
                        "startColumnNumber": 8,
                        "endLineNumber": 1305,
                        "endColumnNumber": 18
                    },
                    "nodeContext": "b=b + d;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 6,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 6912,
                        "startLineNumber": 1108,
                        "startColumnNumber": 69,
                        "endLineNumber": 1328,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (x == 0) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  long bits=Double.doubleToLongBits(x);\n  if ((bits & 0x8000000000000000L) != 0 || x != x) {\n    if (x != 0.0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NaN;\n      }\n      return Double.NaN;\n    }\n  }\n  if (x == Double.POSITIVE_INFINITY) {\n    if (hiPrec != null) {\n      hiPrec[0]=Double.POSITIVE_INFINITY;\n    }\n    return Double.POSITIVE_INFINITY;\n  }\n  int exp=(int)(bits >> 52) - 1023;\n  if ((bits & 0x7ff0000000000000L) == 0) {\n    if (x == 0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NEGATIVE_INFINITY;\n      }\n      return Double.NEGATIVE_INFINITY;\n    }\n    bits<<=1;\n    while ((bits & 0x0010000000000000L) == 0) {\n      exp--;\n      bits<<=1;\n    }\n  }\n  if (exp == -1 || exp == 0) {\n    if (x < 1.01 && x > 0.99 && hiPrec == null) {\n      double xa=x - 1.0;\n      double xb=xa - x + 1.0;\n      double tmp=xa * HEX_40000000;\n      double aa=xa + tmp - tmp;\n      double ab=xa - aa;\n      xa=aa;\n      xb=ab;\n      double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n      double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n      for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n        aa=ya * xa;\n        ab=ya * xb + yb * xa + yb * xb;\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n        aa=ya + LN_QUICK_COEF[i][0];\n        ab=yb + LN_QUICK_COEF[i][1];\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n      }\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      return ya + yb;\n    }\n  }\n  double lnm[]=lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n  double epsilon=(bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n  double lnza=0.0;\n  double lnzb=0.0;\n  if (hiPrec != null) {\n    double tmp=epsilon * HEX_40000000;\n    double aa=epsilon + tmp - tmp;\n    double ab=epsilon - aa;\n    double xa=aa;\n    double xb=ab;\n    double numer=bits & 0x3ffffffffffL;\n    double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n    aa=numer - xa * denom - xb * denom;\n    xb+=aa / denom;\n    double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n    double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n    for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_HI_PREC_COEF[i][0];\n      ab=yb + LN_HI_PREC_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    lnza=aa + ab;\n    lnzb=-(lnza - aa - ab);\n  }\n else {\n    lnza=-0.16624882440418567;\n    lnza=lnza * epsilon + 0.19999954120254515;\n    lnza=lnza * epsilon + -0.2499999997677497;\n    lnza=lnza * epsilon + 0.3333333333332802;\n    lnza=lnza * epsilon + -0.5;\n    lnza=lnza * epsilon + 1.0;\n    lnza=lnza * epsilon;\n  }\n  double a=LN_2_A * exp;\n  double b=0.0;\n  double c=a + lnm[0];\n  double d=-(c - a - lnm[0]);\n  a=c;\n  b=b + d;\n  c=a + lnza;\n  d=-(c - a - lnza);\n  a=c;\n  b=b + d;\n  c=a + LN_2_B * exp;\n  d=-(c - a - LN_2_B * exp);\n  a=c;\n  b=b + d;\n  c=a + lnm[1];\n  d=-(c - a - lnm[1]);\n  a=c;\n  b=b + d;\n  c=a + lnzb;\n  d=-(c - a - lnzb);\n  a=c;\n  b=b + d;\n  if (hiPrec != null) {\n    hiPrec[0]=a;\n    hiPrec[1]=b;\n  }\n  return a + b;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 883,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7218,
                        "startLineNumber": 1102,
                        "startColumnNumber": 4,
                        "endLineNumber": 1328,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Internal helper method for natural logarithm function.\n * @param x original argument of the natural logarithm function\n * @param hiPrec extra bits of precision on output (To Be Confirmed)\n * @return log(x)\n */\nprivate static double log(final double x,final double[] hiPrec){\n  if (x == 0) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  long bits=Double.doubleToLongBits(x);\n  if ((bits & 0x8000000000000000L) != 0 || x != x) {\n    if (x != 0.0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NaN;\n      }\n      return Double.NaN;\n    }\n  }\n  if (x == Double.POSITIVE_INFINITY) {\n    if (hiPrec != null) {\n      hiPrec[0]=Double.POSITIVE_INFINITY;\n    }\n    return Double.POSITIVE_INFINITY;\n  }\n  int exp=(int)(bits >> 52) - 1023;\n  if ((bits & 0x7ff0000000000000L) == 0) {\n    if (x == 0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NEGATIVE_INFINITY;\n      }\n      return Double.NEGATIVE_INFINITY;\n    }\n    bits<<=1;\n    while ((bits & 0x0010000000000000L) == 0) {\n      exp--;\n      bits<<=1;\n    }\n  }\n  if (exp == -1 || exp == 0) {\n    if (x < 1.01 && x > 0.99 && hiPrec == null) {\n      double xa=x - 1.0;\n      double xb=xa - x + 1.0;\n      double tmp=xa * HEX_40000000;\n      double aa=xa + tmp - tmp;\n      double ab=xa - aa;\n      xa=aa;\n      xb=ab;\n      double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n      double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n      for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n        aa=ya * xa;\n        ab=ya * xb + yb * xa + yb * xb;\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n        aa=ya + LN_QUICK_COEF[i][0];\n        ab=yb + LN_QUICK_COEF[i][1];\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n      }\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      return ya + yb;\n    }\n  }\n  double lnm[]=lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n  double epsilon=(bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n  double lnza=0.0;\n  double lnzb=0.0;\n  if (hiPrec != null) {\n    double tmp=epsilon * HEX_40000000;\n    double aa=epsilon + tmp - tmp;\n    double ab=epsilon - aa;\n    double xa=aa;\n    double xb=ab;\n    double numer=bits & 0x3ffffffffffL;\n    double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n    aa=numer - xa * denom - xb * denom;\n    xb+=aa / denom;\n    double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n    double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n    for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_HI_PREC_COEF[i][0];\n      ab=yb + LN_HI_PREC_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    lnza=aa + ab;\n    lnzb=-(lnza - aa - ab);\n  }\n else {\n    lnza=-0.16624882440418567;\n    lnza=lnza * epsilon + 0.19999954120254515;\n    lnza=lnza * epsilon + -0.2499999997677497;\n    lnza=lnza * epsilon + 0.3333333333332802;\n    lnza=lnza * epsilon + -0.5;\n    lnza=lnza * epsilon + 1.0;\n    lnza=lnza * epsilon;\n  }\n  double a=LN_2_A * exp;\n  double b=0.0;\n  double c=a + lnm[0];\n  double d=-(c - a - lnm[0]);\n  a=c;\n  b=b + d;\n  c=a + lnza;\n  d=-(c - a - lnza);\n  a=c;\n  b=b + d;\n  c=a + LN_2_B * exp;\n  d=-(c - a - LN_2_B * exp);\n  a=c;\n  b=b + d;\n  c=a + lnm[1];\n  d=-(c - a - lnm[1]);\n  a=c;\n  b=b + d;\n  c=a + lnzb;\n  d=-(c - a - lnzb);\n  a=c;\n  b=b + d;\n  if (hiPrec != null) {\n    hiPrec[0]=a;\n    hiPrec[1]=b;\n  }\n  return a + b;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 899,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 10,
                    "startLineNumber": 1305,
                    "startColumnNumber": 8,
                    "endLineNumber": 1305,
                    "endColumnNumber": 18
                },
                "nodeContext": "b=b + d;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 6,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "double"
        },
        {
            "nodeContext": "b",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 1310,
                "startColumnNumber": 12,
                "endLineNumber": 1310,
                "endColumnNumber": 13
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 5,
                        "startLineNumber": 1310,
                        "startColumnNumber": 12,
                        "endLineNumber": 1310,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "b + d",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 9,
                        "startLineNumber": 1310,
                        "startColumnNumber": 8,
                        "endLineNumber": 1310,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "b=b + d",
                    "nodeType": "Assignment",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 10,
                        "startLineNumber": 1310,
                        "startColumnNumber": 8,
                        "endLineNumber": 1310,
                        "endColumnNumber": 18
                    },
                    "nodeContext": "b=b + d;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 6,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 6912,
                        "startLineNumber": 1108,
                        "startColumnNumber": 69,
                        "endLineNumber": 1328,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (x == 0) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  long bits=Double.doubleToLongBits(x);\n  if ((bits & 0x8000000000000000L) != 0 || x != x) {\n    if (x != 0.0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NaN;\n      }\n      return Double.NaN;\n    }\n  }\n  if (x == Double.POSITIVE_INFINITY) {\n    if (hiPrec != null) {\n      hiPrec[0]=Double.POSITIVE_INFINITY;\n    }\n    return Double.POSITIVE_INFINITY;\n  }\n  int exp=(int)(bits >> 52) - 1023;\n  if ((bits & 0x7ff0000000000000L) == 0) {\n    if (x == 0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NEGATIVE_INFINITY;\n      }\n      return Double.NEGATIVE_INFINITY;\n    }\n    bits<<=1;\n    while ((bits & 0x0010000000000000L) == 0) {\n      exp--;\n      bits<<=1;\n    }\n  }\n  if (exp == -1 || exp == 0) {\n    if (x < 1.01 && x > 0.99 && hiPrec == null) {\n      double xa=x - 1.0;\n      double xb=xa - x + 1.0;\n      double tmp=xa * HEX_40000000;\n      double aa=xa + tmp - tmp;\n      double ab=xa - aa;\n      xa=aa;\n      xb=ab;\n      double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n      double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n      for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n        aa=ya * xa;\n        ab=ya * xb + yb * xa + yb * xb;\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n        aa=ya + LN_QUICK_COEF[i][0];\n        ab=yb + LN_QUICK_COEF[i][1];\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n      }\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      return ya + yb;\n    }\n  }\n  double lnm[]=lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n  double epsilon=(bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n  double lnza=0.0;\n  double lnzb=0.0;\n  if (hiPrec != null) {\n    double tmp=epsilon * HEX_40000000;\n    double aa=epsilon + tmp - tmp;\n    double ab=epsilon - aa;\n    double xa=aa;\n    double xb=ab;\n    double numer=bits & 0x3ffffffffffL;\n    double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n    aa=numer - xa * denom - xb * denom;\n    xb+=aa / denom;\n    double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n    double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n    for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_HI_PREC_COEF[i][0];\n      ab=yb + LN_HI_PREC_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    lnza=aa + ab;\n    lnzb=-(lnza - aa - ab);\n  }\n else {\n    lnza=-0.16624882440418567;\n    lnza=lnza * epsilon + 0.19999954120254515;\n    lnza=lnza * epsilon + -0.2499999997677497;\n    lnza=lnza * epsilon + 0.3333333333332802;\n    lnza=lnza * epsilon + -0.5;\n    lnza=lnza * epsilon + 1.0;\n    lnza=lnza * epsilon;\n  }\n  double a=LN_2_A * exp;\n  double b=0.0;\n  double c=a + lnm[0];\n  double d=-(c - a - lnm[0]);\n  a=c;\n  b=b + d;\n  c=a + lnza;\n  d=-(c - a - lnza);\n  a=c;\n  b=b + d;\n  c=a + LN_2_B * exp;\n  d=-(c - a - LN_2_B * exp);\n  a=c;\n  b=b + d;\n  c=a + lnm[1];\n  d=-(c - a - lnm[1]);\n  a=c;\n  b=b + d;\n  c=a + lnzb;\n  d=-(c - a - lnzb);\n  a=c;\n  b=b + d;\n  if (hiPrec != null) {\n    hiPrec[0]=a;\n    hiPrec[1]=b;\n  }\n  return a + b;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 883,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7218,
                        "startLineNumber": 1102,
                        "startColumnNumber": 4,
                        "endLineNumber": 1328,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Internal helper method for natural logarithm function.\n * @param x original argument of the natural logarithm function\n * @param hiPrec extra bits of precision on output (To Be Confirmed)\n * @return log(x)\n */\nprivate static double log(final double x,final double[] hiPrec){\n  if (x == 0) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  long bits=Double.doubleToLongBits(x);\n  if ((bits & 0x8000000000000000L) != 0 || x != x) {\n    if (x != 0.0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NaN;\n      }\n      return Double.NaN;\n    }\n  }\n  if (x == Double.POSITIVE_INFINITY) {\n    if (hiPrec != null) {\n      hiPrec[0]=Double.POSITIVE_INFINITY;\n    }\n    return Double.POSITIVE_INFINITY;\n  }\n  int exp=(int)(bits >> 52) - 1023;\n  if ((bits & 0x7ff0000000000000L) == 0) {\n    if (x == 0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NEGATIVE_INFINITY;\n      }\n      return Double.NEGATIVE_INFINITY;\n    }\n    bits<<=1;\n    while ((bits & 0x0010000000000000L) == 0) {\n      exp--;\n      bits<<=1;\n    }\n  }\n  if (exp == -1 || exp == 0) {\n    if (x < 1.01 && x > 0.99 && hiPrec == null) {\n      double xa=x - 1.0;\n      double xb=xa - x + 1.0;\n      double tmp=xa * HEX_40000000;\n      double aa=xa + tmp - tmp;\n      double ab=xa - aa;\n      xa=aa;\n      xb=ab;\n      double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n      double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n      for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n        aa=ya * xa;\n        ab=ya * xb + yb * xa + yb * xb;\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n        aa=ya + LN_QUICK_COEF[i][0];\n        ab=yb + LN_QUICK_COEF[i][1];\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n      }\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      return ya + yb;\n    }\n  }\n  double lnm[]=lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n  double epsilon=(bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n  double lnza=0.0;\n  double lnzb=0.0;\n  if (hiPrec != null) {\n    double tmp=epsilon * HEX_40000000;\n    double aa=epsilon + tmp - tmp;\n    double ab=epsilon - aa;\n    double xa=aa;\n    double xb=ab;\n    double numer=bits & 0x3ffffffffffL;\n    double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n    aa=numer - xa * denom - xb * denom;\n    xb+=aa / denom;\n    double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n    double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n    for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_HI_PREC_COEF[i][0];\n      ab=yb + LN_HI_PREC_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    lnza=aa + ab;\n    lnzb=-(lnza - aa - ab);\n  }\n else {\n    lnza=-0.16624882440418567;\n    lnza=lnza * epsilon + 0.19999954120254515;\n    lnza=lnza * epsilon + -0.2499999997677497;\n    lnza=lnza * epsilon + 0.3333333333332802;\n    lnza=lnza * epsilon + -0.5;\n    lnza=lnza * epsilon + 1.0;\n    lnza=lnza * epsilon;\n  }\n  double a=LN_2_A * exp;\n  double b=0.0;\n  double c=a + lnm[0];\n  double d=-(c - a - lnm[0]);\n  a=c;\n  b=b + d;\n  c=a + lnza;\n  d=-(c - a - lnza);\n  a=c;\n  b=b + d;\n  c=a + LN_2_B * exp;\n  d=-(c - a - LN_2_B * exp);\n  a=c;\n  b=b + d;\n  c=a + lnm[1];\n  d=-(c - a - lnm[1]);\n  a=c;\n  b=b + d;\n  c=a + lnzb;\n  d=-(c - a - lnzb);\n  a=c;\n  b=b + d;\n  if (hiPrec != null) {\n    hiPrec[0]=a;\n    hiPrec[1]=b;\n  }\n  return a + b;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 899,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 10,
                    "startLineNumber": 1310,
                    "startColumnNumber": 8,
                    "endLineNumber": 1310,
                    "endColumnNumber": 18
                },
                "nodeContext": "b=b + d;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 6,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "double"
        },
        {
            "nodeContext": "b",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 1315,
                "startColumnNumber": 12,
                "endLineNumber": 1315,
                "endColumnNumber": 13
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 5,
                        "startLineNumber": 1315,
                        "startColumnNumber": 12,
                        "endLineNumber": 1315,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "b + d",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 9,
                        "startLineNumber": 1315,
                        "startColumnNumber": 8,
                        "endLineNumber": 1315,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "b=b + d",
                    "nodeType": "Assignment",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 10,
                        "startLineNumber": 1315,
                        "startColumnNumber": 8,
                        "endLineNumber": 1315,
                        "endColumnNumber": 18
                    },
                    "nodeContext": "b=b + d;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 6,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 6912,
                        "startLineNumber": 1108,
                        "startColumnNumber": 69,
                        "endLineNumber": 1328,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (x == 0) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  long bits=Double.doubleToLongBits(x);\n  if ((bits & 0x8000000000000000L) != 0 || x != x) {\n    if (x != 0.0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NaN;\n      }\n      return Double.NaN;\n    }\n  }\n  if (x == Double.POSITIVE_INFINITY) {\n    if (hiPrec != null) {\n      hiPrec[0]=Double.POSITIVE_INFINITY;\n    }\n    return Double.POSITIVE_INFINITY;\n  }\n  int exp=(int)(bits >> 52) - 1023;\n  if ((bits & 0x7ff0000000000000L) == 0) {\n    if (x == 0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NEGATIVE_INFINITY;\n      }\n      return Double.NEGATIVE_INFINITY;\n    }\n    bits<<=1;\n    while ((bits & 0x0010000000000000L) == 0) {\n      exp--;\n      bits<<=1;\n    }\n  }\n  if (exp == -1 || exp == 0) {\n    if (x < 1.01 && x > 0.99 && hiPrec == null) {\n      double xa=x - 1.0;\n      double xb=xa - x + 1.0;\n      double tmp=xa * HEX_40000000;\n      double aa=xa + tmp - tmp;\n      double ab=xa - aa;\n      xa=aa;\n      xb=ab;\n      double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n      double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n      for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n        aa=ya * xa;\n        ab=ya * xb + yb * xa + yb * xb;\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n        aa=ya + LN_QUICK_COEF[i][0];\n        ab=yb + LN_QUICK_COEF[i][1];\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n      }\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      return ya + yb;\n    }\n  }\n  double lnm[]=lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n  double epsilon=(bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n  double lnza=0.0;\n  double lnzb=0.0;\n  if (hiPrec != null) {\n    double tmp=epsilon * HEX_40000000;\n    double aa=epsilon + tmp - tmp;\n    double ab=epsilon - aa;\n    double xa=aa;\n    double xb=ab;\n    double numer=bits & 0x3ffffffffffL;\n    double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n    aa=numer - xa * denom - xb * denom;\n    xb+=aa / denom;\n    double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n    double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n    for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_HI_PREC_COEF[i][0];\n      ab=yb + LN_HI_PREC_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    lnza=aa + ab;\n    lnzb=-(lnza - aa - ab);\n  }\n else {\n    lnza=-0.16624882440418567;\n    lnza=lnza * epsilon + 0.19999954120254515;\n    lnza=lnza * epsilon + -0.2499999997677497;\n    lnza=lnza * epsilon + 0.3333333333332802;\n    lnza=lnza * epsilon + -0.5;\n    lnza=lnza * epsilon + 1.0;\n    lnza=lnza * epsilon;\n  }\n  double a=LN_2_A * exp;\n  double b=0.0;\n  double c=a + lnm[0];\n  double d=-(c - a - lnm[0]);\n  a=c;\n  b=b + d;\n  c=a + lnza;\n  d=-(c - a - lnza);\n  a=c;\n  b=b + d;\n  c=a + LN_2_B * exp;\n  d=-(c - a - LN_2_B * exp);\n  a=c;\n  b=b + d;\n  c=a + lnm[1];\n  d=-(c - a - lnm[1]);\n  a=c;\n  b=b + d;\n  c=a + lnzb;\n  d=-(c - a - lnzb);\n  a=c;\n  b=b + d;\n  if (hiPrec != null) {\n    hiPrec[0]=a;\n    hiPrec[1]=b;\n  }\n  return a + b;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 883,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7218,
                        "startLineNumber": 1102,
                        "startColumnNumber": 4,
                        "endLineNumber": 1328,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Internal helper method for natural logarithm function.\n * @param x original argument of the natural logarithm function\n * @param hiPrec extra bits of precision on output (To Be Confirmed)\n * @return log(x)\n */\nprivate static double log(final double x,final double[] hiPrec){\n  if (x == 0) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  long bits=Double.doubleToLongBits(x);\n  if ((bits & 0x8000000000000000L) != 0 || x != x) {\n    if (x != 0.0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NaN;\n      }\n      return Double.NaN;\n    }\n  }\n  if (x == Double.POSITIVE_INFINITY) {\n    if (hiPrec != null) {\n      hiPrec[0]=Double.POSITIVE_INFINITY;\n    }\n    return Double.POSITIVE_INFINITY;\n  }\n  int exp=(int)(bits >> 52) - 1023;\n  if ((bits & 0x7ff0000000000000L) == 0) {\n    if (x == 0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NEGATIVE_INFINITY;\n      }\n      return Double.NEGATIVE_INFINITY;\n    }\n    bits<<=1;\n    while ((bits & 0x0010000000000000L) == 0) {\n      exp--;\n      bits<<=1;\n    }\n  }\n  if (exp == -1 || exp == 0) {\n    if (x < 1.01 && x > 0.99 && hiPrec == null) {\n      double xa=x - 1.0;\n      double xb=xa - x + 1.0;\n      double tmp=xa * HEX_40000000;\n      double aa=xa + tmp - tmp;\n      double ab=xa - aa;\n      xa=aa;\n      xb=ab;\n      double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n      double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n      for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n        aa=ya * xa;\n        ab=ya * xb + yb * xa + yb * xb;\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n        aa=ya + LN_QUICK_COEF[i][0];\n        ab=yb + LN_QUICK_COEF[i][1];\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n      }\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      return ya + yb;\n    }\n  }\n  double lnm[]=lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n  double epsilon=(bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n  double lnza=0.0;\n  double lnzb=0.0;\n  if (hiPrec != null) {\n    double tmp=epsilon * HEX_40000000;\n    double aa=epsilon + tmp - tmp;\n    double ab=epsilon - aa;\n    double xa=aa;\n    double xb=ab;\n    double numer=bits & 0x3ffffffffffL;\n    double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n    aa=numer - xa * denom - xb * denom;\n    xb+=aa / denom;\n    double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n    double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n    for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_HI_PREC_COEF[i][0];\n      ab=yb + LN_HI_PREC_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    lnza=aa + ab;\n    lnzb=-(lnza - aa - ab);\n  }\n else {\n    lnza=-0.16624882440418567;\n    lnza=lnza * epsilon + 0.19999954120254515;\n    lnza=lnza * epsilon + -0.2499999997677497;\n    lnza=lnza * epsilon + 0.3333333333332802;\n    lnza=lnza * epsilon + -0.5;\n    lnza=lnza * epsilon + 1.0;\n    lnza=lnza * epsilon;\n  }\n  double a=LN_2_A * exp;\n  double b=0.0;\n  double c=a + lnm[0];\n  double d=-(c - a - lnm[0]);\n  a=c;\n  b=b + d;\n  c=a + lnza;\n  d=-(c - a - lnza);\n  a=c;\n  b=b + d;\n  c=a + LN_2_B * exp;\n  d=-(c - a - LN_2_B * exp);\n  a=c;\n  b=b + d;\n  c=a + lnm[1];\n  d=-(c - a - lnm[1]);\n  a=c;\n  b=b + d;\n  c=a + lnzb;\n  d=-(c - a - lnzb);\n  a=c;\n  b=b + d;\n  if (hiPrec != null) {\n    hiPrec[0]=a;\n    hiPrec[1]=b;\n  }\n  return a + b;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 899,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 10,
                    "startLineNumber": 1315,
                    "startColumnNumber": 8,
                    "endLineNumber": 1315,
                    "endColumnNumber": 18
                },
                "nodeContext": "b=b + d;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 6,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "double"
        },
        {
            "nodeContext": "b",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 1320,
                "startColumnNumber": 12,
                "endLineNumber": 1320,
                "endColumnNumber": 13
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 5,
                        "startLineNumber": 1320,
                        "startColumnNumber": 12,
                        "endLineNumber": 1320,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "b + d",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 9,
                        "startLineNumber": 1320,
                        "startColumnNumber": 8,
                        "endLineNumber": 1320,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "b=b + d",
                    "nodeType": "Assignment",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 10,
                        "startLineNumber": 1320,
                        "startColumnNumber": 8,
                        "endLineNumber": 1320,
                        "endColumnNumber": 18
                    },
                    "nodeContext": "b=b + d;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 6,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 6912,
                        "startLineNumber": 1108,
                        "startColumnNumber": 69,
                        "endLineNumber": 1328,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (x == 0) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  long bits=Double.doubleToLongBits(x);\n  if ((bits & 0x8000000000000000L) != 0 || x != x) {\n    if (x != 0.0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NaN;\n      }\n      return Double.NaN;\n    }\n  }\n  if (x == Double.POSITIVE_INFINITY) {\n    if (hiPrec != null) {\n      hiPrec[0]=Double.POSITIVE_INFINITY;\n    }\n    return Double.POSITIVE_INFINITY;\n  }\n  int exp=(int)(bits >> 52) - 1023;\n  if ((bits & 0x7ff0000000000000L) == 0) {\n    if (x == 0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NEGATIVE_INFINITY;\n      }\n      return Double.NEGATIVE_INFINITY;\n    }\n    bits<<=1;\n    while ((bits & 0x0010000000000000L) == 0) {\n      exp--;\n      bits<<=1;\n    }\n  }\n  if (exp == -1 || exp == 0) {\n    if (x < 1.01 && x > 0.99 && hiPrec == null) {\n      double xa=x - 1.0;\n      double xb=xa - x + 1.0;\n      double tmp=xa * HEX_40000000;\n      double aa=xa + tmp - tmp;\n      double ab=xa - aa;\n      xa=aa;\n      xb=ab;\n      double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n      double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n      for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n        aa=ya * xa;\n        ab=ya * xb + yb * xa + yb * xb;\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n        aa=ya + LN_QUICK_COEF[i][0];\n        ab=yb + LN_QUICK_COEF[i][1];\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n      }\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      return ya + yb;\n    }\n  }\n  double lnm[]=lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n  double epsilon=(bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n  double lnza=0.0;\n  double lnzb=0.0;\n  if (hiPrec != null) {\n    double tmp=epsilon * HEX_40000000;\n    double aa=epsilon + tmp - tmp;\n    double ab=epsilon - aa;\n    double xa=aa;\n    double xb=ab;\n    double numer=bits & 0x3ffffffffffL;\n    double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n    aa=numer - xa * denom - xb * denom;\n    xb+=aa / denom;\n    double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n    double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n    for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_HI_PREC_COEF[i][0];\n      ab=yb + LN_HI_PREC_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    lnza=aa + ab;\n    lnzb=-(lnza - aa - ab);\n  }\n else {\n    lnza=-0.16624882440418567;\n    lnza=lnza * epsilon + 0.19999954120254515;\n    lnza=lnza * epsilon + -0.2499999997677497;\n    lnza=lnza * epsilon + 0.3333333333332802;\n    lnza=lnza * epsilon + -0.5;\n    lnza=lnza * epsilon + 1.0;\n    lnza=lnza * epsilon;\n  }\n  double a=LN_2_A * exp;\n  double b=0.0;\n  double c=a + lnm[0];\n  double d=-(c - a - lnm[0]);\n  a=c;\n  b=b + d;\n  c=a + lnza;\n  d=-(c - a - lnza);\n  a=c;\n  b=b + d;\n  c=a + LN_2_B * exp;\n  d=-(c - a - LN_2_B * exp);\n  a=c;\n  b=b + d;\n  c=a + lnm[1];\n  d=-(c - a - lnm[1]);\n  a=c;\n  b=b + d;\n  c=a + lnzb;\n  d=-(c - a - lnzb);\n  a=c;\n  b=b + d;\n  if (hiPrec != null) {\n    hiPrec[0]=a;\n    hiPrec[1]=b;\n  }\n  return a + b;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 883,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7218,
                        "startLineNumber": 1102,
                        "startColumnNumber": 4,
                        "endLineNumber": 1328,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Internal helper method for natural logarithm function.\n * @param x original argument of the natural logarithm function\n * @param hiPrec extra bits of precision on output (To Be Confirmed)\n * @return log(x)\n */\nprivate static double log(final double x,final double[] hiPrec){\n  if (x == 0) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  long bits=Double.doubleToLongBits(x);\n  if ((bits & 0x8000000000000000L) != 0 || x != x) {\n    if (x != 0.0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NaN;\n      }\n      return Double.NaN;\n    }\n  }\n  if (x == Double.POSITIVE_INFINITY) {\n    if (hiPrec != null) {\n      hiPrec[0]=Double.POSITIVE_INFINITY;\n    }\n    return Double.POSITIVE_INFINITY;\n  }\n  int exp=(int)(bits >> 52) - 1023;\n  if ((bits & 0x7ff0000000000000L) == 0) {\n    if (x == 0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NEGATIVE_INFINITY;\n      }\n      return Double.NEGATIVE_INFINITY;\n    }\n    bits<<=1;\n    while ((bits & 0x0010000000000000L) == 0) {\n      exp--;\n      bits<<=1;\n    }\n  }\n  if (exp == -1 || exp == 0) {\n    if (x < 1.01 && x > 0.99 && hiPrec == null) {\n      double xa=x - 1.0;\n      double xb=xa - x + 1.0;\n      double tmp=xa * HEX_40000000;\n      double aa=xa + tmp - tmp;\n      double ab=xa - aa;\n      xa=aa;\n      xb=ab;\n      double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n      double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n      for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n        aa=ya * xa;\n        ab=ya * xb + yb * xa + yb * xb;\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n        aa=ya + LN_QUICK_COEF[i][0];\n        ab=yb + LN_QUICK_COEF[i][1];\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n      }\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      return ya + yb;\n    }\n  }\n  double lnm[]=lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n  double epsilon=(bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n  double lnza=0.0;\n  double lnzb=0.0;\n  if (hiPrec != null) {\n    double tmp=epsilon * HEX_40000000;\n    double aa=epsilon + tmp - tmp;\n    double ab=epsilon - aa;\n    double xa=aa;\n    double xb=ab;\n    double numer=bits & 0x3ffffffffffL;\n    double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n    aa=numer - xa * denom - xb * denom;\n    xb+=aa / denom;\n    double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n    double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n    for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_HI_PREC_COEF[i][0];\n      ab=yb + LN_HI_PREC_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    lnza=aa + ab;\n    lnzb=-(lnza - aa - ab);\n  }\n else {\n    lnza=-0.16624882440418567;\n    lnza=lnza * epsilon + 0.19999954120254515;\n    lnza=lnza * epsilon + -0.2499999997677497;\n    lnza=lnza * epsilon + 0.3333333333332802;\n    lnza=lnza * epsilon + -0.5;\n    lnza=lnza * epsilon + 1.0;\n    lnza=lnza * epsilon;\n  }\n  double a=LN_2_A * exp;\n  double b=0.0;\n  double c=a + lnm[0];\n  double d=-(c - a - lnm[0]);\n  a=c;\n  b=b + d;\n  c=a + lnza;\n  d=-(c - a - lnza);\n  a=c;\n  b=b + d;\n  c=a + LN_2_B * exp;\n  d=-(c - a - LN_2_B * exp);\n  a=c;\n  b=b + d;\n  c=a + lnm[1];\n  d=-(c - a - lnm[1]);\n  a=c;\n  b=b + d;\n  c=a + lnzb;\n  d=-(c - a - lnzb);\n  a=c;\n  b=b + d;\n  if (hiPrec != null) {\n    hiPrec[0]=a;\n    hiPrec[1]=b;\n  }\n  return a + b;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 899,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 10,
                    "startLineNumber": 1320,
                    "startColumnNumber": 8,
                    "endLineNumber": 1320,
                    "endColumnNumber": 18
                },
                "nodeContext": "b=b + d;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 6,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "double"
        },
        {
            "nodeContext": "b",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 1324,
                "startColumnNumber": 24,
                "endLineNumber": 1324,
                "endColumnNumber": 25
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 13,
                        "startLineNumber": 1324,
                        "startColumnNumber": 12,
                        "endLineNumber": 1324,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "hiPrec[1]=b",
                    "nodeType": "Assignment",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 14,
                        "startLineNumber": 1324,
                        "startColumnNumber": 12,
                        "endLineNumber": 1324,
                        "endColumnNumber": 26
                    },
                    "nodeContext": "hiPrec[1]=b;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 6,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 65,
                        "startLineNumber": 1322,
                        "startColumnNumber": 28,
                        "endLineNumber": 1325,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  hiPrec[0]=a;\n  hiPrec[1]=b;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 13,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 85,
                        "startLineNumber": 1322,
                        "startColumnNumber": 8,
                        "endLineNumber": 1325,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (hiPrec != null) {\n  hiPrec[0]=a;\n  hiPrec[1]=b;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 17,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 6912,
                        "startLineNumber": 1108,
                        "startColumnNumber": 69,
                        "endLineNumber": 1328,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (x == 0) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  long bits=Double.doubleToLongBits(x);\n  if ((bits & 0x8000000000000000L) != 0 || x != x) {\n    if (x != 0.0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NaN;\n      }\n      return Double.NaN;\n    }\n  }\n  if (x == Double.POSITIVE_INFINITY) {\n    if (hiPrec != null) {\n      hiPrec[0]=Double.POSITIVE_INFINITY;\n    }\n    return Double.POSITIVE_INFINITY;\n  }\n  int exp=(int)(bits >> 52) - 1023;\n  if ((bits & 0x7ff0000000000000L) == 0) {\n    if (x == 0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NEGATIVE_INFINITY;\n      }\n      return Double.NEGATIVE_INFINITY;\n    }\n    bits<<=1;\n    while ((bits & 0x0010000000000000L) == 0) {\n      exp--;\n      bits<<=1;\n    }\n  }\n  if (exp == -1 || exp == 0) {\n    if (x < 1.01 && x > 0.99 && hiPrec == null) {\n      double xa=x - 1.0;\n      double xb=xa - x + 1.0;\n      double tmp=xa * HEX_40000000;\n      double aa=xa + tmp - tmp;\n      double ab=xa - aa;\n      xa=aa;\n      xb=ab;\n      double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n      double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n      for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n        aa=ya * xa;\n        ab=ya * xb + yb * xa + yb * xb;\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n        aa=ya + LN_QUICK_COEF[i][0];\n        ab=yb + LN_QUICK_COEF[i][1];\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n      }\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      return ya + yb;\n    }\n  }\n  double lnm[]=lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n  double epsilon=(bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n  double lnza=0.0;\n  double lnzb=0.0;\n  if (hiPrec != null) {\n    double tmp=epsilon * HEX_40000000;\n    double aa=epsilon + tmp - tmp;\n    double ab=epsilon - aa;\n    double xa=aa;\n    double xb=ab;\n    double numer=bits & 0x3ffffffffffL;\n    double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n    aa=numer - xa * denom - xb * denom;\n    xb+=aa / denom;\n    double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n    double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n    for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_HI_PREC_COEF[i][0];\n      ab=yb + LN_HI_PREC_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    lnza=aa + ab;\n    lnzb=-(lnza - aa - ab);\n  }\n else {\n    lnza=-0.16624882440418567;\n    lnza=lnza * epsilon + 0.19999954120254515;\n    lnza=lnza * epsilon + -0.2499999997677497;\n    lnza=lnza * epsilon + 0.3333333333332802;\n    lnza=lnza * epsilon + -0.5;\n    lnza=lnza * epsilon + 1.0;\n    lnza=lnza * epsilon;\n  }\n  double a=LN_2_A * exp;\n  double b=0.0;\n  double c=a + lnm[0];\n  double d=-(c - a - lnm[0]);\n  a=c;\n  b=b + d;\n  c=a + lnza;\n  d=-(c - a - lnza);\n  a=c;\n  b=b + d;\n  c=a + LN_2_B * exp;\n  d=-(c - a - LN_2_B * exp);\n  a=c;\n  b=b + d;\n  c=a + lnm[1];\n  d=-(c - a - lnm[1]);\n  a=c;\n  b=b + d;\n  c=a + lnzb;\n  d=-(c - a - lnzb);\n  a=c;\n  b=b + d;\n  if (hiPrec != null) {\n    hiPrec[0]=a;\n    hiPrec[1]=b;\n  }\n  return a + b;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 883,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7218,
                        "startLineNumber": 1102,
                        "startColumnNumber": 4,
                        "endLineNumber": 1328,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Internal helper method for natural logarithm function.\n * @param x original argument of the natural logarithm function\n * @param hiPrec extra bits of precision on output (To Be Confirmed)\n * @return log(x)\n */\nprivate static double log(final double x,final double[] hiPrec){\n  if (x == 0) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  long bits=Double.doubleToLongBits(x);\n  if ((bits & 0x8000000000000000L) != 0 || x != x) {\n    if (x != 0.0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NaN;\n      }\n      return Double.NaN;\n    }\n  }\n  if (x == Double.POSITIVE_INFINITY) {\n    if (hiPrec != null) {\n      hiPrec[0]=Double.POSITIVE_INFINITY;\n    }\n    return Double.POSITIVE_INFINITY;\n  }\n  int exp=(int)(bits >> 52) - 1023;\n  if ((bits & 0x7ff0000000000000L) == 0) {\n    if (x == 0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NEGATIVE_INFINITY;\n      }\n      return Double.NEGATIVE_INFINITY;\n    }\n    bits<<=1;\n    while ((bits & 0x0010000000000000L) == 0) {\n      exp--;\n      bits<<=1;\n    }\n  }\n  if (exp == -1 || exp == 0) {\n    if (x < 1.01 && x > 0.99 && hiPrec == null) {\n      double xa=x - 1.0;\n      double xb=xa - x + 1.0;\n      double tmp=xa * HEX_40000000;\n      double aa=xa + tmp - tmp;\n      double ab=xa - aa;\n      xa=aa;\n      xb=ab;\n      double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n      double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n      for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n        aa=ya * xa;\n        ab=ya * xb + yb * xa + yb * xb;\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n        aa=ya + LN_QUICK_COEF[i][0];\n        ab=yb + LN_QUICK_COEF[i][1];\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n      }\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      return ya + yb;\n    }\n  }\n  double lnm[]=lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n  double epsilon=(bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n  double lnza=0.0;\n  double lnzb=0.0;\n  if (hiPrec != null) {\n    double tmp=epsilon * HEX_40000000;\n    double aa=epsilon + tmp - tmp;\n    double ab=epsilon - aa;\n    double xa=aa;\n    double xb=ab;\n    double numer=bits & 0x3ffffffffffL;\n    double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n    aa=numer - xa * denom - xb * denom;\n    xb+=aa / denom;\n    double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n    double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n    for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_HI_PREC_COEF[i][0];\n      ab=yb + LN_HI_PREC_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    lnza=aa + ab;\n    lnzb=-(lnza - aa - ab);\n  }\n else {\n    lnza=-0.16624882440418567;\n    lnza=lnza * epsilon + 0.19999954120254515;\n    lnza=lnza * epsilon + -0.2499999997677497;\n    lnza=lnza * epsilon + 0.3333333333332802;\n    lnza=lnza * epsilon + -0.5;\n    lnza=lnza * epsilon + 1.0;\n    lnza=lnza * epsilon;\n  }\n  double a=LN_2_A * exp;\n  double b=0.0;\n  double c=a + lnm[0];\n  double d=-(c - a - lnm[0]);\n  a=c;\n  b=b + d;\n  c=a + lnza;\n  d=-(c - a - lnza);\n  a=c;\n  b=b + d;\n  c=a + LN_2_B * exp;\n  d=-(c - a - LN_2_B * exp);\n  a=c;\n  b=b + d;\n  c=a + lnm[1];\n  d=-(c - a - lnm[1]);\n  a=c;\n  b=b + d;\n  c=a + lnzb;\n  d=-(c - a - lnzb);\n  a=c;\n  b=b + d;\n  if (hiPrec != null) {\n    hiPrec[0]=a;\n    hiPrec[1]=b;\n  }\n  return a + b;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 899,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 14,
                    "startLineNumber": 1324,
                    "startColumnNumber": 12,
                    "endLineNumber": 1324,
                    "endColumnNumber": 26
                },
                "nodeContext": "hiPrec[1]=b;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 6,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "double"
        },
        {
            "nodeContext": "b",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 1327,
                "startColumnNumber": 19,
                "endLineNumber": 1327,
                "endColumnNumber": 20
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
                    "nodePosition": {
                        "charLength": 5,
                        "startLineNumber": 1327,
                        "startColumnNumber": 15,
                        "endLineNumber": 1327,
                        "endColumnNumber": 20
                    },
                    "nodeContext": "a + b",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 13,
                        "startLineNumber": 1327,
                        "startColumnNumber": 8,
                        "endLineNumber": 1327,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "return a + b;\n",
                    "nodeType": "ReturnStatement",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 6912,
                        "startLineNumber": 1108,
                        "startColumnNumber": 69,
                        "endLineNumber": 1328,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (x == 0) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  long bits=Double.doubleToLongBits(x);\n  if ((bits & 0x8000000000000000L) != 0 || x != x) {\n    if (x != 0.0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NaN;\n      }\n      return Double.NaN;\n    }\n  }\n  if (x == Double.POSITIVE_INFINITY) {\n    if (hiPrec != null) {\n      hiPrec[0]=Double.POSITIVE_INFINITY;\n    }\n    return Double.POSITIVE_INFINITY;\n  }\n  int exp=(int)(bits >> 52) - 1023;\n  if ((bits & 0x7ff0000000000000L) == 0) {\n    if (x == 0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NEGATIVE_INFINITY;\n      }\n      return Double.NEGATIVE_INFINITY;\n    }\n    bits<<=1;\n    while ((bits & 0x0010000000000000L) == 0) {\n      exp--;\n      bits<<=1;\n    }\n  }\n  if (exp == -1 || exp == 0) {\n    if (x < 1.01 && x > 0.99 && hiPrec == null) {\n      double xa=x - 1.0;\n      double xb=xa - x + 1.0;\n      double tmp=xa * HEX_40000000;\n      double aa=xa + tmp - tmp;\n      double ab=xa - aa;\n      xa=aa;\n      xb=ab;\n      double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n      double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n      for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n        aa=ya * xa;\n        ab=ya * xb + yb * xa + yb * xb;\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n        aa=ya + LN_QUICK_COEF[i][0];\n        ab=yb + LN_QUICK_COEF[i][1];\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n      }\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      return ya + yb;\n    }\n  }\n  double lnm[]=lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n  double epsilon=(bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n  double lnza=0.0;\n  double lnzb=0.0;\n  if (hiPrec != null) {\n    double tmp=epsilon * HEX_40000000;\n    double aa=epsilon + tmp - tmp;\n    double ab=epsilon - aa;\n    double xa=aa;\n    double xb=ab;\n    double numer=bits & 0x3ffffffffffL;\n    double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n    aa=numer - xa * denom - xb * denom;\n    xb+=aa / denom;\n    double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n    double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n    for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_HI_PREC_COEF[i][0];\n      ab=yb + LN_HI_PREC_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    lnza=aa + ab;\n    lnzb=-(lnza - aa - ab);\n  }\n else {\n    lnza=-0.16624882440418567;\n    lnza=lnza * epsilon + 0.19999954120254515;\n    lnza=lnza * epsilon + -0.2499999997677497;\n    lnza=lnza * epsilon + 0.3333333333332802;\n    lnza=lnza * epsilon + -0.5;\n    lnza=lnza * epsilon + 1.0;\n    lnza=lnza * epsilon;\n  }\n  double a=LN_2_A * exp;\n  double b=0.0;\n  double c=a + lnm[0];\n  double d=-(c - a - lnm[0]);\n  a=c;\n  b=b + d;\n  c=a + lnza;\n  d=-(c - a - lnza);\n  a=c;\n  b=b + d;\n  c=a + LN_2_B * exp;\n  d=-(c - a - LN_2_B * exp);\n  a=c;\n  b=b + d;\n  c=a + lnm[1];\n  d=-(c - a - lnm[1]);\n  a=c;\n  b=b + d;\n  c=a + lnzb;\n  d=-(c - a - lnzb);\n  a=c;\n  b=b + d;\n  if (hiPrec != null) {\n    hiPrec[0]=a;\n    hiPrec[1]=b;\n  }\n  return a + b;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 883,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7218,
                        "startLineNumber": 1102,
                        "startColumnNumber": 4,
                        "endLineNumber": 1328,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Internal helper method for natural logarithm function.\n * @param x original argument of the natural logarithm function\n * @param hiPrec extra bits of precision on output (To Be Confirmed)\n * @return log(x)\n */\nprivate static double log(final double x,final double[] hiPrec){\n  if (x == 0) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  long bits=Double.doubleToLongBits(x);\n  if ((bits & 0x8000000000000000L) != 0 || x != x) {\n    if (x != 0.0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NaN;\n      }\n      return Double.NaN;\n    }\n  }\n  if (x == Double.POSITIVE_INFINITY) {\n    if (hiPrec != null) {\n      hiPrec[0]=Double.POSITIVE_INFINITY;\n    }\n    return Double.POSITIVE_INFINITY;\n  }\n  int exp=(int)(bits >> 52) - 1023;\n  if ((bits & 0x7ff0000000000000L) == 0) {\n    if (x == 0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NEGATIVE_INFINITY;\n      }\n      return Double.NEGATIVE_INFINITY;\n    }\n    bits<<=1;\n    while ((bits & 0x0010000000000000L) == 0) {\n      exp--;\n      bits<<=1;\n    }\n  }\n  if (exp == -1 || exp == 0) {\n    if (x < 1.01 && x > 0.99 && hiPrec == null) {\n      double xa=x - 1.0;\n      double xb=xa - x + 1.0;\n      double tmp=xa * HEX_40000000;\n      double aa=xa + tmp - tmp;\n      double ab=xa - aa;\n      xa=aa;\n      xb=ab;\n      double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n      double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n      for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n        aa=ya * xa;\n        ab=ya * xb + yb * xa + yb * xb;\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n        aa=ya + LN_QUICK_COEF[i][0];\n        ab=yb + LN_QUICK_COEF[i][1];\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n      }\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      return ya + yb;\n    }\n  }\n  double lnm[]=lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n  double epsilon=(bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n  double lnza=0.0;\n  double lnzb=0.0;\n  if (hiPrec != null) {\n    double tmp=epsilon * HEX_40000000;\n    double aa=epsilon + tmp - tmp;\n    double ab=epsilon - aa;\n    double xa=aa;\n    double xb=ab;\n    double numer=bits & 0x3ffffffffffL;\n    double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n    aa=numer - xa * denom - xb * denom;\n    xb+=aa / denom;\n    double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n    double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n    for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_HI_PREC_COEF[i][0];\n      ab=yb + LN_HI_PREC_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    lnza=aa + ab;\n    lnzb=-(lnza - aa - ab);\n  }\n else {\n    lnza=-0.16624882440418567;\n    lnza=lnza * epsilon + 0.19999954120254515;\n    lnza=lnza * epsilon + -0.2499999997677497;\n    lnza=lnza * epsilon + 0.3333333333332802;\n    lnza=lnza * epsilon + -0.5;\n    lnza=lnza * epsilon + 1.0;\n    lnza=lnza * epsilon;\n  }\n  double a=LN_2_A * exp;\n  double b=0.0;\n  double c=a + lnm[0];\n  double d=-(c - a - lnm[0]);\n  a=c;\n  b=b + d;\n  c=a + lnza;\n  d=-(c - a - lnza);\n  a=c;\n  b=b + d;\n  c=a + LN_2_B * exp;\n  d=-(c - a - LN_2_B * exp);\n  a=c;\n  b=b + d;\n  c=a + lnm[1];\n  d=-(c - a - lnm[1]);\n  a=c;\n  b=b + d;\n  c=a + lnzb;\n  d=-(c - a - lnzb);\n  a=c;\n  b=b + d;\n  if (hiPrec != null) {\n    hiPrec[0]=a;\n    hiPrec[1]=b;\n  }\n  return a + b;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 899,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 13,
                    "startLineNumber": 1327,
                    "startColumnNumber": 8,
                    "endLineNumber": 1327,
                    "endColumnNumber": 21
                },
                "nodeContext": "return a + b;\n",
                "nodeType": "ReturnStatement",
                "astNodeNumber": 4,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "double"
        }
    ],
    "positionList": [
        {
            "charLength": 1,
            "startLineNumber": 1300,
            "startColumnNumber": 12,
            "endLineNumber": 1300,
            "endColumnNumber": 13
        },
        {
            "charLength": 1,
            "startLineNumber": 1305,
            "startColumnNumber": 12,
            "endLineNumber": 1305,
            "endColumnNumber": 13
        },
        {
            "charLength": 1,
            "startLineNumber": 1310,
            "startColumnNumber": 12,
            "endLineNumber": 1310,
            "endColumnNumber": 13
        },
        {
            "charLength": 1,
            "startLineNumber": 1315,
            "startColumnNumber": 12,
            "endLineNumber": 1315,
            "endColumnNumber": 13
        },
        {
            "charLength": 1,
            "startLineNumber": 1320,
            "startColumnNumber": 12,
            "endLineNumber": 1320,
            "endColumnNumber": 13
        },
        {
            "charLength": 1,
            "startLineNumber": 1324,
            "startColumnNumber": 24,
            "endLineNumber": 1324,
            "endColumnNumber": 25
        },
        {
            "charLength": 1,
            "startLineNumber": 1327,
            "startColumnNumber": 19,
            "endLineNumber": 1327,
            "endColumnNumber": 20
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 5,
            "layout": 2
        }
    ]
}