{
    "id": 1891,
    "expression": "1",
    "projectName": "commons-compress",
    "commitID": "46ad24db76c6f65480736006c2da8b8e5bf8ee25",
    "filePath": "src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java",
    "occurrences": 27,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 0,
    "expressionList": [
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 469,
                "startColumnNumber": 23,
                "endLineNumber": 469,
                "endColumnNumber": 24
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 10,
                        "startLineNumber": 469,
                        "startColumnNumber": 14,
                        "endLineNumber": 469,
                        "endColumnNumber": 24
                    },
                    "nodeContext": "nInUse + 1",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 16,
                        "startLineNumber": 469,
                        "startColumnNumber": 8,
                        "endLineNumber": 469,
                        "endColumnNumber": 24
                    },
                    "nodeContext": "EOB=nInUse + 1",
                    "nodeType": "Assignment",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 17,
                        "startLineNumber": 469,
                        "startColumnNumber": 8,
                        "endLineNumber": 469,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "EOB=nInUse + 1;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 6,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 7015,
                        "startLineNumber": 460,
                        "startColumnNumber": 43,
                        "endLineNumber": 664,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  char[] yy=new char[256];\n  int i, j, nextSym, limitLast;\n  int EOB, groupNo, groupPos;\n  limitLast=baseBlockSize * blockSize100k;\n  origPtr=bsGetIntVS(24);\n  recvDecodingTables();\n  EOB=nInUse + 1;\n  groupNo=-1;\n  groupPos=0;\n  for (i=0; i <= 255; i++) {\n    unzftab[i]=0;\n  }\n  for (i=0; i <= 255; i++) {\n    yy[i]=(char)i;\n  }\n  last=-1;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  while (true) {\n    if (nextSym == EOB) {\n      break;\n    }\n    if (nextSym == RUNA || nextSym == RUNB) {\n      char ch;\n      int s=-1;\n      int N=1;\n      do {\n        if (nextSym == RUNA) {\n          s=s + (0 + 1) * N;\n        }\n else         if (nextSym == RUNB) {\n          s=s + (1 + 1) * N;\n        }\n        N=N * 2;\n{\n          int zt, zn, zvec, zj;\n          if (groupPos == 0) {\n            groupNo++;\n            groupPos=G_SIZE;\n          }\n          groupPos--;\n          zt=selector[groupNo];\n          zn=minLens[zt];\n          zvec=bsR(zn);\n          while (zvec > limit[zt][zn]) {\n            zn++;\n{\n{\n                while (bsLive < 1) {\n                  int zzi;\n                  char thech=0;\n                  try {\n                    thech=(char)bsStream.read();\n                  }\n catch (                  IOException e) {\n                    compressedStreamEOF();\n                  }\n                  if (thech == -1) {\n                    compressedStreamEOF();\n                  }\n                  zzi=thech;\n                  bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                  bsLive+=8;\n                }\n              }\n              zj=(bsBuff >> (bsLive - 1)) & 1;\n              bsLive--;\n            }\n            zvec=(zvec << 1) | zj;\n          }\n          nextSym=perm[zt][zvec - base[zt][zn]];\n        }\n      }\n while (nextSym == RUNA || nextSym == RUNB);\n      s++;\n      ch=seqToUnseq[yy[0]];\n      unzftab[ch]+=s;\n      while (s > 0) {\n        last++;\n        ll8[last]=ch;\n        s--;\n      }\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      continue;\n    }\n else {\n      char tmp;\n      last++;\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      tmp=yy[nextSym - 1];\n      unzftab[seqToUnseq[tmp]]++;\n      ll8[last]=seqToUnseq[tmp];\n      j=nextSym - 1;\n      for (; j > 3; j-=4) {\n        yy[j]=yy[j - 1];\n        yy[j - 1]=yy[j - 2];\n        yy[j - 2]=yy[j - 3];\n        yy[j - 3]=yy[j - 4];\n      }\n      for (; j > 0; j--) {\n        yy[j]=yy[j - 1];\n      }\n      yy[0]=tmp;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n      continue;\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 810,
                    "astHeight": 21
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7054,
                        "startLineNumber": 460,
                        "startColumnNumber": 4,
                        "endLineNumber": 664,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void getAndMoveToFrontDecode(){\n  char[] yy=new char[256];\n  int i, j, nextSym, limitLast;\n  int EOB, groupNo, groupPos;\n  limitLast=baseBlockSize * blockSize100k;\n  origPtr=bsGetIntVS(24);\n  recvDecodingTables();\n  EOB=nInUse + 1;\n  groupNo=-1;\n  groupPos=0;\n  for (i=0; i <= 255; i++) {\n    unzftab[i]=0;\n  }\n  for (i=0; i <= 255; i++) {\n    yy[i]=(char)i;\n  }\n  last=-1;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  while (true) {\n    if (nextSym == EOB) {\n      break;\n    }\n    if (nextSym == RUNA || nextSym == RUNB) {\n      char ch;\n      int s=-1;\n      int N=1;\n      do {\n        if (nextSym == RUNA) {\n          s=s + (0 + 1) * N;\n        }\n else         if (nextSym == RUNB) {\n          s=s + (1 + 1) * N;\n        }\n        N=N * 2;\n{\n          int zt, zn, zvec, zj;\n          if (groupPos == 0) {\n            groupNo++;\n            groupPos=G_SIZE;\n          }\n          groupPos--;\n          zt=selector[groupNo];\n          zn=minLens[zt];\n          zvec=bsR(zn);\n          while (zvec > limit[zt][zn]) {\n            zn++;\n{\n{\n                while (bsLive < 1) {\n                  int zzi;\n                  char thech=0;\n                  try {\n                    thech=(char)bsStream.read();\n                  }\n catch (                  IOException e) {\n                    compressedStreamEOF();\n                  }\n                  if (thech == -1) {\n                    compressedStreamEOF();\n                  }\n                  zzi=thech;\n                  bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                  bsLive+=8;\n                }\n              }\n              zj=(bsBuff >> (bsLive - 1)) & 1;\n              bsLive--;\n            }\n            zvec=(zvec << 1) | zj;\n          }\n          nextSym=perm[zt][zvec - base[zt][zn]];\n        }\n      }\n while (nextSym == RUNA || nextSym == RUNB);\n      s++;\n      ch=seqToUnseq[yy[0]];\n      unzftab[ch]+=s;\n      while (s > 0) {\n        last++;\n        ll8[last]=ch;\n        s--;\n      }\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      continue;\n    }\n else {\n      char tmp;\n      last++;\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      tmp=yy[nextSym - 1];\n      unzftab[seqToUnseq[tmp]]++;\n      ll8[last]=seqToUnseq[tmp];\n      j=nextSym - 1;\n      for (; j > 3; j-=4) {\n        yy[j]=yy[j - 1];\n        yy[j - 1]=yy[j - 2];\n        yy[j - 2]=yy[j - 3];\n        yy[j - 3]=yy[j - 4];\n      }\n      for (; j > 0; j--) {\n        yy[j]=yy[j - 1];\n      }\n      yy[0]=tmp;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n      continue;\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 814,
                    "astHeight": 22
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 17,
                    "startLineNumber": 469,
                    "startColumnNumber": 8,
                    "endLineNumber": 469,
                    "endColumnNumber": 25
                },
                "nodeContext": "EOB=nInUse + 1;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 6,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 470,
                "startColumnNumber": 19,
                "endLineNumber": 470,
                "endColumnNumber": 20
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 2,
                        "startLineNumber": 470,
                        "startColumnNumber": 18,
                        "endLineNumber": 470,
                        "endColumnNumber": 20
                    },
                    "nodeContext": "-1",
                    "nodeType": "PrefixExpression",
                    "astNodeNumber": 2,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 12,
                        "startLineNumber": 470,
                        "startColumnNumber": 8,
                        "endLineNumber": 470,
                        "endColumnNumber": 20
                    },
                    "nodeContext": "groupNo=-1",
                    "nodeType": "Assignment",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 13,
                        "startLineNumber": 470,
                        "startColumnNumber": 8,
                        "endLineNumber": 470,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "groupNo=-1;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 5,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 7015,
                        "startLineNumber": 460,
                        "startColumnNumber": 43,
                        "endLineNumber": 664,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  char[] yy=new char[256];\n  int i, j, nextSym, limitLast;\n  int EOB, groupNo, groupPos;\n  limitLast=baseBlockSize * blockSize100k;\n  origPtr=bsGetIntVS(24);\n  recvDecodingTables();\n  EOB=nInUse + 1;\n  groupNo=-1;\n  groupPos=0;\n  for (i=0; i <= 255; i++) {\n    unzftab[i]=0;\n  }\n  for (i=0; i <= 255; i++) {\n    yy[i]=(char)i;\n  }\n  last=-1;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  while (true) {\n    if (nextSym == EOB) {\n      break;\n    }\n    if (nextSym == RUNA || nextSym == RUNB) {\n      char ch;\n      int s=-1;\n      int N=1;\n      do {\n        if (nextSym == RUNA) {\n          s=s + (0 + 1) * N;\n        }\n else         if (nextSym == RUNB) {\n          s=s + (1 + 1) * N;\n        }\n        N=N * 2;\n{\n          int zt, zn, zvec, zj;\n          if (groupPos == 0) {\n            groupNo++;\n            groupPos=G_SIZE;\n          }\n          groupPos--;\n          zt=selector[groupNo];\n          zn=minLens[zt];\n          zvec=bsR(zn);\n          while (zvec > limit[zt][zn]) {\n            zn++;\n{\n{\n                while (bsLive < 1) {\n                  int zzi;\n                  char thech=0;\n                  try {\n                    thech=(char)bsStream.read();\n                  }\n catch (                  IOException e) {\n                    compressedStreamEOF();\n                  }\n                  if (thech == -1) {\n                    compressedStreamEOF();\n                  }\n                  zzi=thech;\n                  bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                  bsLive+=8;\n                }\n              }\n              zj=(bsBuff >> (bsLive - 1)) & 1;\n              bsLive--;\n            }\n            zvec=(zvec << 1) | zj;\n          }\n          nextSym=perm[zt][zvec - base[zt][zn]];\n        }\n      }\n while (nextSym == RUNA || nextSym == RUNB);\n      s++;\n      ch=seqToUnseq[yy[0]];\n      unzftab[ch]+=s;\n      while (s > 0) {\n        last++;\n        ll8[last]=ch;\n        s--;\n      }\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      continue;\n    }\n else {\n      char tmp;\n      last++;\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      tmp=yy[nextSym - 1];\n      unzftab[seqToUnseq[tmp]]++;\n      ll8[last]=seqToUnseq[tmp];\n      j=nextSym - 1;\n      for (; j > 3; j-=4) {\n        yy[j]=yy[j - 1];\n        yy[j - 1]=yy[j - 2];\n        yy[j - 2]=yy[j - 3];\n        yy[j - 3]=yy[j - 4];\n      }\n      for (; j > 0; j--) {\n        yy[j]=yy[j - 1];\n      }\n      yy[0]=tmp;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n      continue;\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 810,
                    "astHeight": 21
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7054,
                        "startLineNumber": 460,
                        "startColumnNumber": 4,
                        "endLineNumber": 664,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void getAndMoveToFrontDecode(){\n  char[] yy=new char[256];\n  int i, j, nextSym, limitLast;\n  int EOB, groupNo, groupPos;\n  limitLast=baseBlockSize * blockSize100k;\n  origPtr=bsGetIntVS(24);\n  recvDecodingTables();\n  EOB=nInUse + 1;\n  groupNo=-1;\n  groupPos=0;\n  for (i=0; i <= 255; i++) {\n    unzftab[i]=0;\n  }\n  for (i=0; i <= 255; i++) {\n    yy[i]=(char)i;\n  }\n  last=-1;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  while (true) {\n    if (nextSym == EOB) {\n      break;\n    }\n    if (nextSym == RUNA || nextSym == RUNB) {\n      char ch;\n      int s=-1;\n      int N=1;\n      do {\n        if (nextSym == RUNA) {\n          s=s + (0 + 1) * N;\n        }\n else         if (nextSym == RUNB) {\n          s=s + (1 + 1) * N;\n        }\n        N=N * 2;\n{\n          int zt, zn, zvec, zj;\n          if (groupPos == 0) {\n            groupNo++;\n            groupPos=G_SIZE;\n          }\n          groupPos--;\n          zt=selector[groupNo];\n          zn=minLens[zt];\n          zvec=bsR(zn);\n          while (zvec > limit[zt][zn]) {\n            zn++;\n{\n{\n                while (bsLive < 1) {\n                  int zzi;\n                  char thech=0;\n                  try {\n                    thech=(char)bsStream.read();\n                  }\n catch (                  IOException e) {\n                    compressedStreamEOF();\n                  }\n                  if (thech == -1) {\n                    compressedStreamEOF();\n                  }\n                  zzi=thech;\n                  bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                  bsLive+=8;\n                }\n              }\n              zj=(bsBuff >> (bsLive - 1)) & 1;\n              bsLive--;\n            }\n            zvec=(zvec << 1) | zj;\n          }\n          nextSym=perm[zt][zvec - base[zt][zn]];\n        }\n      }\n while (nextSym == RUNA || nextSym == RUNB);\n      s++;\n      ch=seqToUnseq[yy[0]];\n      unzftab[ch]+=s;\n      while (s > 0) {\n        last++;\n        ll8[last]=ch;\n        s--;\n      }\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      continue;\n    }\n else {\n      char tmp;\n      last++;\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      tmp=yy[nextSym - 1];\n      unzftab[seqToUnseq[tmp]]++;\n      ll8[last]=seqToUnseq[tmp];\n      j=nextSym - 1;\n      for (; j > 3; j-=4) {\n        yy[j]=yy[j - 1];\n        yy[j - 1]=yy[j - 2];\n        yy[j - 2]=yy[j - 3];\n        yy[j - 3]=yy[j - 4];\n      }\n      for (; j > 0; j--) {\n        yy[j]=yy[j - 1];\n      }\n      yy[0]=tmp;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n      continue;\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 814,
                    "astHeight": 22
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 13,
                    "startLineNumber": 470,
                    "startColumnNumber": 8,
                    "endLineNumber": 470,
                    "endColumnNumber": 21
                },
                "nodeContext": "groupNo=-1;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 5,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 487,
                "startColumnNumber": 16,
                "endLineNumber": 487,
                "endColumnNumber": 17
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 2,
                        "startLineNumber": 487,
                        "startColumnNumber": 15,
                        "endLineNumber": 487,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "-1",
                    "nodeType": "PrefixExpression",
                    "astNodeNumber": 2,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 9,
                        "startLineNumber": 487,
                        "startColumnNumber": 8,
                        "endLineNumber": 487,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "last=-1",
                    "nodeType": "Assignment",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 10,
                        "startLineNumber": 487,
                        "startColumnNumber": 8,
                        "endLineNumber": 487,
                        "endColumnNumber": 18
                    },
                    "nodeContext": "last=-1;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 5,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 7015,
                        "startLineNumber": 460,
                        "startColumnNumber": 43,
                        "endLineNumber": 664,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  char[] yy=new char[256];\n  int i, j, nextSym, limitLast;\n  int EOB, groupNo, groupPos;\n  limitLast=baseBlockSize * blockSize100k;\n  origPtr=bsGetIntVS(24);\n  recvDecodingTables();\n  EOB=nInUse + 1;\n  groupNo=-1;\n  groupPos=0;\n  for (i=0; i <= 255; i++) {\n    unzftab[i]=0;\n  }\n  for (i=0; i <= 255; i++) {\n    yy[i]=(char)i;\n  }\n  last=-1;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  while (true) {\n    if (nextSym == EOB) {\n      break;\n    }\n    if (nextSym == RUNA || nextSym == RUNB) {\n      char ch;\n      int s=-1;\n      int N=1;\n      do {\n        if (nextSym == RUNA) {\n          s=s + (0 + 1) * N;\n        }\n else         if (nextSym == RUNB) {\n          s=s + (1 + 1) * N;\n        }\n        N=N * 2;\n{\n          int zt, zn, zvec, zj;\n          if (groupPos == 0) {\n            groupNo++;\n            groupPos=G_SIZE;\n          }\n          groupPos--;\n          zt=selector[groupNo];\n          zn=minLens[zt];\n          zvec=bsR(zn);\n          while (zvec > limit[zt][zn]) {\n            zn++;\n{\n{\n                while (bsLive < 1) {\n                  int zzi;\n                  char thech=0;\n                  try {\n                    thech=(char)bsStream.read();\n                  }\n catch (                  IOException e) {\n                    compressedStreamEOF();\n                  }\n                  if (thech == -1) {\n                    compressedStreamEOF();\n                  }\n                  zzi=thech;\n                  bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                  bsLive+=8;\n                }\n              }\n              zj=(bsBuff >> (bsLive - 1)) & 1;\n              bsLive--;\n            }\n            zvec=(zvec << 1) | zj;\n          }\n          nextSym=perm[zt][zvec - base[zt][zn]];\n        }\n      }\n while (nextSym == RUNA || nextSym == RUNB);\n      s++;\n      ch=seqToUnseq[yy[0]];\n      unzftab[ch]+=s;\n      while (s > 0) {\n        last++;\n        ll8[last]=ch;\n        s--;\n      }\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      continue;\n    }\n else {\n      char tmp;\n      last++;\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      tmp=yy[nextSym - 1];\n      unzftab[seqToUnseq[tmp]]++;\n      ll8[last]=seqToUnseq[tmp];\n      j=nextSym - 1;\n      for (; j > 3; j-=4) {\n        yy[j]=yy[j - 1];\n        yy[j - 1]=yy[j - 2];\n        yy[j - 2]=yy[j - 3];\n        yy[j - 3]=yy[j - 4];\n      }\n      for (; j > 0; j--) {\n        yy[j]=yy[j - 1];\n      }\n      yy[0]=tmp;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n      continue;\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 810,
                    "astHeight": 21
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7054,
                        "startLineNumber": 460,
                        "startColumnNumber": 4,
                        "endLineNumber": 664,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void getAndMoveToFrontDecode(){\n  char[] yy=new char[256];\n  int i, j, nextSym, limitLast;\n  int EOB, groupNo, groupPos;\n  limitLast=baseBlockSize * blockSize100k;\n  origPtr=bsGetIntVS(24);\n  recvDecodingTables();\n  EOB=nInUse + 1;\n  groupNo=-1;\n  groupPos=0;\n  for (i=0; i <= 255; i++) {\n    unzftab[i]=0;\n  }\n  for (i=0; i <= 255; i++) {\n    yy[i]=(char)i;\n  }\n  last=-1;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  while (true) {\n    if (nextSym == EOB) {\n      break;\n    }\n    if (nextSym == RUNA || nextSym == RUNB) {\n      char ch;\n      int s=-1;\n      int N=1;\n      do {\n        if (nextSym == RUNA) {\n          s=s + (0 + 1) * N;\n        }\n else         if (nextSym == RUNB) {\n          s=s + (1 + 1) * N;\n        }\n        N=N * 2;\n{\n          int zt, zn, zvec, zj;\n          if (groupPos == 0) {\n            groupNo++;\n            groupPos=G_SIZE;\n          }\n          groupPos--;\n          zt=selector[groupNo];\n          zn=minLens[zt];\n          zvec=bsR(zn);\n          while (zvec > limit[zt][zn]) {\n            zn++;\n{\n{\n                while (bsLive < 1) {\n                  int zzi;\n                  char thech=0;\n                  try {\n                    thech=(char)bsStream.read();\n                  }\n catch (                  IOException e) {\n                    compressedStreamEOF();\n                  }\n                  if (thech == -1) {\n                    compressedStreamEOF();\n                  }\n                  zzi=thech;\n                  bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                  bsLive+=8;\n                }\n              }\n              zj=(bsBuff >> (bsLive - 1)) & 1;\n              bsLive--;\n            }\n            zvec=(zvec << 1) | zj;\n          }\n          nextSym=perm[zt][zvec - base[zt][zn]];\n        }\n      }\n while (nextSym == RUNA || nextSym == RUNB);\n      s++;\n      ch=seqToUnseq[yy[0]];\n      unzftab[ch]+=s;\n      while (s > 0) {\n        last++;\n        ll8[last]=ch;\n        s--;\n      }\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      continue;\n    }\n else {\n      char tmp;\n      last++;\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      tmp=yy[nextSym - 1];\n      unzftab[seqToUnseq[tmp]]++;\n      ll8[last]=seqToUnseq[tmp];\n      j=nextSym - 1;\n      for (; j > 3; j-=4) {\n        yy[j]=yy[j - 1];\n        yy[j - 1]=yy[j - 2];\n        yy[j - 2]=yy[j - 3];\n        yy[j - 3]=yy[j - 4];\n      }\n      for (; j > 0; j--) {\n        yy[j]=yy[j - 1];\n      }\n      yy[0]=tmp;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n      continue;\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 814,
                    "astHeight": 22
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 10,
                    "startLineNumber": 487,
                    "startColumnNumber": 8,
                    "endLineNumber": 487,
                    "endColumnNumber": 18
                },
                "nodeContext": "last=-1;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 5,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 503,
                "startColumnNumber": 40,
                "endLineNumber": 503,
                "endColumnNumber": 41
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
                    "nodePosition": {
                        "charLength": 10,
                        "startLineNumber": 503,
                        "startColumnNumber": 31,
                        "endLineNumber": 503,
                        "endColumnNumber": 41
                    },
                    "nodeContext": "bsLive < 1",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 645,
                        "startLineNumber": 503,
                        "startColumnNumber": 24,
                        "endLineNumber": 517,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "while (bsLive < 1) {\n  int zzi;\n  char thech=0;\n  try {\n    thech=(char)bsStream.read();\n  }\n catch (  IOException e) {\n    compressedStreamEOF();\n  }\n  if (thech == -1) {\n    compressedStreamEOF();\n  }\n  zzi=thech;\n  bsBuff=(bsBuff << 8) | (zzi & 0xff);\n  bsLive+=8;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 62,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 693,
                        "startLineNumber": 502,
                        "startColumnNumber": 20,
                        "endLineNumber": 518,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  while (bsLive < 1) {\n    int zzi;\n    char thech=0;\n    try {\n      thech=(char)bsStream.read();\n    }\n catch (    IOException e) {\n      compressedStreamEOF();\n    }\n    if (thech == -1) {\n      compressedStreamEOF();\n    }\n    zzi=thech;\n    bsBuff=(bsBuff << 8) | (zzi & 0xff);\n    bsLive+=8;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 63,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 818,
                        "startLineNumber": 501,
                        "startColumnNumber": 16,
                        "endLineNumber": 521,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n{\n    while (bsLive < 1) {\n      int zzi;\n      char thech=0;\n      try {\n        thech=(char)bsStream.read();\n      }\n catch (      IOException e) {\n        compressedStreamEOF();\n      }\n      if (thech == -1) {\n        compressedStreamEOF();\n      }\n      zzi=thech;\n      bsBuff=(bsBuff << 8) | (zzi & 0xff);\n      bsLive+=8;\n    }\n  }\n  zj=(bsBuff >> (bsLive - 1)) & 1;\n  bsLive--;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 79,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 913,
                        "startLineNumber": 499,
                        "startColumnNumber": 41,
                        "endLineNumber": 523,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  zn++;\n{\n{\n      while (bsLive < 1) {\n        int zzi;\n        char thech=0;\n        try {\n          thech=(char)bsStream.read();\n        }\n catch (        IOException e) {\n          compressedStreamEOF();\n        }\n        if (thech == -1) {\n          compressedStreamEOF();\n        }\n        zzi=thech;\n        bsBuff=(bsBuff << 8) | (zzi & 0xff);\n        bsLive+=8;\n      }\n    }\n    zj=(bsBuff >> (bsLive - 1)) & 1;\n    bsLive--;\n  }\n  zvec=(zvec << 1) | zj;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 92,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 942,
                        "startLineNumber": 499,
                        "startColumnNumber": 12,
                        "endLineNumber": 523,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "while (zvec > limit[zt][zn]) {\n  zn++;\n{\n{\n      while (bsLive < 1) {\n        int zzi;\n        char thech=0;\n        try {\n          thech=(char)bsStream.read();\n        }\n catch (        IOException e) {\n          compressedStreamEOF();\n        }\n        if (thech == -1) {\n          compressedStreamEOF();\n        }\n        zzi=thech;\n        bsBuff=(bsBuff << 8) | (zzi & 0xff);\n        bsLive+=8;\n      }\n    }\n    zj=(bsBuff >> (bsLive - 1)) & 1;\n    bsLive--;\n  }\n  zvec=(zvec << 1) | zj;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 100,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1280,
                        "startLineNumber": 489,
                        "startColumnNumber": 8,
                        "endLineNumber": 525,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  int zt, zn, zvec, zj;\n  if (groupPos == 0) {\n    groupNo++;\n    groupPos=G_SIZE;\n  }\n  groupPos--;\n  zt=selector[groupNo];\n  zn=minLens[zt];\n  zvec=bsR(zn);\n  while (zvec > limit[zt][zn]) {\n    zn++;\n{\n{\n        while (bsLive < 1) {\n          int zzi;\n          char thech=0;\n          try {\n            thech=(char)bsStream.read();\n          }\n catch (          IOException e) {\n            compressedStreamEOF();\n          }\n          if (thech == -1) {\n            compressedStreamEOF();\n          }\n          zzi=thech;\n          bsBuff=(bsBuff << 8) | (zzi & 0xff);\n          bsLive+=8;\n        }\n      }\n      zj=(bsBuff >> (bsLive - 1)) & 1;\n      bsLive--;\n    }\n    zvec=(zvec << 1) | zj;\n  }\n  nextSym=perm[zt][zvec - base[zt][zn]];\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 158,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 7015,
                        "startLineNumber": 460,
                        "startColumnNumber": 43,
                        "endLineNumber": 664,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  char[] yy=new char[256];\n  int i, j, nextSym, limitLast;\n  int EOB, groupNo, groupPos;\n  limitLast=baseBlockSize * blockSize100k;\n  origPtr=bsGetIntVS(24);\n  recvDecodingTables();\n  EOB=nInUse + 1;\n  groupNo=-1;\n  groupPos=0;\n  for (i=0; i <= 255; i++) {\n    unzftab[i]=0;\n  }\n  for (i=0; i <= 255; i++) {\n    yy[i]=(char)i;\n  }\n  last=-1;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  while (true) {\n    if (nextSym == EOB) {\n      break;\n    }\n    if (nextSym == RUNA || nextSym == RUNB) {\n      char ch;\n      int s=-1;\n      int N=1;\n      do {\n        if (nextSym == RUNA) {\n          s=s + (0 + 1) * N;\n        }\n else         if (nextSym == RUNB) {\n          s=s + (1 + 1) * N;\n        }\n        N=N * 2;\n{\n          int zt, zn, zvec, zj;\n          if (groupPos == 0) {\n            groupNo++;\n            groupPos=G_SIZE;\n          }\n          groupPos--;\n          zt=selector[groupNo];\n          zn=minLens[zt];\n          zvec=bsR(zn);\n          while (zvec > limit[zt][zn]) {\n            zn++;\n{\n{\n                while (bsLive < 1) {\n                  int zzi;\n                  char thech=0;\n                  try {\n                    thech=(char)bsStream.read();\n                  }\n catch (                  IOException e) {\n                    compressedStreamEOF();\n                  }\n                  if (thech == -1) {\n                    compressedStreamEOF();\n                  }\n                  zzi=thech;\n                  bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                  bsLive+=8;\n                }\n              }\n              zj=(bsBuff >> (bsLive - 1)) & 1;\n              bsLive--;\n            }\n            zvec=(zvec << 1) | zj;\n          }\n          nextSym=perm[zt][zvec - base[zt][zn]];\n        }\n      }\n while (nextSym == RUNA || nextSym == RUNB);\n      s++;\n      ch=seqToUnseq[yy[0]];\n      unzftab[ch]+=s;\n      while (s > 0) {\n        last++;\n        ll8[last]=ch;\n        s--;\n      }\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      continue;\n    }\n else {\n      char tmp;\n      last++;\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      tmp=yy[nextSym - 1];\n      unzftab[seqToUnseq[tmp]]++;\n      ll8[last]=seqToUnseq[tmp];\n      j=nextSym - 1;\n      for (; j > 3; j-=4) {\n        yy[j]=yy[j - 1];\n        yy[j - 1]=yy[j - 2];\n        yy[j - 2]=yy[j - 3];\n        yy[j - 3]=yy[j - 4];\n      }\n      for (; j > 0; j--) {\n        yy[j]=yy[j - 1];\n      }\n      yy[0]=tmp;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n      continue;\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 810,
                    "astHeight": 21
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7054,
                        "startLineNumber": 460,
                        "startColumnNumber": 4,
                        "endLineNumber": 664,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void getAndMoveToFrontDecode(){\n  char[] yy=new char[256];\n  int i, j, nextSym, limitLast;\n  int EOB, groupNo, groupPos;\n  limitLast=baseBlockSize * blockSize100k;\n  origPtr=bsGetIntVS(24);\n  recvDecodingTables();\n  EOB=nInUse + 1;\n  groupNo=-1;\n  groupPos=0;\n  for (i=0; i <= 255; i++) {\n    unzftab[i]=0;\n  }\n  for (i=0; i <= 255; i++) {\n    yy[i]=(char)i;\n  }\n  last=-1;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  while (true) {\n    if (nextSym == EOB) {\n      break;\n    }\n    if (nextSym == RUNA || nextSym == RUNB) {\n      char ch;\n      int s=-1;\n      int N=1;\n      do {\n        if (nextSym == RUNA) {\n          s=s + (0 + 1) * N;\n        }\n else         if (nextSym == RUNB) {\n          s=s + (1 + 1) * N;\n        }\n        N=N * 2;\n{\n          int zt, zn, zvec, zj;\n          if (groupPos == 0) {\n            groupNo++;\n            groupPos=G_SIZE;\n          }\n          groupPos--;\n          zt=selector[groupNo];\n          zn=minLens[zt];\n          zvec=bsR(zn);\n          while (zvec > limit[zt][zn]) {\n            zn++;\n{\n{\n                while (bsLive < 1) {\n                  int zzi;\n                  char thech=0;\n                  try {\n                    thech=(char)bsStream.read();\n                  }\n catch (                  IOException e) {\n                    compressedStreamEOF();\n                  }\n                  if (thech == -1) {\n                    compressedStreamEOF();\n                  }\n                  zzi=thech;\n                  bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                  bsLive+=8;\n                }\n              }\n              zj=(bsBuff >> (bsLive - 1)) & 1;\n              bsLive--;\n            }\n            zvec=(zvec << 1) | zj;\n          }\n          nextSym=perm[zt][zvec - base[zt][zn]];\n        }\n      }\n while (nextSym == RUNA || nextSym == RUNB);\n      s++;\n      ch=seqToUnseq[yy[0]];\n      unzftab[ch]+=s;\n      while (s > 0) {\n        last++;\n        ll8[last]=ch;\n        s--;\n      }\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      continue;\n    }\n else {\n      char tmp;\n      last++;\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      tmp=yy[nextSym - 1];\n      unzftab[seqToUnseq[tmp]]++;\n      ll8[last]=seqToUnseq[tmp];\n      j=nextSym - 1;\n      for (; j > 3; j-=4) {\n        yy[j]=yy[j - 1];\n        yy[j - 1]=yy[j - 2];\n        yy[j - 2]=yy[j - 3];\n        yy[j - 3]=yy[j - 4];\n      }\n      for (; j > 0; j--) {\n        yy[j]=yy[j - 1];\n      }\n      yy[0]=tmp;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n      continue;\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 814,
                    "astHeight": 22
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
                "nodePosition": {
                    "charLength": 10,
                    "startLineNumber": 503,
                    "startColumnNumber": 31,
                    "endLineNumber": 503,
                    "endColumnNumber": 41
                },
                "nodeContext": "bsLive < 1",
                "nodeType": "InfixExpression",
                "astNodeNumber": 3,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 511,
                "startColumnNumber": 42,
                "endLineNumber": 511,
                "endColumnNumber": 43
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 2,
                        "startLineNumber": 511,
                        "startColumnNumber": 41,
                        "endLineNumber": 511,
                        "endColumnNumber": 43
                    },
                    "nodeContext": "-1",
                    "nodeType": "PrefixExpression",
                    "astNodeNumber": 2,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 11,
                        "startLineNumber": 511,
                        "startColumnNumber": 32,
                        "endLineNumber": 511,
                        "endColumnNumber": 43
                    },
                    "nodeContext": "thech == -1",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 103,
                        "startLineNumber": 511,
                        "startColumnNumber": 28,
                        "endLineNumber": 513,
                        "endColumnNumber": 29
                    },
                    "nodeContext": "if (thech == -1) {\n  compressedStreamEOF();\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 9,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 626,
                        "startLineNumber": 503,
                        "startColumnNumber": 43,
                        "endLineNumber": 517,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "{\n  int zzi;\n  char thech=0;\n  try {\n    thech=(char)bsStream.read();\n  }\n catch (  IOException e) {\n    compressedStreamEOF();\n  }\n  if (thech == -1) {\n    compressedStreamEOF();\n  }\n  zzi=thech;\n  bsBuff=(bsBuff << 8) | (zzi & 0xff);\n  bsLive+=8;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 58,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 645,
                        "startLineNumber": 503,
                        "startColumnNumber": 24,
                        "endLineNumber": 517,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "while (bsLive < 1) {\n  int zzi;\n  char thech=0;\n  try {\n    thech=(char)bsStream.read();\n  }\n catch (  IOException e) {\n    compressedStreamEOF();\n  }\n  if (thech == -1) {\n    compressedStreamEOF();\n  }\n  zzi=thech;\n  bsBuff=(bsBuff << 8) | (zzi & 0xff);\n  bsLive+=8;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 62,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 693,
                        "startLineNumber": 502,
                        "startColumnNumber": 20,
                        "endLineNumber": 518,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  while (bsLive < 1) {\n    int zzi;\n    char thech=0;\n    try {\n      thech=(char)bsStream.read();\n    }\n catch (    IOException e) {\n      compressedStreamEOF();\n    }\n    if (thech == -1) {\n      compressedStreamEOF();\n    }\n    zzi=thech;\n    bsBuff=(bsBuff << 8) | (zzi & 0xff);\n    bsLive+=8;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 63,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 818,
                        "startLineNumber": 501,
                        "startColumnNumber": 16,
                        "endLineNumber": 521,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n{\n    while (bsLive < 1) {\n      int zzi;\n      char thech=0;\n      try {\n        thech=(char)bsStream.read();\n      }\n catch (      IOException e) {\n        compressedStreamEOF();\n      }\n      if (thech == -1) {\n        compressedStreamEOF();\n      }\n      zzi=thech;\n      bsBuff=(bsBuff << 8) | (zzi & 0xff);\n      bsLive+=8;\n    }\n  }\n  zj=(bsBuff >> (bsLive - 1)) & 1;\n  bsLive--;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 79,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 913,
                        "startLineNumber": 499,
                        "startColumnNumber": 41,
                        "endLineNumber": 523,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  zn++;\n{\n{\n      while (bsLive < 1) {\n        int zzi;\n        char thech=0;\n        try {\n          thech=(char)bsStream.read();\n        }\n catch (        IOException e) {\n          compressedStreamEOF();\n        }\n        if (thech == -1) {\n          compressedStreamEOF();\n        }\n        zzi=thech;\n        bsBuff=(bsBuff << 8) | (zzi & 0xff);\n        bsLive+=8;\n      }\n    }\n    zj=(bsBuff >> (bsLive - 1)) & 1;\n    bsLive--;\n  }\n  zvec=(zvec << 1) | zj;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 92,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 942,
                        "startLineNumber": 499,
                        "startColumnNumber": 12,
                        "endLineNumber": 523,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "while (zvec > limit[zt][zn]) {\n  zn++;\n{\n{\n      while (bsLive < 1) {\n        int zzi;\n        char thech=0;\n        try {\n          thech=(char)bsStream.read();\n        }\n catch (        IOException e) {\n          compressedStreamEOF();\n        }\n        if (thech == -1) {\n          compressedStreamEOF();\n        }\n        zzi=thech;\n        bsBuff=(bsBuff << 8) | (zzi & 0xff);\n        bsLive+=8;\n      }\n    }\n    zj=(bsBuff >> (bsLive - 1)) & 1;\n    bsLive--;\n  }\n  zvec=(zvec << 1) | zj;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 100,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1280,
                        "startLineNumber": 489,
                        "startColumnNumber": 8,
                        "endLineNumber": 525,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  int zt, zn, zvec, zj;\n  if (groupPos == 0) {\n    groupNo++;\n    groupPos=G_SIZE;\n  }\n  groupPos--;\n  zt=selector[groupNo];\n  zn=minLens[zt];\n  zvec=bsR(zn);\n  while (zvec > limit[zt][zn]) {\n    zn++;\n{\n{\n        while (bsLive < 1) {\n          int zzi;\n          char thech=0;\n          try {\n            thech=(char)bsStream.read();\n          }\n catch (          IOException e) {\n            compressedStreamEOF();\n          }\n          if (thech == -1) {\n            compressedStreamEOF();\n          }\n          zzi=thech;\n          bsBuff=(bsBuff << 8) | (zzi & 0xff);\n          bsLive+=8;\n        }\n      }\n      zj=(bsBuff >> (bsLive - 1)) & 1;\n      bsLive--;\n    }\n    zvec=(zvec << 1) | zj;\n  }\n  nextSym=perm[zt][zvec - base[zt][zn]];\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 158,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 7015,
                        "startLineNumber": 460,
                        "startColumnNumber": 43,
                        "endLineNumber": 664,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  char[] yy=new char[256];\n  int i, j, nextSym, limitLast;\n  int EOB, groupNo, groupPos;\n  limitLast=baseBlockSize * blockSize100k;\n  origPtr=bsGetIntVS(24);\n  recvDecodingTables();\n  EOB=nInUse + 1;\n  groupNo=-1;\n  groupPos=0;\n  for (i=0; i <= 255; i++) {\n    unzftab[i]=0;\n  }\n  for (i=0; i <= 255; i++) {\n    yy[i]=(char)i;\n  }\n  last=-1;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  while (true) {\n    if (nextSym == EOB) {\n      break;\n    }\n    if (nextSym == RUNA || nextSym == RUNB) {\n      char ch;\n      int s=-1;\n      int N=1;\n      do {\n        if (nextSym == RUNA) {\n          s=s + (0 + 1) * N;\n        }\n else         if (nextSym == RUNB) {\n          s=s + (1 + 1) * N;\n        }\n        N=N * 2;\n{\n          int zt, zn, zvec, zj;\n          if (groupPos == 0) {\n            groupNo++;\n            groupPos=G_SIZE;\n          }\n          groupPos--;\n          zt=selector[groupNo];\n          zn=minLens[zt];\n          zvec=bsR(zn);\n          while (zvec > limit[zt][zn]) {\n            zn++;\n{\n{\n                while (bsLive < 1) {\n                  int zzi;\n                  char thech=0;\n                  try {\n                    thech=(char)bsStream.read();\n                  }\n catch (                  IOException e) {\n                    compressedStreamEOF();\n                  }\n                  if (thech == -1) {\n                    compressedStreamEOF();\n                  }\n                  zzi=thech;\n                  bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                  bsLive+=8;\n                }\n              }\n              zj=(bsBuff >> (bsLive - 1)) & 1;\n              bsLive--;\n            }\n            zvec=(zvec << 1) | zj;\n          }\n          nextSym=perm[zt][zvec - base[zt][zn]];\n        }\n      }\n while (nextSym == RUNA || nextSym == RUNB);\n      s++;\n      ch=seqToUnseq[yy[0]];\n      unzftab[ch]+=s;\n      while (s > 0) {\n        last++;\n        ll8[last]=ch;\n        s--;\n      }\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      continue;\n    }\n else {\n      char tmp;\n      last++;\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      tmp=yy[nextSym - 1];\n      unzftab[seqToUnseq[tmp]]++;\n      ll8[last]=seqToUnseq[tmp];\n      j=nextSym - 1;\n      for (; j > 3; j-=4) {\n        yy[j]=yy[j - 1];\n        yy[j - 1]=yy[j - 2];\n        yy[j - 2]=yy[j - 3];\n        yy[j - 3]=yy[j - 4];\n      }\n      for (; j > 0; j--) {\n        yy[j]=yy[j - 1];\n      }\n      yy[0]=tmp;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n      continue;\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 810,
                    "astHeight": 21
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7054,
                        "startLineNumber": 460,
                        "startColumnNumber": 4,
                        "endLineNumber": 664,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void getAndMoveToFrontDecode(){\n  char[] yy=new char[256];\n  int i, j, nextSym, limitLast;\n  int EOB, groupNo, groupPos;\n  limitLast=baseBlockSize * blockSize100k;\n  origPtr=bsGetIntVS(24);\n  recvDecodingTables();\n  EOB=nInUse + 1;\n  groupNo=-1;\n  groupPos=0;\n  for (i=0; i <= 255; i++) {\n    unzftab[i]=0;\n  }\n  for (i=0; i <= 255; i++) {\n    yy[i]=(char)i;\n  }\n  last=-1;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  while (true) {\n    if (nextSym == EOB) {\n      break;\n    }\n    if (nextSym == RUNA || nextSym == RUNB) {\n      char ch;\n      int s=-1;\n      int N=1;\n      do {\n        if (nextSym == RUNA) {\n          s=s + (0 + 1) * N;\n        }\n else         if (nextSym == RUNB) {\n          s=s + (1 + 1) * N;\n        }\n        N=N * 2;\n{\n          int zt, zn, zvec, zj;\n          if (groupPos == 0) {\n            groupNo++;\n            groupPos=G_SIZE;\n          }\n          groupPos--;\n          zt=selector[groupNo];\n          zn=minLens[zt];\n          zvec=bsR(zn);\n          while (zvec > limit[zt][zn]) {\n            zn++;\n{\n{\n                while (bsLive < 1) {\n                  int zzi;\n                  char thech=0;\n                  try {\n                    thech=(char)bsStream.read();\n                  }\n catch (                  IOException e) {\n                    compressedStreamEOF();\n                  }\n                  if (thech == -1) {\n                    compressedStreamEOF();\n                  }\n                  zzi=thech;\n                  bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                  bsLive+=8;\n                }\n              }\n              zj=(bsBuff >> (bsLive - 1)) & 1;\n              bsLive--;\n            }\n            zvec=(zvec << 1) | zj;\n          }\n          nextSym=perm[zt][zvec - base[zt][zn]];\n        }\n      }\n while (nextSym == RUNA || nextSym == RUNB);\n      s++;\n      ch=seqToUnseq[yy[0]];\n      unzftab[ch]+=s;\n      while (s > 0) {\n        last++;\n        ll8[last]=ch;\n        s--;\n      }\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      continue;\n    }\n else {\n      char tmp;\n      last++;\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      tmp=yy[nextSym - 1];\n      unzftab[seqToUnseq[tmp]]++;\n      ll8[last]=seqToUnseq[tmp];\n      j=nextSym - 1;\n      for (; j > 3; j-=4) {\n        yy[j]=yy[j - 1];\n        yy[j - 1]=yy[j - 2];\n        yy[j - 2]=yy[j - 3];\n        yy[j - 3]=yy[j - 4];\n      }\n      for (; j > 0; j--) {\n        yy[j]=yy[j - 1];\n      }\n      yy[0]=tmp;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n      continue;\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 814,
                    "astHeight": 22
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 11,
                    "startLineNumber": 511,
                    "startColumnNumber": 32,
                    "endLineNumber": 511,
                    "endColumnNumber": 43
                },
                "nodeContext": "thech == -1",
                "nodeType": "InfixExpression",
                "astNodeNumber": 4,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 519,
                "startColumnNumber": 46,
                "endLineNumber": 519,
                "endColumnNumber": 47
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
                    "nodePosition": {
                        "charLength": 10,
                        "startLineNumber": 519,
                        "startColumnNumber": 37,
                        "endLineNumber": 519,
                        "endColumnNumber": 47
                    },
                    "nodeContext": "bsLive - 1",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 12,
                        "startLineNumber": 519,
                        "startColumnNumber": 36,
                        "endLineNumber": 519,
                        "endColumnNumber": 48
                    },
                    "nodeContext": "(bsLive - 1)",
                    "nodeType": "ParenthesizedExpression",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
                    "nodePosition": {
                        "charLength": 22,
                        "startLineNumber": 519,
                        "startColumnNumber": 26,
                        "endLineNumber": 519,
                        "endColumnNumber": 48
                    },
                    "nodeContext": "bsBuff >> (bsLive - 1)",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 6,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 24,
                        "startLineNumber": 519,
                        "startColumnNumber": 25,
                        "endLineNumber": 519,
                        "endColumnNumber": 49
                    },
                    "nodeContext": "(bsBuff >> (bsLive - 1))",
                    "nodeType": "ParenthesizedExpression",
                    "astNodeNumber": 7,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 28,
                        "startLineNumber": 519,
                        "startColumnNumber": 25,
                        "endLineNumber": 519,
                        "endColumnNumber": 53
                    },
                    "nodeContext": "(bsBuff >> (bsLive - 1)) & 1",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 9,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 33,
                        "startLineNumber": 519,
                        "startColumnNumber": 20,
                        "endLineNumber": 519,
                        "endColumnNumber": 53
                    },
                    "nodeContext": "zj=(bsBuff >> (bsLive - 1)) & 1",
                    "nodeType": "Assignment",
                    "astNodeNumber": 11,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 34,
                        "startLineNumber": 519,
                        "startColumnNumber": 20,
                        "endLineNumber": 519,
                        "endColumnNumber": 54
                    },
                    "nodeContext": "zj=(bsBuff >> (bsLive - 1)) & 1;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 12,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 818,
                        "startLineNumber": 501,
                        "startColumnNumber": 16,
                        "endLineNumber": 521,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n{\n    while (bsLive < 1) {\n      int zzi;\n      char thech=0;\n      try {\n        thech=(char)bsStream.read();\n      }\n catch (      IOException e) {\n        compressedStreamEOF();\n      }\n      if (thech == -1) {\n        compressedStreamEOF();\n      }\n      zzi=thech;\n      bsBuff=(bsBuff << 8) | (zzi & 0xff);\n      bsLive+=8;\n    }\n  }\n  zj=(bsBuff >> (bsLive - 1)) & 1;\n  bsLive--;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 79,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 913,
                        "startLineNumber": 499,
                        "startColumnNumber": 41,
                        "endLineNumber": 523,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  zn++;\n{\n{\n      while (bsLive < 1) {\n        int zzi;\n        char thech=0;\n        try {\n          thech=(char)bsStream.read();\n        }\n catch (        IOException e) {\n          compressedStreamEOF();\n        }\n        if (thech == -1) {\n          compressedStreamEOF();\n        }\n        zzi=thech;\n        bsBuff=(bsBuff << 8) | (zzi & 0xff);\n        bsLive+=8;\n      }\n    }\n    zj=(bsBuff >> (bsLive - 1)) & 1;\n    bsLive--;\n  }\n  zvec=(zvec << 1) | zj;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 92,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 942,
                        "startLineNumber": 499,
                        "startColumnNumber": 12,
                        "endLineNumber": 523,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "while (zvec > limit[zt][zn]) {\n  zn++;\n{\n{\n      while (bsLive < 1) {\n        int zzi;\n        char thech=0;\n        try {\n          thech=(char)bsStream.read();\n        }\n catch (        IOException e) {\n          compressedStreamEOF();\n        }\n        if (thech == -1) {\n          compressedStreamEOF();\n        }\n        zzi=thech;\n        bsBuff=(bsBuff << 8) | (zzi & 0xff);\n        bsLive+=8;\n      }\n    }\n    zj=(bsBuff >> (bsLive - 1)) & 1;\n    bsLive--;\n  }\n  zvec=(zvec << 1) | zj;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 100,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1280,
                        "startLineNumber": 489,
                        "startColumnNumber": 8,
                        "endLineNumber": 525,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  int zt, zn, zvec, zj;\n  if (groupPos == 0) {\n    groupNo++;\n    groupPos=G_SIZE;\n  }\n  groupPos--;\n  zt=selector[groupNo];\n  zn=minLens[zt];\n  zvec=bsR(zn);\n  while (zvec > limit[zt][zn]) {\n    zn++;\n{\n{\n        while (bsLive < 1) {\n          int zzi;\n          char thech=0;\n          try {\n            thech=(char)bsStream.read();\n          }\n catch (          IOException e) {\n            compressedStreamEOF();\n          }\n          if (thech == -1) {\n            compressedStreamEOF();\n          }\n          zzi=thech;\n          bsBuff=(bsBuff << 8) | (zzi & 0xff);\n          bsLive+=8;\n        }\n      }\n      zj=(bsBuff >> (bsLive - 1)) & 1;\n      bsLive--;\n    }\n    zvec=(zvec << 1) | zj;\n  }\n  nextSym=perm[zt][zvec - base[zt][zn]];\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 158,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 7015,
                        "startLineNumber": 460,
                        "startColumnNumber": 43,
                        "endLineNumber": 664,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  char[] yy=new char[256];\n  int i, j, nextSym, limitLast;\n  int EOB, groupNo, groupPos;\n  limitLast=baseBlockSize * blockSize100k;\n  origPtr=bsGetIntVS(24);\n  recvDecodingTables();\n  EOB=nInUse + 1;\n  groupNo=-1;\n  groupPos=0;\n  for (i=0; i <= 255; i++) {\n    unzftab[i]=0;\n  }\n  for (i=0; i <= 255; i++) {\n    yy[i]=(char)i;\n  }\n  last=-1;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  while (true) {\n    if (nextSym == EOB) {\n      break;\n    }\n    if (nextSym == RUNA || nextSym == RUNB) {\n      char ch;\n      int s=-1;\n      int N=1;\n      do {\n        if (nextSym == RUNA) {\n          s=s + (0 + 1) * N;\n        }\n else         if (nextSym == RUNB) {\n          s=s + (1 + 1) * N;\n        }\n        N=N * 2;\n{\n          int zt, zn, zvec, zj;\n          if (groupPos == 0) {\n            groupNo++;\n            groupPos=G_SIZE;\n          }\n          groupPos--;\n          zt=selector[groupNo];\n          zn=minLens[zt];\n          zvec=bsR(zn);\n          while (zvec > limit[zt][zn]) {\n            zn++;\n{\n{\n                while (bsLive < 1) {\n                  int zzi;\n                  char thech=0;\n                  try {\n                    thech=(char)bsStream.read();\n                  }\n catch (                  IOException e) {\n                    compressedStreamEOF();\n                  }\n                  if (thech == -1) {\n                    compressedStreamEOF();\n                  }\n                  zzi=thech;\n                  bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                  bsLive+=8;\n                }\n              }\n              zj=(bsBuff >> (bsLive - 1)) & 1;\n              bsLive--;\n            }\n            zvec=(zvec << 1) | zj;\n          }\n          nextSym=perm[zt][zvec - base[zt][zn]];\n        }\n      }\n while (nextSym == RUNA || nextSym == RUNB);\n      s++;\n      ch=seqToUnseq[yy[0]];\n      unzftab[ch]+=s;\n      while (s > 0) {\n        last++;\n        ll8[last]=ch;\n        s--;\n      }\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      continue;\n    }\n else {\n      char tmp;\n      last++;\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      tmp=yy[nextSym - 1];\n      unzftab[seqToUnseq[tmp]]++;\n      ll8[last]=seqToUnseq[tmp];\n      j=nextSym - 1;\n      for (; j > 3; j-=4) {\n        yy[j]=yy[j - 1];\n        yy[j - 1]=yy[j - 2];\n        yy[j - 2]=yy[j - 3];\n        yy[j - 3]=yy[j - 4];\n      }\n      for (; j > 0; j--) {\n        yy[j]=yy[j - 1];\n      }\n      yy[0]=tmp;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n      continue;\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 810,
                    "astHeight": 21
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7054,
                        "startLineNumber": 460,
                        "startColumnNumber": 4,
                        "endLineNumber": 664,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void getAndMoveToFrontDecode(){\n  char[] yy=new char[256];\n  int i, j, nextSym, limitLast;\n  int EOB, groupNo, groupPos;\n  limitLast=baseBlockSize * blockSize100k;\n  origPtr=bsGetIntVS(24);\n  recvDecodingTables();\n  EOB=nInUse + 1;\n  groupNo=-1;\n  groupPos=0;\n  for (i=0; i <= 255; i++) {\n    unzftab[i]=0;\n  }\n  for (i=0; i <= 255; i++) {\n    yy[i]=(char)i;\n  }\n  last=-1;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  while (true) {\n    if (nextSym == EOB) {\n      break;\n    }\n    if (nextSym == RUNA || nextSym == RUNB) {\n      char ch;\n      int s=-1;\n      int N=1;\n      do {\n        if (nextSym == RUNA) {\n          s=s + (0 + 1) * N;\n        }\n else         if (nextSym == RUNB) {\n          s=s + (1 + 1) * N;\n        }\n        N=N * 2;\n{\n          int zt, zn, zvec, zj;\n          if (groupPos == 0) {\n            groupNo++;\n            groupPos=G_SIZE;\n          }\n          groupPos--;\n          zt=selector[groupNo];\n          zn=minLens[zt];\n          zvec=bsR(zn);\n          while (zvec > limit[zt][zn]) {\n            zn++;\n{\n{\n                while (bsLive < 1) {\n                  int zzi;\n                  char thech=0;\n                  try {\n                    thech=(char)bsStream.read();\n                  }\n catch (                  IOException e) {\n                    compressedStreamEOF();\n                  }\n                  if (thech == -1) {\n                    compressedStreamEOF();\n                  }\n                  zzi=thech;\n                  bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                  bsLive+=8;\n                }\n              }\n              zj=(bsBuff >> (bsLive - 1)) & 1;\n              bsLive--;\n            }\n            zvec=(zvec << 1) | zj;\n          }\n          nextSym=perm[zt][zvec - base[zt][zn]];\n        }\n      }\n while (nextSym == RUNA || nextSym == RUNB);\n      s++;\n      ch=seqToUnseq[yy[0]];\n      unzftab[ch]+=s;\n      while (s > 0) {\n        last++;\n        ll8[last]=ch;\n        s--;\n      }\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      continue;\n    }\n else {\n      char tmp;\n      last++;\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      tmp=yy[nextSym - 1];\n      unzftab[seqToUnseq[tmp]]++;\n      ll8[last]=seqToUnseq[tmp];\n      j=nextSym - 1;\n      for (; j > 3; j-=4) {\n        yy[j]=yy[j - 1];\n        yy[j - 1]=yy[j - 2];\n        yy[j - 2]=yy[j - 3];\n        yy[j - 3]=yy[j - 4];\n      }\n      for (; j > 0; j--) {\n        yy[j]=yy[j - 1];\n      }\n      yy[0]=tmp;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n      continue;\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 814,
                    "astHeight": 22
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 34,
                    "startLineNumber": 519,
                    "startColumnNumber": 20,
                    "endLineNumber": 519,
                    "endColumnNumber": 54
                },
                "nodeContext": "zj=(bsBuff >> (bsLive - 1)) & 1;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 12,
                "astHeight": 8
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 519,
                "startColumnNumber": 52,
                "endLineNumber": 519,
                "endColumnNumber": 53
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 28,
                        "startLineNumber": 519,
                        "startColumnNumber": 25,
                        "endLineNumber": 519,
                        "endColumnNumber": 53
                    },
                    "nodeContext": "(bsBuff >> (bsLive - 1)) & 1",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 9,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 33,
                        "startLineNumber": 519,
                        "startColumnNumber": 20,
                        "endLineNumber": 519,
                        "endColumnNumber": 53
                    },
                    "nodeContext": "zj=(bsBuff >> (bsLive - 1)) & 1",
                    "nodeType": "Assignment",
                    "astNodeNumber": 11,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 34,
                        "startLineNumber": 519,
                        "startColumnNumber": 20,
                        "endLineNumber": 519,
                        "endColumnNumber": 54
                    },
                    "nodeContext": "zj=(bsBuff >> (bsLive - 1)) & 1;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 12,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 818,
                        "startLineNumber": 501,
                        "startColumnNumber": 16,
                        "endLineNumber": 521,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n{\n    while (bsLive < 1) {\n      int zzi;\n      char thech=0;\n      try {\n        thech=(char)bsStream.read();\n      }\n catch (      IOException e) {\n        compressedStreamEOF();\n      }\n      if (thech == -1) {\n        compressedStreamEOF();\n      }\n      zzi=thech;\n      bsBuff=(bsBuff << 8) | (zzi & 0xff);\n      bsLive+=8;\n    }\n  }\n  zj=(bsBuff >> (bsLive - 1)) & 1;\n  bsLive--;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 79,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 913,
                        "startLineNumber": 499,
                        "startColumnNumber": 41,
                        "endLineNumber": 523,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  zn++;\n{\n{\n      while (bsLive < 1) {\n        int zzi;\n        char thech=0;\n        try {\n          thech=(char)bsStream.read();\n        }\n catch (        IOException e) {\n          compressedStreamEOF();\n        }\n        if (thech == -1) {\n          compressedStreamEOF();\n        }\n        zzi=thech;\n        bsBuff=(bsBuff << 8) | (zzi & 0xff);\n        bsLive+=8;\n      }\n    }\n    zj=(bsBuff >> (bsLive - 1)) & 1;\n    bsLive--;\n  }\n  zvec=(zvec << 1) | zj;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 92,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 942,
                        "startLineNumber": 499,
                        "startColumnNumber": 12,
                        "endLineNumber": 523,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "while (zvec > limit[zt][zn]) {\n  zn++;\n{\n{\n      while (bsLive < 1) {\n        int zzi;\n        char thech=0;\n        try {\n          thech=(char)bsStream.read();\n        }\n catch (        IOException e) {\n          compressedStreamEOF();\n        }\n        if (thech == -1) {\n          compressedStreamEOF();\n        }\n        zzi=thech;\n        bsBuff=(bsBuff << 8) | (zzi & 0xff);\n        bsLive+=8;\n      }\n    }\n    zj=(bsBuff >> (bsLive - 1)) & 1;\n    bsLive--;\n  }\n  zvec=(zvec << 1) | zj;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 100,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1280,
                        "startLineNumber": 489,
                        "startColumnNumber": 8,
                        "endLineNumber": 525,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  int zt, zn, zvec, zj;\n  if (groupPos == 0) {\n    groupNo++;\n    groupPos=G_SIZE;\n  }\n  groupPos--;\n  zt=selector[groupNo];\n  zn=minLens[zt];\n  zvec=bsR(zn);\n  while (zvec > limit[zt][zn]) {\n    zn++;\n{\n{\n        while (bsLive < 1) {\n          int zzi;\n          char thech=0;\n          try {\n            thech=(char)bsStream.read();\n          }\n catch (          IOException e) {\n            compressedStreamEOF();\n          }\n          if (thech == -1) {\n            compressedStreamEOF();\n          }\n          zzi=thech;\n          bsBuff=(bsBuff << 8) | (zzi & 0xff);\n          bsLive+=8;\n        }\n      }\n      zj=(bsBuff >> (bsLive - 1)) & 1;\n      bsLive--;\n    }\n    zvec=(zvec << 1) | zj;\n  }\n  nextSym=perm[zt][zvec - base[zt][zn]];\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 158,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 7015,
                        "startLineNumber": 460,
                        "startColumnNumber": 43,
                        "endLineNumber": 664,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  char[] yy=new char[256];\n  int i, j, nextSym, limitLast;\n  int EOB, groupNo, groupPos;\n  limitLast=baseBlockSize * blockSize100k;\n  origPtr=bsGetIntVS(24);\n  recvDecodingTables();\n  EOB=nInUse + 1;\n  groupNo=-1;\n  groupPos=0;\n  for (i=0; i <= 255; i++) {\n    unzftab[i]=0;\n  }\n  for (i=0; i <= 255; i++) {\n    yy[i]=(char)i;\n  }\n  last=-1;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  while (true) {\n    if (nextSym == EOB) {\n      break;\n    }\n    if (nextSym == RUNA || nextSym == RUNB) {\n      char ch;\n      int s=-1;\n      int N=1;\n      do {\n        if (nextSym == RUNA) {\n          s=s + (0 + 1) * N;\n        }\n else         if (nextSym == RUNB) {\n          s=s + (1 + 1) * N;\n        }\n        N=N * 2;\n{\n          int zt, zn, zvec, zj;\n          if (groupPos == 0) {\n            groupNo++;\n            groupPos=G_SIZE;\n          }\n          groupPos--;\n          zt=selector[groupNo];\n          zn=minLens[zt];\n          zvec=bsR(zn);\n          while (zvec > limit[zt][zn]) {\n            zn++;\n{\n{\n                while (bsLive < 1) {\n                  int zzi;\n                  char thech=0;\n                  try {\n                    thech=(char)bsStream.read();\n                  }\n catch (                  IOException e) {\n                    compressedStreamEOF();\n                  }\n                  if (thech == -1) {\n                    compressedStreamEOF();\n                  }\n                  zzi=thech;\n                  bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                  bsLive+=8;\n                }\n              }\n              zj=(bsBuff >> (bsLive - 1)) & 1;\n              bsLive--;\n            }\n            zvec=(zvec << 1) | zj;\n          }\n          nextSym=perm[zt][zvec - base[zt][zn]];\n        }\n      }\n while (nextSym == RUNA || nextSym == RUNB);\n      s++;\n      ch=seqToUnseq[yy[0]];\n      unzftab[ch]+=s;\n      while (s > 0) {\n        last++;\n        ll8[last]=ch;\n        s--;\n      }\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      continue;\n    }\n else {\n      char tmp;\n      last++;\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      tmp=yy[nextSym - 1];\n      unzftab[seqToUnseq[tmp]]++;\n      ll8[last]=seqToUnseq[tmp];\n      j=nextSym - 1;\n      for (; j > 3; j-=4) {\n        yy[j]=yy[j - 1];\n        yy[j - 1]=yy[j - 2];\n        yy[j - 2]=yy[j - 3];\n        yy[j - 3]=yy[j - 4];\n      }\n      for (; j > 0; j--) {\n        yy[j]=yy[j - 1];\n      }\n      yy[0]=tmp;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n      continue;\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 810,
                    "astHeight": 21
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7054,
                        "startLineNumber": 460,
                        "startColumnNumber": 4,
                        "endLineNumber": 664,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void getAndMoveToFrontDecode(){\n  char[] yy=new char[256];\n  int i, j, nextSym, limitLast;\n  int EOB, groupNo, groupPos;\n  limitLast=baseBlockSize * blockSize100k;\n  origPtr=bsGetIntVS(24);\n  recvDecodingTables();\n  EOB=nInUse + 1;\n  groupNo=-1;\n  groupPos=0;\n  for (i=0; i <= 255; i++) {\n    unzftab[i]=0;\n  }\n  for (i=0; i <= 255; i++) {\n    yy[i]=(char)i;\n  }\n  last=-1;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  while (true) {\n    if (nextSym == EOB) {\n      break;\n    }\n    if (nextSym == RUNA || nextSym == RUNB) {\n      char ch;\n      int s=-1;\n      int N=1;\n      do {\n        if (nextSym == RUNA) {\n          s=s + (0 + 1) * N;\n        }\n else         if (nextSym == RUNB) {\n          s=s + (1 + 1) * N;\n        }\n        N=N * 2;\n{\n          int zt, zn, zvec, zj;\n          if (groupPos == 0) {\n            groupNo++;\n            groupPos=G_SIZE;\n          }\n          groupPos--;\n          zt=selector[groupNo];\n          zn=minLens[zt];\n          zvec=bsR(zn);\n          while (zvec > limit[zt][zn]) {\n            zn++;\n{\n{\n                while (bsLive < 1) {\n                  int zzi;\n                  char thech=0;\n                  try {\n                    thech=(char)bsStream.read();\n                  }\n catch (                  IOException e) {\n                    compressedStreamEOF();\n                  }\n                  if (thech == -1) {\n                    compressedStreamEOF();\n                  }\n                  zzi=thech;\n                  bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                  bsLive+=8;\n                }\n              }\n              zj=(bsBuff >> (bsLive - 1)) & 1;\n              bsLive--;\n            }\n            zvec=(zvec << 1) | zj;\n          }\n          nextSym=perm[zt][zvec - base[zt][zn]];\n        }\n      }\n while (nextSym == RUNA || nextSym == RUNB);\n      s++;\n      ch=seqToUnseq[yy[0]];\n      unzftab[ch]+=s;\n      while (s > 0) {\n        last++;\n        ll8[last]=ch;\n        s--;\n      }\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      continue;\n    }\n else {\n      char tmp;\n      last++;\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      tmp=yy[nextSym - 1];\n      unzftab[seqToUnseq[tmp]]++;\n      ll8[last]=seqToUnseq[tmp];\n      j=nextSym - 1;\n      for (; j > 3; j-=4) {\n        yy[j]=yy[j - 1];\n        yy[j - 1]=yy[j - 2];\n        yy[j - 2]=yy[j - 3];\n        yy[j - 3]=yy[j - 4];\n      }\n      for (; j > 0; j--) {\n        yy[j]=yy[j - 1];\n      }\n      yy[0]=tmp;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n      continue;\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 814,
                    "astHeight": 22
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 34,
                    "startLineNumber": 519,
                    "startColumnNumber": 20,
                    "endLineNumber": 519,
                    "endColumnNumber": 54
                },
                "nodeContext": "zj=(bsBuff >> (bsLive - 1)) & 1;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 12,
                "astHeight": 8
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 522,
                "startColumnNumber": 32,
                "endLineNumber": 522,
                "endColumnNumber": 33
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
                    "nodePosition": {
                        "charLength": 9,
                        "startLineNumber": 522,
                        "startColumnNumber": 24,
                        "endLineNumber": 522,
                        "endColumnNumber": 33
                    },
                    "nodeContext": "zvec << 1",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 11,
                        "startLineNumber": 522,
                        "startColumnNumber": 23,
                        "endLineNumber": 522,
                        "endColumnNumber": 34
                    },
                    "nodeContext": "(zvec << 1)",
                    "nodeType": "ParenthesizedExpression",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 16,
                        "startLineNumber": 522,
                        "startColumnNumber": 23,
                        "endLineNumber": 522,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "(zvec << 1) | zj",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 6,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 23,
                        "startLineNumber": 522,
                        "startColumnNumber": 16,
                        "endLineNumber": 522,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "zvec=(zvec << 1) | zj",
                    "nodeType": "Assignment",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 24,
                        "startLineNumber": 522,
                        "startColumnNumber": 16,
                        "endLineNumber": 522,
                        "endColumnNumber": 40
                    },
                    "nodeContext": "zvec=(zvec << 1) | zj;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 9,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 913,
                        "startLineNumber": 499,
                        "startColumnNumber": 41,
                        "endLineNumber": 523,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  zn++;\n{\n{\n      while (bsLive < 1) {\n        int zzi;\n        char thech=0;\n        try {\n          thech=(char)bsStream.read();\n        }\n catch (        IOException e) {\n          compressedStreamEOF();\n        }\n        if (thech == -1) {\n          compressedStreamEOF();\n        }\n        zzi=thech;\n        bsBuff=(bsBuff << 8) | (zzi & 0xff);\n        bsLive+=8;\n      }\n    }\n    zj=(bsBuff >> (bsLive - 1)) & 1;\n    bsLive--;\n  }\n  zvec=(zvec << 1) | zj;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 92,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 942,
                        "startLineNumber": 499,
                        "startColumnNumber": 12,
                        "endLineNumber": 523,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "while (zvec > limit[zt][zn]) {\n  zn++;\n{\n{\n      while (bsLive < 1) {\n        int zzi;\n        char thech=0;\n        try {\n          thech=(char)bsStream.read();\n        }\n catch (        IOException e) {\n          compressedStreamEOF();\n        }\n        if (thech == -1) {\n          compressedStreamEOF();\n        }\n        zzi=thech;\n        bsBuff=(bsBuff << 8) | (zzi & 0xff);\n        bsLive+=8;\n      }\n    }\n    zj=(bsBuff >> (bsLive - 1)) & 1;\n    bsLive--;\n  }\n  zvec=(zvec << 1) | zj;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 100,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1280,
                        "startLineNumber": 489,
                        "startColumnNumber": 8,
                        "endLineNumber": 525,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  int zt, zn, zvec, zj;\n  if (groupPos == 0) {\n    groupNo++;\n    groupPos=G_SIZE;\n  }\n  groupPos--;\n  zt=selector[groupNo];\n  zn=minLens[zt];\n  zvec=bsR(zn);\n  while (zvec > limit[zt][zn]) {\n    zn++;\n{\n{\n        while (bsLive < 1) {\n          int zzi;\n          char thech=0;\n          try {\n            thech=(char)bsStream.read();\n          }\n catch (          IOException e) {\n            compressedStreamEOF();\n          }\n          if (thech == -1) {\n            compressedStreamEOF();\n          }\n          zzi=thech;\n          bsBuff=(bsBuff << 8) | (zzi & 0xff);\n          bsLive+=8;\n        }\n      }\n      zj=(bsBuff >> (bsLive - 1)) & 1;\n      bsLive--;\n    }\n    zvec=(zvec << 1) | zj;\n  }\n  nextSym=perm[zt][zvec - base[zt][zn]];\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 158,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 7015,
                        "startLineNumber": 460,
                        "startColumnNumber": 43,
                        "endLineNumber": 664,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  char[] yy=new char[256];\n  int i, j, nextSym, limitLast;\n  int EOB, groupNo, groupPos;\n  limitLast=baseBlockSize * blockSize100k;\n  origPtr=bsGetIntVS(24);\n  recvDecodingTables();\n  EOB=nInUse + 1;\n  groupNo=-1;\n  groupPos=0;\n  for (i=0; i <= 255; i++) {\n    unzftab[i]=0;\n  }\n  for (i=0; i <= 255; i++) {\n    yy[i]=(char)i;\n  }\n  last=-1;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  while (true) {\n    if (nextSym == EOB) {\n      break;\n    }\n    if (nextSym == RUNA || nextSym == RUNB) {\n      char ch;\n      int s=-1;\n      int N=1;\n      do {\n        if (nextSym == RUNA) {\n          s=s + (0 + 1) * N;\n        }\n else         if (nextSym == RUNB) {\n          s=s + (1 + 1) * N;\n        }\n        N=N * 2;\n{\n          int zt, zn, zvec, zj;\n          if (groupPos == 0) {\n            groupNo++;\n            groupPos=G_SIZE;\n          }\n          groupPos--;\n          zt=selector[groupNo];\n          zn=minLens[zt];\n          zvec=bsR(zn);\n          while (zvec > limit[zt][zn]) {\n            zn++;\n{\n{\n                while (bsLive < 1) {\n                  int zzi;\n                  char thech=0;\n                  try {\n                    thech=(char)bsStream.read();\n                  }\n catch (                  IOException e) {\n                    compressedStreamEOF();\n                  }\n                  if (thech == -1) {\n                    compressedStreamEOF();\n                  }\n                  zzi=thech;\n                  bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                  bsLive+=8;\n                }\n              }\n              zj=(bsBuff >> (bsLive - 1)) & 1;\n              bsLive--;\n            }\n            zvec=(zvec << 1) | zj;\n          }\n          nextSym=perm[zt][zvec - base[zt][zn]];\n        }\n      }\n while (nextSym == RUNA || nextSym == RUNB);\n      s++;\n      ch=seqToUnseq[yy[0]];\n      unzftab[ch]+=s;\n      while (s > 0) {\n        last++;\n        ll8[last]=ch;\n        s--;\n      }\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      continue;\n    }\n else {\n      char tmp;\n      last++;\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      tmp=yy[nextSym - 1];\n      unzftab[seqToUnseq[tmp]]++;\n      ll8[last]=seqToUnseq[tmp];\n      j=nextSym - 1;\n      for (; j > 3; j-=4) {\n        yy[j]=yy[j - 1];\n        yy[j - 1]=yy[j - 2];\n        yy[j - 2]=yy[j - 3];\n        yy[j - 3]=yy[j - 4];\n      }\n      for (; j > 0; j--) {\n        yy[j]=yy[j - 1];\n      }\n      yy[0]=tmp;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n      continue;\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 810,
                    "astHeight": 21
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7054,
                        "startLineNumber": 460,
                        "startColumnNumber": 4,
                        "endLineNumber": 664,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void getAndMoveToFrontDecode(){\n  char[] yy=new char[256];\n  int i, j, nextSym, limitLast;\n  int EOB, groupNo, groupPos;\n  limitLast=baseBlockSize * blockSize100k;\n  origPtr=bsGetIntVS(24);\n  recvDecodingTables();\n  EOB=nInUse + 1;\n  groupNo=-1;\n  groupPos=0;\n  for (i=0; i <= 255; i++) {\n    unzftab[i]=0;\n  }\n  for (i=0; i <= 255; i++) {\n    yy[i]=(char)i;\n  }\n  last=-1;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  while (true) {\n    if (nextSym == EOB) {\n      break;\n    }\n    if (nextSym == RUNA || nextSym == RUNB) {\n      char ch;\n      int s=-1;\n      int N=1;\n      do {\n        if (nextSym == RUNA) {\n          s=s + (0 + 1) * N;\n        }\n else         if (nextSym == RUNB) {\n          s=s + (1 + 1) * N;\n        }\n        N=N * 2;\n{\n          int zt, zn, zvec, zj;\n          if (groupPos == 0) {\n            groupNo++;\n            groupPos=G_SIZE;\n          }\n          groupPos--;\n          zt=selector[groupNo];\n          zn=minLens[zt];\n          zvec=bsR(zn);\n          while (zvec > limit[zt][zn]) {\n            zn++;\n{\n{\n                while (bsLive < 1) {\n                  int zzi;\n                  char thech=0;\n                  try {\n                    thech=(char)bsStream.read();\n                  }\n catch (                  IOException e) {\n                    compressedStreamEOF();\n                  }\n                  if (thech == -1) {\n                    compressedStreamEOF();\n                  }\n                  zzi=thech;\n                  bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                  bsLive+=8;\n                }\n              }\n              zj=(bsBuff >> (bsLive - 1)) & 1;\n              bsLive--;\n            }\n            zvec=(zvec << 1) | zj;\n          }\n          nextSym=perm[zt][zvec - base[zt][zn]];\n        }\n      }\n while (nextSym == RUNA || nextSym == RUNB);\n      s++;\n      ch=seqToUnseq[yy[0]];\n      unzftab[ch]+=s;\n      while (s > 0) {\n        last++;\n        ll8[last]=ch;\n        s--;\n      }\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      continue;\n    }\n else {\n      char tmp;\n      last++;\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      tmp=yy[nextSym - 1];\n      unzftab[seqToUnseq[tmp]]++;\n      ll8[last]=seqToUnseq[tmp];\n      j=nextSym - 1;\n      for (; j > 3; j-=4) {\n        yy[j]=yy[j - 1];\n        yy[j - 1]=yy[j - 2];\n        yy[j - 2]=yy[j - 3];\n        yy[j - 3]=yy[j - 4];\n      }\n      for (; j > 0; j--) {\n        yy[j]=yy[j - 1];\n      }\n      yy[0]=tmp;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n      continue;\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 814,
                    "astHeight": 22
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 24,
                    "startLineNumber": 522,
                    "startColumnNumber": 16,
                    "endLineNumber": 522,
                    "endColumnNumber": 40
                },
                "nodeContext": "zvec=(zvec << 1) | zj;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 9,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 535,
                "startColumnNumber": 25,
                "endLineNumber": 535,
                "endColumnNumber": 26
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 2,
                        "startLineNumber": 535,
                        "startColumnNumber": 24,
                        "endLineNumber": 535,
                        "endColumnNumber": 26
                    },
                    "nodeContext": "-1",
                    "nodeType": "PrefixExpression",
                    "astNodeNumber": 2,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 6,
                        "startLineNumber": 535,
                        "startColumnNumber": 20,
                        "endLineNumber": 535,
                        "endColumnNumber": 26
                    },
                    "nodeContext": "s=-1",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 11,
                        "startLineNumber": 535,
                        "startColumnNumber": 16,
                        "endLineNumber": 535,
                        "endColumnNumber": 27
                    },
                    "nodeContext": "int s=-1;\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 6,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 2512,
                        "startLineNumber": 533,
                        "startColumnNumber": 52,
                        "endLineNumber": 597,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  char ch;\n  int s=-1;\n  int N=1;\n  do {\n    if (nextSym == RUNA) {\n      s=s + (0 + 1) * N;\n    }\n else     if (nextSym == RUNB) {\n      s=s + (1 + 1) * N;\n    }\n    N=N * 2;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              if (thech == -1) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n  }\n while (nextSym == RUNA || nextSym == RUNB);\n  s++;\n  ch=seqToUnseq[yy[0]];\n  unzftab[ch]+=s;\n  while (s > 0) {\n    last++;\n    ll8[last]=ch;\n    s--;\n  }\n  if (last >= limitLast) {\n    blockOverrun();\n  }\n  continue;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 264,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4898,
                        "startLineNumber": 533,
                        "startColumnNumber": 12,
                        "endLineNumber": 662,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (nextSym == RUNA || nextSym == RUNB) {\n  char ch;\n  int s=-1;\n  int N=1;\n  do {\n    if (nextSym == RUNA) {\n      s=s + (0 + 1) * N;\n    }\n else     if (nextSym == RUNB) {\n      s=s + (1 + 1) * N;\n    }\n    N=N * 2;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              if (thech == -1) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n  }\n while (nextSym == RUNA || nextSym == RUNB);\n  s++;\n  ch=seqToUnseq[yy[0]];\n  unzftab[ch]+=s;\n  while (s > 0) {\n    last++;\n    ll8[last]=ch;\n    s--;\n  }\n  if (last >= limitLast) {\n    blockOverrun();\n  }\n  continue;\n}\n else {\n  char tmp;\n  last++;\n  if (last >= limitLast) {\n    blockOverrun();\n  }\n  tmp=yy[nextSym - 1];\n  unzftab[seqToUnseq[tmp]]++;\n  ll8[last]=seqToUnseq[tmp];\n  j=nextSym - 1;\n  for (; j > 3; j-=4) {\n    yy[j]=yy[j - 1];\n    yy[j - 1]=yy[j - 2];\n    yy[j - 2]=yy[j - 3];\n    yy[j - 3]=yy[j - 4];\n  }\n  for (; j > 0; j--) {\n    yy[j]=yy[j - 1];\n  }\n  yy[0]=tmp;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  continue;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 544,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 4995,
                        "startLineNumber": 527,
                        "startColumnNumber": 21,
                        "endLineNumber": 663,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (nextSym == EOB) {\n    break;\n  }\n  if (nextSym == RUNA || nextSym == RUNB) {\n    char ch;\n    int s=-1;\n    int N=1;\n    do {\n      if (nextSym == RUNA) {\n        s=s + (0 + 1) * N;\n      }\n else       if (nextSym == RUNB) {\n        s=s + (1 + 1) * N;\n      }\n      N=N * 2;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                if (thech == -1) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n    }\n while (nextSym == RUNA || nextSym == RUNB);\n    s++;\n    ch=seqToUnseq[yy[0]];\n    unzftab[ch]+=s;\n    while (s > 0) {\n      last++;\n      ll8[last]=ch;\n      s--;\n    }\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    continue;\n  }\n else {\n    char tmp;\n    last++;\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    tmp=yy[nextSym - 1];\n    unzftab[seqToUnseq[tmp]]++;\n    ll8[last]=seqToUnseq[tmp];\n    j=nextSym - 1;\n    for (; j > 3; j-=4) {\n      yy[j]=yy[j - 1];\n      yy[j - 1]=yy[j - 2];\n      yy[j - 2]=yy[j - 3];\n      yy[j - 3]=yy[j - 4];\n    }\n    for (; j > 0; j--) {\n      yy[j]=yy[j - 1];\n    }\n    yy[0]=tmp;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n    continue;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 551,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 5008,
                        "startLineNumber": 527,
                        "startColumnNumber": 8,
                        "endLineNumber": 663,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (true) {\n  if (nextSym == EOB) {\n    break;\n  }\n  if (nextSym == RUNA || nextSym == RUNB) {\n    char ch;\n    int s=-1;\n    int N=1;\n    do {\n      if (nextSym == RUNA) {\n        s=s + (0 + 1) * N;\n      }\n else       if (nextSym == RUNB) {\n        s=s + (1 + 1) * N;\n      }\n      N=N * 2;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                if (thech == -1) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n    }\n while (nextSym == RUNA || nextSym == RUNB);\n    s++;\n    ch=seqToUnseq[yy[0]];\n    unzftab[ch]+=s;\n    while (s > 0) {\n      last++;\n      ll8[last]=ch;\n      s--;\n    }\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    continue;\n  }\n else {\n    char tmp;\n    last++;\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    tmp=yy[nextSym - 1];\n    unzftab[seqToUnseq[tmp]]++;\n    ll8[last]=seqToUnseq[tmp];\n    j=nextSym - 1;\n    for (; j > 3; j-=4) {\n      yy[j]=yy[j - 1];\n      yy[j - 1]=yy[j - 2];\n      yy[j - 2]=yy[j - 3];\n      yy[j - 3]=yy[j - 4];\n    }\n    for (; j > 0; j--) {\n      yy[j]=yy[j - 1];\n    }\n    yy[0]=tmp;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n    continue;\n  }\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 553,
                    "astHeight": 20
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 7015,
                        "startLineNumber": 460,
                        "startColumnNumber": 43,
                        "endLineNumber": 664,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  char[] yy=new char[256];\n  int i, j, nextSym, limitLast;\n  int EOB, groupNo, groupPos;\n  limitLast=baseBlockSize * blockSize100k;\n  origPtr=bsGetIntVS(24);\n  recvDecodingTables();\n  EOB=nInUse + 1;\n  groupNo=-1;\n  groupPos=0;\n  for (i=0; i <= 255; i++) {\n    unzftab[i]=0;\n  }\n  for (i=0; i <= 255; i++) {\n    yy[i]=(char)i;\n  }\n  last=-1;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  while (true) {\n    if (nextSym == EOB) {\n      break;\n    }\n    if (nextSym == RUNA || nextSym == RUNB) {\n      char ch;\n      int s=-1;\n      int N=1;\n      do {\n        if (nextSym == RUNA) {\n          s=s + (0 + 1) * N;\n        }\n else         if (nextSym == RUNB) {\n          s=s + (1 + 1) * N;\n        }\n        N=N * 2;\n{\n          int zt, zn, zvec, zj;\n          if (groupPos == 0) {\n            groupNo++;\n            groupPos=G_SIZE;\n          }\n          groupPos--;\n          zt=selector[groupNo];\n          zn=minLens[zt];\n          zvec=bsR(zn);\n          while (zvec > limit[zt][zn]) {\n            zn++;\n{\n{\n                while (bsLive < 1) {\n                  int zzi;\n                  char thech=0;\n                  try {\n                    thech=(char)bsStream.read();\n                  }\n catch (                  IOException e) {\n                    compressedStreamEOF();\n                  }\n                  if (thech == -1) {\n                    compressedStreamEOF();\n                  }\n                  zzi=thech;\n                  bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                  bsLive+=8;\n                }\n              }\n              zj=(bsBuff >> (bsLive - 1)) & 1;\n              bsLive--;\n            }\n            zvec=(zvec << 1) | zj;\n          }\n          nextSym=perm[zt][zvec - base[zt][zn]];\n        }\n      }\n while (nextSym == RUNA || nextSym == RUNB);\n      s++;\n      ch=seqToUnseq[yy[0]];\n      unzftab[ch]+=s;\n      while (s > 0) {\n        last++;\n        ll8[last]=ch;\n        s--;\n      }\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      continue;\n    }\n else {\n      char tmp;\n      last++;\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      tmp=yy[nextSym - 1];\n      unzftab[seqToUnseq[tmp]]++;\n      ll8[last]=seqToUnseq[tmp];\n      j=nextSym - 1;\n      for (; j > 3; j-=4) {\n        yy[j]=yy[j - 1];\n        yy[j - 1]=yy[j - 2];\n        yy[j - 2]=yy[j - 3];\n        yy[j - 3]=yy[j - 4];\n      }\n      for (; j > 0; j--) {\n        yy[j]=yy[j - 1];\n      }\n      yy[0]=tmp;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n      continue;\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 810,
                    "astHeight": 21
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7054,
                        "startLineNumber": 460,
                        "startColumnNumber": 4,
                        "endLineNumber": 664,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void getAndMoveToFrontDecode(){\n  char[] yy=new char[256];\n  int i, j, nextSym, limitLast;\n  int EOB, groupNo, groupPos;\n  limitLast=baseBlockSize * blockSize100k;\n  origPtr=bsGetIntVS(24);\n  recvDecodingTables();\n  EOB=nInUse + 1;\n  groupNo=-1;\n  groupPos=0;\n  for (i=0; i <= 255; i++) {\n    unzftab[i]=0;\n  }\n  for (i=0; i <= 255; i++) {\n    yy[i]=(char)i;\n  }\n  last=-1;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  while (true) {\n    if (nextSym == EOB) {\n      break;\n    }\n    if (nextSym == RUNA || nextSym == RUNB) {\n      char ch;\n      int s=-1;\n      int N=1;\n      do {\n        if (nextSym == RUNA) {\n          s=s + (0 + 1) * N;\n        }\n else         if (nextSym == RUNB) {\n          s=s + (1 + 1) * N;\n        }\n        N=N * 2;\n{\n          int zt, zn, zvec, zj;\n          if (groupPos == 0) {\n            groupNo++;\n            groupPos=G_SIZE;\n          }\n          groupPos--;\n          zt=selector[groupNo];\n          zn=minLens[zt];\n          zvec=bsR(zn);\n          while (zvec > limit[zt][zn]) {\n            zn++;\n{\n{\n                while (bsLive < 1) {\n                  int zzi;\n                  char thech=0;\n                  try {\n                    thech=(char)bsStream.read();\n                  }\n catch (                  IOException e) {\n                    compressedStreamEOF();\n                  }\n                  if (thech == -1) {\n                    compressedStreamEOF();\n                  }\n                  zzi=thech;\n                  bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                  bsLive+=8;\n                }\n              }\n              zj=(bsBuff >> (bsLive - 1)) & 1;\n              bsLive--;\n            }\n            zvec=(zvec << 1) | zj;\n          }\n          nextSym=perm[zt][zvec - base[zt][zn]];\n        }\n      }\n while (nextSym == RUNA || nextSym == RUNB);\n      s++;\n      ch=seqToUnseq[yy[0]];\n      unzftab[ch]+=s;\n      while (s > 0) {\n        last++;\n        ll8[last]=ch;\n        s--;\n      }\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      continue;\n    }\n else {\n      char tmp;\n      last++;\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      tmp=yy[nextSym - 1];\n      unzftab[seqToUnseq[tmp]]++;\n      ll8[last]=seqToUnseq[tmp];\n      j=nextSym - 1;\n      for (; j > 3; j-=4) {\n        yy[j]=yy[j - 1];\n        yy[j - 1]=yy[j - 2];\n        yy[j - 2]=yy[j - 3];\n        yy[j - 3]=yy[j - 4];\n      }\n      for (; j > 0; j--) {\n        yy[j]=yy[j - 1];\n      }\n      yy[0]=tmp;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n      continue;\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 814,
                    "astHeight": 22
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 11,
                    "startLineNumber": 535,
                    "startColumnNumber": 16,
                    "endLineNumber": 535,
                    "endColumnNumber": 27
                },
                "nodeContext": "int s=-1;\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 6,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 536,
                "startColumnNumber": 24,
                "endLineNumber": 536,
                "endColumnNumber": 25
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 5,
                        "startLineNumber": 536,
                        "startColumnNumber": 20,
                        "endLineNumber": 536,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "N=1",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 10,
                        "startLineNumber": 536,
                        "startColumnNumber": 16,
                        "endLineNumber": 536,
                        "endColumnNumber": 26
                    },
                    "nodeContext": "int N=1;\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 2512,
                        "startLineNumber": 533,
                        "startColumnNumber": 52,
                        "endLineNumber": 597,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  char ch;\n  int s=-1;\n  int N=1;\n  do {\n    if (nextSym == RUNA) {\n      s=s + (0 + 1) * N;\n    }\n else     if (nextSym == RUNB) {\n      s=s + (1 + 1) * N;\n    }\n    N=N * 2;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              if (thech == -1) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n  }\n while (nextSym == RUNA || nextSym == RUNB);\n  s++;\n  ch=seqToUnseq[yy[0]];\n  unzftab[ch]+=s;\n  while (s > 0) {\n    last++;\n    ll8[last]=ch;\n    s--;\n  }\n  if (last >= limitLast) {\n    blockOverrun();\n  }\n  continue;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 264,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4898,
                        "startLineNumber": 533,
                        "startColumnNumber": 12,
                        "endLineNumber": 662,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (nextSym == RUNA || nextSym == RUNB) {\n  char ch;\n  int s=-1;\n  int N=1;\n  do {\n    if (nextSym == RUNA) {\n      s=s + (0 + 1) * N;\n    }\n else     if (nextSym == RUNB) {\n      s=s + (1 + 1) * N;\n    }\n    N=N * 2;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              if (thech == -1) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n  }\n while (nextSym == RUNA || nextSym == RUNB);\n  s++;\n  ch=seqToUnseq[yy[0]];\n  unzftab[ch]+=s;\n  while (s > 0) {\n    last++;\n    ll8[last]=ch;\n    s--;\n  }\n  if (last >= limitLast) {\n    blockOverrun();\n  }\n  continue;\n}\n else {\n  char tmp;\n  last++;\n  if (last >= limitLast) {\n    blockOverrun();\n  }\n  tmp=yy[nextSym - 1];\n  unzftab[seqToUnseq[tmp]]++;\n  ll8[last]=seqToUnseq[tmp];\n  j=nextSym - 1;\n  for (; j > 3; j-=4) {\n    yy[j]=yy[j - 1];\n    yy[j - 1]=yy[j - 2];\n    yy[j - 2]=yy[j - 3];\n    yy[j - 3]=yy[j - 4];\n  }\n  for (; j > 0; j--) {\n    yy[j]=yy[j - 1];\n  }\n  yy[0]=tmp;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  continue;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 544,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 4995,
                        "startLineNumber": 527,
                        "startColumnNumber": 21,
                        "endLineNumber": 663,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (nextSym == EOB) {\n    break;\n  }\n  if (nextSym == RUNA || nextSym == RUNB) {\n    char ch;\n    int s=-1;\n    int N=1;\n    do {\n      if (nextSym == RUNA) {\n        s=s + (0 + 1) * N;\n      }\n else       if (nextSym == RUNB) {\n        s=s + (1 + 1) * N;\n      }\n      N=N * 2;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                if (thech == -1) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n    }\n while (nextSym == RUNA || nextSym == RUNB);\n    s++;\n    ch=seqToUnseq[yy[0]];\n    unzftab[ch]+=s;\n    while (s > 0) {\n      last++;\n      ll8[last]=ch;\n      s--;\n    }\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    continue;\n  }\n else {\n    char tmp;\n    last++;\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    tmp=yy[nextSym - 1];\n    unzftab[seqToUnseq[tmp]]++;\n    ll8[last]=seqToUnseq[tmp];\n    j=nextSym - 1;\n    for (; j > 3; j-=4) {\n      yy[j]=yy[j - 1];\n      yy[j - 1]=yy[j - 2];\n      yy[j - 2]=yy[j - 3];\n      yy[j - 3]=yy[j - 4];\n    }\n    for (; j > 0; j--) {\n      yy[j]=yy[j - 1];\n    }\n    yy[0]=tmp;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n    continue;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 551,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 5008,
                        "startLineNumber": 527,
                        "startColumnNumber": 8,
                        "endLineNumber": 663,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (true) {\n  if (nextSym == EOB) {\n    break;\n  }\n  if (nextSym == RUNA || nextSym == RUNB) {\n    char ch;\n    int s=-1;\n    int N=1;\n    do {\n      if (nextSym == RUNA) {\n        s=s + (0 + 1) * N;\n      }\n else       if (nextSym == RUNB) {\n        s=s + (1 + 1) * N;\n      }\n      N=N * 2;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                if (thech == -1) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n    }\n while (nextSym == RUNA || nextSym == RUNB);\n    s++;\n    ch=seqToUnseq[yy[0]];\n    unzftab[ch]+=s;\n    while (s > 0) {\n      last++;\n      ll8[last]=ch;\n      s--;\n    }\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    continue;\n  }\n else {\n    char tmp;\n    last++;\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    tmp=yy[nextSym - 1];\n    unzftab[seqToUnseq[tmp]]++;\n    ll8[last]=seqToUnseq[tmp];\n    j=nextSym - 1;\n    for (; j > 3; j-=4) {\n      yy[j]=yy[j - 1];\n      yy[j - 1]=yy[j - 2];\n      yy[j - 2]=yy[j - 3];\n      yy[j - 3]=yy[j - 4];\n    }\n    for (; j > 0; j--) {\n      yy[j]=yy[j - 1];\n    }\n    yy[0]=tmp;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n    continue;\n  }\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 553,
                    "astHeight": 20
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 7015,
                        "startLineNumber": 460,
                        "startColumnNumber": 43,
                        "endLineNumber": 664,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  char[] yy=new char[256];\n  int i, j, nextSym, limitLast;\n  int EOB, groupNo, groupPos;\n  limitLast=baseBlockSize * blockSize100k;\n  origPtr=bsGetIntVS(24);\n  recvDecodingTables();\n  EOB=nInUse + 1;\n  groupNo=-1;\n  groupPos=0;\n  for (i=0; i <= 255; i++) {\n    unzftab[i]=0;\n  }\n  for (i=0; i <= 255; i++) {\n    yy[i]=(char)i;\n  }\n  last=-1;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  while (true) {\n    if (nextSym == EOB) {\n      break;\n    }\n    if (nextSym == RUNA || nextSym == RUNB) {\n      char ch;\n      int s=-1;\n      int N=1;\n      do {\n        if (nextSym == RUNA) {\n          s=s + (0 + 1) * N;\n        }\n else         if (nextSym == RUNB) {\n          s=s + (1 + 1) * N;\n        }\n        N=N * 2;\n{\n          int zt, zn, zvec, zj;\n          if (groupPos == 0) {\n            groupNo++;\n            groupPos=G_SIZE;\n          }\n          groupPos--;\n          zt=selector[groupNo];\n          zn=minLens[zt];\n          zvec=bsR(zn);\n          while (zvec > limit[zt][zn]) {\n            zn++;\n{\n{\n                while (bsLive < 1) {\n                  int zzi;\n                  char thech=0;\n                  try {\n                    thech=(char)bsStream.read();\n                  }\n catch (                  IOException e) {\n                    compressedStreamEOF();\n                  }\n                  if (thech == -1) {\n                    compressedStreamEOF();\n                  }\n                  zzi=thech;\n                  bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                  bsLive+=8;\n                }\n              }\n              zj=(bsBuff >> (bsLive - 1)) & 1;\n              bsLive--;\n            }\n            zvec=(zvec << 1) | zj;\n          }\n          nextSym=perm[zt][zvec - base[zt][zn]];\n        }\n      }\n while (nextSym == RUNA || nextSym == RUNB);\n      s++;\n      ch=seqToUnseq[yy[0]];\n      unzftab[ch]+=s;\n      while (s > 0) {\n        last++;\n        ll8[last]=ch;\n        s--;\n      }\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      continue;\n    }\n else {\n      char tmp;\n      last++;\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      tmp=yy[nextSym - 1];\n      unzftab[seqToUnseq[tmp]]++;\n      ll8[last]=seqToUnseq[tmp];\n      j=nextSym - 1;\n      for (; j > 3; j-=4) {\n        yy[j]=yy[j - 1];\n        yy[j - 1]=yy[j - 2];\n        yy[j - 2]=yy[j - 3];\n        yy[j - 3]=yy[j - 4];\n      }\n      for (; j > 0; j--) {\n        yy[j]=yy[j - 1];\n      }\n      yy[0]=tmp;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n      continue;\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 810,
                    "astHeight": 21
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7054,
                        "startLineNumber": 460,
                        "startColumnNumber": 4,
                        "endLineNumber": 664,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void getAndMoveToFrontDecode(){\n  char[] yy=new char[256];\n  int i, j, nextSym, limitLast;\n  int EOB, groupNo, groupPos;\n  limitLast=baseBlockSize * blockSize100k;\n  origPtr=bsGetIntVS(24);\n  recvDecodingTables();\n  EOB=nInUse + 1;\n  groupNo=-1;\n  groupPos=0;\n  for (i=0; i <= 255; i++) {\n    unzftab[i]=0;\n  }\n  for (i=0; i <= 255; i++) {\n    yy[i]=(char)i;\n  }\n  last=-1;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  while (true) {\n    if (nextSym == EOB) {\n      break;\n    }\n    if (nextSym == RUNA || nextSym == RUNB) {\n      char ch;\n      int s=-1;\n      int N=1;\n      do {\n        if (nextSym == RUNA) {\n          s=s + (0 + 1) * N;\n        }\n else         if (nextSym == RUNB) {\n          s=s + (1 + 1) * N;\n        }\n        N=N * 2;\n{\n          int zt, zn, zvec, zj;\n          if (groupPos == 0) {\n            groupNo++;\n            groupPos=G_SIZE;\n          }\n          groupPos--;\n          zt=selector[groupNo];\n          zn=minLens[zt];\n          zvec=bsR(zn);\n          while (zvec > limit[zt][zn]) {\n            zn++;\n{\n{\n                while (bsLive < 1) {\n                  int zzi;\n                  char thech=0;\n                  try {\n                    thech=(char)bsStream.read();\n                  }\n catch (                  IOException e) {\n                    compressedStreamEOF();\n                  }\n                  if (thech == -1) {\n                    compressedStreamEOF();\n                  }\n                  zzi=thech;\n                  bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                  bsLive+=8;\n                }\n              }\n              zj=(bsBuff >> (bsLive - 1)) & 1;\n              bsLive--;\n            }\n            zvec=(zvec << 1) | zj;\n          }\n          nextSym=perm[zt][zvec - base[zt][zn]];\n        }\n      }\n while (nextSym == RUNA || nextSym == RUNB);\n      s++;\n      ch=seqToUnseq[yy[0]];\n      unzftab[ch]+=s;\n      while (s > 0) {\n        last++;\n        ll8[last]=ch;\n        s--;\n      }\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      continue;\n    }\n else {\n      char tmp;\n      last++;\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      tmp=yy[nextSym - 1];\n      unzftab[seqToUnseq[tmp]]++;\n      ll8[last]=seqToUnseq[tmp];\n      j=nextSym - 1;\n      for (; j > 3; j-=4) {\n        yy[j]=yy[j - 1];\n        yy[j - 1]=yy[j - 2];\n        yy[j - 2]=yy[j - 3];\n        yy[j - 3]=yy[j - 4];\n      }\n      for (; j > 0; j--) {\n        yy[j]=yy[j - 1];\n      }\n      yy[0]=tmp;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n      continue;\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 814,
                    "astHeight": 22
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 10,
                    "startLineNumber": 536,
                    "startColumnNumber": 16,
                    "endLineNumber": 536,
                    "endColumnNumber": 26
                },
                "nodeContext": "int N=1;\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 539,
                "startColumnNumber": 37,
                "endLineNumber": 539,
                "endColumnNumber": 38
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
                    "nodePosition": {
                        "charLength": 5,
                        "startLineNumber": 539,
                        "startColumnNumber": 33,
                        "endLineNumber": 539,
                        "endColumnNumber": 38
                    },
                    "nodeContext": "0 + 1",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 539,
                        "startColumnNumber": 32,
                        "endLineNumber": 539,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "(0 + 1)",
                    "nodeType": "ParenthesizedExpression",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 11,
                        "startLineNumber": 539,
                        "startColumnNumber": 32,
                        "endLineNumber": 539,
                        "endColumnNumber": 43
                    },
                    "nodeContext": "(0 + 1) * N",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 6,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 15,
                        "startLineNumber": 539,
                        "startColumnNumber": 28,
                        "endLineNumber": 539,
                        "endColumnNumber": 43
                    },
                    "nodeContext": "s + (0 + 1) * N",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 19,
                        "startLineNumber": 539,
                        "startColumnNumber": 24,
                        "endLineNumber": 539,
                        "endColumnNumber": 43
                    },
                    "nodeContext": "s=s + (0 + 1) * N",
                    "nodeType": "Assignment",
                    "astNodeNumber": 10,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 20,
                        "startLineNumber": 539,
                        "startColumnNumber": 24,
                        "endLineNumber": 539,
                        "endColumnNumber": 44
                    },
                    "nodeContext": "s=s + (0 + 1) * N;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 11,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 68,
                        "startLineNumber": 538,
                        "startColumnNumber": 41,
                        "endLineNumber": 540,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  s=s + (0 + 1) * N;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 12,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 191,
                        "startLineNumber": 538,
                        "startColumnNumber": 20,
                        "endLineNumber": 542,
                        "endColumnNumber": 28
                    },
                    "nodeContext": "if (nextSym == RUNA) {\n  s=s + (0 + 1) * N;\n}\n else if (nextSym == RUNB) {\n  s=s + (1 + 1) * N;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 32,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.DoStatement,body]",
                    "nodePosition": {
                        "charLength": 1995,
                        "startLineNumber": 537,
                        "startColumnNumber": 19,
                        "endLineNumber": 581,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  if (nextSym == RUNA) {\n    s=s + (0 + 1) * N;\n  }\n else   if (nextSym == RUNB) {\n    s=s + (1 + 1) * N;\n  }\n  N=N * 2;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 197,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2042,
                        "startLineNumber": 537,
                        "startColumnNumber": 16,
                        "endLineNumber": 581,
                        "endColumnNumber": 61
                    },
                    "nodeContext": "do {\n  if (nextSym == RUNA) {\n    s=s + (0 + 1) * N;\n  }\n else   if (nextSym == RUNB) {\n    s=s + (1 + 1) * N;\n  }\n  N=N * 2;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n}\n while (nextSym == RUNA || nextSym == RUNB);\n",
                    "nodeType": "DoStatement",
                    "astNodeNumber": 205,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 2512,
                        "startLineNumber": 533,
                        "startColumnNumber": 52,
                        "endLineNumber": 597,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  char ch;\n  int s=-1;\n  int N=1;\n  do {\n    if (nextSym == RUNA) {\n      s=s + (0 + 1) * N;\n    }\n else     if (nextSym == RUNB) {\n      s=s + (1 + 1) * N;\n    }\n    N=N * 2;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              if (thech == -1) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n  }\n while (nextSym == RUNA || nextSym == RUNB);\n  s++;\n  ch=seqToUnseq[yy[0]];\n  unzftab[ch]+=s;\n  while (s > 0) {\n    last++;\n    ll8[last]=ch;\n    s--;\n  }\n  if (last >= limitLast) {\n    blockOverrun();\n  }\n  continue;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 264,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4898,
                        "startLineNumber": 533,
                        "startColumnNumber": 12,
                        "endLineNumber": 662,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (nextSym == RUNA || nextSym == RUNB) {\n  char ch;\n  int s=-1;\n  int N=1;\n  do {\n    if (nextSym == RUNA) {\n      s=s + (0 + 1) * N;\n    }\n else     if (nextSym == RUNB) {\n      s=s + (1 + 1) * N;\n    }\n    N=N * 2;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              if (thech == -1) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n  }\n while (nextSym == RUNA || nextSym == RUNB);\n  s++;\n  ch=seqToUnseq[yy[0]];\n  unzftab[ch]+=s;\n  while (s > 0) {\n    last++;\n    ll8[last]=ch;\n    s--;\n  }\n  if (last >= limitLast) {\n    blockOverrun();\n  }\n  continue;\n}\n else {\n  char tmp;\n  last++;\n  if (last >= limitLast) {\n    blockOverrun();\n  }\n  tmp=yy[nextSym - 1];\n  unzftab[seqToUnseq[tmp]]++;\n  ll8[last]=seqToUnseq[tmp];\n  j=nextSym - 1;\n  for (; j > 3; j-=4) {\n    yy[j]=yy[j - 1];\n    yy[j - 1]=yy[j - 2];\n    yy[j - 2]=yy[j - 3];\n    yy[j - 3]=yy[j - 4];\n  }\n  for (; j > 0; j--) {\n    yy[j]=yy[j - 1];\n  }\n  yy[0]=tmp;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  continue;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 544,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 4995,
                        "startLineNumber": 527,
                        "startColumnNumber": 21,
                        "endLineNumber": 663,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (nextSym == EOB) {\n    break;\n  }\n  if (nextSym == RUNA || nextSym == RUNB) {\n    char ch;\n    int s=-1;\n    int N=1;\n    do {\n      if (nextSym == RUNA) {\n        s=s + (0 + 1) * N;\n      }\n else       if (nextSym == RUNB) {\n        s=s + (1 + 1) * N;\n      }\n      N=N * 2;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                if (thech == -1) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n    }\n while (nextSym == RUNA || nextSym == RUNB);\n    s++;\n    ch=seqToUnseq[yy[0]];\n    unzftab[ch]+=s;\n    while (s > 0) {\n      last++;\n      ll8[last]=ch;\n      s--;\n    }\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    continue;\n  }\n else {\n    char tmp;\n    last++;\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    tmp=yy[nextSym - 1];\n    unzftab[seqToUnseq[tmp]]++;\n    ll8[last]=seqToUnseq[tmp];\n    j=nextSym - 1;\n    for (; j > 3; j-=4) {\n      yy[j]=yy[j - 1];\n      yy[j - 1]=yy[j - 2];\n      yy[j - 2]=yy[j - 3];\n      yy[j - 3]=yy[j - 4];\n    }\n    for (; j > 0; j--) {\n      yy[j]=yy[j - 1];\n    }\n    yy[0]=tmp;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n    continue;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 551,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 5008,
                        "startLineNumber": 527,
                        "startColumnNumber": 8,
                        "endLineNumber": 663,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (true) {\n  if (nextSym == EOB) {\n    break;\n  }\n  if (nextSym == RUNA || nextSym == RUNB) {\n    char ch;\n    int s=-1;\n    int N=1;\n    do {\n      if (nextSym == RUNA) {\n        s=s + (0 + 1) * N;\n      }\n else       if (nextSym == RUNB) {\n        s=s + (1 + 1) * N;\n      }\n      N=N * 2;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                if (thech == -1) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n    }\n while (nextSym == RUNA || nextSym == RUNB);\n    s++;\n    ch=seqToUnseq[yy[0]];\n    unzftab[ch]+=s;\n    while (s > 0) {\n      last++;\n      ll8[last]=ch;\n      s--;\n    }\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    continue;\n  }\n else {\n    char tmp;\n    last++;\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    tmp=yy[nextSym - 1];\n    unzftab[seqToUnseq[tmp]]++;\n    ll8[last]=seqToUnseq[tmp];\n    j=nextSym - 1;\n    for (; j > 3; j-=4) {\n      yy[j]=yy[j - 1];\n      yy[j - 1]=yy[j - 2];\n      yy[j - 2]=yy[j - 3];\n      yy[j - 3]=yy[j - 4];\n    }\n    for (; j > 0; j--) {\n      yy[j]=yy[j - 1];\n    }\n    yy[0]=tmp;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n    continue;\n  }\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 553,
                    "astHeight": 20
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 7015,
                        "startLineNumber": 460,
                        "startColumnNumber": 43,
                        "endLineNumber": 664,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  char[] yy=new char[256];\n  int i, j, nextSym, limitLast;\n  int EOB, groupNo, groupPos;\n  limitLast=baseBlockSize * blockSize100k;\n  origPtr=bsGetIntVS(24);\n  recvDecodingTables();\n  EOB=nInUse + 1;\n  groupNo=-1;\n  groupPos=0;\n  for (i=0; i <= 255; i++) {\n    unzftab[i]=0;\n  }\n  for (i=0; i <= 255; i++) {\n    yy[i]=(char)i;\n  }\n  last=-1;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  while (true) {\n    if (nextSym == EOB) {\n      break;\n    }\n    if (nextSym == RUNA || nextSym == RUNB) {\n      char ch;\n      int s=-1;\n      int N=1;\n      do {\n        if (nextSym == RUNA) {\n          s=s + (0 + 1) * N;\n        }\n else         if (nextSym == RUNB) {\n          s=s + (1 + 1) * N;\n        }\n        N=N * 2;\n{\n          int zt, zn, zvec, zj;\n          if (groupPos == 0) {\n            groupNo++;\n            groupPos=G_SIZE;\n          }\n          groupPos--;\n          zt=selector[groupNo];\n          zn=minLens[zt];\n          zvec=bsR(zn);\n          while (zvec > limit[zt][zn]) {\n            zn++;\n{\n{\n                while (bsLive < 1) {\n                  int zzi;\n                  char thech=0;\n                  try {\n                    thech=(char)bsStream.read();\n                  }\n catch (                  IOException e) {\n                    compressedStreamEOF();\n                  }\n                  if (thech == -1) {\n                    compressedStreamEOF();\n                  }\n                  zzi=thech;\n                  bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                  bsLive+=8;\n                }\n              }\n              zj=(bsBuff >> (bsLive - 1)) & 1;\n              bsLive--;\n            }\n            zvec=(zvec << 1) | zj;\n          }\n          nextSym=perm[zt][zvec - base[zt][zn]];\n        }\n      }\n while (nextSym == RUNA || nextSym == RUNB);\n      s++;\n      ch=seqToUnseq[yy[0]];\n      unzftab[ch]+=s;\n      while (s > 0) {\n        last++;\n        ll8[last]=ch;\n        s--;\n      }\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      continue;\n    }\n else {\n      char tmp;\n      last++;\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      tmp=yy[nextSym - 1];\n      unzftab[seqToUnseq[tmp]]++;\n      ll8[last]=seqToUnseq[tmp];\n      j=nextSym - 1;\n      for (; j > 3; j-=4) {\n        yy[j]=yy[j - 1];\n        yy[j - 1]=yy[j - 2];\n        yy[j - 2]=yy[j - 3];\n        yy[j - 3]=yy[j - 4];\n      }\n      for (; j > 0; j--) {\n        yy[j]=yy[j - 1];\n      }\n      yy[0]=tmp;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n      continue;\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 810,
                    "astHeight": 21
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7054,
                        "startLineNumber": 460,
                        "startColumnNumber": 4,
                        "endLineNumber": 664,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void getAndMoveToFrontDecode(){\n  char[] yy=new char[256];\n  int i, j, nextSym, limitLast;\n  int EOB, groupNo, groupPos;\n  limitLast=baseBlockSize * blockSize100k;\n  origPtr=bsGetIntVS(24);\n  recvDecodingTables();\n  EOB=nInUse + 1;\n  groupNo=-1;\n  groupPos=0;\n  for (i=0; i <= 255; i++) {\n    unzftab[i]=0;\n  }\n  for (i=0; i <= 255; i++) {\n    yy[i]=(char)i;\n  }\n  last=-1;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  while (true) {\n    if (nextSym == EOB) {\n      break;\n    }\n    if (nextSym == RUNA || nextSym == RUNB) {\n      char ch;\n      int s=-1;\n      int N=1;\n      do {\n        if (nextSym == RUNA) {\n          s=s + (0 + 1) * N;\n        }\n else         if (nextSym == RUNB) {\n          s=s + (1 + 1) * N;\n        }\n        N=N * 2;\n{\n          int zt, zn, zvec, zj;\n          if (groupPos == 0) {\n            groupNo++;\n            groupPos=G_SIZE;\n          }\n          groupPos--;\n          zt=selector[groupNo];\n          zn=minLens[zt];\n          zvec=bsR(zn);\n          while (zvec > limit[zt][zn]) {\n            zn++;\n{\n{\n                while (bsLive < 1) {\n                  int zzi;\n                  char thech=0;\n                  try {\n                    thech=(char)bsStream.read();\n                  }\n catch (                  IOException e) {\n                    compressedStreamEOF();\n                  }\n                  if (thech == -1) {\n                    compressedStreamEOF();\n                  }\n                  zzi=thech;\n                  bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                  bsLive+=8;\n                }\n              }\n              zj=(bsBuff >> (bsLive - 1)) & 1;\n              bsLive--;\n            }\n            zvec=(zvec << 1) | zj;\n          }\n          nextSym=perm[zt][zvec - base[zt][zn]];\n        }\n      }\n while (nextSym == RUNA || nextSym == RUNB);\n      s++;\n      ch=seqToUnseq[yy[0]];\n      unzftab[ch]+=s;\n      while (s > 0) {\n        last++;\n        ll8[last]=ch;\n        s--;\n      }\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      continue;\n    }\n else {\n      char tmp;\n      last++;\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      tmp=yy[nextSym - 1];\n      unzftab[seqToUnseq[tmp]]++;\n      ll8[last]=seqToUnseq[tmp];\n      j=nextSym - 1;\n      for (; j > 3; j-=4) {\n        yy[j]=yy[j - 1];\n        yy[j - 1]=yy[j - 2];\n        yy[j - 2]=yy[j - 3];\n        yy[j - 3]=yy[j - 4];\n      }\n      for (; j > 0; j--) {\n        yy[j]=yy[j - 1];\n      }\n      yy[0]=tmp;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n      continue;\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 814,
                    "astHeight": 22
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 20,
                    "startLineNumber": 539,
                    "startColumnNumber": 24,
                    "endLineNumber": 539,
                    "endColumnNumber": 44
                },
                "nodeContext": "s=s + (0 + 1) * N;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 11,
                "astHeight": 7
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 541,
                "startColumnNumber": 33,
                "endLineNumber": 541,
                "endColumnNumber": 34
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
                    "nodePosition": {
                        "charLength": 5,
                        "startLineNumber": 541,
                        "startColumnNumber": 33,
                        "endLineNumber": 541,
                        "endColumnNumber": 38
                    },
                    "nodeContext": "1 + 1",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 541,
                        "startColumnNumber": 32,
                        "endLineNumber": 541,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "(1 + 1)",
                    "nodeType": "ParenthesizedExpression",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 11,
                        "startLineNumber": 541,
                        "startColumnNumber": 32,
                        "endLineNumber": 541,
                        "endColumnNumber": 43
                    },
                    "nodeContext": "(1 + 1) * N",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 6,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 15,
                        "startLineNumber": 541,
                        "startColumnNumber": 28,
                        "endLineNumber": 541,
                        "endColumnNumber": 43
                    },
                    "nodeContext": "s + (1 + 1) * N",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 19,
                        "startLineNumber": 541,
                        "startColumnNumber": 24,
                        "endLineNumber": 541,
                        "endColumnNumber": 43
                    },
                    "nodeContext": "s=s + (1 + 1) * N",
                    "nodeType": "Assignment",
                    "astNodeNumber": 10,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 20,
                        "startLineNumber": 541,
                        "startColumnNumber": 24,
                        "endLineNumber": 541,
                        "endColumnNumber": 44
                    },
                    "nodeContext": "s=s + (1 + 1) * N;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 11,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 75,
                        "startLineNumber": 540,
                        "startColumnNumber": 48,
                        "endLineNumber": 542,
                        "endColumnNumber": 28
                    },
                    "nodeContext": "{\n  s=s + (1 + 1) * N;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 12,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 96,
                        "startLineNumber": 540,
                        "startColumnNumber": 27,
                        "endLineNumber": 542,
                        "endColumnNumber": 28
                    },
                    "nodeContext": "if (nextSym == RUNB) {\n  s=s + (1 + 1) * N;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 16,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 191,
                        "startLineNumber": 538,
                        "startColumnNumber": 20,
                        "endLineNumber": 542,
                        "endColumnNumber": 28
                    },
                    "nodeContext": "if (nextSym == RUNA) {\n  s=s + (0 + 1) * N;\n}\n else if (nextSym == RUNB) {\n  s=s + (1 + 1) * N;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 32,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.DoStatement,body]",
                    "nodePosition": {
                        "charLength": 1995,
                        "startLineNumber": 537,
                        "startColumnNumber": 19,
                        "endLineNumber": 581,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  if (nextSym == RUNA) {\n    s=s + (0 + 1) * N;\n  }\n else   if (nextSym == RUNB) {\n    s=s + (1 + 1) * N;\n  }\n  N=N * 2;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 197,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2042,
                        "startLineNumber": 537,
                        "startColumnNumber": 16,
                        "endLineNumber": 581,
                        "endColumnNumber": 61
                    },
                    "nodeContext": "do {\n  if (nextSym == RUNA) {\n    s=s + (0 + 1) * N;\n  }\n else   if (nextSym == RUNB) {\n    s=s + (1 + 1) * N;\n  }\n  N=N * 2;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n}\n while (nextSym == RUNA || nextSym == RUNB);\n",
                    "nodeType": "DoStatement",
                    "astNodeNumber": 205,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 2512,
                        "startLineNumber": 533,
                        "startColumnNumber": 52,
                        "endLineNumber": 597,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  char ch;\n  int s=-1;\n  int N=1;\n  do {\n    if (nextSym == RUNA) {\n      s=s + (0 + 1) * N;\n    }\n else     if (nextSym == RUNB) {\n      s=s + (1 + 1) * N;\n    }\n    N=N * 2;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              if (thech == -1) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n  }\n while (nextSym == RUNA || nextSym == RUNB);\n  s++;\n  ch=seqToUnseq[yy[0]];\n  unzftab[ch]+=s;\n  while (s > 0) {\n    last++;\n    ll8[last]=ch;\n    s--;\n  }\n  if (last >= limitLast) {\n    blockOverrun();\n  }\n  continue;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 264,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4898,
                        "startLineNumber": 533,
                        "startColumnNumber": 12,
                        "endLineNumber": 662,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (nextSym == RUNA || nextSym == RUNB) {\n  char ch;\n  int s=-1;\n  int N=1;\n  do {\n    if (nextSym == RUNA) {\n      s=s + (0 + 1) * N;\n    }\n else     if (nextSym == RUNB) {\n      s=s + (1 + 1) * N;\n    }\n    N=N * 2;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              if (thech == -1) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n  }\n while (nextSym == RUNA || nextSym == RUNB);\n  s++;\n  ch=seqToUnseq[yy[0]];\n  unzftab[ch]+=s;\n  while (s > 0) {\n    last++;\n    ll8[last]=ch;\n    s--;\n  }\n  if (last >= limitLast) {\n    blockOverrun();\n  }\n  continue;\n}\n else {\n  char tmp;\n  last++;\n  if (last >= limitLast) {\n    blockOverrun();\n  }\n  tmp=yy[nextSym - 1];\n  unzftab[seqToUnseq[tmp]]++;\n  ll8[last]=seqToUnseq[tmp];\n  j=nextSym - 1;\n  for (; j > 3; j-=4) {\n    yy[j]=yy[j - 1];\n    yy[j - 1]=yy[j - 2];\n    yy[j - 2]=yy[j - 3];\n    yy[j - 3]=yy[j - 4];\n  }\n  for (; j > 0; j--) {\n    yy[j]=yy[j - 1];\n  }\n  yy[0]=tmp;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  continue;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 544,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 4995,
                        "startLineNumber": 527,
                        "startColumnNumber": 21,
                        "endLineNumber": 663,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (nextSym == EOB) {\n    break;\n  }\n  if (nextSym == RUNA || nextSym == RUNB) {\n    char ch;\n    int s=-1;\n    int N=1;\n    do {\n      if (nextSym == RUNA) {\n        s=s + (0 + 1) * N;\n      }\n else       if (nextSym == RUNB) {\n        s=s + (1 + 1) * N;\n      }\n      N=N * 2;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                if (thech == -1) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n    }\n while (nextSym == RUNA || nextSym == RUNB);\n    s++;\n    ch=seqToUnseq[yy[0]];\n    unzftab[ch]+=s;\n    while (s > 0) {\n      last++;\n      ll8[last]=ch;\n      s--;\n    }\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    continue;\n  }\n else {\n    char tmp;\n    last++;\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    tmp=yy[nextSym - 1];\n    unzftab[seqToUnseq[tmp]]++;\n    ll8[last]=seqToUnseq[tmp];\n    j=nextSym - 1;\n    for (; j > 3; j-=4) {\n      yy[j]=yy[j - 1];\n      yy[j - 1]=yy[j - 2];\n      yy[j - 2]=yy[j - 3];\n      yy[j - 3]=yy[j - 4];\n    }\n    for (; j > 0; j--) {\n      yy[j]=yy[j - 1];\n    }\n    yy[0]=tmp;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n    continue;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 551,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 5008,
                        "startLineNumber": 527,
                        "startColumnNumber": 8,
                        "endLineNumber": 663,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (true) {\n  if (nextSym == EOB) {\n    break;\n  }\n  if (nextSym == RUNA || nextSym == RUNB) {\n    char ch;\n    int s=-1;\n    int N=1;\n    do {\n      if (nextSym == RUNA) {\n        s=s + (0 + 1) * N;\n      }\n else       if (nextSym == RUNB) {\n        s=s + (1 + 1) * N;\n      }\n      N=N * 2;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                if (thech == -1) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n    }\n while (nextSym == RUNA || nextSym == RUNB);\n    s++;\n    ch=seqToUnseq[yy[0]];\n    unzftab[ch]+=s;\n    while (s > 0) {\n      last++;\n      ll8[last]=ch;\n      s--;\n    }\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    continue;\n  }\n else {\n    char tmp;\n    last++;\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    tmp=yy[nextSym - 1];\n    unzftab[seqToUnseq[tmp]]++;\n    ll8[last]=seqToUnseq[tmp];\n    j=nextSym - 1;\n    for (; j > 3; j-=4) {\n      yy[j]=yy[j - 1];\n      yy[j - 1]=yy[j - 2];\n      yy[j - 2]=yy[j - 3];\n      yy[j - 3]=yy[j - 4];\n    }\n    for (; j > 0; j--) {\n      yy[j]=yy[j - 1];\n    }\n    yy[0]=tmp;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n    continue;\n  }\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 553,
                    "astHeight": 20
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 7015,
                        "startLineNumber": 460,
                        "startColumnNumber": 43,
                        "endLineNumber": 664,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  char[] yy=new char[256];\n  int i, j, nextSym, limitLast;\n  int EOB, groupNo, groupPos;\n  limitLast=baseBlockSize * blockSize100k;\n  origPtr=bsGetIntVS(24);\n  recvDecodingTables();\n  EOB=nInUse + 1;\n  groupNo=-1;\n  groupPos=0;\n  for (i=0; i <= 255; i++) {\n    unzftab[i]=0;\n  }\n  for (i=0; i <= 255; i++) {\n    yy[i]=(char)i;\n  }\n  last=-1;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  while (true) {\n    if (nextSym == EOB) {\n      break;\n    }\n    if (nextSym == RUNA || nextSym == RUNB) {\n      char ch;\n      int s=-1;\n      int N=1;\n      do {\n        if (nextSym == RUNA) {\n          s=s + (0 + 1) * N;\n        }\n else         if (nextSym == RUNB) {\n          s=s + (1 + 1) * N;\n        }\n        N=N * 2;\n{\n          int zt, zn, zvec, zj;\n          if (groupPos == 0) {\n            groupNo++;\n            groupPos=G_SIZE;\n          }\n          groupPos--;\n          zt=selector[groupNo];\n          zn=minLens[zt];\n          zvec=bsR(zn);\n          while (zvec > limit[zt][zn]) {\n            zn++;\n{\n{\n                while (bsLive < 1) {\n                  int zzi;\n                  char thech=0;\n                  try {\n                    thech=(char)bsStream.read();\n                  }\n catch (                  IOException e) {\n                    compressedStreamEOF();\n                  }\n                  if (thech == -1) {\n                    compressedStreamEOF();\n                  }\n                  zzi=thech;\n                  bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                  bsLive+=8;\n                }\n              }\n              zj=(bsBuff >> (bsLive - 1)) & 1;\n              bsLive--;\n            }\n            zvec=(zvec << 1) | zj;\n          }\n          nextSym=perm[zt][zvec - base[zt][zn]];\n        }\n      }\n while (nextSym == RUNA || nextSym == RUNB);\n      s++;\n      ch=seqToUnseq[yy[0]];\n      unzftab[ch]+=s;\n      while (s > 0) {\n        last++;\n        ll8[last]=ch;\n        s--;\n      }\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      continue;\n    }\n else {\n      char tmp;\n      last++;\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      tmp=yy[nextSym - 1];\n      unzftab[seqToUnseq[tmp]]++;\n      ll8[last]=seqToUnseq[tmp];\n      j=nextSym - 1;\n      for (; j > 3; j-=4) {\n        yy[j]=yy[j - 1];\n        yy[j - 1]=yy[j - 2];\n        yy[j - 2]=yy[j - 3];\n        yy[j - 3]=yy[j - 4];\n      }\n      for (; j > 0; j--) {\n        yy[j]=yy[j - 1];\n      }\n      yy[0]=tmp;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n      continue;\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 810,
                    "astHeight": 21
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7054,
                        "startLineNumber": 460,
                        "startColumnNumber": 4,
                        "endLineNumber": 664,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void getAndMoveToFrontDecode(){\n  char[] yy=new char[256];\n  int i, j, nextSym, limitLast;\n  int EOB, groupNo, groupPos;\n  limitLast=baseBlockSize * blockSize100k;\n  origPtr=bsGetIntVS(24);\n  recvDecodingTables();\n  EOB=nInUse + 1;\n  groupNo=-1;\n  groupPos=0;\n  for (i=0; i <= 255; i++) {\n    unzftab[i]=0;\n  }\n  for (i=0; i <= 255; i++) {\n    yy[i]=(char)i;\n  }\n  last=-1;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  while (true) {\n    if (nextSym == EOB) {\n      break;\n    }\n    if (nextSym == RUNA || nextSym == RUNB) {\n      char ch;\n      int s=-1;\n      int N=1;\n      do {\n        if (nextSym == RUNA) {\n          s=s + (0 + 1) * N;\n        }\n else         if (nextSym == RUNB) {\n          s=s + (1 + 1) * N;\n        }\n        N=N * 2;\n{\n          int zt, zn, zvec, zj;\n          if (groupPos == 0) {\n            groupNo++;\n            groupPos=G_SIZE;\n          }\n          groupPos--;\n          zt=selector[groupNo];\n          zn=minLens[zt];\n          zvec=bsR(zn);\n          while (zvec > limit[zt][zn]) {\n            zn++;\n{\n{\n                while (bsLive < 1) {\n                  int zzi;\n                  char thech=0;\n                  try {\n                    thech=(char)bsStream.read();\n                  }\n catch (                  IOException e) {\n                    compressedStreamEOF();\n                  }\n                  if (thech == -1) {\n                    compressedStreamEOF();\n                  }\n                  zzi=thech;\n                  bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                  bsLive+=8;\n                }\n              }\n              zj=(bsBuff >> (bsLive - 1)) & 1;\n              bsLive--;\n            }\n            zvec=(zvec << 1) | zj;\n          }\n          nextSym=perm[zt][zvec - base[zt][zn]];\n        }\n      }\n while (nextSym == RUNA || nextSym == RUNB);\n      s++;\n      ch=seqToUnseq[yy[0]];\n      unzftab[ch]+=s;\n      while (s > 0) {\n        last++;\n        ll8[last]=ch;\n        s--;\n      }\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      continue;\n    }\n else {\n      char tmp;\n      last++;\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      tmp=yy[nextSym - 1];\n      unzftab[seqToUnseq[tmp]]++;\n      ll8[last]=seqToUnseq[tmp];\n      j=nextSym - 1;\n      for (; j > 3; j-=4) {\n        yy[j]=yy[j - 1];\n        yy[j - 1]=yy[j - 2];\n        yy[j - 2]=yy[j - 3];\n        yy[j - 3]=yy[j - 4];\n      }\n      for (; j > 0; j--) {\n        yy[j]=yy[j - 1];\n      }\n      yy[0]=tmp;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n      continue;\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 814,
                    "astHeight": 22
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 20,
                    "startLineNumber": 541,
                    "startColumnNumber": 24,
                    "endLineNumber": 541,
                    "endColumnNumber": 44
                },
                "nodeContext": "s=s + (1 + 1) * N;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 11,
                "astHeight": 7
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 541,
                "startColumnNumber": 37,
                "endLineNumber": 541,
                "endColumnNumber": 38
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
                    "nodePosition": {
                        "charLength": 5,
                        "startLineNumber": 541,
                        "startColumnNumber": 33,
                        "endLineNumber": 541,
                        "endColumnNumber": 38
                    },
                    "nodeContext": "1 + 1",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 541,
                        "startColumnNumber": 32,
                        "endLineNumber": 541,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "(1 + 1)",
                    "nodeType": "ParenthesizedExpression",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 11,
                        "startLineNumber": 541,
                        "startColumnNumber": 32,
                        "endLineNumber": 541,
                        "endColumnNumber": 43
                    },
                    "nodeContext": "(1 + 1) * N",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 6,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 15,
                        "startLineNumber": 541,
                        "startColumnNumber": 28,
                        "endLineNumber": 541,
                        "endColumnNumber": 43
                    },
                    "nodeContext": "s + (1 + 1) * N",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 19,
                        "startLineNumber": 541,
                        "startColumnNumber": 24,
                        "endLineNumber": 541,
                        "endColumnNumber": 43
                    },
                    "nodeContext": "s=s + (1 + 1) * N",
                    "nodeType": "Assignment",
                    "astNodeNumber": 10,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 20,
                        "startLineNumber": 541,
                        "startColumnNumber": 24,
                        "endLineNumber": 541,
                        "endColumnNumber": 44
                    },
                    "nodeContext": "s=s + (1 + 1) * N;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 11,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 75,
                        "startLineNumber": 540,
                        "startColumnNumber": 48,
                        "endLineNumber": 542,
                        "endColumnNumber": 28
                    },
                    "nodeContext": "{\n  s=s + (1 + 1) * N;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 12,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 96,
                        "startLineNumber": 540,
                        "startColumnNumber": 27,
                        "endLineNumber": 542,
                        "endColumnNumber": 28
                    },
                    "nodeContext": "if (nextSym == RUNB) {\n  s=s + (1 + 1) * N;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 16,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 191,
                        "startLineNumber": 538,
                        "startColumnNumber": 20,
                        "endLineNumber": 542,
                        "endColumnNumber": 28
                    },
                    "nodeContext": "if (nextSym == RUNA) {\n  s=s + (0 + 1) * N;\n}\n else if (nextSym == RUNB) {\n  s=s + (1 + 1) * N;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 32,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.DoStatement,body]",
                    "nodePosition": {
                        "charLength": 1995,
                        "startLineNumber": 537,
                        "startColumnNumber": 19,
                        "endLineNumber": 581,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  if (nextSym == RUNA) {\n    s=s + (0 + 1) * N;\n  }\n else   if (nextSym == RUNB) {\n    s=s + (1 + 1) * N;\n  }\n  N=N * 2;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 197,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2042,
                        "startLineNumber": 537,
                        "startColumnNumber": 16,
                        "endLineNumber": 581,
                        "endColumnNumber": 61
                    },
                    "nodeContext": "do {\n  if (nextSym == RUNA) {\n    s=s + (0 + 1) * N;\n  }\n else   if (nextSym == RUNB) {\n    s=s + (1 + 1) * N;\n  }\n  N=N * 2;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n}\n while (nextSym == RUNA || nextSym == RUNB);\n",
                    "nodeType": "DoStatement",
                    "astNodeNumber": 205,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 2512,
                        "startLineNumber": 533,
                        "startColumnNumber": 52,
                        "endLineNumber": 597,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  char ch;\n  int s=-1;\n  int N=1;\n  do {\n    if (nextSym == RUNA) {\n      s=s + (0 + 1) * N;\n    }\n else     if (nextSym == RUNB) {\n      s=s + (1 + 1) * N;\n    }\n    N=N * 2;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              if (thech == -1) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n  }\n while (nextSym == RUNA || nextSym == RUNB);\n  s++;\n  ch=seqToUnseq[yy[0]];\n  unzftab[ch]+=s;\n  while (s > 0) {\n    last++;\n    ll8[last]=ch;\n    s--;\n  }\n  if (last >= limitLast) {\n    blockOverrun();\n  }\n  continue;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 264,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4898,
                        "startLineNumber": 533,
                        "startColumnNumber": 12,
                        "endLineNumber": 662,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (nextSym == RUNA || nextSym == RUNB) {\n  char ch;\n  int s=-1;\n  int N=1;\n  do {\n    if (nextSym == RUNA) {\n      s=s + (0 + 1) * N;\n    }\n else     if (nextSym == RUNB) {\n      s=s + (1 + 1) * N;\n    }\n    N=N * 2;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              if (thech == -1) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n  }\n while (nextSym == RUNA || nextSym == RUNB);\n  s++;\n  ch=seqToUnseq[yy[0]];\n  unzftab[ch]+=s;\n  while (s > 0) {\n    last++;\n    ll8[last]=ch;\n    s--;\n  }\n  if (last >= limitLast) {\n    blockOverrun();\n  }\n  continue;\n}\n else {\n  char tmp;\n  last++;\n  if (last >= limitLast) {\n    blockOverrun();\n  }\n  tmp=yy[nextSym - 1];\n  unzftab[seqToUnseq[tmp]]++;\n  ll8[last]=seqToUnseq[tmp];\n  j=nextSym - 1;\n  for (; j > 3; j-=4) {\n    yy[j]=yy[j - 1];\n    yy[j - 1]=yy[j - 2];\n    yy[j - 2]=yy[j - 3];\n    yy[j - 3]=yy[j - 4];\n  }\n  for (; j > 0; j--) {\n    yy[j]=yy[j - 1];\n  }\n  yy[0]=tmp;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  continue;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 544,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 4995,
                        "startLineNumber": 527,
                        "startColumnNumber": 21,
                        "endLineNumber": 663,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (nextSym == EOB) {\n    break;\n  }\n  if (nextSym == RUNA || nextSym == RUNB) {\n    char ch;\n    int s=-1;\n    int N=1;\n    do {\n      if (nextSym == RUNA) {\n        s=s + (0 + 1) * N;\n      }\n else       if (nextSym == RUNB) {\n        s=s + (1 + 1) * N;\n      }\n      N=N * 2;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                if (thech == -1) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n    }\n while (nextSym == RUNA || nextSym == RUNB);\n    s++;\n    ch=seqToUnseq[yy[0]];\n    unzftab[ch]+=s;\n    while (s > 0) {\n      last++;\n      ll8[last]=ch;\n      s--;\n    }\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    continue;\n  }\n else {\n    char tmp;\n    last++;\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    tmp=yy[nextSym - 1];\n    unzftab[seqToUnseq[tmp]]++;\n    ll8[last]=seqToUnseq[tmp];\n    j=nextSym - 1;\n    for (; j > 3; j-=4) {\n      yy[j]=yy[j - 1];\n      yy[j - 1]=yy[j - 2];\n      yy[j - 2]=yy[j - 3];\n      yy[j - 3]=yy[j - 4];\n    }\n    for (; j > 0; j--) {\n      yy[j]=yy[j - 1];\n    }\n    yy[0]=tmp;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n    continue;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 551,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 5008,
                        "startLineNumber": 527,
                        "startColumnNumber": 8,
                        "endLineNumber": 663,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (true) {\n  if (nextSym == EOB) {\n    break;\n  }\n  if (nextSym == RUNA || nextSym == RUNB) {\n    char ch;\n    int s=-1;\n    int N=1;\n    do {\n      if (nextSym == RUNA) {\n        s=s + (0 + 1) * N;\n      }\n else       if (nextSym == RUNB) {\n        s=s + (1 + 1) * N;\n      }\n      N=N * 2;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                if (thech == -1) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n    }\n while (nextSym == RUNA || nextSym == RUNB);\n    s++;\n    ch=seqToUnseq[yy[0]];\n    unzftab[ch]+=s;\n    while (s > 0) {\n      last++;\n      ll8[last]=ch;\n      s--;\n    }\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    continue;\n  }\n else {\n    char tmp;\n    last++;\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    tmp=yy[nextSym - 1];\n    unzftab[seqToUnseq[tmp]]++;\n    ll8[last]=seqToUnseq[tmp];\n    j=nextSym - 1;\n    for (; j > 3; j-=4) {\n      yy[j]=yy[j - 1];\n      yy[j - 1]=yy[j - 2];\n      yy[j - 2]=yy[j - 3];\n      yy[j - 3]=yy[j - 4];\n    }\n    for (; j > 0; j--) {\n      yy[j]=yy[j - 1];\n    }\n    yy[0]=tmp;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n    continue;\n  }\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 553,
                    "astHeight": 20
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 7015,
                        "startLineNumber": 460,
                        "startColumnNumber": 43,
                        "endLineNumber": 664,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  char[] yy=new char[256];\n  int i, j, nextSym, limitLast;\n  int EOB, groupNo, groupPos;\n  limitLast=baseBlockSize * blockSize100k;\n  origPtr=bsGetIntVS(24);\n  recvDecodingTables();\n  EOB=nInUse + 1;\n  groupNo=-1;\n  groupPos=0;\n  for (i=0; i <= 255; i++) {\n    unzftab[i]=0;\n  }\n  for (i=0; i <= 255; i++) {\n    yy[i]=(char)i;\n  }\n  last=-1;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  while (true) {\n    if (nextSym == EOB) {\n      break;\n    }\n    if (nextSym == RUNA || nextSym == RUNB) {\n      char ch;\n      int s=-1;\n      int N=1;\n      do {\n        if (nextSym == RUNA) {\n          s=s + (0 + 1) * N;\n        }\n else         if (nextSym == RUNB) {\n          s=s + (1 + 1) * N;\n        }\n        N=N * 2;\n{\n          int zt, zn, zvec, zj;\n          if (groupPos == 0) {\n            groupNo++;\n            groupPos=G_SIZE;\n          }\n          groupPos--;\n          zt=selector[groupNo];\n          zn=minLens[zt];\n          zvec=bsR(zn);\n          while (zvec > limit[zt][zn]) {\n            zn++;\n{\n{\n                while (bsLive < 1) {\n                  int zzi;\n                  char thech=0;\n                  try {\n                    thech=(char)bsStream.read();\n                  }\n catch (                  IOException e) {\n                    compressedStreamEOF();\n                  }\n                  if (thech == -1) {\n                    compressedStreamEOF();\n                  }\n                  zzi=thech;\n                  bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                  bsLive+=8;\n                }\n              }\n              zj=(bsBuff >> (bsLive - 1)) & 1;\n              bsLive--;\n            }\n            zvec=(zvec << 1) | zj;\n          }\n          nextSym=perm[zt][zvec - base[zt][zn]];\n        }\n      }\n while (nextSym == RUNA || nextSym == RUNB);\n      s++;\n      ch=seqToUnseq[yy[0]];\n      unzftab[ch]+=s;\n      while (s > 0) {\n        last++;\n        ll8[last]=ch;\n        s--;\n      }\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      continue;\n    }\n else {\n      char tmp;\n      last++;\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      tmp=yy[nextSym - 1];\n      unzftab[seqToUnseq[tmp]]++;\n      ll8[last]=seqToUnseq[tmp];\n      j=nextSym - 1;\n      for (; j > 3; j-=4) {\n        yy[j]=yy[j - 1];\n        yy[j - 1]=yy[j - 2];\n        yy[j - 2]=yy[j - 3];\n        yy[j - 3]=yy[j - 4];\n      }\n      for (; j > 0; j--) {\n        yy[j]=yy[j - 1];\n      }\n      yy[0]=tmp;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n      continue;\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 810,
                    "astHeight": 21
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7054,
                        "startLineNumber": 460,
                        "startColumnNumber": 4,
                        "endLineNumber": 664,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void getAndMoveToFrontDecode(){\n  char[] yy=new char[256];\n  int i, j, nextSym, limitLast;\n  int EOB, groupNo, groupPos;\n  limitLast=baseBlockSize * blockSize100k;\n  origPtr=bsGetIntVS(24);\n  recvDecodingTables();\n  EOB=nInUse + 1;\n  groupNo=-1;\n  groupPos=0;\n  for (i=0; i <= 255; i++) {\n    unzftab[i]=0;\n  }\n  for (i=0; i <= 255; i++) {\n    yy[i]=(char)i;\n  }\n  last=-1;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  while (true) {\n    if (nextSym == EOB) {\n      break;\n    }\n    if (nextSym == RUNA || nextSym == RUNB) {\n      char ch;\n      int s=-1;\n      int N=1;\n      do {\n        if (nextSym == RUNA) {\n          s=s + (0 + 1) * N;\n        }\n else         if (nextSym == RUNB) {\n          s=s + (1 + 1) * N;\n        }\n        N=N * 2;\n{\n          int zt, zn, zvec, zj;\n          if (groupPos == 0) {\n            groupNo++;\n            groupPos=G_SIZE;\n          }\n          groupPos--;\n          zt=selector[groupNo];\n          zn=minLens[zt];\n          zvec=bsR(zn);\n          while (zvec > limit[zt][zn]) {\n            zn++;\n{\n{\n                while (bsLive < 1) {\n                  int zzi;\n                  char thech=0;\n                  try {\n                    thech=(char)bsStream.read();\n                  }\n catch (                  IOException e) {\n                    compressedStreamEOF();\n                  }\n                  if (thech == -1) {\n                    compressedStreamEOF();\n                  }\n                  zzi=thech;\n                  bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                  bsLive+=8;\n                }\n              }\n              zj=(bsBuff >> (bsLive - 1)) & 1;\n              bsLive--;\n            }\n            zvec=(zvec << 1) | zj;\n          }\n          nextSym=perm[zt][zvec - base[zt][zn]];\n        }\n      }\n while (nextSym == RUNA || nextSym == RUNB);\n      s++;\n      ch=seqToUnseq[yy[0]];\n      unzftab[ch]+=s;\n      while (s > 0) {\n        last++;\n        ll8[last]=ch;\n        s--;\n      }\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      continue;\n    }\n else {\n      char tmp;\n      last++;\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      tmp=yy[nextSym - 1];\n      unzftab[seqToUnseq[tmp]]++;\n      ll8[last]=seqToUnseq[tmp];\n      j=nextSym - 1;\n      for (; j > 3; j-=4) {\n        yy[j]=yy[j - 1];\n        yy[j - 1]=yy[j - 2];\n        yy[j - 2]=yy[j - 3];\n        yy[j - 3]=yy[j - 4];\n      }\n      for (; j > 0; j--) {\n        yy[j]=yy[j - 1];\n      }\n      yy[0]=tmp;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n      continue;\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 814,
                    "astHeight": 22
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 20,
                    "startLineNumber": 541,
                    "startColumnNumber": 24,
                    "endLineNumber": 541,
                    "endColumnNumber": 44
                },
                "nodeContext": "s=s + (1 + 1) * N;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 11,
                "astHeight": 7
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 558,
                "startColumnNumber": 52,
                "endLineNumber": 558,
                "endColumnNumber": 53
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
                    "nodePosition": {
                        "charLength": 10,
                        "startLineNumber": 558,
                        "startColumnNumber": 43,
                        "endLineNumber": 558,
                        "endColumnNumber": 53
                    },
                    "nodeContext": "bsLive < 1",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 813,
                        "startLineNumber": 558,
                        "startColumnNumber": 36,
                        "endLineNumber": 572,
                        "endColumnNumber": 37
                    },
                    "nodeContext": "while (bsLive < 1) {\n  int zzi;\n  char thech=0;\n  try {\n    thech=(char)bsStream.read();\n  }\n catch (  IOException e) {\n    compressedStreamEOF();\n  }\n  if (thech == -1) {\n    compressedStreamEOF();\n  }\n  zzi=thech;\n  bsBuff=(bsBuff << 8) | (zzi & 0xff);\n  bsLive+=8;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 62,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 885,
                        "startLineNumber": 557,
                        "startColumnNumber": 32,
                        "endLineNumber": 573,
                        "endColumnNumber": 33
                    },
                    "nodeContext": "{\n  while (bsLive < 1) {\n    int zzi;\n    char thech=0;\n    try {\n      thech=(char)bsStream.read();\n    }\n catch (    IOException e) {\n      compressedStreamEOF();\n    }\n    if (thech == -1) {\n      compressedStreamEOF();\n    }\n    zzi=thech;\n    bsBuff=(bsBuff << 8) | (zzi & 0xff);\n    bsLive+=8;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 63,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1058,
                        "startLineNumber": 556,
                        "startColumnNumber": 28,
                        "endLineNumber": 576,
                        "endColumnNumber": 29
                    },
                    "nodeContext": "{\n{\n    while (bsLive < 1) {\n      int zzi;\n      char thech=0;\n      try {\n        thech=(char)bsStream.read();\n      }\n catch (      IOException e) {\n        compressedStreamEOF();\n      }\n      if (thech == -1) {\n        compressedStreamEOF();\n      }\n      zzi=thech;\n      bsBuff=(bsBuff << 8) | (zzi & 0xff);\n      bsLive+=8;\n    }\n  }\n  zj=(bsBuff >> (bsLive - 1)) & 1;\n  bsLive--;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 79,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 1201,
                        "startLineNumber": 554,
                        "startColumnNumber": 53,
                        "endLineNumber": 578,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "{\n  zn++;\n{\n{\n      while (bsLive < 1) {\n        int zzi;\n        char thech=0;\n        try {\n          thech=(char)bsStream.read();\n        }\n catch (        IOException e) {\n          compressedStreamEOF();\n        }\n        if (thech == -1) {\n          compressedStreamEOF();\n        }\n        zzi=thech;\n        bsBuff=(bsBuff << 8) | (zzi & 0xff);\n        bsLive+=8;\n      }\n    }\n    zj=(bsBuff >> (bsLive - 1)) & 1;\n    bsLive--;\n  }\n  zvec=(zvec << 1) | zj;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 92,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1230,
                        "startLineNumber": 554,
                        "startColumnNumber": 24,
                        "endLineNumber": 578,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "while (zvec > limit[zt][zn]) {\n  zn++;\n{\n{\n      while (bsLive < 1) {\n        int zzi;\n        char thech=0;\n        try {\n          thech=(char)bsStream.read();\n        }\n catch (        IOException e) {\n          compressedStreamEOF();\n        }\n        if (thech == -1) {\n          compressedStreamEOF();\n        }\n        zzi=thech;\n        bsBuff=(bsBuff << 8) | (zzi & 0xff);\n        bsLive+=8;\n      }\n    }\n    zj=(bsBuff >> (bsLive - 1)) & 1;\n    bsLive--;\n  }\n  zvec=(zvec << 1) | zj;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 100,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1712,
                        "startLineNumber": 544,
                        "startColumnNumber": 20,
                        "endLineNumber": 580,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  int zt, zn, zvec, zj;\n  if (groupPos == 0) {\n    groupNo++;\n    groupPos=G_SIZE;\n  }\n  groupPos--;\n  zt=selector[groupNo];\n  zn=minLens[zt];\n  zvec=bsR(zn);\n  while (zvec > limit[zt][zn]) {\n    zn++;\n{\n{\n        while (bsLive < 1) {\n          int zzi;\n          char thech=0;\n          try {\n            thech=(char)bsStream.read();\n          }\n catch (          IOException e) {\n            compressedStreamEOF();\n          }\n          if (thech == -1) {\n            compressedStreamEOF();\n          }\n          zzi=thech;\n          bsBuff=(bsBuff << 8) | (zzi & 0xff);\n          bsLive+=8;\n        }\n      }\n      zj=(bsBuff >> (bsLive - 1)) & 1;\n      bsLive--;\n    }\n    zvec=(zvec << 1) | zj;\n  }\n  nextSym=perm[zt][zvec - base[zt][zn]];\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 158,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.DoStatement,body]",
                    "nodePosition": {
                        "charLength": 1995,
                        "startLineNumber": 537,
                        "startColumnNumber": 19,
                        "endLineNumber": 581,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  if (nextSym == RUNA) {\n    s=s + (0 + 1) * N;\n  }\n else   if (nextSym == RUNB) {\n    s=s + (1 + 1) * N;\n  }\n  N=N * 2;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 197,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2042,
                        "startLineNumber": 537,
                        "startColumnNumber": 16,
                        "endLineNumber": 581,
                        "endColumnNumber": 61
                    },
                    "nodeContext": "do {\n  if (nextSym == RUNA) {\n    s=s + (0 + 1) * N;\n  }\n else   if (nextSym == RUNB) {\n    s=s + (1 + 1) * N;\n  }\n  N=N * 2;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n}\n while (nextSym == RUNA || nextSym == RUNB);\n",
                    "nodeType": "DoStatement",
                    "astNodeNumber": 205,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 2512,
                        "startLineNumber": 533,
                        "startColumnNumber": 52,
                        "endLineNumber": 597,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  char ch;\n  int s=-1;\n  int N=1;\n  do {\n    if (nextSym == RUNA) {\n      s=s + (0 + 1) * N;\n    }\n else     if (nextSym == RUNB) {\n      s=s + (1 + 1) * N;\n    }\n    N=N * 2;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              if (thech == -1) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n  }\n while (nextSym == RUNA || nextSym == RUNB);\n  s++;\n  ch=seqToUnseq[yy[0]];\n  unzftab[ch]+=s;\n  while (s > 0) {\n    last++;\n    ll8[last]=ch;\n    s--;\n  }\n  if (last >= limitLast) {\n    blockOverrun();\n  }\n  continue;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 264,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4898,
                        "startLineNumber": 533,
                        "startColumnNumber": 12,
                        "endLineNumber": 662,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (nextSym == RUNA || nextSym == RUNB) {\n  char ch;\n  int s=-1;\n  int N=1;\n  do {\n    if (nextSym == RUNA) {\n      s=s + (0 + 1) * N;\n    }\n else     if (nextSym == RUNB) {\n      s=s + (1 + 1) * N;\n    }\n    N=N * 2;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              if (thech == -1) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n  }\n while (nextSym == RUNA || nextSym == RUNB);\n  s++;\n  ch=seqToUnseq[yy[0]];\n  unzftab[ch]+=s;\n  while (s > 0) {\n    last++;\n    ll8[last]=ch;\n    s--;\n  }\n  if (last >= limitLast) {\n    blockOverrun();\n  }\n  continue;\n}\n else {\n  char tmp;\n  last++;\n  if (last >= limitLast) {\n    blockOverrun();\n  }\n  tmp=yy[nextSym - 1];\n  unzftab[seqToUnseq[tmp]]++;\n  ll8[last]=seqToUnseq[tmp];\n  j=nextSym - 1;\n  for (; j > 3; j-=4) {\n    yy[j]=yy[j - 1];\n    yy[j - 1]=yy[j - 2];\n    yy[j - 2]=yy[j - 3];\n    yy[j - 3]=yy[j - 4];\n  }\n  for (; j > 0; j--) {\n    yy[j]=yy[j - 1];\n  }\n  yy[0]=tmp;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  continue;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 544,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 4995,
                        "startLineNumber": 527,
                        "startColumnNumber": 21,
                        "endLineNumber": 663,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (nextSym == EOB) {\n    break;\n  }\n  if (nextSym == RUNA || nextSym == RUNB) {\n    char ch;\n    int s=-1;\n    int N=1;\n    do {\n      if (nextSym == RUNA) {\n        s=s + (0 + 1) * N;\n      }\n else       if (nextSym == RUNB) {\n        s=s + (1 + 1) * N;\n      }\n      N=N * 2;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                if (thech == -1) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n    }\n while (nextSym == RUNA || nextSym == RUNB);\n    s++;\n    ch=seqToUnseq[yy[0]];\n    unzftab[ch]+=s;\n    while (s > 0) {\n      last++;\n      ll8[last]=ch;\n      s--;\n    }\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    continue;\n  }\n else {\n    char tmp;\n    last++;\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    tmp=yy[nextSym - 1];\n    unzftab[seqToUnseq[tmp]]++;\n    ll8[last]=seqToUnseq[tmp];\n    j=nextSym - 1;\n    for (; j > 3; j-=4) {\n      yy[j]=yy[j - 1];\n      yy[j - 1]=yy[j - 2];\n      yy[j - 2]=yy[j - 3];\n      yy[j - 3]=yy[j - 4];\n    }\n    for (; j > 0; j--) {\n      yy[j]=yy[j - 1];\n    }\n    yy[0]=tmp;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n    continue;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 551,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 5008,
                        "startLineNumber": 527,
                        "startColumnNumber": 8,
                        "endLineNumber": 663,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (true) {\n  if (nextSym == EOB) {\n    break;\n  }\n  if (nextSym == RUNA || nextSym == RUNB) {\n    char ch;\n    int s=-1;\n    int N=1;\n    do {\n      if (nextSym == RUNA) {\n        s=s + (0 + 1) * N;\n      }\n else       if (nextSym == RUNB) {\n        s=s + (1 + 1) * N;\n      }\n      N=N * 2;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                if (thech == -1) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n    }\n while (nextSym == RUNA || nextSym == RUNB);\n    s++;\n    ch=seqToUnseq[yy[0]];\n    unzftab[ch]+=s;\n    while (s > 0) {\n      last++;\n      ll8[last]=ch;\n      s--;\n    }\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    continue;\n  }\n else {\n    char tmp;\n    last++;\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    tmp=yy[nextSym - 1];\n    unzftab[seqToUnseq[tmp]]++;\n    ll8[last]=seqToUnseq[tmp];\n    j=nextSym - 1;\n    for (; j > 3; j-=4) {\n      yy[j]=yy[j - 1];\n      yy[j - 1]=yy[j - 2];\n      yy[j - 2]=yy[j - 3];\n      yy[j - 3]=yy[j - 4];\n    }\n    for (; j > 0; j--) {\n      yy[j]=yy[j - 1];\n    }\n    yy[0]=tmp;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n    continue;\n  }\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 553,
                    "astHeight": 20
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 7015,
                        "startLineNumber": 460,
                        "startColumnNumber": 43,
                        "endLineNumber": 664,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  char[] yy=new char[256];\n  int i, j, nextSym, limitLast;\n  int EOB, groupNo, groupPos;\n  limitLast=baseBlockSize * blockSize100k;\n  origPtr=bsGetIntVS(24);\n  recvDecodingTables();\n  EOB=nInUse + 1;\n  groupNo=-1;\n  groupPos=0;\n  for (i=0; i <= 255; i++) {\n    unzftab[i]=0;\n  }\n  for (i=0; i <= 255; i++) {\n    yy[i]=(char)i;\n  }\n  last=-1;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  while (true) {\n    if (nextSym == EOB) {\n      break;\n    }\n    if (nextSym == RUNA || nextSym == RUNB) {\n      char ch;\n      int s=-1;\n      int N=1;\n      do {\n        if (nextSym == RUNA) {\n          s=s + (0 + 1) * N;\n        }\n else         if (nextSym == RUNB) {\n          s=s + (1 + 1) * N;\n        }\n        N=N * 2;\n{\n          int zt, zn, zvec, zj;\n          if (groupPos == 0) {\n            groupNo++;\n            groupPos=G_SIZE;\n          }\n          groupPos--;\n          zt=selector[groupNo];\n          zn=minLens[zt];\n          zvec=bsR(zn);\n          while (zvec > limit[zt][zn]) {\n            zn++;\n{\n{\n                while (bsLive < 1) {\n                  int zzi;\n                  char thech=0;\n                  try {\n                    thech=(char)bsStream.read();\n                  }\n catch (                  IOException e) {\n                    compressedStreamEOF();\n                  }\n                  if (thech == -1) {\n                    compressedStreamEOF();\n                  }\n                  zzi=thech;\n                  bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                  bsLive+=8;\n                }\n              }\n              zj=(bsBuff >> (bsLive - 1)) & 1;\n              bsLive--;\n            }\n            zvec=(zvec << 1) | zj;\n          }\n          nextSym=perm[zt][zvec - base[zt][zn]];\n        }\n      }\n while (nextSym == RUNA || nextSym == RUNB);\n      s++;\n      ch=seqToUnseq[yy[0]];\n      unzftab[ch]+=s;\n      while (s > 0) {\n        last++;\n        ll8[last]=ch;\n        s--;\n      }\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      continue;\n    }\n else {\n      char tmp;\n      last++;\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      tmp=yy[nextSym - 1];\n      unzftab[seqToUnseq[tmp]]++;\n      ll8[last]=seqToUnseq[tmp];\n      j=nextSym - 1;\n      for (; j > 3; j-=4) {\n        yy[j]=yy[j - 1];\n        yy[j - 1]=yy[j - 2];\n        yy[j - 2]=yy[j - 3];\n        yy[j - 3]=yy[j - 4];\n      }\n      for (; j > 0; j--) {\n        yy[j]=yy[j - 1];\n      }\n      yy[0]=tmp;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n      continue;\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 810,
                    "astHeight": 21
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7054,
                        "startLineNumber": 460,
                        "startColumnNumber": 4,
                        "endLineNumber": 664,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void getAndMoveToFrontDecode(){\n  char[] yy=new char[256];\n  int i, j, nextSym, limitLast;\n  int EOB, groupNo, groupPos;\n  limitLast=baseBlockSize * blockSize100k;\n  origPtr=bsGetIntVS(24);\n  recvDecodingTables();\n  EOB=nInUse + 1;\n  groupNo=-1;\n  groupPos=0;\n  for (i=0; i <= 255; i++) {\n    unzftab[i]=0;\n  }\n  for (i=0; i <= 255; i++) {\n    yy[i]=(char)i;\n  }\n  last=-1;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  while (true) {\n    if (nextSym == EOB) {\n      break;\n    }\n    if (nextSym == RUNA || nextSym == RUNB) {\n      char ch;\n      int s=-1;\n      int N=1;\n      do {\n        if (nextSym == RUNA) {\n          s=s + (0 + 1) * N;\n        }\n else         if (nextSym == RUNB) {\n          s=s + (1 + 1) * N;\n        }\n        N=N * 2;\n{\n          int zt, zn, zvec, zj;\n          if (groupPos == 0) {\n            groupNo++;\n            groupPos=G_SIZE;\n          }\n          groupPos--;\n          zt=selector[groupNo];\n          zn=minLens[zt];\n          zvec=bsR(zn);\n          while (zvec > limit[zt][zn]) {\n            zn++;\n{\n{\n                while (bsLive < 1) {\n                  int zzi;\n                  char thech=0;\n                  try {\n                    thech=(char)bsStream.read();\n                  }\n catch (                  IOException e) {\n                    compressedStreamEOF();\n                  }\n                  if (thech == -1) {\n                    compressedStreamEOF();\n                  }\n                  zzi=thech;\n                  bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                  bsLive+=8;\n                }\n              }\n              zj=(bsBuff >> (bsLive - 1)) & 1;\n              bsLive--;\n            }\n            zvec=(zvec << 1) | zj;\n          }\n          nextSym=perm[zt][zvec - base[zt][zn]];\n        }\n      }\n while (nextSym == RUNA || nextSym == RUNB);\n      s++;\n      ch=seqToUnseq[yy[0]];\n      unzftab[ch]+=s;\n      while (s > 0) {\n        last++;\n        ll8[last]=ch;\n        s--;\n      }\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      continue;\n    }\n else {\n      char tmp;\n      last++;\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      tmp=yy[nextSym - 1];\n      unzftab[seqToUnseq[tmp]]++;\n      ll8[last]=seqToUnseq[tmp];\n      j=nextSym - 1;\n      for (; j > 3; j-=4) {\n        yy[j]=yy[j - 1];\n        yy[j - 1]=yy[j - 2];\n        yy[j - 2]=yy[j - 3];\n        yy[j - 3]=yy[j - 4];\n      }\n      for (; j > 0; j--) {\n        yy[j]=yy[j - 1];\n      }\n      yy[0]=tmp;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n      continue;\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 814,
                    "astHeight": 22
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
                "nodePosition": {
                    "charLength": 10,
                    "startLineNumber": 558,
                    "startColumnNumber": 43,
                    "endLineNumber": 558,
                    "endColumnNumber": 53
                },
                "nodeContext": "bsLive < 1",
                "nodeType": "InfixExpression",
                "astNodeNumber": 3,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 566,
                "startColumnNumber": 54,
                "endLineNumber": 566,
                "endColumnNumber": 55
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 2,
                        "startLineNumber": 566,
                        "startColumnNumber": 53,
                        "endLineNumber": 566,
                        "endColumnNumber": 55
                    },
                    "nodeContext": "-1",
                    "nodeType": "PrefixExpression",
                    "astNodeNumber": 2,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 11,
                        "startLineNumber": 566,
                        "startColumnNumber": 44,
                        "endLineNumber": 566,
                        "endColumnNumber": 55
                    },
                    "nodeContext": "thech == -1",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 127,
                        "startLineNumber": 566,
                        "startColumnNumber": 40,
                        "endLineNumber": 568,
                        "endColumnNumber": 41
                    },
                    "nodeContext": "if (thech == -1) {\n  compressedStreamEOF();\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 9,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 794,
                        "startLineNumber": 558,
                        "startColumnNumber": 55,
                        "endLineNumber": 572,
                        "endColumnNumber": 37
                    },
                    "nodeContext": "{\n  int zzi;\n  char thech=0;\n  try {\n    thech=(char)bsStream.read();\n  }\n catch (  IOException e) {\n    compressedStreamEOF();\n  }\n  if (thech == -1) {\n    compressedStreamEOF();\n  }\n  zzi=thech;\n  bsBuff=(bsBuff << 8) | (zzi & 0xff);\n  bsLive+=8;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 58,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 813,
                        "startLineNumber": 558,
                        "startColumnNumber": 36,
                        "endLineNumber": 572,
                        "endColumnNumber": 37
                    },
                    "nodeContext": "while (bsLive < 1) {\n  int zzi;\n  char thech=0;\n  try {\n    thech=(char)bsStream.read();\n  }\n catch (  IOException e) {\n    compressedStreamEOF();\n  }\n  if (thech == -1) {\n    compressedStreamEOF();\n  }\n  zzi=thech;\n  bsBuff=(bsBuff << 8) | (zzi & 0xff);\n  bsLive+=8;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 62,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 885,
                        "startLineNumber": 557,
                        "startColumnNumber": 32,
                        "endLineNumber": 573,
                        "endColumnNumber": 33
                    },
                    "nodeContext": "{\n  while (bsLive < 1) {\n    int zzi;\n    char thech=0;\n    try {\n      thech=(char)bsStream.read();\n    }\n catch (    IOException e) {\n      compressedStreamEOF();\n    }\n    if (thech == -1) {\n      compressedStreamEOF();\n    }\n    zzi=thech;\n    bsBuff=(bsBuff << 8) | (zzi & 0xff);\n    bsLive+=8;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 63,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1058,
                        "startLineNumber": 556,
                        "startColumnNumber": 28,
                        "endLineNumber": 576,
                        "endColumnNumber": 29
                    },
                    "nodeContext": "{\n{\n    while (bsLive < 1) {\n      int zzi;\n      char thech=0;\n      try {\n        thech=(char)bsStream.read();\n      }\n catch (      IOException e) {\n        compressedStreamEOF();\n      }\n      if (thech == -1) {\n        compressedStreamEOF();\n      }\n      zzi=thech;\n      bsBuff=(bsBuff << 8) | (zzi & 0xff);\n      bsLive+=8;\n    }\n  }\n  zj=(bsBuff >> (bsLive - 1)) & 1;\n  bsLive--;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 79,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 1201,
                        "startLineNumber": 554,
                        "startColumnNumber": 53,
                        "endLineNumber": 578,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "{\n  zn++;\n{\n{\n      while (bsLive < 1) {\n        int zzi;\n        char thech=0;\n        try {\n          thech=(char)bsStream.read();\n        }\n catch (        IOException e) {\n          compressedStreamEOF();\n        }\n        if (thech == -1) {\n          compressedStreamEOF();\n        }\n        zzi=thech;\n        bsBuff=(bsBuff << 8) | (zzi & 0xff);\n        bsLive+=8;\n      }\n    }\n    zj=(bsBuff >> (bsLive - 1)) & 1;\n    bsLive--;\n  }\n  zvec=(zvec << 1) | zj;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 92,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1230,
                        "startLineNumber": 554,
                        "startColumnNumber": 24,
                        "endLineNumber": 578,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "while (zvec > limit[zt][zn]) {\n  zn++;\n{\n{\n      while (bsLive < 1) {\n        int zzi;\n        char thech=0;\n        try {\n          thech=(char)bsStream.read();\n        }\n catch (        IOException e) {\n          compressedStreamEOF();\n        }\n        if (thech == -1) {\n          compressedStreamEOF();\n        }\n        zzi=thech;\n        bsBuff=(bsBuff << 8) | (zzi & 0xff);\n        bsLive+=8;\n      }\n    }\n    zj=(bsBuff >> (bsLive - 1)) & 1;\n    bsLive--;\n  }\n  zvec=(zvec << 1) | zj;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 100,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1712,
                        "startLineNumber": 544,
                        "startColumnNumber": 20,
                        "endLineNumber": 580,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  int zt, zn, zvec, zj;\n  if (groupPos == 0) {\n    groupNo++;\n    groupPos=G_SIZE;\n  }\n  groupPos--;\n  zt=selector[groupNo];\n  zn=minLens[zt];\n  zvec=bsR(zn);\n  while (zvec > limit[zt][zn]) {\n    zn++;\n{\n{\n        while (bsLive < 1) {\n          int zzi;\n          char thech=0;\n          try {\n            thech=(char)bsStream.read();\n          }\n catch (          IOException e) {\n            compressedStreamEOF();\n          }\n          if (thech == -1) {\n            compressedStreamEOF();\n          }\n          zzi=thech;\n          bsBuff=(bsBuff << 8) | (zzi & 0xff);\n          bsLive+=8;\n        }\n      }\n      zj=(bsBuff >> (bsLive - 1)) & 1;\n      bsLive--;\n    }\n    zvec=(zvec << 1) | zj;\n  }\n  nextSym=perm[zt][zvec - base[zt][zn]];\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 158,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.DoStatement,body]",
                    "nodePosition": {
                        "charLength": 1995,
                        "startLineNumber": 537,
                        "startColumnNumber": 19,
                        "endLineNumber": 581,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  if (nextSym == RUNA) {\n    s=s + (0 + 1) * N;\n  }\n else   if (nextSym == RUNB) {\n    s=s + (1 + 1) * N;\n  }\n  N=N * 2;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 197,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2042,
                        "startLineNumber": 537,
                        "startColumnNumber": 16,
                        "endLineNumber": 581,
                        "endColumnNumber": 61
                    },
                    "nodeContext": "do {\n  if (nextSym == RUNA) {\n    s=s + (0 + 1) * N;\n  }\n else   if (nextSym == RUNB) {\n    s=s + (1 + 1) * N;\n  }\n  N=N * 2;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n}\n while (nextSym == RUNA || nextSym == RUNB);\n",
                    "nodeType": "DoStatement",
                    "astNodeNumber": 205,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 2512,
                        "startLineNumber": 533,
                        "startColumnNumber": 52,
                        "endLineNumber": 597,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  char ch;\n  int s=-1;\n  int N=1;\n  do {\n    if (nextSym == RUNA) {\n      s=s + (0 + 1) * N;\n    }\n else     if (nextSym == RUNB) {\n      s=s + (1 + 1) * N;\n    }\n    N=N * 2;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              if (thech == -1) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n  }\n while (nextSym == RUNA || nextSym == RUNB);\n  s++;\n  ch=seqToUnseq[yy[0]];\n  unzftab[ch]+=s;\n  while (s > 0) {\n    last++;\n    ll8[last]=ch;\n    s--;\n  }\n  if (last >= limitLast) {\n    blockOverrun();\n  }\n  continue;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 264,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4898,
                        "startLineNumber": 533,
                        "startColumnNumber": 12,
                        "endLineNumber": 662,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (nextSym == RUNA || nextSym == RUNB) {\n  char ch;\n  int s=-1;\n  int N=1;\n  do {\n    if (nextSym == RUNA) {\n      s=s + (0 + 1) * N;\n    }\n else     if (nextSym == RUNB) {\n      s=s + (1 + 1) * N;\n    }\n    N=N * 2;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              if (thech == -1) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n  }\n while (nextSym == RUNA || nextSym == RUNB);\n  s++;\n  ch=seqToUnseq[yy[0]];\n  unzftab[ch]+=s;\n  while (s > 0) {\n    last++;\n    ll8[last]=ch;\n    s--;\n  }\n  if (last >= limitLast) {\n    blockOverrun();\n  }\n  continue;\n}\n else {\n  char tmp;\n  last++;\n  if (last >= limitLast) {\n    blockOverrun();\n  }\n  tmp=yy[nextSym - 1];\n  unzftab[seqToUnseq[tmp]]++;\n  ll8[last]=seqToUnseq[tmp];\n  j=nextSym - 1;\n  for (; j > 3; j-=4) {\n    yy[j]=yy[j - 1];\n    yy[j - 1]=yy[j - 2];\n    yy[j - 2]=yy[j - 3];\n    yy[j - 3]=yy[j - 4];\n  }\n  for (; j > 0; j--) {\n    yy[j]=yy[j - 1];\n  }\n  yy[0]=tmp;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  continue;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 544,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 4995,
                        "startLineNumber": 527,
                        "startColumnNumber": 21,
                        "endLineNumber": 663,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (nextSym == EOB) {\n    break;\n  }\n  if (nextSym == RUNA || nextSym == RUNB) {\n    char ch;\n    int s=-1;\n    int N=1;\n    do {\n      if (nextSym == RUNA) {\n        s=s + (0 + 1) * N;\n      }\n else       if (nextSym == RUNB) {\n        s=s + (1 + 1) * N;\n      }\n      N=N * 2;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                if (thech == -1) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n    }\n while (nextSym == RUNA || nextSym == RUNB);\n    s++;\n    ch=seqToUnseq[yy[0]];\n    unzftab[ch]+=s;\n    while (s > 0) {\n      last++;\n      ll8[last]=ch;\n      s--;\n    }\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    continue;\n  }\n else {\n    char tmp;\n    last++;\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    tmp=yy[nextSym - 1];\n    unzftab[seqToUnseq[tmp]]++;\n    ll8[last]=seqToUnseq[tmp];\n    j=nextSym - 1;\n    for (; j > 3; j-=4) {\n      yy[j]=yy[j - 1];\n      yy[j - 1]=yy[j - 2];\n      yy[j - 2]=yy[j - 3];\n      yy[j - 3]=yy[j - 4];\n    }\n    for (; j > 0; j--) {\n      yy[j]=yy[j - 1];\n    }\n    yy[0]=tmp;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n    continue;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 551,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 5008,
                        "startLineNumber": 527,
                        "startColumnNumber": 8,
                        "endLineNumber": 663,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (true) {\n  if (nextSym == EOB) {\n    break;\n  }\n  if (nextSym == RUNA || nextSym == RUNB) {\n    char ch;\n    int s=-1;\n    int N=1;\n    do {\n      if (nextSym == RUNA) {\n        s=s + (0 + 1) * N;\n      }\n else       if (nextSym == RUNB) {\n        s=s + (1 + 1) * N;\n      }\n      N=N * 2;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                if (thech == -1) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n    }\n while (nextSym == RUNA || nextSym == RUNB);\n    s++;\n    ch=seqToUnseq[yy[0]];\n    unzftab[ch]+=s;\n    while (s > 0) {\n      last++;\n      ll8[last]=ch;\n      s--;\n    }\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    continue;\n  }\n else {\n    char tmp;\n    last++;\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    tmp=yy[nextSym - 1];\n    unzftab[seqToUnseq[tmp]]++;\n    ll8[last]=seqToUnseq[tmp];\n    j=nextSym - 1;\n    for (; j > 3; j-=4) {\n      yy[j]=yy[j - 1];\n      yy[j - 1]=yy[j - 2];\n      yy[j - 2]=yy[j - 3];\n      yy[j - 3]=yy[j - 4];\n    }\n    for (; j > 0; j--) {\n      yy[j]=yy[j - 1];\n    }\n    yy[0]=tmp;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n    continue;\n  }\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 553,
                    "astHeight": 20
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 7015,
                        "startLineNumber": 460,
                        "startColumnNumber": 43,
                        "endLineNumber": 664,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  char[] yy=new char[256];\n  int i, j, nextSym, limitLast;\n  int EOB, groupNo, groupPos;\n  limitLast=baseBlockSize * blockSize100k;\n  origPtr=bsGetIntVS(24);\n  recvDecodingTables();\n  EOB=nInUse + 1;\n  groupNo=-1;\n  groupPos=0;\n  for (i=0; i <= 255; i++) {\n    unzftab[i]=0;\n  }\n  for (i=0; i <= 255; i++) {\n    yy[i]=(char)i;\n  }\n  last=-1;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  while (true) {\n    if (nextSym == EOB) {\n      break;\n    }\n    if (nextSym == RUNA || nextSym == RUNB) {\n      char ch;\n      int s=-1;\n      int N=1;\n      do {\n        if (nextSym == RUNA) {\n          s=s + (0 + 1) * N;\n        }\n else         if (nextSym == RUNB) {\n          s=s + (1 + 1) * N;\n        }\n        N=N * 2;\n{\n          int zt, zn, zvec, zj;\n          if (groupPos == 0) {\n            groupNo++;\n            groupPos=G_SIZE;\n          }\n          groupPos--;\n          zt=selector[groupNo];\n          zn=minLens[zt];\n          zvec=bsR(zn);\n          while (zvec > limit[zt][zn]) {\n            zn++;\n{\n{\n                while (bsLive < 1) {\n                  int zzi;\n                  char thech=0;\n                  try {\n                    thech=(char)bsStream.read();\n                  }\n catch (                  IOException e) {\n                    compressedStreamEOF();\n                  }\n                  if (thech == -1) {\n                    compressedStreamEOF();\n                  }\n                  zzi=thech;\n                  bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                  bsLive+=8;\n                }\n              }\n              zj=(bsBuff >> (bsLive - 1)) & 1;\n              bsLive--;\n            }\n            zvec=(zvec << 1) | zj;\n          }\n          nextSym=perm[zt][zvec - base[zt][zn]];\n        }\n      }\n while (nextSym == RUNA || nextSym == RUNB);\n      s++;\n      ch=seqToUnseq[yy[0]];\n      unzftab[ch]+=s;\n      while (s > 0) {\n        last++;\n        ll8[last]=ch;\n        s--;\n      }\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      continue;\n    }\n else {\n      char tmp;\n      last++;\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      tmp=yy[nextSym - 1];\n      unzftab[seqToUnseq[tmp]]++;\n      ll8[last]=seqToUnseq[tmp];\n      j=nextSym - 1;\n      for (; j > 3; j-=4) {\n        yy[j]=yy[j - 1];\n        yy[j - 1]=yy[j - 2];\n        yy[j - 2]=yy[j - 3];\n        yy[j - 3]=yy[j - 4];\n      }\n      for (; j > 0; j--) {\n        yy[j]=yy[j - 1];\n      }\n      yy[0]=tmp;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n      continue;\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 810,
                    "astHeight": 21
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7054,
                        "startLineNumber": 460,
                        "startColumnNumber": 4,
                        "endLineNumber": 664,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void getAndMoveToFrontDecode(){\n  char[] yy=new char[256];\n  int i, j, nextSym, limitLast;\n  int EOB, groupNo, groupPos;\n  limitLast=baseBlockSize * blockSize100k;\n  origPtr=bsGetIntVS(24);\n  recvDecodingTables();\n  EOB=nInUse + 1;\n  groupNo=-1;\n  groupPos=0;\n  for (i=0; i <= 255; i++) {\n    unzftab[i]=0;\n  }\n  for (i=0; i <= 255; i++) {\n    yy[i]=(char)i;\n  }\n  last=-1;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  while (true) {\n    if (nextSym == EOB) {\n      break;\n    }\n    if (nextSym == RUNA || nextSym == RUNB) {\n      char ch;\n      int s=-1;\n      int N=1;\n      do {\n        if (nextSym == RUNA) {\n          s=s + (0 + 1) * N;\n        }\n else         if (nextSym == RUNB) {\n          s=s + (1 + 1) * N;\n        }\n        N=N * 2;\n{\n          int zt, zn, zvec, zj;\n          if (groupPos == 0) {\n            groupNo++;\n            groupPos=G_SIZE;\n          }\n          groupPos--;\n          zt=selector[groupNo];\n          zn=minLens[zt];\n          zvec=bsR(zn);\n          while (zvec > limit[zt][zn]) {\n            zn++;\n{\n{\n                while (bsLive < 1) {\n                  int zzi;\n                  char thech=0;\n                  try {\n                    thech=(char)bsStream.read();\n                  }\n catch (                  IOException e) {\n                    compressedStreamEOF();\n                  }\n                  if (thech == -1) {\n                    compressedStreamEOF();\n                  }\n                  zzi=thech;\n                  bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                  bsLive+=8;\n                }\n              }\n              zj=(bsBuff >> (bsLive - 1)) & 1;\n              bsLive--;\n            }\n            zvec=(zvec << 1) | zj;\n          }\n          nextSym=perm[zt][zvec - base[zt][zn]];\n        }\n      }\n while (nextSym == RUNA || nextSym == RUNB);\n      s++;\n      ch=seqToUnseq[yy[0]];\n      unzftab[ch]+=s;\n      while (s > 0) {\n        last++;\n        ll8[last]=ch;\n        s--;\n      }\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      continue;\n    }\n else {\n      char tmp;\n      last++;\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      tmp=yy[nextSym - 1];\n      unzftab[seqToUnseq[tmp]]++;\n      ll8[last]=seqToUnseq[tmp];\n      j=nextSym - 1;\n      for (; j > 3; j-=4) {\n        yy[j]=yy[j - 1];\n        yy[j - 1]=yy[j - 2];\n        yy[j - 2]=yy[j - 3];\n        yy[j - 3]=yy[j - 4];\n      }\n      for (; j > 0; j--) {\n        yy[j]=yy[j - 1];\n      }\n      yy[0]=tmp;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n      continue;\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 814,
                    "astHeight": 22
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 11,
                    "startLineNumber": 566,
                    "startColumnNumber": 44,
                    "endLineNumber": 566,
                    "endColumnNumber": 55
                },
                "nodeContext": "thech == -1",
                "nodeType": "InfixExpression",
                "astNodeNumber": 4,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 574,
                "startColumnNumber": 58,
                "endLineNumber": 574,
                "endColumnNumber": 59
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
                    "nodePosition": {
                        "charLength": 10,
                        "startLineNumber": 574,
                        "startColumnNumber": 49,
                        "endLineNumber": 574,
                        "endColumnNumber": 59
                    },
                    "nodeContext": "bsLive - 1",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 12,
                        "startLineNumber": 574,
                        "startColumnNumber": 48,
                        "endLineNumber": 574,
                        "endColumnNumber": 60
                    },
                    "nodeContext": "(bsLive - 1)",
                    "nodeType": "ParenthesizedExpression",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
                    "nodePosition": {
                        "charLength": 22,
                        "startLineNumber": 574,
                        "startColumnNumber": 38,
                        "endLineNumber": 574,
                        "endColumnNumber": 60
                    },
                    "nodeContext": "bsBuff >> (bsLive - 1)",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 6,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 24,
                        "startLineNumber": 574,
                        "startColumnNumber": 37,
                        "endLineNumber": 574,
                        "endColumnNumber": 61
                    },
                    "nodeContext": "(bsBuff >> (bsLive - 1))",
                    "nodeType": "ParenthesizedExpression",
                    "astNodeNumber": 7,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 28,
                        "startLineNumber": 574,
                        "startColumnNumber": 37,
                        "endLineNumber": 574,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "(bsBuff >> (bsLive - 1)) & 1",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 9,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 33,
                        "startLineNumber": 574,
                        "startColumnNumber": 32,
                        "endLineNumber": 574,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "zj=(bsBuff >> (bsLive - 1)) & 1",
                    "nodeType": "Assignment",
                    "astNodeNumber": 11,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 34,
                        "startLineNumber": 574,
                        "startColumnNumber": 32,
                        "endLineNumber": 574,
                        "endColumnNumber": 66
                    },
                    "nodeContext": "zj=(bsBuff >> (bsLive - 1)) & 1;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 12,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1058,
                        "startLineNumber": 556,
                        "startColumnNumber": 28,
                        "endLineNumber": 576,
                        "endColumnNumber": 29
                    },
                    "nodeContext": "{\n{\n    while (bsLive < 1) {\n      int zzi;\n      char thech=0;\n      try {\n        thech=(char)bsStream.read();\n      }\n catch (      IOException e) {\n        compressedStreamEOF();\n      }\n      if (thech == -1) {\n        compressedStreamEOF();\n      }\n      zzi=thech;\n      bsBuff=(bsBuff << 8) | (zzi & 0xff);\n      bsLive+=8;\n    }\n  }\n  zj=(bsBuff >> (bsLive - 1)) & 1;\n  bsLive--;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 79,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 1201,
                        "startLineNumber": 554,
                        "startColumnNumber": 53,
                        "endLineNumber": 578,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "{\n  zn++;\n{\n{\n      while (bsLive < 1) {\n        int zzi;\n        char thech=0;\n        try {\n          thech=(char)bsStream.read();\n        }\n catch (        IOException e) {\n          compressedStreamEOF();\n        }\n        if (thech == -1) {\n          compressedStreamEOF();\n        }\n        zzi=thech;\n        bsBuff=(bsBuff << 8) | (zzi & 0xff);\n        bsLive+=8;\n      }\n    }\n    zj=(bsBuff >> (bsLive - 1)) & 1;\n    bsLive--;\n  }\n  zvec=(zvec << 1) | zj;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 92,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1230,
                        "startLineNumber": 554,
                        "startColumnNumber": 24,
                        "endLineNumber": 578,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "while (zvec > limit[zt][zn]) {\n  zn++;\n{\n{\n      while (bsLive < 1) {\n        int zzi;\n        char thech=0;\n        try {\n          thech=(char)bsStream.read();\n        }\n catch (        IOException e) {\n          compressedStreamEOF();\n        }\n        if (thech == -1) {\n          compressedStreamEOF();\n        }\n        zzi=thech;\n        bsBuff=(bsBuff << 8) | (zzi & 0xff);\n        bsLive+=8;\n      }\n    }\n    zj=(bsBuff >> (bsLive - 1)) & 1;\n    bsLive--;\n  }\n  zvec=(zvec << 1) | zj;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 100,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1712,
                        "startLineNumber": 544,
                        "startColumnNumber": 20,
                        "endLineNumber": 580,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  int zt, zn, zvec, zj;\n  if (groupPos == 0) {\n    groupNo++;\n    groupPos=G_SIZE;\n  }\n  groupPos--;\n  zt=selector[groupNo];\n  zn=minLens[zt];\n  zvec=bsR(zn);\n  while (zvec > limit[zt][zn]) {\n    zn++;\n{\n{\n        while (bsLive < 1) {\n          int zzi;\n          char thech=0;\n          try {\n            thech=(char)bsStream.read();\n          }\n catch (          IOException e) {\n            compressedStreamEOF();\n          }\n          if (thech == -1) {\n            compressedStreamEOF();\n          }\n          zzi=thech;\n          bsBuff=(bsBuff << 8) | (zzi & 0xff);\n          bsLive+=8;\n        }\n      }\n      zj=(bsBuff >> (bsLive - 1)) & 1;\n      bsLive--;\n    }\n    zvec=(zvec << 1) | zj;\n  }\n  nextSym=perm[zt][zvec - base[zt][zn]];\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 158,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.DoStatement,body]",
                    "nodePosition": {
                        "charLength": 1995,
                        "startLineNumber": 537,
                        "startColumnNumber": 19,
                        "endLineNumber": 581,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  if (nextSym == RUNA) {\n    s=s + (0 + 1) * N;\n  }\n else   if (nextSym == RUNB) {\n    s=s + (1 + 1) * N;\n  }\n  N=N * 2;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 197,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2042,
                        "startLineNumber": 537,
                        "startColumnNumber": 16,
                        "endLineNumber": 581,
                        "endColumnNumber": 61
                    },
                    "nodeContext": "do {\n  if (nextSym == RUNA) {\n    s=s + (0 + 1) * N;\n  }\n else   if (nextSym == RUNB) {\n    s=s + (1 + 1) * N;\n  }\n  N=N * 2;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n}\n while (nextSym == RUNA || nextSym == RUNB);\n",
                    "nodeType": "DoStatement",
                    "astNodeNumber": 205,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 2512,
                        "startLineNumber": 533,
                        "startColumnNumber": 52,
                        "endLineNumber": 597,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  char ch;\n  int s=-1;\n  int N=1;\n  do {\n    if (nextSym == RUNA) {\n      s=s + (0 + 1) * N;\n    }\n else     if (nextSym == RUNB) {\n      s=s + (1 + 1) * N;\n    }\n    N=N * 2;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              if (thech == -1) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n  }\n while (nextSym == RUNA || nextSym == RUNB);\n  s++;\n  ch=seqToUnseq[yy[0]];\n  unzftab[ch]+=s;\n  while (s > 0) {\n    last++;\n    ll8[last]=ch;\n    s--;\n  }\n  if (last >= limitLast) {\n    blockOverrun();\n  }\n  continue;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 264,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4898,
                        "startLineNumber": 533,
                        "startColumnNumber": 12,
                        "endLineNumber": 662,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (nextSym == RUNA || nextSym == RUNB) {\n  char ch;\n  int s=-1;\n  int N=1;\n  do {\n    if (nextSym == RUNA) {\n      s=s + (0 + 1) * N;\n    }\n else     if (nextSym == RUNB) {\n      s=s + (1 + 1) * N;\n    }\n    N=N * 2;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              if (thech == -1) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n  }\n while (nextSym == RUNA || nextSym == RUNB);\n  s++;\n  ch=seqToUnseq[yy[0]];\n  unzftab[ch]+=s;\n  while (s > 0) {\n    last++;\n    ll8[last]=ch;\n    s--;\n  }\n  if (last >= limitLast) {\n    blockOverrun();\n  }\n  continue;\n}\n else {\n  char tmp;\n  last++;\n  if (last >= limitLast) {\n    blockOverrun();\n  }\n  tmp=yy[nextSym - 1];\n  unzftab[seqToUnseq[tmp]]++;\n  ll8[last]=seqToUnseq[tmp];\n  j=nextSym - 1;\n  for (; j > 3; j-=4) {\n    yy[j]=yy[j - 1];\n    yy[j - 1]=yy[j - 2];\n    yy[j - 2]=yy[j - 3];\n    yy[j - 3]=yy[j - 4];\n  }\n  for (; j > 0; j--) {\n    yy[j]=yy[j - 1];\n  }\n  yy[0]=tmp;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  continue;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 544,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 4995,
                        "startLineNumber": 527,
                        "startColumnNumber": 21,
                        "endLineNumber": 663,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (nextSym == EOB) {\n    break;\n  }\n  if (nextSym == RUNA || nextSym == RUNB) {\n    char ch;\n    int s=-1;\n    int N=1;\n    do {\n      if (nextSym == RUNA) {\n        s=s + (0 + 1) * N;\n      }\n else       if (nextSym == RUNB) {\n        s=s + (1 + 1) * N;\n      }\n      N=N * 2;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                if (thech == -1) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n    }\n while (nextSym == RUNA || nextSym == RUNB);\n    s++;\n    ch=seqToUnseq[yy[0]];\n    unzftab[ch]+=s;\n    while (s > 0) {\n      last++;\n      ll8[last]=ch;\n      s--;\n    }\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    continue;\n  }\n else {\n    char tmp;\n    last++;\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    tmp=yy[nextSym - 1];\n    unzftab[seqToUnseq[tmp]]++;\n    ll8[last]=seqToUnseq[tmp];\n    j=nextSym - 1;\n    for (; j > 3; j-=4) {\n      yy[j]=yy[j - 1];\n      yy[j - 1]=yy[j - 2];\n      yy[j - 2]=yy[j - 3];\n      yy[j - 3]=yy[j - 4];\n    }\n    for (; j > 0; j--) {\n      yy[j]=yy[j - 1];\n    }\n    yy[0]=tmp;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n    continue;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 551,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 5008,
                        "startLineNumber": 527,
                        "startColumnNumber": 8,
                        "endLineNumber": 663,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (true) {\n  if (nextSym == EOB) {\n    break;\n  }\n  if (nextSym == RUNA || nextSym == RUNB) {\n    char ch;\n    int s=-1;\n    int N=1;\n    do {\n      if (nextSym == RUNA) {\n        s=s + (0 + 1) * N;\n      }\n else       if (nextSym == RUNB) {\n        s=s + (1 + 1) * N;\n      }\n      N=N * 2;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                if (thech == -1) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n    }\n while (nextSym == RUNA || nextSym == RUNB);\n    s++;\n    ch=seqToUnseq[yy[0]];\n    unzftab[ch]+=s;\n    while (s > 0) {\n      last++;\n      ll8[last]=ch;\n      s--;\n    }\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    continue;\n  }\n else {\n    char tmp;\n    last++;\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    tmp=yy[nextSym - 1];\n    unzftab[seqToUnseq[tmp]]++;\n    ll8[last]=seqToUnseq[tmp];\n    j=nextSym - 1;\n    for (; j > 3; j-=4) {\n      yy[j]=yy[j - 1];\n      yy[j - 1]=yy[j - 2];\n      yy[j - 2]=yy[j - 3];\n      yy[j - 3]=yy[j - 4];\n    }\n    for (; j > 0; j--) {\n      yy[j]=yy[j - 1];\n    }\n    yy[0]=tmp;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n    continue;\n  }\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 553,
                    "astHeight": 20
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 7015,
                        "startLineNumber": 460,
                        "startColumnNumber": 43,
                        "endLineNumber": 664,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  char[] yy=new char[256];\n  int i, j, nextSym, limitLast;\n  int EOB, groupNo, groupPos;\n  limitLast=baseBlockSize * blockSize100k;\n  origPtr=bsGetIntVS(24);\n  recvDecodingTables();\n  EOB=nInUse + 1;\n  groupNo=-1;\n  groupPos=0;\n  for (i=0; i <= 255; i++) {\n    unzftab[i]=0;\n  }\n  for (i=0; i <= 255; i++) {\n    yy[i]=(char)i;\n  }\n  last=-1;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  while (true) {\n    if (nextSym == EOB) {\n      break;\n    }\n    if (nextSym == RUNA || nextSym == RUNB) {\n      char ch;\n      int s=-1;\n      int N=1;\n      do {\n        if (nextSym == RUNA) {\n          s=s + (0 + 1) * N;\n        }\n else         if (nextSym == RUNB) {\n          s=s + (1 + 1) * N;\n        }\n        N=N * 2;\n{\n          int zt, zn, zvec, zj;\n          if (groupPos == 0) {\n            groupNo++;\n            groupPos=G_SIZE;\n          }\n          groupPos--;\n          zt=selector[groupNo];\n          zn=minLens[zt];\n          zvec=bsR(zn);\n          while (zvec > limit[zt][zn]) {\n            zn++;\n{\n{\n                while (bsLive < 1) {\n                  int zzi;\n                  char thech=0;\n                  try {\n                    thech=(char)bsStream.read();\n                  }\n catch (                  IOException e) {\n                    compressedStreamEOF();\n                  }\n                  if (thech == -1) {\n                    compressedStreamEOF();\n                  }\n                  zzi=thech;\n                  bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                  bsLive+=8;\n                }\n              }\n              zj=(bsBuff >> (bsLive - 1)) & 1;\n              bsLive--;\n            }\n            zvec=(zvec << 1) | zj;\n          }\n          nextSym=perm[zt][zvec - base[zt][zn]];\n        }\n      }\n while (nextSym == RUNA || nextSym == RUNB);\n      s++;\n      ch=seqToUnseq[yy[0]];\n      unzftab[ch]+=s;\n      while (s > 0) {\n        last++;\n        ll8[last]=ch;\n        s--;\n      }\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      continue;\n    }\n else {\n      char tmp;\n      last++;\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      tmp=yy[nextSym - 1];\n      unzftab[seqToUnseq[tmp]]++;\n      ll8[last]=seqToUnseq[tmp];\n      j=nextSym - 1;\n      for (; j > 3; j-=4) {\n        yy[j]=yy[j - 1];\n        yy[j - 1]=yy[j - 2];\n        yy[j - 2]=yy[j - 3];\n        yy[j - 3]=yy[j - 4];\n      }\n      for (; j > 0; j--) {\n        yy[j]=yy[j - 1];\n      }\n      yy[0]=tmp;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n      continue;\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 810,
                    "astHeight": 21
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7054,
                        "startLineNumber": 460,
                        "startColumnNumber": 4,
                        "endLineNumber": 664,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void getAndMoveToFrontDecode(){\n  char[] yy=new char[256];\n  int i, j, nextSym, limitLast;\n  int EOB, groupNo, groupPos;\n  limitLast=baseBlockSize * blockSize100k;\n  origPtr=bsGetIntVS(24);\n  recvDecodingTables();\n  EOB=nInUse + 1;\n  groupNo=-1;\n  groupPos=0;\n  for (i=0; i <= 255; i++) {\n    unzftab[i]=0;\n  }\n  for (i=0; i <= 255; i++) {\n    yy[i]=(char)i;\n  }\n  last=-1;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  while (true) {\n    if (nextSym == EOB) {\n      break;\n    }\n    if (nextSym == RUNA || nextSym == RUNB) {\n      char ch;\n      int s=-1;\n      int N=1;\n      do {\n        if (nextSym == RUNA) {\n          s=s + (0 + 1) * N;\n        }\n else         if (nextSym == RUNB) {\n          s=s + (1 + 1) * N;\n        }\n        N=N * 2;\n{\n          int zt, zn, zvec, zj;\n          if (groupPos == 0) {\n            groupNo++;\n            groupPos=G_SIZE;\n          }\n          groupPos--;\n          zt=selector[groupNo];\n          zn=minLens[zt];\n          zvec=bsR(zn);\n          while (zvec > limit[zt][zn]) {\n            zn++;\n{\n{\n                while (bsLive < 1) {\n                  int zzi;\n                  char thech=0;\n                  try {\n                    thech=(char)bsStream.read();\n                  }\n catch (                  IOException e) {\n                    compressedStreamEOF();\n                  }\n                  if (thech == -1) {\n                    compressedStreamEOF();\n                  }\n                  zzi=thech;\n                  bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                  bsLive+=8;\n                }\n              }\n              zj=(bsBuff >> (bsLive - 1)) & 1;\n              bsLive--;\n            }\n            zvec=(zvec << 1) | zj;\n          }\n          nextSym=perm[zt][zvec - base[zt][zn]];\n        }\n      }\n while (nextSym == RUNA || nextSym == RUNB);\n      s++;\n      ch=seqToUnseq[yy[0]];\n      unzftab[ch]+=s;\n      while (s > 0) {\n        last++;\n        ll8[last]=ch;\n        s--;\n      }\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      continue;\n    }\n else {\n      char tmp;\n      last++;\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      tmp=yy[nextSym - 1];\n      unzftab[seqToUnseq[tmp]]++;\n      ll8[last]=seqToUnseq[tmp];\n      j=nextSym - 1;\n      for (; j > 3; j-=4) {\n        yy[j]=yy[j - 1];\n        yy[j - 1]=yy[j - 2];\n        yy[j - 2]=yy[j - 3];\n        yy[j - 3]=yy[j - 4];\n      }\n      for (; j > 0; j--) {\n        yy[j]=yy[j - 1];\n      }\n      yy[0]=tmp;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n      continue;\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 814,
                    "astHeight": 22
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 34,
                    "startLineNumber": 574,
                    "startColumnNumber": 32,
                    "endLineNumber": 574,
                    "endColumnNumber": 66
                },
                "nodeContext": "zj=(bsBuff >> (bsLive - 1)) & 1;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 12,
                "astHeight": 8
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 574,
                "startColumnNumber": 64,
                "endLineNumber": 574,
                "endColumnNumber": 65
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 28,
                        "startLineNumber": 574,
                        "startColumnNumber": 37,
                        "endLineNumber": 574,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "(bsBuff >> (bsLive - 1)) & 1",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 9,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 33,
                        "startLineNumber": 574,
                        "startColumnNumber": 32,
                        "endLineNumber": 574,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "zj=(bsBuff >> (bsLive - 1)) & 1",
                    "nodeType": "Assignment",
                    "astNodeNumber": 11,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 34,
                        "startLineNumber": 574,
                        "startColumnNumber": 32,
                        "endLineNumber": 574,
                        "endColumnNumber": 66
                    },
                    "nodeContext": "zj=(bsBuff >> (bsLive - 1)) & 1;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 12,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1058,
                        "startLineNumber": 556,
                        "startColumnNumber": 28,
                        "endLineNumber": 576,
                        "endColumnNumber": 29
                    },
                    "nodeContext": "{\n{\n    while (bsLive < 1) {\n      int zzi;\n      char thech=0;\n      try {\n        thech=(char)bsStream.read();\n      }\n catch (      IOException e) {\n        compressedStreamEOF();\n      }\n      if (thech == -1) {\n        compressedStreamEOF();\n      }\n      zzi=thech;\n      bsBuff=(bsBuff << 8) | (zzi & 0xff);\n      bsLive+=8;\n    }\n  }\n  zj=(bsBuff >> (bsLive - 1)) & 1;\n  bsLive--;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 79,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 1201,
                        "startLineNumber": 554,
                        "startColumnNumber": 53,
                        "endLineNumber": 578,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "{\n  zn++;\n{\n{\n      while (bsLive < 1) {\n        int zzi;\n        char thech=0;\n        try {\n          thech=(char)bsStream.read();\n        }\n catch (        IOException e) {\n          compressedStreamEOF();\n        }\n        if (thech == -1) {\n          compressedStreamEOF();\n        }\n        zzi=thech;\n        bsBuff=(bsBuff << 8) | (zzi & 0xff);\n        bsLive+=8;\n      }\n    }\n    zj=(bsBuff >> (bsLive - 1)) & 1;\n    bsLive--;\n  }\n  zvec=(zvec << 1) | zj;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 92,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1230,
                        "startLineNumber": 554,
                        "startColumnNumber": 24,
                        "endLineNumber": 578,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "while (zvec > limit[zt][zn]) {\n  zn++;\n{\n{\n      while (bsLive < 1) {\n        int zzi;\n        char thech=0;\n        try {\n          thech=(char)bsStream.read();\n        }\n catch (        IOException e) {\n          compressedStreamEOF();\n        }\n        if (thech == -1) {\n          compressedStreamEOF();\n        }\n        zzi=thech;\n        bsBuff=(bsBuff << 8) | (zzi & 0xff);\n        bsLive+=8;\n      }\n    }\n    zj=(bsBuff >> (bsLive - 1)) & 1;\n    bsLive--;\n  }\n  zvec=(zvec << 1) | zj;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 100,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1712,
                        "startLineNumber": 544,
                        "startColumnNumber": 20,
                        "endLineNumber": 580,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  int zt, zn, zvec, zj;\n  if (groupPos == 0) {\n    groupNo++;\n    groupPos=G_SIZE;\n  }\n  groupPos--;\n  zt=selector[groupNo];\n  zn=minLens[zt];\n  zvec=bsR(zn);\n  while (zvec > limit[zt][zn]) {\n    zn++;\n{\n{\n        while (bsLive < 1) {\n          int zzi;\n          char thech=0;\n          try {\n            thech=(char)bsStream.read();\n          }\n catch (          IOException e) {\n            compressedStreamEOF();\n          }\n          if (thech == -1) {\n            compressedStreamEOF();\n          }\n          zzi=thech;\n          bsBuff=(bsBuff << 8) | (zzi & 0xff);\n          bsLive+=8;\n        }\n      }\n      zj=(bsBuff >> (bsLive - 1)) & 1;\n      bsLive--;\n    }\n    zvec=(zvec << 1) | zj;\n  }\n  nextSym=perm[zt][zvec - base[zt][zn]];\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 158,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.DoStatement,body]",
                    "nodePosition": {
                        "charLength": 1995,
                        "startLineNumber": 537,
                        "startColumnNumber": 19,
                        "endLineNumber": 581,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  if (nextSym == RUNA) {\n    s=s + (0 + 1) * N;\n  }\n else   if (nextSym == RUNB) {\n    s=s + (1 + 1) * N;\n  }\n  N=N * 2;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 197,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2042,
                        "startLineNumber": 537,
                        "startColumnNumber": 16,
                        "endLineNumber": 581,
                        "endColumnNumber": 61
                    },
                    "nodeContext": "do {\n  if (nextSym == RUNA) {\n    s=s + (0 + 1) * N;\n  }\n else   if (nextSym == RUNB) {\n    s=s + (1 + 1) * N;\n  }\n  N=N * 2;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n}\n while (nextSym == RUNA || nextSym == RUNB);\n",
                    "nodeType": "DoStatement",
                    "astNodeNumber": 205,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 2512,
                        "startLineNumber": 533,
                        "startColumnNumber": 52,
                        "endLineNumber": 597,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  char ch;\n  int s=-1;\n  int N=1;\n  do {\n    if (nextSym == RUNA) {\n      s=s + (0 + 1) * N;\n    }\n else     if (nextSym == RUNB) {\n      s=s + (1 + 1) * N;\n    }\n    N=N * 2;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              if (thech == -1) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n  }\n while (nextSym == RUNA || nextSym == RUNB);\n  s++;\n  ch=seqToUnseq[yy[0]];\n  unzftab[ch]+=s;\n  while (s > 0) {\n    last++;\n    ll8[last]=ch;\n    s--;\n  }\n  if (last >= limitLast) {\n    blockOverrun();\n  }\n  continue;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 264,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4898,
                        "startLineNumber": 533,
                        "startColumnNumber": 12,
                        "endLineNumber": 662,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (nextSym == RUNA || nextSym == RUNB) {\n  char ch;\n  int s=-1;\n  int N=1;\n  do {\n    if (nextSym == RUNA) {\n      s=s + (0 + 1) * N;\n    }\n else     if (nextSym == RUNB) {\n      s=s + (1 + 1) * N;\n    }\n    N=N * 2;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              if (thech == -1) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n  }\n while (nextSym == RUNA || nextSym == RUNB);\n  s++;\n  ch=seqToUnseq[yy[0]];\n  unzftab[ch]+=s;\n  while (s > 0) {\n    last++;\n    ll8[last]=ch;\n    s--;\n  }\n  if (last >= limitLast) {\n    blockOverrun();\n  }\n  continue;\n}\n else {\n  char tmp;\n  last++;\n  if (last >= limitLast) {\n    blockOverrun();\n  }\n  tmp=yy[nextSym - 1];\n  unzftab[seqToUnseq[tmp]]++;\n  ll8[last]=seqToUnseq[tmp];\n  j=nextSym - 1;\n  for (; j > 3; j-=4) {\n    yy[j]=yy[j - 1];\n    yy[j - 1]=yy[j - 2];\n    yy[j - 2]=yy[j - 3];\n    yy[j - 3]=yy[j - 4];\n  }\n  for (; j > 0; j--) {\n    yy[j]=yy[j - 1];\n  }\n  yy[0]=tmp;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  continue;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 544,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 4995,
                        "startLineNumber": 527,
                        "startColumnNumber": 21,
                        "endLineNumber": 663,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (nextSym == EOB) {\n    break;\n  }\n  if (nextSym == RUNA || nextSym == RUNB) {\n    char ch;\n    int s=-1;\n    int N=1;\n    do {\n      if (nextSym == RUNA) {\n        s=s + (0 + 1) * N;\n      }\n else       if (nextSym == RUNB) {\n        s=s + (1 + 1) * N;\n      }\n      N=N * 2;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                if (thech == -1) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n    }\n while (nextSym == RUNA || nextSym == RUNB);\n    s++;\n    ch=seqToUnseq[yy[0]];\n    unzftab[ch]+=s;\n    while (s > 0) {\n      last++;\n      ll8[last]=ch;\n      s--;\n    }\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    continue;\n  }\n else {\n    char tmp;\n    last++;\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    tmp=yy[nextSym - 1];\n    unzftab[seqToUnseq[tmp]]++;\n    ll8[last]=seqToUnseq[tmp];\n    j=nextSym - 1;\n    for (; j > 3; j-=4) {\n      yy[j]=yy[j - 1];\n      yy[j - 1]=yy[j - 2];\n      yy[j - 2]=yy[j - 3];\n      yy[j - 3]=yy[j - 4];\n    }\n    for (; j > 0; j--) {\n      yy[j]=yy[j - 1];\n    }\n    yy[0]=tmp;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n    continue;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 551,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 5008,
                        "startLineNumber": 527,
                        "startColumnNumber": 8,
                        "endLineNumber": 663,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (true) {\n  if (nextSym == EOB) {\n    break;\n  }\n  if (nextSym == RUNA || nextSym == RUNB) {\n    char ch;\n    int s=-1;\n    int N=1;\n    do {\n      if (nextSym == RUNA) {\n        s=s + (0 + 1) * N;\n      }\n else       if (nextSym == RUNB) {\n        s=s + (1 + 1) * N;\n      }\n      N=N * 2;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                if (thech == -1) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n    }\n while (nextSym == RUNA || nextSym == RUNB);\n    s++;\n    ch=seqToUnseq[yy[0]];\n    unzftab[ch]+=s;\n    while (s > 0) {\n      last++;\n      ll8[last]=ch;\n      s--;\n    }\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    continue;\n  }\n else {\n    char tmp;\n    last++;\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    tmp=yy[nextSym - 1];\n    unzftab[seqToUnseq[tmp]]++;\n    ll8[last]=seqToUnseq[tmp];\n    j=nextSym - 1;\n    for (; j > 3; j-=4) {\n      yy[j]=yy[j - 1];\n      yy[j - 1]=yy[j - 2];\n      yy[j - 2]=yy[j - 3];\n      yy[j - 3]=yy[j - 4];\n    }\n    for (; j > 0; j--) {\n      yy[j]=yy[j - 1];\n    }\n    yy[0]=tmp;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n    continue;\n  }\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 553,
                    "astHeight": 20
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 7015,
                        "startLineNumber": 460,
                        "startColumnNumber": 43,
                        "endLineNumber": 664,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  char[] yy=new char[256];\n  int i, j, nextSym, limitLast;\n  int EOB, groupNo, groupPos;\n  limitLast=baseBlockSize * blockSize100k;\n  origPtr=bsGetIntVS(24);\n  recvDecodingTables();\n  EOB=nInUse + 1;\n  groupNo=-1;\n  groupPos=0;\n  for (i=0; i <= 255; i++) {\n    unzftab[i]=0;\n  }\n  for (i=0; i <= 255; i++) {\n    yy[i]=(char)i;\n  }\n  last=-1;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  while (true) {\n    if (nextSym == EOB) {\n      break;\n    }\n    if (nextSym == RUNA || nextSym == RUNB) {\n      char ch;\n      int s=-1;\n      int N=1;\n      do {\n        if (nextSym == RUNA) {\n          s=s + (0 + 1) * N;\n        }\n else         if (nextSym == RUNB) {\n          s=s + (1 + 1) * N;\n        }\n        N=N * 2;\n{\n          int zt, zn, zvec, zj;\n          if (groupPos == 0) {\n            groupNo++;\n            groupPos=G_SIZE;\n          }\n          groupPos--;\n          zt=selector[groupNo];\n          zn=minLens[zt];\n          zvec=bsR(zn);\n          while (zvec > limit[zt][zn]) {\n            zn++;\n{\n{\n                while (bsLive < 1) {\n                  int zzi;\n                  char thech=0;\n                  try {\n                    thech=(char)bsStream.read();\n                  }\n catch (                  IOException e) {\n                    compressedStreamEOF();\n                  }\n                  if (thech == -1) {\n                    compressedStreamEOF();\n                  }\n                  zzi=thech;\n                  bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                  bsLive+=8;\n                }\n              }\n              zj=(bsBuff >> (bsLive - 1)) & 1;\n              bsLive--;\n            }\n            zvec=(zvec << 1) | zj;\n          }\n          nextSym=perm[zt][zvec - base[zt][zn]];\n        }\n      }\n while (nextSym == RUNA || nextSym == RUNB);\n      s++;\n      ch=seqToUnseq[yy[0]];\n      unzftab[ch]+=s;\n      while (s > 0) {\n        last++;\n        ll8[last]=ch;\n        s--;\n      }\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      continue;\n    }\n else {\n      char tmp;\n      last++;\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      tmp=yy[nextSym - 1];\n      unzftab[seqToUnseq[tmp]]++;\n      ll8[last]=seqToUnseq[tmp];\n      j=nextSym - 1;\n      for (; j > 3; j-=4) {\n        yy[j]=yy[j - 1];\n        yy[j - 1]=yy[j - 2];\n        yy[j - 2]=yy[j - 3];\n        yy[j - 3]=yy[j - 4];\n      }\n      for (; j > 0; j--) {\n        yy[j]=yy[j - 1];\n      }\n      yy[0]=tmp;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n      continue;\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 810,
                    "astHeight": 21
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7054,
                        "startLineNumber": 460,
                        "startColumnNumber": 4,
                        "endLineNumber": 664,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void getAndMoveToFrontDecode(){\n  char[] yy=new char[256];\n  int i, j, nextSym, limitLast;\n  int EOB, groupNo, groupPos;\n  limitLast=baseBlockSize * blockSize100k;\n  origPtr=bsGetIntVS(24);\n  recvDecodingTables();\n  EOB=nInUse + 1;\n  groupNo=-1;\n  groupPos=0;\n  for (i=0; i <= 255; i++) {\n    unzftab[i]=0;\n  }\n  for (i=0; i <= 255; i++) {\n    yy[i]=(char)i;\n  }\n  last=-1;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  while (true) {\n    if (nextSym == EOB) {\n      break;\n    }\n    if (nextSym == RUNA || nextSym == RUNB) {\n      char ch;\n      int s=-1;\n      int N=1;\n      do {\n        if (nextSym == RUNA) {\n          s=s + (0 + 1) * N;\n        }\n else         if (nextSym == RUNB) {\n          s=s + (1 + 1) * N;\n        }\n        N=N * 2;\n{\n          int zt, zn, zvec, zj;\n          if (groupPos == 0) {\n            groupNo++;\n            groupPos=G_SIZE;\n          }\n          groupPos--;\n          zt=selector[groupNo];\n          zn=minLens[zt];\n          zvec=bsR(zn);\n          while (zvec > limit[zt][zn]) {\n            zn++;\n{\n{\n                while (bsLive < 1) {\n                  int zzi;\n                  char thech=0;\n                  try {\n                    thech=(char)bsStream.read();\n                  }\n catch (                  IOException e) {\n                    compressedStreamEOF();\n                  }\n                  if (thech == -1) {\n                    compressedStreamEOF();\n                  }\n                  zzi=thech;\n                  bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                  bsLive+=8;\n                }\n              }\n              zj=(bsBuff >> (bsLive - 1)) & 1;\n              bsLive--;\n            }\n            zvec=(zvec << 1) | zj;\n          }\n          nextSym=perm[zt][zvec - base[zt][zn]];\n        }\n      }\n while (nextSym == RUNA || nextSym == RUNB);\n      s++;\n      ch=seqToUnseq[yy[0]];\n      unzftab[ch]+=s;\n      while (s > 0) {\n        last++;\n        ll8[last]=ch;\n        s--;\n      }\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      continue;\n    }\n else {\n      char tmp;\n      last++;\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      tmp=yy[nextSym - 1];\n      unzftab[seqToUnseq[tmp]]++;\n      ll8[last]=seqToUnseq[tmp];\n      j=nextSym - 1;\n      for (; j > 3; j-=4) {\n        yy[j]=yy[j - 1];\n        yy[j - 1]=yy[j - 2];\n        yy[j - 2]=yy[j - 3];\n        yy[j - 3]=yy[j - 4];\n      }\n      for (; j > 0; j--) {\n        yy[j]=yy[j - 1];\n      }\n      yy[0]=tmp;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n      continue;\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 814,
                    "astHeight": 22
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 34,
                    "startLineNumber": 574,
                    "startColumnNumber": 32,
                    "endLineNumber": 574,
                    "endColumnNumber": 66
                },
                "nodeContext": "zj=(bsBuff >> (bsLive - 1)) & 1;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 12,
                "astHeight": 8
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 577,
                "startColumnNumber": 44,
                "endLineNumber": 577,
                "endColumnNumber": 45
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
                    "nodePosition": {
                        "charLength": 9,
                        "startLineNumber": 577,
                        "startColumnNumber": 36,
                        "endLineNumber": 577,
                        "endColumnNumber": 45
                    },
                    "nodeContext": "zvec << 1",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 11,
                        "startLineNumber": 577,
                        "startColumnNumber": 35,
                        "endLineNumber": 577,
                        "endColumnNumber": 46
                    },
                    "nodeContext": "(zvec << 1)",
                    "nodeType": "ParenthesizedExpression",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 16,
                        "startLineNumber": 577,
                        "startColumnNumber": 35,
                        "endLineNumber": 577,
                        "endColumnNumber": 51
                    },
                    "nodeContext": "(zvec << 1) | zj",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 6,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 23,
                        "startLineNumber": 577,
                        "startColumnNumber": 28,
                        "endLineNumber": 577,
                        "endColumnNumber": 51
                    },
                    "nodeContext": "zvec=(zvec << 1) | zj",
                    "nodeType": "Assignment",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 24,
                        "startLineNumber": 577,
                        "startColumnNumber": 28,
                        "endLineNumber": 577,
                        "endColumnNumber": 52
                    },
                    "nodeContext": "zvec=(zvec << 1) | zj;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 9,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 1201,
                        "startLineNumber": 554,
                        "startColumnNumber": 53,
                        "endLineNumber": 578,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "{\n  zn++;\n{\n{\n      while (bsLive < 1) {\n        int zzi;\n        char thech=0;\n        try {\n          thech=(char)bsStream.read();\n        }\n catch (        IOException e) {\n          compressedStreamEOF();\n        }\n        if (thech == -1) {\n          compressedStreamEOF();\n        }\n        zzi=thech;\n        bsBuff=(bsBuff << 8) | (zzi & 0xff);\n        bsLive+=8;\n      }\n    }\n    zj=(bsBuff >> (bsLive - 1)) & 1;\n    bsLive--;\n  }\n  zvec=(zvec << 1) | zj;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 92,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1230,
                        "startLineNumber": 554,
                        "startColumnNumber": 24,
                        "endLineNumber": 578,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "while (zvec > limit[zt][zn]) {\n  zn++;\n{\n{\n      while (bsLive < 1) {\n        int zzi;\n        char thech=0;\n        try {\n          thech=(char)bsStream.read();\n        }\n catch (        IOException e) {\n          compressedStreamEOF();\n        }\n        if (thech == -1) {\n          compressedStreamEOF();\n        }\n        zzi=thech;\n        bsBuff=(bsBuff << 8) | (zzi & 0xff);\n        bsLive+=8;\n      }\n    }\n    zj=(bsBuff >> (bsLive - 1)) & 1;\n    bsLive--;\n  }\n  zvec=(zvec << 1) | zj;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 100,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1712,
                        "startLineNumber": 544,
                        "startColumnNumber": 20,
                        "endLineNumber": 580,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  int zt, zn, zvec, zj;\n  if (groupPos == 0) {\n    groupNo++;\n    groupPos=G_SIZE;\n  }\n  groupPos--;\n  zt=selector[groupNo];\n  zn=minLens[zt];\n  zvec=bsR(zn);\n  while (zvec > limit[zt][zn]) {\n    zn++;\n{\n{\n        while (bsLive < 1) {\n          int zzi;\n          char thech=0;\n          try {\n            thech=(char)bsStream.read();\n          }\n catch (          IOException e) {\n            compressedStreamEOF();\n          }\n          if (thech == -1) {\n            compressedStreamEOF();\n          }\n          zzi=thech;\n          bsBuff=(bsBuff << 8) | (zzi & 0xff);\n          bsLive+=8;\n        }\n      }\n      zj=(bsBuff >> (bsLive - 1)) & 1;\n      bsLive--;\n    }\n    zvec=(zvec << 1) | zj;\n  }\n  nextSym=perm[zt][zvec - base[zt][zn]];\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 158,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.DoStatement,body]",
                    "nodePosition": {
                        "charLength": 1995,
                        "startLineNumber": 537,
                        "startColumnNumber": 19,
                        "endLineNumber": 581,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  if (nextSym == RUNA) {\n    s=s + (0 + 1) * N;\n  }\n else   if (nextSym == RUNB) {\n    s=s + (1 + 1) * N;\n  }\n  N=N * 2;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 197,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2042,
                        "startLineNumber": 537,
                        "startColumnNumber": 16,
                        "endLineNumber": 581,
                        "endColumnNumber": 61
                    },
                    "nodeContext": "do {\n  if (nextSym == RUNA) {\n    s=s + (0 + 1) * N;\n  }\n else   if (nextSym == RUNB) {\n    s=s + (1 + 1) * N;\n  }\n  N=N * 2;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n}\n while (nextSym == RUNA || nextSym == RUNB);\n",
                    "nodeType": "DoStatement",
                    "astNodeNumber": 205,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 2512,
                        "startLineNumber": 533,
                        "startColumnNumber": 52,
                        "endLineNumber": 597,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  char ch;\n  int s=-1;\n  int N=1;\n  do {\n    if (nextSym == RUNA) {\n      s=s + (0 + 1) * N;\n    }\n else     if (nextSym == RUNB) {\n      s=s + (1 + 1) * N;\n    }\n    N=N * 2;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              if (thech == -1) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n  }\n while (nextSym == RUNA || nextSym == RUNB);\n  s++;\n  ch=seqToUnseq[yy[0]];\n  unzftab[ch]+=s;\n  while (s > 0) {\n    last++;\n    ll8[last]=ch;\n    s--;\n  }\n  if (last >= limitLast) {\n    blockOverrun();\n  }\n  continue;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 264,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4898,
                        "startLineNumber": 533,
                        "startColumnNumber": 12,
                        "endLineNumber": 662,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (nextSym == RUNA || nextSym == RUNB) {\n  char ch;\n  int s=-1;\n  int N=1;\n  do {\n    if (nextSym == RUNA) {\n      s=s + (0 + 1) * N;\n    }\n else     if (nextSym == RUNB) {\n      s=s + (1 + 1) * N;\n    }\n    N=N * 2;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              if (thech == -1) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n  }\n while (nextSym == RUNA || nextSym == RUNB);\n  s++;\n  ch=seqToUnseq[yy[0]];\n  unzftab[ch]+=s;\n  while (s > 0) {\n    last++;\n    ll8[last]=ch;\n    s--;\n  }\n  if (last >= limitLast) {\n    blockOverrun();\n  }\n  continue;\n}\n else {\n  char tmp;\n  last++;\n  if (last >= limitLast) {\n    blockOverrun();\n  }\n  tmp=yy[nextSym - 1];\n  unzftab[seqToUnseq[tmp]]++;\n  ll8[last]=seqToUnseq[tmp];\n  j=nextSym - 1;\n  for (; j > 3; j-=4) {\n    yy[j]=yy[j - 1];\n    yy[j - 1]=yy[j - 2];\n    yy[j - 2]=yy[j - 3];\n    yy[j - 3]=yy[j - 4];\n  }\n  for (; j > 0; j--) {\n    yy[j]=yy[j - 1];\n  }\n  yy[0]=tmp;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  continue;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 544,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 4995,
                        "startLineNumber": 527,
                        "startColumnNumber": 21,
                        "endLineNumber": 663,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (nextSym == EOB) {\n    break;\n  }\n  if (nextSym == RUNA || nextSym == RUNB) {\n    char ch;\n    int s=-1;\n    int N=1;\n    do {\n      if (nextSym == RUNA) {\n        s=s + (0 + 1) * N;\n      }\n else       if (nextSym == RUNB) {\n        s=s + (1 + 1) * N;\n      }\n      N=N * 2;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                if (thech == -1) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n    }\n while (nextSym == RUNA || nextSym == RUNB);\n    s++;\n    ch=seqToUnseq[yy[0]];\n    unzftab[ch]+=s;\n    while (s > 0) {\n      last++;\n      ll8[last]=ch;\n      s--;\n    }\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    continue;\n  }\n else {\n    char tmp;\n    last++;\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    tmp=yy[nextSym - 1];\n    unzftab[seqToUnseq[tmp]]++;\n    ll8[last]=seqToUnseq[tmp];\n    j=nextSym - 1;\n    for (; j > 3; j-=4) {\n      yy[j]=yy[j - 1];\n      yy[j - 1]=yy[j - 2];\n      yy[j - 2]=yy[j - 3];\n      yy[j - 3]=yy[j - 4];\n    }\n    for (; j > 0; j--) {\n      yy[j]=yy[j - 1];\n    }\n    yy[0]=tmp;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n    continue;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 551,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 5008,
                        "startLineNumber": 527,
                        "startColumnNumber": 8,
                        "endLineNumber": 663,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (true) {\n  if (nextSym == EOB) {\n    break;\n  }\n  if (nextSym == RUNA || nextSym == RUNB) {\n    char ch;\n    int s=-1;\n    int N=1;\n    do {\n      if (nextSym == RUNA) {\n        s=s + (0 + 1) * N;\n      }\n else       if (nextSym == RUNB) {\n        s=s + (1 + 1) * N;\n      }\n      N=N * 2;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                if (thech == -1) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n    }\n while (nextSym == RUNA || nextSym == RUNB);\n    s++;\n    ch=seqToUnseq[yy[0]];\n    unzftab[ch]+=s;\n    while (s > 0) {\n      last++;\n      ll8[last]=ch;\n      s--;\n    }\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    continue;\n  }\n else {\n    char tmp;\n    last++;\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    tmp=yy[nextSym - 1];\n    unzftab[seqToUnseq[tmp]]++;\n    ll8[last]=seqToUnseq[tmp];\n    j=nextSym - 1;\n    for (; j > 3; j-=4) {\n      yy[j]=yy[j - 1];\n      yy[j - 1]=yy[j - 2];\n      yy[j - 2]=yy[j - 3];\n      yy[j - 3]=yy[j - 4];\n    }\n    for (; j > 0; j--) {\n      yy[j]=yy[j - 1];\n    }\n    yy[0]=tmp;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n    continue;\n  }\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 553,
                    "astHeight": 20
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 7015,
                        "startLineNumber": 460,
                        "startColumnNumber": 43,
                        "endLineNumber": 664,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  char[] yy=new char[256];\n  int i, j, nextSym, limitLast;\n  int EOB, groupNo, groupPos;\n  limitLast=baseBlockSize * blockSize100k;\n  origPtr=bsGetIntVS(24);\n  recvDecodingTables();\n  EOB=nInUse + 1;\n  groupNo=-1;\n  groupPos=0;\n  for (i=0; i <= 255; i++) {\n    unzftab[i]=0;\n  }\n  for (i=0; i <= 255; i++) {\n    yy[i]=(char)i;\n  }\n  last=-1;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  while (true) {\n    if (nextSym == EOB) {\n      break;\n    }\n    if (nextSym == RUNA || nextSym == RUNB) {\n      char ch;\n      int s=-1;\n      int N=1;\n      do {\n        if (nextSym == RUNA) {\n          s=s + (0 + 1) * N;\n        }\n else         if (nextSym == RUNB) {\n          s=s + (1 + 1) * N;\n        }\n        N=N * 2;\n{\n          int zt, zn, zvec, zj;\n          if (groupPos == 0) {\n            groupNo++;\n            groupPos=G_SIZE;\n          }\n          groupPos--;\n          zt=selector[groupNo];\n          zn=minLens[zt];\n          zvec=bsR(zn);\n          while (zvec > limit[zt][zn]) {\n            zn++;\n{\n{\n                while (bsLive < 1) {\n                  int zzi;\n                  char thech=0;\n                  try {\n                    thech=(char)bsStream.read();\n                  }\n catch (                  IOException e) {\n                    compressedStreamEOF();\n                  }\n                  if (thech == -1) {\n                    compressedStreamEOF();\n                  }\n                  zzi=thech;\n                  bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                  bsLive+=8;\n                }\n              }\n              zj=(bsBuff >> (bsLive - 1)) & 1;\n              bsLive--;\n            }\n            zvec=(zvec << 1) | zj;\n          }\n          nextSym=perm[zt][zvec - base[zt][zn]];\n        }\n      }\n while (nextSym == RUNA || nextSym == RUNB);\n      s++;\n      ch=seqToUnseq[yy[0]];\n      unzftab[ch]+=s;\n      while (s > 0) {\n        last++;\n        ll8[last]=ch;\n        s--;\n      }\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      continue;\n    }\n else {\n      char tmp;\n      last++;\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      tmp=yy[nextSym - 1];\n      unzftab[seqToUnseq[tmp]]++;\n      ll8[last]=seqToUnseq[tmp];\n      j=nextSym - 1;\n      for (; j > 3; j-=4) {\n        yy[j]=yy[j - 1];\n        yy[j - 1]=yy[j - 2];\n        yy[j - 2]=yy[j - 3];\n        yy[j - 3]=yy[j - 4];\n      }\n      for (; j > 0; j--) {\n        yy[j]=yy[j - 1];\n      }\n      yy[0]=tmp;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n      continue;\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 810,
                    "astHeight": 21
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7054,
                        "startLineNumber": 460,
                        "startColumnNumber": 4,
                        "endLineNumber": 664,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void getAndMoveToFrontDecode(){\n  char[] yy=new char[256];\n  int i, j, nextSym, limitLast;\n  int EOB, groupNo, groupPos;\n  limitLast=baseBlockSize * blockSize100k;\n  origPtr=bsGetIntVS(24);\n  recvDecodingTables();\n  EOB=nInUse + 1;\n  groupNo=-1;\n  groupPos=0;\n  for (i=0; i <= 255; i++) {\n    unzftab[i]=0;\n  }\n  for (i=0; i <= 255; i++) {\n    yy[i]=(char)i;\n  }\n  last=-1;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  while (true) {\n    if (nextSym == EOB) {\n      break;\n    }\n    if (nextSym == RUNA || nextSym == RUNB) {\n      char ch;\n      int s=-1;\n      int N=1;\n      do {\n        if (nextSym == RUNA) {\n          s=s + (0 + 1) * N;\n        }\n else         if (nextSym == RUNB) {\n          s=s + (1 + 1) * N;\n        }\n        N=N * 2;\n{\n          int zt, zn, zvec, zj;\n          if (groupPos == 0) {\n            groupNo++;\n            groupPos=G_SIZE;\n          }\n          groupPos--;\n          zt=selector[groupNo];\n          zn=minLens[zt];\n          zvec=bsR(zn);\n          while (zvec > limit[zt][zn]) {\n            zn++;\n{\n{\n                while (bsLive < 1) {\n                  int zzi;\n                  char thech=0;\n                  try {\n                    thech=(char)bsStream.read();\n                  }\n catch (                  IOException e) {\n                    compressedStreamEOF();\n                  }\n                  if (thech == -1) {\n                    compressedStreamEOF();\n                  }\n                  zzi=thech;\n                  bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                  bsLive+=8;\n                }\n              }\n              zj=(bsBuff >> (bsLive - 1)) & 1;\n              bsLive--;\n            }\n            zvec=(zvec << 1) | zj;\n          }\n          nextSym=perm[zt][zvec - base[zt][zn]];\n        }\n      }\n while (nextSym == RUNA || nextSym == RUNB);\n      s++;\n      ch=seqToUnseq[yy[0]];\n      unzftab[ch]+=s;\n      while (s > 0) {\n        last++;\n        ll8[last]=ch;\n        s--;\n      }\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      continue;\n    }\n else {\n      char tmp;\n      last++;\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      tmp=yy[nextSym - 1];\n      unzftab[seqToUnseq[tmp]]++;\n      ll8[last]=seqToUnseq[tmp];\n      j=nextSym - 1;\n      for (; j > 3; j-=4) {\n        yy[j]=yy[j - 1];\n        yy[j - 1]=yy[j - 2];\n        yy[j - 2]=yy[j - 3];\n        yy[j - 3]=yy[j - 4];\n      }\n      for (; j > 0; j--) {\n        yy[j]=yy[j - 1];\n      }\n      yy[0]=tmp;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n      continue;\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 814,
                    "astHeight": 22
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 24,
                    "startLineNumber": 577,
                    "startColumnNumber": 28,
                    "endLineNumber": 577,
                    "endColumnNumber": 52
                },
                "nodeContext": "zvec=(zvec << 1) | zj;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 9,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 604,
                "startColumnNumber": 35,
                "endLineNumber": 604,
                "endColumnNumber": 36
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,index]",
                    "nodePosition": {
                        "charLength": 11,
                        "startLineNumber": 604,
                        "startColumnNumber": 25,
                        "endLineNumber": 604,
                        "endColumnNumber": 36
                    },
                    "nodeContext": "nextSym - 1",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 15,
                        "startLineNumber": 604,
                        "startColumnNumber": 22,
                        "endLineNumber": 604,
                        "endColumnNumber": 37
                    },
                    "nodeContext": "yy[nextSym - 1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 21,
                        "startLineNumber": 604,
                        "startColumnNumber": 16,
                        "endLineNumber": 604,
                        "endColumnNumber": 37
                    },
                    "nodeContext": "tmp=yy[nextSym - 1]",
                    "nodeType": "Assignment",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 22,
                        "startLineNumber": 604,
                        "startColumnNumber": 16,
                        "endLineNumber": 604,
                        "endColumnNumber": 38
                    },
                    "nodeContext": "tmp=yy[nextSym - 1];\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 2340,
                        "startLineNumber": 597,
                        "startColumnNumber": 19,
                        "endLineNumber": 662,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  char tmp;\n  last++;\n  if (last >= limitLast) {\n    blockOverrun();\n  }\n  tmp=yy[nextSym - 1];\n  unzftab[seqToUnseq[tmp]]++;\n  ll8[last]=seqToUnseq[tmp];\n  j=nextSym - 1;\n  for (; j > 3; j-=4) {\n    yy[j]=yy[j - 1];\n    yy[j - 1]=yy[j - 2];\n    yy[j - 2]=yy[j - 3];\n    yy[j - 3]=yy[j - 4];\n  }\n  for (; j > 0; j--) {\n    yy[j]=yy[j - 1];\n  }\n  yy[0]=tmp;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  continue;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 272,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4898,
                        "startLineNumber": 533,
                        "startColumnNumber": 12,
                        "endLineNumber": 662,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (nextSym == RUNA || nextSym == RUNB) {\n  char ch;\n  int s=-1;\n  int N=1;\n  do {\n    if (nextSym == RUNA) {\n      s=s + (0 + 1) * N;\n    }\n else     if (nextSym == RUNB) {\n      s=s + (1 + 1) * N;\n    }\n    N=N * 2;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              if (thech == -1) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n  }\n while (nextSym == RUNA || nextSym == RUNB);\n  s++;\n  ch=seqToUnseq[yy[0]];\n  unzftab[ch]+=s;\n  while (s > 0) {\n    last++;\n    ll8[last]=ch;\n    s--;\n  }\n  if (last >= limitLast) {\n    blockOverrun();\n  }\n  continue;\n}\n else {\n  char tmp;\n  last++;\n  if (last >= limitLast) {\n    blockOverrun();\n  }\n  tmp=yy[nextSym - 1];\n  unzftab[seqToUnseq[tmp]]++;\n  ll8[last]=seqToUnseq[tmp];\n  j=nextSym - 1;\n  for (; j > 3; j-=4) {\n    yy[j]=yy[j - 1];\n    yy[j - 1]=yy[j - 2];\n    yy[j - 2]=yy[j - 3];\n    yy[j - 3]=yy[j - 4];\n  }\n  for (; j > 0; j--) {\n    yy[j]=yy[j - 1];\n  }\n  yy[0]=tmp;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  continue;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 544,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 4995,
                        "startLineNumber": 527,
                        "startColumnNumber": 21,
                        "endLineNumber": 663,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (nextSym == EOB) {\n    break;\n  }\n  if (nextSym == RUNA || nextSym == RUNB) {\n    char ch;\n    int s=-1;\n    int N=1;\n    do {\n      if (nextSym == RUNA) {\n        s=s + (0 + 1) * N;\n      }\n else       if (nextSym == RUNB) {\n        s=s + (1 + 1) * N;\n      }\n      N=N * 2;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                if (thech == -1) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n    }\n while (nextSym == RUNA || nextSym == RUNB);\n    s++;\n    ch=seqToUnseq[yy[0]];\n    unzftab[ch]+=s;\n    while (s > 0) {\n      last++;\n      ll8[last]=ch;\n      s--;\n    }\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    continue;\n  }\n else {\n    char tmp;\n    last++;\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    tmp=yy[nextSym - 1];\n    unzftab[seqToUnseq[tmp]]++;\n    ll8[last]=seqToUnseq[tmp];\n    j=nextSym - 1;\n    for (; j > 3; j-=4) {\n      yy[j]=yy[j - 1];\n      yy[j - 1]=yy[j - 2];\n      yy[j - 2]=yy[j - 3];\n      yy[j - 3]=yy[j - 4];\n    }\n    for (; j > 0; j--) {\n      yy[j]=yy[j - 1];\n    }\n    yy[0]=tmp;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n    continue;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 551,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 5008,
                        "startLineNumber": 527,
                        "startColumnNumber": 8,
                        "endLineNumber": 663,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (true) {\n  if (nextSym == EOB) {\n    break;\n  }\n  if (nextSym == RUNA || nextSym == RUNB) {\n    char ch;\n    int s=-1;\n    int N=1;\n    do {\n      if (nextSym == RUNA) {\n        s=s + (0 + 1) * N;\n      }\n else       if (nextSym == RUNB) {\n        s=s + (1 + 1) * N;\n      }\n      N=N * 2;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                if (thech == -1) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n    }\n while (nextSym == RUNA || nextSym == RUNB);\n    s++;\n    ch=seqToUnseq[yy[0]];\n    unzftab[ch]+=s;\n    while (s > 0) {\n      last++;\n      ll8[last]=ch;\n      s--;\n    }\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    continue;\n  }\n else {\n    char tmp;\n    last++;\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    tmp=yy[nextSym - 1];\n    unzftab[seqToUnseq[tmp]]++;\n    ll8[last]=seqToUnseq[tmp];\n    j=nextSym - 1;\n    for (; j > 3; j-=4) {\n      yy[j]=yy[j - 1];\n      yy[j - 1]=yy[j - 2];\n      yy[j - 2]=yy[j - 3];\n      yy[j - 3]=yy[j - 4];\n    }\n    for (; j > 0; j--) {\n      yy[j]=yy[j - 1];\n    }\n    yy[0]=tmp;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n    continue;\n  }\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 553,
                    "astHeight": 20
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 7015,
                        "startLineNumber": 460,
                        "startColumnNumber": 43,
                        "endLineNumber": 664,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  char[] yy=new char[256];\n  int i, j, nextSym, limitLast;\n  int EOB, groupNo, groupPos;\n  limitLast=baseBlockSize * blockSize100k;\n  origPtr=bsGetIntVS(24);\n  recvDecodingTables();\n  EOB=nInUse + 1;\n  groupNo=-1;\n  groupPos=0;\n  for (i=0; i <= 255; i++) {\n    unzftab[i]=0;\n  }\n  for (i=0; i <= 255; i++) {\n    yy[i]=(char)i;\n  }\n  last=-1;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  while (true) {\n    if (nextSym == EOB) {\n      break;\n    }\n    if (nextSym == RUNA || nextSym == RUNB) {\n      char ch;\n      int s=-1;\n      int N=1;\n      do {\n        if (nextSym == RUNA) {\n          s=s + (0 + 1) * N;\n        }\n else         if (nextSym == RUNB) {\n          s=s + (1 + 1) * N;\n        }\n        N=N * 2;\n{\n          int zt, zn, zvec, zj;\n          if (groupPos == 0) {\n            groupNo++;\n            groupPos=G_SIZE;\n          }\n          groupPos--;\n          zt=selector[groupNo];\n          zn=minLens[zt];\n          zvec=bsR(zn);\n          while (zvec > limit[zt][zn]) {\n            zn++;\n{\n{\n                while (bsLive < 1) {\n                  int zzi;\n                  char thech=0;\n                  try {\n                    thech=(char)bsStream.read();\n                  }\n catch (                  IOException e) {\n                    compressedStreamEOF();\n                  }\n                  if (thech == -1) {\n                    compressedStreamEOF();\n                  }\n                  zzi=thech;\n                  bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                  bsLive+=8;\n                }\n              }\n              zj=(bsBuff >> (bsLive - 1)) & 1;\n              bsLive--;\n            }\n            zvec=(zvec << 1) | zj;\n          }\n          nextSym=perm[zt][zvec - base[zt][zn]];\n        }\n      }\n while (nextSym == RUNA || nextSym == RUNB);\n      s++;\n      ch=seqToUnseq[yy[0]];\n      unzftab[ch]+=s;\n      while (s > 0) {\n        last++;\n        ll8[last]=ch;\n        s--;\n      }\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      continue;\n    }\n else {\n      char tmp;\n      last++;\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      tmp=yy[nextSym - 1];\n      unzftab[seqToUnseq[tmp]]++;\n      ll8[last]=seqToUnseq[tmp];\n      j=nextSym - 1;\n      for (; j > 3; j-=4) {\n        yy[j]=yy[j - 1];\n        yy[j - 1]=yy[j - 2];\n        yy[j - 2]=yy[j - 3];\n        yy[j - 3]=yy[j - 4];\n      }\n      for (; j > 0; j--) {\n        yy[j]=yy[j - 1];\n      }\n      yy[0]=tmp;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n      continue;\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 810,
                    "astHeight": 21
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7054,
                        "startLineNumber": 460,
                        "startColumnNumber": 4,
                        "endLineNumber": 664,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void getAndMoveToFrontDecode(){\n  char[] yy=new char[256];\n  int i, j, nextSym, limitLast;\n  int EOB, groupNo, groupPos;\n  limitLast=baseBlockSize * blockSize100k;\n  origPtr=bsGetIntVS(24);\n  recvDecodingTables();\n  EOB=nInUse + 1;\n  groupNo=-1;\n  groupPos=0;\n  for (i=0; i <= 255; i++) {\n    unzftab[i]=0;\n  }\n  for (i=0; i <= 255; i++) {\n    yy[i]=(char)i;\n  }\n  last=-1;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  while (true) {\n    if (nextSym == EOB) {\n      break;\n    }\n    if (nextSym == RUNA || nextSym == RUNB) {\n      char ch;\n      int s=-1;\n      int N=1;\n      do {\n        if (nextSym == RUNA) {\n          s=s + (0 + 1) * N;\n        }\n else         if (nextSym == RUNB) {\n          s=s + (1 + 1) * N;\n        }\n        N=N * 2;\n{\n          int zt, zn, zvec, zj;\n          if (groupPos == 0) {\n            groupNo++;\n            groupPos=G_SIZE;\n          }\n          groupPos--;\n          zt=selector[groupNo];\n          zn=minLens[zt];\n          zvec=bsR(zn);\n          while (zvec > limit[zt][zn]) {\n            zn++;\n{\n{\n                while (bsLive < 1) {\n                  int zzi;\n                  char thech=0;\n                  try {\n                    thech=(char)bsStream.read();\n                  }\n catch (                  IOException e) {\n                    compressedStreamEOF();\n                  }\n                  if (thech == -1) {\n                    compressedStreamEOF();\n                  }\n                  zzi=thech;\n                  bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                  bsLive+=8;\n                }\n              }\n              zj=(bsBuff >> (bsLive - 1)) & 1;\n              bsLive--;\n            }\n            zvec=(zvec << 1) | zj;\n          }\n          nextSym=perm[zt][zvec - base[zt][zn]];\n        }\n      }\n while (nextSym == RUNA || nextSym == RUNB);\n      s++;\n      ch=seqToUnseq[yy[0]];\n      unzftab[ch]+=s;\n      while (s > 0) {\n        last++;\n        ll8[last]=ch;\n        s--;\n      }\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      continue;\n    }\n else {\n      char tmp;\n      last++;\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      tmp=yy[nextSym - 1];\n      unzftab[seqToUnseq[tmp]]++;\n      ll8[last]=seqToUnseq[tmp];\n      j=nextSym - 1;\n      for (; j > 3; j-=4) {\n        yy[j]=yy[j - 1];\n        yy[j - 1]=yy[j - 2];\n        yy[j - 2]=yy[j - 3];\n        yy[j - 3]=yy[j - 4];\n      }\n      for (; j > 0; j--) {\n        yy[j]=yy[j - 1];\n      }\n      yy[0]=tmp;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n      continue;\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 814,
                    "astHeight": 22
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 22,
                    "startLineNumber": 604,
                    "startColumnNumber": 16,
                    "endLineNumber": 604,
                    "endColumnNumber": 38
                },
                "nodeContext": "tmp=yy[nextSym - 1];\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 615,
                "startColumnNumber": 30,
                "endLineNumber": 615,
                "endColumnNumber": 31
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 11,
                        "startLineNumber": 615,
                        "startColumnNumber": 20,
                        "endLineNumber": 615,
                        "endColumnNumber": 31
                    },
                    "nodeContext": "nextSym - 1",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 15,
                        "startLineNumber": 615,
                        "startColumnNumber": 16,
                        "endLineNumber": 615,
                        "endColumnNumber": 31
                    },
                    "nodeContext": "j=nextSym - 1",
                    "nodeType": "Assignment",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 16,
                        "startLineNumber": 615,
                        "startColumnNumber": 16,
                        "endLineNumber": 615,
                        "endColumnNumber": 32
                    },
                    "nodeContext": "j=nextSym - 1;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 6,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 2340,
                        "startLineNumber": 597,
                        "startColumnNumber": 19,
                        "endLineNumber": 662,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  char tmp;\n  last++;\n  if (last >= limitLast) {\n    blockOverrun();\n  }\n  tmp=yy[nextSym - 1];\n  unzftab[seqToUnseq[tmp]]++;\n  ll8[last]=seqToUnseq[tmp];\n  j=nextSym - 1;\n  for (; j > 3; j-=4) {\n    yy[j]=yy[j - 1];\n    yy[j - 1]=yy[j - 2];\n    yy[j - 2]=yy[j - 3];\n    yy[j - 3]=yy[j - 4];\n  }\n  for (; j > 0; j--) {\n    yy[j]=yy[j - 1];\n  }\n  yy[0]=tmp;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  continue;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 272,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4898,
                        "startLineNumber": 533,
                        "startColumnNumber": 12,
                        "endLineNumber": 662,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (nextSym == RUNA || nextSym == RUNB) {\n  char ch;\n  int s=-1;\n  int N=1;\n  do {\n    if (nextSym == RUNA) {\n      s=s + (0 + 1) * N;\n    }\n else     if (nextSym == RUNB) {\n      s=s + (1 + 1) * N;\n    }\n    N=N * 2;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              if (thech == -1) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n  }\n while (nextSym == RUNA || nextSym == RUNB);\n  s++;\n  ch=seqToUnseq[yy[0]];\n  unzftab[ch]+=s;\n  while (s > 0) {\n    last++;\n    ll8[last]=ch;\n    s--;\n  }\n  if (last >= limitLast) {\n    blockOverrun();\n  }\n  continue;\n}\n else {\n  char tmp;\n  last++;\n  if (last >= limitLast) {\n    blockOverrun();\n  }\n  tmp=yy[nextSym - 1];\n  unzftab[seqToUnseq[tmp]]++;\n  ll8[last]=seqToUnseq[tmp];\n  j=nextSym - 1;\n  for (; j > 3; j-=4) {\n    yy[j]=yy[j - 1];\n    yy[j - 1]=yy[j - 2];\n    yy[j - 2]=yy[j - 3];\n    yy[j - 3]=yy[j - 4];\n  }\n  for (; j > 0; j--) {\n    yy[j]=yy[j - 1];\n  }\n  yy[0]=tmp;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  continue;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 544,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 4995,
                        "startLineNumber": 527,
                        "startColumnNumber": 21,
                        "endLineNumber": 663,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (nextSym == EOB) {\n    break;\n  }\n  if (nextSym == RUNA || nextSym == RUNB) {\n    char ch;\n    int s=-1;\n    int N=1;\n    do {\n      if (nextSym == RUNA) {\n        s=s + (0 + 1) * N;\n      }\n else       if (nextSym == RUNB) {\n        s=s + (1 + 1) * N;\n      }\n      N=N * 2;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                if (thech == -1) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n    }\n while (nextSym == RUNA || nextSym == RUNB);\n    s++;\n    ch=seqToUnseq[yy[0]];\n    unzftab[ch]+=s;\n    while (s > 0) {\n      last++;\n      ll8[last]=ch;\n      s--;\n    }\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    continue;\n  }\n else {\n    char tmp;\n    last++;\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    tmp=yy[nextSym - 1];\n    unzftab[seqToUnseq[tmp]]++;\n    ll8[last]=seqToUnseq[tmp];\n    j=nextSym - 1;\n    for (; j > 3; j-=4) {\n      yy[j]=yy[j - 1];\n      yy[j - 1]=yy[j - 2];\n      yy[j - 2]=yy[j - 3];\n      yy[j - 3]=yy[j - 4];\n    }\n    for (; j > 0; j--) {\n      yy[j]=yy[j - 1];\n    }\n    yy[0]=tmp;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n    continue;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 551,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 5008,
                        "startLineNumber": 527,
                        "startColumnNumber": 8,
                        "endLineNumber": 663,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (true) {\n  if (nextSym == EOB) {\n    break;\n  }\n  if (nextSym == RUNA || nextSym == RUNB) {\n    char ch;\n    int s=-1;\n    int N=1;\n    do {\n      if (nextSym == RUNA) {\n        s=s + (0 + 1) * N;\n      }\n else       if (nextSym == RUNB) {\n        s=s + (1 + 1) * N;\n      }\n      N=N * 2;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                if (thech == -1) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n    }\n while (nextSym == RUNA || nextSym == RUNB);\n    s++;\n    ch=seqToUnseq[yy[0]];\n    unzftab[ch]+=s;\n    while (s > 0) {\n      last++;\n      ll8[last]=ch;\n      s--;\n    }\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    continue;\n  }\n else {\n    char tmp;\n    last++;\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    tmp=yy[nextSym - 1];\n    unzftab[seqToUnseq[tmp]]++;\n    ll8[last]=seqToUnseq[tmp];\n    j=nextSym - 1;\n    for (; j > 3; j-=4) {\n      yy[j]=yy[j - 1];\n      yy[j - 1]=yy[j - 2];\n      yy[j - 2]=yy[j - 3];\n      yy[j - 3]=yy[j - 4];\n    }\n    for (; j > 0; j--) {\n      yy[j]=yy[j - 1];\n    }\n    yy[0]=tmp;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n    continue;\n  }\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 553,
                    "astHeight": 20
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 7015,
                        "startLineNumber": 460,
                        "startColumnNumber": 43,
                        "endLineNumber": 664,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  char[] yy=new char[256];\n  int i, j, nextSym, limitLast;\n  int EOB, groupNo, groupPos;\n  limitLast=baseBlockSize * blockSize100k;\n  origPtr=bsGetIntVS(24);\n  recvDecodingTables();\n  EOB=nInUse + 1;\n  groupNo=-1;\n  groupPos=0;\n  for (i=0; i <= 255; i++) {\n    unzftab[i]=0;\n  }\n  for (i=0; i <= 255; i++) {\n    yy[i]=(char)i;\n  }\n  last=-1;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  while (true) {\n    if (nextSym == EOB) {\n      break;\n    }\n    if (nextSym == RUNA || nextSym == RUNB) {\n      char ch;\n      int s=-1;\n      int N=1;\n      do {\n        if (nextSym == RUNA) {\n          s=s + (0 + 1) * N;\n        }\n else         if (nextSym == RUNB) {\n          s=s + (1 + 1) * N;\n        }\n        N=N * 2;\n{\n          int zt, zn, zvec, zj;\n          if (groupPos == 0) {\n            groupNo++;\n            groupPos=G_SIZE;\n          }\n          groupPos--;\n          zt=selector[groupNo];\n          zn=minLens[zt];\n          zvec=bsR(zn);\n          while (zvec > limit[zt][zn]) {\n            zn++;\n{\n{\n                while (bsLive < 1) {\n                  int zzi;\n                  char thech=0;\n                  try {\n                    thech=(char)bsStream.read();\n                  }\n catch (                  IOException e) {\n                    compressedStreamEOF();\n                  }\n                  if (thech == -1) {\n                    compressedStreamEOF();\n                  }\n                  zzi=thech;\n                  bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                  bsLive+=8;\n                }\n              }\n              zj=(bsBuff >> (bsLive - 1)) & 1;\n              bsLive--;\n            }\n            zvec=(zvec << 1) | zj;\n          }\n          nextSym=perm[zt][zvec - base[zt][zn]];\n        }\n      }\n while (nextSym == RUNA || nextSym == RUNB);\n      s++;\n      ch=seqToUnseq[yy[0]];\n      unzftab[ch]+=s;\n      while (s > 0) {\n        last++;\n        ll8[last]=ch;\n        s--;\n      }\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      continue;\n    }\n else {\n      char tmp;\n      last++;\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      tmp=yy[nextSym - 1];\n      unzftab[seqToUnseq[tmp]]++;\n      ll8[last]=seqToUnseq[tmp];\n      j=nextSym - 1;\n      for (; j > 3; j-=4) {\n        yy[j]=yy[j - 1];\n        yy[j - 1]=yy[j - 2];\n        yy[j - 2]=yy[j - 3];\n        yy[j - 3]=yy[j - 4];\n      }\n      for (; j > 0; j--) {\n        yy[j]=yy[j - 1];\n      }\n      yy[0]=tmp;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n      continue;\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 810,
                    "astHeight": 21
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7054,
                        "startLineNumber": 460,
                        "startColumnNumber": 4,
                        "endLineNumber": 664,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void getAndMoveToFrontDecode(){\n  char[] yy=new char[256];\n  int i, j, nextSym, limitLast;\n  int EOB, groupNo, groupPos;\n  limitLast=baseBlockSize * blockSize100k;\n  origPtr=bsGetIntVS(24);\n  recvDecodingTables();\n  EOB=nInUse + 1;\n  groupNo=-1;\n  groupPos=0;\n  for (i=0; i <= 255; i++) {\n    unzftab[i]=0;\n  }\n  for (i=0; i <= 255; i++) {\n    yy[i]=(char)i;\n  }\n  last=-1;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  while (true) {\n    if (nextSym == EOB) {\n      break;\n    }\n    if (nextSym == RUNA || nextSym == RUNB) {\n      char ch;\n      int s=-1;\n      int N=1;\n      do {\n        if (nextSym == RUNA) {\n          s=s + (0 + 1) * N;\n        }\n else         if (nextSym == RUNB) {\n          s=s + (1 + 1) * N;\n        }\n        N=N * 2;\n{\n          int zt, zn, zvec, zj;\n          if (groupPos == 0) {\n            groupNo++;\n            groupPos=G_SIZE;\n          }\n          groupPos--;\n          zt=selector[groupNo];\n          zn=minLens[zt];\n          zvec=bsR(zn);\n          while (zvec > limit[zt][zn]) {\n            zn++;\n{\n{\n                while (bsLive < 1) {\n                  int zzi;\n                  char thech=0;\n                  try {\n                    thech=(char)bsStream.read();\n                  }\n catch (                  IOException e) {\n                    compressedStreamEOF();\n                  }\n                  if (thech == -1) {\n                    compressedStreamEOF();\n                  }\n                  zzi=thech;\n                  bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                  bsLive+=8;\n                }\n              }\n              zj=(bsBuff >> (bsLive - 1)) & 1;\n              bsLive--;\n            }\n            zvec=(zvec << 1) | zj;\n          }\n          nextSym=perm[zt][zvec - base[zt][zn]];\n        }\n      }\n while (nextSym == RUNA || nextSym == RUNB);\n      s++;\n      ch=seqToUnseq[yy[0]];\n      unzftab[ch]+=s;\n      while (s > 0) {\n        last++;\n        ll8[last]=ch;\n        s--;\n      }\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      continue;\n    }\n else {\n      char tmp;\n      last++;\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      tmp=yy[nextSym - 1];\n      unzftab[seqToUnseq[tmp]]++;\n      ll8[last]=seqToUnseq[tmp];\n      j=nextSym - 1;\n      for (; j > 3; j-=4) {\n        yy[j]=yy[j - 1];\n        yy[j - 1]=yy[j - 2];\n        yy[j - 2]=yy[j - 3];\n        yy[j - 3]=yy[j - 4];\n      }\n      for (; j > 0; j--) {\n        yy[j]=yy[j - 1];\n      }\n      yy[0]=tmp;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n      continue;\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 814,
                    "astHeight": 22
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 16,
                    "startLineNumber": 615,
                    "startColumnNumber": 16,
                    "endLineNumber": 615,
                    "endColumnNumber": 32
                },
                "nodeContext": "j=nextSym - 1;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 6,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 617,
                "startColumnNumber": 39,
                "endLineNumber": 617,
                "endColumnNumber": 40
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,index]",
                    "nodePosition": {
                        "charLength": 5,
                        "startLineNumber": 617,
                        "startColumnNumber": 35,
                        "endLineNumber": 617,
                        "endColumnNumber": 40
                    },
                    "nodeContext": "j - 1",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 9,
                        "startLineNumber": 617,
                        "startColumnNumber": 32,
                        "endLineNumber": 617,
                        "endColumnNumber": 41
                    },
                    "nodeContext": "yy[j - 1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 21,
                        "startLineNumber": 617,
                        "startColumnNumber": 20,
                        "endLineNumber": 617,
                        "endColumnNumber": 41
                    },
                    "nodeContext": "yy[j]=yy[j - 1]",
                    "nodeType": "Assignment",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 22,
                        "startLineNumber": 617,
                        "startColumnNumber": 20,
                        "endLineNumber": 617,
                        "endColumnNumber": 42
                    },
                    "nodeContext": "yy[j]=yy[j - 1];\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 10,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 191,
                        "startLineNumber": 616,
                        "startColumnNumber": 38,
                        "endLineNumber": 621,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  yy[j]=yy[j - 1];\n  yy[j - 1]=yy[j - 2];\n  yy[j - 2]=yy[j - 3];\n  yy[j - 3]=yy[j - 4];\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 47,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 213,
                        "startLineNumber": 616,
                        "startColumnNumber": 16,
                        "endLineNumber": 621,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "for (; j > 3; j-=4) {\n  yy[j]=yy[j - 1];\n  yy[j - 1]=yy[j - 2];\n  yy[j - 2]=yy[j - 3];\n  yy[j - 3]=yy[j - 4];\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 54,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 2340,
                        "startLineNumber": 597,
                        "startColumnNumber": 19,
                        "endLineNumber": 662,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  char tmp;\n  last++;\n  if (last >= limitLast) {\n    blockOverrun();\n  }\n  tmp=yy[nextSym - 1];\n  unzftab[seqToUnseq[tmp]]++;\n  ll8[last]=seqToUnseq[tmp];\n  j=nextSym - 1;\n  for (; j > 3; j-=4) {\n    yy[j]=yy[j - 1];\n    yy[j - 1]=yy[j - 2];\n    yy[j - 2]=yy[j - 3];\n    yy[j - 3]=yy[j - 4];\n  }\n  for (; j > 0; j--) {\n    yy[j]=yy[j - 1];\n  }\n  yy[0]=tmp;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  continue;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 272,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4898,
                        "startLineNumber": 533,
                        "startColumnNumber": 12,
                        "endLineNumber": 662,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (nextSym == RUNA || nextSym == RUNB) {\n  char ch;\n  int s=-1;\n  int N=1;\n  do {\n    if (nextSym == RUNA) {\n      s=s + (0 + 1) * N;\n    }\n else     if (nextSym == RUNB) {\n      s=s + (1 + 1) * N;\n    }\n    N=N * 2;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              if (thech == -1) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n  }\n while (nextSym == RUNA || nextSym == RUNB);\n  s++;\n  ch=seqToUnseq[yy[0]];\n  unzftab[ch]+=s;\n  while (s > 0) {\n    last++;\n    ll8[last]=ch;\n    s--;\n  }\n  if (last >= limitLast) {\n    blockOverrun();\n  }\n  continue;\n}\n else {\n  char tmp;\n  last++;\n  if (last >= limitLast) {\n    blockOverrun();\n  }\n  tmp=yy[nextSym - 1];\n  unzftab[seqToUnseq[tmp]]++;\n  ll8[last]=seqToUnseq[tmp];\n  j=nextSym - 1;\n  for (; j > 3; j-=4) {\n    yy[j]=yy[j - 1];\n    yy[j - 1]=yy[j - 2];\n    yy[j - 2]=yy[j - 3];\n    yy[j - 3]=yy[j - 4];\n  }\n  for (; j > 0; j--) {\n    yy[j]=yy[j - 1];\n  }\n  yy[0]=tmp;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  continue;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 544,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 4995,
                        "startLineNumber": 527,
                        "startColumnNumber": 21,
                        "endLineNumber": 663,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (nextSym == EOB) {\n    break;\n  }\n  if (nextSym == RUNA || nextSym == RUNB) {\n    char ch;\n    int s=-1;\n    int N=1;\n    do {\n      if (nextSym == RUNA) {\n        s=s + (0 + 1) * N;\n      }\n else       if (nextSym == RUNB) {\n        s=s + (1 + 1) * N;\n      }\n      N=N * 2;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                if (thech == -1) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n    }\n while (nextSym == RUNA || nextSym == RUNB);\n    s++;\n    ch=seqToUnseq[yy[0]];\n    unzftab[ch]+=s;\n    while (s > 0) {\n      last++;\n      ll8[last]=ch;\n      s--;\n    }\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    continue;\n  }\n else {\n    char tmp;\n    last++;\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    tmp=yy[nextSym - 1];\n    unzftab[seqToUnseq[tmp]]++;\n    ll8[last]=seqToUnseq[tmp];\n    j=nextSym - 1;\n    for (; j > 3; j-=4) {\n      yy[j]=yy[j - 1];\n      yy[j - 1]=yy[j - 2];\n      yy[j - 2]=yy[j - 3];\n      yy[j - 3]=yy[j - 4];\n    }\n    for (; j > 0; j--) {\n      yy[j]=yy[j - 1];\n    }\n    yy[0]=tmp;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n    continue;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 551,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 5008,
                        "startLineNumber": 527,
                        "startColumnNumber": 8,
                        "endLineNumber": 663,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (true) {\n  if (nextSym == EOB) {\n    break;\n  }\n  if (nextSym == RUNA || nextSym == RUNB) {\n    char ch;\n    int s=-1;\n    int N=1;\n    do {\n      if (nextSym == RUNA) {\n        s=s + (0 + 1) * N;\n      }\n else       if (nextSym == RUNB) {\n        s=s + (1 + 1) * N;\n      }\n      N=N * 2;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                if (thech == -1) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n    }\n while (nextSym == RUNA || nextSym == RUNB);\n    s++;\n    ch=seqToUnseq[yy[0]];\n    unzftab[ch]+=s;\n    while (s > 0) {\n      last++;\n      ll8[last]=ch;\n      s--;\n    }\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    continue;\n  }\n else {\n    char tmp;\n    last++;\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    tmp=yy[nextSym - 1];\n    unzftab[seqToUnseq[tmp]]++;\n    ll8[last]=seqToUnseq[tmp];\n    j=nextSym - 1;\n    for (; j > 3; j-=4) {\n      yy[j]=yy[j - 1];\n      yy[j - 1]=yy[j - 2];\n      yy[j - 2]=yy[j - 3];\n      yy[j - 3]=yy[j - 4];\n    }\n    for (; j > 0; j--) {\n      yy[j]=yy[j - 1];\n    }\n    yy[0]=tmp;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n    continue;\n  }\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 553,
                    "astHeight": 20
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 7015,
                        "startLineNumber": 460,
                        "startColumnNumber": 43,
                        "endLineNumber": 664,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  char[] yy=new char[256];\n  int i, j, nextSym, limitLast;\n  int EOB, groupNo, groupPos;\n  limitLast=baseBlockSize * blockSize100k;\n  origPtr=bsGetIntVS(24);\n  recvDecodingTables();\n  EOB=nInUse + 1;\n  groupNo=-1;\n  groupPos=0;\n  for (i=0; i <= 255; i++) {\n    unzftab[i]=0;\n  }\n  for (i=0; i <= 255; i++) {\n    yy[i]=(char)i;\n  }\n  last=-1;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  while (true) {\n    if (nextSym == EOB) {\n      break;\n    }\n    if (nextSym == RUNA || nextSym == RUNB) {\n      char ch;\n      int s=-1;\n      int N=1;\n      do {\n        if (nextSym == RUNA) {\n          s=s + (0 + 1) * N;\n        }\n else         if (nextSym == RUNB) {\n          s=s + (1 + 1) * N;\n        }\n        N=N * 2;\n{\n          int zt, zn, zvec, zj;\n          if (groupPos == 0) {\n            groupNo++;\n            groupPos=G_SIZE;\n          }\n          groupPos--;\n          zt=selector[groupNo];\n          zn=minLens[zt];\n          zvec=bsR(zn);\n          while (zvec > limit[zt][zn]) {\n            zn++;\n{\n{\n                while (bsLive < 1) {\n                  int zzi;\n                  char thech=0;\n                  try {\n                    thech=(char)bsStream.read();\n                  }\n catch (                  IOException e) {\n                    compressedStreamEOF();\n                  }\n                  if (thech == -1) {\n                    compressedStreamEOF();\n                  }\n                  zzi=thech;\n                  bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                  bsLive+=8;\n                }\n              }\n              zj=(bsBuff >> (bsLive - 1)) & 1;\n              bsLive--;\n            }\n            zvec=(zvec << 1) | zj;\n          }\n          nextSym=perm[zt][zvec - base[zt][zn]];\n        }\n      }\n while (nextSym == RUNA || nextSym == RUNB);\n      s++;\n      ch=seqToUnseq[yy[0]];\n      unzftab[ch]+=s;\n      while (s > 0) {\n        last++;\n        ll8[last]=ch;\n        s--;\n      }\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      continue;\n    }\n else {\n      char tmp;\n      last++;\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      tmp=yy[nextSym - 1];\n      unzftab[seqToUnseq[tmp]]++;\n      ll8[last]=seqToUnseq[tmp];\n      j=nextSym - 1;\n      for (; j > 3; j-=4) {\n        yy[j]=yy[j - 1];\n        yy[j - 1]=yy[j - 2];\n        yy[j - 2]=yy[j - 3];\n        yy[j - 3]=yy[j - 4];\n      }\n      for (; j > 0; j--) {\n        yy[j]=yy[j - 1];\n      }\n      yy[0]=tmp;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n      continue;\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 810,
                    "astHeight": 21
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7054,
                        "startLineNumber": 460,
                        "startColumnNumber": 4,
                        "endLineNumber": 664,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void getAndMoveToFrontDecode(){\n  char[] yy=new char[256];\n  int i, j, nextSym, limitLast;\n  int EOB, groupNo, groupPos;\n  limitLast=baseBlockSize * blockSize100k;\n  origPtr=bsGetIntVS(24);\n  recvDecodingTables();\n  EOB=nInUse + 1;\n  groupNo=-1;\n  groupPos=0;\n  for (i=0; i <= 255; i++) {\n    unzftab[i]=0;\n  }\n  for (i=0; i <= 255; i++) {\n    yy[i]=(char)i;\n  }\n  last=-1;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  while (true) {\n    if (nextSym == EOB) {\n      break;\n    }\n    if (nextSym == RUNA || nextSym == RUNB) {\n      char ch;\n      int s=-1;\n      int N=1;\n      do {\n        if (nextSym == RUNA) {\n          s=s + (0 + 1) * N;\n        }\n else         if (nextSym == RUNB) {\n          s=s + (1 + 1) * N;\n        }\n        N=N * 2;\n{\n          int zt, zn, zvec, zj;\n          if (groupPos == 0) {\n            groupNo++;\n            groupPos=G_SIZE;\n          }\n          groupPos--;\n          zt=selector[groupNo];\n          zn=minLens[zt];\n          zvec=bsR(zn);\n          while (zvec > limit[zt][zn]) {\n            zn++;\n{\n{\n                while (bsLive < 1) {\n                  int zzi;\n                  char thech=0;\n                  try {\n                    thech=(char)bsStream.read();\n                  }\n catch (                  IOException e) {\n                    compressedStreamEOF();\n                  }\n                  if (thech == -1) {\n                    compressedStreamEOF();\n                  }\n                  zzi=thech;\n                  bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                  bsLive+=8;\n                }\n              }\n              zj=(bsBuff >> (bsLive - 1)) & 1;\n              bsLive--;\n            }\n            zvec=(zvec << 1) | zj;\n          }\n          nextSym=perm[zt][zvec - base[zt][zn]];\n        }\n      }\n while (nextSym == RUNA || nextSym == RUNB);\n      s++;\n      ch=seqToUnseq[yy[0]];\n      unzftab[ch]+=s;\n      while (s > 0) {\n        last++;\n        ll8[last]=ch;\n        s--;\n      }\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      continue;\n    }\n else {\n      char tmp;\n      last++;\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      tmp=yy[nextSym - 1];\n      unzftab[seqToUnseq[tmp]]++;\n      ll8[last]=seqToUnseq[tmp];\n      j=nextSym - 1;\n      for (; j > 3; j-=4) {\n        yy[j]=yy[j - 1];\n        yy[j - 1]=yy[j - 2];\n        yy[j - 2]=yy[j - 3];\n        yy[j - 3]=yy[j - 4];\n      }\n      for (; j > 0; j--) {\n        yy[j]=yy[j - 1];\n      }\n      yy[0]=tmp;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n      continue;\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 814,
                    "astHeight": 22
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 22,
                    "startLineNumber": 617,
                    "startColumnNumber": 20,
                    "endLineNumber": 617,
                    "endColumnNumber": 42
                },
                "nodeContext": "yy[j]=yy[j - 1];\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 10,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 618,
                "startColumnNumber": 27,
                "endLineNumber": 618,
                "endColumnNumber": 28
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,index]",
                    "nodePosition": {
                        "charLength": 5,
                        "startLineNumber": 618,
                        "startColumnNumber": 23,
                        "endLineNumber": 618,
                        "endColumnNumber": 28
                    },
                    "nodeContext": "j - 1",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
                    "nodePosition": {
                        "charLength": 9,
                        "startLineNumber": 618,
                        "startColumnNumber": 20,
                        "endLineNumber": 618,
                        "endColumnNumber": 29
                    },
                    "nodeContext": "yy[j - 1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 21,
                        "startLineNumber": 618,
                        "startColumnNumber": 20,
                        "endLineNumber": 618,
                        "endColumnNumber": 41
                    },
                    "nodeContext": "yy[j - 1]=yy[j - 2]",
                    "nodeType": "Assignment",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 22,
                        "startLineNumber": 618,
                        "startColumnNumber": 20,
                        "endLineNumber": 618,
                        "endColumnNumber": 42
                    },
                    "nodeContext": "yy[j - 1]=yy[j - 2];\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 12,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 191,
                        "startLineNumber": 616,
                        "startColumnNumber": 38,
                        "endLineNumber": 621,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  yy[j]=yy[j - 1];\n  yy[j - 1]=yy[j - 2];\n  yy[j - 2]=yy[j - 3];\n  yy[j - 3]=yy[j - 4];\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 47,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 213,
                        "startLineNumber": 616,
                        "startColumnNumber": 16,
                        "endLineNumber": 621,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "for (; j > 3; j-=4) {\n  yy[j]=yy[j - 1];\n  yy[j - 1]=yy[j - 2];\n  yy[j - 2]=yy[j - 3];\n  yy[j - 3]=yy[j - 4];\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 54,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 2340,
                        "startLineNumber": 597,
                        "startColumnNumber": 19,
                        "endLineNumber": 662,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  char tmp;\n  last++;\n  if (last >= limitLast) {\n    blockOverrun();\n  }\n  tmp=yy[nextSym - 1];\n  unzftab[seqToUnseq[tmp]]++;\n  ll8[last]=seqToUnseq[tmp];\n  j=nextSym - 1;\n  for (; j > 3; j-=4) {\n    yy[j]=yy[j - 1];\n    yy[j - 1]=yy[j - 2];\n    yy[j - 2]=yy[j - 3];\n    yy[j - 3]=yy[j - 4];\n  }\n  for (; j > 0; j--) {\n    yy[j]=yy[j - 1];\n  }\n  yy[0]=tmp;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  continue;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 272,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4898,
                        "startLineNumber": 533,
                        "startColumnNumber": 12,
                        "endLineNumber": 662,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (nextSym == RUNA || nextSym == RUNB) {\n  char ch;\n  int s=-1;\n  int N=1;\n  do {\n    if (nextSym == RUNA) {\n      s=s + (0 + 1) * N;\n    }\n else     if (nextSym == RUNB) {\n      s=s + (1 + 1) * N;\n    }\n    N=N * 2;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              if (thech == -1) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n  }\n while (nextSym == RUNA || nextSym == RUNB);\n  s++;\n  ch=seqToUnseq[yy[0]];\n  unzftab[ch]+=s;\n  while (s > 0) {\n    last++;\n    ll8[last]=ch;\n    s--;\n  }\n  if (last >= limitLast) {\n    blockOverrun();\n  }\n  continue;\n}\n else {\n  char tmp;\n  last++;\n  if (last >= limitLast) {\n    blockOverrun();\n  }\n  tmp=yy[nextSym - 1];\n  unzftab[seqToUnseq[tmp]]++;\n  ll8[last]=seqToUnseq[tmp];\n  j=nextSym - 1;\n  for (; j > 3; j-=4) {\n    yy[j]=yy[j - 1];\n    yy[j - 1]=yy[j - 2];\n    yy[j - 2]=yy[j - 3];\n    yy[j - 3]=yy[j - 4];\n  }\n  for (; j > 0; j--) {\n    yy[j]=yy[j - 1];\n  }\n  yy[0]=tmp;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  continue;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 544,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 4995,
                        "startLineNumber": 527,
                        "startColumnNumber": 21,
                        "endLineNumber": 663,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (nextSym == EOB) {\n    break;\n  }\n  if (nextSym == RUNA || nextSym == RUNB) {\n    char ch;\n    int s=-1;\n    int N=1;\n    do {\n      if (nextSym == RUNA) {\n        s=s + (0 + 1) * N;\n      }\n else       if (nextSym == RUNB) {\n        s=s + (1 + 1) * N;\n      }\n      N=N * 2;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                if (thech == -1) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n    }\n while (nextSym == RUNA || nextSym == RUNB);\n    s++;\n    ch=seqToUnseq[yy[0]];\n    unzftab[ch]+=s;\n    while (s > 0) {\n      last++;\n      ll8[last]=ch;\n      s--;\n    }\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    continue;\n  }\n else {\n    char tmp;\n    last++;\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    tmp=yy[nextSym - 1];\n    unzftab[seqToUnseq[tmp]]++;\n    ll8[last]=seqToUnseq[tmp];\n    j=nextSym - 1;\n    for (; j > 3; j-=4) {\n      yy[j]=yy[j - 1];\n      yy[j - 1]=yy[j - 2];\n      yy[j - 2]=yy[j - 3];\n      yy[j - 3]=yy[j - 4];\n    }\n    for (; j > 0; j--) {\n      yy[j]=yy[j - 1];\n    }\n    yy[0]=tmp;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n    continue;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 551,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 5008,
                        "startLineNumber": 527,
                        "startColumnNumber": 8,
                        "endLineNumber": 663,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (true) {\n  if (nextSym == EOB) {\n    break;\n  }\n  if (nextSym == RUNA || nextSym == RUNB) {\n    char ch;\n    int s=-1;\n    int N=1;\n    do {\n      if (nextSym == RUNA) {\n        s=s + (0 + 1) * N;\n      }\n else       if (nextSym == RUNB) {\n        s=s + (1 + 1) * N;\n      }\n      N=N * 2;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                if (thech == -1) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n    }\n while (nextSym == RUNA || nextSym == RUNB);\n    s++;\n    ch=seqToUnseq[yy[0]];\n    unzftab[ch]+=s;\n    while (s > 0) {\n      last++;\n      ll8[last]=ch;\n      s--;\n    }\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    continue;\n  }\n else {\n    char tmp;\n    last++;\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    tmp=yy[nextSym - 1];\n    unzftab[seqToUnseq[tmp]]++;\n    ll8[last]=seqToUnseq[tmp];\n    j=nextSym - 1;\n    for (; j > 3; j-=4) {\n      yy[j]=yy[j - 1];\n      yy[j - 1]=yy[j - 2];\n      yy[j - 2]=yy[j - 3];\n      yy[j - 3]=yy[j - 4];\n    }\n    for (; j > 0; j--) {\n      yy[j]=yy[j - 1];\n    }\n    yy[0]=tmp;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n    continue;\n  }\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 553,
                    "astHeight": 20
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 7015,
                        "startLineNumber": 460,
                        "startColumnNumber": 43,
                        "endLineNumber": 664,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  char[] yy=new char[256];\n  int i, j, nextSym, limitLast;\n  int EOB, groupNo, groupPos;\n  limitLast=baseBlockSize * blockSize100k;\n  origPtr=bsGetIntVS(24);\n  recvDecodingTables();\n  EOB=nInUse + 1;\n  groupNo=-1;\n  groupPos=0;\n  for (i=0; i <= 255; i++) {\n    unzftab[i]=0;\n  }\n  for (i=0; i <= 255; i++) {\n    yy[i]=(char)i;\n  }\n  last=-1;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  while (true) {\n    if (nextSym == EOB) {\n      break;\n    }\n    if (nextSym == RUNA || nextSym == RUNB) {\n      char ch;\n      int s=-1;\n      int N=1;\n      do {\n        if (nextSym == RUNA) {\n          s=s + (0 + 1) * N;\n        }\n else         if (nextSym == RUNB) {\n          s=s + (1 + 1) * N;\n        }\n        N=N * 2;\n{\n          int zt, zn, zvec, zj;\n          if (groupPos == 0) {\n            groupNo++;\n            groupPos=G_SIZE;\n          }\n          groupPos--;\n          zt=selector[groupNo];\n          zn=minLens[zt];\n          zvec=bsR(zn);\n          while (zvec > limit[zt][zn]) {\n            zn++;\n{\n{\n                while (bsLive < 1) {\n                  int zzi;\n                  char thech=0;\n                  try {\n                    thech=(char)bsStream.read();\n                  }\n catch (                  IOException e) {\n                    compressedStreamEOF();\n                  }\n                  if (thech == -1) {\n                    compressedStreamEOF();\n                  }\n                  zzi=thech;\n                  bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                  bsLive+=8;\n                }\n              }\n              zj=(bsBuff >> (bsLive - 1)) & 1;\n              bsLive--;\n            }\n            zvec=(zvec << 1) | zj;\n          }\n          nextSym=perm[zt][zvec - base[zt][zn]];\n        }\n      }\n while (nextSym == RUNA || nextSym == RUNB);\n      s++;\n      ch=seqToUnseq[yy[0]];\n      unzftab[ch]+=s;\n      while (s > 0) {\n        last++;\n        ll8[last]=ch;\n        s--;\n      }\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      continue;\n    }\n else {\n      char tmp;\n      last++;\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      tmp=yy[nextSym - 1];\n      unzftab[seqToUnseq[tmp]]++;\n      ll8[last]=seqToUnseq[tmp];\n      j=nextSym - 1;\n      for (; j > 3; j-=4) {\n        yy[j]=yy[j - 1];\n        yy[j - 1]=yy[j - 2];\n        yy[j - 2]=yy[j - 3];\n        yy[j - 3]=yy[j - 4];\n      }\n      for (; j > 0; j--) {\n        yy[j]=yy[j - 1];\n      }\n      yy[0]=tmp;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n      continue;\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 810,
                    "astHeight": 21
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7054,
                        "startLineNumber": 460,
                        "startColumnNumber": 4,
                        "endLineNumber": 664,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void getAndMoveToFrontDecode(){\n  char[] yy=new char[256];\n  int i, j, nextSym, limitLast;\n  int EOB, groupNo, groupPos;\n  limitLast=baseBlockSize * blockSize100k;\n  origPtr=bsGetIntVS(24);\n  recvDecodingTables();\n  EOB=nInUse + 1;\n  groupNo=-1;\n  groupPos=0;\n  for (i=0; i <= 255; i++) {\n    unzftab[i]=0;\n  }\n  for (i=0; i <= 255; i++) {\n    yy[i]=(char)i;\n  }\n  last=-1;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  while (true) {\n    if (nextSym == EOB) {\n      break;\n    }\n    if (nextSym == RUNA || nextSym == RUNB) {\n      char ch;\n      int s=-1;\n      int N=1;\n      do {\n        if (nextSym == RUNA) {\n          s=s + (0 + 1) * N;\n        }\n else         if (nextSym == RUNB) {\n          s=s + (1 + 1) * N;\n        }\n        N=N * 2;\n{\n          int zt, zn, zvec, zj;\n          if (groupPos == 0) {\n            groupNo++;\n            groupPos=G_SIZE;\n          }\n          groupPos--;\n          zt=selector[groupNo];\n          zn=minLens[zt];\n          zvec=bsR(zn);\n          while (zvec > limit[zt][zn]) {\n            zn++;\n{\n{\n                while (bsLive < 1) {\n                  int zzi;\n                  char thech=0;\n                  try {\n                    thech=(char)bsStream.read();\n                  }\n catch (                  IOException e) {\n                    compressedStreamEOF();\n                  }\n                  if (thech == -1) {\n                    compressedStreamEOF();\n                  }\n                  zzi=thech;\n                  bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                  bsLive+=8;\n                }\n              }\n              zj=(bsBuff >> (bsLive - 1)) & 1;\n              bsLive--;\n            }\n            zvec=(zvec << 1) | zj;\n          }\n          nextSym=perm[zt][zvec - base[zt][zn]];\n        }\n      }\n while (nextSym == RUNA || nextSym == RUNB);\n      s++;\n      ch=seqToUnseq[yy[0]];\n      unzftab[ch]+=s;\n      while (s > 0) {\n        last++;\n        ll8[last]=ch;\n        s--;\n      }\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      continue;\n    }\n else {\n      char tmp;\n      last++;\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      tmp=yy[nextSym - 1];\n      unzftab[seqToUnseq[tmp]]++;\n      ll8[last]=seqToUnseq[tmp];\n      j=nextSym - 1;\n      for (; j > 3; j-=4) {\n        yy[j]=yy[j - 1];\n        yy[j - 1]=yy[j - 2];\n        yy[j - 2]=yy[j - 3];\n        yy[j - 3]=yy[j - 4];\n      }\n      for (; j > 0; j--) {\n        yy[j]=yy[j - 1];\n      }\n      yy[0]=tmp;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n      continue;\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 814,
                    "astHeight": 22
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 22,
                    "startLineNumber": 618,
                    "startColumnNumber": 20,
                    "endLineNumber": 618,
                    "endColumnNumber": 42
                },
                "nodeContext": "yy[j - 1]=yy[j - 2];\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 12,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 623,
                "startColumnNumber": 35,
                "endLineNumber": 623,
                "endColumnNumber": 36
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,index]",
                    "nodePosition": {
                        "charLength": 5,
                        "startLineNumber": 623,
                        "startColumnNumber": 31,
                        "endLineNumber": 623,
                        "endColumnNumber": 36
                    },
                    "nodeContext": "j - 1",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 9,
                        "startLineNumber": 623,
                        "startColumnNumber": 28,
                        "endLineNumber": 623,
                        "endColumnNumber": 37
                    },
                    "nodeContext": "yy[j - 1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 17,
                        "startLineNumber": 623,
                        "startColumnNumber": 20,
                        "endLineNumber": 623,
                        "endColumnNumber": 37
                    },
                    "nodeContext": "yy[j]=yy[j - 1]",
                    "nodeType": "Assignment",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 18,
                        "startLineNumber": 623,
                        "startColumnNumber": 20,
                        "endLineNumber": 623,
                        "endColumnNumber": 38
                    },
                    "nodeContext": "yy[j]=yy[j - 1];\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 10,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 58,
                        "startLineNumber": 622,
                        "startColumnNumber": 35,
                        "endLineNumber": 624,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  yy[j]=yy[j - 1];\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 11,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 77,
                        "startLineNumber": 622,
                        "startColumnNumber": 16,
                        "endLineNumber": 624,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "for (; j > 0; j--) {\n  yy[j]=yy[j - 1];\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 17,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 2340,
                        "startLineNumber": 597,
                        "startColumnNumber": 19,
                        "endLineNumber": 662,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  char tmp;\n  last++;\n  if (last >= limitLast) {\n    blockOverrun();\n  }\n  tmp=yy[nextSym - 1];\n  unzftab[seqToUnseq[tmp]]++;\n  ll8[last]=seqToUnseq[tmp];\n  j=nextSym - 1;\n  for (; j > 3; j-=4) {\n    yy[j]=yy[j - 1];\n    yy[j - 1]=yy[j - 2];\n    yy[j - 2]=yy[j - 3];\n    yy[j - 3]=yy[j - 4];\n  }\n  for (; j > 0; j--) {\n    yy[j]=yy[j - 1];\n  }\n  yy[0]=tmp;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  continue;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 272,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4898,
                        "startLineNumber": 533,
                        "startColumnNumber": 12,
                        "endLineNumber": 662,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (nextSym == RUNA || nextSym == RUNB) {\n  char ch;\n  int s=-1;\n  int N=1;\n  do {\n    if (nextSym == RUNA) {\n      s=s + (0 + 1) * N;\n    }\n else     if (nextSym == RUNB) {\n      s=s + (1 + 1) * N;\n    }\n    N=N * 2;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              if (thech == -1) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n  }\n while (nextSym == RUNA || nextSym == RUNB);\n  s++;\n  ch=seqToUnseq[yy[0]];\n  unzftab[ch]+=s;\n  while (s > 0) {\n    last++;\n    ll8[last]=ch;\n    s--;\n  }\n  if (last >= limitLast) {\n    blockOverrun();\n  }\n  continue;\n}\n else {\n  char tmp;\n  last++;\n  if (last >= limitLast) {\n    blockOverrun();\n  }\n  tmp=yy[nextSym - 1];\n  unzftab[seqToUnseq[tmp]]++;\n  ll8[last]=seqToUnseq[tmp];\n  j=nextSym - 1;\n  for (; j > 3; j-=4) {\n    yy[j]=yy[j - 1];\n    yy[j - 1]=yy[j - 2];\n    yy[j - 2]=yy[j - 3];\n    yy[j - 3]=yy[j - 4];\n  }\n  for (; j > 0; j--) {\n    yy[j]=yy[j - 1];\n  }\n  yy[0]=tmp;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  continue;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 544,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 4995,
                        "startLineNumber": 527,
                        "startColumnNumber": 21,
                        "endLineNumber": 663,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (nextSym == EOB) {\n    break;\n  }\n  if (nextSym == RUNA || nextSym == RUNB) {\n    char ch;\n    int s=-1;\n    int N=1;\n    do {\n      if (nextSym == RUNA) {\n        s=s + (0 + 1) * N;\n      }\n else       if (nextSym == RUNB) {\n        s=s + (1 + 1) * N;\n      }\n      N=N * 2;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                if (thech == -1) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n    }\n while (nextSym == RUNA || nextSym == RUNB);\n    s++;\n    ch=seqToUnseq[yy[0]];\n    unzftab[ch]+=s;\n    while (s > 0) {\n      last++;\n      ll8[last]=ch;\n      s--;\n    }\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    continue;\n  }\n else {\n    char tmp;\n    last++;\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    tmp=yy[nextSym - 1];\n    unzftab[seqToUnseq[tmp]]++;\n    ll8[last]=seqToUnseq[tmp];\n    j=nextSym - 1;\n    for (; j > 3; j-=4) {\n      yy[j]=yy[j - 1];\n      yy[j - 1]=yy[j - 2];\n      yy[j - 2]=yy[j - 3];\n      yy[j - 3]=yy[j - 4];\n    }\n    for (; j > 0; j--) {\n      yy[j]=yy[j - 1];\n    }\n    yy[0]=tmp;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n    continue;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 551,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 5008,
                        "startLineNumber": 527,
                        "startColumnNumber": 8,
                        "endLineNumber": 663,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (true) {\n  if (nextSym == EOB) {\n    break;\n  }\n  if (nextSym == RUNA || nextSym == RUNB) {\n    char ch;\n    int s=-1;\n    int N=1;\n    do {\n      if (nextSym == RUNA) {\n        s=s + (0 + 1) * N;\n      }\n else       if (nextSym == RUNB) {\n        s=s + (1 + 1) * N;\n      }\n      N=N * 2;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                if (thech == -1) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n    }\n while (nextSym == RUNA || nextSym == RUNB);\n    s++;\n    ch=seqToUnseq[yy[0]];\n    unzftab[ch]+=s;\n    while (s > 0) {\n      last++;\n      ll8[last]=ch;\n      s--;\n    }\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    continue;\n  }\n else {\n    char tmp;\n    last++;\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    tmp=yy[nextSym - 1];\n    unzftab[seqToUnseq[tmp]]++;\n    ll8[last]=seqToUnseq[tmp];\n    j=nextSym - 1;\n    for (; j > 3; j-=4) {\n      yy[j]=yy[j - 1];\n      yy[j - 1]=yy[j - 2];\n      yy[j - 2]=yy[j - 3];\n      yy[j - 3]=yy[j - 4];\n    }\n    for (; j > 0; j--) {\n      yy[j]=yy[j - 1];\n    }\n    yy[0]=tmp;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n    continue;\n  }\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 553,
                    "astHeight": 20
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 7015,
                        "startLineNumber": 460,
                        "startColumnNumber": 43,
                        "endLineNumber": 664,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  char[] yy=new char[256];\n  int i, j, nextSym, limitLast;\n  int EOB, groupNo, groupPos;\n  limitLast=baseBlockSize * blockSize100k;\n  origPtr=bsGetIntVS(24);\n  recvDecodingTables();\n  EOB=nInUse + 1;\n  groupNo=-1;\n  groupPos=0;\n  for (i=0; i <= 255; i++) {\n    unzftab[i]=0;\n  }\n  for (i=0; i <= 255; i++) {\n    yy[i]=(char)i;\n  }\n  last=-1;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  while (true) {\n    if (nextSym == EOB) {\n      break;\n    }\n    if (nextSym == RUNA || nextSym == RUNB) {\n      char ch;\n      int s=-1;\n      int N=1;\n      do {\n        if (nextSym == RUNA) {\n          s=s + (0 + 1) * N;\n        }\n else         if (nextSym == RUNB) {\n          s=s + (1 + 1) * N;\n        }\n        N=N * 2;\n{\n          int zt, zn, zvec, zj;\n          if (groupPos == 0) {\n            groupNo++;\n            groupPos=G_SIZE;\n          }\n          groupPos--;\n          zt=selector[groupNo];\n          zn=minLens[zt];\n          zvec=bsR(zn);\n          while (zvec > limit[zt][zn]) {\n            zn++;\n{\n{\n                while (bsLive < 1) {\n                  int zzi;\n                  char thech=0;\n                  try {\n                    thech=(char)bsStream.read();\n                  }\n catch (                  IOException e) {\n                    compressedStreamEOF();\n                  }\n                  if (thech == -1) {\n                    compressedStreamEOF();\n                  }\n                  zzi=thech;\n                  bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                  bsLive+=8;\n                }\n              }\n              zj=(bsBuff >> (bsLive - 1)) & 1;\n              bsLive--;\n            }\n            zvec=(zvec << 1) | zj;\n          }\n          nextSym=perm[zt][zvec - base[zt][zn]];\n        }\n      }\n while (nextSym == RUNA || nextSym == RUNB);\n      s++;\n      ch=seqToUnseq[yy[0]];\n      unzftab[ch]+=s;\n      while (s > 0) {\n        last++;\n        ll8[last]=ch;\n        s--;\n      }\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      continue;\n    }\n else {\n      char tmp;\n      last++;\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      tmp=yy[nextSym - 1];\n      unzftab[seqToUnseq[tmp]]++;\n      ll8[last]=seqToUnseq[tmp];\n      j=nextSym - 1;\n      for (; j > 3; j-=4) {\n        yy[j]=yy[j - 1];\n        yy[j - 1]=yy[j - 2];\n        yy[j - 2]=yy[j - 3];\n        yy[j - 3]=yy[j - 4];\n      }\n      for (; j > 0; j--) {\n        yy[j]=yy[j - 1];\n      }\n      yy[0]=tmp;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n      continue;\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 810,
                    "astHeight": 21
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7054,
                        "startLineNumber": 460,
                        "startColumnNumber": 4,
                        "endLineNumber": 664,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void getAndMoveToFrontDecode(){\n  char[] yy=new char[256];\n  int i, j, nextSym, limitLast;\n  int EOB, groupNo, groupPos;\n  limitLast=baseBlockSize * blockSize100k;\n  origPtr=bsGetIntVS(24);\n  recvDecodingTables();\n  EOB=nInUse + 1;\n  groupNo=-1;\n  groupPos=0;\n  for (i=0; i <= 255; i++) {\n    unzftab[i]=0;\n  }\n  for (i=0; i <= 255; i++) {\n    yy[i]=(char)i;\n  }\n  last=-1;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  while (true) {\n    if (nextSym == EOB) {\n      break;\n    }\n    if (nextSym == RUNA || nextSym == RUNB) {\n      char ch;\n      int s=-1;\n      int N=1;\n      do {\n        if (nextSym == RUNA) {\n          s=s + (0 + 1) * N;\n        }\n else         if (nextSym == RUNB) {\n          s=s + (1 + 1) * N;\n        }\n        N=N * 2;\n{\n          int zt, zn, zvec, zj;\n          if (groupPos == 0) {\n            groupNo++;\n            groupPos=G_SIZE;\n          }\n          groupPos--;\n          zt=selector[groupNo];\n          zn=minLens[zt];\n          zvec=bsR(zn);\n          while (zvec > limit[zt][zn]) {\n            zn++;\n{\n{\n                while (bsLive < 1) {\n                  int zzi;\n                  char thech=0;\n                  try {\n                    thech=(char)bsStream.read();\n                  }\n catch (                  IOException e) {\n                    compressedStreamEOF();\n                  }\n                  if (thech == -1) {\n                    compressedStreamEOF();\n                  }\n                  zzi=thech;\n                  bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                  bsLive+=8;\n                }\n              }\n              zj=(bsBuff >> (bsLive - 1)) & 1;\n              bsLive--;\n            }\n            zvec=(zvec << 1) | zj;\n          }\n          nextSym=perm[zt][zvec - base[zt][zn]];\n        }\n      }\n while (nextSym == RUNA || nextSym == RUNB);\n      s++;\n      ch=seqToUnseq[yy[0]];\n      unzftab[ch]+=s;\n      while (s > 0) {\n        last++;\n        ll8[last]=ch;\n        s--;\n      }\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      continue;\n    }\n else {\n      char tmp;\n      last++;\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      tmp=yy[nextSym - 1];\n      unzftab[seqToUnseq[tmp]]++;\n      ll8[last]=seqToUnseq[tmp];\n      j=nextSym - 1;\n      for (; j > 3; j-=4) {\n        yy[j]=yy[j - 1];\n        yy[j - 1]=yy[j - 2];\n        yy[j - 2]=yy[j - 3];\n        yy[j - 3]=yy[j - 4];\n      }\n      for (; j > 0; j--) {\n        yy[j]=yy[j - 1];\n      }\n      yy[0]=tmp;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n      continue;\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 814,
                    "astHeight": 22
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 18,
                    "startLineNumber": 623,
                    "startColumnNumber": 20,
                    "endLineNumber": 623,
                    "endColumnNumber": 38
                },
                "nodeContext": "yy[j]=yy[j - 1];\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 10,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 641,
                "startColumnNumber": 48,
                "endLineNumber": 641,
                "endColumnNumber": 49
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
                    "nodePosition": {
                        "charLength": 10,
                        "startLineNumber": 641,
                        "startColumnNumber": 39,
                        "endLineNumber": 641,
                        "endColumnNumber": 49
                    },
                    "nodeContext": "bsLive < 1",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 601,
                        "startLineNumber": 641,
                        "startColumnNumber": 32,
                        "endLineNumber": 652,
                        "endColumnNumber": 33
                    },
                    "nodeContext": "while (bsLive < 1) {\n  int zzi;\n  char thech=0;\n  try {\n    thech=(char)bsStream.read();\n  }\n catch (  IOException e) {\n    compressedStreamEOF();\n  }\n  zzi=thech;\n  bsBuff=(bsBuff << 8) | (zzi & 0xff);\n  bsLive+=8;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 53,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 665,
                        "startLineNumber": 640,
                        "startColumnNumber": 28,
                        "endLineNumber": 653,
                        "endColumnNumber": 29
                    },
                    "nodeContext": "{\n  while (bsLive < 1) {\n    int zzi;\n    char thech=0;\n    try {\n      thech=(char)bsStream.read();\n    }\n catch (    IOException e) {\n      compressedStreamEOF();\n    }\n    zzi=thech;\n    bsBuff=(bsBuff << 8) | (zzi & 0xff);\n    bsLive+=8;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 54,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 822,
                        "startLineNumber": 639,
                        "startColumnNumber": 24,
                        "endLineNumber": 656,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "{\n{\n    while (bsLive < 1) {\n      int zzi;\n      char thech=0;\n      try {\n        thech=(char)bsStream.read();\n      }\n catch (      IOException e) {\n        compressedStreamEOF();\n      }\n      zzi=thech;\n      bsBuff=(bsBuff << 8) | (zzi & 0xff);\n      bsLive+=8;\n    }\n  }\n  zj=(bsBuff >> (bsLive - 1)) & 1;\n  bsLive--;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 70,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 949,
                        "startLineNumber": 637,
                        "startColumnNumber": 49,
                        "endLineNumber": 658,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  zn++;\n{\n{\n      while (bsLive < 1) {\n        int zzi;\n        char thech=0;\n        try {\n          thech=(char)bsStream.read();\n        }\n catch (        IOException e) {\n          compressedStreamEOF();\n        }\n        zzi=thech;\n        bsBuff=(bsBuff << 8) | (zzi & 0xff);\n        bsLive+=8;\n      }\n    }\n    zj=(bsBuff >> (bsLive - 1)) & 1;\n    bsLive--;\n  }\n  zvec=(zvec << 1) | zj;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 83,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 978,
                        "startLineNumber": 637,
                        "startColumnNumber": 20,
                        "endLineNumber": 658,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "while (zvec > limit[zt][zn]) {\n  zn++;\n{\n{\n      while (bsLive < 1) {\n        int zzi;\n        char thech=0;\n        try {\n          thech=(char)bsStream.read();\n        }\n catch (        IOException e) {\n          compressedStreamEOF();\n        }\n        zzi=thech;\n        bsBuff=(bsBuff << 8) | (zzi & 0xff);\n        bsLive+=8;\n      }\n    }\n    zj=(bsBuff >> (bsLive - 1)) & 1;\n    bsLive--;\n  }\n  zvec=(zvec << 1) | zj;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 91,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1412,
                        "startLineNumber": 627,
                        "startColumnNumber": 16,
                        "endLineNumber": 660,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  int zt, zn, zvec, zj;\n  if (groupPos == 0) {\n    groupNo++;\n    groupPos=G_SIZE;\n  }\n  groupPos--;\n  zt=selector[groupNo];\n  zn=minLens[zt];\n  zvec=bsR(zn);\n  while (zvec > limit[zt][zn]) {\n    zn++;\n{\n{\n        while (bsLive < 1) {\n          int zzi;\n          char thech=0;\n          try {\n            thech=(char)bsStream.read();\n          }\n catch (          IOException e) {\n            compressedStreamEOF();\n          }\n          zzi=thech;\n          bsBuff=(bsBuff << 8) | (zzi & 0xff);\n          bsLive+=8;\n        }\n      }\n      zj=(bsBuff >> (bsLive - 1)) & 1;\n      bsLive--;\n    }\n    zvec=(zvec << 1) | zj;\n  }\n  nextSym=perm[zt][zvec - base[zt][zn]];\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 149,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 2340,
                        "startLineNumber": 597,
                        "startColumnNumber": 19,
                        "endLineNumber": 662,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  char tmp;\n  last++;\n  if (last >= limitLast) {\n    blockOverrun();\n  }\n  tmp=yy[nextSym - 1];\n  unzftab[seqToUnseq[tmp]]++;\n  ll8[last]=seqToUnseq[tmp];\n  j=nextSym - 1;\n  for (; j > 3; j-=4) {\n    yy[j]=yy[j - 1];\n    yy[j - 1]=yy[j - 2];\n    yy[j - 2]=yy[j - 3];\n    yy[j - 3]=yy[j - 4];\n  }\n  for (; j > 0; j--) {\n    yy[j]=yy[j - 1];\n  }\n  yy[0]=tmp;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  continue;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 272,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4898,
                        "startLineNumber": 533,
                        "startColumnNumber": 12,
                        "endLineNumber": 662,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (nextSym == RUNA || nextSym == RUNB) {\n  char ch;\n  int s=-1;\n  int N=1;\n  do {\n    if (nextSym == RUNA) {\n      s=s + (0 + 1) * N;\n    }\n else     if (nextSym == RUNB) {\n      s=s + (1 + 1) * N;\n    }\n    N=N * 2;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              if (thech == -1) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n  }\n while (nextSym == RUNA || nextSym == RUNB);\n  s++;\n  ch=seqToUnseq[yy[0]];\n  unzftab[ch]+=s;\n  while (s > 0) {\n    last++;\n    ll8[last]=ch;\n    s--;\n  }\n  if (last >= limitLast) {\n    blockOverrun();\n  }\n  continue;\n}\n else {\n  char tmp;\n  last++;\n  if (last >= limitLast) {\n    blockOverrun();\n  }\n  tmp=yy[nextSym - 1];\n  unzftab[seqToUnseq[tmp]]++;\n  ll8[last]=seqToUnseq[tmp];\n  j=nextSym - 1;\n  for (; j > 3; j-=4) {\n    yy[j]=yy[j - 1];\n    yy[j - 1]=yy[j - 2];\n    yy[j - 2]=yy[j - 3];\n    yy[j - 3]=yy[j - 4];\n  }\n  for (; j > 0; j--) {\n    yy[j]=yy[j - 1];\n  }\n  yy[0]=tmp;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  continue;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 544,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 4995,
                        "startLineNumber": 527,
                        "startColumnNumber": 21,
                        "endLineNumber": 663,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (nextSym == EOB) {\n    break;\n  }\n  if (nextSym == RUNA || nextSym == RUNB) {\n    char ch;\n    int s=-1;\n    int N=1;\n    do {\n      if (nextSym == RUNA) {\n        s=s + (0 + 1) * N;\n      }\n else       if (nextSym == RUNB) {\n        s=s + (1 + 1) * N;\n      }\n      N=N * 2;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                if (thech == -1) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n    }\n while (nextSym == RUNA || nextSym == RUNB);\n    s++;\n    ch=seqToUnseq[yy[0]];\n    unzftab[ch]+=s;\n    while (s > 0) {\n      last++;\n      ll8[last]=ch;\n      s--;\n    }\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    continue;\n  }\n else {\n    char tmp;\n    last++;\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    tmp=yy[nextSym - 1];\n    unzftab[seqToUnseq[tmp]]++;\n    ll8[last]=seqToUnseq[tmp];\n    j=nextSym - 1;\n    for (; j > 3; j-=4) {\n      yy[j]=yy[j - 1];\n      yy[j - 1]=yy[j - 2];\n      yy[j - 2]=yy[j - 3];\n      yy[j - 3]=yy[j - 4];\n    }\n    for (; j > 0; j--) {\n      yy[j]=yy[j - 1];\n    }\n    yy[0]=tmp;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n    continue;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 551,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 5008,
                        "startLineNumber": 527,
                        "startColumnNumber": 8,
                        "endLineNumber": 663,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (true) {\n  if (nextSym == EOB) {\n    break;\n  }\n  if (nextSym == RUNA || nextSym == RUNB) {\n    char ch;\n    int s=-1;\n    int N=1;\n    do {\n      if (nextSym == RUNA) {\n        s=s + (0 + 1) * N;\n      }\n else       if (nextSym == RUNB) {\n        s=s + (1 + 1) * N;\n      }\n      N=N * 2;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                if (thech == -1) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n    }\n while (nextSym == RUNA || nextSym == RUNB);\n    s++;\n    ch=seqToUnseq[yy[0]];\n    unzftab[ch]+=s;\n    while (s > 0) {\n      last++;\n      ll8[last]=ch;\n      s--;\n    }\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    continue;\n  }\n else {\n    char tmp;\n    last++;\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    tmp=yy[nextSym - 1];\n    unzftab[seqToUnseq[tmp]]++;\n    ll8[last]=seqToUnseq[tmp];\n    j=nextSym - 1;\n    for (; j > 3; j-=4) {\n      yy[j]=yy[j - 1];\n      yy[j - 1]=yy[j - 2];\n      yy[j - 2]=yy[j - 3];\n      yy[j - 3]=yy[j - 4];\n    }\n    for (; j > 0; j--) {\n      yy[j]=yy[j - 1];\n    }\n    yy[0]=tmp;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n    continue;\n  }\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 553,
                    "astHeight": 20
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 7015,
                        "startLineNumber": 460,
                        "startColumnNumber": 43,
                        "endLineNumber": 664,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  char[] yy=new char[256];\n  int i, j, nextSym, limitLast;\n  int EOB, groupNo, groupPos;\n  limitLast=baseBlockSize * blockSize100k;\n  origPtr=bsGetIntVS(24);\n  recvDecodingTables();\n  EOB=nInUse + 1;\n  groupNo=-1;\n  groupPos=0;\n  for (i=0; i <= 255; i++) {\n    unzftab[i]=0;\n  }\n  for (i=0; i <= 255; i++) {\n    yy[i]=(char)i;\n  }\n  last=-1;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  while (true) {\n    if (nextSym == EOB) {\n      break;\n    }\n    if (nextSym == RUNA || nextSym == RUNB) {\n      char ch;\n      int s=-1;\n      int N=1;\n      do {\n        if (nextSym == RUNA) {\n          s=s + (0 + 1) * N;\n        }\n else         if (nextSym == RUNB) {\n          s=s + (1 + 1) * N;\n        }\n        N=N * 2;\n{\n          int zt, zn, zvec, zj;\n          if (groupPos == 0) {\n            groupNo++;\n            groupPos=G_SIZE;\n          }\n          groupPos--;\n          zt=selector[groupNo];\n          zn=minLens[zt];\n          zvec=bsR(zn);\n          while (zvec > limit[zt][zn]) {\n            zn++;\n{\n{\n                while (bsLive < 1) {\n                  int zzi;\n                  char thech=0;\n                  try {\n                    thech=(char)bsStream.read();\n                  }\n catch (                  IOException e) {\n                    compressedStreamEOF();\n                  }\n                  if (thech == -1) {\n                    compressedStreamEOF();\n                  }\n                  zzi=thech;\n                  bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                  bsLive+=8;\n                }\n              }\n              zj=(bsBuff >> (bsLive - 1)) & 1;\n              bsLive--;\n            }\n            zvec=(zvec << 1) | zj;\n          }\n          nextSym=perm[zt][zvec - base[zt][zn]];\n        }\n      }\n while (nextSym == RUNA || nextSym == RUNB);\n      s++;\n      ch=seqToUnseq[yy[0]];\n      unzftab[ch]+=s;\n      while (s > 0) {\n        last++;\n        ll8[last]=ch;\n        s--;\n      }\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      continue;\n    }\n else {\n      char tmp;\n      last++;\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      tmp=yy[nextSym - 1];\n      unzftab[seqToUnseq[tmp]]++;\n      ll8[last]=seqToUnseq[tmp];\n      j=nextSym - 1;\n      for (; j > 3; j-=4) {\n        yy[j]=yy[j - 1];\n        yy[j - 1]=yy[j - 2];\n        yy[j - 2]=yy[j - 3];\n        yy[j - 3]=yy[j - 4];\n      }\n      for (; j > 0; j--) {\n        yy[j]=yy[j - 1];\n      }\n      yy[0]=tmp;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n      continue;\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 810,
                    "astHeight": 21
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7054,
                        "startLineNumber": 460,
                        "startColumnNumber": 4,
                        "endLineNumber": 664,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void getAndMoveToFrontDecode(){\n  char[] yy=new char[256];\n  int i, j, nextSym, limitLast;\n  int EOB, groupNo, groupPos;\n  limitLast=baseBlockSize * blockSize100k;\n  origPtr=bsGetIntVS(24);\n  recvDecodingTables();\n  EOB=nInUse + 1;\n  groupNo=-1;\n  groupPos=0;\n  for (i=0; i <= 255; i++) {\n    unzftab[i]=0;\n  }\n  for (i=0; i <= 255; i++) {\n    yy[i]=(char)i;\n  }\n  last=-1;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  while (true) {\n    if (nextSym == EOB) {\n      break;\n    }\n    if (nextSym == RUNA || nextSym == RUNB) {\n      char ch;\n      int s=-1;\n      int N=1;\n      do {\n        if (nextSym == RUNA) {\n          s=s + (0 + 1) * N;\n        }\n else         if (nextSym == RUNB) {\n          s=s + (1 + 1) * N;\n        }\n        N=N * 2;\n{\n          int zt, zn, zvec, zj;\n          if (groupPos == 0) {\n            groupNo++;\n            groupPos=G_SIZE;\n          }\n          groupPos--;\n          zt=selector[groupNo];\n          zn=minLens[zt];\n          zvec=bsR(zn);\n          while (zvec > limit[zt][zn]) {\n            zn++;\n{\n{\n                while (bsLive < 1) {\n                  int zzi;\n                  char thech=0;\n                  try {\n                    thech=(char)bsStream.read();\n                  }\n catch (                  IOException e) {\n                    compressedStreamEOF();\n                  }\n                  if (thech == -1) {\n                    compressedStreamEOF();\n                  }\n                  zzi=thech;\n                  bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                  bsLive+=8;\n                }\n              }\n              zj=(bsBuff >> (bsLive - 1)) & 1;\n              bsLive--;\n            }\n            zvec=(zvec << 1) | zj;\n          }\n          nextSym=perm[zt][zvec - base[zt][zn]];\n        }\n      }\n while (nextSym == RUNA || nextSym == RUNB);\n      s++;\n      ch=seqToUnseq[yy[0]];\n      unzftab[ch]+=s;\n      while (s > 0) {\n        last++;\n        ll8[last]=ch;\n        s--;\n      }\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      continue;\n    }\n else {\n      char tmp;\n      last++;\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      tmp=yy[nextSym - 1];\n      unzftab[seqToUnseq[tmp]]++;\n      ll8[last]=seqToUnseq[tmp];\n      j=nextSym - 1;\n      for (; j > 3; j-=4) {\n        yy[j]=yy[j - 1];\n        yy[j - 1]=yy[j - 2];\n        yy[j - 2]=yy[j - 3];\n        yy[j - 3]=yy[j - 4];\n      }\n      for (; j > 0; j--) {\n        yy[j]=yy[j - 1];\n      }\n      yy[0]=tmp;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n      continue;\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 814,
                    "astHeight": 22
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
                "nodePosition": {
                    "charLength": 10,
                    "startLineNumber": 641,
                    "startColumnNumber": 39,
                    "endLineNumber": 641,
                    "endColumnNumber": 49
                },
                "nodeContext": "bsLive < 1",
                "nodeType": "InfixExpression",
                "astNodeNumber": 3,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 654,
                "startColumnNumber": 54,
                "endLineNumber": 654,
                "endColumnNumber": 55
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
                    "nodePosition": {
                        "charLength": 10,
                        "startLineNumber": 654,
                        "startColumnNumber": 45,
                        "endLineNumber": 654,
                        "endColumnNumber": 55
                    },
                    "nodeContext": "bsLive - 1",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 12,
                        "startLineNumber": 654,
                        "startColumnNumber": 44,
                        "endLineNumber": 654,
                        "endColumnNumber": 56
                    },
                    "nodeContext": "(bsLive - 1)",
                    "nodeType": "ParenthesizedExpression",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
                    "nodePosition": {
                        "charLength": 22,
                        "startLineNumber": 654,
                        "startColumnNumber": 34,
                        "endLineNumber": 654,
                        "endColumnNumber": 56
                    },
                    "nodeContext": "bsBuff >> (bsLive - 1)",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 6,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 24,
                        "startLineNumber": 654,
                        "startColumnNumber": 33,
                        "endLineNumber": 654,
                        "endColumnNumber": 57
                    },
                    "nodeContext": "(bsBuff >> (bsLive - 1))",
                    "nodeType": "ParenthesizedExpression",
                    "astNodeNumber": 7,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 28,
                        "startLineNumber": 654,
                        "startColumnNumber": 33,
                        "endLineNumber": 654,
                        "endColumnNumber": 61
                    },
                    "nodeContext": "(bsBuff >> (bsLive - 1)) & 1",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 9,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 33,
                        "startLineNumber": 654,
                        "startColumnNumber": 28,
                        "endLineNumber": 654,
                        "endColumnNumber": 61
                    },
                    "nodeContext": "zj=(bsBuff >> (bsLive - 1)) & 1",
                    "nodeType": "Assignment",
                    "astNodeNumber": 11,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 34,
                        "startLineNumber": 654,
                        "startColumnNumber": 28,
                        "endLineNumber": 654,
                        "endColumnNumber": 62
                    },
                    "nodeContext": "zj=(bsBuff >> (bsLive - 1)) & 1;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 12,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 822,
                        "startLineNumber": 639,
                        "startColumnNumber": 24,
                        "endLineNumber": 656,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "{\n{\n    while (bsLive < 1) {\n      int zzi;\n      char thech=0;\n      try {\n        thech=(char)bsStream.read();\n      }\n catch (      IOException e) {\n        compressedStreamEOF();\n      }\n      zzi=thech;\n      bsBuff=(bsBuff << 8) | (zzi & 0xff);\n      bsLive+=8;\n    }\n  }\n  zj=(bsBuff >> (bsLive - 1)) & 1;\n  bsLive--;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 70,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 949,
                        "startLineNumber": 637,
                        "startColumnNumber": 49,
                        "endLineNumber": 658,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  zn++;\n{\n{\n      while (bsLive < 1) {\n        int zzi;\n        char thech=0;\n        try {\n          thech=(char)bsStream.read();\n        }\n catch (        IOException e) {\n          compressedStreamEOF();\n        }\n        zzi=thech;\n        bsBuff=(bsBuff << 8) | (zzi & 0xff);\n        bsLive+=8;\n      }\n    }\n    zj=(bsBuff >> (bsLive - 1)) & 1;\n    bsLive--;\n  }\n  zvec=(zvec << 1) | zj;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 83,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 978,
                        "startLineNumber": 637,
                        "startColumnNumber": 20,
                        "endLineNumber": 658,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "while (zvec > limit[zt][zn]) {\n  zn++;\n{\n{\n      while (bsLive < 1) {\n        int zzi;\n        char thech=0;\n        try {\n          thech=(char)bsStream.read();\n        }\n catch (        IOException e) {\n          compressedStreamEOF();\n        }\n        zzi=thech;\n        bsBuff=(bsBuff << 8) | (zzi & 0xff);\n        bsLive+=8;\n      }\n    }\n    zj=(bsBuff >> (bsLive - 1)) & 1;\n    bsLive--;\n  }\n  zvec=(zvec << 1) | zj;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 91,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1412,
                        "startLineNumber": 627,
                        "startColumnNumber": 16,
                        "endLineNumber": 660,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  int zt, zn, zvec, zj;\n  if (groupPos == 0) {\n    groupNo++;\n    groupPos=G_SIZE;\n  }\n  groupPos--;\n  zt=selector[groupNo];\n  zn=minLens[zt];\n  zvec=bsR(zn);\n  while (zvec > limit[zt][zn]) {\n    zn++;\n{\n{\n        while (bsLive < 1) {\n          int zzi;\n          char thech=0;\n          try {\n            thech=(char)bsStream.read();\n          }\n catch (          IOException e) {\n            compressedStreamEOF();\n          }\n          zzi=thech;\n          bsBuff=(bsBuff << 8) | (zzi & 0xff);\n          bsLive+=8;\n        }\n      }\n      zj=(bsBuff >> (bsLive - 1)) & 1;\n      bsLive--;\n    }\n    zvec=(zvec << 1) | zj;\n  }\n  nextSym=perm[zt][zvec - base[zt][zn]];\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 149,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 2340,
                        "startLineNumber": 597,
                        "startColumnNumber": 19,
                        "endLineNumber": 662,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  char tmp;\n  last++;\n  if (last >= limitLast) {\n    blockOverrun();\n  }\n  tmp=yy[nextSym - 1];\n  unzftab[seqToUnseq[tmp]]++;\n  ll8[last]=seqToUnseq[tmp];\n  j=nextSym - 1;\n  for (; j > 3; j-=4) {\n    yy[j]=yy[j - 1];\n    yy[j - 1]=yy[j - 2];\n    yy[j - 2]=yy[j - 3];\n    yy[j - 3]=yy[j - 4];\n  }\n  for (; j > 0; j--) {\n    yy[j]=yy[j - 1];\n  }\n  yy[0]=tmp;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  continue;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 272,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4898,
                        "startLineNumber": 533,
                        "startColumnNumber": 12,
                        "endLineNumber": 662,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (nextSym == RUNA || nextSym == RUNB) {\n  char ch;\n  int s=-1;\n  int N=1;\n  do {\n    if (nextSym == RUNA) {\n      s=s + (0 + 1) * N;\n    }\n else     if (nextSym == RUNB) {\n      s=s + (1 + 1) * N;\n    }\n    N=N * 2;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              if (thech == -1) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n  }\n while (nextSym == RUNA || nextSym == RUNB);\n  s++;\n  ch=seqToUnseq[yy[0]];\n  unzftab[ch]+=s;\n  while (s > 0) {\n    last++;\n    ll8[last]=ch;\n    s--;\n  }\n  if (last >= limitLast) {\n    blockOverrun();\n  }\n  continue;\n}\n else {\n  char tmp;\n  last++;\n  if (last >= limitLast) {\n    blockOverrun();\n  }\n  tmp=yy[nextSym - 1];\n  unzftab[seqToUnseq[tmp]]++;\n  ll8[last]=seqToUnseq[tmp];\n  j=nextSym - 1;\n  for (; j > 3; j-=4) {\n    yy[j]=yy[j - 1];\n    yy[j - 1]=yy[j - 2];\n    yy[j - 2]=yy[j - 3];\n    yy[j - 3]=yy[j - 4];\n  }\n  for (; j > 0; j--) {\n    yy[j]=yy[j - 1];\n  }\n  yy[0]=tmp;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  continue;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 544,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 4995,
                        "startLineNumber": 527,
                        "startColumnNumber": 21,
                        "endLineNumber": 663,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (nextSym == EOB) {\n    break;\n  }\n  if (nextSym == RUNA || nextSym == RUNB) {\n    char ch;\n    int s=-1;\n    int N=1;\n    do {\n      if (nextSym == RUNA) {\n        s=s + (0 + 1) * N;\n      }\n else       if (nextSym == RUNB) {\n        s=s + (1 + 1) * N;\n      }\n      N=N * 2;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                if (thech == -1) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n    }\n while (nextSym == RUNA || nextSym == RUNB);\n    s++;\n    ch=seqToUnseq[yy[0]];\n    unzftab[ch]+=s;\n    while (s > 0) {\n      last++;\n      ll8[last]=ch;\n      s--;\n    }\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    continue;\n  }\n else {\n    char tmp;\n    last++;\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    tmp=yy[nextSym - 1];\n    unzftab[seqToUnseq[tmp]]++;\n    ll8[last]=seqToUnseq[tmp];\n    j=nextSym - 1;\n    for (; j > 3; j-=4) {\n      yy[j]=yy[j - 1];\n      yy[j - 1]=yy[j - 2];\n      yy[j - 2]=yy[j - 3];\n      yy[j - 3]=yy[j - 4];\n    }\n    for (; j > 0; j--) {\n      yy[j]=yy[j - 1];\n    }\n    yy[0]=tmp;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n    continue;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 551,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 5008,
                        "startLineNumber": 527,
                        "startColumnNumber": 8,
                        "endLineNumber": 663,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (true) {\n  if (nextSym == EOB) {\n    break;\n  }\n  if (nextSym == RUNA || nextSym == RUNB) {\n    char ch;\n    int s=-1;\n    int N=1;\n    do {\n      if (nextSym == RUNA) {\n        s=s + (0 + 1) * N;\n      }\n else       if (nextSym == RUNB) {\n        s=s + (1 + 1) * N;\n      }\n      N=N * 2;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                if (thech == -1) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n    }\n while (nextSym == RUNA || nextSym == RUNB);\n    s++;\n    ch=seqToUnseq[yy[0]];\n    unzftab[ch]+=s;\n    while (s > 0) {\n      last++;\n      ll8[last]=ch;\n      s--;\n    }\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    continue;\n  }\n else {\n    char tmp;\n    last++;\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    tmp=yy[nextSym - 1];\n    unzftab[seqToUnseq[tmp]]++;\n    ll8[last]=seqToUnseq[tmp];\n    j=nextSym - 1;\n    for (; j > 3; j-=4) {\n      yy[j]=yy[j - 1];\n      yy[j - 1]=yy[j - 2];\n      yy[j - 2]=yy[j - 3];\n      yy[j - 3]=yy[j - 4];\n    }\n    for (; j > 0; j--) {\n      yy[j]=yy[j - 1];\n    }\n    yy[0]=tmp;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n    continue;\n  }\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 553,
                    "astHeight": 20
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 7015,
                        "startLineNumber": 460,
                        "startColumnNumber": 43,
                        "endLineNumber": 664,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  char[] yy=new char[256];\n  int i, j, nextSym, limitLast;\n  int EOB, groupNo, groupPos;\n  limitLast=baseBlockSize * blockSize100k;\n  origPtr=bsGetIntVS(24);\n  recvDecodingTables();\n  EOB=nInUse + 1;\n  groupNo=-1;\n  groupPos=0;\n  for (i=0; i <= 255; i++) {\n    unzftab[i]=0;\n  }\n  for (i=0; i <= 255; i++) {\n    yy[i]=(char)i;\n  }\n  last=-1;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  while (true) {\n    if (nextSym == EOB) {\n      break;\n    }\n    if (nextSym == RUNA || nextSym == RUNB) {\n      char ch;\n      int s=-1;\n      int N=1;\n      do {\n        if (nextSym == RUNA) {\n          s=s + (0 + 1) * N;\n        }\n else         if (nextSym == RUNB) {\n          s=s + (1 + 1) * N;\n        }\n        N=N * 2;\n{\n          int zt, zn, zvec, zj;\n          if (groupPos == 0) {\n            groupNo++;\n            groupPos=G_SIZE;\n          }\n          groupPos--;\n          zt=selector[groupNo];\n          zn=minLens[zt];\n          zvec=bsR(zn);\n          while (zvec > limit[zt][zn]) {\n            zn++;\n{\n{\n                while (bsLive < 1) {\n                  int zzi;\n                  char thech=0;\n                  try {\n                    thech=(char)bsStream.read();\n                  }\n catch (                  IOException e) {\n                    compressedStreamEOF();\n                  }\n                  if (thech == -1) {\n                    compressedStreamEOF();\n                  }\n                  zzi=thech;\n                  bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                  bsLive+=8;\n                }\n              }\n              zj=(bsBuff >> (bsLive - 1)) & 1;\n              bsLive--;\n            }\n            zvec=(zvec << 1) | zj;\n          }\n          nextSym=perm[zt][zvec - base[zt][zn]];\n        }\n      }\n while (nextSym == RUNA || nextSym == RUNB);\n      s++;\n      ch=seqToUnseq[yy[0]];\n      unzftab[ch]+=s;\n      while (s > 0) {\n        last++;\n        ll8[last]=ch;\n        s--;\n      }\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      continue;\n    }\n else {\n      char tmp;\n      last++;\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      tmp=yy[nextSym - 1];\n      unzftab[seqToUnseq[tmp]]++;\n      ll8[last]=seqToUnseq[tmp];\n      j=nextSym - 1;\n      for (; j > 3; j-=4) {\n        yy[j]=yy[j - 1];\n        yy[j - 1]=yy[j - 2];\n        yy[j - 2]=yy[j - 3];\n        yy[j - 3]=yy[j - 4];\n      }\n      for (; j > 0; j--) {\n        yy[j]=yy[j - 1];\n      }\n      yy[0]=tmp;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n      continue;\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 810,
                    "astHeight": 21
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7054,
                        "startLineNumber": 460,
                        "startColumnNumber": 4,
                        "endLineNumber": 664,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void getAndMoveToFrontDecode(){\n  char[] yy=new char[256];\n  int i, j, nextSym, limitLast;\n  int EOB, groupNo, groupPos;\n  limitLast=baseBlockSize * blockSize100k;\n  origPtr=bsGetIntVS(24);\n  recvDecodingTables();\n  EOB=nInUse + 1;\n  groupNo=-1;\n  groupPos=0;\n  for (i=0; i <= 255; i++) {\n    unzftab[i]=0;\n  }\n  for (i=0; i <= 255; i++) {\n    yy[i]=(char)i;\n  }\n  last=-1;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  while (true) {\n    if (nextSym == EOB) {\n      break;\n    }\n    if (nextSym == RUNA || nextSym == RUNB) {\n      char ch;\n      int s=-1;\n      int N=1;\n      do {\n        if (nextSym == RUNA) {\n          s=s + (0 + 1) * N;\n        }\n else         if (nextSym == RUNB) {\n          s=s + (1 + 1) * N;\n        }\n        N=N * 2;\n{\n          int zt, zn, zvec, zj;\n          if (groupPos == 0) {\n            groupNo++;\n            groupPos=G_SIZE;\n          }\n          groupPos--;\n          zt=selector[groupNo];\n          zn=minLens[zt];\n          zvec=bsR(zn);\n          while (zvec > limit[zt][zn]) {\n            zn++;\n{\n{\n                while (bsLive < 1) {\n                  int zzi;\n                  char thech=0;\n                  try {\n                    thech=(char)bsStream.read();\n                  }\n catch (                  IOException e) {\n                    compressedStreamEOF();\n                  }\n                  if (thech == -1) {\n                    compressedStreamEOF();\n                  }\n                  zzi=thech;\n                  bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                  bsLive+=8;\n                }\n              }\n              zj=(bsBuff >> (bsLive - 1)) & 1;\n              bsLive--;\n            }\n            zvec=(zvec << 1) | zj;\n          }\n          nextSym=perm[zt][zvec - base[zt][zn]];\n        }\n      }\n while (nextSym == RUNA || nextSym == RUNB);\n      s++;\n      ch=seqToUnseq[yy[0]];\n      unzftab[ch]+=s;\n      while (s > 0) {\n        last++;\n        ll8[last]=ch;\n        s--;\n      }\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      continue;\n    }\n else {\n      char tmp;\n      last++;\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      tmp=yy[nextSym - 1];\n      unzftab[seqToUnseq[tmp]]++;\n      ll8[last]=seqToUnseq[tmp];\n      j=nextSym - 1;\n      for (; j > 3; j-=4) {\n        yy[j]=yy[j - 1];\n        yy[j - 1]=yy[j - 2];\n        yy[j - 2]=yy[j - 3];\n        yy[j - 3]=yy[j - 4];\n      }\n      for (; j > 0; j--) {\n        yy[j]=yy[j - 1];\n      }\n      yy[0]=tmp;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n      continue;\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 814,
                    "astHeight": 22
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 34,
                    "startLineNumber": 654,
                    "startColumnNumber": 28,
                    "endLineNumber": 654,
                    "endColumnNumber": 62
                },
                "nodeContext": "zj=(bsBuff >> (bsLive - 1)) & 1;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 12,
                "astHeight": 8
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 654,
                "startColumnNumber": 60,
                "endLineNumber": 654,
                "endColumnNumber": 61
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 28,
                        "startLineNumber": 654,
                        "startColumnNumber": 33,
                        "endLineNumber": 654,
                        "endColumnNumber": 61
                    },
                    "nodeContext": "(bsBuff >> (bsLive - 1)) & 1",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 9,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 33,
                        "startLineNumber": 654,
                        "startColumnNumber": 28,
                        "endLineNumber": 654,
                        "endColumnNumber": 61
                    },
                    "nodeContext": "zj=(bsBuff >> (bsLive - 1)) & 1",
                    "nodeType": "Assignment",
                    "astNodeNumber": 11,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 34,
                        "startLineNumber": 654,
                        "startColumnNumber": 28,
                        "endLineNumber": 654,
                        "endColumnNumber": 62
                    },
                    "nodeContext": "zj=(bsBuff >> (bsLive - 1)) & 1;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 12,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 822,
                        "startLineNumber": 639,
                        "startColumnNumber": 24,
                        "endLineNumber": 656,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "{\n{\n    while (bsLive < 1) {\n      int zzi;\n      char thech=0;\n      try {\n        thech=(char)bsStream.read();\n      }\n catch (      IOException e) {\n        compressedStreamEOF();\n      }\n      zzi=thech;\n      bsBuff=(bsBuff << 8) | (zzi & 0xff);\n      bsLive+=8;\n    }\n  }\n  zj=(bsBuff >> (bsLive - 1)) & 1;\n  bsLive--;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 70,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 949,
                        "startLineNumber": 637,
                        "startColumnNumber": 49,
                        "endLineNumber": 658,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  zn++;\n{\n{\n      while (bsLive < 1) {\n        int zzi;\n        char thech=0;\n        try {\n          thech=(char)bsStream.read();\n        }\n catch (        IOException e) {\n          compressedStreamEOF();\n        }\n        zzi=thech;\n        bsBuff=(bsBuff << 8) | (zzi & 0xff);\n        bsLive+=8;\n      }\n    }\n    zj=(bsBuff >> (bsLive - 1)) & 1;\n    bsLive--;\n  }\n  zvec=(zvec << 1) | zj;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 83,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 978,
                        "startLineNumber": 637,
                        "startColumnNumber": 20,
                        "endLineNumber": 658,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "while (zvec > limit[zt][zn]) {\n  zn++;\n{\n{\n      while (bsLive < 1) {\n        int zzi;\n        char thech=0;\n        try {\n          thech=(char)bsStream.read();\n        }\n catch (        IOException e) {\n          compressedStreamEOF();\n        }\n        zzi=thech;\n        bsBuff=(bsBuff << 8) | (zzi & 0xff);\n        bsLive+=8;\n      }\n    }\n    zj=(bsBuff >> (bsLive - 1)) & 1;\n    bsLive--;\n  }\n  zvec=(zvec << 1) | zj;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 91,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1412,
                        "startLineNumber": 627,
                        "startColumnNumber": 16,
                        "endLineNumber": 660,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  int zt, zn, zvec, zj;\n  if (groupPos == 0) {\n    groupNo++;\n    groupPos=G_SIZE;\n  }\n  groupPos--;\n  zt=selector[groupNo];\n  zn=minLens[zt];\n  zvec=bsR(zn);\n  while (zvec > limit[zt][zn]) {\n    zn++;\n{\n{\n        while (bsLive < 1) {\n          int zzi;\n          char thech=0;\n          try {\n            thech=(char)bsStream.read();\n          }\n catch (          IOException e) {\n            compressedStreamEOF();\n          }\n          zzi=thech;\n          bsBuff=(bsBuff << 8) | (zzi & 0xff);\n          bsLive+=8;\n        }\n      }\n      zj=(bsBuff >> (bsLive - 1)) & 1;\n      bsLive--;\n    }\n    zvec=(zvec << 1) | zj;\n  }\n  nextSym=perm[zt][zvec - base[zt][zn]];\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 149,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 2340,
                        "startLineNumber": 597,
                        "startColumnNumber": 19,
                        "endLineNumber": 662,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  char tmp;\n  last++;\n  if (last >= limitLast) {\n    blockOverrun();\n  }\n  tmp=yy[nextSym - 1];\n  unzftab[seqToUnseq[tmp]]++;\n  ll8[last]=seqToUnseq[tmp];\n  j=nextSym - 1;\n  for (; j > 3; j-=4) {\n    yy[j]=yy[j - 1];\n    yy[j - 1]=yy[j - 2];\n    yy[j - 2]=yy[j - 3];\n    yy[j - 3]=yy[j - 4];\n  }\n  for (; j > 0; j--) {\n    yy[j]=yy[j - 1];\n  }\n  yy[0]=tmp;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  continue;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 272,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4898,
                        "startLineNumber": 533,
                        "startColumnNumber": 12,
                        "endLineNumber": 662,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (nextSym == RUNA || nextSym == RUNB) {\n  char ch;\n  int s=-1;\n  int N=1;\n  do {\n    if (nextSym == RUNA) {\n      s=s + (0 + 1) * N;\n    }\n else     if (nextSym == RUNB) {\n      s=s + (1 + 1) * N;\n    }\n    N=N * 2;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              if (thech == -1) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n  }\n while (nextSym == RUNA || nextSym == RUNB);\n  s++;\n  ch=seqToUnseq[yy[0]];\n  unzftab[ch]+=s;\n  while (s > 0) {\n    last++;\n    ll8[last]=ch;\n    s--;\n  }\n  if (last >= limitLast) {\n    blockOverrun();\n  }\n  continue;\n}\n else {\n  char tmp;\n  last++;\n  if (last >= limitLast) {\n    blockOverrun();\n  }\n  tmp=yy[nextSym - 1];\n  unzftab[seqToUnseq[tmp]]++;\n  ll8[last]=seqToUnseq[tmp];\n  j=nextSym - 1;\n  for (; j > 3; j-=4) {\n    yy[j]=yy[j - 1];\n    yy[j - 1]=yy[j - 2];\n    yy[j - 2]=yy[j - 3];\n    yy[j - 3]=yy[j - 4];\n  }\n  for (; j > 0; j--) {\n    yy[j]=yy[j - 1];\n  }\n  yy[0]=tmp;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  continue;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 544,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 4995,
                        "startLineNumber": 527,
                        "startColumnNumber": 21,
                        "endLineNumber": 663,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (nextSym == EOB) {\n    break;\n  }\n  if (nextSym == RUNA || nextSym == RUNB) {\n    char ch;\n    int s=-1;\n    int N=1;\n    do {\n      if (nextSym == RUNA) {\n        s=s + (0 + 1) * N;\n      }\n else       if (nextSym == RUNB) {\n        s=s + (1 + 1) * N;\n      }\n      N=N * 2;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                if (thech == -1) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n    }\n while (nextSym == RUNA || nextSym == RUNB);\n    s++;\n    ch=seqToUnseq[yy[0]];\n    unzftab[ch]+=s;\n    while (s > 0) {\n      last++;\n      ll8[last]=ch;\n      s--;\n    }\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    continue;\n  }\n else {\n    char tmp;\n    last++;\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    tmp=yy[nextSym - 1];\n    unzftab[seqToUnseq[tmp]]++;\n    ll8[last]=seqToUnseq[tmp];\n    j=nextSym - 1;\n    for (; j > 3; j-=4) {\n      yy[j]=yy[j - 1];\n      yy[j - 1]=yy[j - 2];\n      yy[j - 2]=yy[j - 3];\n      yy[j - 3]=yy[j - 4];\n    }\n    for (; j > 0; j--) {\n      yy[j]=yy[j - 1];\n    }\n    yy[0]=tmp;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n    continue;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 551,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 5008,
                        "startLineNumber": 527,
                        "startColumnNumber": 8,
                        "endLineNumber": 663,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (true) {\n  if (nextSym == EOB) {\n    break;\n  }\n  if (nextSym == RUNA || nextSym == RUNB) {\n    char ch;\n    int s=-1;\n    int N=1;\n    do {\n      if (nextSym == RUNA) {\n        s=s + (0 + 1) * N;\n      }\n else       if (nextSym == RUNB) {\n        s=s + (1 + 1) * N;\n      }\n      N=N * 2;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                if (thech == -1) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n    }\n while (nextSym == RUNA || nextSym == RUNB);\n    s++;\n    ch=seqToUnseq[yy[0]];\n    unzftab[ch]+=s;\n    while (s > 0) {\n      last++;\n      ll8[last]=ch;\n      s--;\n    }\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    continue;\n  }\n else {\n    char tmp;\n    last++;\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    tmp=yy[nextSym - 1];\n    unzftab[seqToUnseq[tmp]]++;\n    ll8[last]=seqToUnseq[tmp];\n    j=nextSym - 1;\n    for (; j > 3; j-=4) {\n      yy[j]=yy[j - 1];\n      yy[j - 1]=yy[j - 2];\n      yy[j - 2]=yy[j - 3];\n      yy[j - 3]=yy[j - 4];\n    }\n    for (; j > 0; j--) {\n      yy[j]=yy[j - 1];\n    }\n    yy[0]=tmp;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n    continue;\n  }\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 553,
                    "astHeight": 20
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 7015,
                        "startLineNumber": 460,
                        "startColumnNumber": 43,
                        "endLineNumber": 664,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  char[] yy=new char[256];\n  int i, j, nextSym, limitLast;\n  int EOB, groupNo, groupPos;\n  limitLast=baseBlockSize * blockSize100k;\n  origPtr=bsGetIntVS(24);\n  recvDecodingTables();\n  EOB=nInUse + 1;\n  groupNo=-1;\n  groupPos=0;\n  for (i=0; i <= 255; i++) {\n    unzftab[i]=0;\n  }\n  for (i=0; i <= 255; i++) {\n    yy[i]=(char)i;\n  }\n  last=-1;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  while (true) {\n    if (nextSym == EOB) {\n      break;\n    }\n    if (nextSym == RUNA || nextSym == RUNB) {\n      char ch;\n      int s=-1;\n      int N=1;\n      do {\n        if (nextSym == RUNA) {\n          s=s + (0 + 1) * N;\n        }\n else         if (nextSym == RUNB) {\n          s=s + (1 + 1) * N;\n        }\n        N=N * 2;\n{\n          int zt, zn, zvec, zj;\n          if (groupPos == 0) {\n            groupNo++;\n            groupPos=G_SIZE;\n          }\n          groupPos--;\n          zt=selector[groupNo];\n          zn=minLens[zt];\n          zvec=bsR(zn);\n          while (zvec > limit[zt][zn]) {\n            zn++;\n{\n{\n                while (bsLive < 1) {\n                  int zzi;\n                  char thech=0;\n                  try {\n                    thech=(char)bsStream.read();\n                  }\n catch (                  IOException e) {\n                    compressedStreamEOF();\n                  }\n                  if (thech == -1) {\n                    compressedStreamEOF();\n                  }\n                  zzi=thech;\n                  bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                  bsLive+=8;\n                }\n              }\n              zj=(bsBuff >> (bsLive - 1)) & 1;\n              bsLive--;\n            }\n            zvec=(zvec << 1) | zj;\n          }\n          nextSym=perm[zt][zvec - base[zt][zn]];\n        }\n      }\n while (nextSym == RUNA || nextSym == RUNB);\n      s++;\n      ch=seqToUnseq[yy[0]];\n      unzftab[ch]+=s;\n      while (s > 0) {\n        last++;\n        ll8[last]=ch;\n        s--;\n      }\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      continue;\n    }\n else {\n      char tmp;\n      last++;\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      tmp=yy[nextSym - 1];\n      unzftab[seqToUnseq[tmp]]++;\n      ll8[last]=seqToUnseq[tmp];\n      j=nextSym - 1;\n      for (; j > 3; j-=4) {\n        yy[j]=yy[j - 1];\n        yy[j - 1]=yy[j - 2];\n        yy[j - 2]=yy[j - 3];\n        yy[j - 3]=yy[j - 4];\n      }\n      for (; j > 0; j--) {\n        yy[j]=yy[j - 1];\n      }\n      yy[0]=tmp;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n      continue;\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 810,
                    "astHeight": 21
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7054,
                        "startLineNumber": 460,
                        "startColumnNumber": 4,
                        "endLineNumber": 664,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void getAndMoveToFrontDecode(){\n  char[] yy=new char[256];\n  int i, j, nextSym, limitLast;\n  int EOB, groupNo, groupPos;\n  limitLast=baseBlockSize * blockSize100k;\n  origPtr=bsGetIntVS(24);\n  recvDecodingTables();\n  EOB=nInUse + 1;\n  groupNo=-1;\n  groupPos=0;\n  for (i=0; i <= 255; i++) {\n    unzftab[i]=0;\n  }\n  for (i=0; i <= 255; i++) {\n    yy[i]=(char)i;\n  }\n  last=-1;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  while (true) {\n    if (nextSym == EOB) {\n      break;\n    }\n    if (nextSym == RUNA || nextSym == RUNB) {\n      char ch;\n      int s=-1;\n      int N=1;\n      do {\n        if (nextSym == RUNA) {\n          s=s + (0 + 1) * N;\n        }\n else         if (nextSym == RUNB) {\n          s=s + (1 + 1) * N;\n        }\n        N=N * 2;\n{\n          int zt, zn, zvec, zj;\n          if (groupPos == 0) {\n            groupNo++;\n            groupPos=G_SIZE;\n          }\n          groupPos--;\n          zt=selector[groupNo];\n          zn=minLens[zt];\n          zvec=bsR(zn);\n          while (zvec > limit[zt][zn]) {\n            zn++;\n{\n{\n                while (bsLive < 1) {\n                  int zzi;\n                  char thech=0;\n                  try {\n                    thech=(char)bsStream.read();\n                  }\n catch (                  IOException e) {\n                    compressedStreamEOF();\n                  }\n                  if (thech == -1) {\n                    compressedStreamEOF();\n                  }\n                  zzi=thech;\n                  bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                  bsLive+=8;\n                }\n              }\n              zj=(bsBuff >> (bsLive - 1)) & 1;\n              bsLive--;\n            }\n            zvec=(zvec << 1) | zj;\n          }\n          nextSym=perm[zt][zvec - base[zt][zn]];\n        }\n      }\n while (nextSym == RUNA || nextSym == RUNB);\n      s++;\n      ch=seqToUnseq[yy[0]];\n      unzftab[ch]+=s;\n      while (s > 0) {\n        last++;\n        ll8[last]=ch;\n        s--;\n      }\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      continue;\n    }\n else {\n      char tmp;\n      last++;\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      tmp=yy[nextSym - 1];\n      unzftab[seqToUnseq[tmp]]++;\n      ll8[last]=seqToUnseq[tmp];\n      j=nextSym - 1;\n      for (; j > 3; j-=4) {\n        yy[j]=yy[j - 1];\n        yy[j - 1]=yy[j - 2];\n        yy[j - 2]=yy[j - 3];\n        yy[j - 3]=yy[j - 4];\n      }\n      for (; j > 0; j--) {\n        yy[j]=yy[j - 1];\n      }\n      yy[0]=tmp;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n      continue;\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 814,
                    "astHeight": 22
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 34,
                    "startLineNumber": 654,
                    "startColumnNumber": 28,
                    "endLineNumber": 654,
                    "endColumnNumber": 62
                },
                "nodeContext": "zj=(bsBuff >> (bsLive - 1)) & 1;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 12,
                "astHeight": 8
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 657,
                "startColumnNumber": 40,
                "endLineNumber": 657,
                "endColumnNumber": 41
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
                    "nodePosition": {
                        "charLength": 9,
                        "startLineNumber": 657,
                        "startColumnNumber": 32,
                        "endLineNumber": 657,
                        "endColumnNumber": 41
                    },
                    "nodeContext": "zvec << 1",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 11,
                        "startLineNumber": 657,
                        "startColumnNumber": 31,
                        "endLineNumber": 657,
                        "endColumnNumber": 42
                    },
                    "nodeContext": "(zvec << 1)",
                    "nodeType": "ParenthesizedExpression",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 16,
                        "startLineNumber": 657,
                        "startColumnNumber": 31,
                        "endLineNumber": 657,
                        "endColumnNumber": 47
                    },
                    "nodeContext": "(zvec << 1) | zj",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 6,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 23,
                        "startLineNumber": 657,
                        "startColumnNumber": 24,
                        "endLineNumber": 657,
                        "endColumnNumber": 47
                    },
                    "nodeContext": "zvec=(zvec << 1) | zj",
                    "nodeType": "Assignment",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 24,
                        "startLineNumber": 657,
                        "startColumnNumber": 24,
                        "endLineNumber": 657,
                        "endColumnNumber": 48
                    },
                    "nodeContext": "zvec=(zvec << 1) | zj;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 9,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 949,
                        "startLineNumber": 637,
                        "startColumnNumber": 49,
                        "endLineNumber": 658,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  zn++;\n{\n{\n      while (bsLive < 1) {\n        int zzi;\n        char thech=0;\n        try {\n          thech=(char)bsStream.read();\n        }\n catch (        IOException e) {\n          compressedStreamEOF();\n        }\n        zzi=thech;\n        bsBuff=(bsBuff << 8) | (zzi & 0xff);\n        bsLive+=8;\n      }\n    }\n    zj=(bsBuff >> (bsLive - 1)) & 1;\n    bsLive--;\n  }\n  zvec=(zvec << 1) | zj;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 83,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 978,
                        "startLineNumber": 637,
                        "startColumnNumber": 20,
                        "endLineNumber": 658,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "while (zvec > limit[zt][zn]) {\n  zn++;\n{\n{\n      while (bsLive < 1) {\n        int zzi;\n        char thech=0;\n        try {\n          thech=(char)bsStream.read();\n        }\n catch (        IOException e) {\n          compressedStreamEOF();\n        }\n        zzi=thech;\n        bsBuff=(bsBuff << 8) | (zzi & 0xff);\n        bsLive+=8;\n      }\n    }\n    zj=(bsBuff >> (bsLive - 1)) & 1;\n    bsLive--;\n  }\n  zvec=(zvec << 1) | zj;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 91,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1412,
                        "startLineNumber": 627,
                        "startColumnNumber": 16,
                        "endLineNumber": 660,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  int zt, zn, zvec, zj;\n  if (groupPos == 0) {\n    groupNo++;\n    groupPos=G_SIZE;\n  }\n  groupPos--;\n  zt=selector[groupNo];\n  zn=minLens[zt];\n  zvec=bsR(zn);\n  while (zvec > limit[zt][zn]) {\n    zn++;\n{\n{\n        while (bsLive < 1) {\n          int zzi;\n          char thech=0;\n          try {\n            thech=(char)bsStream.read();\n          }\n catch (          IOException e) {\n            compressedStreamEOF();\n          }\n          zzi=thech;\n          bsBuff=(bsBuff << 8) | (zzi & 0xff);\n          bsLive+=8;\n        }\n      }\n      zj=(bsBuff >> (bsLive - 1)) & 1;\n      bsLive--;\n    }\n    zvec=(zvec << 1) | zj;\n  }\n  nextSym=perm[zt][zvec - base[zt][zn]];\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 149,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 2340,
                        "startLineNumber": 597,
                        "startColumnNumber": 19,
                        "endLineNumber": 662,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  char tmp;\n  last++;\n  if (last >= limitLast) {\n    blockOverrun();\n  }\n  tmp=yy[nextSym - 1];\n  unzftab[seqToUnseq[tmp]]++;\n  ll8[last]=seqToUnseq[tmp];\n  j=nextSym - 1;\n  for (; j > 3; j-=4) {\n    yy[j]=yy[j - 1];\n    yy[j - 1]=yy[j - 2];\n    yy[j - 2]=yy[j - 3];\n    yy[j - 3]=yy[j - 4];\n  }\n  for (; j > 0; j--) {\n    yy[j]=yy[j - 1];\n  }\n  yy[0]=tmp;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  continue;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 272,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4898,
                        "startLineNumber": 533,
                        "startColumnNumber": 12,
                        "endLineNumber": 662,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (nextSym == RUNA || nextSym == RUNB) {\n  char ch;\n  int s=-1;\n  int N=1;\n  do {\n    if (nextSym == RUNA) {\n      s=s + (0 + 1) * N;\n    }\n else     if (nextSym == RUNB) {\n      s=s + (1 + 1) * N;\n    }\n    N=N * 2;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              if (thech == -1) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n  }\n while (nextSym == RUNA || nextSym == RUNB);\n  s++;\n  ch=seqToUnseq[yy[0]];\n  unzftab[ch]+=s;\n  while (s > 0) {\n    last++;\n    ll8[last]=ch;\n    s--;\n  }\n  if (last >= limitLast) {\n    blockOverrun();\n  }\n  continue;\n}\n else {\n  char tmp;\n  last++;\n  if (last >= limitLast) {\n    blockOverrun();\n  }\n  tmp=yy[nextSym - 1];\n  unzftab[seqToUnseq[tmp]]++;\n  ll8[last]=seqToUnseq[tmp];\n  j=nextSym - 1;\n  for (; j > 3; j-=4) {\n    yy[j]=yy[j - 1];\n    yy[j - 1]=yy[j - 2];\n    yy[j - 2]=yy[j - 3];\n    yy[j - 3]=yy[j - 4];\n  }\n  for (; j > 0; j--) {\n    yy[j]=yy[j - 1];\n  }\n  yy[0]=tmp;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  continue;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 544,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 4995,
                        "startLineNumber": 527,
                        "startColumnNumber": 21,
                        "endLineNumber": 663,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (nextSym == EOB) {\n    break;\n  }\n  if (nextSym == RUNA || nextSym == RUNB) {\n    char ch;\n    int s=-1;\n    int N=1;\n    do {\n      if (nextSym == RUNA) {\n        s=s + (0 + 1) * N;\n      }\n else       if (nextSym == RUNB) {\n        s=s + (1 + 1) * N;\n      }\n      N=N * 2;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                if (thech == -1) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n    }\n while (nextSym == RUNA || nextSym == RUNB);\n    s++;\n    ch=seqToUnseq[yy[0]];\n    unzftab[ch]+=s;\n    while (s > 0) {\n      last++;\n      ll8[last]=ch;\n      s--;\n    }\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    continue;\n  }\n else {\n    char tmp;\n    last++;\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    tmp=yy[nextSym - 1];\n    unzftab[seqToUnseq[tmp]]++;\n    ll8[last]=seqToUnseq[tmp];\n    j=nextSym - 1;\n    for (; j > 3; j-=4) {\n      yy[j]=yy[j - 1];\n      yy[j - 1]=yy[j - 2];\n      yy[j - 2]=yy[j - 3];\n      yy[j - 3]=yy[j - 4];\n    }\n    for (; j > 0; j--) {\n      yy[j]=yy[j - 1];\n    }\n    yy[0]=tmp;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n    continue;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 551,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 5008,
                        "startLineNumber": 527,
                        "startColumnNumber": 8,
                        "endLineNumber": 663,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (true) {\n  if (nextSym == EOB) {\n    break;\n  }\n  if (nextSym == RUNA || nextSym == RUNB) {\n    char ch;\n    int s=-1;\n    int N=1;\n    do {\n      if (nextSym == RUNA) {\n        s=s + (0 + 1) * N;\n      }\n else       if (nextSym == RUNB) {\n        s=s + (1 + 1) * N;\n      }\n      N=N * 2;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                if (thech == -1) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n    }\n while (nextSym == RUNA || nextSym == RUNB);\n    s++;\n    ch=seqToUnseq[yy[0]];\n    unzftab[ch]+=s;\n    while (s > 0) {\n      last++;\n      ll8[last]=ch;\n      s--;\n    }\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    continue;\n  }\n else {\n    char tmp;\n    last++;\n    if (last >= limitLast) {\n      blockOverrun();\n    }\n    tmp=yy[nextSym - 1];\n    unzftab[seqToUnseq[tmp]]++;\n    ll8[last]=seqToUnseq[tmp];\n    j=nextSym - 1;\n    for (; j > 3; j-=4) {\n      yy[j]=yy[j - 1];\n      yy[j - 1]=yy[j - 2];\n      yy[j - 2]=yy[j - 3];\n      yy[j - 3]=yy[j - 4];\n    }\n    for (; j > 0; j--) {\n      yy[j]=yy[j - 1];\n    }\n    yy[0]=tmp;\n{\n      int zt, zn, zvec, zj;\n      if (groupPos == 0) {\n        groupNo++;\n        groupPos=G_SIZE;\n      }\n      groupPos--;\n      zt=selector[groupNo];\n      zn=minLens[zt];\n      zvec=bsR(zn);\n      while (zvec > limit[zt][zn]) {\n        zn++;\n{\n{\n            while (bsLive < 1) {\n              int zzi;\n              char thech=0;\n              try {\n                thech=(char)bsStream.read();\n              }\n catch (              IOException e) {\n                compressedStreamEOF();\n              }\n              zzi=thech;\n              bsBuff=(bsBuff << 8) | (zzi & 0xff);\n              bsLive+=8;\n            }\n          }\n          zj=(bsBuff >> (bsLive - 1)) & 1;\n          bsLive--;\n        }\n        zvec=(zvec << 1) | zj;\n      }\n      nextSym=perm[zt][zvec - base[zt][zn]];\n    }\n    continue;\n  }\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 553,
                    "astHeight": 20
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 7015,
                        "startLineNumber": 460,
                        "startColumnNumber": 43,
                        "endLineNumber": 664,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  char[] yy=new char[256];\n  int i, j, nextSym, limitLast;\n  int EOB, groupNo, groupPos;\n  limitLast=baseBlockSize * blockSize100k;\n  origPtr=bsGetIntVS(24);\n  recvDecodingTables();\n  EOB=nInUse + 1;\n  groupNo=-1;\n  groupPos=0;\n  for (i=0; i <= 255; i++) {\n    unzftab[i]=0;\n  }\n  for (i=0; i <= 255; i++) {\n    yy[i]=(char)i;\n  }\n  last=-1;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  while (true) {\n    if (nextSym == EOB) {\n      break;\n    }\n    if (nextSym == RUNA || nextSym == RUNB) {\n      char ch;\n      int s=-1;\n      int N=1;\n      do {\n        if (nextSym == RUNA) {\n          s=s + (0 + 1) * N;\n        }\n else         if (nextSym == RUNB) {\n          s=s + (1 + 1) * N;\n        }\n        N=N * 2;\n{\n          int zt, zn, zvec, zj;\n          if (groupPos == 0) {\n            groupNo++;\n            groupPos=G_SIZE;\n          }\n          groupPos--;\n          zt=selector[groupNo];\n          zn=minLens[zt];\n          zvec=bsR(zn);\n          while (zvec > limit[zt][zn]) {\n            zn++;\n{\n{\n                while (bsLive < 1) {\n                  int zzi;\n                  char thech=0;\n                  try {\n                    thech=(char)bsStream.read();\n                  }\n catch (                  IOException e) {\n                    compressedStreamEOF();\n                  }\n                  if (thech == -1) {\n                    compressedStreamEOF();\n                  }\n                  zzi=thech;\n                  bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                  bsLive+=8;\n                }\n              }\n              zj=(bsBuff >> (bsLive - 1)) & 1;\n              bsLive--;\n            }\n            zvec=(zvec << 1) | zj;\n          }\n          nextSym=perm[zt][zvec - base[zt][zn]];\n        }\n      }\n while (nextSym == RUNA || nextSym == RUNB);\n      s++;\n      ch=seqToUnseq[yy[0]];\n      unzftab[ch]+=s;\n      while (s > 0) {\n        last++;\n        ll8[last]=ch;\n        s--;\n      }\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      continue;\n    }\n else {\n      char tmp;\n      last++;\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      tmp=yy[nextSym - 1];\n      unzftab[seqToUnseq[tmp]]++;\n      ll8[last]=seqToUnseq[tmp];\n      j=nextSym - 1;\n      for (; j > 3; j-=4) {\n        yy[j]=yy[j - 1];\n        yy[j - 1]=yy[j - 2];\n        yy[j - 2]=yy[j - 3];\n        yy[j - 3]=yy[j - 4];\n      }\n      for (; j > 0; j--) {\n        yy[j]=yy[j - 1];\n      }\n      yy[0]=tmp;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n      continue;\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 810,
                    "astHeight": 21
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7054,
                        "startLineNumber": 460,
                        "startColumnNumber": 4,
                        "endLineNumber": 664,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void getAndMoveToFrontDecode(){\n  char[] yy=new char[256];\n  int i, j, nextSym, limitLast;\n  int EOB, groupNo, groupPos;\n  limitLast=baseBlockSize * blockSize100k;\n  origPtr=bsGetIntVS(24);\n  recvDecodingTables();\n  EOB=nInUse + 1;\n  groupNo=-1;\n  groupPos=0;\n  for (i=0; i <= 255; i++) {\n    unzftab[i]=0;\n  }\n  for (i=0; i <= 255; i++) {\n    yy[i]=(char)i;\n  }\n  last=-1;\n{\n    int zt, zn, zvec, zj;\n    if (groupPos == 0) {\n      groupNo++;\n      groupPos=G_SIZE;\n    }\n    groupPos--;\n    zt=selector[groupNo];\n    zn=minLens[zt];\n    zvec=bsR(zn);\n    while (zvec > limit[zt][zn]) {\n      zn++;\n{\n{\n          while (bsLive < 1) {\n            int zzi;\n            char thech=0;\n            try {\n              thech=(char)bsStream.read();\n            }\n catch (            IOException e) {\n              compressedStreamEOF();\n            }\n            if (thech == -1) {\n              compressedStreamEOF();\n            }\n            zzi=thech;\n            bsBuff=(bsBuff << 8) | (zzi & 0xff);\n            bsLive+=8;\n          }\n        }\n        zj=(bsBuff >> (bsLive - 1)) & 1;\n        bsLive--;\n      }\n      zvec=(zvec << 1) | zj;\n    }\n    nextSym=perm[zt][zvec - base[zt][zn]];\n  }\n  while (true) {\n    if (nextSym == EOB) {\n      break;\n    }\n    if (nextSym == RUNA || nextSym == RUNB) {\n      char ch;\n      int s=-1;\n      int N=1;\n      do {\n        if (nextSym == RUNA) {\n          s=s + (0 + 1) * N;\n        }\n else         if (nextSym == RUNB) {\n          s=s + (1 + 1) * N;\n        }\n        N=N * 2;\n{\n          int zt, zn, zvec, zj;\n          if (groupPos == 0) {\n            groupNo++;\n            groupPos=G_SIZE;\n          }\n          groupPos--;\n          zt=selector[groupNo];\n          zn=minLens[zt];\n          zvec=bsR(zn);\n          while (zvec > limit[zt][zn]) {\n            zn++;\n{\n{\n                while (bsLive < 1) {\n                  int zzi;\n                  char thech=0;\n                  try {\n                    thech=(char)bsStream.read();\n                  }\n catch (                  IOException e) {\n                    compressedStreamEOF();\n                  }\n                  if (thech == -1) {\n                    compressedStreamEOF();\n                  }\n                  zzi=thech;\n                  bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                  bsLive+=8;\n                }\n              }\n              zj=(bsBuff >> (bsLive - 1)) & 1;\n              bsLive--;\n            }\n            zvec=(zvec << 1) | zj;\n          }\n          nextSym=perm[zt][zvec - base[zt][zn]];\n        }\n      }\n while (nextSym == RUNA || nextSym == RUNB);\n      s++;\n      ch=seqToUnseq[yy[0]];\n      unzftab[ch]+=s;\n      while (s > 0) {\n        last++;\n        ll8[last]=ch;\n        s--;\n      }\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      continue;\n    }\n else {\n      char tmp;\n      last++;\n      if (last >= limitLast) {\n        blockOverrun();\n      }\n      tmp=yy[nextSym - 1];\n      unzftab[seqToUnseq[tmp]]++;\n      ll8[last]=seqToUnseq[tmp];\n      j=nextSym - 1;\n      for (; j > 3; j-=4) {\n        yy[j]=yy[j - 1];\n        yy[j - 1]=yy[j - 2];\n        yy[j - 2]=yy[j - 3];\n        yy[j - 3]=yy[j - 4];\n      }\n      for (; j > 0; j--) {\n        yy[j]=yy[j - 1];\n      }\n      yy[0]=tmp;\n{\n        int zt, zn, zvec, zj;\n        if (groupPos == 0) {\n          groupNo++;\n          groupPos=G_SIZE;\n        }\n        groupPos--;\n        zt=selector[groupNo];\n        zn=minLens[zt];\n        zvec=bsR(zn);\n        while (zvec > limit[zt][zn]) {\n          zn++;\n{\n{\n              while (bsLive < 1) {\n                int zzi;\n                char thech=0;\n                try {\n                  thech=(char)bsStream.read();\n                }\n catch (                IOException e) {\n                  compressedStreamEOF();\n                }\n                zzi=thech;\n                bsBuff=(bsBuff << 8) | (zzi & 0xff);\n                bsLive+=8;\n              }\n            }\n            zj=(bsBuff >> (bsLive - 1)) & 1;\n            bsLive--;\n          }\n          zvec=(zvec << 1) | zj;\n        }\n        nextSym=perm[zt][zvec - base[zt][zn]];\n      }\n      continue;\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 814,
                    "astHeight": 22
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 24,
                    "startLineNumber": 657,
                    "startColumnNumber": 24,
                    "endLineNumber": 657,
                    "endColumnNumber": 48
                },
                "nodeContext": "zvec=(zvec << 1) | zj;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 9,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "int"
        }
    ],
    "positionList": [
        {
            "charLength": 1,
            "startLineNumber": 469,
            "startColumnNumber": 23,
            "endLineNumber": 469,
            "endColumnNumber": 24
        },
        {
            "charLength": 1,
            "startLineNumber": 470,
            "startColumnNumber": 19,
            "endLineNumber": 470,
            "endColumnNumber": 20
        },
        {
            "charLength": 1,
            "startLineNumber": 487,
            "startColumnNumber": 16,
            "endLineNumber": 487,
            "endColumnNumber": 17
        },
        {
            "charLength": 1,
            "startLineNumber": 503,
            "startColumnNumber": 40,
            "endLineNumber": 503,
            "endColumnNumber": 41
        },
        {
            "charLength": 1,
            "startLineNumber": 511,
            "startColumnNumber": 42,
            "endLineNumber": 511,
            "endColumnNumber": 43
        },
        {
            "charLength": 1,
            "startLineNumber": 519,
            "startColumnNumber": 46,
            "endLineNumber": 519,
            "endColumnNumber": 47
        },
        {
            "charLength": 1,
            "startLineNumber": 519,
            "startColumnNumber": 52,
            "endLineNumber": 519,
            "endColumnNumber": 53
        },
        {
            "charLength": 1,
            "startLineNumber": 522,
            "startColumnNumber": 32,
            "endLineNumber": 522,
            "endColumnNumber": 33
        },
        {
            "charLength": 1,
            "startLineNumber": 535,
            "startColumnNumber": 25,
            "endLineNumber": 535,
            "endColumnNumber": 26
        },
        {
            "charLength": 1,
            "startLineNumber": 536,
            "startColumnNumber": 24,
            "endLineNumber": 536,
            "endColumnNumber": 25
        },
        {
            "charLength": 1,
            "startLineNumber": 539,
            "startColumnNumber": 37,
            "endLineNumber": 539,
            "endColumnNumber": 38
        },
        {
            "charLength": 1,
            "startLineNumber": 541,
            "startColumnNumber": 33,
            "endLineNumber": 541,
            "endColumnNumber": 34
        },
        {
            "charLength": 1,
            "startLineNumber": 541,
            "startColumnNumber": 37,
            "endLineNumber": 541,
            "endColumnNumber": 38
        },
        {
            "charLength": 1,
            "startLineNumber": 558,
            "startColumnNumber": 52,
            "endLineNumber": 558,
            "endColumnNumber": 53
        },
        {
            "charLength": 1,
            "startLineNumber": 566,
            "startColumnNumber": 54,
            "endLineNumber": 566,
            "endColumnNumber": 55
        },
        {
            "charLength": 1,
            "startLineNumber": 574,
            "startColumnNumber": 58,
            "endLineNumber": 574,
            "endColumnNumber": 59
        },
        {
            "charLength": 1,
            "startLineNumber": 574,
            "startColumnNumber": 64,
            "endLineNumber": 574,
            "endColumnNumber": 65
        },
        {
            "charLength": 1,
            "startLineNumber": 577,
            "startColumnNumber": 44,
            "endLineNumber": 577,
            "endColumnNumber": 45
        },
        {
            "charLength": 1,
            "startLineNumber": 604,
            "startColumnNumber": 35,
            "endLineNumber": 604,
            "endColumnNumber": 36
        },
        {
            "charLength": 1,
            "startLineNumber": 615,
            "startColumnNumber": 30,
            "endLineNumber": 615,
            "endColumnNumber": 31
        },
        {
            "charLength": 1,
            "startLineNumber": 617,
            "startColumnNumber": 39,
            "endLineNumber": 617,
            "endColumnNumber": 40
        },
        {
            "charLength": 1,
            "startLineNumber": 618,
            "startColumnNumber": 27,
            "endLineNumber": 618,
            "endColumnNumber": 28
        },
        {
            "charLength": 1,
            "startLineNumber": 623,
            "startColumnNumber": 35,
            "endLineNumber": 623,
            "endColumnNumber": 36
        },
        {
            "charLength": 1,
            "startLineNumber": 641,
            "startColumnNumber": 48,
            "endLineNumber": 641,
            "endColumnNumber": 49
        },
        {
            "charLength": 1,
            "startLineNumber": 654,
            "startColumnNumber": 54,
            "endLineNumber": 654,
            "endColumnNumber": 55
        },
        {
            "charLength": 1,
            "startLineNumber": 654,
            "startColumnNumber": 60,
            "endLineNumber": 654,
            "endColumnNumber": 61
        },
        {
            "charLength": 1,
            "startLineNumber": 657,
            "startColumnNumber": 40,
            "endLineNumber": 657,
            "endColumnNumber": 41
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 18,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 19,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 20,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 21,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 22,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 23,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 24,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 25,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 26,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 18,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 19,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 20,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 21,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 22,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 23,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 24,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 25,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 26,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 18,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 19,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 20,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 21,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 22,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 23,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 24,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 25,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 26,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 7
        },
        {
            "firstKey": 3,
            "secondKey": 4,
            "layout": 1
        },
        {
            "firstKey": 3,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 8,
            "layout": 7
        },
        {
            "firstKey": 3,
            "secondKey": 9,
            "layout": 7
        },
        {
            "firstKey": 3,
            "secondKey": 10,
            "layout": 7
        },
        {
            "firstKey": 3,
            "secondKey": 11,
            "layout": 7
        },
        {
            "firstKey": 3,
            "secondKey": 12,
            "layout": 7
        },
        {
            "firstKey": 3,
            "secondKey": 13,
            "layout": 7
        },
        {
            "firstKey": 3,
            "secondKey": 14,
            "layout": 7
        },
        {
            "firstKey": 3,
            "secondKey": 15,
            "layout": 7
        },
        {
            "firstKey": 3,
            "secondKey": 16,
            "layout": 7
        },
        {
            "firstKey": 3,
            "secondKey": 17,
            "layout": 7
        },
        {
            "firstKey": 3,
            "secondKey": 18,
            "layout": 7
        },
        {
            "firstKey": 3,
            "secondKey": 19,
            "layout": 7
        },
        {
            "firstKey": 3,
            "secondKey": 20,
            "layout": 7
        },
        {
            "firstKey": 3,
            "secondKey": 21,
            "layout": 7
        },
        {
            "firstKey": 3,
            "secondKey": 22,
            "layout": 7
        },
        {
            "firstKey": 3,
            "secondKey": 23,
            "layout": 7
        },
        {
            "firstKey": 3,
            "secondKey": 24,
            "layout": 7
        },
        {
            "firstKey": 3,
            "secondKey": 25,
            "layout": 7
        },
        {
            "firstKey": 3,
            "secondKey": 26,
            "layout": 7
        },
        {
            "firstKey": 4,
            "secondKey": 0,
            "layout": 10
        },
        {
            "firstKey": 4,
            "secondKey": 1,
            "layout": 10
        },
        {
            "firstKey": 4,
            "secondKey": 2,
            "layout": 10
        },
        {
            "firstKey": 4,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 5,
            "layout": 6
        },
        {
            "firstKey": 4,
            "secondKey": 6,
            "layout": 6
        },
        {
            "firstKey": 4,
            "secondKey": 7,
            "layout": 7
        },
        {
            "firstKey": 4,
            "secondKey": 8,
            "layout": 10
        },
        {
            "firstKey": 4,
            "secondKey": 9,
            "layout": 10
        },
        {
            "firstKey": 4,
            "secondKey": 10,
            "layout": 10
        },
        {
            "firstKey": 4,
            "secondKey": 11,
            "layout": 10
        },
        {
            "firstKey": 4,
            "secondKey": 12,
            "layout": 10
        },
        {
            "firstKey": 4,
            "secondKey": 13,
            "layout": 10
        },
        {
            "firstKey": 4,
            "secondKey": 14,
            "layout": 10
        },
        {
            "firstKey": 4,
            "secondKey": 15,
            "layout": 10
        },
        {
            "firstKey": 4,
            "secondKey": 16,
            "layout": 10
        },
        {
            "firstKey": 4,
            "secondKey": 17,
            "layout": 10
        },
        {
            "firstKey": 4,
            "secondKey": 18,
            "layout": 10
        },
        {
            "firstKey": 4,
            "secondKey": 19,
            "layout": 10
        },
        {
            "firstKey": 4,
            "secondKey": 20,
            "layout": 10
        },
        {
            "firstKey": 4,
            "secondKey": 21,
            "layout": 10
        },
        {
            "firstKey": 4,
            "secondKey": 22,
            "layout": 10
        },
        {
            "firstKey": 4,
            "secondKey": 23,
            "layout": 10
        },
        {
            "firstKey": 4,
            "secondKey": 24,
            "layout": 10
        },
        {
            "firstKey": 4,
            "secondKey": 25,
            "layout": 10
        },
        {
            "firstKey": 4,
            "secondKey": 26,
            "layout": 10
        },
        {
            "firstKey": 5,
            "secondKey": 0,
            "layout": 11
        },
        {
            "firstKey": 5,
            "secondKey": 1,
            "layout": 11
        },
        {
            "firstKey": 5,
            "secondKey": 2,
            "layout": 11
        },
        {
            "firstKey": 5,
            "secondKey": 3,
            "layout": 7
        },
        {
            "firstKey": 5,
            "secondKey": 4,
            "layout": 7
        },
        {
            "firstKey": 5,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 7,
            "layout": 8
        },
        {
            "firstKey": 5,
            "secondKey": 8,
            "layout": 11
        },
        {
            "firstKey": 5,
            "secondKey": 9,
            "layout": 11
        },
        {
            "firstKey": 5,
            "secondKey": 10,
            "layout": 11
        },
        {
            "firstKey": 5,
            "secondKey": 11,
            "layout": 11
        },
        {
            "firstKey": 5,
            "secondKey": 12,
            "layout": 11
        },
        {
            "firstKey": 5,
            "secondKey": 13,
            "layout": 11
        },
        {
            "firstKey": 5,
            "secondKey": 14,
            "layout": 11
        },
        {
            "firstKey": 5,
            "secondKey": 15,
            "layout": 11
        },
        {
            "firstKey": 5,
            "secondKey": 16,
            "layout": 11
        },
        {
            "firstKey": 5,
            "secondKey": 17,
            "layout": 11
        },
        {
            "firstKey": 5,
            "secondKey": 18,
            "layout": 11
        },
        {
            "firstKey": 5,
            "secondKey": 19,
            "layout": 11
        },
        {
            "firstKey": 5,
            "secondKey": 20,
            "layout": 11
        },
        {
            "firstKey": 5,
            "secondKey": 21,
            "layout": 11
        },
        {
            "firstKey": 5,
            "secondKey": 22,
            "layout": 11
        },
        {
            "firstKey": 5,
            "secondKey": 23,
            "layout": 11
        },
        {
            "firstKey": 5,
            "secondKey": 24,
            "layout": 11
        },
        {
            "firstKey": 5,
            "secondKey": 25,
            "layout": 11
        },
        {
            "firstKey": 5,
            "secondKey": 26,
            "layout": 11
        },
        {
            "firstKey": 6,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 6,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 6,
            "secondKey": 2,
            "layout": 7
        },
        {
            "firstKey": 6,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 5,
            "layout": 0
        },
        {
            "firstKey": 6,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 8,
            "layout": 7
        },
        {
            "firstKey": 6,
            "secondKey": 9,
            "layout": 7
        },
        {
            "firstKey": 6,
            "secondKey": 10,
            "layout": 7
        },
        {
            "firstKey": 6,
            "secondKey": 11,
            "layout": 7
        },
        {
            "firstKey": 6,
            "secondKey": 12,
            "layout": 7
        },
        {
            "firstKey": 6,
            "secondKey": 13,
            "layout": 7
        },
        {
            "firstKey": 6,
            "secondKey": 14,
            "layout": 7
        },
        {
            "firstKey": 6,
            "secondKey": 15,
            "layout": 7
        },
        {
            "firstKey": 6,
            "secondKey": 16,
            "layout": 7
        },
        {
            "firstKey": 6,
            "secondKey": 17,
            "layout": 7
        },
        {
            "firstKey": 6,
            "secondKey": 18,
            "layout": 7
        },
        {
            "firstKey": 6,
            "secondKey": 19,
            "layout": 7
        },
        {
            "firstKey": 6,
            "secondKey": 20,
            "layout": 7
        },
        {
            "firstKey": 6,
            "secondKey": 21,
            "layout": 7
        },
        {
            "firstKey": 6,
            "secondKey": 22,
            "layout": 7
        },
        {
            "firstKey": 6,
            "secondKey": 23,
            "layout": 7
        },
        {
            "firstKey": 6,
            "secondKey": 24,
            "layout": 7
        },
        {
            "firstKey": 6,
            "secondKey": 25,
            "layout": 7
        },
        {
            "firstKey": 6,
            "secondKey": 26,
            "layout": 7
        },
        {
            "firstKey": 7,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 7,
            "secondKey": 1,
            "layout": 8
        },
        {
            "firstKey": 7,
            "secondKey": 2,
            "layout": 8
        },
        {
            "firstKey": 7,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 8,
            "layout": 8
        },
        {
            "firstKey": 7,
            "secondKey": 9,
            "layout": 8
        },
        {
            "firstKey": 7,
            "secondKey": 10,
            "layout": 8
        },
        {
            "firstKey": 7,
            "secondKey": 11,
            "layout": 8
        },
        {
            "firstKey": 7,
            "secondKey": 12,
            "layout": 8
        },
        {
            "firstKey": 7,
            "secondKey": 13,
            "layout": 8
        },
        {
            "firstKey": 7,
            "secondKey": 14,
            "layout": 8
        },
        {
            "firstKey": 7,
            "secondKey": 15,
            "layout": 8
        },
        {
            "firstKey": 7,
            "secondKey": 16,
            "layout": 8
        },
        {
            "firstKey": 7,
            "secondKey": 17,
            "layout": 8
        },
        {
            "firstKey": 7,
            "secondKey": 18,
            "layout": 8
        },
        {
            "firstKey": 7,
            "secondKey": 19,
            "layout": 8
        },
        {
            "firstKey": 7,
            "secondKey": 20,
            "layout": 8
        },
        {
            "firstKey": 7,
            "secondKey": 21,
            "layout": 8
        },
        {
            "firstKey": 7,
            "secondKey": 22,
            "layout": 8
        },
        {
            "firstKey": 7,
            "secondKey": 23,
            "layout": 8
        },
        {
            "firstKey": 7,
            "secondKey": 24,
            "layout": 8
        },
        {
            "firstKey": 7,
            "secondKey": 25,
            "layout": 8
        },
        {
            "firstKey": 7,
            "secondKey": 26,
            "layout": 8
        },
        {
            "firstKey": 8,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 8,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 8,
            "secondKey": 2,
            "layout": 7
        },
        {
            "firstKey": 8,
            "secondKey": 3,
            "layout": 7
        },
        {
            "firstKey": 8,
            "secondKey": 4,
            "layout": 7
        },
        {
            "firstKey": 8,
            "secondKey": 5,
            "layout": 7
        },
        {
            "firstKey": 8,
            "secondKey": 6,
            "layout": 7
        },
        {
            "firstKey": 8,
            "secondKey": 7,
            "layout": 7
        },
        {
            "firstKey": 8,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 18,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 19,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 20,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 21,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 22,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 23,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 24,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 25,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 26,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 9,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 9,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 9,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 9,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 9,
            "secondKey": 5,
            "layout": 6
        },
        {
            "firstKey": 9,
            "secondKey": 6,
            "layout": 6
        },
        {
            "firstKey": 9,
            "secondKey": 7,
            "layout": 6
        },
        {
            "firstKey": 9,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 9,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 9,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 9,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 9,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 9,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 9,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 9,
            "secondKey": 16,
            "layout": 2
        },
        {
            "firstKey": 9,
            "secondKey": 17,
            "layout": 2
        },
        {
            "firstKey": 9,
            "secondKey": 18,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 19,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 20,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 21,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 22,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 23,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 24,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 25,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 26,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 0,
            "layout": 14
        },
        {
            "firstKey": 10,
            "secondKey": 1,
            "layout": 14
        },
        {
            "firstKey": 10,
            "secondKey": 2,
            "layout": 14
        },
        {
            "firstKey": 10,
            "secondKey": 3,
            "layout": 14
        },
        {
            "firstKey": 10,
            "secondKey": 4,
            "layout": 14
        },
        {
            "firstKey": 10,
            "secondKey": 5,
            "layout": 14
        },
        {
            "firstKey": 10,
            "secondKey": 6,
            "layout": 14
        },
        {
            "firstKey": 10,
            "secondKey": 7,
            "layout": 14
        },
        {
            "firstKey": 10,
            "secondKey": 8,
            "layout": 10
        },
        {
            "firstKey": 10,
            "secondKey": 9,
            "layout": 10
        },
        {
            "firstKey": 10,
            "secondKey": 11,
            "layout": 7
        },
        {
            "firstKey": 10,
            "secondKey": 12,
            "layout": 7
        },
        {
            "firstKey": 10,
            "secondKey": 13,
            "layout": 8
        },
        {
            "firstKey": 10,
            "secondKey": 14,
            "layout": 8
        },
        {
            "firstKey": 10,
            "secondKey": 15,
            "layout": 8
        },
        {
            "firstKey": 10,
            "secondKey": 16,
            "layout": 8
        },
        {
            "firstKey": 10,
            "secondKey": 17,
            "layout": 8
        },
        {
            "firstKey": 10,
            "secondKey": 18,
            "layout": 11
        },
        {
            "firstKey": 10,
            "secondKey": 19,
            "layout": 11
        },
        {
            "firstKey": 10,
            "secondKey": 20,
            "layout": 11
        },
        {
            "firstKey": 10,
            "secondKey": 21,
            "layout": 11
        },
        {
            "firstKey": 10,
            "secondKey": 22,
            "layout": 11
        },
        {
            "firstKey": 10,
            "secondKey": 23,
            "layout": 11
        },
        {
            "firstKey": 10,
            "secondKey": 24,
            "layout": 11
        },
        {
            "firstKey": 10,
            "secondKey": 25,
            "layout": 11
        },
        {
            "firstKey": 10,
            "secondKey": 26,
            "layout": 11
        },
        {
            "firstKey": 11,
            "secondKey": 0,
            "layout": 15
        },
        {
            "firstKey": 11,
            "secondKey": 1,
            "layout": 15
        },
        {
            "firstKey": 11,
            "secondKey": 2,
            "layout": 15
        },
        {
            "firstKey": 11,
            "secondKey": 3,
            "layout": 15
        },
        {
            "firstKey": 11,
            "secondKey": 4,
            "layout": 15
        },
        {
            "firstKey": 11,
            "secondKey": 5,
            "layout": 15
        },
        {
            "firstKey": 11,
            "secondKey": 6,
            "layout": 15
        },
        {
            "firstKey": 11,
            "secondKey": 7,
            "layout": 15
        },
        {
            "firstKey": 11,
            "secondKey": 8,
            "layout": 11
        },
        {
            "firstKey": 11,
            "secondKey": 9,
            "layout": 11
        },
        {
            "firstKey": 11,
            "secondKey": 10,
            "layout": 8
        },
        {
            "firstKey": 11,
            "secondKey": 12,
            "layout": 0
        },
        {
            "firstKey": 11,
            "secondKey": 13,
            "layout": 9
        },
        {
            "firstKey": 11,
            "secondKey": 14,
            "layout": 9
        },
        {
            "firstKey": 11,
            "secondKey": 15,
            "layout": 9
        },
        {
            "firstKey": 11,
            "secondKey": 16,
            "layout": 9
        },
        {
            "firstKey": 11,
            "secondKey": 17,
            "layout": 9
        },
        {
            "firstKey": 11,
            "secondKey": 18,
            "layout": 12
        },
        {
            "firstKey": 11,
            "secondKey": 19,
            "layout": 12
        },
        {
            "firstKey": 11,
            "secondKey": 20,
            "layout": 12
        },
        {
            "firstKey": 11,
            "secondKey": 21,
            "layout": 12
        },
        {
            "firstKey": 11,
            "secondKey": 22,
            "layout": 12
        },
        {
            "firstKey": 11,
            "secondKey": 23,
            "layout": 12
        },
        {
            "firstKey": 11,
            "secondKey": 24,
            "layout": 12
        },
        {
            "firstKey": 11,
            "secondKey": 25,
            "layout": 12
        },
        {
            "firstKey": 11,
            "secondKey": 26,
            "layout": 12
        },
        {
            "firstKey": 12,
            "secondKey": 0,
            "layout": 15
        },
        {
            "firstKey": 12,
            "secondKey": 1,
            "layout": 15
        },
        {
            "firstKey": 12,
            "secondKey": 2,
            "layout": 15
        },
        {
            "firstKey": 12,
            "secondKey": 3,
            "layout": 15
        },
        {
            "firstKey": 12,
            "secondKey": 4,
            "layout": 15
        },
        {
            "firstKey": 12,
            "secondKey": 5,
            "layout": 15
        },
        {
            "firstKey": 12,
            "secondKey": 6,
            "layout": 15
        },
        {
            "firstKey": 12,
            "secondKey": 7,
            "layout": 15
        },
        {
            "firstKey": 12,
            "secondKey": 8,
            "layout": 11
        },
        {
            "firstKey": 12,
            "secondKey": 9,
            "layout": 11
        },
        {
            "firstKey": 12,
            "secondKey": 10,
            "layout": 8
        },
        {
            "firstKey": 12,
            "secondKey": 11,
            "layout": 0
        },
        {
            "firstKey": 12,
            "secondKey": 13,
            "layout": 9
        },
        {
            "firstKey": 12,
            "secondKey": 14,
            "layout": 9
        },
        {
            "firstKey": 12,
            "secondKey": 15,
            "layout": 9
        },
        {
            "firstKey": 12,
            "secondKey": 16,
            "layout": 9
        },
        {
            "firstKey": 12,
            "secondKey": 17,
            "layout": 9
        },
        {
            "firstKey": 12,
            "secondKey": 18,
            "layout": 12
        },
        {
            "firstKey": 12,
            "secondKey": 19,
            "layout": 12
        },
        {
            "firstKey": 12,
            "secondKey": 20,
            "layout": 12
        },
        {
            "firstKey": 12,
            "secondKey": 21,
            "layout": 12
        },
        {
            "firstKey": 12,
            "secondKey": 22,
            "layout": 12
        },
        {
            "firstKey": 12,
            "secondKey": 23,
            "layout": 12
        },
        {
            "firstKey": 12,
            "secondKey": 24,
            "layout": 12
        },
        {
            "firstKey": 12,
            "secondKey": 25,
            "layout": 12
        },
        {
            "firstKey": 12,
            "secondKey": 26,
            "layout": 12
        },
        {
            "firstKey": 13,
            "secondKey": 0,
            "layout": 13
        },
        {
            "firstKey": 13,
            "secondKey": 1,
            "layout": 13
        },
        {
            "firstKey": 13,
            "secondKey": 2,
            "layout": 13
        },
        {
            "firstKey": 13,
            "secondKey": 3,
            "layout": 13
        },
        {
            "firstKey": 13,
            "secondKey": 4,
            "layout": 13
        },
        {
            "firstKey": 13,
            "secondKey": 5,
            "layout": 13
        },
        {
            "firstKey": 13,
            "secondKey": 6,
            "layout": 13
        },
        {
            "firstKey": 13,
            "secondKey": 7,
            "layout": 13
        },
        {
            "firstKey": 13,
            "secondKey": 8,
            "layout": 9
        },
        {
            "firstKey": 13,
            "secondKey": 9,
            "layout": 9
        },
        {
            "firstKey": 13,
            "secondKey": 10,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 11,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 12,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 14,
            "layout": 1
        },
        {
            "firstKey": 13,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 13,
            "secondKey": 18,
            "layout": 10
        },
        {
            "firstKey": 13,
            "secondKey": 19,
            "layout": 10
        },
        {
            "firstKey": 13,
            "secondKey": 20,
            "layout": 10
        },
        {
            "firstKey": 13,
            "secondKey": 21,
            "layout": 10
        },
        {
            "firstKey": 13,
            "secondKey": 22,
            "layout": 10
        },
        {
            "firstKey": 13,
            "secondKey": 23,
            "layout": 10
        },
        {
            "firstKey": 13,
            "secondKey": 24,
            "layout": 10
        },
        {
            "firstKey": 13,
            "secondKey": 25,
            "layout": 10
        },
        {
            "firstKey": 13,
            "secondKey": 26,
            "layout": 10
        },
        {
            "firstKey": 14,
            "secondKey": 0,
            "layout": 16
        },
        {
            "firstKey": 14,
            "secondKey": 1,
            "layout": 16
        },
        {
            "firstKey": 14,
            "secondKey": 2,
            "layout": 16
        },
        {
            "firstKey": 14,
            "secondKey": 3,
            "layout": 16
        },
        {
            "firstKey": 14,
            "secondKey": 4,
            "layout": 16
        },
        {
            "firstKey": 14,
            "secondKey": 5,
            "layout": 16
        },
        {
            "firstKey": 14,
            "secondKey": 6,
            "layout": 16
        },
        {
            "firstKey": 14,
            "secondKey": 7,
            "layout": 16
        },
        {
            "firstKey": 14,
            "secondKey": 8,
            "layout": 12
        },
        {
            "firstKey": 14,
            "secondKey": 9,
            "layout": 12
        },
        {
            "firstKey": 14,
            "secondKey": 10,
            "layout": 10
        },
        {
            "firstKey": 14,
            "secondKey": 11,
            "layout": 10
        },
        {
            "firstKey": 14,
            "secondKey": 12,
            "layout": 10
        },
        {
            "firstKey": 14,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 14,
            "secondKey": 15,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 16,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 17,
            "layout": 7
        },
        {
            "firstKey": 14,
            "secondKey": 18,
            "layout": 13
        },
        {
            "firstKey": 14,
            "secondKey": 19,
            "layout": 13
        },
        {
            "firstKey": 14,
            "secondKey": 20,
            "layout": 13
        },
        {
            "firstKey": 14,
            "secondKey": 21,
            "layout": 13
        },
        {
            "firstKey": 14,
            "secondKey": 22,
            "layout": 13
        },
        {
            "firstKey": 14,
            "secondKey": 23,
            "layout": 13
        },
        {
            "firstKey": 14,
            "secondKey": 24,
            "layout": 13
        },
        {
            "firstKey": 14,
            "secondKey": 25,
            "layout": 13
        },
        {
            "firstKey": 14,
            "secondKey": 26,
            "layout": 13
        },
        {
            "firstKey": 15,
            "secondKey": 0,
            "layout": 17
        },
        {
            "firstKey": 15,
            "secondKey": 1,
            "layout": 17
        },
        {
            "firstKey": 15,
            "secondKey": 2,
            "layout": 17
        },
        {
            "firstKey": 15,
            "secondKey": 3,
            "layout": 17
        },
        {
            "firstKey": 15,
            "secondKey": 4,
            "layout": 17
        },
        {
            "firstKey": 15,
            "secondKey": 5,
            "layout": 17
        },
        {
            "firstKey": 15,
            "secondKey": 6,
            "layout": 17
        },
        {
            "firstKey": 15,
            "secondKey": 7,
            "layout": 17
        },
        {
            "firstKey": 15,
            "secondKey": 8,
            "layout": 13
        },
        {
            "firstKey": 15,
            "secondKey": 9,
            "layout": 13
        },
        {
            "firstKey": 15,
            "secondKey": 10,
            "layout": 11
        },
        {
            "firstKey": 15,
            "secondKey": 11,
            "layout": 11
        },
        {
            "firstKey": 15,
            "secondKey": 12,
            "layout": 11
        },
        {
            "firstKey": 15,
            "secondKey": 13,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 14,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 16,
            "layout": 4
        },
        {
            "firstKey": 15,
            "secondKey": 17,
            "layout": 8
        },
        {
            "firstKey": 15,
            "secondKey": 18,
            "layout": 14
        },
        {
            "firstKey": 15,
            "secondKey": 19,
            "layout": 14
        },
        {
            "firstKey": 15,
            "secondKey": 20,
            "layout": 14
        },
        {
            "firstKey": 15,
            "secondKey": 21,
            "layout": 14
        },
        {
            "firstKey": 15,
            "secondKey": 22,
            "layout": 14
        },
        {
            "firstKey": 15,
            "secondKey": 23,
            "layout": 14
        },
        {
            "firstKey": 15,
            "secondKey": 24,
            "layout": 14
        },
        {
            "firstKey": 15,
            "secondKey": 25,
            "layout": 14
        },
        {
            "firstKey": 15,
            "secondKey": 26,
            "layout": 14
        },
        {
            "firstKey": 16,
            "secondKey": 0,
            "layout": 13
        },
        {
            "firstKey": 16,
            "secondKey": 1,
            "layout": 13
        },
        {
            "firstKey": 16,
            "secondKey": 2,
            "layout": 13
        },
        {
            "firstKey": 16,
            "secondKey": 3,
            "layout": 13
        },
        {
            "firstKey": 16,
            "secondKey": 4,
            "layout": 13
        },
        {
            "firstKey": 16,
            "secondKey": 5,
            "layout": 13
        },
        {
            "firstKey": 16,
            "secondKey": 6,
            "layout": 13
        },
        {
            "firstKey": 16,
            "secondKey": 7,
            "layout": 13
        },
        {
            "firstKey": 16,
            "secondKey": 8,
            "layout": 9
        },
        {
            "firstKey": 16,
            "secondKey": 9,
            "layout": 9
        },
        {
            "firstKey": 16,
            "secondKey": 10,
            "layout": 7
        },
        {
            "firstKey": 16,
            "secondKey": 11,
            "layout": 7
        },
        {
            "firstKey": 16,
            "secondKey": 12,
            "layout": 7
        },
        {
            "firstKey": 16,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 16,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 16,
            "secondKey": 15,
            "layout": 0
        },
        {
            "firstKey": 16,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 18,
            "layout": 10
        },
        {
            "firstKey": 16,
            "secondKey": 19,
            "layout": 10
        },
        {
            "firstKey": 16,
            "secondKey": 20,
            "layout": 10
        },
        {
            "firstKey": 16,
            "secondKey": 21,
            "layout": 10
        },
        {
            "firstKey": 16,
            "secondKey": 22,
            "layout": 10
        },
        {
            "firstKey": 16,
            "secondKey": 23,
            "layout": 10
        },
        {
            "firstKey": 16,
            "secondKey": 24,
            "layout": 10
        },
        {
            "firstKey": 16,
            "secondKey": 25,
            "layout": 10
        },
        {
            "firstKey": 16,
            "secondKey": 26,
            "layout": 10
        },
        {
            "firstKey": 17,
            "secondKey": 0,
            "layout": 14
        },
        {
            "firstKey": 17,
            "secondKey": 1,
            "layout": 14
        },
        {
            "firstKey": 17,
            "secondKey": 2,
            "layout": 14
        },
        {
            "firstKey": 17,
            "secondKey": 3,
            "layout": 14
        },
        {
            "firstKey": 17,
            "secondKey": 4,
            "layout": 14
        },
        {
            "firstKey": 17,
            "secondKey": 5,
            "layout": 14
        },
        {
            "firstKey": 17,
            "secondKey": 6,
            "layout": 14
        },
        {
            "firstKey": 17,
            "secondKey": 7,
            "layout": 14
        },
        {
            "firstKey": 17,
            "secondKey": 8,
            "layout": 10
        },
        {
            "firstKey": 17,
            "secondKey": 9,
            "layout": 10
        },
        {
            "firstKey": 17,
            "secondKey": 10,
            "layout": 8
        },
        {
            "firstKey": 17,
            "secondKey": 11,
            "layout": 8
        },
        {
            "firstKey": 17,
            "secondKey": 12,
            "layout": 8
        },
        {
            "firstKey": 17,
            "secondKey": 13,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 14,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 15,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 16,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 18,
            "layout": 11
        },
        {
            "firstKey": 17,
            "secondKey": 19,
            "layout": 11
        },
        {
            "firstKey": 17,
            "secondKey": 20,
            "layout": 11
        },
        {
            "firstKey": 17,
            "secondKey": 21,
            "layout": 11
        },
        {
            "firstKey": 17,
            "secondKey": 22,
            "layout": 11
        },
        {
            "firstKey": 17,
            "secondKey": 23,
            "layout": 11
        },
        {
            "firstKey": 17,
            "secondKey": 24,
            "layout": 11
        },
        {
            "firstKey": 17,
            "secondKey": 25,
            "layout": 11
        },
        {
            "firstKey": 17,
            "secondKey": 26,
            "layout": 11
        },
        {
            "firstKey": 18,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 18,
            "secondKey": 1,
            "layout": 8
        },
        {
            "firstKey": 18,
            "secondKey": 2,
            "layout": 8
        },
        {
            "firstKey": 18,
            "secondKey": 3,
            "layout": 8
        },
        {
            "firstKey": 18,
            "secondKey": 4,
            "layout": 8
        },
        {
            "firstKey": 18,
            "secondKey": 5,
            "layout": 8
        },
        {
            "firstKey": 18,
            "secondKey": 6,
            "layout": 8
        },
        {
            "firstKey": 18,
            "secondKey": 7,
            "layout": 8
        },
        {
            "firstKey": 18,
            "secondKey": 8,
            "layout": 5
        },
        {
            "firstKey": 18,
            "secondKey": 9,
            "layout": 5
        },
        {
            "firstKey": 18,
            "secondKey": 10,
            "layout": 5
        },
        {
            "firstKey": 18,
            "secondKey": 11,
            "layout": 5
        },
        {
            "firstKey": 18,
            "secondKey": 12,
            "layout": 5
        },
        {
            "firstKey": 18,
            "secondKey": 13,
            "layout": 5
        },
        {
            "firstKey": 18,
            "secondKey": 14,
            "layout": 5
        },
        {
            "firstKey": 18,
            "secondKey": 15,
            "layout": 5
        },
        {
            "firstKey": 18,
            "secondKey": 16,
            "layout": 5
        },
        {
            "firstKey": 18,
            "secondKey": 17,
            "layout": 5
        },
        {
            "firstKey": 18,
            "secondKey": 19,
            "layout": 4
        },
        {
            "firstKey": 18,
            "secondKey": 20,
            "layout": 4
        },
        {
            "firstKey": 18,
            "secondKey": 21,
            "layout": 4
        },
        {
            "firstKey": 18,
            "secondKey": 22,
            "layout": 4
        },
        {
            "firstKey": 18,
            "secondKey": 23,
            "layout": 4
        },
        {
            "firstKey": 18,
            "secondKey": 24,
            "layout": 4
        },
        {
            "firstKey": 18,
            "secondKey": 25,
            "layout": 4
        },
        {
            "firstKey": 18,
            "secondKey": 26,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 19,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 19,
            "secondKey": 2,
            "layout": 7
        },
        {
            "firstKey": 19,
            "secondKey": 3,
            "layout": 7
        },
        {
            "firstKey": 19,
            "secondKey": 4,
            "layout": 7
        },
        {
            "firstKey": 19,
            "secondKey": 5,
            "layout": 7
        },
        {
            "firstKey": 19,
            "secondKey": 6,
            "layout": 7
        },
        {
            "firstKey": 19,
            "secondKey": 7,
            "layout": 7
        },
        {
            "firstKey": 19,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 14,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 15,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 16,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 18,
            "layout": 3
        },
        {
            "firstKey": 19,
            "secondKey": 20,
            "layout": 3
        },
        {
            "firstKey": 19,
            "secondKey": 21,
            "layout": 3
        },
        {
            "firstKey": 19,
            "secondKey": 22,
            "layout": 3
        },
        {
            "firstKey": 19,
            "secondKey": 23,
            "layout": 3
        },
        {
            "firstKey": 19,
            "secondKey": 24,
            "layout": 3
        },
        {
            "firstKey": 19,
            "secondKey": 25,
            "layout": 3
        },
        {
            "firstKey": 19,
            "secondKey": 26,
            "layout": 3
        },
        {
            "firstKey": 20,
            "secondKey": 0,
            "layout": 10
        },
        {
            "firstKey": 20,
            "secondKey": 1,
            "layout": 10
        },
        {
            "firstKey": 20,
            "secondKey": 2,
            "layout": 10
        },
        {
            "firstKey": 20,
            "secondKey": 3,
            "layout": 10
        },
        {
            "firstKey": 20,
            "secondKey": 4,
            "layout": 10
        },
        {
            "firstKey": 20,
            "secondKey": 5,
            "layout": 10
        },
        {
            "firstKey": 20,
            "secondKey": 6,
            "layout": 10
        },
        {
            "firstKey": 20,
            "secondKey": 7,
            "layout": 10
        },
        {
            "firstKey": 20,
            "secondKey": 8,
            "layout": 7
        },
        {
            "firstKey": 20,
            "secondKey": 9,
            "layout": 7
        },
        {
            "firstKey": 20,
            "secondKey": 10,
            "layout": 7
        },
        {
            "firstKey": 20,
            "secondKey": 11,
            "layout": 7
        },
        {
            "firstKey": 20,
            "secondKey": 12,
            "layout": 7
        },
        {
            "firstKey": 20,
            "secondKey": 13,
            "layout": 7
        },
        {
            "firstKey": 20,
            "secondKey": 14,
            "layout": 7
        },
        {
            "firstKey": 20,
            "secondKey": 15,
            "layout": 7
        },
        {
            "firstKey": 20,
            "secondKey": 16,
            "layout": 7
        },
        {
            "firstKey": 20,
            "secondKey": 17,
            "layout": 7
        },
        {
            "firstKey": 20,
            "secondKey": 18,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 19,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 21,
            "layout": 4
        },
        {
            "firstKey": 20,
            "secondKey": 22,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 23,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 24,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 25,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 26,
            "layout": 6
        },
        {
            "firstKey": 21,
            "secondKey": 0,
            "layout": 10
        },
        {
            "firstKey": 21,
            "secondKey": 1,
            "layout": 10
        },
        {
            "firstKey": 21,
            "secondKey": 2,
            "layout": 10
        },
        {
            "firstKey": 21,
            "secondKey": 3,
            "layout": 10
        },
        {
            "firstKey": 21,
            "secondKey": 4,
            "layout": 10
        },
        {
            "firstKey": 21,
            "secondKey": 5,
            "layout": 10
        },
        {
            "firstKey": 21,
            "secondKey": 6,
            "layout": 10
        },
        {
            "firstKey": 21,
            "secondKey": 7,
            "layout": 10
        },
        {
            "firstKey": 21,
            "secondKey": 8,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 9,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 10,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 11,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 12,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 13,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 14,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 15,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 16,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 17,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 18,
            "layout": 6
        },
        {
            "firstKey": 21,
            "secondKey": 19,
            "layout": 6
        },
        {
            "firstKey": 21,
            "secondKey": 20,
            "layout": 4
        },
        {
            "firstKey": 21,
            "secondKey": 22,
            "layout": 6
        },
        {
            "firstKey": 21,
            "secondKey": 23,
            "layout": 6
        },
        {
            "firstKey": 21,
            "secondKey": 24,
            "layout": 6
        },
        {
            "firstKey": 21,
            "secondKey": 25,
            "layout": 6
        },
        {
            "firstKey": 21,
            "secondKey": 26,
            "layout": 6
        },
        {
            "firstKey": 22,
            "secondKey": 0,
            "layout": 10
        },
        {
            "firstKey": 22,
            "secondKey": 1,
            "layout": 10
        },
        {
            "firstKey": 22,
            "secondKey": 2,
            "layout": 10
        },
        {
            "firstKey": 22,
            "secondKey": 3,
            "layout": 10
        },
        {
            "firstKey": 22,
            "secondKey": 4,
            "layout": 10
        },
        {
            "firstKey": 22,
            "secondKey": 5,
            "layout": 10
        },
        {
            "firstKey": 22,
            "secondKey": 6,
            "layout": 10
        },
        {
            "firstKey": 22,
            "secondKey": 7,
            "layout": 10
        },
        {
            "firstKey": 22,
            "secondKey": 8,
            "layout": 7
        },
        {
            "firstKey": 22,
            "secondKey": 9,
            "layout": 7
        },
        {
            "firstKey": 22,
            "secondKey": 10,
            "layout": 7
        },
        {
            "firstKey": 22,
            "secondKey": 11,
            "layout": 7
        },
        {
            "firstKey": 22,
            "secondKey": 12,
            "layout": 7
        },
        {
            "firstKey": 22,
            "secondKey": 13,
            "layout": 7
        },
        {
            "firstKey": 22,
            "secondKey": 14,
            "layout": 7
        },
        {
            "firstKey": 22,
            "secondKey": 15,
            "layout": 7
        },
        {
            "firstKey": 22,
            "secondKey": 16,
            "layout": 7
        },
        {
            "firstKey": 22,
            "secondKey": 17,
            "layout": 7
        },
        {
            "firstKey": 22,
            "secondKey": 18,
            "layout": 6
        },
        {
            "firstKey": 22,
            "secondKey": 19,
            "layout": 6
        },
        {
            "firstKey": 22,
            "secondKey": 20,
            "layout": 6
        },
        {
            "firstKey": 22,
            "secondKey": 21,
            "layout": 6
        },
        {
            "firstKey": 22,
            "secondKey": 23,
            "layout": 6
        },
        {
            "firstKey": 22,
            "secondKey": 24,
            "layout": 6
        },
        {
            "firstKey": 22,
            "secondKey": 25,
            "layout": 6
        },
        {
            "firstKey": 22,
            "secondKey": 26,
            "layout": 6
        },
        {
            "firstKey": 23,
            "secondKey": 0,
            "layout": 11
        },
        {
            "firstKey": 23,
            "secondKey": 1,
            "layout": 11
        },
        {
            "firstKey": 23,
            "secondKey": 2,
            "layout": 11
        },
        {
            "firstKey": 23,
            "secondKey": 3,
            "layout": 11
        },
        {
            "firstKey": 23,
            "secondKey": 4,
            "layout": 11
        },
        {
            "firstKey": 23,
            "secondKey": 5,
            "layout": 11
        },
        {
            "firstKey": 23,
            "secondKey": 6,
            "layout": 11
        },
        {
            "firstKey": 23,
            "secondKey": 7,
            "layout": 11
        },
        {
            "firstKey": 23,
            "secondKey": 8,
            "layout": 8
        },
        {
            "firstKey": 23,
            "secondKey": 9,
            "layout": 8
        },
        {
            "firstKey": 23,
            "secondKey": 10,
            "layout": 8
        },
        {
            "firstKey": 23,
            "secondKey": 11,
            "layout": 8
        },
        {
            "firstKey": 23,
            "secondKey": 12,
            "layout": 8
        },
        {
            "firstKey": 23,
            "secondKey": 13,
            "layout": 8
        },
        {
            "firstKey": 23,
            "secondKey": 14,
            "layout": 8
        },
        {
            "firstKey": 23,
            "secondKey": 15,
            "layout": 8
        },
        {
            "firstKey": 23,
            "secondKey": 16,
            "layout": 8
        },
        {
            "firstKey": 23,
            "secondKey": 17,
            "layout": 8
        },
        {
            "firstKey": 23,
            "secondKey": 18,
            "layout": 7
        },
        {
            "firstKey": 23,
            "secondKey": 19,
            "layout": 7
        },
        {
            "firstKey": 23,
            "secondKey": 20,
            "layout": 7
        },
        {
            "firstKey": 23,
            "secondKey": 21,
            "layout": 7
        },
        {
            "firstKey": 23,
            "secondKey": 22,
            "layout": 7
        },
        {
            "firstKey": 23,
            "secondKey": 24,
            "layout": 3
        },
        {
            "firstKey": 23,
            "secondKey": 25,
            "layout": 3
        },
        {
            "firstKey": 23,
            "secondKey": 26,
            "layout": 4
        },
        {
            "firstKey": 24,
            "secondKey": 0,
            "layout": 15
        },
        {
            "firstKey": 24,
            "secondKey": 1,
            "layout": 15
        },
        {
            "firstKey": 24,
            "secondKey": 2,
            "layout": 15
        },
        {
            "firstKey": 24,
            "secondKey": 3,
            "layout": 15
        },
        {
            "firstKey": 24,
            "secondKey": 4,
            "layout": 15
        },
        {
            "firstKey": 24,
            "secondKey": 5,
            "layout": 15
        },
        {
            "firstKey": 24,
            "secondKey": 6,
            "layout": 15
        },
        {
            "firstKey": 24,
            "secondKey": 7,
            "layout": 15
        },
        {
            "firstKey": 24,
            "secondKey": 8,
            "layout": 12
        },
        {
            "firstKey": 24,
            "secondKey": 9,
            "layout": 12
        },
        {
            "firstKey": 24,
            "secondKey": 10,
            "layout": 12
        },
        {
            "firstKey": 24,
            "secondKey": 11,
            "layout": 12
        },
        {
            "firstKey": 24,
            "secondKey": 12,
            "layout": 12
        },
        {
            "firstKey": 24,
            "secondKey": 13,
            "layout": 12
        },
        {
            "firstKey": 24,
            "secondKey": 14,
            "layout": 12
        },
        {
            "firstKey": 24,
            "secondKey": 15,
            "layout": 12
        },
        {
            "firstKey": 24,
            "secondKey": 16,
            "layout": 12
        },
        {
            "firstKey": 24,
            "secondKey": 17,
            "layout": 12
        },
        {
            "firstKey": 24,
            "secondKey": 18,
            "layout": 11
        },
        {
            "firstKey": 24,
            "secondKey": 19,
            "layout": 11
        },
        {
            "firstKey": 24,
            "secondKey": 20,
            "layout": 11
        },
        {
            "firstKey": 24,
            "secondKey": 21,
            "layout": 11
        },
        {
            "firstKey": 24,
            "secondKey": 22,
            "layout": 11
        },
        {
            "firstKey": 24,
            "secondKey": 23,
            "layout": 7
        },
        {
            "firstKey": 24,
            "secondKey": 25,
            "layout": 4
        },
        {
            "firstKey": 24,
            "secondKey": 26,
            "layout": 8
        },
        {
            "firstKey": 25,
            "secondKey": 0,
            "layout": 11
        },
        {
            "firstKey": 25,
            "secondKey": 1,
            "layout": 11
        },
        {
            "firstKey": 25,
            "secondKey": 2,
            "layout": 11
        },
        {
            "firstKey": 25,
            "secondKey": 3,
            "layout": 11
        },
        {
            "firstKey": 25,
            "secondKey": 4,
            "layout": 11
        },
        {
            "firstKey": 25,
            "secondKey": 5,
            "layout": 11
        },
        {
            "firstKey": 25,
            "secondKey": 6,
            "layout": 11
        },
        {
            "firstKey": 25,
            "secondKey": 7,
            "layout": 11
        },
        {
            "firstKey": 25,
            "secondKey": 8,
            "layout": 8
        },
        {
            "firstKey": 25,
            "secondKey": 9,
            "layout": 8
        },
        {
            "firstKey": 25,
            "secondKey": 10,
            "layout": 8
        },
        {
            "firstKey": 25,
            "secondKey": 11,
            "layout": 8
        },
        {
            "firstKey": 25,
            "secondKey": 12,
            "layout": 8
        },
        {
            "firstKey": 25,
            "secondKey": 13,
            "layout": 8
        },
        {
            "firstKey": 25,
            "secondKey": 14,
            "layout": 8
        },
        {
            "firstKey": 25,
            "secondKey": 15,
            "layout": 8
        },
        {
            "firstKey": 25,
            "secondKey": 16,
            "layout": 8
        },
        {
            "firstKey": 25,
            "secondKey": 17,
            "layout": 8
        },
        {
            "firstKey": 25,
            "secondKey": 18,
            "layout": 7
        },
        {
            "firstKey": 25,
            "secondKey": 19,
            "layout": 7
        },
        {
            "firstKey": 25,
            "secondKey": 20,
            "layout": 7
        },
        {
            "firstKey": 25,
            "secondKey": 21,
            "layout": 7
        },
        {
            "firstKey": 25,
            "secondKey": 22,
            "layout": 7
        },
        {
            "firstKey": 25,
            "secondKey": 23,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 24,
            "layout": 0
        },
        {
            "firstKey": 25,
            "secondKey": 26,
            "layout": 4
        },
        {
            "firstKey": 26,
            "secondKey": 0,
            "layout": 12
        },
        {
            "firstKey": 26,
            "secondKey": 1,
            "layout": 12
        },
        {
            "firstKey": 26,
            "secondKey": 2,
            "layout": 12
        },
        {
            "firstKey": 26,
            "secondKey": 3,
            "layout": 12
        },
        {
            "firstKey": 26,
            "secondKey": 4,
            "layout": 12
        },
        {
            "firstKey": 26,
            "secondKey": 5,
            "layout": 12
        },
        {
            "firstKey": 26,
            "secondKey": 6,
            "layout": 12
        },
        {
            "firstKey": 26,
            "secondKey": 7,
            "layout": 12
        },
        {
            "firstKey": 26,
            "secondKey": 8,
            "layout": 9
        },
        {
            "firstKey": 26,
            "secondKey": 9,
            "layout": 9
        },
        {
            "firstKey": 26,
            "secondKey": 10,
            "layout": 9
        },
        {
            "firstKey": 26,
            "secondKey": 11,
            "layout": 9
        },
        {
            "firstKey": 26,
            "secondKey": 12,
            "layout": 9
        },
        {
            "firstKey": 26,
            "secondKey": 13,
            "layout": 9
        },
        {
            "firstKey": 26,
            "secondKey": 14,
            "layout": 9
        },
        {
            "firstKey": 26,
            "secondKey": 15,
            "layout": 9
        },
        {
            "firstKey": 26,
            "secondKey": 16,
            "layout": 9
        },
        {
            "firstKey": 26,
            "secondKey": 17,
            "layout": 9
        },
        {
            "firstKey": 26,
            "secondKey": 18,
            "layout": 8
        },
        {
            "firstKey": 26,
            "secondKey": 19,
            "layout": 8
        },
        {
            "firstKey": 26,
            "secondKey": 20,
            "layout": 8
        },
        {
            "firstKey": 26,
            "secondKey": 21,
            "layout": 8
        },
        {
            "firstKey": 26,
            "secondKey": 22,
            "layout": 8
        },
        {
            "firstKey": 26,
            "secondKey": 23,
            "layout": 5
        },
        {
            "firstKey": 26,
            "secondKey": 24,
            "layout": 5
        },
        {
            "firstKey": 26,
            "secondKey": 25,
            "layout": 5
        }
    ]
}