{
    "id": 59,
    "expression": "SqlKind",
    "projectName": "apache@shardingsphere",
    "commitID": "2ea140b2e9b64670ae550ec45358f49f16c69cb2",
    "filePath": "shardingsphere-infra/shardingsphere-infra-federation/shardingsphere-infra-federation-optimizer/src/main/java/org/apache/shardingsphere/infra/federation/optimizer/converter/segment/projection/impl/ExpressionProjectionConverter.java",
    "occurrences": 1,
    "isArithmeticExpression": 0,
    "isGetTypeMethod": 0,
    "expressionList": [
        {
            "nodeContext": "SqlKind",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 60,
                "startColumnNumber": 16,
                "endLineNumber": 60,
                "endColumnNumber": 23
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 10,
                        "startLineNumber": 60,
                        "startColumnNumber": 16,
                        "endLineNumber": 60,
                        "endColumnNumber": 26
                    },
                    "nodeContext": "SqlKind.AS",
                    "nodeType": "QualifiedName",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 50,
                        "startLineNumber": 60,
                        "startColumnNumber": 16,
                        "endLineNumber": 60,
                        "endColumnNumber": 66
                    },
                    "nodeContext": "SqlKind.AS == sqlBasicCall.getOperator().getKind()",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 119,
                        "startLineNumber": 60,
                        "startColumnNumber": 16,
                        "endLineNumber": 60,
                        "endColumnNumber": 135
                    },
                    "nodeContext": "SqlKind.AS == sqlBasicCall.getOperator().getKind() && sqlBasicCall.getOperandList().get(0) instanceof SqlNumericLiteral",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 19,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 891,
                        "startLineNumber": 60,
                        "startColumnNumber": 12,
                        "endLineNumber": 68,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (SqlKind.AS == sqlBasicCall.getOperator().getKind() && sqlBasicCall.getOperandList().get(0) instanceof SqlNumericLiteral) {\n  SqlNode exprSqlNode=sqlBasicCall.getOperandList().get(0);\n  SqlNode aliasSqlNode=sqlBasicCall.getOperandList().get(1);\n  ExpressionSegment expressionSegment=new ExpressionConverter().convertToSQLSegment(exprSqlNode).orElse(null);\n  ExpressionProjectionSegment expressionProjectionSegment=new ExpressionProjectionSegment(getStartIndex(sqlBasicCall),getStopIndex(sqlBasicCall),exprSqlNode.toString(),expressionSegment);\n  expressionProjectionSegment.setAlias(new AliasSegment(getStartIndex(aliasSqlNode),getStopIndex(aliasSqlNode),new IdentifierValue(aliasSqlNode.toString())));\n  return Optional.of(expressionProjectionSegment);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 99,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1378,
                        "startLineNumber": 58,
                        "startColumnNumber": 45,
                        "endLineNumber": 72,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  SqlBasicCall sqlBasicCall=(SqlBasicCall)sqlNode;\n  if (SqlKind.AS == sqlBasicCall.getOperator().getKind() && sqlBasicCall.getOperandList().get(0) instanceof SqlNumericLiteral) {\n    SqlNode exprSqlNode=sqlBasicCall.getOperandList().get(0);\n    SqlNode aliasSqlNode=sqlBasicCall.getOperandList().get(1);\n    ExpressionSegment expressionSegment=new ExpressionConverter().convertToSQLSegment(exprSqlNode).orElse(null);\n    ExpressionProjectionSegment expressionProjectionSegment=new ExpressionProjectionSegment(getStartIndex(sqlBasicCall),getStopIndex(sqlBasicCall),exprSqlNode.toString(),expressionSegment);\n    expressionProjectionSegment.setAlias(new AliasSegment(getStartIndex(aliasSqlNode),getStopIndex(aliasSqlNode),new IdentifierValue(aliasSqlNode.toString())));\n    return Optional.of(expressionProjectionSegment);\n  }\n  ExpressionSegment expressionSegment=new ExpressionConverter().convertToSQLSegment(sqlNode).orElse(null);\n  String text=expressionSegment instanceof FunctionSegment ? ((FunctionSegment)expressionSegment).getText() : sqlNode.toString();\n  return Optional.of(new ExpressionProjectionSegment(getStartIndex(sqlNode),getStopIndex(sqlNode),text,expressionSegment));\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 158,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1415,
                        "startLineNumber": 58,
                        "startColumnNumber": 8,
                        "endLineNumber": 72,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (sqlNode instanceof SqlBasicCall) {\n  SqlBasicCall sqlBasicCall=(SqlBasicCall)sqlNode;\n  if (SqlKind.AS == sqlBasicCall.getOperator().getKind() && sqlBasicCall.getOperandList().get(0) instanceof SqlNumericLiteral) {\n    SqlNode exprSqlNode=sqlBasicCall.getOperandList().get(0);\n    SqlNode aliasSqlNode=sqlBasicCall.getOperandList().get(1);\n    ExpressionSegment expressionSegment=new ExpressionConverter().convertToSQLSegment(exprSqlNode).orElse(null);\n    ExpressionProjectionSegment expressionProjectionSegment=new ExpressionProjectionSegment(getStartIndex(sqlBasicCall),getStopIndex(sqlBasicCall),exprSqlNode.toString(),expressionSegment);\n    expressionProjectionSegment.setAlias(new AliasSegment(getStartIndex(aliasSqlNode),getStopIndex(aliasSqlNode),new IdentifierValue(aliasSqlNode.toString())));\n    return Optional.of(expressionProjectionSegment);\n  }\n  ExpressionSegment expressionSegment=new ExpressionConverter().convertToSQLSegment(sqlNode).orElse(null);\n  String text=expressionSegment instanceof FunctionSegment ? ((FunctionSegment)expressionSegment).getText() : sqlNode.toString();\n  return Optional.of(new ExpressionProjectionSegment(getStartIndex(sqlNode),getStopIndex(sqlNode),text,expressionSegment));\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 163,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1464,
                        "startLineNumber": 57,
                        "startColumnNumber": 92,
                        "endLineNumber": 74,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (sqlNode instanceof SqlBasicCall) {\n    SqlBasicCall sqlBasicCall=(SqlBasicCall)sqlNode;\n    if (SqlKind.AS == sqlBasicCall.getOperator().getKind() && sqlBasicCall.getOperandList().get(0) instanceof SqlNumericLiteral) {\n      SqlNode exprSqlNode=sqlBasicCall.getOperandList().get(0);\n      SqlNode aliasSqlNode=sqlBasicCall.getOperandList().get(1);\n      ExpressionSegment expressionSegment=new ExpressionConverter().convertToSQLSegment(exprSqlNode).orElse(null);\n      ExpressionProjectionSegment expressionProjectionSegment=new ExpressionProjectionSegment(getStartIndex(sqlBasicCall),getStopIndex(sqlBasicCall),exprSqlNode.toString(),expressionSegment);\n      expressionProjectionSegment.setAlias(new AliasSegment(getStartIndex(aliasSqlNode),getStopIndex(aliasSqlNode),new IdentifierValue(aliasSqlNode.toString())));\n      return Optional.of(expressionProjectionSegment);\n    }\n    ExpressionSegment expressionSegment=new ExpressionConverter().convertToSQLSegment(sqlNode).orElse(null);\n    String text=expressionSegment instanceof FunctionSegment ? ((FunctionSegment)expressionSegment).getText() : sqlNode.toString();\n    return Optional.of(new ExpressionProjectionSegment(getStartIndex(sqlNode),getStopIndex(sqlNode),text,expressionSegment));\n  }\n  return Optional.empty();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 168,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1566,
                        "startLineNumber": 56,
                        "startColumnNumber": 4,
                        "endLineNumber": 74,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public Optional<ExpressionProjectionSegment> convertToSQLSegment(final SqlNode sqlNode){\n  if (sqlNode instanceof SqlBasicCall) {\n    SqlBasicCall sqlBasicCall=(SqlBasicCall)sqlNode;\n    if (SqlKind.AS == sqlBasicCall.getOperator().getKind() && sqlBasicCall.getOperandList().get(0) instanceof SqlNumericLiteral) {\n      SqlNode exprSqlNode=sqlBasicCall.getOperandList().get(0);\n      SqlNode aliasSqlNode=sqlBasicCall.getOperandList().get(1);\n      ExpressionSegment expressionSegment=new ExpressionConverter().convertToSQLSegment(exprSqlNode).orElse(null);\n      ExpressionProjectionSegment expressionProjectionSegment=new ExpressionProjectionSegment(getStartIndex(sqlBasicCall),getStopIndex(sqlBasicCall),exprSqlNode.toString(),expressionSegment);\n      expressionProjectionSegment.setAlias(new AliasSegment(getStartIndex(aliasSqlNode),getStopIndex(aliasSqlNode),new IdentifierValue(aliasSqlNode.toString())));\n      return Optional.of(expressionProjectionSegment);\n    }\n    ExpressionSegment expressionSegment=new ExpressionConverter().convertToSQLSegment(sqlNode).orElse(null);\n    String text=expressionSegment instanceof FunctionSegment ? ((FunctionSegment)expressionSegment).getText() : sqlNode.toString();\n    return Optional.of(new ExpressionProjectionSegment(getStartIndex(sqlNode),getStopIndex(sqlNode),text,expressionSegment));\n  }\n  return Optional.empty();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 183,
                    "astHeight": 13
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 119,
                    "startLineNumber": 60,
                    "startColumnNumber": 16,
                    "endLineNumber": 60,
                    "endColumnNumber": 135
                },
                "nodeContext": "SqlKind.AS == sqlBasicCall.getOperator().getKind() && sqlBasicCall.getOperandList().get(0) instanceof SqlNumericLiteral",
                "nodeType": "InfixExpression",
                "astNodeNumber": 19,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": null
        }
    ],
    "positionList": [
        {
            "charLength": 7,
            "startLineNumber": 60,
            "startColumnNumber": 16,
            "endLineNumber": 60,
            "endColumnNumber": 23
        }
    ],
    "layoutRelationDataList": []
}