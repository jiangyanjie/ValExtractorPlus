{
    "id": 1024,
    "expression": "flowFile",
    "projectName": "nifi",
    "commitID": "4d533a99b3790ec842a7230fd6cae0d59158c2b5",
    "filePath": "nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/HandleHttpRequest.java",
    "occurrences": 7,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "flowFile",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 8,
                "startLineNumber": 495,
                "startColumnNumber": 68,
                "endLineNumber": 495,
                "endColumnNumber": 76
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 54,
                        "startLineNumber": 495,
                        "startColumnNumber": 23,
                        "endLineNumber": 495,
                        "endColumnNumber": 77
                    },
                    "nodeContext": "session.importFrom(request.getInputStream(),flowFile)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 65,
                        "startLineNumber": 495,
                        "startColumnNumber": 12,
                        "endLineNumber": 495,
                        "endColumnNumber": 77
                    },
                    "nodeContext": "flowFile=session.importFrom(request.getInputStream(),flowFile)",
                    "nodeType": "Assignment",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 66,
                        "startLineNumber": 495,
                        "startColumnNumber": 12,
                        "endLineNumber": 495,
                        "endColumnNumber": 78
                    },
                    "nodeContext": "flowFile=session.importFrom(request.getInputStream(),flowFile);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 10,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 90,
                        "startLineNumber": 494,
                        "startColumnNumber": 12,
                        "endLineNumber": 496,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  flowFile=session.importFrom(request.getInputStream(),flowFile);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 11,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 350,
                        "startLineNumber": 494,
                        "startColumnNumber": 8,
                        "endLineNumber": 501,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  flowFile=session.importFrom(request.getInputStream(),flowFile);\n}\n catch (final IOException e) {\n  getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n  session.remove(flowFile);\n  return;\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 41,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8324,
                        "startLineNumber": 476,
                        "startColumnNumber": 110,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 956,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8444,
                        "startLineNumber": 475,
                        "startColumnNumber": 4,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void onTrigger(final ProcessContext context,final ProcessSession session) throws ProcessException {\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 974,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 66,
                    "startLineNumber": 495,
                    "startColumnNumber": 12,
                    "endLineNumber": 495,
                    "endColumnNumber": 78
                },
                "nodeContext": "flowFile=session.importFrom(request.getInputStream(),flowFile);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 10,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.flowfile.FlowFile"
        },
        {
            "nodeContext": "flowFile",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 8,
                "startLineNumber": 499,
                "startColumnNumber": 27,
                "endLineNumber": 499,
                "endColumnNumber": 35
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 24,
                        "startLineNumber": 499,
                        "startColumnNumber": 12,
                        "endLineNumber": 499,
                        "endColumnNumber": 36
                    },
                    "nodeContext": "session.remove(flowFile)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 25,
                        "startLineNumber": 499,
                        "startColumnNumber": 12,
                        "endLineNumber": 499,
                        "endColumnNumber": 37
                    },
                    "nodeContext": "session.remove(flowFile);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
                    "nodePosition": {
                        "charLength": 227,
                        "startLineNumber": 496,
                        "startColumnNumber": 38,
                        "endLineNumber": 501,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n  session.remove(flowFile);\n  return;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 23,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
                    "nodePosition": {
                        "charLength": 255,
                        "startLineNumber": 496,
                        "startColumnNumber": 10,
                        "endLineNumber": 501,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "catch (final IOException e) {\n  getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n  session.remove(flowFile);\n  return;\n}\n",
                    "nodeType": "CatchClause",
                    "astNodeNumber": 29,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 350,
                        "startLineNumber": 494,
                        "startColumnNumber": 8,
                        "endLineNumber": 501,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  flowFile=session.importFrom(request.getInputStream(),flowFile);\n}\n catch (final IOException e) {\n  getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n  session.remove(flowFile);\n  return;\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 41,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8324,
                        "startLineNumber": 476,
                        "startColumnNumber": 110,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 956,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8444,
                        "startLineNumber": 475,
                        "startColumnNumber": 4,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void onTrigger(final ProcessContext context,final ProcessSession session) throws ProcessException {\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 974,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 25,
                    "startLineNumber": 499,
                    "startColumnNumber": 12,
                    "endLineNumber": 499,
                    "endColumnNumber": 37
                },
                "nodeContext": "session.remove(flowFile);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.flowfile.FlowFile"
        },
        {
            "nodeContext": "flowFile",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 8,
                "startLineNumber": 606,
                "startColumnNumber": 44,
                "endLineNumber": 606,
                "endColumnNumber": 52
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 46,
                        "startLineNumber": 606,
                        "startColumnNumber": 19,
                        "endLineNumber": 606,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "session.putAllAttributes(flowFile,attributes)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 57,
                        "startLineNumber": 606,
                        "startColumnNumber": 8,
                        "endLineNumber": 606,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "flowFile=session.putAllAttributes(flowFile,attributes)",
                    "nodeType": "Assignment",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 58,
                        "startLineNumber": 606,
                        "startColumnNumber": 8,
                        "endLineNumber": 606,
                        "endColumnNumber": 66
                    },
                    "nodeContext": "flowFile=session.putAllAttributes(flowFile,attributes);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8324,
                        "startLineNumber": 476,
                        "startColumnNumber": 110,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 956,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8444,
                        "startLineNumber": 475,
                        "startColumnNumber": 4,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void onTrigger(final ProcessContext context,final ProcessSession session) throws ProcessException {\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 974,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 58,
                    "startLineNumber": 606,
                    "startColumnNumber": 8,
                    "endLineNumber": 606,
                    "endColumnNumber": 66
                },
                "nodeContext": "flowFile=session.putAllAttributes(flowFile,attributes);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.flowfile.FlowFile"
        },
        {
            "nodeContext": "flowFile",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 8,
                "startLineNumber": 624,
                "startColumnNumber": 27,
                "endLineNumber": 624,
                "endColumnNumber": 35
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 24,
                        "startLineNumber": 624,
                        "startColumnNumber": 12,
                        "endLineNumber": 624,
                        "endColumnNumber": 36
                    },
                    "nodeContext": "session.remove(flowFile)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 25,
                        "startLineNumber": 624,
                        "startColumnNumber": 12,
                        "endLineNumber": 624,
                        "endColumnNumber": 37
                    },
                    "nodeContext": "session.remove(flowFile);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 745,
                        "startLineNumber": 611,
                        "startColumnNumber": 25,
                        "endLineNumber": 626,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n  try {\n    container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n    container.getResponse().flushBuffer();\n    container.getContext().complete();\n  }\n catch (  final Exception e) {\n    getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n  }\n  session.remove(flowFile);\n  return;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 70,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 762,
                        "startLineNumber": 611,
                        "startColumnNumber": 8,
                        "endLineNumber": 626,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (!registered) {\n  getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n  try {\n    container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n    container.getResponse().flushBuffer();\n    container.getContext().complete();\n  }\n catch (  final Exception e) {\n    getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n  }\n  session.remove(flowFile);\n  return;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 73,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8324,
                        "startLineNumber": 476,
                        "startColumnNumber": 110,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 956,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8444,
                        "startLineNumber": 475,
                        "startColumnNumber": 4,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void onTrigger(final ProcessContext context,final ProcessSession session) throws ProcessException {\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 974,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 25,
                    "startLineNumber": 624,
                    "startColumnNumber": 12,
                    "endLineNumber": 624,
                    "endColumnNumber": 37
                },
                "nodeContext": "session.remove(flowFile);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.flowfile.FlowFile"
        },
        {
            "nodeContext": "flowFile",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 8,
                "startLineNumber": 629,
                "startColumnNumber": 48,
                "endLineNumber": 629,
                "endColumnNumber": 56
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 191,
                        "startLineNumber": 629,
                        "startColumnNumber": 8,
                        "endLineNumber": 629,
                        "endColumnNumber": 199
                    },
                    "nodeContext": "session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 25,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 192,
                        "startLineNumber": 629,
                        "startColumnNumber": 8,
                        "endLineNumber": 629,
                        "endColumnNumber": 200
                    },
                    "nodeContext": "session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 26,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8324,
                        "startLineNumber": 476,
                        "startColumnNumber": 110,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 956,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8444,
                        "startLineNumber": 475,
                        "startColumnNumber": 4,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void onTrigger(final ProcessContext context,final ProcessSession session) throws ProcessException {\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 974,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 192,
                    "startLineNumber": 629,
                    "startColumnNumber": 8,
                    "endLineNumber": 629,
                    "endColumnNumber": 200
                },
                "nodeContext": "session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 26,
                "astHeight": 7
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.flowfile.FlowFile"
        },
        {
            "nodeContext": "flowFile",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 8,
                "startLineNumber": 630,
                "startColumnNumber": 25,
                "endLineNumber": 630,
                "endColumnNumber": 33
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 39,
                        "startLineNumber": 630,
                        "startColumnNumber": 8,
                        "endLineNumber": 630,
                        "endColumnNumber": 47
                    },
                    "nodeContext": "session.transfer(flowFile,REL_SUCCESS)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 40,
                        "startLineNumber": 630,
                        "startColumnNumber": 8,
                        "endLineNumber": 630,
                        "endColumnNumber": 48
                    },
                    "nodeContext": "session.transfer(flowFile,REL_SUCCESS);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8324,
                        "startLineNumber": 476,
                        "startColumnNumber": 110,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 956,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8444,
                        "startLineNumber": 475,
                        "startColumnNumber": 4,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void onTrigger(final ProcessContext context,final ProcessSession session) throws ProcessException {\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 974,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 40,
                    "startLineNumber": 630,
                    "startColumnNumber": 8,
                    "endLineNumber": 630,
                    "endColumnNumber": 48
                },
                "nodeContext": "session.transfer(flowFile,REL_SUCCESS);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 6,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.flowfile.FlowFile"
        },
        {
            "nodeContext": "flowFile",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 8,
                "startLineNumber": 631,
                "startColumnNumber": 88,
                "endLineNumber": 631,
                "endColumnNumber": 96
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ArrayCreation,initializer]",
                    "nodePosition": {
                        "charLength": 35,
                        "startLineNumber": 631,
                        "startColumnNumber": 87,
                        "endLineNumber": 631,
                        "endColumnNumber": 122
                    },
                    "nodeContext": "{flowFile,request.getRemoteAddr()}",
                    "nodeType": "ArrayInitializer",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 47,
                        "startLineNumber": 631,
                        "startColumnNumber": 75,
                        "endLineNumber": 631,
                        "endColumnNumber": 122
                    },
                    "nodeContext": "new Object[]{flowFile,request.getRemoteAddr()}",
                    "nodeType": "ArrayCreation",
                    "astNodeNumber": 10,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 115,
                        "startLineNumber": 631,
                        "startColumnNumber": 8,
                        "endLineNumber": 631,
                        "endColumnNumber": 123
                    },
                    "nodeContext": "getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()})",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 15,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 116,
                        "startLineNumber": 631,
                        "startColumnNumber": 8,
                        "endLineNumber": 631,
                        "endColumnNumber": 124
                    },
                    "nodeContext": "getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 16,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8324,
                        "startLineNumber": 476,
                        "startColumnNumber": 110,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 956,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8444,
                        "startLineNumber": 475,
                        "startColumnNumber": 4,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void onTrigger(final ProcessContext context,final ProcessSession session) throws ProcessException {\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 974,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 116,
                    "startLineNumber": 631,
                    "startColumnNumber": 8,
                    "endLineNumber": 631,
                    "endColumnNumber": 124
                },
                "nodeContext": "getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 16,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.flowfile.FlowFile"
        }
    ],
    "positionList": [
        {
            "charLength": 8,
            "startLineNumber": 495,
            "startColumnNumber": 68,
            "endLineNumber": 495,
            "endColumnNumber": 76
        },
        {
            "charLength": 8,
            "startLineNumber": 499,
            "startColumnNumber": 27,
            "endLineNumber": 499,
            "endColumnNumber": 35
        },
        {
            "charLength": 8,
            "startLineNumber": 606,
            "startColumnNumber": 44,
            "endLineNumber": 606,
            "endColumnNumber": 52
        },
        {
            "charLength": 8,
            "startLineNumber": 624,
            "startColumnNumber": 27,
            "endLineNumber": 624,
            "endColumnNumber": 35
        },
        {
            "charLength": 8,
            "startLineNumber": 629,
            "startColumnNumber": 48,
            "endLineNumber": 629,
            "endColumnNumber": 56
        },
        {
            "charLength": 8,
            "startLineNumber": 630,
            "startColumnNumber": 25,
            "endLineNumber": 630,
            "endColumnNumber": 33
        },
        {
            "charLength": 8,
            "startLineNumber": 631,
            "startColumnNumber": 88,
            "endLineNumber": 631,
            "endColumnNumber": 96
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 0,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 0,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 0,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 1,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 1,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 1,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 5,
            "layout": 4
        }
    ]
}