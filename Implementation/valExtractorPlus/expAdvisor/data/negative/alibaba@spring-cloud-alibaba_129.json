{
    "id": 129,
    "expression": "beanName",
    "projectName": "alibaba@spring-cloud-alibaba",
    "commitID": "b059e1f8e3cdeae8b05de679e9132509e20375a3",
    "filePath": "spring-cloud-alibaba-sentinel/src/main/java/org/springframework/cloud/alibaba/sentinel/custom/SentinelBeanPostProcessor.java",
    "occurrences": 8,
    "isArithmeticExpression": 0,
    "isGetTypeMethod": 0,
    "expressionList": [
        {
            "nodeContext": "beanName",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 8,
                "startLineNumber": 103,
                "startColumnNumber": 17,
                "endLineNumber": 103,
                "endColumnNumber": 25
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 124,
                        "startLineNumber": 101,
                        "startColumnNumber": 3,
                        "endLineNumber": 103,
                        "endColumnNumber": 26
                    },
                    "nodeContext": "logger.error(\"{} class attribute exists but {} method attribute is not exists in bean[{}]\",type,type,beanName)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 125,
                        "startLineNumber": 101,
                        "startColumnNumber": 3,
                        "endLineNumber": 103,
                        "endColumnNumber": 27
                    },
                    "nodeContext": "logger.error(\"{} class attribute exists but {} method attribute is not exists in bean[{}]\",type,type,beanName);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 286,
                        "startLineNumber": 100,
                        "startColumnNumber": 68,
                        "endLineNumber": 106,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  logger.error(\"{} class attribute exists but {} method attribute is not exists in bean[{}]\",type,type,beanName);\n  throw new IllegalArgumentException(type + \" class attribute exists but \" + type+ \" method attribute is not exists in bean[\"+ beanName+ \"]\");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 20,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 713,
                        "startLineNumber": 100,
                        "startColumnNumber": 2,
                        "endLineNumber": 113,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (blockClass != void.class && StringUtils.isEmpty(blockMethod)) {\n  logger.error(\"{} class attribute exists but {} method attribute is not exists in bean[{}]\",type,type,beanName);\n  throw new IllegalArgumentException(type + \" class attribute exists but \" + type+ \" method attribute is not exists in bean[\"+ beanName+ \"]\");\n}\n else if (blockClass == void.class && !StringUtils.isEmpty(blockMethod)) {\n  logger.error(\"{} method attribute exists but {} class attribute is not exists in bean[{}]\",type,type,beanName);\n  throw new IllegalArgumentException(type + \" method attribute exists but \" + type+ \" class attribute is not exists in bean[\"+ beanName+ \"]\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 61,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2330,
                        "startLineNumber": 96,
                        "startColumnNumber": 33,
                        "endLineNumber": 145,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "{\n  if (blockClass == void.class && StringUtils.isEmpty(blockMethod)) {\n    return;\n  }\n  if (blockClass != void.class && StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} class attribute exists but {} method attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" class attribute exists but \" + type+ \" method attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n else   if (blockClass == void.class && !StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} method attribute exists but {} class attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" method attribute exists but \" + type+ \" class attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n  Class[] args=new Class[]{HttpRequest.class,byte[].class,ClientHttpRequestExecution.class,BlockException.class};\n  String argsStr=Arrays.toString(Arrays.stream(args).map(clazz -> clazz.getSimpleName()).toArray());\n  Method foundMethod=ClassUtils.getStaticMethod(blockClass,blockMethod,args);\n  if (foundMethod == null) {\n    logger.error(\"{} static method can not be found in bean[{}]. The right method signature is {}#{}{}, please check your class name, method name and arguments\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" static method can not be found in bean[\" + beanName+ \"]. The right method signature is \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr+ \", please check your class name, method name and arguments\");\n  }\n  if (!ClientHttpResponse.class.isAssignableFrom(foundMethod.getReturnType())) {\n    logger.error(\"{} method return value in bean[{}] is not ClientHttpResponse: {}#{}{}\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" method return value in bean[\" + beanName+ \"] is not ClientHttpResponse: \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr);\n  }\n  if (type.equals(SentinelConstants.BLOCK_TYPE)) {\n    BlockClassRegistry.updateBlockHandlerFor(blockClass,blockMethod,foundMethod);\n  }\n else {\n    BlockClassRegistry.updateFallbackFor(blockClass,blockMethod,foundMethod);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 227,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2441,
                        "startLineNumber": 95,
                        "startColumnNumber": 1,
                        "endLineNumber": 145,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "private void checkBlock4RestTemplate(Class<?> blockClass,String blockMethod,String beanName,String type){\n  if (blockClass == void.class && StringUtils.isEmpty(blockMethod)) {\n    return;\n  }\n  if (blockClass != void.class && StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} class attribute exists but {} method attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" class attribute exists but \" + type+ \" method attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n else   if (blockClass == void.class && !StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} method attribute exists but {} class attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" method attribute exists but \" + type+ \" class attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n  Class[] args=new Class[]{HttpRequest.class,byte[].class,ClientHttpRequestExecution.class,BlockException.class};\n  String argsStr=Arrays.toString(Arrays.stream(args).map(clazz -> clazz.getSimpleName()).toArray());\n  Method foundMethod=ClassUtils.getStaticMethod(blockClass,blockMethod,args);\n  if (foundMethod == null) {\n    logger.error(\"{} static method can not be found in bean[{}]. The right method signature is {}#{}{}, please check your class name, method name and arguments\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" static method can not be found in bean[\" + beanName+ \"]. The right method signature is \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr+ \", please check your class name, method name and arguments\");\n  }\n  if (!ClientHttpResponse.class.isAssignableFrom(foundMethod.getReturnType())) {\n    logger.error(\"{} method return value in bean[{}] is not ClientHttpResponse: {}#{}{}\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" method return value in bean[\" + beanName+ \"] is not ClientHttpResponse: \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr);\n  }\n  if (type.equals(SentinelConstants.BLOCK_TYPE)) {\n    BlockClassRegistry.updateBlockHandlerFor(blockClass,blockMethod,foundMethod);\n  }\n else {\n    BlockClassRegistry.updateFallbackFor(blockClass,blockMethod,foundMethod);\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 249,
                    "astHeight": 10
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                "nodePosition": {
                    "charLength": 124,
                    "startLineNumber": 101,
                    "startColumnNumber": 3,
                    "endLineNumber": 103,
                    "endColumnNumber": 26
                },
                "nodeContext": "logger.error(\"{} class attribute exists but {} method attribute is not exists in bean[{}]\",type,type,beanName)",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 7,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "java.lang.String"
        },
        {
            "nodeContext": "beanName",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 8,
                "startLineNumber": 105,
                "startColumnNumber": 59,
                "endLineNumber": 105,
                "endColumnNumber": 67
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
                    "nodePosition": {
                        "charLength": 111,
                        "startLineNumber": 104,
                        "startColumnNumber": 38,
                        "endLineNumber": 105,
                        "endColumnNumber": 73
                    },
                    "nodeContext": "type + \" class attribute exists but \" + type+ \" method attribute is not exists in bean[\"+ beanName+ \"]\"",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 7,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
                    "nodePosition": {
                        "charLength": 141,
                        "startLineNumber": 104,
                        "startColumnNumber": 9,
                        "endLineNumber": 105,
                        "endColumnNumber": 74
                    },
                    "nodeContext": "new IllegalArgumentException(type + \" class attribute exists but \" + type+ \" method attribute is not exists in bean[\"+ beanName+ \"]\")",
                    "nodeType": "ClassInstanceCreation",
                    "astNodeNumber": 10,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 148,
                        "startLineNumber": 104,
                        "startColumnNumber": 3,
                        "endLineNumber": 105,
                        "endColumnNumber": 75
                    },
                    "nodeContext": "throw new IllegalArgumentException(type + \" class attribute exists but \" + type+ \" method attribute is not exists in bean[\"+ beanName+ \"]\");\n",
                    "nodeType": "ThrowStatement",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 286,
                        "startLineNumber": 100,
                        "startColumnNumber": 68,
                        "endLineNumber": 106,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  logger.error(\"{} class attribute exists but {} method attribute is not exists in bean[{}]\",type,type,beanName);\n  throw new IllegalArgumentException(type + \" class attribute exists but \" + type+ \" method attribute is not exists in bean[\"+ beanName+ \"]\");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 20,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 713,
                        "startLineNumber": 100,
                        "startColumnNumber": 2,
                        "endLineNumber": 113,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (blockClass != void.class && StringUtils.isEmpty(blockMethod)) {\n  logger.error(\"{} class attribute exists but {} method attribute is not exists in bean[{}]\",type,type,beanName);\n  throw new IllegalArgumentException(type + \" class attribute exists but \" + type+ \" method attribute is not exists in bean[\"+ beanName+ \"]\");\n}\n else if (blockClass == void.class && !StringUtils.isEmpty(blockMethod)) {\n  logger.error(\"{} method attribute exists but {} class attribute is not exists in bean[{}]\",type,type,beanName);\n  throw new IllegalArgumentException(type + \" method attribute exists but \" + type+ \" class attribute is not exists in bean[\"+ beanName+ \"]\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 61,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2330,
                        "startLineNumber": 96,
                        "startColumnNumber": 33,
                        "endLineNumber": 145,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "{\n  if (blockClass == void.class && StringUtils.isEmpty(blockMethod)) {\n    return;\n  }\n  if (blockClass != void.class && StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} class attribute exists but {} method attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" class attribute exists but \" + type+ \" method attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n else   if (blockClass == void.class && !StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} method attribute exists but {} class attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" method attribute exists but \" + type+ \" class attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n  Class[] args=new Class[]{HttpRequest.class,byte[].class,ClientHttpRequestExecution.class,BlockException.class};\n  String argsStr=Arrays.toString(Arrays.stream(args).map(clazz -> clazz.getSimpleName()).toArray());\n  Method foundMethod=ClassUtils.getStaticMethod(blockClass,blockMethod,args);\n  if (foundMethod == null) {\n    logger.error(\"{} static method can not be found in bean[{}]. The right method signature is {}#{}{}, please check your class name, method name and arguments\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" static method can not be found in bean[\" + beanName+ \"]. The right method signature is \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr+ \", please check your class name, method name and arguments\");\n  }\n  if (!ClientHttpResponse.class.isAssignableFrom(foundMethod.getReturnType())) {\n    logger.error(\"{} method return value in bean[{}] is not ClientHttpResponse: {}#{}{}\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" method return value in bean[\" + beanName+ \"] is not ClientHttpResponse: \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr);\n  }\n  if (type.equals(SentinelConstants.BLOCK_TYPE)) {\n    BlockClassRegistry.updateBlockHandlerFor(blockClass,blockMethod,foundMethod);\n  }\n else {\n    BlockClassRegistry.updateFallbackFor(blockClass,blockMethod,foundMethod);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 227,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2441,
                        "startLineNumber": 95,
                        "startColumnNumber": 1,
                        "endLineNumber": 145,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "private void checkBlock4RestTemplate(Class<?> blockClass,String blockMethod,String beanName,String type){\n  if (blockClass == void.class && StringUtils.isEmpty(blockMethod)) {\n    return;\n  }\n  if (blockClass != void.class && StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} class attribute exists but {} method attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" class attribute exists but \" + type+ \" method attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n else   if (blockClass == void.class && !StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} method attribute exists but {} class attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" method attribute exists but \" + type+ \" class attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n  Class[] args=new Class[]{HttpRequest.class,byte[].class,ClientHttpRequestExecution.class,BlockException.class};\n  String argsStr=Arrays.toString(Arrays.stream(args).map(clazz -> clazz.getSimpleName()).toArray());\n  Method foundMethod=ClassUtils.getStaticMethod(blockClass,blockMethod,args);\n  if (foundMethod == null) {\n    logger.error(\"{} static method can not be found in bean[{}]. The right method signature is {}#{}{}, please check your class name, method name and arguments\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" static method can not be found in bean[\" + beanName+ \"]. The right method signature is \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr+ \", please check your class name, method name and arguments\");\n  }\n  if (!ClientHttpResponse.class.isAssignableFrom(foundMethod.getReturnType())) {\n    logger.error(\"{} method return value in bean[{}] is not ClientHttpResponse: {}#{}{}\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" method return value in bean[\" + beanName+ \"] is not ClientHttpResponse: \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr);\n  }\n  if (type.equals(SentinelConstants.BLOCK_TYPE)) {\n    BlockClassRegistry.updateBlockHandlerFor(blockClass,blockMethod,foundMethod);\n  }\n else {\n    BlockClassRegistry.updateFallbackFor(blockClass,blockMethod,foundMethod);\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 249,
                    "astHeight": 10
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
                "nodePosition": {
                    "charLength": 111,
                    "startLineNumber": 104,
                    "startColumnNumber": 38,
                    "endLineNumber": 105,
                    "endColumnNumber": 73
                },
                "nodeContext": "type + \" class attribute exists but \" + type+ \" method attribute is not exists in bean[\"+ beanName+ \"]\"",
                "nodeType": "InfixExpression",
                "astNodeNumber": 7,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "java.lang.String"
        },
        {
            "nodeContext": "beanName",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 8,
                "startLineNumber": 110,
                "startColumnNumber": 17,
                "endLineNumber": 110,
                "endColumnNumber": 25
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 124,
                        "startLineNumber": 108,
                        "startColumnNumber": 3,
                        "endLineNumber": 110,
                        "endColumnNumber": 26
                    },
                    "nodeContext": "logger.error(\"{} method attribute exists but {} class attribute is not exists in bean[{}]\",type,type,beanName)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 125,
                        "startLineNumber": 108,
                        "startColumnNumber": 3,
                        "endLineNumber": 110,
                        "endColumnNumber": 27
                    },
                    "nodeContext": "logger.error(\"{} method attribute exists but {} class attribute is not exists in bean[{}]\",type,type,beanName);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 286,
                        "startLineNumber": 107,
                        "startColumnNumber": 74,
                        "endLineNumber": 113,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  logger.error(\"{} method attribute exists but {} class attribute is not exists in bean[{}]\",type,type,beanName);\n  throw new IllegalArgumentException(type + \" method attribute exists but \" + type+ \" class attribute is not exists in bean[\"+ beanName+ \"]\");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 20,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 353,
                        "startLineNumber": 107,
                        "startColumnNumber": 7,
                        "endLineNumber": 113,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (blockClass == void.class && !StringUtils.isEmpty(blockMethod)) {\n  logger.error(\"{} method attribute exists but {} class attribute is not exists in bean[{}]\",type,type,beanName);\n  throw new IllegalArgumentException(type + \" method attribute exists but \" + type+ \" class attribute is not exists in bean[\"+ beanName+ \"]\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 31,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 713,
                        "startLineNumber": 100,
                        "startColumnNumber": 2,
                        "endLineNumber": 113,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (blockClass != void.class && StringUtils.isEmpty(blockMethod)) {\n  logger.error(\"{} class attribute exists but {} method attribute is not exists in bean[{}]\",type,type,beanName);\n  throw new IllegalArgumentException(type + \" class attribute exists but \" + type+ \" method attribute is not exists in bean[\"+ beanName+ \"]\");\n}\n else if (blockClass == void.class && !StringUtils.isEmpty(blockMethod)) {\n  logger.error(\"{} method attribute exists but {} class attribute is not exists in bean[{}]\",type,type,beanName);\n  throw new IllegalArgumentException(type + \" method attribute exists but \" + type+ \" class attribute is not exists in bean[\"+ beanName+ \"]\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 61,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2330,
                        "startLineNumber": 96,
                        "startColumnNumber": 33,
                        "endLineNumber": 145,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "{\n  if (blockClass == void.class && StringUtils.isEmpty(blockMethod)) {\n    return;\n  }\n  if (blockClass != void.class && StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} class attribute exists but {} method attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" class attribute exists but \" + type+ \" method attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n else   if (blockClass == void.class && !StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} method attribute exists but {} class attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" method attribute exists but \" + type+ \" class attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n  Class[] args=new Class[]{HttpRequest.class,byte[].class,ClientHttpRequestExecution.class,BlockException.class};\n  String argsStr=Arrays.toString(Arrays.stream(args).map(clazz -> clazz.getSimpleName()).toArray());\n  Method foundMethod=ClassUtils.getStaticMethod(blockClass,blockMethod,args);\n  if (foundMethod == null) {\n    logger.error(\"{} static method can not be found in bean[{}]. The right method signature is {}#{}{}, please check your class name, method name and arguments\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" static method can not be found in bean[\" + beanName+ \"]. The right method signature is \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr+ \", please check your class name, method name and arguments\");\n  }\n  if (!ClientHttpResponse.class.isAssignableFrom(foundMethod.getReturnType())) {\n    logger.error(\"{} method return value in bean[{}] is not ClientHttpResponse: {}#{}{}\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" method return value in bean[\" + beanName+ \"] is not ClientHttpResponse: \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr);\n  }\n  if (type.equals(SentinelConstants.BLOCK_TYPE)) {\n    BlockClassRegistry.updateBlockHandlerFor(blockClass,blockMethod,foundMethod);\n  }\n else {\n    BlockClassRegistry.updateFallbackFor(blockClass,blockMethod,foundMethod);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 227,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2441,
                        "startLineNumber": 95,
                        "startColumnNumber": 1,
                        "endLineNumber": 145,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "private void checkBlock4RestTemplate(Class<?> blockClass,String blockMethod,String beanName,String type){\n  if (blockClass == void.class && StringUtils.isEmpty(blockMethod)) {\n    return;\n  }\n  if (blockClass != void.class && StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} class attribute exists but {} method attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" class attribute exists but \" + type+ \" method attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n else   if (blockClass == void.class && !StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} method attribute exists but {} class attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" method attribute exists but \" + type+ \" class attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n  Class[] args=new Class[]{HttpRequest.class,byte[].class,ClientHttpRequestExecution.class,BlockException.class};\n  String argsStr=Arrays.toString(Arrays.stream(args).map(clazz -> clazz.getSimpleName()).toArray());\n  Method foundMethod=ClassUtils.getStaticMethod(blockClass,blockMethod,args);\n  if (foundMethod == null) {\n    logger.error(\"{} static method can not be found in bean[{}]. The right method signature is {}#{}{}, please check your class name, method name and arguments\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" static method can not be found in bean[\" + beanName+ \"]. The right method signature is \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr+ \", please check your class name, method name and arguments\");\n  }\n  if (!ClientHttpResponse.class.isAssignableFrom(foundMethod.getReturnType())) {\n    logger.error(\"{} method return value in bean[{}] is not ClientHttpResponse: {}#{}{}\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" method return value in bean[\" + beanName+ \"] is not ClientHttpResponse: \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr);\n  }\n  if (type.equals(SentinelConstants.BLOCK_TYPE)) {\n    BlockClassRegistry.updateBlockHandlerFor(blockClass,blockMethod,foundMethod);\n  }\n else {\n    BlockClassRegistry.updateFallbackFor(blockClass,blockMethod,foundMethod);\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 249,
                    "astHeight": 10
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                "nodePosition": {
                    "charLength": 124,
                    "startLineNumber": 108,
                    "startColumnNumber": 3,
                    "endLineNumber": 110,
                    "endColumnNumber": 26
                },
                "nodeContext": "logger.error(\"{} method attribute exists but {} class attribute is not exists in bean[{}]\",type,type,beanName)",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 7,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "java.lang.String"
        },
        {
            "nodeContext": "beanName",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 8,
                "startLineNumber": 112,
                "startColumnNumber": 58,
                "endLineNumber": 112,
                "endColumnNumber": 66
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
                    "nodePosition": {
                        "charLength": 111,
                        "startLineNumber": 111,
                        "startColumnNumber": 38,
                        "endLineNumber": 112,
                        "endColumnNumber": 72
                    },
                    "nodeContext": "type + \" method attribute exists but \" + type+ \" class attribute is not exists in bean[\"+ beanName+ \"]\"",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 7,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
                    "nodePosition": {
                        "charLength": 141,
                        "startLineNumber": 111,
                        "startColumnNumber": 9,
                        "endLineNumber": 112,
                        "endColumnNumber": 73
                    },
                    "nodeContext": "new IllegalArgumentException(type + \" method attribute exists but \" + type+ \" class attribute is not exists in bean[\"+ beanName+ \"]\")",
                    "nodeType": "ClassInstanceCreation",
                    "astNodeNumber": 10,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 148,
                        "startLineNumber": 111,
                        "startColumnNumber": 3,
                        "endLineNumber": 112,
                        "endColumnNumber": 74
                    },
                    "nodeContext": "throw new IllegalArgumentException(type + \" method attribute exists but \" + type+ \" class attribute is not exists in bean[\"+ beanName+ \"]\");\n",
                    "nodeType": "ThrowStatement",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 286,
                        "startLineNumber": 107,
                        "startColumnNumber": 74,
                        "endLineNumber": 113,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  logger.error(\"{} method attribute exists but {} class attribute is not exists in bean[{}]\",type,type,beanName);\n  throw new IllegalArgumentException(type + \" method attribute exists but \" + type+ \" class attribute is not exists in bean[\"+ beanName+ \"]\");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 20,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 353,
                        "startLineNumber": 107,
                        "startColumnNumber": 7,
                        "endLineNumber": 113,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (blockClass == void.class && !StringUtils.isEmpty(blockMethod)) {\n  logger.error(\"{} method attribute exists but {} class attribute is not exists in bean[{}]\",type,type,beanName);\n  throw new IllegalArgumentException(type + \" method attribute exists but \" + type+ \" class attribute is not exists in bean[\"+ beanName+ \"]\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 31,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 713,
                        "startLineNumber": 100,
                        "startColumnNumber": 2,
                        "endLineNumber": 113,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (blockClass != void.class && StringUtils.isEmpty(blockMethod)) {\n  logger.error(\"{} class attribute exists but {} method attribute is not exists in bean[{}]\",type,type,beanName);\n  throw new IllegalArgumentException(type + \" class attribute exists but \" + type+ \" method attribute is not exists in bean[\"+ beanName+ \"]\");\n}\n else if (blockClass == void.class && !StringUtils.isEmpty(blockMethod)) {\n  logger.error(\"{} method attribute exists but {} class attribute is not exists in bean[{}]\",type,type,beanName);\n  throw new IllegalArgumentException(type + \" method attribute exists but \" + type+ \" class attribute is not exists in bean[\"+ beanName+ \"]\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 61,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2330,
                        "startLineNumber": 96,
                        "startColumnNumber": 33,
                        "endLineNumber": 145,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "{\n  if (blockClass == void.class && StringUtils.isEmpty(blockMethod)) {\n    return;\n  }\n  if (blockClass != void.class && StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} class attribute exists but {} method attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" class attribute exists but \" + type+ \" method attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n else   if (blockClass == void.class && !StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} method attribute exists but {} class attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" method attribute exists but \" + type+ \" class attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n  Class[] args=new Class[]{HttpRequest.class,byte[].class,ClientHttpRequestExecution.class,BlockException.class};\n  String argsStr=Arrays.toString(Arrays.stream(args).map(clazz -> clazz.getSimpleName()).toArray());\n  Method foundMethod=ClassUtils.getStaticMethod(blockClass,blockMethod,args);\n  if (foundMethod == null) {\n    logger.error(\"{} static method can not be found in bean[{}]. The right method signature is {}#{}{}, please check your class name, method name and arguments\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" static method can not be found in bean[\" + beanName+ \"]. The right method signature is \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr+ \", please check your class name, method name and arguments\");\n  }\n  if (!ClientHttpResponse.class.isAssignableFrom(foundMethod.getReturnType())) {\n    logger.error(\"{} method return value in bean[{}] is not ClientHttpResponse: {}#{}{}\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" method return value in bean[\" + beanName+ \"] is not ClientHttpResponse: \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr);\n  }\n  if (type.equals(SentinelConstants.BLOCK_TYPE)) {\n    BlockClassRegistry.updateBlockHandlerFor(blockClass,blockMethod,foundMethod);\n  }\n else {\n    BlockClassRegistry.updateFallbackFor(blockClass,blockMethod,foundMethod);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 227,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2441,
                        "startLineNumber": 95,
                        "startColumnNumber": 1,
                        "endLineNumber": 145,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "private void checkBlock4RestTemplate(Class<?> blockClass,String blockMethod,String beanName,String type){\n  if (blockClass == void.class && StringUtils.isEmpty(blockMethod)) {\n    return;\n  }\n  if (blockClass != void.class && StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} class attribute exists but {} method attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" class attribute exists but \" + type+ \" method attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n else   if (blockClass == void.class && !StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} method attribute exists but {} class attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" method attribute exists but \" + type+ \" class attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n  Class[] args=new Class[]{HttpRequest.class,byte[].class,ClientHttpRequestExecution.class,BlockException.class};\n  String argsStr=Arrays.toString(Arrays.stream(args).map(clazz -> clazz.getSimpleName()).toArray());\n  Method foundMethod=ClassUtils.getStaticMethod(blockClass,blockMethod,args);\n  if (foundMethod == null) {\n    logger.error(\"{} static method can not be found in bean[{}]. The right method signature is {}#{}{}, please check your class name, method name and arguments\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" static method can not be found in bean[\" + beanName+ \"]. The right method signature is \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr+ \", please check your class name, method name and arguments\");\n  }\n  if (!ClientHttpResponse.class.isAssignableFrom(foundMethod.getReturnType())) {\n    logger.error(\"{} method return value in bean[{}] is not ClientHttpResponse: {}#{}{}\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" method return value in bean[\" + beanName+ \"] is not ClientHttpResponse: \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr);\n  }\n  if (type.equals(SentinelConstants.BLOCK_TYPE)) {\n    BlockClassRegistry.updateBlockHandlerFor(blockClass,blockMethod,foundMethod);\n  }\n else {\n    BlockClassRegistry.updateFallbackFor(blockClass,blockMethod,foundMethod);\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 249,
                    "astHeight": 10
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
                "nodePosition": {
                    "charLength": 111,
                    "startLineNumber": 111,
                    "startColumnNumber": 38,
                    "endLineNumber": 112,
                    "endColumnNumber": 72
                },
                "nodeContext": "type + \" method attribute exists but \" + type+ \" class attribute is not exists in bean[\"+ beanName+ \"]\"",
                "nodeType": "InfixExpression",
                "astNodeNumber": 7,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "java.lang.String"
        },
        {
            "nodeContext": "beanName",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 8,
                "startLineNumber": 122,
                "startColumnNumber": 11,
                "endLineNumber": 122,
                "endColumnNumber": 19
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 228,
                        "startLineNumber": 120,
                        "startColumnNumber": 3,
                        "endLineNumber": 122,
                        "endColumnNumber": 64
                    },
                    "nodeContext": "logger.error(\"{} static method can not be found in bean[{}]. The right method signature is {}#{}{}, please check your class name, method name and arguments\",type,beanName,blockClass.getName(),blockMethod,argsStr)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 11,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 229,
                        "startLineNumber": 120,
                        "startColumnNumber": 3,
                        "endLineNumber": 122,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "logger.error(\"{} static method can not be found in bean[{}]. The right method signature is {}#{}{}, please check your class name, method name and arguments\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 12,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 512,
                        "startLineNumber": 119,
                        "startColumnNumber": 27,
                        "endLineNumber": 128,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  logger.error(\"{} static method can not be found in bean[{}]. The right method signature is {}#{}{}, please check your class name, method name and arguments\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n  throw new IllegalArgumentException(type + \" static method can not be found in bean[\" + beanName+ \"]. The right method signature is \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr+ \", please check your class name, method name and arguments\");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 29,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 537,
                        "startLineNumber": 119,
                        "startColumnNumber": 2,
                        "endLineNumber": 128,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (foundMethod == null) {\n  logger.error(\"{} static method can not be found in bean[{}]. The right method signature is {}#{}{}, please check your class name, method name and arguments\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n  throw new IllegalArgumentException(type + \" static method can not be found in bean[\" + beanName+ \"]. The right method signature is \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr+ \", please check your class name, method name and arguments\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 33,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2330,
                        "startLineNumber": 96,
                        "startColumnNumber": 33,
                        "endLineNumber": 145,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "{\n  if (blockClass == void.class && StringUtils.isEmpty(blockMethod)) {\n    return;\n  }\n  if (blockClass != void.class && StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} class attribute exists but {} method attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" class attribute exists but \" + type+ \" method attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n else   if (blockClass == void.class && !StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} method attribute exists but {} class attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" method attribute exists but \" + type+ \" class attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n  Class[] args=new Class[]{HttpRequest.class,byte[].class,ClientHttpRequestExecution.class,BlockException.class};\n  String argsStr=Arrays.toString(Arrays.stream(args).map(clazz -> clazz.getSimpleName()).toArray());\n  Method foundMethod=ClassUtils.getStaticMethod(blockClass,blockMethod,args);\n  if (foundMethod == null) {\n    logger.error(\"{} static method can not be found in bean[{}]. The right method signature is {}#{}{}, please check your class name, method name and arguments\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" static method can not be found in bean[\" + beanName+ \"]. The right method signature is \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr+ \", please check your class name, method name and arguments\");\n  }\n  if (!ClientHttpResponse.class.isAssignableFrom(foundMethod.getReturnType())) {\n    logger.error(\"{} method return value in bean[{}] is not ClientHttpResponse: {}#{}{}\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" method return value in bean[\" + beanName+ \"] is not ClientHttpResponse: \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr);\n  }\n  if (type.equals(SentinelConstants.BLOCK_TYPE)) {\n    BlockClassRegistry.updateBlockHandlerFor(blockClass,blockMethod,foundMethod);\n  }\n else {\n    BlockClassRegistry.updateFallbackFor(blockClass,blockMethod,foundMethod);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 227,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2441,
                        "startLineNumber": 95,
                        "startColumnNumber": 1,
                        "endLineNumber": 145,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "private void checkBlock4RestTemplate(Class<?> blockClass,String blockMethod,String beanName,String type){\n  if (blockClass == void.class && StringUtils.isEmpty(blockMethod)) {\n    return;\n  }\n  if (blockClass != void.class && StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} class attribute exists but {} method attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" class attribute exists but \" + type+ \" method attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n else   if (blockClass == void.class && !StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} method attribute exists but {} class attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" method attribute exists but \" + type+ \" class attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n  Class[] args=new Class[]{HttpRequest.class,byte[].class,ClientHttpRequestExecution.class,BlockException.class};\n  String argsStr=Arrays.toString(Arrays.stream(args).map(clazz -> clazz.getSimpleName()).toArray());\n  Method foundMethod=ClassUtils.getStaticMethod(blockClass,blockMethod,args);\n  if (foundMethod == null) {\n    logger.error(\"{} static method can not be found in bean[{}]. The right method signature is {}#{}{}, please check your class name, method name and arguments\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" static method can not be found in bean[\" + beanName+ \"]. The right method signature is \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr+ \", please check your class name, method name and arguments\");\n  }\n  if (!ClientHttpResponse.class.isAssignableFrom(foundMethod.getReturnType())) {\n    logger.error(\"{} method return value in bean[{}] is not ClientHttpResponse: {}#{}{}\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" method return value in bean[\" + beanName+ \"] is not ClientHttpResponse: \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr);\n  }\n  if (type.equals(SentinelConstants.BLOCK_TYPE)) {\n    BlockClassRegistry.updateBlockHandlerFor(blockClass,blockMethod,foundMethod);\n  }\n else {\n    BlockClassRegistry.updateFallbackFor(blockClass,blockMethod,foundMethod);\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 249,
                    "astHeight": 10
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                "nodePosition": {
                    "charLength": 228,
                    "startLineNumber": 120,
                    "startColumnNumber": 3,
                    "endLineNumber": 122,
                    "endColumnNumber": 64
                },
                "nodeContext": "logger.error(\"{} static method can not be found in bean[{}]. The right method signature is {}#{}{}, please check your class name, method name and arguments\",type,beanName,blockClass.getName(),blockMethod,argsStr)",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 11,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.lang.String"
        },
        {
            "nodeContext": "beanName",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 8,
                "startLineNumber": 124,
                "startColumnNumber": 52,
                "endLineNumber": 124,
                "endColumnNumber": 60
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
                    "nodePosition": {
                        "charLength": 233,
                        "startLineNumber": 123,
                        "startColumnNumber": 38,
                        "endLineNumber": 127,
                        "endColumnNumber": 66
                    },
                    "nodeContext": "type + \" static method can not be found in bean[\" + beanName+ \"]. The right method signature is \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr+ \", please check your class name, method name and arguments\"",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 12,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
                    "nodePosition": {
                        "charLength": 263,
                        "startLineNumber": 123,
                        "startColumnNumber": 9,
                        "endLineNumber": 127,
                        "endColumnNumber": 67
                    },
                    "nodeContext": "new IllegalArgumentException(type + \" static method can not be found in bean[\" + beanName+ \"]. The right method signature is \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr+ \", please check your class name, method name and arguments\")",
                    "nodeType": "ClassInstanceCreation",
                    "astNodeNumber": 15,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 270,
                        "startLineNumber": 123,
                        "startColumnNumber": 3,
                        "endLineNumber": 127,
                        "endColumnNumber": 68
                    },
                    "nodeContext": "throw new IllegalArgumentException(type + \" static method can not be found in bean[\" + beanName+ \"]. The right method signature is \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr+ \", please check your class name, method name and arguments\");\n",
                    "nodeType": "ThrowStatement",
                    "astNodeNumber": 16,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 512,
                        "startLineNumber": 119,
                        "startColumnNumber": 27,
                        "endLineNumber": 128,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  logger.error(\"{} static method can not be found in bean[{}]. The right method signature is {}#{}{}, please check your class name, method name and arguments\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n  throw new IllegalArgumentException(type + \" static method can not be found in bean[\" + beanName+ \"]. The right method signature is \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr+ \", please check your class name, method name and arguments\");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 29,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 537,
                        "startLineNumber": 119,
                        "startColumnNumber": 2,
                        "endLineNumber": 128,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (foundMethod == null) {\n  logger.error(\"{} static method can not be found in bean[{}]. The right method signature is {}#{}{}, please check your class name, method name and arguments\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n  throw new IllegalArgumentException(type + \" static method can not be found in bean[\" + beanName+ \"]. The right method signature is \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr+ \", please check your class name, method name and arguments\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 33,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2330,
                        "startLineNumber": 96,
                        "startColumnNumber": 33,
                        "endLineNumber": 145,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "{\n  if (blockClass == void.class && StringUtils.isEmpty(blockMethod)) {\n    return;\n  }\n  if (blockClass != void.class && StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} class attribute exists but {} method attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" class attribute exists but \" + type+ \" method attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n else   if (blockClass == void.class && !StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} method attribute exists but {} class attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" method attribute exists but \" + type+ \" class attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n  Class[] args=new Class[]{HttpRequest.class,byte[].class,ClientHttpRequestExecution.class,BlockException.class};\n  String argsStr=Arrays.toString(Arrays.stream(args).map(clazz -> clazz.getSimpleName()).toArray());\n  Method foundMethod=ClassUtils.getStaticMethod(blockClass,blockMethod,args);\n  if (foundMethod == null) {\n    logger.error(\"{} static method can not be found in bean[{}]. The right method signature is {}#{}{}, please check your class name, method name and arguments\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" static method can not be found in bean[\" + beanName+ \"]. The right method signature is \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr+ \", please check your class name, method name and arguments\");\n  }\n  if (!ClientHttpResponse.class.isAssignableFrom(foundMethod.getReturnType())) {\n    logger.error(\"{} method return value in bean[{}] is not ClientHttpResponse: {}#{}{}\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" method return value in bean[\" + beanName+ \"] is not ClientHttpResponse: \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr);\n  }\n  if (type.equals(SentinelConstants.BLOCK_TYPE)) {\n    BlockClassRegistry.updateBlockHandlerFor(blockClass,blockMethod,foundMethod);\n  }\n else {\n    BlockClassRegistry.updateFallbackFor(blockClass,blockMethod,foundMethod);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 227,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2441,
                        "startLineNumber": 95,
                        "startColumnNumber": 1,
                        "endLineNumber": 145,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "private void checkBlock4RestTemplate(Class<?> blockClass,String blockMethod,String beanName,String type){\n  if (blockClass == void.class && StringUtils.isEmpty(blockMethod)) {\n    return;\n  }\n  if (blockClass != void.class && StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} class attribute exists but {} method attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" class attribute exists but \" + type+ \" method attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n else   if (blockClass == void.class && !StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} method attribute exists but {} class attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" method attribute exists but \" + type+ \" class attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n  Class[] args=new Class[]{HttpRequest.class,byte[].class,ClientHttpRequestExecution.class,BlockException.class};\n  String argsStr=Arrays.toString(Arrays.stream(args).map(clazz -> clazz.getSimpleName()).toArray());\n  Method foundMethod=ClassUtils.getStaticMethod(blockClass,blockMethod,args);\n  if (foundMethod == null) {\n    logger.error(\"{} static method can not be found in bean[{}]. The right method signature is {}#{}{}, please check your class name, method name and arguments\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" static method can not be found in bean[\" + beanName+ \"]. The right method signature is \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr+ \", please check your class name, method name and arguments\");\n  }\n  if (!ClientHttpResponse.class.isAssignableFrom(foundMethod.getReturnType())) {\n    logger.error(\"{} method return value in bean[{}] is not ClientHttpResponse: {}#{}{}\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" method return value in bean[\" + beanName+ \"] is not ClientHttpResponse: \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr);\n  }\n  if (type.equals(SentinelConstants.BLOCK_TYPE)) {\n    BlockClassRegistry.updateBlockHandlerFor(blockClass,blockMethod,foundMethod);\n  }\n else {\n    BlockClassRegistry.updateFallbackFor(blockClass,blockMethod,foundMethod);\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 249,
                    "astHeight": 10
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
                "nodePosition": {
                    "charLength": 233,
                    "startLineNumber": 123,
                    "startColumnNumber": 38,
                    "endLineNumber": 127,
                    "endColumnNumber": 66
                },
                "nodeContext": "type + \" static method can not be found in bean[\" + beanName+ \"]. The right method signature is \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr+ \", please check your class name, method name and arguments\"",
                "nodeType": "InfixExpression",
                "astNodeNumber": 12,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.lang.String"
        },
        {
            "nodeContext": "beanName",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 8,
                "startLineNumber": 133,
                "startColumnNumber": 11,
                "endLineNumber": 133,
                "endColumnNumber": 19
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 156,
                        "startLineNumber": 131,
                        "startColumnNumber": 3,
                        "endLineNumber": 133,
                        "endColumnNumber": 64
                    },
                    "nodeContext": "logger.error(\"{} method return value in bean[{}] is not ClientHttpResponse: {}#{}{}\",type,beanName,blockClass.getName(),blockMethod,argsStr)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 11,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 157,
                        "startLineNumber": 131,
                        "startColumnNumber": 3,
                        "endLineNumber": 133,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "logger.error(\"{} method return value in bean[{}] is not ClientHttpResponse: {}#{}{}\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 12,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 353,
                        "startLineNumber": 130,
                        "startColumnNumber": 79,
                        "endLineNumber": 137,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  logger.error(\"{} method return value in bean[{}] is not ClientHttpResponse: {}#{}{}\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n  throw new IllegalArgumentException(type + \" method return value in bean[\" + beanName+ \"] is not ClientHttpResponse: \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 28,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 430,
                        "startLineNumber": 130,
                        "startColumnNumber": 2,
                        "endLineNumber": 137,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (!ClientHttpResponse.class.isAssignableFrom(foundMethod.getReturnType())) {\n  logger.error(\"{} method return value in bean[{}] is not ClientHttpResponse: {}#{}{}\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n  throw new IllegalArgumentException(type + \" method return value in bean[\" + beanName+ \"] is not ClientHttpResponse: \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 38,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2330,
                        "startLineNumber": 96,
                        "startColumnNumber": 33,
                        "endLineNumber": 145,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "{\n  if (blockClass == void.class && StringUtils.isEmpty(blockMethod)) {\n    return;\n  }\n  if (blockClass != void.class && StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} class attribute exists but {} method attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" class attribute exists but \" + type+ \" method attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n else   if (blockClass == void.class && !StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} method attribute exists but {} class attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" method attribute exists but \" + type+ \" class attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n  Class[] args=new Class[]{HttpRequest.class,byte[].class,ClientHttpRequestExecution.class,BlockException.class};\n  String argsStr=Arrays.toString(Arrays.stream(args).map(clazz -> clazz.getSimpleName()).toArray());\n  Method foundMethod=ClassUtils.getStaticMethod(blockClass,blockMethod,args);\n  if (foundMethod == null) {\n    logger.error(\"{} static method can not be found in bean[{}]. The right method signature is {}#{}{}, please check your class name, method name and arguments\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" static method can not be found in bean[\" + beanName+ \"]. The right method signature is \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr+ \", please check your class name, method name and arguments\");\n  }\n  if (!ClientHttpResponse.class.isAssignableFrom(foundMethod.getReturnType())) {\n    logger.error(\"{} method return value in bean[{}] is not ClientHttpResponse: {}#{}{}\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" method return value in bean[\" + beanName+ \"] is not ClientHttpResponse: \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr);\n  }\n  if (type.equals(SentinelConstants.BLOCK_TYPE)) {\n    BlockClassRegistry.updateBlockHandlerFor(blockClass,blockMethod,foundMethod);\n  }\n else {\n    BlockClassRegistry.updateFallbackFor(blockClass,blockMethod,foundMethod);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 227,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2441,
                        "startLineNumber": 95,
                        "startColumnNumber": 1,
                        "endLineNumber": 145,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "private void checkBlock4RestTemplate(Class<?> blockClass,String blockMethod,String beanName,String type){\n  if (blockClass == void.class && StringUtils.isEmpty(blockMethod)) {\n    return;\n  }\n  if (blockClass != void.class && StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} class attribute exists but {} method attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" class attribute exists but \" + type+ \" method attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n else   if (blockClass == void.class && !StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} method attribute exists but {} class attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" method attribute exists but \" + type+ \" class attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n  Class[] args=new Class[]{HttpRequest.class,byte[].class,ClientHttpRequestExecution.class,BlockException.class};\n  String argsStr=Arrays.toString(Arrays.stream(args).map(clazz -> clazz.getSimpleName()).toArray());\n  Method foundMethod=ClassUtils.getStaticMethod(blockClass,blockMethod,args);\n  if (foundMethod == null) {\n    logger.error(\"{} static method can not be found in bean[{}]. The right method signature is {}#{}{}, please check your class name, method name and arguments\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" static method can not be found in bean[\" + beanName+ \"]. The right method signature is \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr+ \", please check your class name, method name and arguments\");\n  }\n  if (!ClientHttpResponse.class.isAssignableFrom(foundMethod.getReturnType())) {\n    logger.error(\"{} method return value in bean[{}] is not ClientHttpResponse: {}#{}{}\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" method return value in bean[\" + beanName+ \"] is not ClientHttpResponse: \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr);\n  }\n  if (type.equals(SentinelConstants.BLOCK_TYPE)) {\n    BlockClassRegistry.updateBlockHandlerFor(blockClass,blockMethod,foundMethod);\n  }\n else {\n    BlockClassRegistry.updateFallbackFor(blockClass,blockMethod,foundMethod);\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 249,
                    "astHeight": 10
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                "nodePosition": {
                    "charLength": 156,
                    "startLineNumber": 131,
                    "startColumnNumber": 3,
                    "endLineNumber": 133,
                    "endColumnNumber": 64
                },
                "nodeContext": "logger.error(\"{} method return value in bean[{}] is not ClientHttpResponse: {}#{}{}\",type,beanName,blockClass.getName(),blockMethod,argsStr)",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 11,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.lang.String"
        },
        {
            "nodeContext": "beanName",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 8,
                "startLineNumber": 135,
                "startColumnNumber": 7,
                "endLineNumber": 135,
                "endColumnNumber": 15
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
                    "nodePosition": {
                        "charLength": 146,
                        "startLineNumber": 134,
                        "startColumnNumber": 38,
                        "endLineNumber": 136,
                        "endColumnNumber": 34
                    },
                    "nodeContext": "type + \" method return value in bean[\" + beanName+ \"] is not ClientHttpResponse: \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 11,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
                    "nodePosition": {
                        "charLength": 176,
                        "startLineNumber": 134,
                        "startColumnNumber": 9,
                        "endLineNumber": 136,
                        "endColumnNumber": 35
                    },
                    "nodeContext": "new IllegalArgumentException(type + \" method return value in bean[\" + beanName+ \"] is not ClientHttpResponse: \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr)",
                    "nodeType": "ClassInstanceCreation",
                    "astNodeNumber": 14,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 183,
                        "startLineNumber": 134,
                        "startColumnNumber": 3,
                        "endLineNumber": 136,
                        "endColumnNumber": 36
                    },
                    "nodeContext": "throw new IllegalArgumentException(type + \" method return value in bean[\" + beanName+ \"] is not ClientHttpResponse: \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr);\n",
                    "nodeType": "ThrowStatement",
                    "astNodeNumber": 15,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 353,
                        "startLineNumber": 130,
                        "startColumnNumber": 79,
                        "endLineNumber": 137,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  logger.error(\"{} method return value in bean[{}] is not ClientHttpResponse: {}#{}{}\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n  throw new IllegalArgumentException(type + \" method return value in bean[\" + beanName+ \"] is not ClientHttpResponse: \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 28,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 430,
                        "startLineNumber": 130,
                        "startColumnNumber": 2,
                        "endLineNumber": 137,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (!ClientHttpResponse.class.isAssignableFrom(foundMethod.getReturnType())) {\n  logger.error(\"{} method return value in bean[{}] is not ClientHttpResponse: {}#{}{}\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n  throw new IllegalArgumentException(type + \" method return value in bean[\" + beanName+ \"] is not ClientHttpResponse: \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 38,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2330,
                        "startLineNumber": 96,
                        "startColumnNumber": 33,
                        "endLineNumber": 145,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "{\n  if (blockClass == void.class && StringUtils.isEmpty(blockMethod)) {\n    return;\n  }\n  if (blockClass != void.class && StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} class attribute exists but {} method attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" class attribute exists but \" + type+ \" method attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n else   if (blockClass == void.class && !StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} method attribute exists but {} class attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" method attribute exists but \" + type+ \" class attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n  Class[] args=new Class[]{HttpRequest.class,byte[].class,ClientHttpRequestExecution.class,BlockException.class};\n  String argsStr=Arrays.toString(Arrays.stream(args).map(clazz -> clazz.getSimpleName()).toArray());\n  Method foundMethod=ClassUtils.getStaticMethod(blockClass,blockMethod,args);\n  if (foundMethod == null) {\n    logger.error(\"{} static method can not be found in bean[{}]. The right method signature is {}#{}{}, please check your class name, method name and arguments\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" static method can not be found in bean[\" + beanName+ \"]. The right method signature is \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr+ \", please check your class name, method name and arguments\");\n  }\n  if (!ClientHttpResponse.class.isAssignableFrom(foundMethod.getReturnType())) {\n    logger.error(\"{} method return value in bean[{}] is not ClientHttpResponse: {}#{}{}\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" method return value in bean[\" + beanName+ \"] is not ClientHttpResponse: \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr);\n  }\n  if (type.equals(SentinelConstants.BLOCK_TYPE)) {\n    BlockClassRegistry.updateBlockHandlerFor(blockClass,blockMethod,foundMethod);\n  }\n else {\n    BlockClassRegistry.updateFallbackFor(blockClass,blockMethod,foundMethod);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 227,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2441,
                        "startLineNumber": 95,
                        "startColumnNumber": 1,
                        "endLineNumber": 145,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "private void checkBlock4RestTemplate(Class<?> blockClass,String blockMethod,String beanName,String type){\n  if (blockClass == void.class && StringUtils.isEmpty(blockMethod)) {\n    return;\n  }\n  if (blockClass != void.class && StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} class attribute exists but {} method attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" class attribute exists but \" + type+ \" method attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n else   if (blockClass == void.class && !StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} method attribute exists but {} class attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" method attribute exists but \" + type+ \" class attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n  Class[] args=new Class[]{HttpRequest.class,byte[].class,ClientHttpRequestExecution.class,BlockException.class};\n  String argsStr=Arrays.toString(Arrays.stream(args).map(clazz -> clazz.getSimpleName()).toArray());\n  Method foundMethod=ClassUtils.getStaticMethod(blockClass,blockMethod,args);\n  if (foundMethod == null) {\n    logger.error(\"{} static method can not be found in bean[{}]. The right method signature is {}#{}{}, please check your class name, method name and arguments\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" static method can not be found in bean[\" + beanName+ \"]. The right method signature is \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr+ \", please check your class name, method name and arguments\");\n  }\n  if (!ClientHttpResponse.class.isAssignableFrom(foundMethod.getReturnType())) {\n    logger.error(\"{} method return value in bean[{}] is not ClientHttpResponse: {}#{}{}\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" method return value in bean[\" + beanName+ \"] is not ClientHttpResponse: \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr);\n  }\n  if (type.equals(SentinelConstants.BLOCK_TYPE)) {\n    BlockClassRegistry.updateBlockHandlerFor(blockClass,blockMethod,foundMethod);\n  }\n else {\n    BlockClassRegistry.updateFallbackFor(blockClass,blockMethod,foundMethod);\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 249,
                    "astHeight": 10
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
                "nodePosition": {
                    "charLength": 146,
                    "startLineNumber": 134,
                    "startColumnNumber": 38,
                    "endLineNumber": 136,
                    "endColumnNumber": 34
                },
                "nodeContext": "type + \" method return value in bean[\" + beanName+ \"] is not ClientHttpResponse: \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr",
                "nodeType": "InfixExpression",
                "astNodeNumber": 11,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.lang.String"
        }
    ],
    "positionList": [
        {
            "charLength": 8,
            "startLineNumber": 103,
            "startColumnNumber": 17,
            "endLineNumber": 103,
            "endColumnNumber": 25
        },
        {
            "charLength": 8,
            "startLineNumber": 105,
            "startColumnNumber": 59,
            "endLineNumber": 105,
            "endColumnNumber": 67
        },
        {
            "charLength": 8,
            "startLineNumber": 110,
            "startColumnNumber": 17,
            "endLineNumber": 110,
            "endColumnNumber": 25
        },
        {
            "charLength": 8,
            "startLineNumber": 112,
            "startColumnNumber": 58,
            "endLineNumber": 112,
            "endColumnNumber": 66
        },
        {
            "charLength": 8,
            "startLineNumber": 122,
            "startColumnNumber": 11,
            "endLineNumber": 122,
            "endColumnNumber": 19
        },
        {
            "charLength": 8,
            "startLineNumber": 124,
            "startColumnNumber": 52,
            "endLineNumber": 124,
            "endColumnNumber": 60
        },
        {
            "charLength": 8,
            "startLineNumber": 133,
            "startColumnNumber": 11,
            "endLineNumber": 133,
            "endColumnNumber": 19
        },
        {
            "charLength": 8,
            "startLineNumber": 135,
            "startColumnNumber": 7,
            "endLineNumber": 135,
            "endColumnNumber": 15
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 0,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 0,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 0,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 1,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 1,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 1,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 3,
            "secondKey": 5,
            "layout": 6
        },
        {
            "firstKey": 3,
            "secondKey": 6,
            "layout": 6
        },
        {
            "firstKey": 3,
            "secondKey": 7,
            "layout": 6
        },
        {
            "firstKey": 4,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 7,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 6,
            "layout": 3
        }
    ]
}