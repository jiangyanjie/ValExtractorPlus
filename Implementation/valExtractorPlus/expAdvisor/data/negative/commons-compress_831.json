{
    "id": 831,
    "expression": "sparseHeaders.stream().filter(s -> s.getOffset() > 0 || s.getNumbytes() > 0)",
    "projectName": "commons-compress",
    "commitID": "a3b3b82506426708a7048405c2b77c1ebfdbf361",
    "filePath": "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java",
    "occurrences": 1,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "sparseHeaders.stream().filter(s -> s.getOffset() > 0 || s.getNumbytes() > 0)",
            "nodeType": "MethodInvocation",
            "nodePosition": {
                "charLength": 90,
                "startLineNumber": 945,
                "startColumnNumber": 64,
                "endLineNumber": 946,
                "endColumnNumber": 66
            },
            "astNodeNumber": 19,
            "astHeight": 6,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 172,
                        "startLineNumber": 945,
                        "startColumnNumber": 64,
                        "endLineNumber": 947,
                        "endColumnNumber": 80
                    },
                    "nodeContext": "sparseHeaders.stream().filter(s -> s.getOffset() > 0 || s.getNumbytes() > 0).sorted(Comparator.comparingLong(TarArchiveStructSparse::getOffset))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 27,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 215,
                        "startLineNumber": 945,
                        "startColumnNumber": 64,
                        "endLineNumber": 948,
                        "endColumnNumber": 41
                    },
                    "nodeContext": "sparseHeaders.stream().filter(s -> s.getOffset() > 0 || s.getNumbytes() > 0).sorted(Comparator.comparingLong(TarArchiveStructSparse::getOffset)).collect(Collectors.toList())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 32,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 236,
                        "startLineNumber": 945,
                        "startColumnNumber": 43,
                        "endLineNumber": 948,
                        "endColumnNumber": 41
                    },
                    "nodeContext": "orderedAndFiltered=sparseHeaders.stream().filter(s -> s.getOffset() > 0 || s.getNumbytes() > 0).sorted(Comparator.comparingLong(TarArchiveStructSparse::getOffset)).collect(Collectors.toList())",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 34,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 272,
                        "startLineNumber": 945,
                        "startColumnNumber": 8,
                        "endLineNumber": 948,
                        "endColumnNumber": 42
                    },
                    "nodeContext": "final List<TarArchiveStructSparse> orderedAndFiltered=sparseHeaders.stream().filter(s -> s.getOffset() > 0 || s.getNumbytes() > 0).sorted(Comparator.comparingLong(TarArchiveStructSparse::getOffset)).collect(Collectors.toList());\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 41,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1580,
                        "startLineNumber": 941,
                        "startColumnNumber": 85,
                        "endLineNumber": 972,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (sparseHeaders == null || sparseHeaders.isEmpty()) {\n    return Collections.emptyList();\n  }\n  final List<TarArchiveStructSparse> orderedAndFiltered=sparseHeaders.stream().filter(s -> s.getOffset() > 0 || s.getNumbytes() > 0).sorted(Comparator.comparingLong(TarArchiveStructSparse::getOffset)).collect(Collectors.toList());\n  for (int i=0; i < orderedAndFiltered.size(); i++) {\n    final TarArchiveStructSparse str=orderedAndFiltered.get(i);\n    if (i + 1 < orderedAndFiltered.size()) {\n      if (str.getOffset() + str.getNumbytes() > orderedAndFiltered.get(i + 1).getOffset()) {\n        throw new IOException(\"Corrupted TAR archive. Sparse blocks for \" + getName() + \" overlap each other.\");\n      }\n    }\n    if (str.getOffset() + str.getNumbytes() < 0) {\n      throw new IOException(\"Unreadable TAR archive. Offset and numbytes for sparse block in \" + getName() + \" too large.\");\n    }\n  }\n  if (!orderedAndFiltered.isEmpty()) {\n    final TarArchiveStructSparse last=orderedAndFiltered.get(orderedAndFiltered.size() - 1);\n    if (last.getOffset() + last.getNumbytes() > getRealSize()) {\n      throw new IOException(\"Corrupted TAR archive. Sparse block extends beyond real size of the entry\");\n    }\n  }\n  return orderedAndFiltered;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 174,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1984,
                        "startLineNumber": 934,
                        "startColumnNumber": 4,
                        "endLineNumber": 972,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Get this entry's sparse headers ordered by offset with all empty sparse sections at the start filtered out.\n * @return immutable list of this entry's sparse headers, never null\n * @since 1.21\n * @throws IOException if the list of sparse headers contains blocks that overlap\n */\npublic List<TarArchiveStructSparse> getOrderedSparseHeaders() throws IOException {\n  if (sparseHeaders == null || sparseHeaders.isEmpty()) {\n    return Collections.emptyList();\n  }\n  final List<TarArchiveStructSparse> orderedAndFiltered=sparseHeaders.stream().filter(s -> s.getOffset() > 0 || s.getNumbytes() > 0).sorted(Comparator.comparingLong(TarArchiveStructSparse::getOffset)).collect(Collectors.toList());\n  for (int i=0; i < orderedAndFiltered.size(); i++) {\n    final TarArchiveStructSparse str=orderedAndFiltered.get(i);\n    if (i + 1 < orderedAndFiltered.size()) {\n      if (str.getOffset() + str.getNumbytes() > orderedAndFiltered.get(i + 1).getOffset()) {\n        throw new IOException(\"Corrupted TAR archive. Sparse blocks for \" + getName() + \" overlap each other.\");\n      }\n    }\n    if (str.getOffset() + str.getNumbytes() < 0) {\n      throw new IOException(\"Unreadable TAR archive. Offset and numbytes for sparse block in \" + getName() + \" too large.\");\n    }\n  }\n  if (!orderedAndFiltered.isEmpty()) {\n    final TarArchiveStructSparse last=orderedAndFiltered.get(orderedAndFiltered.size() - 1);\n    if (last.getOffset() + last.getNumbytes() > getRealSize()) {\n      throw new IOException(\"Corrupted TAR archive. Sparse block extends beyond real size of the entry\");\n    }\n  }\n  return orderedAndFiltered;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 185,
                    "astHeight": 13
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                "nodePosition": {
                    "charLength": 172,
                    "startLineNumber": 945,
                    "startColumnNumber": 64,
                    "endLineNumber": 947,
                    "endColumnNumber": 80
                },
                "nodeContext": "sparseHeaders.stream().filter(s -> s.getOffset() > 0 || s.getNumbytes() > 0).sorted(Comparator.comparingLong(TarArchiveStructSparse::getOffset))",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 27,
                "astHeight": 7
            },
            "tokenLength": 14,
            "type": "java.util.stream.Stream<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse>"
        }
    ],
    "positionList": [
        {
            "charLength": 90,
            "startLineNumber": 945,
            "startColumnNumber": 64,
            "endLineNumber": 946,
            "endColumnNumber": 66
        }
    ],
    "layoutRelationDataList": []
}