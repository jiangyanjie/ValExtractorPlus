{
    "id": 447,
    "expression": "0",
    "projectName": "nifi",
    "commitID": "729f8aa246767df4a2930771673ca2a7e18957bd",
    "filePath": "nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/GenerateTableFetch.java",
    "occurrences": 11,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "0",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 242,
                "startColumnNumber": 38,
                "endLineNumber": 242,
                "endColumnNumber": 39
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,thenExpression]",
                    "nodePosition": {
                        "charLength": 18,
                        "startLineNumber": 242,
                        "startColumnNumber": 22,
                        "endLineNumber": 242,
                        "endColumnNumber": 40
                    },
                    "nodeContext": "new ArrayList<>(0)",
                    "nodeType": "ClassInstanceCreation",
                    "astNodeNumber": 5,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 157,
                        "startLineNumber": 241,
                        "startColumnNumber": 50,
                        "endLineNumber": 243,
                        "endColumnNumber": 75
                    },
                    "nodeContext": "StringUtils.isEmpty(maxValueColumnNames) ? new ArrayList<>(0) : Arrays.asList(maxValueColumnNames.split(\"\\\\s*,\\\\s*\"))",
                    "nodeType": "ConditionalExpression",
                    "astNodeNumber": 17,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 182,
                        "startLineNumber": 241,
                        "startColumnNumber": 25,
                        "endLineNumber": 243,
                        "endColumnNumber": 75
                    },
                    "nodeContext": "maxValueColumnNameList=StringUtils.isEmpty(maxValueColumnNames) ? new ArrayList<>(0) : Arrays.asList(maxValueColumnNames.split(\"\\\\s*,\\\\s*\"))",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 19,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 196,
                        "startLineNumber": 241,
                        "startColumnNumber": 12,
                        "endLineNumber": 243,
                        "endColumnNumber": 76
                    },
                    "nodeContext": "List<String> maxValueColumnNameList=StringUtils.isEmpty(maxValueColumnNames) ? new ArrayList<>(0) : Arrays.asList(maxValueColumnNames.split(\"\\\\s*,\\\\s*\"));\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 25,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 12385,
                        "startLineNumber": 213,
                        "startColumnNumber": 12,
                        "endLineNumber": 404,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final Map<String,String> statePropertyMap=new HashMap<>(stateMap.toMap());\n  for (  final Map.Entry<String,String> maxProp : maxValueProperties.entrySet()) {\n    String maxPropKey=maxProp.getKey().toLowerCase();\n    String fullyQualifiedMaxPropKey=getStateKey(tableName,maxPropKey,dbAdapter);\n    if (!statePropertyMap.containsKey(fullyQualifiedMaxPropKey)) {\n      String newMaxPropValue;\n      if (statePropertyMap.containsKey(maxPropKey)) {\n        newMaxPropValue=statePropertyMap.get(maxPropKey);\n      }\n else {\n        newMaxPropValue=maxProp.getValue();\n      }\n      statePropertyMap.put(fullyQualifiedMaxPropKey,newMaxPropValue);\n    }\n  }\n  String whereClause=null;\n  List<String> maxValueColumnNameList=StringUtils.isEmpty(maxValueColumnNames) ? new ArrayList<>(0) : Arrays.asList(maxValueColumnNames.split(\"\\\\s*,\\\\s*\"));\n  List<String> maxValueClauses=new ArrayList<>(maxValueColumnNameList.size());\n  String columnsClause=null;\n  List<String> maxValueSelectColumns=new ArrayList<>(maxValueColumnNameList.size() + 1);\n  maxValueSelectColumns.add(\"COUNT(*)\");\n  IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n    String colName=maxValueColumnNameList.get(index);\n    maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n    String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n    if (!StringUtils.isEmpty(maxValue)) {\n      if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n        super.setup(context,false,finalFileToProcess);\n      }\n      Integer type=getColumnType(tableName,colName,dbAdapter);\n      maxValueClauses.add(colName + (index == 0 ? \" > \" : \" >= \") + getLiteralByType(type,maxValue,dbAdapter.getName()));\n    }\n  }\n);\n  if (customWhereClause != null) {\n    maxValueClauses.add(\"(\" + customWhereClause + \")\");\n  }\n  whereClause=StringUtils.join(maxValueClauses,\" AND \");\n  columnsClause=StringUtils.join(maxValueSelectColumns,\", \");\n  final String selectQuery=dbAdapter.getSelectStatement(tableName,columnsClause,whereClause,null,null,null);\n  long rowCount=0;\n  try (final Connection con=dbcpService.getConnection(finalFileToProcess == null ? Collections.emptyMap() : finalFileToProcess.getAttributes());final Statement st=con.createStatement()){\n    final Integer queryTimeout=context.getProperty(QUERY_TIMEOUT).evaluateAttributeExpressions(fileToProcess).asTimePeriod(TimeUnit.SECONDS).intValue();\n    st.setQueryTimeout(queryTimeout);\n    logger.debug(\"Executing {}\",new Object[]{selectQuery});\n    ResultSet resultSet;\n    resultSet=st.executeQuery(selectQuery);\n    if (resultSet.next()) {\n      rowCount=resultSet.getLong(1);\n      ResultSetMetaData rsmd=resultSet.getMetaData();\n      for (int i=2; i <= rsmd.getColumnCount(); i++) {\n        String resultColumnName=(StringUtils.isNotEmpty(rsmd.getColumnLabel(i)) ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i)).toLowerCase();\n        String fullyQualifiedStateKey=getStateKey(tableName,resultColumnName,dbAdapter);\n        String resultColumnCurrentMax=statePropertyMap.get(fullyQualifiedStateKey);\n        if (StringUtils.isEmpty(resultColumnCurrentMax) && !isDynamicTableName) {\n          resultColumnCurrentMax=statePropertyMap.get(resultColumnName);\n        }\n        int type=rsmd.getColumnType(i);\n        if (isDynamicTableName) {\n          columnTypeMap.put(fullyQualifiedStateKey,type);\n        }\n        try {\n          String newMaxValue=getMaxValueFromRow(resultSet,i,type,resultColumnCurrentMax,dbAdapter.getName());\n          if (newMaxValue != null) {\n            statePropertyMap.put(fullyQualifiedStateKey,newMaxValue);\n          }\n        }\n catch (        ParseException|IOException pie) {\n          throw new ProcessException(pie);\n        }\n      }\n    }\n else {\n      throw new SQLException(\"No rows returned from metadata query: \" + selectQuery);\n    }\n    IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n      String colName=maxValueColumnNameList.get(index);\n      maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n      String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n      if (!StringUtils.isEmpty(maxValue)) {\n        if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n          super.setup(context,false,finalFileToProcess);\n        }\n        Integer type=getColumnType(tableName,colName,dbAdapter);\n        maxValueClauses.add(colName + \" <= \" + getLiteralByType(type,maxValue,dbAdapter.getName()));\n      }\n    }\n);\n    whereClause=StringUtils.join(maxValueClauses,\" AND \");\n    final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n    for (long i=0; i < numberOfFetches; i++) {\n      Long limit=partitionSize == 0 ? null : (long)partitionSize;\n      Long offset=partitionSize == 0 ? null : i * partitionSize;\n      final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n      final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n      FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n      sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n      if (columnNames != null) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n      }\n      if (StringUtils.isNotBlank(whereClause)) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n      }\n      if (StringUtils.isNotBlank(maxColumnNames)) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n      }\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n      if (partitionSize != 0) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n      }\n      session.transfer(sqlFlowFile,REL_SUCCESS);\n    }\n    if (fileToProcess != null) {\n      session.remove(fileToProcess);\n    }\n  }\n catch (  SQLException e) {\n    if (fileToProcess != null) {\n      logger.error(\"Unable to execute SQL select query {} due to {}, routing {} to failure\",new Object[]{selectQuery,e,fileToProcess});\n      fileToProcess=session.putAttribute(fileToProcess,\"generatetablefetch.sql.error\",e.getMessage());\n      session.transfer(fileToProcess,REL_FAILURE);\n    }\n else {\n      logger.error(\"Unable to execute SQL select query {} due to {}\",new Object[]{selectQuery,e});\n      throw new ProcessException(e);\n    }\n  }\n  session.commit();\n  try {\n    stateManager.setState(statePropertyMap,Scope.CLUSTER);\n  }\n catch (  IOException ioe) {\n    logger.error(\"{} failed to update State Manager, observed maximum values will not be recorded. \" + \"Also, any generated SQL statements may be duplicated.\",new Object[]{this,ioe});\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 971,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 12730,
                        "startLineNumber": 213,
                        "startColumnNumber": 8,
                        "endLineNumber": 410,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  final Map<String,String> statePropertyMap=new HashMap<>(stateMap.toMap());\n  for (  final Map.Entry<String,String> maxProp : maxValueProperties.entrySet()) {\n    String maxPropKey=maxProp.getKey().toLowerCase();\n    String fullyQualifiedMaxPropKey=getStateKey(tableName,maxPropKey,dbAdapter);\n    if (!statePropertyMap.containsKey(fullyQualifiedMaxPropKey)) {\n      String newMaxPropValue;\n      if (statePropertyMap.containsKey(maxPropKey)) {\n        newMaxPropValue=statePropertyMap.get(maxPropKey);\n      }\n else {\n        newMaxPropValue=maxProp.getValue();\n      }\n      statePropertyMap.put(fullyQualifiedMaxPropKey,newMaxPropValue);\n    }\n  }\n  String whereClause=null;\n  List<String> maxValueColumnNameList=StringUtils.isEmpty(maxValueColumnNames) ? new ArrayList<>(0) : Arrays.asList(maxValueColumnNames.split(\"\\\\s*,\\\\s*\"));\n  List<String> maxValueClauses=new ArrayList<>(maxValueColumnNameList.size());\n  String columnsClause=null;\n  List<String> maxValueSelectColumns=new ArrayList<>(maxValueColumnNameList.size() + 1);\n  maxValueSelectColumns.add(\"COUNT(*)\");\n  IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n    String colName=maxValueColumnNameList.get(index);\n    maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n    String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n    if (!StringUtils.isEmpty(maxValue)) {\n      if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n        super.setup(context,false,finalFileToProcess);\n      }\n      Integer type=getColumnType(tableName,colName,dbAdapter);\n      maxValueClauses.add(colName + (index == 0 ? \" > \" : \" >= \") + getLiteralByType(type,maxValue,dbAdapter.getName()));\n    }\n  }\n);\n  if (customWhereClause != null) {\n    maxValueClauses.add(\"(\" + customWhereClause + \")\");\n  }\n  whereClause=StringUtils.join(maxValueClauses,\" AND \");\n  columnsClause=StringUtils.join(maxValueSelectColumns,\", \");\n  final String selectQuery=dbAdapter.getSelectStatement(tableName,columnsClause,whereClause,null,null,null);\n  long rowCount=0;\n  try (final Connection con=dbcpService.getConnection(finalFileToProcess == null ? Collections.emptyMap() : finalFileToProcess.getAttributes());final Statement st=con.createStatement()){\n    final Integer queryTimeout=context.getProperty(QUERY_TIMEOUT).evaluateAttributeExpressions(fileToProcess).asTimePeriod(TimeUnit.SECONDS).intValue();\n    st.setQueryTimeout(queryTimeout);\n    logger.debug(\"Executing {}\",new Object[]{selectQuery});\n    ResultSet resultSet;\n    resultSet=st.executeQuery(selectQuery);\n    if (resultSet.next()) {\n      rowCount=resultSet.getLong(1);\n      ResultSetMetaData rsmd=resultSet.getMetaData();\n      for (int i=2; i <= rsmd.getColumnCount(); i++) {\n        String resultColumnName=(StringUtils.isNotEmpty(rsmd.getColumnLabel(i)) ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i)).toLowerCase();\n        String fullyQualifiedStateKey=getStateKey(tableName,resultColumnName,dbAdapter);\n        String resultColumnCurrentMax=statePropertyMap.get(fullyQualifiedStateKey);\n        if (StringUtils.isEmpty(resultColumnCurrentMax) && !isDynamicTableName) {\n          resultColumnCurrentMax=statePropertyMap.get(resultColumnName);\n        }\n        int type=rsmd.getColumnType(i);\n        if (isDynamicTableName) {\n          columnTypeMap.put(fullyQualifiedStateKey,type);\n        }\n        try {\n          String newMaxValue=getMaxValueFromRow(resultSet,i,type,resultColumnCurrentMax,dbAdapter.getName());\n          if (newMaxValue != null) {\n            statePropertyMap.put(fullyQualifiedStateKey,newMaxValue);\n          }\n        }\n catch (        ParseException|IOException pie) {\n          throw new ProcessException(pie);\n        }\n      }\n    }\n else {\n      throw new SQLException(\"No rows returned from metadata query: \" + selectQuery);\n    }\n    IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n      String colName=maxValueColumnNameList.get(index);\n      maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n      String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n      if (!StringUtils.isEmpty(maxValue)) {\n        if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n          super.setup(context,false,finalFileToProcess);\n        }\n        Integer type=getColumnType(tableName,colName,dbAdapter);\n        maxValueClauses.add(colName + \" <= \" + getLiteralByType(type,maxValue,dbAdapter.getName()));\n      }\n    }\n);\n    whereClause=StringUtils.join(maxValueClauses,\" AND \");\n    final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n    for (long i=0; i < numberOfFetches; i++) {\n      Long limit=partitionSize == 0 ? null : (long)partitionSize;\n      Long offset=partitionSize == 0 ? null : i * partitionSize;\n      final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n      final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n      FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n      sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n      if (columnNames != null) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n      }\n      if (StringUtils.isNotBlank(whereClause)) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n      }\n      if (StringUtils.isNotBlank(maxColumnNames)) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n      }\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n      if (partitionSize != 0) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n      }\n      session.transfer(sqlFlowFile,REL_SUCCESS);\n    }\n    if (fileToProcess != null) {\n      session.remove(fileToProcess);\n    }\n  }\n catch (  SQLException e) {\n    if (fileToProcess != null) {\n      logger.error(\"Unable to execute SQL select query {} due to {}, routing {} to failure\",new Object[]{selectQuery,e,fileToProcess});\n      fileToProcess=session.putAttribute(fileToProcess,\"generatetablefetch.sql.error\",e.getMessage());\n      session.transfer(fileToProcess,REL_FAILURE);\n    }\n else {\n      logger.error(\"Unable to execute SQL select query {} due to {}\",new Object[]{selectQuery,e});\n      throw new ProcessException(e);\n    }\n  }\n  session.commit();\n  try {\n    stateManager.setState(statePropertyMap,Scope.CLUSTER);\n  }\n catch (  IOException ioe) {\n    logger.error(\"{} failed to update State Manager, observed maximum values will not be recorded. \" + \"Also, any generated SQL statements may be duplicated.\",new Object[]{this,ioe});\n  }\n}\n catch (final ProcessException pe) {\n  Throwable t=(pe.getCause() == null ? pe : pe.getCause());\n  logger.error(\"Error during processing: {}\",new Object[]{t.getMessage()},t);\n  session.rollback();\n  context.yield();\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 1018,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 14819,
                        "startLineNumber": 173,
                        "startColumnNumber": 124,
                        "endLineNumber": 411,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (!isDynamicTableName && !isDynamicMaxValues && !setupComplete.get()) {\n    super.setup(context);\n  }\n  ProcessSession session=sessionFactory.createSession();\n  FlowFile fileToProcess=null;\n  if (context.hasIncomingConnection()) {\n    fileToProcess=session.get();\n    if (fileToProcess == null) {\n      return;\n    }\n  }\n  final ComponentLog logger=getLogger();\n  final DBCPService dbcpService=context.getProperty(DBCP_SERVICE).asControllerService(DBCPService.class);\n  final DatabaseAdapter dbAdapter=dbAdapters.get(context.getProperty(DB_TYPE).getValue());\n  final String tableName=context.getProperty(TABLE_NAME).evaluateAttributeExpressions(fileToProcess).getValue();\n  final String columnNames=context.getProperty(COLUMN_NAMES).evaluateAttributeExpressions(fileToProcess).getValue();\n  final String maxValueColumnNames=context.getProperty(MAX_VALUE_COLUMN_NAMES).evaluateAttributeExpressions(fileToProcess).getValue();\n  final int partitionSize=context.getProperty(PARTITION_SIZE).evaluateAttributeExpressions(fileToProcess).asInteger();\n  final String customWhereClause=context.getProperty(WHERE_CLAUSE).evaluateAttributeExpressions(fileToProcess).getValue();\n  final StateManager stateManager=context.getStateManager();\n  final StateMap stateMap;\n  FlowFile finalFileToProcess=fileToProcess;\n  try {\n    stateMap=stateManager.getState(Scope.CLUSTER);\n  }\n catch (  final IOException ioe) {\n    logger.error(\"Failed to retrieve observed maximum values from the State Manager. Will not perform \" + \"query until this is accomplished.\",ioe);\n    context.yield();\n    return;\n  }\n  try {\n    final Map<String,String> statePropertyMap=new HashMap<>(stateMap.toMap());\n    for (    final Map.Entry<String,String> maxProp : maxValueProperties.entrySet()) {\n      String maxPropKey=maxProp.getKey().toLowerCase();\n      String fullyQualifiedMaxPropKey=getStateKey(tableName,maxPropKey,dbAdapter);\n      if (!statePropertyMap.containsKey(fullyQualifiedMaxPropKey)) {\n        String newMaxPropValue;\n        if (statePropertyMap.containsKey(maxPropKey)) {\n          newMaxPropValue=statePropertyMap.get(maxPropKey);\n        }\n else {\n          newMaxPropValue=maxProp.getValue();\n        }\n        statePropertyMap.put(fullyQualifiedMaxPropKey,newMaxPropValue);\n      }\n    }\n    String whereClause=null;\n    List<String> maxValueColumnNameList=StringUtils.isEmpty(maxValueColumnNames) ? new ArrayList<>(0) : Arrays.asList(maxValueColumnNames.split(\"\\\\s*,\\\\s*\"));\n    List<String> maxValueClauses=new ArrayList<>(maxValueColumnNameList.size());\n    String columnsClause=null;\n    List<String> maxValueSelectColumns=new ArrayList<>(maxValueColumnNameList.size() + 1);\n    maxValueSelectColumns.add(\"COUNT(*)\");\n    IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n      String colName=maxValueColumnNameList.get(index);\n      maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n      String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n      if (!StringUtils.isEmpty(maxValue)) {\n        if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n          super.setup(context,false,finalFileToProcess);\n        }\n        Integer type=getColumnType(tableName,colName,dbAdapter);\n        maxValueClauses.add(colName + (index == 0 ? \" > \" : \" >= \") + getLiteralByType(type,maxValue,dbAdapter.getName()));\n      }\n    }\n);\n    if (customWhereClause != null) {\n      maxValueClauses.add(\"(\" + customWhereClause + \")\");\n    }\n    whereClause=StringUtils.join(maxValueClauses,\" AND \");\n    columnsClause=StringUtils.join(maxValueSelectColumns,\", \");\n    final String selectQuery=dbAdapter.getSelectStatement(tableName,columnsClause,whereClause,null,null,null);\n    long rowCount=0;\n    try (final Connection con=dbcpService.getConnection(finalFileToProcess == null ? Collections.emptyMap() : finalFileToProcess.getAttributes());final Statement st=con.createStatement()){\n      final Integer queryTimeout=context.getProperty(QUERY_TIMEOUT).evaluateAttributeExpressions(fileToProcess).asTimePeriod(TimeUnit.SECONDS).intValue();\n      st.setQueryTimeout(queryTimeout);\n      logger.debug(\"Executing {}\",new Object[]{selectQuery});\n      ResultSet resultSet;\n      resultSet=st.executeQuery(selectQuery);\n      if (resultSet.next()) {\n        rowCount=resultSet.getLong(1);\n        ResultSetMetaData rsmd=resultSet.getMetaData();\n        for (int i=2; i <= rsmd.getColumnCount(); i++) {\n          String resultColumnName=(StringUtils.isNotEmpty(rsmd.getColumnLabel(i)) ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i)).toLowerCase();\n          String fullyQualifiedStateKey=getStateKey(tableName,resultColumnName,dbAdapter);\n          String resultColumnCurrentMax=statePropertyMap.get(fullyQualifiedStateKey);\n          if (StringUtils.isEmpty(resultColumnCurrentMax) && !isDynamicTableName) {\n            resultColumnCurrentMax=statePropertyMap.get(resultColumnName);\n          }\n          int type=rsmd.getColumnType(i);\n          if (isDynamicTableName) {\n            columnTypeMap.put(fullyQualifiedStateKey,type);\n          }\n          try {\n            String newMaxValue=getMaxValueFromRow(resultSet,i,type,resultColumnCurrentMax,dbAdapter.getName());\n            if (newMaxValue != null) {\n              statePropertyMap.put(fullyQualifiedStateKey,newMaxValue);\n            }\n          }\n catch (          ParseException|IOException pie) {\n            throw new ProcessException(pie);\n          }\n        }\n      }\n else {\n        throw new SQLException(\"No rows returned from metadata query: \" + selectQuery);\n      }\n      IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n        String colName=maxValueColumnNameList.get(index);\n        maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n        String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n        if (!StringUtils.isEmpty(maxValue)) {\n          if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n            super.setup(context,false,finalFileToProcess);\n          }\n          Integer type=getColumnType(tableName,colName,dbAdapter);\n          maxValueClauses.add(colName + \" <= \" + getLiteralByType(type,maxValue,dbAdapter.getName()));\n        }\n      }\n);\n      whereClause=StringUtils.join(maxValueClauses,\" AND \");\n      final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n      for (long i=0; i < numberOfFetches; i++) {\n        Long limit=partitionSize == 0 ? null : (long)partitionSize;\n        Long offset=partitionSize == 0 ? null : i * partitionSize;\n        final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n        final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n        FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n        sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n        if (columnNames != null) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n        }\n        if (StringUtils.isNotBlank(whereClause)) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n        }\n        if (StringUtils.isNotBlank(maxColumnNames)) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n        }\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n        if (partitionSize != 0) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n        }\n        session.transfer(sqlFlowFile,REL_SUCCESS);\n      }\n      if (fileToProcess != null) {\n        session.remove(fileToProcess);\n      }\n    }\n catch (    SQLException e) {\n      if (fileToProcess != null) {\n        logger.error(\"Unable to execute SQL select query {} due to {}, routing {} to failure\",new Object[]{selectQuery,e,fileToProcess});\n        fileToProcess=session.putAttribute(fileToProcess,\"generatetablefetch.sql.error\",e.getMessage());\n        session.transfer(fileToProcess,REL_FAILURE);\n      }\n else {\n        logger.error(\"Unable to execute SQL select query {} due to {}\",new Object[]{selectQuery,e});\n        throw new ProcessException(e);\n      }\n    }\n    session.commit();\n    try {\n      stateManager.setState(statePropertyMap,Scope.CLUSTER);\n    }\n catch (    IOException ioe) {\n      logger.error(\"{} failed to update State Manager, observed maximum values will not be recorded. \" + \"Also, any generated SQL statements may be duplicated.\",new Object[]{this,ioe});\n    }\n  }\n catch (  final ProcessException pe) {\n    Throwable t=(pe.getCause() == null ? pe : pe.getCause());\n    logger.error(\"Error during processing: {}\",new Object[]{t.getMessage()},t);\n    session.rollback();\n    context.yield();\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 1229,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 14953,
                        "startLineNumber": 172,
                        "startColumnNumber": 4,
                        "endLineNumber": 411,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void onTrigger(final ProcessContext context,final ProcessSessionFactory sessionFactory) throws ProcessException {\n  if (!isDynamicTableName && !isDynamicMaxValues && !setupComplete.get()) {\n    super.setup(context);\n  }\n  ProcessSession session=sessionFactory.createSession();\n  FlowFile fileToProcess=null;\n  if (context.hasIncomingConnection()) {\n    fileToProcess=session.get();\n    if (fileToProcess == null) {\n      return;\n    }\n  }\n  final ComponentLog logger=getLogger();\n  final DBCPService dbcpService=context.getProperty(DBCP_SERVICE).asControllerService(DBCPService.class);\n  final DatabaseAdapter dbAdapter=dbAdapters.get(context.getProperty(DB_TYPE).getValue());\n  final String tableName=context.getProperty(TABLE_NAME).evaluateAttributeExpressions(fileToProcess).getValue();\n  final String columnNames=context.getProperty(COLUMN_NAMES).evaluateAttributeExpressions(fileToProcess).getValue();\n  final String maxValueColumnNames=context.getProperty(MAX_VALUE_COLUMN_NAMES).evaluateAttributeExpressions(fileToProcess).getValue();\n  final int partitionSize=context.getProperty(PARTITION_SIZE).evaluateAttributeExpressions(fileToProcess).asInteger();\n  final String customWhereClause=context.getProperty(WHERE_CLAUSE).evaluateAttributeExpressions(fileToProcess).getValue();\n  final StateManager stateManager=context.getStateManager();\n  final StateMap stateMap;\n  FlowFile finalFileToProcess=fileToProcess;\n  try {\n    stateMap=stateManager.getState(Scope.CLUSTER);\n  }\n catch (  final IOException ioe) {\n    logger.error(\"Failed to retrieve observed maximum values from the State Manager. Will not perform \" + \"query until this is accomplished.\",ioe);\n    context.yield();\n    return;\n  }\n  try {\n    final Map<String,String> statePropertyMap=new HashMap<>(stateMap.toMap());\n    for (    final Map.Entry<String,String> maxProp : maxValueProperties.entrySet()) {\n      String maxPropKey=maxProp.getKey().toLowerCase();\n      String fullyQualifiedMaxPropKey=getStateKey(tableName,maxPropKey,dbAdapter);\n      if (!statePropertyMap.containsKey(fullyQualifiedMaxPropKey)) {\n        String newMaxPropValue;\n        if (statePropertyMap.containsKey(maxPropKey)) {\n          newMaxPropValue=statePropertyMap.get(maxPropKey);\n        }\n else {\n          newMaxPropValue=maxProp.getValue();\n        }\n        statePropertyMap.put(fullyQualifiedMaxPropKey,newMaxPropValue);\n      }\n    }\n    String whereClause=null;\n    List<String> maxValueColumnNameList=StringUtils.isEmpty(maxValueColumnNames) ? new ArrayList<>(0) : Arrays.asList(maxValueColumnNames.split(\"\\\\s*,\\\\s*\"));\n    List<String> maxValueClauses=new ArrayList<>(maxValueColumnNameList.size());\n    String columnsClause=null;\n    List<String> maxValueSelectColumns=new ArrayList<>(maxValueColumnNameList.size() + 1);\n    maxValueSelectColumns.add(\"COUNT(*)\");\n    IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n      String colName=maxValueColumnNameList.get(index);\n      maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n      String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n      if (!StringUtils.isEmpty(maxValue)) {\n        if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n          super.setup(context,false,finalFileToProcess);\n        }\n        Integer type=getColumnType(tableName,colName,dbAdapter);\n        maxValueClauses.add(colName + (index == 0 ? \" > \" : \" >= \") + getLiteralByType(type,maxValue,dbAdapter.getName()));\n      }\n    }\n);\n    if (customWhereClause != null) {\n      maxValueClauses.add(\"(\" + customWhereClause + \")\");\n    }\n    whereClause=StringUtils.join(maxValueClauses,\" AND \");\n    columnsClause=StringUtils.join(maxValueSelectColumns,\", \");\n    final String selectQuery=dbAdapter.getSelectStatement(tableName,columnsClause,whereClause,null,null,null);\n    long rowCount=0;\n    try (final Connection con=dbcpService.getConnection(finalFileToProcess == null ? Collections.emptyMap() : finalFileToProcess.getAttributes());final Statement st=con.createStatement()){\n      final Integer queryTimeout=context.getProperty(QUERY_TIMEOUT).evaluateAttributeExpressions(fileToProcess).asTimePeriod(TimeUnit.SECONDS).intValue();\n      st.setQueryTimeout(queryTimeout);\n      logger.debug(\"Executing {}\",new Object[]{selectQuery});\n      ResultSet resultSet;\n      resultSet=st.executeQuery(selectQuery);\n      if (resultSet.next()) {\n        rowCount=resultSet.getLong(1);\n        ResultSetMetaData rsmd=resultSet.getMetaData();\n        for (int i=2; i <= rsmd.getColumnCount(); i++) {\n          String resultColumnName=(StringUtils.isNotEmpty(rsmd.getColumnLabel(i)) ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i)).toLowerCase();\n          String fullyQualifiedStateKey=getStateKey(tableName,resultColumnName,dbAdapter);\n          String resultColumnCurrentMax=statePropertyMap.get(fullyQualifiedStateKey);\n          if (StringUtils.isEmpty(resultColumnCurrentMax) && !isDynamicTableName) {\n            resultColumnCurrentMax=statePropertyMap.get(resultColumnName);\n          }\n          int type=rsmd.getColumnType(i);\n          if (isDynamicTableName) {\n            columnTypeMap.put(fullyQualifiedStateKey,type);\n          }\n          try {\n            String newMaxValue=getMaxValueFromRow(resultSet,i,type,resultColumnCurrentMax,dbAdapter.getName());\n            if (newMaxValue != null) {\n              statePropertyMap.put(fullyQualifiedStateKey,newMaxValue);\n            }\n          }\n catch (          ParseException|IOException pie) {\n            throw new ProcessException(pie);\n          }\n        }\n      }\n else {\n        throw new SQLException(\"No rows returned from metadata query: \" + selectQuery);\n      }\n      IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n        String colName=maxValueColumnNameList.get(index);\n        maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n        String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n        if (!StringUtils.isEmpty(maxValue)) {\n          if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n            super.setup(context,false,finalFileToProcess);\n          }\n          Integer type=getColumnType(tableName,colName,dbAdapter);\n          maxValueClauses.add(colName + \" <= \" + getLiteralByType(type,maxValue,dbAdapter.getName()));\n        }\n      }\n);\n      whereClause=StringUtils.join(maxValueClauses,\" AND \");\n      final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n      for (long i=0; i < numberOfFetches; i++) {\n        Long limit=partitionSize == 0 ? null : (long)partitionSize;\n        Long offset=partitionSize == 0 ? null : i * partitionSize;\n        final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n        final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n        FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n        sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n        if (columnNames != null) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n        }\n        if (StringUtils.isNotBlank(whereClause)) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n        }\n        if (StringUtils.isNotBlank(maxColumnNames)) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n        }\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n        if (partitionSize != 0) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n        }\n        session.transfer(sqlFlowFile,REL_SUCCESS);\n      }\n      if (fileToProcess != null) {\n        session.remove(fileToProcess);\n      }\n    }\n catch (    SQLException e) {\n      if (fileToProcess != null) {\n        logger.error(\"Unable to execute SQL select query {} due to {}, routing {} to failure\",new Object[]{selectQuery,e,fileToProcess});\n        fileToProcess=session.putAttribute(fileToProcess,\"generatetablefetch.sql.error\",e.getMessage());\n        session.transfer(fileToProcess,REL_FAILURE);\n      }\n else {\n        logger.error(\"Unable to execute SQL select query {} due to {}\",new Object[]{selectQuery,e});\n        throw new ProcessException(e);\n      }\n    }\n    session.commit();\n    try {\n      stateManager.setState(statePropertyMap,Scope.CLUSTER);\n    }\n catch (    IOException ioe) {\n      logger.error(\"{} failed to update State Manager, observed maximum values will not be recorded. \" + \"Also, any generated SQL statements may be duplicated.\",new Object[]{this,ioe});\n    }\n  }\n catch (  final ProcessException pe) {\n    Throwable t=(pe.getCause() == null ? pe : pe.getCause());\n    logger.error(\"Error during processing: {}\",new Object[]{t.getMessage()},t);\n    session.rollback();\n    context.yield();\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 1247,
                    "astHeight": 18
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,thenExpression]",
                "nodePosition": {
                    "charLength": 18,
                    "startLineNumber": 242,
                    "startColumnNumber": 22,
                    "endLineNumber": 242,
                    "endColumnNumber": 40
                },
                "nodeContext": "new ArrayList<>(0)",
                "nodeType": "ClassInstanceCreation",
                "astNodeNumber": 5,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "0",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 251,
                "startColumnNumber": 28,
                "endLineNumber": 251,
                "endColumnNumber": 29
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 49,
                        "startLineNumber": 251,
                        "startColumnNumber": 12,
                        "endLineNumber": 251,
                        "endColumnNumber": 61
                    },
                    "nodeContext": "IntStream.range(0,maxValueColumnNameList.size())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 1010,
                        "startLineNumber": 251,
                        "startColumnNumber": 12,
                        "endLineNumber": 266,
                        "endColumnNumber": 14
                    },
                    "nodeContext": "IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n  String colName=maxValueColumnNameList.get(index);\n  maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n  String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n  if (!StringUtils.isEmpty(maxValue)) {\n    if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n      super.setup(context,false,finalFileToProcess);\n    }\n    Integer type=getColumnType(tableName,colName,dbAdapter);\n    maxValueClauses.add(colName + (index == 0 ? \" > \" : \" >= \") + getLiteralByType(type,maxValue,dbAdapter.getName()));\n  }\n}\n)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 98,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1011,
                        "startLineNumber": 251,
                        "startColumnNumber": 12,
                        "endLineNumber": 266,
                        "endColumnNumber": 15
                    },
                    "nodeContext": "IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n  String colName=maxValueColumnNameList.get(index);\n  maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n  String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n  if (!StringUtils.isEmpty(maxValue)) {\n    if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n      super.setup(context,false,finalFileToProcess);\n    }\n    Integer type=getColumnType(tableName,colName,dbAdapter);\n    maxValueClauses.add(colName + (index == 0 ? \" > \" : \" >= \") + getLiteralByType(type,maxValue,dbAdapter.getName()));\n  }\n}\n);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 99,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 12385,
                        "startLineNumber": 213,
                        "startColumnNumber": 12,
                        "endLineNumber": 404,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final Map<String,String> statePropertyMap=new HashMap<>(stateMap.toMap());\n  for (  final Map.Entry<String,String> maxProp : maxValueProperties.entrySet()) {\n    String maxPropKey=maxProp.getKey().toLowerCase();\n    String fullyQualifiedMaxPropKey=getStateKey(tableName,maxPropKey,dbAdapter);\n    if (!statePropertyMap.containsKey(fullyQualifiedMaxPropKey)) {\n      String newMaxPropValue;\n      if (statePropertyMap.containsKey(maxPropKey)) {\n        newMaxPropValue=statePropertyMap.get(maxPropKey);\n      }\n else {\n        newMaxPropValue=maxProp.getValue();\n      }\n      statePropertyMap.put(fullyQualifiedMaxPropKey,newMaxPropValue);\n    }\n  }\n  String whereClause=null;\n  List<String> maxValueColumnNameList=StringUtils.isEmpty(maxValueColumnNames) ? new ArrayList<>(0) : Arrays.asList(maxValueColumnNames.split(\"\\\\s*,\\\\s*\"));\n  List<String> maxValueClauses=new ArrayList<>(maxValueColumnNameList.size());\n  String columnsClause=null;\n  List<String> maxValueSelectColumns=new ArrayList<>(maxValueColumnNameList.size() + 1);\n  maxValueSelectColumns.add(\"COUNT(*)\");\n  IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n    String colName=maxValueColumnNameList.get(index);\n    maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n    String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n    if (!StringUtils.isEmpty(maxValue)) {\n      if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n        super.setup(context,false,finalFileToProcess);\n      }\n      Integer type=getColumnType(tableName,colName,dbAdapter);\n      maxValueClauses.add(colName + (index == 0 ? \" > \" : \" >= \") + getLiteralByType(type,maxValue,dbAdapter.getName()));\n    }\n  }\n);\n  if (customWhereClause != null) {\n    maxValueClauses.add(\"(\" + customWhereClause + \")\");\n  }\n  whereClause=StringUtils.join(maxValueClauses,\" AND \");\n  columnsClause=StringUtils.join(maxValueSelectColumns,\", \");\n  final String selectQuery=dbAdapter.getSelectStatement(tableName,columnsClause,whereClause,null,null,null);\n  long rowCount=0;\n  try (final Connection con=dbcpService.getConnection(finalFileToProcess == null ? Collections.emptyMap() : finalFileToProcess.getAttributes());final Statement st=con.createStatement()){\n    final Integer queryTimeout=context.getProperty(QUERY_TIMEOUT).evaluateAttributeExpressions(fileToProcess).asTimePeriod(TimeUnit.SECONDS).intValue();\n    st.setQueryTimeout(queryTimeout);\n    logger.debug(\"Executing {}\",new Object[]{selectQuery});\n    ResultSet resultSet;\n    resultSet=st.executeQuery(selectQuery);\n    if (resultSet.next()) {\n      rowCount=resultSet.getLong(1);\n      ResultSetMetaData rsmd=resultSet.getMetaData();\n      for (int i=2; i <= rsmd.getColumnCount(); i++) {\n        String resultColumnName=(StringUtils.isNotEmpty(rsmd.getColumnLabel(i)) ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i)).toLowerCase();\n        String fullyQualifiedStateKey=getStateKey(tableName,resultColumnName,dbAdapter);\n        String resultColumnCurrentMax=statePropertyMap.get(fullyQualifiedStateKey);\n        if (StringUtils.isEmpty(resultColumnCurrentMax) && !isDynamicTableName) {\n          resultColumnCurrentMax=statePropertyMap.get(resultColumnName);\n        }\n        int type=rsmd.getColumnType(i);\n        if (isDynamicTableName) {\n          columnTypeMap.put(fullyQualifiedStateKey,type);\n        }\n        try {\n          String newMaxValue=getMaxValueFromRow(resultSet,i,type,resultColumnCurrentMax,dbAdapter.getName());\n          if (newMaxValue != null) {\n            statePropertyMap.put(fullyQualifiedStateKey,newMaxValue);\n          }\n        }\n catch (        ParseException|IOException pie) {\n          throw new ProcessException(pie);\n        }\n      }\n    }\n else {\n      throw new SQLException(\"No rows returned from metadata query: \" + selectQuery);\n    }\n    IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n      String colName=maxValueColumnNameList.get(index);\n      maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n      String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n      if (!StringUtils.isEmpty(maxValue)) {\n        if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n          super.setup(context,false,finalFileToProcess);\n        }\n        Integer type=getColumnType(tableName,colName,dbAdapter);\n        maxValueClauses.add(colName + \" <= \" + getLiteralByType(type,maxValue,dbAdapter.getName()));\n      }\n    }\n);\n    whereClause=StringUtils.join(maxValueClauses,\" AND \");\n    final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n    for (long i=0; i < numberOfFetches; i++) {\n      Long limit=partitionSize == 0 ? null : (long)partitionSize;\n      Long offset=partitionSize == 0 ? null : i * partitionSize;\n      final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n      final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n      FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n      sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n      if (columnNames != null) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n      }\n      if (StringUtils.isNotBlank(whereClause)) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n      }\n      if (StringUtils.isNotBlank(maxColumnNames)) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n      }\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n      if (partitionSize != 0) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n      }\n      session.transfer(sqlFlowFile,REL_SUCCESS);\n    }\n    if (fileToProcess != null) {\n      session.remove(fileToProcess);\n    }\n  }\n catch (  SQLException e) {\n    if (fileToProcess != null) {\n      logger.error(\"Unable to execute SQL select query {} due to {}, routing {} to failure\",new Object[]{selectQuery,e,fileToProcess});\n      fileToProcess=session.putAttribute(fileToProcess,\"generatetablefetch.sql.error\",e.getMessage());\n      session.transfer(fileToProcess,REL_FAILURE);\n    }\n else {\n      logger.error(\"Unable to execute SQL select query {} due to {}\",new Object[]{selectQuery,e});\n      throw new ProcessException(e);\n    }\n  }\n  session.commit();\n  try {\n    stateManager.setState(statePropertyMap,Scope.CLUSTER);\n  }\n catch (  IOException ioe) {\n    logger.error(\"{} failed to update State Manager, observed maximum values will not be recorded. \" + \"Also, any generated SQL statements may be duplicated.\",new Object[]{this,ioe});\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 971,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 12730,
                        "startLineNumber": 213,
                        "startColumnNumber": 8,
                        "endLineNumber": 410,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  final Map<String,String> statePropertyMap=new HashMap<>(stateMap.toMap());\n  for (  final Map.Entry<String,String> maxProp : maxValueProperties.entrySet()) {\n    String maxPropKey=maxProp.getKey().toLowerCase();\n    String fullyQualifiedMaxPropKey=getStateKey(tableName,maxPropKey,dbAdapter);\n    if (!statePropertyMap.containsKey(fullyQualifiedMaxPropKey)) {\n      String newMaxPropValue;\n      if (statePropertyMap.containsKey(maxPropKey)) {\n        newMaxPropValue=statePropertyMap.get(maxPropKey);\n      }\n else {\n        newMaxPropValue=maxProp.getValue();\n      }\n      statePropertyMap.put(fullyQualifiedMaxPropKey,newMaxPropValue);\n    }\n  }\n  String whereClause=null;\n  List<String> maxValueColumnNameList=StringUtils.isEmpty(maxValueColumnNames) ? new ArrayList<>(0) : Arrays.asList(maxValueColumnNames.split(\"\\\\s*,\\\\s*\"));\n  List<String> maxValueClauses=new ArrayList<>(maxValueColumnNameList.size());\n  String columnsClause=null;\n  List<String> maxValueSelectColumns=new ArrayList<>(maxValueColumnNameList.size() + 1);\n  maxValueSelectColumns.add(\"COUNT(*)\");\n  IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n    String colName=maxValueColumnNameList.get(index);\n    maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n    String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n    if (!StringUtils.isEmpty(maxValue)) {\n      if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n        super.setup(context,false,finalFileToProcess);\n      }\n      Integer type=getColumnType(tableName,colName,dbAdapter);\n      maxValueClauses.add(colName + (index == 0 ? \" > \" : \" >= \") + getLiteralByType(type,maxValue,dbAdapter.getName()));\n    }\n  }\n);\n  if (customWhereClause != null) {\n    maxValueClauses.add(\"(\" + customWhereClause + \")\");\n  }\n  whereClause=StringUtils.join(maxValueClauses,\" AND \");\n  columnsClause=StringUtils.join(maxValueSelectColumns,\", \");\n  final String selectQuery=dbAdapter.getSelectStatement(tableName,columnsClause,whereClause,null,null,null);\n  long rowCount=0;\n  try (final Connection con=dbcpService.getConnection(finalFileToProcess == null ? Collections.emptyMap() : finalFileToProcess.getAttributes());final Statement st=con.createStatement()){\n    final Integer queryTimeout=context.getProperty(QUERY_TIMEOUT).evaluateAttributeExpressions(fileToProcess).asTimePeriod(TimeUnit.SECONDS).intValue();\n    st.setQueryTimeout(queryTimeout);\n    logger.debug(\"Executing {}\",new Object[]{selectQuery});\n    ResultSet resultSet;\n    resultSet=st.executeQuery(selectQuery);\n    if (resultSet.next()) {\n      rowCount=resultSet.getLong(1);\n      ResultSetMetaData rsmd=resultSet.getMetaData();\n      for (int i=2; i <= rsmd.getColumnCount(); i++) {\n        String resultColumnName=(StringUtils.isNotEmpty(rsmd.getColumnLabel(i)) ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i)).toLowerCase();\n        String fullyQualifiedStateKey=getStateKey(tableName,resultColumnName,dbAdapter);\n        String resultColumnCurrentMax=statePropertyMap.get(fullyQualifiedStateKey);\n        if (StringUtils.isEmpty(resultColumnCurrentMax) && !isDynamicTableName) {\n          resultColumnCurrentMax=statePropertyMap.get(resultColumnName);\n        }\n        int type=rsmd.getColumnType(i);\n        if (isDynamicTableName) {\n          columnTypeMap.put(fullyQualifiedStateKey,type);\n        }\n        try {\n          String newMaxValue=getMaxValueFromRow(resultSet,i,type,resultColumnCurrentMax,dbAdapter.getName());\n          if (newMaxValue != null) {\n            statePropertyMap.put(fullyQualifiedStateKey,newMaxValue);\n          }\n        }\n catch (        ParseException|IOException pie) {\n          throw new ProcessException(pie);\n        }\n      }\n    }\n else {\n      throw new SQLException(\"No rows returned from metadata query: \" + selectQuery);\n    }\n    IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n      String colName=maxValueColumnNameList.get(index);\n      maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n      String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n      if (!StringUtils.isEmpty(maxValue)) {\n        if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n          super.setup(context,false,finalFileToProcess);\n        }\n        Integer type=getColumnType(tableName,colName,dbAdapter);\n        maxValueClauses.add(colName + \" <= \" + getLiteralByType(type,maxValue,dbAdapter.getName()));\n      }\n    }\n);\n    whereClause=StringUtils.join(maxValueClauses,\" AND \");\n    final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n    for (long i=0; i < numberOfFetches; i++) {\n      Long limit=partitionSize == 0 ? null : (long)partitionSize;\n      Long offset=partitionSize == 0 ? null : i * partitionSize;\n      final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n      final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n      FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n      sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n      if (columnNames != null) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n      }\n      if (StringUtils.isNotBlank(whereClause)) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n      }\n      if (StringUtils.isNotBlank(maxColumnNames)) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n      }\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n      if (partitionSize != 0) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n      }\n      session.transfer(sqlFlowFile,REL_SUCCESS);\n    }\n    if (fileToProcess != null) {\n      session.remove(fileToProcess);\n    }\n  }\n catch (  SQLException e) {\n    if (fileToProcess != null) {\n      logger.error(\"Unable to execute SQL select query {} due to {}, routing {} to failure\",new Object[]{selectQuery,e,fileToProcess});\n      fileToProcess=session.putAttribute(fileToProcess,\"generatetablefetch.sql.error\",e.getMessage());\n      session.transfer(fileToProcess,REL_FAILURE);\n    }\n else {\n      logger.error(\"Unable to execute SQL select query {} due to {}\",new Object[]{selectQuery,e});\n      throw new ProcessException(e);\n    }\n  }\n  session.commit();\n  try {\n    stateManager.setState(statePropertyMap,Scope.CLUSTER);\n  }\n catch (  IOException ioe) {\n    logger.error(\"{} failed to update State Manager, observed maximum values will not be recorded. \" + \"Also, any generated SQL statements may be duplicated.\",new Object[]{this,ioe});\n  }\n}\n catch (final ProcessException pe) {\n  Throwable t=(pe.getCause() == null ? pe : pe.getCause());\n  logger.error(\"Error during processing: {}\",new Object[]{t.getMessage()},t);\n  session.rollback();\n  context.yield();\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 1018,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 14819,
                        "startLineNumber": 173,
                        "startColumnNumber": 124,
                        "endLineNumber": 411,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (!isDynamicTableName && !isDynamicMaxValues && !setupComplete.get()) {\n    super.setup(context);\n  }\n  ProcessSession session=sessionFactory.createSession();\n  FlowFile fileToProcess=null;\n  if (context.hasIncomingConnection()) {\n    fileToProcess=session.get();\n    if (fileToProcess == null) {\n      return;\n    }\n  }\n  final ComponentLog logger=getLogger();\n  final DBCPService dbcpService=context.getProperty(DBCP_SERVICE).asControllerService(DBCPService.class);\n  final DatabaseAdapter dbAdapter=dbAdapters.get(context.getProperty(DB_TYPE).getValue());\n  final String tableName=context.getProperty(TABLE_NAME).evaluateAttributeExpressions(fileToProcess).getValue();\n  final String columnNames=context.getProperty(COLUMN_NAMES).evaluateAttributeExpressions(fileToProcess).getValue();\n  final String maxValueColumnNames=context.getProperty(MAX_VALUE_COLUMN_NAMES).evaluateAttributeExpressions(fileToProcess).getValue();\n  final int partitionSize=context.getProperty(PARTITION_SIZE).evaluateAttributeExpressions(fileToProcess).asInteger();\n  final String customWhereClause=context.getProperty(WHERE_CLAUSE).evaluateAttributeExpressions(fileToProcess).getValue();\n  final StateManager stateManager=context.getStateManager();\n  final StateMap stateMap;\n  FlowFile finalFileToProcess=fileToProcess;\n  try {\n    stateMap=stateManager.getState(Scope.CLUSTER);\n  }\n catch (  final IOException ioe) {\n    logger.error(\"Failed to retrieve observed maximum values from the State Manager. Will not perform \" + \"query until this is accomplished.\",ioe);\n    context.yield();\n    return;\n  }\n  try {\n    final Map<String,String> statePropertyMap=new HashMap<>(stateMap.toMap());\n    for (    final Map.Entry<String,String> maxProp : maxValueProperties.entrySet()) {\n      String maxPropKey=maxProp.getKey().toLowerCase();\n      String fullyQualifiedMaxPropKey=getStateKey(tableName,maxPropKey,dbAdapter);\n      if (!statePropertyMap.containsKey(fullyQualifiedMaxPropKey)) {\n        String newMaxPropValue;\n        if (statePropertyMap.containsKey(maxPropKey)) {\n          newMaxPropValue=statePropertyMap.get(maxPropKey);\n        }\n else {\n          newMaxPropValue=maxProp.getValue();\n        }\n        statePropertyMap.put(fullyQualifiedMaxPropKey,newMaxPropValue);\n      }\n    }\n    String whereClause=null;\n    List<String> maxValueColumnNameList=StringUtils.isEmpty(maxValueColumnNames) ? new ArrayList<>(0) : Arrays.asList(maxValueColumnNames.split(\"\\\\s*,\\\\s*\"));\n    List<String> maxValueClauses=new ArrayList<>(maxValueColumnNameList.size());\n    String columnsClause=null;\n    List<String> maxValueSelectColumns=new ArrayList<>(maxValueColumnNameList.size() + 1);\n    maxValueSelectColumns.add(\"COUNT(*)\");\n    IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n      String colName=maxValueColumnNameList.get(index);\n      maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n      String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n      if (!StringUtils.isEmpty(maxValue)) {\n        if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n          super.setup(context,false,finalFileToProcess);\n        }\n        Integer type=getColumnType(tableName,colName,dbAdapter);\n        maxValueClauses.add(colName + (index == 0 ? \" > \" : \" >= \") + getLiteralByType(type,maxValue,dbAdapter.getName()));\n      }\n    }\n);\n    if (customWhereClause != null) {\n      maxValueClauses.add(\"(\" + customWhereClause + \")\");\n    }\n    whereClause=StringUtils.join(maxValueClauses,\" AND \");\n    columnsClause=StringUtils.join(maxValueSelectColumns,\", \");\n    final String selectQuery=dbAdapter.getSelectStatement(tableName,columnsClause,whereClause,null,null,null);\n    long rowCount=0;\n    try (final Connection con=dbcpService.getConnection(finalFileToProcess == null ? Collections.emptyMap() : finalFileToProcess.getAttributes());final Statement st=con.createStatement()){\n      final Integer queryTimeout=context.getProperty(QUERY_TIMEOUT).evaluateAttributeExpressions(fileToProcess).asTimePeriod(TimeUnit.SECONDS).intValue();\n      st.setQueryTimeout(queryTimeout);\n      logger.debug(\"Executing {}\",new Object[]{selectQuery});\n      ResultSet resultSet;\n      resultSet=st.executeQuery(selectQuery);\n      if (resultSet.next()) {\n        rowCount=resultSet.getLong(1);\n        ResultSetMetaData rsmd=resultSet.getMetaData();\n        for (int i=2; i <= rsmd.getColumnCount(); i++) {\n          String resultColumnName=(StringUtils.isNotEmpty(rsmd.getColumnLabel(i)) ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i)).toLowerCase();\n          String fullyQualifiedStateKey=getStateKey(tableName,resultColumnName,dbAdapter);\n          String resultColumnCurrentMax=statePropertyMap.get(fullyQualifiedStateKey);\n          if (StringUtils.isEmpty(resultColumnCurrentMax) && !isDynamicTableName) {\n            resultColumnCurrentMax=statePropertyMap.get(resultColumnName);\n          }\n          int type=rsmd.getColumnType(i);\n          if (isDynamicTableName) {\n            columnTypeMap.put(fullyQualifiedStateKey,type);\n          }\n          try {\n            String newMaxValue=getMaxValueFromRow(resultSet,i,type,resultColumnCurrentMax,dbAdapter.getName());\n            if (newMaxValue != null) {\n              statePropertyMap.put(fullyQualifiedStateKey,newMaxValue);\n            }\n          }\n catch (          ParseException|IOException pie) {\n            throw new ProcessException(pie);\n          }\n        }\n      }\n else {\n        throw new SQLException(\"No rows returned from metadata query: \" + selectQuery);\n      }\n      IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n        String colName=maxValueColumnNameList.get(index);\n        maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n        String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n        if (!StringUtils.isEmpty(maxValue)) {\n          if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n            super.setup(context,false,finalFileToProcess);\n          }\n          Integer type=getColumnType(tableName,colName,dbAdapter);\n          maxValueClauses.add(colName + \" <= \" + getLiteralByType(type,maxValue,dbAdapter.getName()));\n        }\n      }\n);\n      whereClause=StringUtils.join(maxValueClauses,\" AND \");\n      final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n      for (long i=0; i < numberOfFetches; i++) {\n        Long limit=partitionSize == 0 ? null : (long)partitionSize;\n        Long offset=partitionSize == 0 ? null : i * partitionSize;\n        final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n        final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n        FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n        sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n        if (columnNames != null) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n        }\n        if (StringUtils.isNotBlank(whereClause)) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n        }\n        if (StringUtils.isNotBlank(maxColumnNames)) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n        }\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n        if (partitionSize != 0) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n        }\n        session.transfer(sqlFlowFile,REL_SUCCESS);\n      }\n      if (fileToProcess != null) {\n        session.remove(fileToProcess);\n      }\n    }\n catch (    SQLException e) {\n      if (fileToProcess != null) {\n        logger.error(\"Unable to execute SQL select query {} due to {}, routing {} to failure\",new Object[]{selectQuery,e,fileToProcess});\n        fileToProcess=session.putAttribute(fileToProcess,\"generatetablefetch.sql.error\",e.getMessage());\n        session.transfer(fileToProcess,REL_FAILURE);\n      }\n else {\n        logger.error(\"Unable to execute SQL select query {} due to {}\",new Object[]{selectQuery,e});\n        throw new ProcessException(e);\n      }\n    }\n    session.commit();\n    try {\n      stateManager.setState(statePropertyMap,Scope.CLUSTER);\n    }\n catch (    IOException ioe) {\n      logger.error(\"{} failed to update State Manager, observed maximum values will not be recorded. \" + \"Also, any generated SQL statements may be duplicated.\",new Object[]{this,ioe});\n    }\n  }\n catch (  final ProcessException pe) {\n    Throwable t=(pe.getCause() == null ? pe : pe.getCause());\n    logger.error(\"Error during processing: {}\",new Object[]{t.getMessage()},t);\n    session.rollback();\n    context.yield();\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 1229,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 14953,
                        "startLineNumber": 172,
                        "startColumnNumber": 4,
                        "endLineNumber": 411,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void onTrigger(final ProcessContext context,final ProcessSessionFactory sessionFactory) throws ProcessException {\n  if (!isDynamicTableName && !isDynamicMaxValues && !setupComplete.get()) {\n    super.setup(context);\n  }\n  ProcessSession session=sessionFactory.createSession();\n  FlowFile fileToProcess=null;\n  if (context.hasIncomingConnection()) {\n    fileToProcess=session.get();\n    if (fileToProcess == null) {\n      return;\n    }\n  }\n  final ComponentLog logger=getLogger();\n  final DBCPService dbcpService=context.getProperty(DBCP_SERVICE).asControllerService(DBCPService.class);\n  final DatabaseAdapter dbAdapter=dbAdapters.get(context.getProperty(DB_TYPE).getValue());\n  final String tableName=context.getProperty(TABLE_NAME).evaluateAttributeExpressions(fileToProcess).getValue();\n  final String columnNames=context.getProperty(COLUMN_NAMES).evaluateAttributeExpressions(fileToProcess).getValue();\n  final String maxValueColumnNames=context.getProperty(MAX_VALUE_COLUMN_NAMES).evaluateAttributeExpressions(fileToProcess).getValue();\n  final int partitionSize=context.getProperty(PARTITION_SIZE).evaluateAttributeExpressions(fileToProcess).asInteger();\n  final String customWhereClause=context.getProperty(WHERE_CLAUSE).evaluateAttributeExpressions(fileToProcess).getValue();\n  final StateManager stateManager=context.getStateManager();\n  final StateMap stateMap;\n  FlowFile finalFileToProcess=fileToProcess;\n  try {\n    stateMap=stateManager.getState(Scope.CLUSTER);\n  }\n catch (  final IOException ioe) {\n    logger.error(\"Failed to retrieve observed maximum values from the State Manager. Will not perform \" + \"query until this is accomplished.\",ioe);\n    context.yield();\n    return;\n  }\n  try {\n    final Map<String,String> statePropertyMap=new HashMap<>(stateMap.toMap());\n    for (    final Map.Entry<String,String> maxProp : maxValueProperties.entrySet()) {\n      String maxPropKey=maxProp.getKey().toLowerCase();\n      String fullyQualifiedMaxPropKey=getStateKey(tableName,maxPropKey,dbAdapter);\n      if (!statePropertyMap.containsKey(fullyQualifiedMaxPropKey)) {\n        String newMaxPropValue;\n        if (statePropertyMap.containsKey(maxPropKey)) {\n          newMaxPropValue=statePropertyMap.get(maxPropKey);\n        }\n else {\n          newMaxPropValue=maxProp.getValue();\n        }\n        statePropertyMap.put(fullyQualifiedMaxPropKey,newMaxPropValue);\n      }\n    }\n    String whereClause=null;\n    List<String> maxValueColumnNameList=StringUtils.isEmpty(maxValueColumnNames) ? new ArrayList<>(0) : Arrays.asList(maxValueColumnNames.split(\"\\\\s*,\\\\s*\"));\n    List<String> maxValueClauses=new ArrayList<>(maxValueColumnNameList.size());\n    String columnsClause=null;\n    List<String> maxValueSelectColumns=new ArrayList<>(maxValueColumnNameList.size() + 1);\n    maxValueSelectColumns.add(\"COUNT(*)\");\n    IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n      String colName=maxValueColumnNameList.get(index);\n      maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n      String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n      if (!StringUtils.isEmpty(maxValue)) {\n        if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n          super.setup(context,false,finalFileToProcess);\n        }\n        Integer type=getColumnType(tableName,colName,dbAdapter);\n        maxValueClauses.add(colName + (index == 0 ? \" > \" : \" >= \") + getLiteralByType(type,maxValue,dbAdapter.getName()));\n      }\n    }\n);\n    if (customWhereClause != null) {\n      maxValueClauses.add(\"(\" + customWhereClause + \")\");\n    }\n    whereClause=StringUtils.join(maxValueClauses,\" AND \");\n    columnsClause=StringUtils.join(maxValueSelectColumns,\", \");\n    final String selectQuery=dbAdapter.getSelectStatement(tableName,columnsClause,whereClause,null,null,null);\n    long rowCount=0;\n    try (final Connection con=dbcpService.getConnection(finalFileToProcess == null ? Collections.emptyMap() : finalFileToProcess.getAttributes());final Statement st=con.createStatement()){\n      final Integer queryTimeout=context.getProperty(QUERY_TIMEOUT).evaluateAttributeExpressions(fileToProcess).asTimePeriod(TimeUnit.SECONDS).intValue();\n      st.setQueryTimeout(queryTimeout);\n      logger.debug(\"Executing {}\",new Object[]{selectQuery});\n      ResultSet resultSet;\n      resultSet=st.executeQuery(selectQuery);\n      if (resultSet.next()) {\n        rowCount=resultSet.getLong(1);\n        ResultSetMetaData rsmd=resultSet.getMetaData();\n        for (int i=2; i <= rsmd.getColumnCount(); i++) {\n          String resultColumnName=(StringUtils.isNotEmpty(rsmd.getColumnLabel(i)) ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i)).toLowerCase();\n          String fullyQualifiedStateKey=getStateKey(tableName,resultColumnName,dbAdapter);\n          String resultColumnCurrentMax=statePropertyMap.get(fullyQualifiedStateKey);\n          if (StringUtils.isEmpty(resultColumnCurrentMax) && !isDynamicTableName) {\n            resultColumnCurrentMax=statePropertyMap.get(resultColumnName);\n          }\n          int type=rsmd.getColumnType(i);\n          if (isDynamicTableName) {\n            columnTypeMap.put(fullyQualifiedStateKey,type);\n          }\n          try {\n            String newMaxValue=getMaxValueFromRow(resultSet,i,type,resultColumnCurrentMax,dbAdapter.getName());\n            if (newMaxValue != null) {\n              statePropertyMap.put(fullyQualifiedStateKey,newMaxValue);\n            }\n          }\n catch (          ParseException|IOException pie) {\n            throw new ProcessException(pie);\n          }\n        }\n      }\n else {\n        throw new SQLException(\"No rows returned from metadata query: \" + selectQuery);\n      }\n      IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n        String colName=maxValueColumnNameList.get(index);\n        maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n        String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n        if (!StringUtils.isEmpty(maxValue)) {\n          if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n            super.setup(context,false,finalFileToProcess);\n          }\n          Integer type=getColumnType(tableName,colName,dbAdapter);\n          maxValueClauses.add(colName + \" <= \" + getLiteralByType(type,maxValue,dbAdapter.getName()));\n        }\n      }\n);\n      whereClause=StringUtils.join(maxValueClauses,\" AND \");\n      final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n      for (long i=0; i < numberOfFetches; i++) {\n        Long limit=partitionSize == 0 ? null : (long)partitionSize;\n        Long offset=partitionSize == 0 ? null : i * partitionSize;\n        final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n        final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n        FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n        sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n        if (columnNames != null) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n        }\n        if (StringUtils.isNotBlank(whereClause)) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n        }\n        if (StringUtils.isNotBlank(maxColumnNames)) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n        }\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n        if (partitionSize != 0) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n        }\n        session.transfer(sqlFlowFile,REL_SUCCESS);\n      }\n      if (fileToProcess != null) {\n        session.remove(fileToProcess);\n      }\n    }\n catch (    SQLException e) {\n      if (fileToProcess != null) {\n        logger.error(\"Unable to execute SQL select query {} due to {}, routing {} to failure\",new Object[]{selectQuery,e,fileToProcess});\n        fileToProcess=session.putAttribute(fileToProcess,\"generatetablefetch.sql.error\",e.getMessage());\n        session.transfer(fileToProcess,REL_FAILURE);\n      }\n else {\n        logger.error(\"Unable to execute SQL select query {} due to {}\",new Object[]{selectQuery,e});\n        throw new ProcessException(e);\n      }\n    }\n    session.commit();\n    try {\n      stateManager.setState(statePropertyMap,Scope.CLUSTER);\n    }\n catch (    IOException ioe) {\n      logger.error(\"{} failed to update State Manager, observed maximum values will not be recorded. \" + \"Also, any generated SQL statements may be duplicated.\",new Object[]{this,ioe});\n    }\n  }\n catch (  final ProcessException pe) {\n    Throwable t=(pe.getCause() == null ? pe : pe.getCause());\n    logger.error(\"Error during processing: {}\",new Object[]{t.getMessage()},t);\n    session.rollback();\n    context.yield();\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 1247,
                    "astHeight": 18
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                "nodePosition": {
                    "charLength": 49,
                    "startLineNumber": 251,
                    "startColumnNumber": 12,
                    "endLineNumber": 251,
                    "endColumnNumber": 61
                },
                "nodeContext": "IntStream.range(0,maxValueColumnNameList.size())",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 7,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "0",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 278,
                "startColumnNumber": 28,
                "endLineNumber": 278,
                "endColumnNumber": 29
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 12,
                        "startLineNumber": 278,
                        "startColumnNumber": 17,
                        "endLineNumber": 278,
                        "endColumnNumber": 29
                    },
                    "nodeContext": "rowCount=0",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 18,
                        "startLineNumber": 278,
                        "startColumnNumber": 12,
                        "endLineNumber": 278,
                        "endColumnNumber": 30
                    },
                    "nodeContext": "long rowCount=0;\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 12385,
                        "startLineNumber": 213,
                        "startColumnNumber": 12,
                        "endLineNumber": 404,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final Map<String,String> statePropertyMap=new HashMap<>(stateMap.toMap());\n  for (  final Map.Entry<String,String> maxProp : maxValueProperties.entrySet()) {\n    String maxPropKey=maxProp.getKey().toLowerCase();\n    String fullyQualifiedMaxPropKey=getStateKey(tableName,maxPropKey,dbAdapter);\n    if (!statePropertyMap.containsKey(fullyQualifiedMaxPropKey)) {\n      String newMaxPropValue;\n      if (statePropertyMap.containsKey(maxPropKey)) {\n        newMaxPropValue=statePropertyMap.get(maxPropKey);\n      }\n else {\n        newMaxPropValue=maxProp.getValue();\n      }\n      statePropertyMap.put(fullyQualifiedMaxPropKey,newMaxPropValue);\n    }\n  }\n  String whereClause=null;\n  List<String> maxValueColumnNameList=StringUtils.isEmpty(maxValueColumnNames) ? new ArrayList<>(0) : Arrays.asList(maxValueColumnNames.split(\"\\\\s*,\\\\s*\"));\n  List<String> maxValueClauses=new ArrayList<>(maxValueColumnNameList.size());\n  String columnsClause=null;\n  List<String> maxValueSelectColumns=new ArrayList<>(maxValueColumnNameList.size() + 1);\n  maxValueSelectColumns.add(\"COUNT(*)\");\n  IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n    String colName=maxValueColumnNameList.get(index);\n    maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n    String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n    if (!StringUtils.isEmpty(maxValue)) {\n      if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n        super.setup(context,false,finalFileToProcess);\n      }\n      Integer type=getColumnType(tableName,colName,dbAdapter);\n      maxValueClauses.add(colName + (index == 0 ? \" > \" : \" >= \") + getLiteralByType(type,maxValue,dbAdapter.getName()));\n    }\n  }\n);\n  if (customWhereClause != null) {\n    maxValueClauses.add(\"(\" + customWhereClause + \")\");\n  }\n  whereClause=StringUtils.join(maxValueClauses,\" AND \");\n  columnsClause=StringUtils.join(maxValueSelectColumns,\", \");\n  final String selectQuery=dbAdapter.getSelectStatement(tableName,columnsClause,whereClause,null,null,null);\n  long rowCount=0;\n  try (final Connection con=dbcpService.getConnection(finalFileToProcess == null ? Collections.emptyMap() : finalFileToProcess.getAttributes());final Statement st=con.createStatement()){\n    final Integer queryTimeout=context.getProperty(QUERY_TIMEOUT).evaluateAttributeExpressions(fileToProcess).asTimePeriod(TimeUnit.SECONDS).intValue();\n    st.setQueryTimeout(queryTimeout);\n    logger.debug(\"Executing {}\",new Object[]{selectQuery});\n    ResultSet resultSet;\n    resultSet=st.executeQuery(selectQuery);\n    if (resultSet.next()) {\n      rowCount=resultSet.getLong(1);\n      ResultSetMetaData rsmd=resultSet.getMetaData();\n      for (int i=2; i <= rsmd.getColumnCount(); i++) {\n        String resultColumnName=(StringUtils.isNotEmpty(rsmd.getColumnLabel(i)) ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i)).toLowerCase();\n        String fullyQualifiedStateKey=getStateKey(tableName,resultColumnName,dbAdapter);\n        String resultColumnCurrentMax=statePropertyMap.get(fullyQualifiedStateKey);\n        if (StringUtils.isEmpty(resultColumnCurrentMax) && !isDynamicTableName) {\n          resultColumnCurrentMax=statePropertyMap.get(resultColumnName);\n        }\n        int type=rsmd.getColumnType(i);\n        if (isDynamicTableName) {\n          columnTypeMap.put(fullyQualifiedStateKey,type);\n        }\n        try {\n          String newMaxValue=getMaxValueFromRow(resultSet,i,type,resultColumnCurrentMax,dbAdapter.getName());\n          if (newMaxValue != null) {\n            statePropertyMap.put(fullyQualifiedStateKey,newMaxValue);\n          }\n        }\n catch (        ParseException|IOException pie) {\n          throw new ProcessException(pie);\n        }\n      }\n    }\n else {\n      throw new SQLException(\"No rows returned from metadata query: \" + selectQuery);\n    }\n    IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n      String colName=maxValueColumnNameList.get(index);\n      maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n      String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n      if (!StringUtils.isEmpty(maxValue)) {\n        if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n          super.setup(context,false,finalFileToProcess);\n        }\n        Integer type=getColumnType(tableName,colName,dbAdapter);\n        maxValueClauses.add(colName + \" <= \" + getLiteralByType(type,maxValue,dbAdapter.getName()));\n      }\n    }\n);\n    whereClause=StringUtils.join(maxValueClauses,\" AND \");\n    final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n    for (long i=0; i < numberOfFetches; i++) {\n      Long limit=partitionSize == 0 ? null : (long)partitionSize;\n      Long offset=partitionSize == 0 ? null : i * partitionSize;\n      final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n      final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n      FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n      sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n      if (columnNames != null) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n      }\n      if (StringUtils.isNotBlank(whereClause)) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n      }\n      if (StringUtils.isNotBlank(maxColumnNames)) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n      }\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n      if (partitionSize != 0) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n      }\n      session.transfer(sqlFlowFile,REL_SUCCESS);\n    }\n    if (fileToProcess != null) {\n      session.remove(fileToProcess);\n    }\n  }\n catch (  SQLException e) {\n    if (fileToProcess != null) {\n      logger.error(\"Unable to execute SQL select query {} due to {}, routing {} to failure\",new Object[]{selectQuery,e,fileToProcess});\n      fileToProcess=session.putAttribute(fileToProcess,\"generatetablefetch.sql.error\",e.getMessage());\n      session.transfer(fileToProcess,REL_FAILURE);\n    }\n else {\n      logger.error(\"Unable to execute SQL select query {} due to {}\",new Object[]{selectQuery,e});\n      throw new ProcessException(e);\n    }\n  }\n  session.commit();\n  try {\n    stateManager.setState(statePropertyMap,Scope.CLUSTER);\n  }\n catch (  IOException ioe) {\n    logger.error(\"{} failed to update State Manager, observed maximum values will not be recorded. \" + \"Also, any generated SQL statements may be duplicated.\",new Object[]{this,ioe});\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 971,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 12730,
                        "startLineNumber": 213,
                        "startColumnNumber": 8,
                        "endLineNumber": 410,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  final Map<String,String> statePropertyMap=new HashMap<>(stateMap.toMap());\n  for (  final Map.Entry<String,String> maxProp : maxValueProperties.entrySet()) {\n    String maxPropKey=maxProp.getKey().toLowerCase();\n    String fullyQualifiedMaxPropKey=getStateKey(tableName,maxPropKey,dbAdapter);\n    if (!statePropertyMap.containsKey(fullyQualifiedMaxPropKey)) {\n      String newMaxPropValue;\n      if (statePropertyMap.containsKey(maxPropKey)) {\n        newMaxPropValue=statePropertyMap.get(maxPropKey);\n      }\n else {\n        newMaxPropValue=maxProp.getValue();\n      }\n      statePropertyMap.put(fullyQualifiedMaxPropKey,newMaxPropValue);\n    }\n  }\n  String whereClause=null;\n  List<String> maxValueColumnNameList=StringUtils.isEmpty(maxValueColumnNames) ? new ArrayList<>(0) : Arrays.asList(maxValueColumnNames.split(\"\\\\s*,\\\\s*\"));\n  List<String> maxValueClauses=new ArrayList<>(maxValueColumnNameList.size());\n  String columnsClause=null;\n  List<String> maxValueSelectColumns=new ArrayList<>(maxValueColumnNameList.size() + 1);\n  maxValueSelectColumns.add(\"COUNT(*)\");\n  IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n    String colName=maxValueColumnNameList.get(index);\n    maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n    String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n    if (!StringUtils.isEmpty(maxValue)) {\n      if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n        super.setup(context,false,finalFileToProcess);\n      }\n      Integer type=getColumnType(tableName,colName,dbAdapter);\n      maxValueClauses.add(colName + (index == 0 ? \" > \" : \" >= \") + getLiteralByType(type,maxValue,dbAdapter.getName()));\n    }\n  }\n);\n  if (customWhereClause != null) {\n    maxValueClauses.add(\"(\" + customWhereClause + \")\");\n  }\n  whereClause=StringUtils.join(maxValueClauses,\" AND \");\n  columnsClause=StringUtils.join(maxValueSelectColumns,\", \");\n  final String selectQuery=dbAdapter.getSelectStatement(tableName,columnsClause,whereClause,null,null,null);\n  long rowCount=0;\n  try (final Connection con=dbcpService.getConnection(finalFileToProcess == null ? Collections.emptyMap() : finalFileToProcess.getAttributes());final Statement st=con.createStatement()){\n    final Integer queryTimeout=context.getProperty(QUERY_TIMEOUT).evaluateAttributeExpressions(fileToProcess).asTimePeriod(TimeUnit.SECONDS).intValue();\n    st.setQueryTimeout(queryTimeout);\n    logger.debug(\"Executing {}\",new Object[]{selectQuery});\n    ResultSet resultSet;\n    resultSet=st.executeQuery(selectQuery);\n    if (resultSet.next()) {\n      rowCount=resultSet.getLong(1);\n      ResultSetMetaData rsmd=resultSet.getMetaData();\n      for (int i=2; i <= rsmd.getColumnCount(); i++) {\n        String resultColumnName=(StringUtils.isNotEmpty(rsmd.getColumnLabel(i)) ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i)).toLowerCase();\n        String fullyQualifiedStateKey=getStateKey(tableName,resultColumnName,dbAdapter);\n        String resultColumnCurrentMax=statePropertyMap.get(fullyQualifiedStateKey);\n        if (StringUtils.isEmpty(resultColumnCurrentMax) && !isDynamicTableName) {\n          resultColumnCurrentMax=statePropertyMap.get(resultColumnName);\n        }\n        int type=rsmd.getColumnType(i);\n        if (isDynamicTableName) {\n          columnTypeMap.put(fullyQualifiedStateKey,type);\n        }\n        try {\n          String newMaxValue=getMaxValueFromRow(resultSet,i,type,resultColumnCurrentMax,dbAdapter.getName());\n          if (newMaxValue != null) {\n            statePropertyMap.put(fullyQualifiedStateKey,newMaxValue);\n          }\n        }\n catch (        ParseException|IOException pie) {\n          throw new ProcessException(pie);\n        }\n      }\n    }\n else {\n      throw new SQLException(\"No rows returned from metadata query: \" + selectQuery);\n    }\n    IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n      String colName=maxValueColumnNameList.get(index);\n      maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n      String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n      if (!StringUtils.isEmpty(maxValue)) {\n        if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n          super.setup(context,false,finalFileToProcess);\n        }\n        Integer type=getColumnType(tableName,colName,dbAdapter);\n        maxValueClauses.add(colName + \" <= \" + getLiteralByType(type,maxValue,dbAdapter.getName()));\n      }\n    }\n);\n    whereClause=StringUtils.join(maxValueClauses,\" AND \");\n    final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n    for (long i=0; i < numberOfFetches; i++) {\n      Long limit=partitionSize == 0 ? null : (long)partitionSize;\n      Long offset=partitionSize == 0 ? null : i * partitionSize;\n      final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n      final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n      FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n      sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n      if (columnNames != null) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n      }\n      if (StringUtils.isNotBlank(whereClause)) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n      }\n      if (StringUtils.isNotBlank(maxColumnNames)) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n      }\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n      if (partitionSize != 0) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n      }\n      session.transfer(sqlFlowFile,REL_SUCCESS);\n    }\n    if (fileToProcess != null) {\n      session.remove(fileToProcess);\n    }\n  }\n catch (  SQLException e) {\n    if (fileToProcess != null) {\n      logger.error(\"Unable to execute SQL select query {} due to {}, routing {} to failure\",new Object[]{selectQuery,e,fileToProcess});\n      fileToProcess=session.putAttribute(fileToProcess,\"generatetablefetch.sql.error\",e.getMessage());\n      session.transfer(fileToProcess,REL_FAILURE);\n    }\n else {\n      logger.error(\"Unable to execute SQL select query {} due to {}\",new Object[]{selectQuery,e});\n      throw new ProcessException(e);\n    }\n  }\n  session.commit();\n  try {\n    stateManager.setState(statePropertyMap,Scope.CLUSTER);\n  }\n catch (  IOException ioe) {\n    logger.error(\"{} failed to update State Manager, observed maximum values will not be recorded. \" + \"Also, any generated SQL statements may be duplicated.\",new Object[]{this,ioe});\n  }\n}\n catch (final ProcessException pe) {\n  Throwable t=(pe.getCause() == null ? pe : pe.getCause());\n  logger.error(\"Error during processing: {}\",new Object[]{t.getMessage()},t);\n  session.rollback();\n  context.yield();\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 1018,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 14819,
                        "startLineNumber": 173,
                        "startColumnNumber": 124,
                        "endLineNumber": 411,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (!isDynamicTableName && !isDynamicMaxValues && !setupComplete.get()) {\n    super.setup(context);\n  }\n  ProcessSession session=sessionFactory.createSession();\n  FlowFile fileToProcess=null;\n  if (context.hasIncomingConnection()) {\n    fileToProcess=session.get();\n    if (fileToProcess == null) {\n      return;\n    }\n  }\n  final ComponentLog logger=getLogger();\n  final DBCPService dbcpService=context.getProperty(DBCP_SERVICE).asControllerService(DBCPService.class);\n  final DatabaseAdapter dbAdapter=dbAdapters.get(context.getProperty(DB_TYPE).getValue());\n  final String tableName=context.getProperty(TABLE_NAME).evaluateAttributeExpressions(fileToProcess).getValue();\n  final String columnNames=context.getProperty(COLUMN_NAMES).evaluateAttributeExpressions(fileToProcess).getValue();\n  final String maxValueColumnNames=context.getProperty(MAX_VALUE_COLUMN_NAMES).evaluateAttributeExpressions(fileToProcess).getValue();\n  final int partitionSize=context.getProperty(PARTITION_SIZE).evaluateAttributeExpressions(fileToProcess).asInteger();\n  final String customWhereClause=context.getProperty(WHERE_CLAUSE).evaluateAttributeExpressions(fileToProcess).getValue();\n  final StateManager stateManager=context.getStateManager();\n  final StateMap stateMap;\n  FlowFile finalFileToProcess=fileToProcess;\n  try {\n    stateMap=stateManager.getState(Scope.CLUSTER);\n  }\n catch (  final IOException ioe) {\n    logger.error(\"Failed to retrieve observed maximum values from the State Manager. Will not perform \" + \"query until this is accomplished.\",ioe);\n    context.yield();\n    return;\n  }\n  try {\n    final Map<String,String> statePropertyMap=new HashMap<>(stateMap.toMap());\n    for (    final Map.Entry<String,String> maxProp : maxValueProperties.entrySet()) {\n      String maxPropKey=maxProp.getKey().toLowerCase();\n      String fullyQualifiedMaxPropKey=getStateKey(tableName,maxPropKey,dbAdapter);\n      if (!statePropertyMap.containsKey(fullyQualifiedMaxPropKey)) {\n        String newMaxPropValue;\n        if (statePropertyMap.containsKey(maxPropKey)) {\n          newMaxPropValue=statePropertyMap.get(maxPropKey);\n        }\n else {\n          newMaxPropValue=maxProp.getValue();\n        }\n        statePropertyMap.put(fullyQualifiedMaxPropKey,newMaxPropValue);\n      }\n    }\n    String whereClause=null;\n    List<String> maxValueColumnNameList=StringUtils.isEmpty(maxValueColumnNames) ? new ArrayList<>(0) : Arrays.asList(maxValueColumnNames.split(\"\\\\s*,\\\\s*\"));\n    List<String> maxValueClauses=new ArrayList<>(maxValueColumnNameList.size());\n    String columnsClause=null;\n    List<String> maxValueSelectColumns=new ArrayList<>(maxValueColumnNameList.size() + 1);\n    maxValueSelectColumns.add(\"COUNT(*)\");\n    IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n      String colName=maxValueColumnNameList.get(index);\n      maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n      String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n      if (!StringUtils.isEmpty(maxValue)) {\n        if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n          super.setup(context,false,finalFileToProcess);\n        }\n        Integer type=getColumnType(tableName,colName,dbAdapter);\n        maxValueClauses.add(colName + (index == 0 ? \" > \" : \" >= \") + getLiteralByType(type,maxValue,dbAdapter.getName()));\n      }\n    }\n);\n    if (customWhereClause != null) {\n      maxValueClauses.add(\"(\" + customWhereClause + \")\");\n    }\n    whereClause=StringUtils.join(maxValueClauses,\" AND \");\n    columnsClause=StringUtils.join(maxValueSelectColumns,\", \");\n    final String selectQuery=dbAdapter.getSelectStatement(tableName,columnsClause,whereClause,null,null,null);\n    long rowCount=0;\n    try (final Connection con=dbcpService.getConnection(finalFileToProcess == null ? Collections.emptyMap() : finalFileToProcess.getAttributes());final Statement st=con.createStatement()){\n      final Integer queryTimeout=context.getProperty(QUERY_TIMEOUT).evaluateAttributeExpressions(fileToProcess).asTimePeriod(TimeUnit.SECONDS).intValue();\n      st.setQueryTimeout(queryTimeout);\n      logger.debug(\"Executing {}\",new Object[]{selectQuery});\n      ResultSet resultSet;\n      resultSet=st.executeQuery(selectQuery);\n      if (resultSet.next()) {\n        rowCount=resultSet.getLong(1);\n        ResultSetMetaData rsmd=resultSet.getMetaData();\n        for (int i=2; i <= rsmd.getColumnCount(); i++) {\n          String resultColumnName=(StringUtils.isNotEmpty(rsmd.getColumnLabel(i)) ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i)).toLowerCase();\n          String fullyQualifiedStateKey=getStateKey(tableName,resultColumnName,dbAdapter);\n          String resultColumnCurrentMax=statePropertyMap.get(fullyQualifiedStateKey);\n          if (StringUtils.isEmpty(resultColumnCurrentMax) && !isDynamicTableName) {\n            resultColumnCurrentMax=statePropertyMap.get(resultColumnName);\n          }\n          int type=rsmd.getColumnType(i);\n          if (isDynamicTableName) {\n            columnTypeMap.put(fullyQualifiedStateKey,type);\n          }\n          try {\n            String newMaxValue=getMaxValueFromRow(resultSet,i,type,resultColumnCurrentMax,dbAdapter.getName());\n            if (newMaxValue != null) {\n              statePropertyMap.put(fullyQualifiedStateKey,newMaxValue);\n            }\n          }\n catch (          ParseException|IOException pie) {\n            throw new ProcessException(pie);\n          }\n        }\n      }\n else {\n        throw new SQLException(\"No rows returned from metadata query: \" + selectQuery);\n      }\n      IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n        String colName=maxValueColumnNameList.get(index);\n        maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n        String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n        if (!StringUtils.isEmpty(maxValue)) {\n          if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n            super.setup(context,false,finalFileToProcess);\n          }\n          Integer type=getColumnType(tableName,colName,dbAdapter);\n          maxValueClauses.add(colName + \" <= \" + getLiteralByType(type,maxValue,dbAdapter.getName()));\n        }\n      }\n);\n      whereClause=StringUtils.join(maxValueClauses,\" AND \");\n      final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n      for (long i=0; i < numberOfFetches; i++) {\n        Long limit=partitionSize == 0 ? null : (long)partitionSize;\n        Long offset=partitionSize == 0 ? null : i * partitionSize;\n        final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n        final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n        FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n        sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n        if (columnNames != null) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n        }\n        if (StringUtils.isNotBlank(whereClause)) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n        }\n        if (StringUtils.isNotBlank(maxColumnNames)) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n        }\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n        if (partitionSize != 0) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n        }\n        session.transfer(sqlFlowFile,REL_SUCCESS);\n      }\n      if (fileToProcess != null) {\n        session.remove(fileToProcess);\n      }\n    }\n catch (    SQLException e) {\n      if (fileToProcess != null) {\n        logger.error(\"Unable to execute SQL select query {} due to {}, routing {} to failure\",new Object[]{selectQuery,e,fileToProcess});\n        fileToProcess=session.putAttribute(fileToProcess,\"generatetablefetch.sql.error\",e.getMessage());\n        session.transfer(fileToProcess,REL_FAILURE);\n      }\n else {\n        logger.error(\"Unable to execute SQL select query {} due to {}\",new Object[]{selectQuery,e});\n        throw new ProcessException(e);\n      }\n    }\n    session.commit();\n    try {\n      stateManager.setState(statePropertyMap,Scope.CLUSTER);\n    }\n catch (    IOException ioe) {\n      logger.error(\"{} failed to update State Manager, observed maximum values will not be recorded. \" + \"Also, any generated SQL statements may be duplicated.\",new Object[]{this,ioe});\n    }\n  }\n catch (  final ProcessException pe) {\n    Throwable t=(pe.getCause() == null ? pe : pe.getCause());\n    logger.error(\"Error during processing: {}\",new Object[]{t.getMessage()},t);\n    session.rollback();\n    context.yield();\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 1229,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 14953,
                        "startLineNumber": 172,
                        "startColumnNumber": 4,
                        "endLineNumber": 411,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void onTrigger(final ProcessContext context,final ProcessSessionFactory sessionFactory) throws ProcessException {\n  if (!isDynamicTableName && !isDynamicMaxValues && !setupComplete.get()) {\n    super.setup(context);\n  }\n  ProcessSession session=sessionFactory.createSession();\n  FlowFile fileToProcess=null;\n  if (context.hasIncomingConnection()) {\n    fileToProcess=session.get();\n    if (fileToProcess == null) {\n      return;\n    }\n  }\n  final ComponentLog logger=getLogger();\n  final DBCPService dbcpService=context.getProperty(DBCP_SERVICE).asControllerService(DBCPService.class);\n  final DatabaseAdapter dbAdapter=dbAdapters.get(context.getProperty(DB_TYPE).getValue());\n  final String tableName=context.getProperty(TABLE_NAME).evaluateAttributeExpressions(fileToProcess).getValue();\n  final String columnNames=context.getProperty(COLUMN_NAMES).evaluateAttributeExpressions(fileToProcess).getValue();\n  final String maxValueColumnNames=context.getProperty(MAX_VALUE_COLUMN_NAMES).evaluateAttributeExpressions(fileToProcess).getValue();\n  final int partitionSize=context.getProperty(PARTITION_SIZE).evaluateAttributeExpressions(fileToProcess).asInteger();\n  final String customWhereClause=context.getProperty(WHERE_CLAUSE).evaluateAttributeExpressions(fileToProcess).getValue();\n  final StateManager stateManager=context.getStateManager();\n  final StateMap stateMap;\n  FlowFile finalFileToProcess=fileToProcess;\n  try {\n    stateMap=stateManager.getState(Scope.CLUSTER);\n  }\n catch (  final IOException ioe) {\n    logger.error(\"Failed to retrieve observed maximum values from the State Manager. Will not perform \" + \"query until this is accomplished.\",ioe);\n    context.yield();\n    return;\n  }\n  try {\n    final Map<String,String> statePropertyMap=new HashMap<>(stateMap.toMap());\n    for (    final Map.Entry<String,String> maxProp : maxValueProperties.entrySet()) {\n      String maxPropKey=maxProp.getKey().toLowerCase();\n      String fullyQualifiedMaxPropKey=getStateKey(tableName,maxPropKey,dbAdapter);\n      if (!statePropertyMap.containsKey(fullyQualifiedMaxPropKey)) {\n        String newMaxPropValue;\n        if (statePropertyMap.containsKey(maxPropKey)) {\n          newMaxPropValue=statePropertyMap.get(maxPropKey);\n        }\n else {\n          newMaxPropValue=maxProp.getValue();\n        }\n        statePropertyMap.put(fullyQualifiedMaxPropKey,newMaxPropValue);\n      }\n    }\n    String whereClause=null;\n    List<String> maxValueColumnNameList=StringUtils.isEmpty(maxValueColumnNames) ? new ArrayList<>(0) : Arrays.asList(maxValueColumnNames.split(\"\\\\s*,\\\\s*\"));\n    List<String> maxValueClauses=new ArrayList<>(maxValueColumnNameList.size());\n    String columnsClause=null;\n    List<String> maxValueSelectColumns=new ArrayList<>(maxValueColumnNameList.size() + 1);\n    maxValueSelectColumns.add(\"COUNT(*)\");\n    IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n      String colName=maxValueColumnNameList.get(index);\n      maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n      String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n      if (!StringUtils.isEmpty(maxValue)) {\n        if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n          super.setup(context,false,finalFileToProcess);\n        }\n        Integer type=getColumnType(tableName,colName,dbAdapter);\n        maxValueClauses.add(colName + (index == 0 ? \" > \" : \" >= \") + getLiteralByType(type,maxValue,dbAdapter.getName()));\n      }\n    }\n);\n    if (customWhereClause != null) {\n      maxValueClauses.add(\"(\" + customWhereClause + \")\");\n    }\n    whereClause=StringUtils.join(maxValueClauses,\" AND \");\n    columnsClause=StringUtils.join(maxValueSelectColumns,\", \");\n    final String selectQuery=dbAdapter.getSelectStatement(tableName,columnsClause,whereClause,null,null,null);\n    long rowCount=0;\n    try (final Connection con=dbcpService.getConnection(finalFileToProcess == null ? Collections.emptyMap() : finalFileToProcess.getAttributes());final Statement st=con.createStatement()){\n      final Integer queryTimeout=context.getProperty(QUERY_TIMEOUT).evaluateAttributeExpressions(fileToProcess).asTimePeriod(TimeUnit.SECONDS).intValue();\n      st.setQueryTimeout(queryTimeout);\n      logger.debug(\"Executing {}\",new Object[]{selectQuery});\n      ResultSet resultSet;\n      resultSet=st.executeQuery(selectQuery);\n      if (resultSet.next()) {\n        rowCount=resultSet.getLong(1);\n        ResultSetMetaData rsmd=resultSet.getMetaData();\n        for (int i=2; i <= rsmd.getColumnCount(); i++) {\n          String resultColumnName=(StringUtils.isNotEmpty(rsmd.getColumnLabel(i)) ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i)).toLowerCase();\n          String fullyQualifiedStateKey=getStateKey(tableName,resultColumnName,dbAdapter);\n          String resultColumnCurrentMax=statePropertyMap.get(fullyQualifiedStateKey);\n          if (StringUtils.isEmpty(resultColumnCurrentMax) && !isDynamicTableName) {\n            resultColumnCurrentMax=statePropertyMap.get(resultColumnName);\n          }\n          int type=rsmd.getColumnType(i);\n          if (isDynamicTableName) {\n            columnTypeMap.put(fullyQualifiedStateKey,type);\n          }\n          try {\n            String newMaxValue=getMaxValueFromRow(resultSet,i,type,resultColumnCurrentMax,dbAdapter.getName());\n            if (newMaxValue != null) {\n              statePropertyMap.put(fullyQualifiedStateKey,newMaxValue);\n            }\n          }\n catch (          ParseException|IOException pie) {\n            throw new ProcessException(pie);\n          }\n        }\n      }\n else {\n        throw new SQLException(\"No rows returned from metadata query: \" + selectQuery);\n      }\n      IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n        String colName=maxValueColumnNameList.get(index);\n        maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n        String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n        if (!StringUtils.isEmpty(maxValue)) {\n          if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n            super.setup(context,false,finalFileToProcess);\n          }\n          Integer type=getColumnType(tableName,colName,dbAdapter);\n          maxValueClauses.add(colName + \" <= \" + getLiteralByType(type,maxValue,dbAdapter.getName()));\n        }\n      }\n);\n      whereClause=StringUtils.join(maxValueClauses,\" AND \");\n      final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n      for (long i=0; i < numberOfFetches; i++) {\n        Long limit=partitionSize == 0 ? null : (long)partitionSize;\n        Long offset=partitionSize == 0 ? null : i * partitionSize;\n        final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n        final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n        FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n        sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n        if (columnNames != null) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n        }\n        if (StringUtils.isNotBlank(whereClause)) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n        }\n        if (StringUtils.isNotBlank(maxColumnNames)) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n        }\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n        if (partitionSize != 0) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n        }\n        session.transfer(sqlFlowFile,REL_SUCCESS);\n      }\n      if (fileToProcess != null) {\n        session.remove(fileToProcess);\n      }\n    }\n catch (    SQLException e) {\n      if (fileToProcess != null) {\n        logger.error(\"Unable to execute SQL select query {} due to {}, routing {} to failure\",new Object[]{selectQuery,e,fileToProcess});\n        fileToProcess=session.putAttribute(fileToProcess,\"generatetablefetch.sql.error\",e.getMessage());\n        session.transfer(fileToProcess,REL_FAILURE);\n      }\n else {\n        logger.error(\"Unable to execute SQL select query {} due to {}\",new Object[]{selectQuery,e});\n        throw new ProcessException(e);\n      }\n    }\n    session.commit();\n    try {\n      stateManager.setState(statePropertyMap,Scope.CLUSTER);\n    }\n catch (    IOException ioe) {\n      logger.error(\"{} failed to update State Manager, observed maximum values will not be recorded. \" + \"Also, any generated SQL statements may be duplicated.\",new Object[]{this,ioe});\n    }\n  }\n catch (  final ProcessException pe) {\n    Throwable t=(pe.getCause() == null ? pe : pe.getCause());\n    logger.error(\"Error during processing: {}\",new Object[]{t.getMessage()},t);\n    session.rollback();\n    context.yield();\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 1247,
                    "astHeight": 18
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 18,
                    "startLineNumber": 278,
                    "startColumnNumber": 12,
                    "endLineNumber": 278,
                    "endColumnNumber": 30
                },
                "nodeContext": "long rowCount=0;\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "0",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 333,
                "startColumnNumber": 32,
                "endLineNumber": 333,
                "endColumnNumber": 33
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 49,
                        "startLineNumber": 333,
                        "startColumnNumber": 16,
                        "endLineNumber": 333,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "IntStream.range(0,maxValueColumnNameList.size())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 1039,
                        "startLineNumber": 333,
                        "startColumnNumber": 16,
                        "endLineNumber": 348,
                        "endColumnNumber": 18
                    },
                    "nodeContext": "IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n  String colName=maxValueColumnNameList.get(index);\n  maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n  String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n  if (!StringUtils.isEmpty(maxValue)) {\n    if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n      super.setup(context,false,finalFileToProcess);\n    }\n    Integer type=getColumnType(tableName,colName,dbAdapter);\n    maxValueClauses.add(colName + \" <= \" + getLiteralByType(type,maxValue,dbAdapter.getName()));\n  }\n}\n)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 92,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1040,
                        "startLineNumber": 333,
                        "startColumnNumber": 16,
                        "endLineNumber": 348,
                        "endColumnNumber": 19
                    },
                    "nodeContext": "IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n  String colName=maxValueColumnNameList.get(index);\n  maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n  String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n  if (!StringUtils.isEmpty(maxValue)) {\n    if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n      super.setup(context,false,finalFileToProcess);\n    }\n    Integer type=getColumnType(tableName,colName,dbAdapter);\n    maxValueClauses.add(colName + \" <= \" + getLiteralByType(type,maxValue,dbAdapter.getName()));\n  }\n}\n);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 93,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 6723,
                        "startLineNumber": 281,
                        "startColumnNumber": 61,
                        "endLineNumber": 383,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  final Integer queryTimeout=context.getProperty(QUERY_TIMEOUT).evaluateAttributeExpressions(fileToProcess).asTimePeriod(TimeUnit.SECONDS).intValue();\n  st.setQueryTimeout(queryTimeout);\n  logger.debug(\"Executing {}\",new Object[]{selectQuery});\n  ResultSet resultSet;\n  resultSet=st.executeQuery(selectQuery);\n  if (resultSet.next()) {\n    rowCount=resultSet.getLong(1);\n    ResultSetMetaData rsmd=resultSet.getMetaData();\n    for (int i=2; i <= rsmd.getColumnCount(); i++) {\n      String resultColumnName=(StringUtils.isNotEmpty(rsmd.getColumnLabel(i)) ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i)).toLowerCase();\n      String fullyQualifiedStateKey=getStateKey(tableName,resultColumnName,dbAdapter);\n      String resultColumnCurrentMax=statePropertyMap.get(fullyQualifiedStateKey);\n      if (StringUtils.isEmpty(resultColumnCurrentMax) && !isDynamicTableName) {\n        resultColumnCurrentMax=statePropertyMap.get(resultColumnName);\n      }\n      int type=rsmd.getColumnType(i);\n      if (isDynamicTableName) {\n        columnTypeMap.put(fullyQualifiedStateKey,type);\n      }\n      try {\n        String newMaxValue=getMaxValueFromRow(resultSet,i,type,resultColumnCurrentMax,dbAdapter.getName());\n        if (newMaxValue != null) {\n          statePropertyMap.put(fullyQualifiedStateKey,newMaxValue);\n        }\n      }\n catch (      ParseException|IOException pie) {\n        throw new ProcessException(pie);\n      }\n    }\n  }\n else {\n    throw new SQLException(\"No rows returned from metadata query: \" + selectQuery);\n  }\n  IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n    String colName=maxValueColumnNameList.get(index);\n    maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n    String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n    if (!StringUtils.isEmpty(maxValue)) {\n      if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n        super.setup(context,false,finalFileToProcess);\n      }\n      Integer type=getColumnType(tableName,colName,dbAdapter);\n      maxValueClauses.add(colName + \" <= \" + getLiteralByType(type,maxValue,dbAdapter.getName()));\n    }\n  }\n);\n  whereClause=StringUtils.join(maxValueClauses,\" AND \");\n  final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n  for (long i=0; i < numberOfFetches; i++) {\n    Long limit=partitionSize == 0 ? null : (long)partitionSize;\n    Long offset=partitionSize == 0 ? null : i * partitionSize;\n    final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n    final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n    FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n    sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n    sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n    if (columnNames != null) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n    }\n    if (StringUtils.isNotBlank(whereClause)) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n    }\n    if (StringUtils.isNotBlank(maxColumnNames)) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n    }\n    sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n    if (partitionSize != 0) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n    }\n    session.transfer(sqlFlowFile,REL_SUCCESS);\n  }\n  if (fileToProcess != null) {\n    session.remove(fileToProcess);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 530,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 7563,
                        "startLineNumber": 280,
                        "startColumnNumber": 12,
                        "endLineNumber": 393,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "try (final Connection con=dbcpService.getConnection(finalFileToProcess == null ? Collections.emptyMap() : finalFileToProcess.getAttributes());final Statement st=con.createStatement()){\n  final Integer queryTimeout=context.getProperty(QUERY_TIMEOUT).evaluateAttributeExpressions(fileToProcess).asTimePeriod(TimeUnit.SECONDS).intValue();\n  st.setQueryTimeout(queryTimeout);\n  logger.debug(\"Executing {}\",new Object[]{selectQuery});\n  ResultSet resultSet;\n  resultSet=st.executeQuery(selectQuery);\n  if (resultSet.next()) {\n    rowCount=resultSet.getLong(1);\n    ResultSetMetaData rsmd=resultSet.getMetaData();\n    for (int i=2; i <= rsmd.getColumnCount(); i++) {\n      String resultColumnName=(StringUtils.isNotEmpty(rsmd.getColumnLabel(i)) ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i)).toLowerCase();\n      String fullyQualifiedStateKey=getStateKey(tableName,resultColumnName,dbAdapter);\n      String resultColumnCurrentMax=statePropertyMap.get(fullyQualifiedStateKey);\n      if (StringUtils.isEmpty(resultColumnCurrentMax) && !isDynamicTableName) {\n        resultColumnCurrentMax=statePropertyMap.get(resultColumnName);\n      }\n      int type=rsmd.getColumnType(i);\n      if (isDynamicTableName) {\n        columnTypeMap.put(fullyQualifiedStateKey,type);\n      }\n      try {\n        String newMaxValue=getMaxValueFromRow(resultSet,i,type,resultColumnCurrentMax,dbAdapter.getName());\n        if (newMaxValue != null) {\n          statePropertyMap.put(fullyQualifiedStateKey,newMaxValue);\n        }\n      }\n catch (      ParseException|IOException pie) {\n        throw new ProcessException(pie);\n      }\n    }\n  }\n else {\n    throw new SQLException(\"No rows returned from metadata query: \" + selectQuery);\n  }\n  IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n    String colName=maxValueColumnNameList.get(index);\n    maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n    String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n    if (!StringUtils.isEmpty(maxValue)) {\n      if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n        super.setup(context,false,finalFileToProcess);\n      }\n      Integer type=getColumnType(tableName,colName,dbAdapter);\n      maxValueClauses.add(colName + \" <= \" + getLiteralByType(type,maxValue,dbAdapter.getName()));\n    }\n  }\n);\n  whereClause=StringUtils.join(maxValueClauses,\" AND \");\n  final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n  for (long i=0; i < numberOfFetches; i++) {\n    Long limit=partitionSize == 0 ? null : (long)partitionSize;\n    Long offset=partitionSize == 0 ? null : i * partitionSize;\n    final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n    final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n    FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n    sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n    sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n    if (columnNames != null) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n    }\n    if (StringUtils.isNotBlank(whereClause)) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n    }\n    if (StringUtils.isNotBlank(maxColumnNames)) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n    }\n    sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n    if (partitionSize != 0) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n    }\n    session.transfer(sqlFlowFile,REL_SUCCESS);\n  }\n  if (fileToProcess != null) {\n    session.remove(fileToProcess);\n  }\n}\n catch (SQLException e) {\n  if (fileToProcess != null) {\n    logger.error(\"Unable to execute SQL select query {} due to {}, routing {} to failure\",new Object[]{selectQuery,e,fileToProcess});\n    fileToProcess=session.putAttribute(fileToProcess,\"generatetablefetch.sql.error\",e.getMessage());\n    session.transfer(fileToProcess,REL_FAILURE);\n  }\n else {\n    logger.error(\"Unable to execute SQL select query {} due to {}\",new Object[]{selectQuery,e});\n    throw new ProcessException(e);\n  }\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 620,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 12385,
                        "startLineNumber": 213,
                        "startColumnNumber": 12,
                        "endLineNumber": 404,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final Map<String,String> statePropertyMap=new HashMap<>(stateMap.toMap());\n  for (  final Map.Entry<String,String> maxProp : maxValueProperties.entrySet()) {\n    String maxPropKey=maxProp.getKey().toLowerCase();\n    String fullyQualifiedMaxPropKey=getStateKey(tableName,maxPropKey,dbAdapter);\n    if (!statePropertyMap.containsKey(fullyQualifiedMaxPropKey)) {\n      String newMaxPropValue;\n      if (statePropertyMap.containsKey(maxPropKey)) {\n        newMaxPropValue=statePropertyMap.get(maxPropKey);\n      }\n else {\n        newMaxPropValue=maxProp.getValue();\n      }\n      statePropertyMap.put(fullyQualifiedMaxPropKey,newMaxPropValue);\n    }\n  }\n  String whereClause=null;\n  List<String> maxValueColumnNameList=StringUtils.isEmpty(maxValueColumnNames) ? new ArrayList<>(0) : Arrays.asList(maxValueColumnNames.split(\"\\\\s*,\\\\s*\"));\n  List<String> maxValueClauses=new ArrayList<>(maxValueColumnNameList.size());\n  String columnsClause=null;\n  List<String> maxValueSelectColumns=new ArrayList<>(maxValueColumnNameList.size() + 1);\n  maxValueSelectColumns.add(\"COUNT(*)\");\n  IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n    String colName=maxValueColumnNameList.get(index);\n    maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n    String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n    if (!StringUtils.isEmpty(maxValue)) {\n      if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n        super.setup(context,false,finalFileToProcess);\n      }\n      Integer type=getColumnType(tableName,colName,dbAdapter);\n      maxValueClauses.add(colName + (index == 0 ? \" > \" : \" >= \") + getLiteralByType(type,maxValue,dbAdapter.getName()));\n    }\n  }\n);\n  if (customWhereClause != null) {\n    maxValueClauses.add(\"(\" + customWhereClause + \")\");\n  }\n  whereClause=StringUtils.join(maxValueClauses,\" AND \");\n  columnsClause=StringUtils.join(maxValueSelectColumns,\", \");\n  final String selectQuery=dbAdapter.getSelectStatement(tableName,columnsClause,whereClause,null,null,null);\n  long rowCount=0;\n  try (final Connection con=dbcpService.getConnection(finalFileToProcess == null ? Collections.emptyMap() : finalFileToProcess.getAttributes());final Statement st=con.createStatement()){\n    final Integer queryTimeout=context.getProperty(QUERY_TIMEOUT).evaluateAttributeExpressions(fileToProcess).asTimePeriod(TimeUnit.SECONDS).intValue();\n    st.setQueryTimeout(queryTimeout);\n    logger.debug(\"Executing {}\",new Object[]{selectQuery});\n    ResultSet resultSet;\n    resultSet=st.executeQuery(selectQuery);\n    if (resultSet.next()) {\n      rowCount=resultSet.getLong(1);\n      ResultSetMetaData rsmd=resultSet.getMetaData();\n      for (int i=2; i <= rsmd.getColumnCount(); i++) {\n        String resultColumnName=(StringUtils.isNotEmpty(rsmd.getColumnLabel(i)) ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i)).toLowerCase();\n        String fullyQualifiedStateKey=getStateKey(tableName,resultColumnName,dbAdapter);\n        String resultColumnCurrentMax=statePropertyMap.get(fullyQualifiedStateKey);\n        if (StringUtils.isEmpty(resultColumnCurrentMax) && !isDynamicTableName) {\n          resultColumnCurrentMax=statePropertyMap.get(resultColumnName);\n        }\n        int type=rsmd.getColumnType(i);\n        if (isDynamicTableName) {\n          columnTypeMap.put(fullyQualifiedStateKey,type);\n        }\n        try {\n          String newMaxValue=getMaxValueFromRow(resultSet,i,type,resultColumnCurrentMax,dbAdapter.getName());\n          if (newMaxValue != null) {\n            statePropertyMap.put(fullyQualifiedStateKey,newMaxValue);\n          }\n        }\n catch (        ParseException|IOException pie) {\n          throw new ProcessException(pie);\n        }\n      }\n    }\n else {\n      throw new SQLException(\"No rows returned from metadata query: \" + selectQuery);\n    }\n    IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n      String colName=maxValueColumnNameList.get(index);\n      maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n      String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n      if (!StringUtils.isEmpty(maxValue)) {\n        if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n          super.setup(context,false,finalFileToProcess);\n        }\n        Integer type=getColumnType(tableName,colName,dbAdapter);\n        maxValueClauses.add(colName + \" <= \" + getLiteralByType(type,maxValue,dbAdapter.getName()));\n      }\n    }\n);\n    whereClause=StringUtils.join(maxValueClauses,\" AND \");\n    final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n    for (long i=0; i < numberOfFetches; i++) {\n      Long limit=partitionSize == 0 ? null : (long)partitionSize;\n      Long offset=partitionSize == 0 ? null : i * partitionSize;\n      final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n      final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n      FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n      sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n      if (columnNames != null) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n      }\n      if (StringUtils.isNotBlank(whereClause)) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n      }\n      if (StringUtils.isNotBlank(maxColumnNames)) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n      }\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n      if (partitionSize != 0) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n      }\n      session.transfer(sqlFlowFile,REL_SUCCESS);\n    }\n    if (fileToProcess != null) {\n      session.remove(fileToProcess);\n    }\n  }\n catch (  SQLException e) {\n    if (fileToProcess != null) {\n      logger.error(\"Unable to execute SQL select query {} due to {}, routing {} to failure\",new Object[]{selectQuery,e,fileToProcess});\n      fileToProcess=session.putAttribute(fileToProcess,\"generatetablefetch.sql.error\",e.getMessage());\n      session.transfer(fileToProcess,REL_FAILURE);\n    }\n else {\n      logger.error(\"Unable to execute SQL select query {} due to {}\",new Object[]{selectQuery,e});\n      throw new ProcessException(e);\n    }\n  }\n  session.commit();\n  try {\n    stateManager.setState(statePropertyMap,Scope.CLUSTER);\n  }\n catch (  IOException ioe) {\n    logger.error(\"{} failed to update State Manager, observed maximum values will not be recorded. \" + \"Also, any generated SQL statements may be duplicated.\",new Object[]{this,ioe});\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 971,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 12730,
                        "startLineNumber": 213,
                        "startColumnNumber": 8,
                        "endLineNumber": 410,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  final Map<String,String> statePropertyMap=new HashMap<>(stateMap.toMap());\n  for (  final Map.Entry<String,String> maxProp : maxValueProperties.entrySet()) {\n    String maxPropKey=maxProp.getKey().toLowerCase();\n    String fullyQualifiedMaxPropKey=getStateKey(tableName,maxPropKey,dbAdapter);\n    if (!statePropertyMap.containsKey(fullyQualifiedMaxPropKey)) {\n      String newMaxPropValue;\n      if (statePropertyMap.containsKey(maxPropKey)) {\n        newMaxPropValue=statePropertyMap.get(maxPropKey);\n      }\n else {\n        newMaxPropValue=maxProp.getValue();\n      }\n      statePropertyMap.put(fullyQualifiedMaxPropKey,newMaxPropValue);\n    }\n  }\n  String whereClause=null;\n  List<String> maxValueColumnNameList=StringUtils.isEmpty(maxValueColumnNames) ? new ArrayList<>(0) : Arrays.asList(maxValueColumnNames.split(\"\\\\s*,\\\\s*\"));\n  List<String> maxValueClauses=new ArrayList<>(maxValueColumnNameList.size());\n  String columnsClause=null;\n  List<String> maxValueSelectColumns=new ArrayList<>(maxValueColumnNameList.size() + 1);\n  maxValueSelectColumns.add(\"COUNT(*)\");\n  IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n    String colName=maxValueColumnNameList.get(index);\n    maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n    String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n    if (!StringUtils.isEmpty(maxValue)) {\n      if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n        super.setup(context,false,finalFileToProcess);\n      }\n      Integer type=getColumnType(tableName,colName,dbAdapter);\n      maxValueClauses.add(colName + (index == 0 ? \" > \" : \" >= \") + getLiteralByType(type,maxValue,dbAdapter.getName()));\n    }\n  }\n);\n  if (customWhereClause != null) {\n    maxValueClauses.add(\"(\" + customWhereClause + \")\");\n  }\n  whereClause=StringUtils.join(maxValueClauses,\" AND \");\n  columnsClause=StringUtils.join(maxValueSelectColumns,\", \");\n  final String selectQuery=dbAdapter.getSelectStatement(tableName,columnsClause,whereClause,null,null,null);\n  long rowCount=0;\n  try (final Connection con=dbcpService.getConnection(finalFileToProcess == null ? Collections.emptyMap() : finalFileToProcess.getAttributes());final Statement st=con.createStatement()){\n    final Integer queryTimeout=context.getProperty(QUERY_TIMEOUT).evaluateAttributeExpressions(fileToProcess).asTimePeriod(TimeUnit.SECONDS).intValue();\n    st.setQueryTimeout(queryTimeout);\n    logger.debug(\"Executing {}\",new Object[]{selectQuery});\n    ResultSet resultSet;\n    resultSet=st.executeQuery(selectQuery);\n    if (resultSet.next()) {\n      rowCount=resultSet.getLong(1);\n      ResultSetMetaData rsmd=resultSet.getMetaData();\n      for (int i=2; i <= rsmd.getColumnCount(); i++) {\n        String resultColumnName=(StringUtils.isNotEmpty(rsmd.getColumnLabel(i)) ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i)).toLowerCase();\n        String fullyQualifiedStateKey=getStateKey(tableName,resultColumnName,dbAdapter);\n        String resultColumnCurrentMax=statePropertyMap.get(fullyQualifiedStateKey);\n        if (StringUtils.isEmpty(resultColumnCurrentMax) && !isDynamicTableName) {\n          resultColumnCurrentMax=statePropertyMap.get(resultColumnName);\n        }\n        int type=rsmd.getColumnType(i);\n        if (isDynamicTableName) {\n          columnTypeMap.put(fullyQualifiedStateKey,type);\n        }\n        try {\n          String newMaxValue=getMaxValueFromRow(resultSet,i,type,resultColumnCurrentMax,dbAdapter.getName());\n          if (newMaxValue != null) {\n            statePropertyMap.put(fullyQualifiedStateKey,newMaxValue);\n          }\n        }\n catch (        ParseException|IOException pie) {\n          throw new ProcessException(pie);\n        }\n      }\n    }\n else {\n      throw new SQLException(\"No rows returned from metadata query: \" + selectQuery);\n    }\n    IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n      String colName=maxValueColumnNameList.get(index);\n      maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n      String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n      if (!StringUtils.isEmpty(maxValue)) {\n        if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n          super.setup(context,false,finalFileToProcess);\n        }\n        Integer type=getColumnType(tableName,colName,dbAdapter);\n        maxValueClauses.add(colName + \" <= \" + getLiteralByType(type,maxValue,dbAdapter.getName()));\n      }\n    }\n);\n    whereClause=StringUtils.join(maxValueClauses,\" AND \");\n    final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n    for (long i=0; i < numberOfFetches; i++) {\n      Long limit=partitionSize == 0 ? null : (long)partitionSize;\n      Long offset=partitionSize == 0 ? null : i * partitionSize;\n      final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n      final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n      FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n      sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n      if (columnNames != null) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n      }\n      if (StringUtils.isNotBlank(whereClause)) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n      }\n      if (StringUtils.isNotBlank(maxColumnNames)) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n      }\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n      if (partitionSize != 0) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n      }\n      session.transfer(sqlFlowFile,REL_SUCCESS);\n    }\n    if (fileToProcess != null) {\n      session.remove(fileToProcess);\n    }\n  }\n catch (  SQLException e) {\n    if (fileToProcess != null) {\n      logger.error(\"Unable to execute SQL select query {} due to {}, routing {} to failure\",new Object[]{selectQuery,e,fileToProcess});\n      fileToProcess=session.putAttribute(fileToProcess,\"generatetablefetch.sql.error\",e.getMessage());\n      session.transfer(fileToProcess,REL_FAILURE);\n    }\n else {\n      logger.error(\"Unable to execute SQL select query {} due to {}\",new Object[]{selectQuery,e});\n      throw new ProcessException(e);\n    }\n  }\n  session.commit();\n  try {\n    stateManager.setState(statePropertyMap,Scope.CLUSTER);\n  }\n catch (  IOException ioe) {\n    logger.error(\"{} failed to update State Manager, observed maximum values will not be recorded. \" + \"Also, any generated SQL statements may be duplicated.\",new Object[]{this,ioe});\n  }\n}\n catch (final ProcessException pe) {\n  Throwable t=(pe.getCause() == null ? pe : pe.getCause());\n  logger.error(\"Error during processing: {}\",new Object[]{t.getMessage()},t);\n  session.rollback();\n  context.yield();\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 1018,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 14819,
                        "startLineNumber": 173,
                        "startColumnNumber": 124,
                        "endLineNumber": 411,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (!isDynamicTableName && !isDynamicMaxValues && !setupComplete.get()) {\n    super.setup(context);\n  }\n  ProcessSession session=sessionFactory.createSession();\n  FlowFile fileToProcess=null;\n  if (context.hasIncomingConnection()) {\n    fileToProcess=session.get();\n    if (fileToProcess == null) {\n      return;\n    }\n  }\n  final ComponentLog logger=getLogger();\n  final DBCPService dbcpService=context.getProperty(DBCP_SERVICE).asControllerService(DBCPService.class);\n  final DatabaseAdapter dbAdapter=dbAdapters.get(context.getProperty(DB_TYPE).getValue());\n  final String tableName=context.getProperty(TABLE_NAME).evaluateAttributeExpressions(fileToProcess).getValue();\n  final String columnNames=context.getProperty(COLUMN_NAMES).evaluateAttributeExpressions(fileToProcess).getValue();\n  final String maxValueColumnNames=context.getProperty(MAX_VALUE_COLUMN_NAMES).evaluateAttributeExpressions(fileToProcess).getValue();\n  final int partitionSize=context.getProperty(PARTITION_SIZE).evaluateAttributeExpressions(fileToProcess).asInteger();\n  final String customWhereClause=context.getProperty(WHERE_CLAUSE).evaluateAttributeExpressions(fileToProcess).getValue();\n  final StateManager stateManager=context.getStateManager();\n  final StateMap stateMap;\n  FlowFile finalFileToProcess=fileToProcess;\n  try {\n    stateMap=stateManager.getState(Scope.CLUSTER);\n  }\n catch (  final IOException ioe) {\n    logger.error(\"Failed to retrieve observed maximum values from the State Manager. Will not perform \" + \"query until this is accomplished.\",ioe);\n    context.yield();\n    return;\n  }\n  try {\n    final Map<String,String> statePropertyMap=new HashMap<>(stateMap.toMap());\n    for (    final Map.Entry<String,String> maxProp : maxValueProperties.entrySet()) {\n      String maxPropKey=maxProp.getKey().toLowerCase();\n      String fullyQualifiedMaxPropKey=getStateKey(tableName,maxPropKey,dbAdapter);\n      if (!statePropertyMap.containsKey(fullyQualifiedMaxPropKey)) {\n        String newMaxPropValue;\n        if (statePropertyMap.containsKey(maxPropKey)) {\n          newMaxPropValue=statePropertyMap.get(maxPropKey);\n        }\n else {\n          newMaxPropValue=maxProp.getValue();\n        }\n        statePropertyMap.put(fullyQualifiedMaxPropKey,newMaxPropValue);\n      }\n    }\n    String whereClause=null;\n    List<String> maxValueColumnNameList=StringUtils.isEmpty(maxValueColumnNames) ? new ArrayList<>(0) : Arrays.asList(maxValueColumnNames.split(\"\\\\s*,\\\\s*\"));\n    List<String> maxValueClauses=new ArrayList<>(maxValueColumnNameList.size());\n    String columnsClause=null;\n    List<String> maxValueSelectColumns=new ArrayList<>(maxValueColumnNameList.size() + 1);\n    maxValueSelectColumns.add(\"COUNT(*)\");\n    IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n      String colName=maxValueColumnNameList.get(index);\n      maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n      String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n      if (!StringUtils.isEmpty(maxValue)) {\n        if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n          super.setup(context,false,finalFileToProcess);\n        }\n        Integer type=getColumnType(tableName,colName,dbAdapter);\n        maxValueClauses.add(colName + (index == 0 ? \" > \" : \" >= \") + getLiteralByType(type,maxValue,dbAdapter.getName()));\n      }\n    }\n);\n    if (customWhereClause != null) {\n      maxValueClauses.add(\"(\" + customWhereClause + \")\");\n    }\n    whereClause=StringUtils.join(maxValueClauses,\" AND \");\n    columnsClause=StringUtils.join(maxValueSelectColumns,\", \");\n    final String selectQuery=dbAdapter.getSelectStatement(tableName,columnsClause,whereClause,null,null,null);\n    long rowCount=0;\n    try (final Connection con=dbcpService.getConnection(finalFileToProcess == null ? Collections.emptyMap() : finalFileToProcess.getAttributes());final Statement st=con.createStatement()){\n      final Integer queryTimeout=context.getProperty(QUERY_TIMEOUT).evaluateAttributeExpressions(fileToProcess).asTimePeriod(TimeUnit.SECONDS).intValue();\n      st.setQueryTimeout(queryTimeout);\n      logger.debug(\"Executing {}\",new Object[]{selectQuery});\n      ResultSet resultSet;\n      resultSet=st.executeQuery(selectQuery);\n      if (resultSet.next()) {\n        rowCount=resultSet.getLong(1);\n        ResultSetMetaData rsmd=resultSet.getMetaData();\n        for (int i=2; i <= rsmd.getColumnCount(); i++) {\n          String resultColumnName=(StringUtils.isNotEmpty(rsmd.getColumnLabel(i)) ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i)).toLowerCase();\n          String fullyQualifiedStateKey=getStateKey(tableName,resultColumnName,dbAdapter);\n          String resultColumnCurrentMax=statePropertyMap.get(fullyQualifiedStateKey);\n          if (StringUtils.isEmpty(resultColumnCurrentMax) && !isDynamicTableName) {\n            resultColumnCurrentMax=statePropertyMap.get(resultColumnName);\n          }\n          int type=rsmd.getColumnType(i);\n          if (isDynamicTableName) {\n            columnTypeMap.put(fullyQualifiedStateKey,type);\n          }\n          try {\n            String newMaxValue=getMaxValueFromRow(resultSet,i,type,resultColumnCurrentMax,dbAdapter.getName());\n            if (newMaxValue != null) {\n              statePropertyMap.put(fullyQualifiedStateKey,newMaxValue);\n            }\n          }\n catch (          ParseException|IOException pie) {\n            throw new ProcessException(pie);\n          }\n        }\n      }\n else {\n        throw new SQLException(\"No rows returned from metadata query: \" + selectQuery);\n      }\n      IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n        String colName=maxValueColumnNameList.get(index);\n        maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n        String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n        if (!StringUtils.isEmpty(maxValue)) {\n          if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n            super.setup(context,false,finalFileToProcess);\n          }\n          Integer type=getColumnType(tableName,colName,dbAdapter);\n          maxValueClauses.add(colName + \" <= \" + getLiteralByType(type,maxValue,dbAdapter.getName()));\n        }\n      }\n);\n      whereClause=StringUtils.join(maxValueClauses,\" AND \");\n      final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n      for (long i=0; i < numberOfFetches; i++) {\n        Long limit=partitionSize == 0 ? null : (long)partitionSize;\n        Long offset=partitionSize == 0 ? null : i * partitionSize;\n        final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n        final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n        FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n        sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n        if (columnNames != null) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n        }\n        if (StringUtils.isNotBlank(whereClause)) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n        }\n        if (StringUtils.isNotBlank(maxColumnNames)) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n        }\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n        if (partitionSize != 0) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n        }\n        session.transfer(sqlFlowFile,REL_SUCCESS);\n      }\n      if (fileToProcess != null) {\n        session.remove(fileToProcess);\n      }\n    }\n catch (    SQLException e) {\n      if (fileToProcess != null) {\n        logger.error(\"Unable to execute SQL select query {} due to {}, routing {} to failure\",new Object[]{selectQuery,e,fileToProcess});\n        fileToProcess=session.putAttribute(fileToProcess,\"generatetablefetch.sql.error\",e.getMessage());\n        session.transfer(fileToProcess,REL_FAILURE);\n      }\n else {\n        logger.error(\"Unable to execute SQL select query {} due to {}\",new Object[]{selectQuery,e});\n        throw new ProcessException(e);\n      }\n    }\n    session.commit();\n    try {\n      stateManager.setState(statePropertyMap,Scope.CLUSTER);\n    }\n catch (    IOException ioe) {\n      logger.error(\"{} failed to update State Manager, observed maximum values will not be recorded. \" + \"Also, any generated SQL statements may be duplicated.\",new Object[]{this,ioe});\n    }\n  }\n catch (  final ProcessException pe) {\n    Throwable t=(pe.getCause() == null ? pe : pe.getCause());\n    logger.error(\"Error during processing: {}\",new Object[]{t.getMessage()},t);\n    session.rollback();\n    context.yield();\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 1229,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 14953,
                        "startLineNumber": 172,
                        "startColumnNumber": 4,
                        "endLineNumber": 411,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void onTrigger(final ProcessContext context,final ProcessSessionFactory sessionFactory) throws ProcessException {\n  if (!isDynamicTableName && !isDynamicMaxValues && !setupComplete.get()) {\n    super.setup(context);\n  }\n  ProcessSession session=sessionFactory.createSession();\n  FlowFile fileToProcess=null;\n  if (context.hasIncomingConnection()) {\n    fileToProcess=session.get();\n    if (fileToProcess == null) {\n      return;\n    }\n  }\n  final ComponentLog logger=getLogger();\n  final DBCPService dbcpService=context.getProperty(DBCP_SERVICE).asControllerService(DBCPService.class);\n  final DatabaseAdapter dbAdapter=dbAdapters.get(context.getProperty(DB_TYPE).getValue());\n  final String tableName=context.getProperty(TABLE_NAME).evaluateAttributeExpressions(fileToProcess).getValue();\n  final String columnNames=context.getProperty(COLUMN_NAMES).evaluateAttributeExpressions(fileToProcess).getValue();\n  final String maxValueColumnNames=context.getProperty(MAX_VALUE_COLUMN_NAMES).evaluateAttributeExpressions(fileToProcess).getValue();\n  final int partitionSize=context.getProperty(PARTITION_SIZE).evaluateAttributeExpressions(fileToProcess).asInteger();\n  final String customWhereClause=context.getProperty(WHERE_CLAUSE).evaluateAttributeExpressions(fileToProcess).getValue();\n  final StateManager stateManager=context.getStateManager();\n  final StateMap stateMap;\n  FlowFile finalFileToProcess=fileToProcess;\n  try {\n    stateMap=stateManager.getState(Scope.CLUSTER);\n  }\n catch (  final IOException ioe) {\n    logger.error(\"Failed to retrieve observed maximum values from the State Manager. Will not perform \" + \"query until this is accomplished.\",ioe);\n    context.yield();\n    return;\n  }\n  try {\n    final Map<String,String> statePropertyMap=new HashMap<>(stateMap.toMap());\n    for (    final Map.Entry<String,String> maxProp : maxValueProperties.entrySet()) {\n      String maxPropKey=maxProp.getKey().toLowerCase();\n      String fullyQualifiedMaxPropKey=getStateKey(tableName,maxPropKey,dbAdapter);\n      if (!statePropertyMap.containsKey(fullyQualifiedMaxPropKey)) {\n        String newMaxPropValue;\n        if (statePropertyMap.containsKey(maxPropKey)) {\n          newMaxPropValue=statePropertyMap.get(maxPropKey);\n        }\n else {\n          newMaxPropValue=maxProp.getValue();\n        }\n        statePropertyMap.put(fullyQualifiedMaxPropKey,newMaxPropValue);\n      }\n    }\n    String whereClause=null;\n    List<String> maxValueColumnNameList=StringUtils.isEmpty(maxValueColumnNames) ? new ArrayList<>(0) : Arrays.asList(maxValueColumnNames.split(\"\\\\s*,\\\\s*\"));\n    List<String> maxValueClauses=new ArrayList<>(maxValueColumnNameList.size());\n    String columnsClause=null;\n    List<String> maxValueSelectColumns=new ArrayList<>(maxValueColumnNameList.size() + 1);\n    maxValueSelectColumns.add(\"COUNT(*)\");\n    IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n      String colName=maxValueColumnNameList.get(index);\n      maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n      String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n      if (!StringUtils.isEmpty(maxValue)) {\n        if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n          super.setup(context,false,finalFileToProcess);\n        }\n        Integer type=getColumnType(tableName,colName,dbAdapter);\n        maxValueClauses.add(colName + (index == 0 ? \" > \" : \" >= \") + getLiteralByType(type,maxValue,dbAdapter.getName()));\n      }\n    }\n);\n    if (customWhereClause != null) {\n      maxValueClauses.add(\"(\" + customWhereClause + \")\");\n    }\n    whereClause=StringUtils.join(maxValueClauses,\" AND \");\n    columnsClause=StringUtils.join(maxValueSelectColumns,\", \");\n    final String selectQuery=dbAdapter.getSelectStatement(tableName,columnsClause,whereClause,null,null,null);\n    long rowCount=0;\n    try (final Connection con=dbcpService.getConnection(finalFileToProcess == null ? Collections.emptyMap() : finalFileToProcess.getAttributes());final Statement st=con.createStatement()){\n      final Integer queryTimeout=context.getProperty(QUERY_TIMEOUT).evaluateAttributeExpressions(fileToProcess).asTimePeriod(TimeUnit.SECONDS).intValue();\n      st.setQueryTimeout(queryTimeout);\n      logger.debug(\"Executing {}\",new Object[]{selectQuery});\n      ResultSet resultSet;\n      resultSet=st.executeQuery(selectQuery);\n      if (resultSet.next()) {\n        rowCount=resultSet.getLong(1);\n        ResultSetMetaData rsmd=resultSet.getMetaData();\n        for (int i=2; i <= rsmd.getColumnCount(); i++) {\n          String resultColumnName=(StringUtils.isNotEmpty(rsmd.getColumnLabel(i)) ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i)).toLowerCase();\n          String fullyQualifiedStateKey=getStateKey(tableName,resultColumnName,dbAdapter);\n          String resultColumnCurrentMax=statePropertyMap.get(fullyQualifiedStateKey);\n          if (StringUtils.isEmpty(resultColumnCurrentMax) && !isDynamicTableName) {\n            resultColumnCurrentMax=statePropertyMap.get(resultColumnName);\n          }\n          int type=rsmd.getColumnType(i);\n          if (isDynamicTableName) {\n            columnTypeMap.put(fullyQualifiedStateKey,type);\n          }\n          try {\n            String newMaxValue=getMaxValueFromRow(resultSet,i,type,resultColumnCurrentMax,dbAdapter.getName());\n            if (newMaxValue != null) {\n              statePropertyMap.put(fullyQualifiedStateKey,newMaxValue);\n            }\n          }\n catch (          ParseException|IOException pie) {\n            throw new ProcessException(pie);\n          }\n        }\n      }\n else {\n        throw new SQLException(\"No rows returned from metadata query: \" + selectQuery);\n      }\n      IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n        String colName=maxValueColumnNameList.get(index);\n        maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n        String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n        if (!StringUtils.isEmpty(maxValue)) {\n          if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n            super.setup(context,false,finalFileToProcess);\n          }\n          Integer type=getColumnType(tableName,colName,dbAdapter);\n          maxValueClauses.add(colName + \" <= \" + getLiteralByType(type,maxValue,dbAdapter.getName()));\n        }\n      }\n);\n      whereClause=StringUtils.join(maxValueClauses,\" AND \");\n      final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n      for (long i=0; i < numberOfFetches; i++) {\n        Long limit=partitionSize == 0 ? null : (long)partitionSize;\n        Long offset=partitionSize == 0 ? null : i * partitionSize;\n        final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n        final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n        FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n        sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n        if (columnNames != null) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n        }\n        if (StringUtils.isNotBlank(whereClause)) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n        }\n        if (StringUtils.isNotBlank(maxColumnNames)) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n        }\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n        if (partitionSize != 0) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n        }\n        session.transfer(sqlFlowFile,REL_SUCCESS);\n      }\n      if (fileToProcess != null) {\n        session.remove(fileToProcess);\n      }\n    }\n catch (    SQLException e) {\n      if (fileToProcess != null) {\n        logger.error(\"Unable to execute SQL select query {} due to {}, routing {} to failure\",new Object[]{selectQuery,e,fileToProcess});\n        fileToProcess=session.putAttribute(fileToProcess,\"generatetablefetch.sql.error\",e.getMessage());\n        session.transfer(fileToProcess,REL_FAILURE);\n      }\n else {\n        logger.error(\"Unable to execute SQL select query {} due to {}\",new Object[]{selectQuery,e});\n        throw new ProcessException(e);\n      }\n    }\n    session.commit();\n    try {\n      stateManager.setState(statePropertyMap,Scope.CLUSTER);\n    }\n catch (    IOException ioe) {\n      logger.error(\"{} failed to update State Manager, observed maximum values will not be recorded. \" + \"Also, any generated SQL statements may be duplicated.\",new Object[]{this,ioe});\n    }\n  }\n catch (  final ProcessException pe) {\n    Throwable t=(pe.getCause() == null ? pe : pe.getCause());\n    logger.error(\"Error during processing: {}\",new Object[]{t.getMessage()},t);\n    session.rollback();\n    context.yield();\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 1247,
                    "astHeight": 18
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                "nodePosition": {
                    "charLength": 49,
                    "startLineNumber": 333,
                    "startColumnNumber": 16,
                    "endLineNumber": 333,
                    "endColumnNumber": 65
                },
                "nodeContext": "IntStream.range(0,maxValueColumnNameList.size())",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 7,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "0",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 353,
                "startColumnNumber": 63,
                "endLineNumber": 353,
                "endColumnNumber": 64
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
                    "nodePosition": {
                        "charLength": 18,
                        "startLineNumber": 353,
                        "startColumnNumber": 46,
                        "endLineNumber": 353,
                        "endColumnNumber": 64
                    },
                    "nodeContext": "partitionSize == 0",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,expression]",
                    "nodePosition": {
                        "charLength": 20,
                        "startLineNumber": 353,
                        "startColumnNumber": 45,
                        "endLineNumber": 353,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "(partitionSize == 0)",
                    "nodeType": "ParenthesizedExpression",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 95,
                        "startLineNumber": 353,
                        "startColumnNumber": 45,
                        "endLineNumber": 353,
                        "endColumnNumber": 140
                    },
                    "nodeContext": "(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1)",
                    "nodeType": "ConditionalExpression",
                    "astNodeNumber": 20,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 113,
                        "startLineNumber": 353,
                        "startColumnNumber": 27,
                        "endLineNumber": 353,
                        "endColumnNumber": 140
                    },
                    "nodeContext": "numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1)",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 22,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 125,
                        "startLineNumber": 353,
                        "startColumnNumber": 16,
                        "endLineNumber": 353,
                        "endColumnNumber": 141
                    },
                    "nodeContext": "final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 25,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 6723,
                        "startLineNumber": 281,
                        "startColumnNumber": 61,
                        "endLineNumber": 383,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  final Integer queryTimeout=context.getProperty(QUERY_TIMEOUT).evaluateAttributeExpressions(fileToProcess).asTimePeriod(TimeUnit.SECONDS).intValue();\n  st.setQueryTimeout(queryTimeout);\n  logger.debug(\"Executing {}\",new Object[]{selectQuery});\n  ResultSet resultSet;\n  resultSet=st.executeQuery(selectQuery);\n  if (resultSet.next()) {\n    rowCount=resultSet.getLong(1);\n    ResultSetMetaData rsmd=resultSet.getMetaData();\n    for (int i=2; i <= rsmd.getColumnCount(); i++) {\n      String resultColumnName=(StringUtils.isNotEmpty(rsmd.getColumnLabel(i)) ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i)).toLowerCase();\n      String fullyQualifiedStateKey=getStateKey(tableName,resultColumnName,dbAdapter);\n      String resultColumnCurrentMax=statePropertyMap.get(fullyQualifiedStateKey);\n      if (StringUtils.isEmpty(resultColumnCurrentMax) && !isDynamicTableName) {\n        resultColumnCurrentMax=statePropertyMap.get(resultColumnName);\n      }\n      int type=rsmd.getColumnType(i);\n      if (isDynamicTableName) {\n        columnTypeMap.put(fullyQualifiedStateKey,type);\n      }\n      try {\n        String newMaxValue=getMaxValueFromRow(resultSet,i,type,resultColumnCurrentMax,dbAdapter.getName());\n        if (newMaxValue != null) {\n          statePropertyMap.put(fullyQualifiedStateKey,newMaxValue);\n        }\n      }\n catch (      ParseException|IOException pie) {\n        throw new ProcessException(pie);\n      }\n    }\n  }\n else {\n    throw new SQLException(\"No rows returned from metadata query: \" + selectQuery);\n  }\n  IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n    String colName=maxValueColumnNameList.get(index);\n    maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n    String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n    if (!StringUtils.isEmpty(maxValue)) {\n      if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n        super.setup(context,false,finalFileToProcess);\n      }\n      Integer type=getColumnType(tableName,colName,dbAdapter);\n      maxValueClauses.add(colName + \" <= \" + getLiteralByType(type,maxValue,dbAdapter.getName()));\n    }\n  }\n);\n  whereClause=StringUtils.join(maxValueClauses,\" AND \");\n  final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n  for (long i=0; i < numberOfFetches; i++) {\n    Long limit=partitionSize == 0 ? null : (long)partitionSize;\n    Long offset=partitionSize == 0 ? null : i * partitionSize;\n    final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n    final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n    FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n    sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n    sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n    if (columnNames != null) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n    }\n    if (StringUtils.isNotBlank(whereClause)) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n    }\n    if (StringUtils.isNotBlank(maxColumnNames)) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n    }\n    sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n    if (partitionSize != 0) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n    }\n    session.transfer(sqlFlowFile,REL_SUCCESS);\n  }\n  if (fileToProcess != null) {\n    session.remove(fileToProcess);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 530,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 7563,
                        "startLineNumber": 280,
                        "startColumnNumber": 12,
                        "endLineNumber": 393,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "try (final Connection con=dbcpService.getConnection(finalFileToProcess == null ? Collections.emptyMap() : finalFileToProcess.getAttributes());final Statement st=con.createStatement()){\n  final Integer queryTimeout=context.getProperty(QUERY_TIMEOUT).evaluateAttributeExpressions(fileToProcess).asTimePeriod(TimeUnit.SECONDS).intValue();\n  st.setQueryTimeout(queryTimeout);\n  logger.debug(\"Executing {}\",new Object[]{selectQuery});\n  ResultSet resultSet;\n  resultSet=st.executeQuery(selectQuery);\n  if (resultSet.next()) {\n    rowCount=resultSet.getLong(1);\n    ResultSetMetaData rsmd=resultSet.getMetaData();\n    for (int i=2; i <= rsmd.getColumnCount(); i++) {\n      String resultColumnName=(StringUtils.isNotEmpty(rsmd.getColumnLabel(i)) ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i)).toLowerCase();\n      String fullyQualifiedStateKey=getStateKey(tableName,resultColumnName,dbAdapter);\n      String resultColumnCurrentMax=statePropertyMap.get(fullyQualifiedStateKey);\n      if (StringUtils.isEmpty(resultColumnCurrentMax) && !isDynamicTableName) {\n        resultColumnCurrentMax=statePropertyMap.get(resultColumnName);\n      }\n      int type=rsmd.getColumnType(i);\n      if (isDynamicTableName) {\n        columnTypeMap.put(fullyQualifiedStateKey,type);\n      }\n      try {\n        String newMaxValue=getMaxValueFromRow(resultSet,i,type,resultColumnCurrentMax,dbAdapter.getName());\n        if (newMaxValue != null) {\n          statePropertyMap.put(fullyQualifiedStateKey,newMaxValue);\n        }\n      }\n catch (      ParseException|IOException pie) {\n        throw new ProcessException(pie);\n      }\n    }\n  }\n else {\n    throw new SQLException(\"No rows returned from metadata query: \" + selectQuery);\n  }\n  IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n    String colName=maxValueColumnNameList.get(index);\n    maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n    String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n    if (!StringUtils.isEmpty(maxValue)) {\n      if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n        super.setup(context,false,finalFileToProcess);\n      }\n      Integer type=getColumnType(tableName,colName,dbAdapter);\n      maxValueClauses.add(colName + \" <= \" + getLiteralByType(type,maxValue,dbAdapter.getName()));\n    }\n  }\n);\n  whereClause=StringUtils.join(maxValueClauses,\" AND \");\n  final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n  for (long i=0; i < numberOfFetches; i++) {\n    Long limit=partitionSize == 0 ? null : (long)partitionSize;\n    Long offset=partitionSize == 0 ? null : i * partitionSize;\n    final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n    final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n    FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n    sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n    sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n    if (columnNames != null) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n    }\n    if (StringUtils.isNotBlank(whereClause)) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n    }\n    if (StringUtils.isNotBlank(maxColumnNames)) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n    }\n    sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n    if (partitionSize != 0) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n    }\n    session.transfer(sqlFlowFile,REL_SUCCESS);\n  }\n  if (fileToProcess != null) {\n    session.remove(fileToProcess);\n  }\n}\n catch (SQLException e) {\n  if (fileToProcess != null) {\n    logger.error(\"Unable to execute SQL select query {} due to {}, routing {} to failure\",new Object[]{selectQuery,e,fileToProcess});\n    fileToProcess=session.putAttribute(fileToProcess,\"generatetablefetch.sql.error\",e.getMessage());\n    session.transfer(fileToProcess,REL_FAILURE);\n  }\n else {\n    logger.error(\"Unable to execute SQL select query {} due to {}\",new Object[]{selectQuery,e});\n    throw new ProcessException(e);\n  }\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 620,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 12385,
                        "startLineNumber": 213,
                        "startColumnNumber": 12,
                        "endLineNumber": 404,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final Map<String,String> statePropertyMap=new HashMap<>(stateMap.toMap());\n  for (  final Map.Entry<String,String> maxProp : maxValueProperties.entrySet()) {\n    String maxPropKey=maxProp.getKey().toLowerCase();\n    String fullyQualifiedMaxPropKey=getStateKey(tableName,maxPropKey,dbAdapter);\n    if (!statePropertyMap.containsKey(fullyQualifiedMaxPropKey)) {\n      String newMaxPropValue;\n      if (statePropertyMap.containsKey(maxPropKey)) {\n        newMaxPropValue=statePropertyMap.get(maxPropKey);\n      }\n else {\n        newMaxPropValue=maxProp.getValue();\n      }\n      statePropertyMap.put(fullyQualifiedMaxPropKey,newMaxPropValue);\n    }\n  }\n  String whereClause=null;\n  List<String> maxValueColumnNameList=StringUtils.isEmpty(maxValueColumnNames) ? new ArrayList<>(0) : Arrays.asList(maxValueColumnNames.split(\"\\\\s*,\\\\s*\"));\n  List<String> maxValueClauses=new ArrayList<>(maxValueColumnNameList.size());\n  String columnsClause=null;\n  List<String> maxValueSelectColumns=new ArrayList<>(maxValueColumnNameList.size() + 1);\n  maxValueSelectColumns.add(\"COUNT(*)\");\n  IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n    String colName=maxValueColumnNameList.get(index);\n    maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n    String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n    if (!StringUtils.isEmpty(maxValue)) {\n      if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n        super.setup(context,false,finalFileToProcess);\n      }\n      Integer type=getColumnType(tableName,colName,dbAdapter);\n      maxValueClauses.add(colName + (index == 0 ? \" > \" : \" >= \") + getLiteralByType(type,maxValue,dbAdapter.getName()));\n    }\n  }\n);\n  if (customWhereClause != null) {\n    maxValueClauses.add(\"(\" + customWhereClause + \")\");\n  }\n  whereClause=StringUtils.join(maxValueClauses,\" AND \");\n  columnsClause=StringUtils.join(maxValueSelectColumns,\", \");\n  final String selectQuery=dbAdapter.getSelectStatement(tableName,columnsClause,whereClause,null,null,null);\n  long rowCount=0;\n  try (final Connection con=dbcpService.getConnection(finalFileToProcess == null ? Collections.emptyMap() : finalFileToProcess.getAttributes());final Statement st=con.createStatement()){\n    final Integer queryTimeout=context.getProperty(QUERY_TIMEOUT).evaluateAttributeExpressions(fileToProcess).asTimePeriod(TimeUnit.SECONDS).intValue();\n    st.setQueryTimeout(queryTimeout);\n    logger.debug(\"Executing {}\",new Object[]{selectQuery});\n    ResultSet resultSet;\n    resultSet=st.executeQuery(selectQuery);\n    if (resultSet.next()) {\n      rowCount=resultSet.getLong(1);\n      ResultSetMetaData rsmd=resultSet.getMetaData();\n      for (int i=2; i <= rsmd.getColumnCount(); i++) {\n        String resultColumnName=(StringUtils.isNotEmpty(rsmd.getColumnLabel(i)) ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i)).toLowerCase();\n        String fullyQualifiedStateKey=getStateKey(tableName,resultColumnName,dbAdapter);\n        String resultColumnCurrentMax=statePropertyMap.get(fullyQualifiedStateKey);\n        if (StringUtils.isEmpty(resultColumnCurrentMax) && !isDynamicTableName) {\n          resultColumnCurrentMax=statePropertyMap.get(resultColumnName);\n        }\n        int type=rsmd.getColumnType(i);\n        if (isDynamicTableName) {\n          columnTypeMap.put(fullyQualifiedStateKey,type);\n        }\n        try {\n          String newMaxValue=getMaxValueFromRow(resultSet,i,type,resultColumnCurrentMax,dbAdapter.getName());\n          if (newMaxValue != null) {\n            statePropertyMap.put(fullyQualifiedStateKey,newMaxValue);\n          }\n        }\n catch (        ParseException|IOException pie) {\n          throw new ProcessException(pie);\n        }\n      }\n    }\n else {\n      throw new SQLException(\"No rows returned from metadata query: \" + selectQuery);\n    }\n    IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n      String colName=maxValueColumnNameList.get(index);\n      maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n      String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n      if (!StringUtils.isEmpty(maxValue)) {\n        if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n          super.setup(context,false,finalFileToProcess);\n        }\n        Integer type=getColumnType(tableName,colName,dbAdapter);\n        maxValueClauses.add(colName + \" <= \" + getLiteralByType(type,maxValue,dbAdapter.getName()));\n      }\n    }\n);\n    whereClause=StringUtils.join(maxValueClauses,\" AND \");\n    final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n    for (long i=0; i < numberOfFetches; i++) {\n      Long limit=partitionSize == 0 ? null : (long)partitionSize;\n      Long offset=partitionSize == 0 ? null : i * partitionSize;\n      final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n      final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n      FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n      sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n      if (columnNames != null) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n      }\n      if (StringUtils.isNotBlank(whereClause)) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n      }\n      if (StringUtils.isNotBlank(maxColumnNames)) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n      }\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n      if (partitionSize != 0) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n      }\n      session.transfer(sqlFlowFile,REL_SUCCESS);\n    }\n    if (fileToProcess != null) {\n      session.remove(fileToProcess);\n    }\n  }\n catch (  SQLException e) {\n    if (fileToProcess != null) {\n      logger.error(\"Unable to execute SQL select query {} due to {}, routing {} to failure\",new Object[]{selectQuery,e,fileToProcess});\n      fileToProcess=session.putAttribute(fileToProcess,\"generatetablefetch.sql.error\",e.getMessage());\n      session.transfer(fileToProcess,REL_FAILURE);\n    }\n else {\n      logger.error(\"Unable to execute SQL select query {} due to {}\",new Object[]{selectQuery,e});\n      throw new ProcessException(e);\n    }\n  }\n  session.commit();\n  try {\n    stateManager.setState(statePropertyMap,Scope.CLUSTER);\n  }\n catch (  IOException ioe) {\n    logger.error(\"{} failed to update State Manager, observed maximum values will not be recorded. \" + \"Also, any generated SQL statements may be duplicated.\",new Object[]{this,ioe});\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 971,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 12730,
                        "startLineNumber": 213,
                        "startColumnNumber": 8,
                        "endLineNumber": 410,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  final Map<String,String> statePropertyMap=new HashMap<>(stateMap.toMap());\n  for (  final Map.Entry<String,String> maxProp : maxValueProperties.entrySet()) {\n    String maxPropKey=maxProp.getKey().toLowerCase();\n    String fullyQualifiedMaxPropKey=getStateKey(tableName,maxPropKey,dbAdapter);\n    if (!statePropertyMap.containsKey(fullyQualifiedMaxPropKey)) {\n      String newMaxPropValue;\n      if (statePropertyMap.containsKey(maxPropKey)) {\n        newMaxPropValue=statePropertyMap.get(maxPropKey);\n      }\n else {\n        newMaxPropValue=maxProp.getValue();\n      }\n      statePropertyMap.put(fullyQualifiedMaxPropKey,newMaxPropValue);\n    }\n  }\n  String whereClause=null;\n  List<String> maxValueColumnNameList=StringUtils.isEmpty(maxValueColumnNames) ? new ArrayList<>(0) : Arrays.asList(maxValueColumnNames.split(\"\\\\s*,\\\\s*\"));\n  List<String> maxValueClauses=new ArrayList<>(maxValueColumnNameList.size());\n  String columnsClause=null;\n  List<String> maxValueSelectColumns=new ArrayList<>(maxValueColumnNameList.size() + 1);\n  maxValueSelectColumns.add(\"COUNT(*)\");\n  IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n    String colName=maxValueColumnNameList.get(index);\n    maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n    String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n    if (!StringUtils.isEmpty(maxValue)) {\n      if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n        super.setup(context,false,finalFileToProcess);\n      }\n      Integer type=getColumnType(tableName,colName,dbAdapter);\n      maxValueClauses.add(colName + (index == 0 ? \" > \" : \" >= \") + getLiteralByType(type,maxValue,dbAdapter.getName()));\n    }\n  }\n);\n  if (customWhereClause != null) {\n    maxValueClauses.add(\"(\" + customWhereClause + \")\");\n  }\n  whereClause=StringUtils.join(maxValueClauses,\" AND \");\n  columnsClause=StringUtils.join(maxValueSelectColumns,\", \");\n  final String selectQuery=dbAdapter.getSelectStatement(tableName,columnsClause,whereClause,null,null,null);\n  long rowCount=0;\n  try (final Connection con=dbcpService.getConnection(finalFileToProcess == null ? Collections.emptyMap() : finalFileToProcess.getAttributes());final Statement st=con.createStatement()){\n    final Integer queryTimeout=context.getProperty(QUERY_TIMEOUT).evaluateAttributeExpressions(fileToProcess).asTimePeriod(TimeUnit.SECONDS).intValue();\n    st.setQueryTimeout(queryTimeout);\n    logger.debug(\"Executing {}\",new Object[]{selectQuery});\n    ResultSet resultSet;\n    resultSet=st.executeQuery(selectQuery);\n    if (resultSet.next()) {\n      rowCount=resultSet.getLong(1);\n      ResultSetMetaData rsmd=resultSet.getMetaData();\n      for (int i=2; i <= rsmd.getColumnCount(); i++) {\n        String resultColumnName=(StringUtils.isNotEmpty(rsmd.getColumnLabel(i)) ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i)).toLowerCase();\n        String fullyQualifiedStateKey=getStateKey(tableName,resultColumnName,dbAdapter);\n        String resultColumnCurrentMax=statePropertyMap.get(fullyQualifiedStateKey);\n        if (StringUtils.isEmpty(resultColumnCurrentMax) && !isDynamicTableName) {\n          resultColumnCurrentMax=statePropertyMap.get(resultColumnName);\n        }\n        int type=rsmd.getColumnType(i);\n        if (isDynamicTableName) {\n          columnTypeMap.put(fullyQualifiedStateKey,type);\n        }\n        try {\n          String newMaxValue=getMaxValueFromRow(resultSet,i,type,resultColumnCurrentMax,dbAdapter.getName());\n          if (newMaxValue != null) {\n            statePropertyMap.put(fullyQualifiedStateKey,newMaxValue);\n          }\n        }\n catch (        ParseException|IOException pie) {\n          throw new ProcessException(pie);\n        }\n      }\n    }\n else {\n      throw new SQLException(\"No rows returned from metadata query: \" + selectQuery);\n    }\n    IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n      String colName=maxValueColumnNameList.get(index);\n      maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n      String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n      if (!StringUtils.isEmpty(maxValue)) {\n        if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n          super.setup(context,false,finalFileToProcess);\n        }\n        Integer type=getColumnType(tableName,colName,dbAdapter);\n        maxValueClauses.add(colName + \" <= \" + getLiteralByType(type,maxValue,dbAdapter.getName()));\n      }\n    }\n);\n    whereClause=StringUtils.join(maxValueClauses,\" AND \");\n    final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n    for (long i=0; i < numberOfFetches; i++) {\n      Long limit=partitionSize == 0 ? null : (long)partitionSize;\n      Long offset=partitionSize == 0 ? null : i * partitionSize;\n      final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n      final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n      FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n      sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n      if (columnNames != null) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n      }\n      if (StringUtils.isNotBlank(whereClause)) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n      }\n      if (StringUtils.isNotBlank(maxColumnNames)) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n      }\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n      if (partitionSize != 0) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n      }\n      session.transfer(sqlFlowFile,REL_SUCCESS);\n    }\n    if (fileToProcess != null) {\n      session.remove(fileToProcess);\n    }\n  }\n catch (  SQLException e) {\n    if (fileToProcess != null) {\n      logger.error(\"Unable to execute SQL select query {} due to {}, routing {} to failure\",new Object[]{selectQuery,e,fileToProcess});\n      fileToProcess=session.putAttribute(fileToProcess,\"generatetablefetch.sql.error\",e.getMessage());\n      session.transfer(fileToProcess,REL_FAILURE);\n    }\n else {\n      logger.error(\"Unable to execute SQL select query {} due to {}\",new Object[]{selectQuery,e});\n      throw new ProcessException(e);\n    }\n  }\n  session.commit();\n  try {\n    stateManager.setState(statePropertyMap,Scope.CLUSTER);\n  }\n catch (  IOException ioe) {\n    logger.error(\"{} failed to update State Manager, observed maximum values will not be recorded. \" + \"Also, any generated SQL statements may be duplicated.\",new Object[]{this,ioe});\n  }\n}\n catch (final ProcessException pe) {\n  Throwable t=(pe.getCause() == null ? pe : pe.getCause());\n  logger.error(\"Error during processing: {}\",new Object[]{t.getMessage()},t);\n  session.rollback();\n  context.yield();\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 1018,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 14819,
                        "startLineNumber": 173,
                        "startColumnNumber": 124,
                        "endLineNumber": 411,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (!isDynamicTableName && !isDynamicMaxValues && !setupComplete.get()) {\n    super.setup(context);\n  }\n  ProcessSession session=sessionFactory.createSession();\n  FlowFile fileToProcess=null;\n  if (context.hasIncomingConnection()) {\n    fileToProcess=session.get();\n    if (fileToProcess == null) {\n      return;\n    }\n  }\n  final ComponentLog logger=getLogger();\n  final DBCPService dbcpService=context.getProperty(DBCP_SERVICE).asControllerService(DBCPService.class);\n  final DatabaseAdapter dbAdapter=dbAdapters.get(context.getProperty(DB_TYPE).getValue());\n  final String tableName=context.getProperty(TABLE_NAME).evaluateAttributeExpressions(fileToProcess).getValue();\n  final String columnNames=context.getProperty(COLUMN_NAMES).evaluateAttributeExpressions(fileToProcess).getValue();\n  final String maxValueColumnNames=context.getProperty(MAX_VALUE_COLUMN_NAMES).evaluateAttributeExpressions(fileToProcess).getValue();\n  final int partitionSize=context.getProperty(PARTITION_SIZE).evaluateAttributeExpressions(fileToProcess).asInteger();\n  final String customWhereClause=context.getProperty(WHERE_CLAUSE).evaluateAttributeExpressions(fileToProcess).getValue();\n  final StateManager stateManager=context.getStateManager();\n  final StateMap stateMap;\n  FlowFile finalFileToProcess=fileToProcess;\n  try {\n    stateMap=stateManager.getState(Scope.CLUSTER);\n  }\n catch (  final IOException ioe) {\n    logger.error(\"Failed to retrieve observed maximum values from the State Manager. Will not perform \" + \"query until this is accomplished.\",ioe);\n    context.yield();\n    return;\n  }\n  try {\n    final Map<String,String> statePropertyMap=new HashMap<>(stateMap.toMap());\n    for (    final Map.Entry<String,String> maxProp : maxValueProperties.entrySet()) {\n      String maxPropKey=maxProp.getKey().toLowerCase();\n      String fullyQualifiedMaxPropKey=getStateKey(tableName,maxPropKey,dbAdapter);\n      if (!statePropertyMap.containsKey(fullyQualifiedMaxPropKey)) {\n        String newMaxPropValue;\n        if (statePropertyMap.containsKey(maxPropKey)) {\n          newMaxPropValue=statePropertyMap.get(maxPropKey);\n        }\n else {\n          newMaxPropValue=maxProp.getValue();\n        }\n        statePropertyMap.put(fullyQualifiedMaxPropKey,newMaxPropValue);\n      }\n    }\n    String whereClause=null;\n    List<String> maxValueColumnNameList=StringUtils.isEmpty(maxValueColumnNames) ? new ArrayList<>(0) : Arrays.asList(maxValueColumnNames.split(\"\\\\s*,\\\\s*\"));\n    List<String> maxValueClauses=new ArrayList<>(maxValueColumnNameList.size());\n    String columnsClause=null;\n    List<String> maxValueSelectColumns=new ArrayList<>(maxValueColumnNameList.size() + 1);\n    maxValueSelectColumns.add(\"COUNT(*)\");\n    IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n      String colName=maxValueColumnNameList.get(index);\n      maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n      String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n      if (!StringUtils.isEmpty(maxValue)) {\n        if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n          super.setup(context,false,finalFileToProcess);\n        }\n        Integer type=getColumnType(tableName,colName,dbAdapter);\n        maxValueClauses.add(colName + (index == 0 ? \" > \" : \" >= \") + getLiteralByType(type,maxValue,dbAdapter.getName()));\n      }\n    }\n);\n    if (customWhereClause != null) {\n      maxValueClauses.add(\"(\" + customWhereClause + \")\");\n    }\n    whereClause=StringUtils.join(maxValueClauses,\" AND \");\n    columnsClause=StringUtils.join(maxValueSelectColumns,\", \");\n    final String selectQuery=dbAdapter.getSelectStatement(tableName,columnsClause,whereClause,null,null,null);\n    long rowCount=0;\n    try (final Connection con=dbcpService.getConnection(finalFileToProcess == null ? Collections.emptyMap() : finalFileToProcess.getAttributes());final Statement st=con.createStatement()){\n      final Integer queryTimeout=context.getProperty(QUERY_TIMEOUT).evaluateAttributeExpressions(fileToProcess).asTimePeriod(TimeUnit.SECONDS).intValue();\n      st.setQueryTimeout(queryTimeout);\n      logger.debug(\"Executing {}\",new Object[]{selectQuery});\n      ResultSet resultSet;\n      resultSet=st.executeQuery(selectQuery);\n      if (resultSet.next()) {\n        rowCount=resultSet.getLong(1);\n        ResultSetMetaData rsmd=resultSet.getMetaData();\n        for (int i=2; i <= rsmd.getColumnCount(); i++) {\n          String resultColumnName=(StringUtils.isNotEmpty(rsmd.getColumnLabel(i)) ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i)).toLowerCase();\n          String fullyQualifiedStateKey=getStateKey(tableName,resultColumnName,dbAdapter);\n          String resultColumnCurrentMax=statePropertyMap.get(fullyQualifiedStateKey);\n          if (StringUtils.isEmpty(resultColumnCurrentMax) && !isDynamicTableName) {\n            resultColumnCurrentMax=statePropertyMap.get(resultColumnName);\n          }\n          int type=rsmd.getColumnType(i);\n          if (isDynamicTableName) {\n            columnTypeMap.put(fullyQualifiedStateKey,type);\n          }\n          try {\n            String newMaxValue=getMaxValueFromRow(resultSet,i,type,resultColumnCurrentMax,dbAdapter.getName());\n            if (newMaxValue != null) {\n              statePropertyMap.put(fullyQualifiedStateKey,newMaxValue);\n            }\n          }\n catch (          ParseException|IOException pie) {\n            throw new ProcessException(pie);\n          }\n        }\n      }\n else {\n        throw new SQLException(\"No rows returned from metadata query: \" + selectQuery);\n      }\n      IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n        String colName=maxValueColumnNameList.get(index);\n        maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n        String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n        if (!StringUtils.isEmpty(maxValue)) {\n          if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n            super.setup(context,false,finalFileToProcess);\n          }\n          Integer type=getColumnType(tableName,colName,dbAdapter);\n          maxValueClauses.add(colName + \" <= \" + getLiteralByType(type,maxValue,dbAdapter.getName()));\n        }\n      }\n);\n      whereClause=StringUtils.join(maxValueClauses,\" AND \");\n      final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n      for (long i=0; i < numberOfFetches; i++) {\n        Long limit=partitionSize == 0 ? null : (long)partitionSize;\n        Long offset=partitionSize == 0 ? null : i * partitionSize;\n        final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n        final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n        FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n        sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n        if (columnNames != null) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n        }\n        if (StringUtils.isNotBlank(whereClause)) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n        }\n        if (StringUtils.isNotBlank(maxColumnNames)) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n        }\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n        if (partitionSize != 0) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n        }\n        session.transfer(sqlFlowFile,REL_SUCCESS);\n      }\n      if (fileToProcess != null) {\n        session.remove(fileToProcess);\n      }\n    }\n catch (    SQLException e) {\n      if (fileToProcess != null) {\n        logger.error(\"Unable to execute SQL select query {} due to {}, routing {} to failure\",new Object[]{selectQuery,e,fileToProcess});\n        fileToProcess=session.putAttribute(fileToProcess,\"generatetablefetch.sql.error\",e.getMessage());\n        session.transfer(fileToProcess,REL_FAILURE);\n      }\n else {\n        logger.error(\"Unable to execute SQL select query {} due to {}\",new Object[]{selectQuery,e});\n        throw new ProcessException(e);\n      }\n    }\n    session.commit();\n    try {\n      stateManager.setState(statePropertyMap,Scope.CLUSTER);\n    }\n catch (    IOException ioe) {\n      logger.error(\"{} failed to update State Manager, observed maximum values will not be recorded. \" + \"Also, any generated SQL statements may be duplicated.\",new Object[]{this,ioe});\n    }\n  }\n catch (  final ProcessException pe) {\n    Throwable t=(pe.getCause() == null ? pe : pe.getCause());\n    logger.error(\"Error during processing: {}\",new Object[]{t.getMessage()},t);\n    session.rollback();\n    context.yield();\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 1229,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 14953,
                        "startLineNumber": 172,
                        "startColumnNumber": 4,
                        "endLineNumber": 411,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void onTrigger(final ProcessContext context,final ProcessSessionFactory sessionFactory) throws ProcessException {\n  if (!isDynamicTableName && !isDynamicMaxValues && !setupComplete.get()) {\n    super.setup(context);\n  }\n  ProcessSession session=sessionFactory.createSession();\n  FlowFile fileToProcess=null;\n  if (context.hasIncomingConnection()) {\n    fileToProcess=session.get();\n    if (fileToProcess == null) {\n      return;\n    }\n  }\n  final ComponentLog logger=getLogger();\n  final DBCPService dbcpService=context.getProperty(DBCP_SERVICE).asControllerService(DBCPService.class);\n  final DatabaseAdapter dbAdapter=dbAdapters.get(context.getProperty(DB_TYPE).getValue());\n  final String tableName=context.getProperty(TABLE_NAME).evaluateAttributeExpressions(fileToProcess).getValue();\n  final String columnNames=context.getProperty(COLUMN_NAMES).evaluateAttributeExpressions(fileToProcess).getValue();\n  final String maxValueColumnNames=context.getProperty(MAX_VALUE_COLUMN_NAMES).evaluateAttributeExpressions(fileToProcess).getValue();\n  final int partitionSize=context.getProperty(PARTITION_SIZE).evaluateAttributeExpressions(fileToProcess).asInteger();\n  final String customWhereClause=context.getProperty(WHERE_CLAUSE).evaluateAttributeExpressions(fileToProcess).getValue();\n  final StateManager stateManager=context.getStateManager();\n  final StateMap stateMap;\n  FlowFile finalFileToProcess=fileToProcess;\n  try {\n    stateMap=stateManager.getState(Scope.CLUSTER);\n  }\n catch (  final IOException ioe) {\n    logger.error(\"Failed to retrieve observed maximum values from the State Manager. Will not perform \" + \"query until this is accomplished.\",ioe);\n    context.yield();\n    return;\n  }\n  try {\n    final Map<String,String> statePropertyMap=new HashMap<>(stateMap.toMap());\n    for (    final Map.Entry<String,String> maxProp : maxValueProperties.entrySet()) {\n      String maxPropKey=maxProp.getKey().toLowerCase();\n      String fullyQualifiedMaxPropKey=getStateKey(tableName,maxPropKey,dbAdapter);\n      if (!statePropertyMap.containsKey(fullyQualifiedMaxPropKey)) {\n        String newMaxPropValue;\n        if (statePropertyMap.containsKey(maxPropKey)) {\n          newMaxPropValue=statePropertyMap.get(maxPropKey);\n        }\n else {\n          newMaxPropValue=maxProp.getValue();\n        }\n        statePropertyMap.put(fullyQualifiedMaxPropKey,newMaxPropValue);\n      }\n    }\n    String whereClause=null;\n    List<String> maxValueColumnNameList=StringUtils.isEmpty(maxValueColumnNames) ? new ArrayList<>(0) : Arrays.asList(maxValueColumnNames.split(\"\\\\s*,\\\\s*\"));\n    List<String> maxValueClauses=new ArrayList<>(maxValueColumnNameList.size());\n    String columnsClause=null;\n    List<String> maxValueSelectColumns=new ArrayList<>(maxValueColumnNameList.size() + 1);\n    maxValueSelectColumns.add(\"COUNT(*)\");\n    IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n      String colName=maxValueColumnNameList.get(index);\n      maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n      String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n      if (!StringUtils.isEmpty(maxValue)) {\n        if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n          super.setup(context,false,finalFileToProcess);\n        }\n        Integer type=getColumnType(tableName,colName,dbAdapter);\n        maxValueClauses.add(colName + (index == 0 ? \" > \" : \" >= \") + getLiteralByType(type,maxValue,dbAdapter.getName()));\n      }\n    }\n);\n    if (customWhereClause != null) {\n      maxValueClauses.add(\"(\" + customWhereClause + \")\");\n    }\n    whereClause=StringUtils.join(maxValueClauses,\" AND \");\n    columnsClause=StringUtils.join(maxValueSelectColumns,\", \");\n    final String selectQuery=dbAdapter.getSelectStatement(tableName,columnsClause,whereClause,null,null,null);\n    long rowCount=0;\n    try (final Connection con=dbcpService.getConnection(finalFileToProcess == null ? Collections.emptyMap() : finalFileToProcess.getAttributes());final Statement st=con.createStatement()){\n      final Integer queryTimeout=context.getProperty(QUERY_TIMEOUT).evaluateAttributeExpressions(fileToProcess).asTimePeriod(TimeUnit.SECONDS).intValue();\n      st.setQueryTimeout(queryTimeout);\n      logger.debug(\"Executing {}\",new Object[]{selectQuery});\n      ResultSet resultSet;\n      resultSet=st.executeQuery(selectQuery);\n      if (resultSet.next()) {\n        rowCount=resultSet.getLong(1);\n        ResultSetMetaData rsmd=resultSet.getMetaData();\n        for (int i=2; i <= rsmd.getColumnCount(); i++) {\n          String resultColumnName=(StringUtils.isNotEmpty(rsmd.getColumnLabel(i)) ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i)).toLowerCase();\n          String fullyQualifiedStateKey=getStateKey(tableName,resultColumnName,dbAdapter);\n          String resultColumnCurrentMax=statePropertyMap.get(fullyQualifiedStateKey);\n          if (StringUtils.isEmpty(resultColumnCurrentMax) && !isDynamicTableName) {\n            resultColumnCurrentMax=statePropertyMap.get(resultColumnName);\n          }\n          int type=rsmd.getColumnType(i);\n          if (isDynamicTableName) {\n            columnTypeMap.put(fullyQualifiedStateKey,type);\n          }\n          try {\n            String newMaxValue=getMaxValueFromRow(resultSet,i,type,resultColumnCurrentMax,dbAdapter.getName());\n            if (newMaxValue != null) {\n              statePropertyMap.put(fullyQualifiedStateKey,newMaxValue);\n            }\n          }\n catch (          ParseException|IOException pie) {\n            throw new ProcessException(pie);\n          }\n        }\n      }\n else {\n        throw new SQLException(\"No rows returned from metadata query: \" + selectQuery);\n      }\n      IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n        String colName=maxValueColumnNameList.get(index);\n        maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n        String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n        if (!StringUtils.isEmpty(maxValue)) {\n          if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n            super.setup(context,false,finalFileToProcess);\n          }\n          Integer type=getColumnType(tableName,colName,dbAdapter);\n          maxValueClauses.add(colName + \" <= \" + getLiteralByType(type,maxValue,dbAdapter.getName()));\n        }\n      }\n);\n      whereClause=StringUtils.join(maxValueClauses,\" AND \");\n      final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n      for (long i=0; i < numberOfFetches; i++) {\n        Long limit=partitionSize == 0 ? null : (long)partitionSize;\n        Long offset=partitionSize == 0 ? null : i * partitionSize;\n        final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n        final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n        FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n        sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n        if (columnNames != null) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n        }\n        if (StringUtils.isNotBlank(whereClause)) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n        }\n        if (StringUtils.isNotBlank(maxColumnNames)) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n        }\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n        if (partitionSize != 0) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n        }\n        session.transfer(sqlFlowFile,REL_SUCCESS);\n      }\n      if (fileToProcess != null) {\n        session.remove(fileToProcess);\n      }\n    }\n catch (    SQLException e) {\n      if (fileToProcess != null) {\n        logger.error(\"Unable to execute SQL select query {} due to {}, routing {} to failure\",new Object[]{selectQuery,e,fileToProcess});\n        fileToProcess=session.putAttribute(fileToProcess,\"generatetablefetch.sql.error\",e.getMessage());\n        session.transfer(fileToProcess,REL_FAILURE);\n      }\n else {\n        logger.error(\"Unable to execute SQL select query {} due to {}\",new Object[]{selectQuery,e});\n        throw new ProcessException(e);\n      }\n    }\n    session.commit();\n    try {\n      stateManager.setState(statePropertyMap,Scope.CLUSTER);\n    }\n catch (    IOException ioe) {\n      logger.error(\"{} failed to update State Manager, observed maximum values will not be recorded. \" + \"Also, any generated SQL statements may be duplicated.\",new Object[]{this,ioe});\n    }\n  }\n catch (  final ProcessException pe) {\n    Throwable t=(pe.getCause() == null ? pe : pe.getCause());\n    logger.error(\"Error during processing: {}\",new Object[]{t.getMessage()},t);\n    session.rollback();\n    context.yield();\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 1247,
                    "astHeight": 18
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 125,
                    "startLineNumber": 353,
                    "startColumnNumber": 16,
                    "endLineNumber": 353,
                    "endColumnNumber": 141
                },
                "nodeContext": "final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 25,
                "astHeight": 9
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "0",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 353,
                "startColumnNumber": 130,
                "endLineNumber": 353,
                "endColumnNumber": 131
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,expression]",
                    "nodePosition": {
                        "charLength": 29,
                        "startLineNumber": 353,
                        "startColumnNumber": 102,
                        "endLineNumber": 353,
                        "endColumnNumber": 131
                    },
                    "nodeContext": "rowCount % partitionSize == 0",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
                    "nodePosition": {
                        "charLength": 37,
                        "startLineNumber": 353,
                        "startColumnNumber": 102,
                        "endLineNumber": 353,
                        "endColumnNumber": 139
                    },
                    "nodeContext": "rowCount % partitionSize == 0 ? 0 : 1",
                    "nodeType": "ConditionalExpression",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 39,
                        "startLineNumber": 353,
                        "startColumnNumber": 101,
                        "endLineNumber": 353,
                        "endColumnNumber": 140
                    },
                    "nodeContext": "(rowCount % partitionSize == 0 ? 0 : 1)",
                    "nodeType": "ParenthesizedExpression",
                    "astNodeNumber": 9,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,elseExpression]",
                    "nodePosition": {
                        "charLength": 68,
                        "startLineNumber": 353,
                        "startColumnNumber": 72,
                        "endLineNumber": 353,
                        "endColumnNumber": 140
                    },
                    "nodeContext": "(rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1)",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 14,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 95,
                        "startLineNumber": 353,
                        "startColumnNumber": 45,
                        "endLineNumber": 353,
                        "endColumnNumber": 140
                    },
                    "nodeContext": "(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1)",
                    "nodeType": "ConditionalExpression",
                    "astNodeNumber": 20,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 113,
                        "startLineNumber": 353,
                        "startColumnNumber": 27,
                        "endLineNumber": 353,
                        "endColumnNumber": 140
                    },
                    "nodeContext": "numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1)",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 22,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 125,
                        "startLineNumber": 353,
                        "startColumnNumber": 16,
                        "endLineNumber": 353,
                        "endColumnNumber": 141
                    },
                    "nodeContext": "final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 25,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 6723,
                        "startLineNumber": 281,
                        "startColumnNumber": 61,
                        "endLineNumber": 383,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  final Integer queryTimeout=context.getProperty(QUERY_TIMEOUT).evaluateAttributeExpressions(fileToProcess).asTimePeriod(TimeUnit.SECONDS).intValue();\n  st.setQueryTimeout(queryTimeout);\n  logger.debug(\"Executing {}\",new Object[]{selectQuery});\n  ResultSet resultSet;\n  resultSet=st.executeQuery(selectQuery);\n  if (resultSet.next()) {\n    rowCount=resultSet.getLong(1);\n    ResultSetMetaData rsmd=resultSet.getMetaData();\n    for (int i=2; i <= rsmd.getColumnCount(); i++) {\n      String resultColumnName=(StringUtils.isNotEmpty(rsmd.getColumnLabel(i)) ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i)).toLowerCase();\n      String fullyQualifiedStateKey=getStateKey(tableName,resultColumnName,dbAdapter);\n      String resultColumnCurrentMax=statePropertyMap.get(fullyQualifiedStateKey);\n      if (StringUtils.isEmpty(resultColumnCurrentMax) && !isDynamicTableName) {\n        resultColumnCurrentMax=statePropertyMap.get(resultColumnName);\n      }\n      int type=rsmd.getColumnType(i);\n      if (isDynamicTableName) {\n        columnTypeMap.put(fullyQualifiedStateKey,type);\n      }\n      try {\n        String newMaxValue=getMaxValueFromRow(resultSet,i,type,resultColumnCurrentMax,dbAdapter.getName());\n        if (newMaxValue != null) {\n          statePropertyMap.put(fullyQualifiedStateKey,newMaxValue);\n        }\n      }\n catch (      ParseException|IOException pie) {\n        throw new ProcessException(pie);\n      }\n    }\n  }\n else {\n    throw new SQLException(\"No rows returned from metadata query: \" + selectQuery);\n  }\n  IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n    String colName=maxValueColumnNameList.get(index);\n    maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n    String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n    if (!StringUtils.isEmpty(maxValue)) {\n      if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n        super.setup(context,false,finalFileToProcess);\n      }\n      Integer type=getColumnType(tableName,colName,dbAdapter);\n      maxValueClauses.add(colName + \" <= \" + getLiteralByType(type,maxValue,dbAdapter.getName()));\n    }\n  }\n);\n  whereClause=StringUtils.join(maxValueClauses,\" AND \");\n  final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n  for (long i=0; i < numberOfFetches; i++) {\n    Long limit=partitionSize == 0 ? null : (long)partitionSize;\n    Long offset=partitionSize == 0 ? null : i * partitionSize;\n    final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n    final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n    FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n    sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n    sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n    if (columnNames != null) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n    }\n    if (StringUtils.isNotBlank(whereClause)) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n    }\n    if (StringUtils.isNotBlank(maxColumnNames)) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n    }\n    sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n    if (partitionSize != 0) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n    }\n    session.transfer(sqlFlowFile,REL_SUCCESS);\n  }\n  if (fileToProcess != null) {\n    session.remove(fileToProcess);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 530,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 7563,
                        "startLineNumber": 280,
                        "startColumnNumber": 12,
                        "endLineNumber": 393,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "try (final Connection con=dbcpService.getConnection(finalFileToProcess == null ? Collections.emptyMap() : finalFileToProcess.getAttributes());final Statement st=con.createStatement()){\n  final Integer queryTimeout=context.getProperty(QUERY_TIMEOUT).evaluateAttributeExpressions(fileToProcess).asTimePeriod(TimeUnit.SECONDS).intValue();\n  st.setQueryTimeout(queryTimeout);\n  logger.debug(\"Executing {}\",new Object[]{selectQuery});\n  ResultSet resultSet;\n  resultSet=st.executeQuery(selectQuery);\n  if (resultSet.next()) {\n    rowCount=resultSet.getLong(1);\n    ResultSetMetaData rsmd=resultSet.getMetaData();\n    for (int i=2; i <= rsmd.getColumnCount(); i++) {\n      String resultColumnName=(StringUtils.isNotEmpty(rsmd.getColumnLabel(i)) ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i)).toLowerCase();\n      String fullyQualifiedStateKey=getStateKey(tableName,resultColumnName,dbAdapter);\n      String resultColumnCurrentMax=statePropertyMap.get(fullyQualifiedStateKey);\n      if (StringUtils.isEmpty(resultColumnCurrentMax) && !isDynamicTableName) {\n        resultColumnCurrentMax=statePropertyMap.get(resultColumnName);\n      }\n      int type=rsmd.getColumnType(i);\n      if (isDynamicTableName) {\n        columnTypeMap.put(fullyQualifiedStateKey,type);\n      }\n      try {\n        String newMaxValue=getMaxValueFromRow(resultSet,i,type,resultColumnCurrentMax,dbAdapter.getName());\n        if (newMaxValue != null) {\n          statePropertyMap.put(fullyQualifiedStateKey,newMaxValue);\n        }\n      }\n catch (      ParseException|IOException pie) {\n        throw new ProcessException(pie);\n      }\n    }\n  }\n else {\n    throw new SQLException(\"No rows returned from metadata query: \" + selectQuery);\n  }\n  IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n    String colName=maxValueColumnNameList.get(index);\n    maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n    String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n    if (!StringUtils.isEmpty(maxValue)) {\n      if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n        super.setup(context,false,finalFileToProcess);\n      }\n      Integer type=getColumnType(tableName,colName,dbAdapter);\n      maxValueClauses.add(colName + \" <= \" + getLiteralByType(type,maxValue,dbAdapter.getName()));\n    }\n  }\n);\n  whereClause=StringUtils.join(maxValueClauses,\" AND \");\n  final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n  for (long i=0; i < numberOfFetches; i++) {\n    Long limit=partitionSize == 0 ? null : (long)partitionSize;\n    Long offset=partitionSize == 0 ? null : i * partitionSize;\n    final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n    final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n    FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n    sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n    sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n    if (columnNames != null) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n    }\n    if (StringUtils.isNotBlank(whereClause)) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n    }\n    if (StringUtils.isNotBlank(maxColumnNames)) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n    }\n    sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n    if (partitionSize != 0) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n    }\n    session.transfer(sqlFlowFile,REL_SUCCESS);\n  }\n  if (fileToProcess != null) {\n    session.remove(fileToProcess);\n  }\n}\n catch (SQLException e) {\n  if (fileToProcess != null) {\n    logger.error(\"Unable to execute SQL select query {} due to {}, routing {} to failure\",new Object[]{selectQuery,e,fileToProcess});\n    fileToProcess=session.putAttribute(fileToProcess,\"generatetablefetch.sql.error\",e.getMessage());\n    session.transfer(fileToProcess,REL_FAILURE);\n  }\n else {\n    logger.error(\"Unable to execute SQL select query {} due to {}\",new Object[]{selectQuery,e});\n    throw new ProcessException(e);\n  }\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 620,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 12385,
                        "startLineNumber": 213,
                        "startColumnNumber": 12,
                        "endLineNumber": 404,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final Map<String,String> statePropertyMap=new HashMap<>(stateMap.toMap());\n  for (  final Map.Entry<String,String> maxProp : maxValueProperties.entrySet()) {\n    String maxPropKey=maxProp.getKey().toLowerCase();\n    String fullyQualifiedMaxPropKey=getStateKey(tableName,maxPropKey,dbAdapter);\n    if (!statePropertyMap.containsKey(fullyQualifiedMaxPropKey)) {\n      String newMaxPropValue;\n      if (statePropertyMap.containsKey(maxPropKey)) {\n        newMaxPropValue=statePropertyMap.get(maxPropKey);\n      }\n else {\n        newMaxPropValue=maxProp.getValue();\n      }\n      statePropertyMap.put(fullyQualifiedMaxPropKey,newMaxPropValue);\n    }\n  }\n  String whereClause=null;\n  List<String> maxValueColumnNameList=StringUtils.isEmpty(maxValueColumnNames) ? new ArrayList<>(0) : Arrays.asList(maxValueColumnNames.split(\"\\\\s*,\\\\s*\"));\n  List<String> maxValueClauses=new ArrayList<>(maxValueColumnNameList.size());\n  String columnsClause=null;\n  List<String> maxValueSelectColumns=new ArrayList<>(maxValueColumnNameList.size() + 1);\n  maxValueSelectColumns.add(\"COUNT(*)\");\n  IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n    String colName=maxValueColumnNameList.get(index);\n    maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n    String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n    if (!StringUtils.isEmpty(maxValue)) {\n      if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n        super.setup(context,false,finalFileToProcess);\n      }\n      Integer type=getColumnType(tableName,colName,dbAdapter);\n      maxValueClauses.add(colName + (index == 0 ? \" > \" : \" >= \") + getLiteralByType(type,maxValue,dbAdapter.getName()));\n    }\n  }\n);\n  if (customWhereClause != null) {\n    maxValueClauses.add(\"(\" + customWhereClause + \")\");\n  }\n  whereClause=StringUtils.join(maxValueClauses,\" AND \");\n  columnsClause=StringUtils.join(maxValueSelectColumns,\", \");\n  final String selectQuery=dbAdapter.getSelectStatement(tableName,columnsClause,whereClause,null,null,null);\n  long rowCount=0;\n  try (final Connection con=dbcpService.getConnection(finalFileToProcess == null ? Collections.emptyMap() : finalFileToProcess.getAttributes());final Statement st=con.createStatement()){\n    final Integer queryTimeout=context.getProperty(QUERY_TIMEOUT).evaluateAttributeExpressions(fileToProcess).asTimePeriod(TimeUnit.SECONDS).intValue();\n    st.setQueryTimeout(queryTimeout);\n    logger.debug(\"Executing {}\",new Object[]{selectQuery});\n    ResultSet resultSet;\n    resultSet=st.executeQuery(selectQuery);\n    if (resultSet.next()) {\n      rowCount=resultSet.getLong(1);\n      ResultSetMetaData rsmd=resultSet.getMetaData();\n      for (int i=2; i <= rsmd.getColumnCount(); i++) {\n        String resultColumnName=(StringUtils.isNotEmpty(rsmd.getColumnLabel(i)) ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i)).toLowerCase();\n        String fullyQualifiedStateKey=getStateKey(tableName,resultColumnName,dbAdapter);\n        String resultColumnCurrentMax=statePropertyMap.get(fullyQualifiedStateKey);\n        if (StringUtils.isEmpty(resultColumnCurrentMax) && !isDynamicTableName) {\n          resultColumnCurrentMax=statePropertyMap.get(resultColumnName);\n        }\n        int type=rsmd.getColumnType(i);\n        if (isDynamicTableName) {\n          columnTypeMap.put(fullyQualifiedStateKey,type);\n        }\n        try {\n          String newMaxValue=getMaxValueFromRow(resultSet,i,type,resultColumnCurrentMax,dbAdapter.getName());\n          if (newMaxValue != null) {\n            statePropertyMap.put(fullyQualifiedStateKey,newMaxValue);\n          }\n        }\n catch (        ParseException|IOException pie) {\n          throw new ProcessException(pie);\n        }\n      }\n    }\n else {\n      throw new SQLException(\"No rows returned from metadata query: \" + selectQuery);\n    }\n    IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n      String colName=maxValueColumnNameList.get(index);\n      maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n      String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n      if (!StringUtils.isEmpty(maxValue)) {\n        if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n          super.setup(context,false,finalFileToProcess);\n        }\n        Integer type=getColumnType(tableName,colName,dbAdapter);\n        maxValueClauses.add(colName + \" <= \" + getLiteralByType(type,maxValue,dbAdapter.getName()));\n      }\n    }\n);\n    whereClause=StringUtils.join(maxValueClauses,\" AND \");\n    final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n    for (long i=0; i < numberOfFetches; i++) {\n      Long limit=partitionSize == 0 ? null : (long)partitionSize;\n      Long offset=partitionSize == 0 ? null : i * partitionSize;\n      final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n      final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n      FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n      sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n      if (columnNames != null) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n      }\n      if (StringUtils.isNotBlank(whereClause)) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n      }\n      if (StringUtils.isNotBlank(maxColumnNames)) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n      }\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n      if (partitionSize != 0) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n      }\n      session.transfer(sqlFlowFile,REL_SUCCESS);\n    }\n    if (fileToProcess != null) {\n      session.remove(fileToProcess);\n    }\n  }\n catch (  SQLException e) {\n    if (fileToProcess != null) {\n      logger.error(\"Unable to execute SQL select query {} due to {}, routing {} to failure\",new Object[]{selectQuery,e,fileToProcess});\n      fileToProcess=session.putAttribute(fileToProcess,\"generatetablefetch.sql.error\",e.getMessage());\n      session.transfer(fileToProcess,REL_FAILURE);\n    }\n else {\n      logger.error(\"Unable to execute SQL select query {} due to {}\",new Object[]{selectQuery,e});\n      throw new ProcessException(e);\n    }\n  }\n  session.commit();\n  try {\n    stateManager.setState(statePropertyMap,Scope.CLUSTER);\n  }\n catch (  IOException ioe) {\n    logger.error(\"{} failed to update State Manager, observed maximum values will not be recorded. \" + \"Also, any generated SQL statements may be duplicated.\",new Object[]{this,ioe});\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 971,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 12730,
                        "startLineNumber": 213,
                        "startColumnNumber": 8,
                        "endLineNumber": 410,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  final Map<String,String> statePropertyMap=new HashMap<>(stateMap.toMap());\n  for (  final Map.Entry<String,String> maxProp : maxValueProperties.entrySet()) {\n    String maxPropKey=maxProp.getKey().toLowerCase();\n    String fullyQualifiedMaxPropKey=getStateKey(tableName,maxPropKey,dbAdapter);\n    if (!statePropertyMap.containsKey(fullyQualifiedMaxPropKey)) {\n      String newMaxPropValue;\n      if (statePropertyMap.containsKey(maxPropKey)) {\n        newMaxPropValue=statePropertyMap.get(maxPropKey);\n      }\n else {\n        newMaxPropValue=maxProp.getValue();\n      }\n      statePropertyMap.put(fullyQualifiedMaxPropKey,newMaxPropValue);\n    }\n  }\n  String whereClause=null;\n  List<String> maxValueColumnNameList=StringUtils.isEmpty(maxValueColumnNames) ? new ArrayList<>(0) : Arrays.asList(maxValueColumnNames.split(\"\\\\s*,\\\\s*\"));\n  List<String> maxValueClauses=new ArrayList<>(maxValueColumnNameList.size());\n  String columnsClause=null;\n  List<String> maxValueSelectColumns=new ArrayList<>(maxValueColumnNameList.size() + 1);\n  maxValueSelectColumns.add(\"COUNT(*)\");\n  IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n    String colName=maxValueColumnNameList.get(index);\n    maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n    String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n    if (!StringUtils.isEmpty(maxValue)) {\n      if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n        super.setup(context,false,finalFileToProcess);\n      }\n      Integer type=getColumnType(tableName,colName,dbAdapter);\n      maxValueClauses.add(colName + (index == 0 ? \" > \" : \" >= \") + getLiteralByType(type,maxValue,dbAdapter.getName()));\n    }\n  }\n);\n  if (customWhereClause != null) {\n    maxValueClauses.add(\"(\" + customWhereClause + \")\");\n  }\n  whereClause=StringUtils.join(maxValueClauses,\" AND \");\n  columnsClause=StringUtils.join(maxValueSelectColumns,\", \");\n  final String selectQuery=dbAdapter.getSelectStatement(tableName,columnsClause,whereClause,null,null,null);\n  long rowCount=0;\n  try (final Connection con=dbcpService.getConnection(finalFileToProcess == null ? Collections.emptyMap() : finalFileToProcess.getAttributes());final Statement st=con.createStatement()){\n    final Integer queryTimeout=context.getProperty(QUERY_TIMEOUT).evaluateAttributeExpressions(fileToProcess).asTimePeriod(TimeUnit.SECONDS).intValue();\n    st.setQueryTimeout(queryTimeout);\n    logger.debug(\"Executing {}\",new Object[]{selectQuery});\n    ResultSet resultSet;\n    resultSet=st.executeQuery(selectQuery);\n    if (resultSet.next()) {\n      rowCount=resultSet.getLong(1);\n      ResultSetMetaData rsmd=resultSet.getMetaData();\n      for (int i=2; i <= rsmd.getColumnCount(); i++) {\n        String resultColumnName=(StringUtils.isNotEmpty(rsmd.getColumnLabel(i)) ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i)).toLowerCase();\n        String fullyQualifiedStateKey=getStateKey(tableName,resultColumnName,dbAdapter);\n        String resultColumnCurrentMax=statePropertyMap.get(fullyQualifiedStateKey);\n        if (StringUtils.isEmpty(resultColumnCurrentMax) && !isDynamicTableName) {\n          resultColumnCurrentMax=statePropertyMap.get(resultColumnName);\n        }\n        int type=rsmd.getColumnType(i);\n        if (isDynamicTableName) {\n          columnTypeMap.put(fullyQualifiedStateKey,type);\n        }\n        try {\n          String newMaxValue=getMaxValueFromRow(resultSet,i,type,resultColumnCurrentMax,dbAdapter.getName());\n          if (newMaxValue != null) {\n            statePropertyMap.put(fullyQualifiedStateKey,newMaxValue);\n          }\n        }\n catch (        ParseException|IOException pie) {\n          throw new ProcessException(pie);\n        }\n      }\n    }\n else {\n      throw new SQLException(\"No rows returned from metadata query: \" + selectQuery);\n    }\n    IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n      String colName=maxValueColumnNameList.get(index);\n      maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n      String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n      if (!StringUtils.isEmpty(maxValue)) {\n        if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n          super.setup(context,false,finalFileToProcess);\n        }\n        Integer type=getColumnType(tableName,colName,dbAdapter);\n        maxValueClauses.add(colName + \" <= \" + getLiteralByType(type,maxValue,dbAdapter.getName()));\n      }\n    }\n);\n    whereClause=StringUtils.join(maxValueClauses,\" AND \");\n    final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n    for (long i=0; i < numberOfFetches; i++) {\n      Long limit=partitionSize == 0 ? null : (long)partitionSize;\n      Long offset=partitionSize == 0 ? null : i * partitionSize;\n      final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n      final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n      FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n      sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n      if (columnNames != null) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n      }\n      if (StringUtils.isNotBlank(whereClause)) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n      }\n      if (StringUtils.isNotBlank(maxColumnNames)) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n      }\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n      if (partitionSize != 0) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n      }\n      session.transfer(sqlFlowFile,REL_SUCCESS);\n    }\n    if (fileToProcess != null) {\n      session.remove(fileToProcess);\n    }\n  }\n catch (  SQLException e) {\n    if (fileToProcess != null) {\n      logger.error(\"Unable to execute SQL select query {} due to {}, routing {} to failure\",new Object[]{selectQuery,e,fileToProcess});\n      fileToProcess=session.putAttribute(fileToProcess,\"generatetablefetch.sql.error\",e.getMessage());\n      session.transfer(fileToProcess,REL_FAILURE);\n    }\n else {\n      logger.error(\"Unable to execute SQL select query {} due to {}\",new Object[]{selectQuery,e});\n      throw new ProcessException(e);\n    }\n  }\n  session.commit();\n  try {\n    stateManager.setState(statePropertyMap,Scope.CLUSTER);\n  }\n catch (  IOException ioe) {\n    logger.error(\"{} failed to update State Manager, observed maximum values will not be recorded. \" + \"Also, any generated SQL statements may be duplicated.\",new Object[]{this,ioe});\n  }\n}\n catch (final ProcessException pe) {\n  Throwable t=(pe.getCause() == null ? pe : pe.getCause());\n  logger.error(\"Error during processing: {}\",new Object[]{t.getMessage()},t);\n  session.rollback();\n  context.yield();\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 1018,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 14819,
                        "startLineNumber": 173,
                        "startColumnNumber": 124,
                        "endLineNumber": 411,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (!isDynamicTableName && !isDynamicMaxValues && !setupComplete.get()) {\n    super.setup(context);\n  }\n  ProcessSession session=sessionFactory.createSession();\n  FlowFile fileToProcess=null;\n  if (context.hasIncomingConnection()) {\n    fileToProcess=session.get();\n    if (fileToProcess == null) {\n      return;\n    }\n  }\n  final ComponentLog logger=getLogger();\n  final DBCPService dbcpService=context.getProperty(DBCP_SERVICE).asControllerService(DBCPService.class);\n  final DatabaseAdapter dbAdapter=dbAdapters.get(context.getProperty(DB_TYPE).getValue());\n  final String tableName=context.getProperty(TABLE_NAME).evaluateAttributeExpressions(fileToProcess).getValue();\n  final String columnNames=context.getProperty(COLUMN_NAMES).evaluateAttributeExpressions(fileToProcess).getValue();\n  final String maxValueColumnNames=context.getProperty(MAX_VALUE_COLUMN_NAMES).evaluateAttributeExpressions(fileToProcess).getValue();\n  final int partitionSize=context.getProperty(PARTITION_SIZE).evaluateAttributeExpressions(fileToProcess).asInteger();\n  final String customWhereClause=context.getProperty(WHERE_CLAUSE).evaluateAttributeExpressions(fileToProcess).getValue();\n  final StateManager stateManager=context.getStateManager();\n  final StateMap stateMap;\n  FlowFile finalFileToProcess=fileToProcess;\n  try {\n    stateMap=stateManager.getState(Scope.CLUSTER);\n  }\n catch (  final IOException ioe) {\n    logger.error(\"Failed to retrieve observed maximum values from the State Manager. Will not perform \" + \"query until this is accomplished.\",ioe);\n    context.yield();\n    return;\n  }\n  try {\n    final Map<String,String> statePropertyMap=new HashMap<>(stateMap.toMap());\n    for (    final Map.Entry<String,String> maxProp : maxValueProperties.entrySet()) {\n      String maxPropKey=maxProp.getKey().toLowerCase();\n      String fullyQualifiedMaxPropKey=getStateKey(tableName,maxPropKey,dbAdapter);\n      if (!statePropertyMap.containsKey(fullyQualifiedMaxPropKey)) {\n        String newMaxPropValue;\n        if (statePropertyMap.containsKey(maxPropKey)) {\n          newMaxPropValue=statePropertyMap.get(maxPropKey);\n        }\n else {\n          newMaxPropValue=maxProp.getValue();\n        }\n        statePropertyMap.put(fullyQualifiedMaxPropKey,newMaxPropValue);\n      }\n    }\n    String whereClause=null;\n    List<String> maxValueColumnNameList=StringUtils.isEmpty(maxValueColumnNames) ? new ArrayList<>(0) : Arrays.asList(maxValueColumnNames.split(\"\\\\s*,\\\\s*\"));\n    List<String> maxValueClauses=new ArrayList<>(maxValueColumnNameList.size());\n    String columnsClause=null;\n    List<String> maxValueSelectColumns=new ArrayList<>(maxValueColumnNameList.size() + 1);\n    maxValueSelectColumns.add(\"COUNT(*)\");\n    IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n      String colName=maxValueColumnNameList.get(index);\n      maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n      String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n      if (!StringUtils.isEmpty(maxValue)) {\n        if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n          super.setup(context,false,finalFileToProcess);\n        }\n        Integer type=getColumnType(tableName,colName,dbAdapter);\n        maxValueClauses.add(colName + (index == 0 ? \" > \" : \" >= \") + getLiteralByType(type,maxValue,dbAdapter.getName()));\n      }\n    }\n);\n    if (customWhereClause != null) {\n      maxValueClauses.add(\"(\" + customWhereClause + \")\");\n    }\n    whereClause=StringUtils.join(maxValueClauses,\" AND \");\n    columnsClause=StringUtils.join(maxValueSelectColumns,\", \");\n    final String selectQuery=dbAdapter.getSelectStatement(tableName,columnsClause,whereClause,null,null,null);\n    long rowCount=0;\n    try (final Connection con=dbcpService.getConnection(finalFileToProcess == null ? Collections.emptyMap() : finalFileToProcess.getAttributes());final Statement st=con.createStatement()){\n      final Integer queryTimeout=context.getProperty(QUERY_TIMEOUT).evaluateAttributeExpressions(fileToProcess).asTimePeriod(TimeUnit.SECONDS).intValue();\n      st.setQueryTimeout(queryTimeout);\n      logger.debug(\"Executing {}\",new Object[]{selectQuery});\n      ResultSet resultSet;\n      resultSet=st.executeQuery(selectQuery);\n      if (resultSet.next()) {\n        rowCount=resultSet.getLong(1);\n        ResultSetMetaData rsmd=resultSet.getMetaData();\n        for (int i=2; i <= rsmd.getColumnCount(); i++) {\n          String resultColumnName=(StringUtils.isNotEmpty(rsmd.getColumnLabel(i)) ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i)).toLowerCase();\n          String fullyQualifiedStateKey=getStateKey(tableName,resultColumnName,dbAdapter);\n          String resultColumnCurrentMax=statePropertyMap.get(fullyQualifiedStateKey);\n          if (StringUtils.isEmpty(resultColumnCurrentMax) && !isDynamicTableName) {\n            resultColumnCurrentMax=statePropertyMap.get(resultColumnName);\n          }\n          int type=rsmd.getColumnType(i);\n          if (isDynamicTableName) {\n            columnTypeMap.put(fullyQualifiedStateKey,type);\n          }\n          try {\n            String newMaxValue=getMaxValueFromRow(resultSet,i,type,resultColumnCurrentMax,dbAdapter.getName());\n            if (newMaxValue != null) {\n              statePropertyMap.put(fullyQualifiedStateKey,newMaxValue);\n            }\n          }\n catch (          ParseException|IOException pie) {\n            throw new ProcessException(pie);\n          }\n        }\n      }\n else {\n        throw new SQLException(\"No rows returned from metadata query: \" + selectQuery);\n      }\n      IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n        String colName=maxValueColumnNameList.get(index);\n        maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n        String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n        if (!StringUtils.isEmpty(maxValue)) {\n          if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n            super.setup(context,false,finalFileToProcess);\n          }\n          Integer type=getColumnType(tableName,colName,dbAdapter);\n          maxValueClauses.add(colName + \" <= \" + getLiteralByType(type,maxValue,dbAdapter.getName()));\n        }\n      }\n);\n      whereClause=StringUtils.join(maxValueClauses,\" AND \");\n      final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n      for (long i=0; i < numberOfFetches; i++) {\n        Long limit=partitionSize == 0 ? null : (long)partitionSize;\n        Long offset=partitionSize == 0 ? null : i * partitionSize;\n        final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n        final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n        FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n        sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n        if (columnNames != null) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n        }\n        if (StringUtils.isNotBlank(whereClause)) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n        }\n        if (StringUtils.isNotBlank(maxColumnNames)) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n        }\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n        if (partitionSize != 0) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n        }\n        session.transfer(sqlFlowFile,REL_SUCCESS);\n      }\n      if (fileToProcess != null) {\n        session.remove(fileToProcess);\n      }\n    }\n catch (    SQLException e) {\n      if (fileToProcess != null) {\n        logger.error(\"Unable to execute SQL select query {} due to {}, routing {} to failure\",new Object[]{selectQuery,e,fileToProcess});\n        fileToProcess=session.putAttribute(fileToProcess,\"generatetablefetch.sql.error\",e.getMessage());\n        session.transfer(fileToProcess,REL_FAILURE);\n      }\n else {\n        logger.error(\"Unable to execute SQL select query {} due to {}\",new Object[]{selectQuery,e});\n        throw new ProcessException(e);\n      }\n    }\n    session.commit();\n    try {\n      stateManager.setState(statePropertyMap,Scope.CLUSTER);\n    }\n catch (    IOException ioe) {\n      logger.error(\"{} failed to update State Manager, observed maximum values will not be recorded. \" + \"Also, any generated SQL statements may be duplicated.\",new Object[]{this,ioe});\n    }\n  }\n catch (  final ProcessException pe) {\n    Throwable t=(pe.getCause() == null ? pe : pe.getCause());\n    logger.error(\"Error during processing: {}\",new Object[]{t.getMessage()},t);\n    session.rollback();\n    context.yield();\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 1229,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 14953,
                        "startLineNumber": 172,
                        "startColumnNumber": 4,
                        "endLineNumber": 411,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void onTrigger(final ProcessContext context,final ProcessSessionFactory sessionFactory) throws ProcessException {\n  if (!isDynamicTableName && !isDynamicMaxValues && !setupComplete.get()) {\n    super.setup(context);\n  }\n  ProcessSession session=sessionFactory.createSession();\n  FlowFile fileToProcess=null;\n  if (context.hasIncomingConnection()) {\n    fileToProcess=session.get();\n    if (fileToProcess == null) {\n      return;\n    }\n  }\n  final ComponentLog logger=getLogger();\n  final DBCPService dbcpService=context.getProperty(DBCP_SERVICE).asControllerService(DBCPService.class);\n  final DatabaseAdapter dbAdapter=dbAdapters.get(context.getProperty(DB_TYPE).getValue());\n  final String tableName=context.getProperty(TABLE_NAME).evaluateAttributeExpressions(fileToProcess).getValue();\n  final String columnNames=context.getProperty(COLUMN_NAMES).evaluateAttributeExpressions(fileToProcess).getValue();\n  final String maxValueColumnNames=context.getProperty(MAX_VALUE_COLUMN_NAMES).evaluateAttributeExpressions(fileToProcess).getValue();\n  final int partitionSize=context.getProperty(PARTITION_SIZE).evaluateAttributeExpressions(fileToProcess).asInteger();\n  final String customWhereClause=context.getProperty(WHERE_CLAUSE).evaluateAttributeExpressions(fileToProcess).getValue();\n  final StateManager stateManager=context.getStateManager();\n  final StateMap stateMap;\n  FlowFile finalFileToProcess=fileToProcess;\n  try {\n    stateMap=stateManager.getState(Scope.CLUSTER);\n  }\n catch (  final IOException ioe) {\n    logger.error(\"Failed to retrieve observed maximum values from the State Manager. Will not perform \" + \"query until this is accomplished.\",ioe);\n    context.yield();\n    return;\n  }\n  try {\n    final Map<String,String> statePropertyMap=new HashMap<>(stateMap.toMap());\n    for (    final Map.Entry<String,String> maxProp : maxValueProperties.entrySet()) {\n      String maxPropKey=maxProp.getKey().toLowerCase();\n      String fullyQualifiedMaxPropKey=getStateKey(tableName,maxPropKey,dbAdapter);\n      if (!statePropertyMap.containsKey(fullyQualifiedMaxPropKey)) {\n        String newMaxPropValue;\n        if (statePropertyMap.containsKey(maxPropKey)) {\n          newMaxPropValue=statePropertyMap.get(maxPropKey);\n        }\n else {\n          newMaxPropValue=maxProp.getValue();\n        }\n        statePropertyMap.put(fullyQualifiedMaxPropKey,newMaxPropValue);\n      }\n    }\n    String whereClause=null;\n    List<String> maxValueColumnNameList=StringUtils.isEmpty(maxValueColumnNames) ? new ArrayList<>(0) : Arrays.asList(maxValueColumnNames.split(\"\\\\s*,\\\\s*\"));\n    List<String> maxValueClauses=new ArrayList<>(maxValueColumnNameList.size());\n    String columnsClause=null;\n    List<String> maxValueSelectColumns=new ArrayList<>(maxValueColumnNameList.size() + 1);\n    maxValueSelectColumns.add(\"COUNT(*)\");\n    IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n      String colName=maxValueColumnNameList.get(index);\n      maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n      String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n      if (!StringUtils.isEmpty(maxValue)) {\n        if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n          super.setup(context,false,finalFileToProcess);\n        }\n        Integer type=getColumnType(tableName,colName,dbAdapter);\n        maxValueClauses.add(colName + (index == 0 ? \" > \" : \" >= \") + getLiteralByType(type,maxValue,dbAdapter.getName()));\n      }\n    }\n);\n    if (customWhereClause != null) {\n      maxValueClauses.add(\"(\" + customWhereClause + \")\");\n    }\n    whereClause=StringUtils.join(maxValueClauses,\" AND \");\n    columnsClause=StringUtils.join(maxValueSelectColumns,\", \");\n    final String selectQuery=dbAdapter.getSelectStatement(tableName,columnsClause,whereClause,null,null,null);\n    long rowCount=0;\n    try (final Connection con=dbcpService.getConnection(finalFileToProcess == null ? Collections.emptyMap() : finalFileToProcess.getAttributes());final Statement st=con.createStatement()){\n      final Integer queryTimeout=context.getProperty(QUERY_TIMEOUT).evaluateAttributeExpressions(fileToProcess).asTimePeriod(TimeUnit.SECONDS).intValue();\n      st.setQueryTimeout(queryTimeout);\n      logger.debug(\"Executing {}\",new Object[]{selectQuery});\n      ResultSet resultSet;\n      resultSet=st.executeQuery(selectQuery);\n      if (resultSet.next()) {\n        rowCount=resultSet.getLong(1);\n        ResultSetMetaData rsmd=resultSet.getMetaData();\n        for (int i=2; i <= rsmd.getColumnCount(); i++) {\n          String resultColumnName=(StringUtils.isNotEmpty(rsmd.getColumnLabel(i)) ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i)).toLowerCase();\n          String fullyQualifiedStateKey=getStateKey(tableName,resultColumnName,dbAdapter);\n          String resultColumnCurrentMax=statePropertyMap.get(fullyQualifiedStateKey);\n          if (StringUtils.isEmpty(resultColumnCurrentMax) && !isDynamicTableName) {\n            resultColumnCurrentMax=statePropertyMap.get(resultColumnName);\n          }\n          int type=rsmd.getColumnType(i);\n          if (isDynamicTableName) {\n            columnTypeMap.put(fullyQualifiedStateKey,type);\n          }\n          try {\n            String newMaxValue=getMaxValueFromRow(resultSet,i,type,resultColumnCurrentMax,dbAdapter.getName());\n            if (newMaxValue != null) {\n              statePropertyMap.put(fullyQualifiedStateKey,newMaxValue);\n            }\n          }\n catch (          ParseException|IOException pie) {\n            throw new ProcessException(pie);\n          }\n        }\n      }\n else {\n        throw new SQLException(\"No rows returned from metadata query: \" + selectQuery);\n      }\n      IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n        String colName=maxValueColumnNameList.get(index);\n        maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n        String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n        if (!StringUtils.isEmpty(maxValue)) {\n          if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n            super.setup(context,false,finalFileToProcess);\n          }\n          Integer type=getColumnType(tableName,colName,dbAdapter);\n          maxValueClauses.add(colName + \" <= \" + getLiteralByType(type,maxValue,dbAdapter.getName()));\n        }\n      }\n);\n      whereClause=StringUtils.join(maxValueClauses,\" AND \");\n      final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n      for (long i=0; i < numberOfFetches; i++) {\n        Long limit=partitionSize == 0 ? null : (long)partitionSize;\n        Long offset=partitionSize == 0 ? null : i * partitionSize;\n        final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n        final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n        FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n        sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n        if (columnNames != null) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n        }\n        if (StringUtils.isNotBlank(whereClause)) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n        }\n        if (StringUtils.isNotBlank(maxColumnNames)) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n        }\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n        if (partitionSize != 0) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n        }\n        session.transfer(sqlFlowFile,REL_SUCCESS);\n      }\n      if (fileToProcess != null) {\n        session.remove(fileToProcess);\n      }\n    }\n catch (    SQLException e) {\n      if (fileToProcess != null) {\n        logger.error(\"Unable to execute SQL select query {} due to {}, routing {} to failure\",new Object[]{selectQuery,e,fileToProcess});\n        fileToProcess=session.putAttribute(fileToProcess,\"generatetablefetch.sql.error\",e.getMessage());\n        session.transfer(fileToProcess,REL_FAILURE);\n      }\n else {\n        logger.error(\"Unable to execute SQL select query {} due to {}\",new Object[]{selectQuery,e});\n        throw new ProcessException(e);\n      }\n    }\n    session.commit();\n    try {\n      stateManager.setState(statePropertyMap,Scope.CLUSTER);\n    }\n catch (    IOException ioe) {\n      logger.error(\"{} failed to update State Manager, observed maximum values will not be recorded. \" + \"Also, any generated SQL statements may be duplicated.\",new Object[]{this,ioe});\n    }\n  }\n catch (  final ProcessException pe) {\n    Throwable t=(pe.getCause() == null ? pe : pe.getCause());\n    logger.error(\"Error during processing: {}\",new Object[]{t.getMessage()},t);\n    session.rollback();\n    context.yield();\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 1247,
                    "astHeight": 18
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 125,
                    "startLineNumber": 353,
                    "startColumnNumber": 16,
                    "endLineNumber": 353,
                    "endColumnNumber": 141
                },
                "nodeContext": "final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 25,
                "astHeight": 9
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "0",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 353,
                "startColumnNumber": 134,
                "endLineNumber": 353,
                "endColumnNumber": 135
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
                    "nodePosition": {
                        "charLength": 37,
                        "startLineNumber": 353,
                        "startColumnNumber": 102,
                        "endLineNumber": 353,
                        "endColumnNumber": 139
                    },
                    "nodeContext": "rowCount % partitionSize == 0 ? 0 : 1",
                    "nodeType": "ConditionalExpression",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 39,
                        "startLineNumber": 353,
                        "startColumnNumber": 101,
                        "endLineNumber": 353,
                        "endColumnNumber": 140
                    },
                    "nodeContext": "(rowCount % partitionSize == 0 ? 0 : 1)",
                    "nodeType": "ParenthesizedExpression",
                    "astNodeNumber": 9,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,elseExpression]",
                    "nodePosition": {
                        "charLength": 68,
                        "startLineNumber": 353,
                        "startColumnNumber": 72,
                        "endLineNumber": 353,
                        "endColumnNumber": 140
                    },
                    "nodeContext": "(rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1)",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 14,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 95,
                        "startLineNumber": 353,
                        "startColumnNumber": 45,
                        "endLineNumber": 353,
                        "endColumnNumber": 140
                    },
                    "nodeContext": "(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1)",
                    "nodeType": "ConditionalExpression",
                    "astNodeNumber": 20,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 113,
                        "startLineNumber": 353,
                        "startColumnNumber": 27,
                        "endLineNumber": 353,
                        "endColumnNumber": 140
                    },
                    "nodeContext": "numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1)",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 22,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 125,
                        "startLineNumber": 353,
                        "startColumnNumber": 16,
                        "endLineNumber": 353,
                        "endColumnNumber": 141
                    },
                    "nodeContext": "final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 25,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 6723,
                        "startLineNumber": 281,
                        "startColumnNumber": 61,
                        "endLineNumber": 383,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  final Integer queryTimeout=context.getProperty(QUERY_TIMEOUT).evaluateAttributeExpressions(fileToProcess).asTimePeriod(TimeUnit.SECONDS).intValue();\n  st.setQueryTimeout(queryTimeout);\n  logger.debug(\"Executing {}\",new Object[]{selectQuery});\n  ResultSet resultSet;\n  resultSet=st.executeQuery(selectQuery);\n  if (resultSet.next()) {\n    rowCount=resultSet.getLong(1);\n    ResultSetMetaData rsmd=resultSet.getMetaData();\n    for (int i=2; i <= rsmd.getColumnCount(); i++) {\n      String resultColumnName=(StringUtils.isNotEmpty(rsmd.getColumnLabel(i)) ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i)).toLowerCase();\n      String fullyQualifiedStateKey=getStateKey(tableName,resultColumnName,dbAdapter);\n      String resultColumnCurrentMax=statePropertyMap.get(fullyQualifiedStateKey);\n      if (StringUtils.isEmpty(resultColumnCurrentMax) && !isDynamicTableName) {\n        resultColumnCurrentMax=statePropertyMap.get(resultColumnName);\n      }\n      int type=rsmd.getColumnType(i);\n      if (isDynamicTableName) {\n        columnTypeMap.put(fullyQualifiedStateKey,type);\n      }\n      try {\n        String newMaxValue=getMaxValueFromRow(resultSet,i,type,resultColumnCurrentMax,dbAdapter.getName());\n        if (newMaxValue != null) {\n          statePropertyMap.put(fullyQualifiedStateKey,newMaxValue);\n        }\n      }\n catch (      ParseException|IOException pie) {\n        throw new ProcessException(pie);\n      }\n    }\n  }\n else {\n    throw new SQLException(\"No rows returned from metadata query: \" + selectQuery);\n  }\n  IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n    String colName=maxValueColumnNameList.get(index);\n    maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n    String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n    if (!StringUtils.isEmpty(maxValue)) {\n      if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n        super.setup(context,false,finalFileToProcess);\n      }\n      Integer type=getColumnType(tableName,colName,dbAdapter);\n      maxValueClauses.add(colName + \" <= \" + getLiteralByType(type,maxValue,dbAdapter.getName()));\n    }\n  }\n);\n  whereClause=StringUtils.join(maxValueClauses,\" AND \");\n  final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n  for (long i=0; i < numberOfFetches; i++) {\n    Long limit=partitionSize == 0 ? null : (long)partitionSize;\n    Long offset=partitionSize == 0 ? null : i * partitionSize;\n    final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n    final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n    FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n    sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n    sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n    if (columnNames != null) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n    }\n    if (StringUtils.isNotBlank(whereClause)) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n    }\n    if (StringUtils.isNotBlank(maxColumnNames)) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n    }\n    sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n    if (partitionSize != 0) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n    }\n    session.transfer(sqlFlowFile,REL_SUCCESS);\n  }\n  if (fileToProcess != null) {\n    session.remove(fileToProcess);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 530,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 7563,
                        "startLineNumber": 280,
                        "startColumnNumber": 12,
                        "endLineNumber": 393,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "try (final Connection con=dbcpService.getConnection(finalFileToProcess == null ? Collections.emptyMap() : finalFileToProcess.getAttributes());final Statement st=con.createStatement()){\n  final Integer queryTimeout=context.getProperty(QUERY_TIMEOUT).evaluateAttributeExpressions(fileToProcess).asTimePeriod(TimeUnit.SECONDS).intValue();\n  st.setQueryTimeout(queryTimeout);\n  logger.debug(\"Executing {}\",new Object[]{selectQuery});\n  ResultSet resultSet;\n  resultSet=st.executeQuery(selectQuery);\n  if (resultSet.next()) {\n    rowCount=resultSet.getLong(1);\n    ResultSetMetaData rsmd=resultSet.getMetaData();\n    for (int i=2; i <= rsmd.getColumnCount(); i++) {\n      String resultColumnName=(StringUtils.isNotEmpty(rsmd.getColumnLabel(i)) ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i)).toLowerCase();\n      String fullyQualifiedStateKey=getStateKey(tableName,resultColumnName,dbAdapter);\n      String resultColumnCurrentMax=statePropertyMap.get(fullyQualifiedStateKey);\n      if (StringUtils.isEmpty(resultColumnCurrentMax) && !isDynamicTableName) {\n        resultColumnCurrentMax=statePropertyMap.get(resultColumnName);\n      }\n      int type=rsmd.getColumnType(i);\n      if (isDynamicTableName) {\n        columnTypeMap.put(fullyQualifiedStateKey,type);\n      }\n      try {\n        String newMaxValue=getMaxValueFromRow(resultSet,i,type,resultColumnCurrentMax,dbAdapter.getName());\n        if (newMaxValue != null) {\n          statePropertyMap.put(fullyQualifiedStateKey,newMaxValue);\n        }\n      }\n catch (      ParseException|IOException pie) {\n        throw new ProcessException(pie);\n      }\n    }\n  }\n else {\n    throw new SQLException(\"No rows returned from metadata query: \" + selectQuery);\n  }\n  IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n    String colName=maxValueColumnNameList.get(index);\n    maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n    String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n    if (!StringUtils.isEmpty(maxValue)) {\n      if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n        super.setup(context,false,finalFileToProcess);\n      }\n      Integer type=getColumnType(tableName,colName,dbAdapter);\n      maxValueClauses.add(colName + \" <= \" + getLiteralByType(type,maxValue,dbAdapter.getName()));\n    }\n  }\n);\n  whereClause=StringUtils.join(maxValueClauses,\" AND \");\n  final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n  for (long i=0; i < numberOfFetches; i++) {\n    Long limit=partitionSize == 0 ? null : (long)partitionSize;\n    Long offset=partitionSize == 0 ? null : i * partitionSize;\n    final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n    final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n    FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n    sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n    sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n    if (columnNames != null) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n    }\n    if (StringUtils.isNotBlank(whereClause)) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n    }\n    if (StringUtils.isNotBlank(maxColumnNames)) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n    }\n    sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n    if (partitionSize != 0) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n    }\n    session.transfer(sqlFlowFile,REL_SUCCESS);\n  }\n  if (fileToProcess != null) {\n    session.remove(fileToProcess);\n  }\n}\n catch (SQLException e) {\n  if (fileToProcess != null) {\n    logger.error(\"Unable to execute SQL select query {} due to {}, routing {} to failure\",new Object[]{selectQuery,e,fileToProcess});\n    fileToProcess=session.putAttribute(fileToProcess,\"generatetablefetch.sql.error\",e.getMessage());\n    session.transfer(fileToProcess,REL_FAILURE);\n  }\n else {\n    logger.error(\"Unable to execute SQL select query {} due to {}\",new Object[]{selectQuery,e});\n    throw new ProcessException(e);\n  }\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 620,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 12385,
                        "startLineNumber": 213,
                        "startColumnNumber": 12,
                        "endLineNumber": 404,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final Map<String,String> statePropertyMap=new HashMap<>(stateMap.toMap());\n  for (  final Map.Entry<String,String> maxProp : maxValueProperties.entrySet()) {\n    String maxPropKey=maxProp.getKey().toLowerCase();\n    String fullyQualifiedMaxPropKey=getStateKey(tableName,maxPropKey,dbAdapter);\n    if (!statePropertyMap.containsKey(fullyQualifiedMaxPropKey)) {\n      String newMaxPropValue;\n      if (statePropertyMap.containsKey(maxPropKey)) {\n        newMaxPropValue=statePropertyMap.get(maxPropKey);\n      }\n else {\n        newMaxPropValue=maxProp.getValue();\n      }\n      statePropertyMap.put(fullyQualifiedMaxPropKey,newMaxPropValue);\n    }\n  }\n  String whereClause=null;\n  List<String> maxValueColumnNameList=StringUtils.isEmpty(maxValueColumnNames) ? new ArrayList<>(0) : Arrays.asList(maxValueColumnNames.split(\"\\\\s*,\\\\s*\"));\n  List<String> maxValueClauses=new ArrayList<>(maxValueColumnNameList.size());\n  String columnsClause=null;\n  List<String> maxValueSelectColumns=new ArrayList<>(maxValueColumnNameList.size() + 1);\n  maxValueSelectColumns.add(\"COUNT(*)\");\n  IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n    String colName=maxValueColumnNameList.get(index);\n    maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n    String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n    if (!StringUtils.isEmpty(maxValue)) {\n      if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n        super.setup(context,false,finalFileToProcess);\n      }\n      Integer type=getColumnType(tableName,colName,dbAdapter);\n      maxValueClauses.add(colName + (index == 0 ? \" > \" : \" >= \") + getLiteralByType(type,maxValue,dbAdapter.getName()));\n    }\n  }\n);\n  if (customWhereClause != null) {\n    maxValueClauses.add(\"(\" + customWhereClause + \")\");\n  }\n  whereClause=StringUtils.join(maxValueClauses,\" AND \");\n  columnsClause=StringUtils.join(maxValueSelectColumns,\", \");\n  final String selectQuery=dbAdapter.getSelectStatement(tableName,columnsClause,whereClause,null,null,null);\n  long rowCount=0;\n  try (final Connection con=dbcpService.getConnection(finalFileToProcess == null ? Collections.emptyMap() : finalFileToProcess.getAttributes());final Statement st=con.createStatement()){\n    final Integer queryTimeout=context.getProperty(QUERY_TIMEOUT).evaluateAttributeExpressions(fileToProcess).asTimePeriod(TimeUnit.SECONDS).intValue();\n    st.setQueryTimeout(queryTimeout);\n    logger.debug(\"Executing {}\",new Object[]{selectQuery});\n    ResultSet resultSet;\n    resultSet=st.executeQuery(selectQuery);\n    if (resultSet.next()) {\n      rowCount=resultSet.getLong(1);\n      ResultSetMetaData rsmd=resultSet.getMetaData();\n      for (int i=2; i <= rsmd.getColumnCount(); i++) {\n        String resultColumnName=(StringUtils.isNotEmpty(rsmd.getColumnLabel(i)) ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i)).toLowerCase();\n        String fullyQualifiedStateKey=getStateKey(tableName,resultColumnName,dbAdapter);\n        String resultColumnCurrentMax=statePropertyMap.get(fullyQualifiedStateKey);\n        if (StringUtils.isEmpty(resultColumnCurrentMax) && !isDynamicTableName) {\n          resultColumnCurrentMax=statePropertyMap.get(resultColumnName);\n        }\n        int type=rsmd.getColumnType(i);\n        if (isDynamicTableName) {\n          columnTypeMap.put(fullyQualifiedStateKey,type);\n        }\n        try {\n          String newMaxValue=getMaxValueFromRow(resultSet,i,type,resultColumnCurrentMax,dbAdapter.getName());\n          if (newMaxValue != null) {\n            statePropertyMap.put(fullyQualifiedStateKey,newMaxValue);\n          }\n        }\n catch (        ParseException|IOException pie) {\n          throw new ProcessException(pie);\n        }\n      }\n    }\n else {\n      throw new SQLException(\"No rows returned from metadata query: \" + selectQuery);\n    }\n    IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n      String colName=maxValueColumnNameList.get(index);\n      maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n      String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n      if (!StringUtils.isEmpty(maxValue)) {\n        if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n          super.setup(context,false,finalFileToProcess);\n        }\n        Integer type=getColumnType(tableName,colName,dbAdapter);\n        maxValueClauses.add(colName + \" <= \" + getLiteralByType(type,maxValue,dbAdapter.getName()));\n      }\n    }\n);\n    whereClause=StringUtils.join(maxValueClauses,\" AND \");\n    final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n    for (long i=0; i < numberOfFetches; i++) {\n      Long limit=partitionSize == 0 ? null : (long)partitionSize;\n      Long offset=partitionSize == 0 ? null : i * partitionSize;\n      final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n      final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n      FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n      sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n      if (columnNames != null) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n      }\n      if (StringUtils.isNotBlank(whereClause)) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n      }\n      if (StringUtils.isNotBlank(maxColumnNames)) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n      }\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n      if (partitionSize != 0) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n      }\n      session.transfer(sqlFlowFile,REL_SUCCESS);\n    }\n    if (fileToProcess != null) {\n      session.remove(fileToProcess);\n    }\n  }\n catch (  SQLException e) {\n    if (fileToProcess != null) {\n      logger.error(\"Unable to execute SQL select query {} due to {}, routing {} to failure\",new Object[]{selectQuery,e,fileToProcess});\n      fileToProcess=session.putAttribute(fileToProcess,\"generatetablefetch.sql.error\",e.getMessage());\n      session.transfer(fileToProcess,REL_FAILURE);\n    }\n else {\n      logger.error(\"Unable to execute SQL select query {} due to {}\",new Object[]{selectQuery,e});\n      throw new ProcessException(e);\n    }\n  }\n  session.commit();\n  try {\n    stateManager.setState(statePropertyMap,Scope.CLUSTER);\n  }\n catch (  IOException ioe) {\n    logger.error(\"{} failed to update State Manager, observed maximum values will not be recorded. \" + \"Also, any generated SQL statements may be duplicated.\",new Object[]{this,ioe});\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 971,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 12730,
                        "startLineNumber": 213,
                        "startColumnNumber": 8,
                        "endLineNumber": 410,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  final Map<String,String> statePropertyMap=new HashMap<>(stateMap.toMap());\n  for (  final Map.Entry<String,String> maxProp : maxValueProperties.entrySet()) {\n    String maxPropKey=maxProp.getKey().toLowerCase();\n    String fullyQualifiedMaxPropKey=getStateKey(tableName,maxPropKey,dbAdapter);\n    if (!statePropertyMap.containsKey(fullyQualifiedMaxPropKey)) {\n      String newMaxPropValue;\n      if (statePropertyMap.containsKey(maxPropKey)) {\n        newMaxPropValue=statePropertyMap.get(maxPropKey);\n      }\n else {\n        newMaxPropValue=maxProp.getValue();\n      }\n      statePropertyMap.put(fullyQualifiedMaxPropKey,newMaxPropValue);\n    }\n  }\n  String whereClause=null;\n  List<String> maxValueColumnNameList=StringUtils.isEmpty(maxValueColumnNames) ? new ArrayList<>(0) : Arrays.asList(maxValueColumnNames.split(\"\\\\s*,\\\\s*\"));\n  List<String> maxValueClauses=new ArrayList<>(maxValueColumnNameList.size());\n  String columnsClause=null;\n  List<String> maxValueSelectColumns=new ArrayList<>(maxValueColumnNameList.size() + 1);\n  maxValueSelectColumns.add(\"COUNT(*)\");\n  IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n    String colName=maxValueColumnNameList.get(index);\n    maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n    String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n    if (!StringUtils.isEmpty(maxValue)) {\n      if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n        super.setup(context,false,finalFileToProcess);\n      }\n      Integer type=getColumnType(tableName,colName,dbAdapter);\n      maxValueClauses.add(colName + (index == 0 ? \" > \" : \" >= \") + getLiteralByType(type,maxValue,dbAdapter.getName()));\n    }\n  }\n);\n  if (customWhereClause != null) {\n    maxValueClauses.add(\"(\" + customWhereClause + \")\");\n  }\n  whereClause=StringUtils.join(maxValueClauses,\" AND \");\n  columnsClause=StringUtils.join(maxValueSelectColumns,\", \");\n  final String selectQuery=dbAdapter.getSelectStatement(tableName,columnsClause,whereClause,null,null,null);\n  long rowCount=0;\n  try (final Connection con=dbcpService.getConnection(finalFileToProcess == null ? Collections.emptyMap() : finalFileToProcess.getAttributes());final Statement st=con.createStatement()){\n    final Integer queryTimeout=context.getProperty(QUERY_TIMEOUT).evaluateAttributeExpressions(fileToProcess).asTimePeriod(TimeUnit.SECONDS).intValue();\n    st.setQueryTimeout(queryTimeout);\n    logger.debug(\"Executing {}\",new Object[]{selectQuery});\n    ResultSet resultSet;\n    resultSet=st.executeQuery(selectQuery);\n    if (resultSet.next()) {\n      rowCount=resultSet.getLong(1);\n      ResultSetMetaData rsmd=resultSet.getMetaData();\n      for (int i=2; i <= rsmd.getColumnCount(); i++) {\n        String resultColumnName=(StringUtils.isNotEmpty(rsmd.getColumnLabel(i)) ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i)).toLowerCase();\n        String fullyQualifiedStateKey=getStateKey(tableName,resultColumnName,dbAdapter);\n        String resultColumnCurrentMax=statePropertyMap.get(fullyQualifiedStateKey);\n        if (StringUtils.isEmpty(resultColumnCurrentMax) && !isDynamicTableName) {\n          resultColumnCurrentMax=statePropertyMap.get(resultColumnName);\n        }\n        int type=rsmd.getColumnType(i);\n        if (isDynamicTableName) {\n          columnTypeMap.put(fullyQualifiedStateKey,type);\n        }\n        try {\n          String newMaxValue=getMaxValueFromRow(resultSet,i,type,resultColumnCurrentMax,dbAdapter.getName());\n          if (newMaxValue != null) {\n            statePropertyMap.put(fullyQualifiedStateKey,newMaxValue);\n          }\n        }\n catch (        ParseException|IOException pie) {\n          throw new ProcessException(pie);\n        }\n      }\n    }\n else {\n      throw new SQLException(\"No rows returned from metadata query: \" + selectQuery);\n    }\n    IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n      String colName=maxValueColumnNameList.get(index);\n      maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n      String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n      if (!StringUtils.isEmpty(maxValue)) {\n        if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n          super.setup(context,false,finalFileToProcess);\n        }\n        Integer type=getColumnType(tableName,colName,dbAdapter);\n        maxValueClauses.add(colName + \" <= \" + getLiteralByType(type,maxValue,dbAdapter.getName()));\n      }\n    }\n);\n    whereClause=StringUtils.join(maxValueClauses,\" AND \");\n    final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n    for (long i=0; i < numberOfFetches; i++) {\n      Long limit=partitionSize == 0 ? null : (long)partitionSize;\n      Long offset=partitionSize == 0 ? null : i * partitionSize;\n      final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n      final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n      FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n      sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n      if (columnNames != null) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n      }\n      if (StringUtils.isNotBlank(whereClause)) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n      }\n      if (StringUtils.isNotBlank(maxColumnNames)) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n      }\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n      if (partitionSize != 0) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n      }\n      session.transfer(sqlFlowFile,REL_SUCCESS);\n    }\n    if (fileToProcess != null) {\n      session.remove(fileToProcess);\n    }\n  }\n catch (  SQLException e) {\n    if (fileToProcess != null) {\n      logger.error(\"Unable to execute SQL select query {} due to {}, routing {} to failure\",new Object[]{selectQuery,e,fileToProcess});\n      fileToProcess=session.putAttribute(fileToProcess,\"generatetablefetch.sql.error\",e.getMessage());\n      session.transfer(fileToProcess,REL_FAILURE);\n    }\n else {\n      logger.error(\"Unable to execute SQL select query {} due to {}\",new Object[]{selectQuery,e});\n      throw new ProcessException(e);\n    }\n  }\n  session.commit();\n  try {\n    stateManager.setState(statePropertyMap,Scope.CLUSTER);\n  }\n catch (  IOException ioe) {\n    logger.error(\"{} failed to update State Manager, observed maximum values will not be recorded. \" + \"Also, any generated SQL statements may be duplicated.\",new Object[]{this,ioe});\n  }\n}\n catch (final ProcessException pe) {\n  Throwable t=(pe.getCause() == null ? pe : pe.getCause());\n  logger.error(\"Error during processing: {}\",new Object[]{t.getMessage()},t);\n  session.rollback();\n  context.yield();\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 1018,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 14819,
                        "startLineNumber": 173,
                        "startColumnNumber": 124,
                        "endLineNumber": 411,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (!isDynamicTableName && !isDynamicMaxValues && !setupComplete.get()) {\n    super.setup(context);\n  }\n  ProcessSession session=sessionFactory.createSession();\n  FlowFile fileToProcess=null;\n  if (context.hasIncomingConnection()) {\n    fileToProcess=session.get();\n    if (fileToProcess == null) {\n      return;\n    }\n  }\n  final ComponentLog logger=getLogger();\n  final DBCPService dbcpService=context.getProperty(DBCP_SERVICE).asControllerService(DBCPService.class);\n  final DatabaseAdapter dbAdapter=dbAdapters.get(context.getProperty(DB_TYPE).getValue());\n  final String tableName=context.getProperty(TABLE_NAME).evaluateAttributeExpressions(fileToProcess).getValue();\n  final String columnNames=context.getProperty(COLUMN_NAMES).evaluateAttributeExpressions(fileToProcess).getValue();\n  final String maxValueColumnNames=context.getProperty(MAX_VALUE_COLUMN_NAMES).evaluateAttributeExpressions(fileToProcess).getValue();\n  final int partitionSize=context.getProperty(PARTITION_SIZE).evaluateAttributeExpressions(fileToProcess).asInteger();\n  final String customWhereClause=context.getProperty(WHERE_CLAUSE).evaluateAttributeExpressions(fileToProcess).getValue();\n  final StateManager stateManager=context.getStateManager();\n  final StateMap stateMap;\n  FlowFile finalFileToProcess=fileToProcess;\n  try {\n    stateMap=stateManager.getState(Scope.CLUSTER);\n  }\n catch (  final IOException ioe) {\n    logger.error(\"Failed to retrieve observed maximum values from the State Manager. Will not perform \" + \"query until this is accomplished.\",ioe);\n    context.yield();\n    return;\n  }\n  try {\n    final Map<String,String> statePropertyMap=new HashMap<>(stateMap.toMap());\n    for (    final Map.Entry<String,String> maxProp : maxValueProperties.entrySet()) {\n      String maxPropKey=maxProp.getKey().toLowerCase();\n      String fullyQualifiedMaxPropKey=getStateKey(tableName,maxPropKey,dbAdapter);\n      if (!statePropertyMap.containsKey(fullyQualifiedMaxPropKey)) {\n        String newMaxPropValue;\n        if (statePropertyMap.containsKey(maxPropKey)) {\n          newMaxPropValue=statePropertyMap.get(maxPropKey);\n        }\n else {\n          newMaxPropValue=maxProp.getValue();\n        }\n        statePropertyMap.put(fullyQualifiedMaxPropKey,newMaxPropValue);\n      }\n    }\n    String whereClause=null;\n    List<String> maxValueColumnNameList=StringUtils.isEmpty(maxValueColumnNames) ? new ArrayList<>(0) : Arrays.asList(maxValueColumnNames.split(\"\\\\s*,\\\\s*\"));\n    List<String> maxValueClauses=new ArrayList<>(maxValueColumnNameList.size());\n    String columnsClause=null;\n    List<String> maxValueSelectColumns=new ArrayList<>(maxValueColumnNameList.size() + 1);\n    maxValueSelectColumns.add(\"COUNT(*)\");\n    IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n      String colName=maxValueColumnNameList.get(index);\n      maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n      String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n      if (!StringUtils.isEmpty(maxValue)) {\n        if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n          super.setup(context,false,finalFileToProcess);\n        }\n        Integer type=getColumnType(tableName,colName,dbAdapter);\n        maxValueClauses.add(colName + (index == 0 ? \" > \" : \" >= \") + getLiteralByType(type,maxValue,dbAdapter.getName()));\n      }\n    }\n);\n    if (customWhereClause != null) {\n      maxValueClauses.add(\"(\" + customWhereClause + \")\");\n    }\n    whereClause=StringUtils.join(maxValueClauses,\" AND \");\n    columnsClause=StringUtils.join(maxValueSelectColumns,\", \");\n    final String selectQuery=dbAdapter.getSelectStatement(tableName,columnsClause,whereClause,null,null,null);\n    long rowCount=0;\n    try (final Connection con=dbcpService.getConnection(finalFileToProcess == null ? Collections.emptyMap() : finalFileToProcess.getAttributes());final Statement st=con.createStatement()){\n      final Integer queryTimeout=context.getProperty(QUERY_TIMEOUT).evaluateAttributeExpressions(fileToProcess).asTimePeriod(TimeUnit.SECONDS).intValue();\n      st.setQueryTimeout(queryTimeout);\n      logger.debug(\"Executing {}\",new Object[]{selectQuery});\n      ResultSet resultSet;\n      resultSet=st.executeQuery(selectQuery);\n      if (resultSet.next()) {\n        rowCount=resultSet.getLong(1);\n        ResultSetMetaData rsmd=resultSet.getMetaData();\n        for (int i=2; i <= rsmd.getColumnCount(); i++) {\n          String resultColumnName=(StringUtils.isNotEmpty(rsmd.getColumnLabel(i)) ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i)).toLowerCase();\n          String fullyQualifiedStateKey=getStateKey(tableName,resultColumnName,dbAdapter);\n          String resultColumnCurrentMax=statePropertyMap.get(fullyQualifiedStateKey);\n          if (StringUtils.isEmpty(resultColumnCurrentMax) && !isDynamicTableName) {\n            resultColumnCurrentMax=statePropertyMap.get(resultColumnName);\n          }\n          int type=rsmd.getColumnType(i);\n          if (isDynamicTableName) {\n            columnTypeMap.put(fullyQualifiedStateKey,type);\n          }\n          try {\n            String newMaxValue=getMaxValueFromRow(resultSet,i,type,resultColumnCurrentMax,dbAdapter.getName());\n            if (newMaxValue != null) {\n              statePropertyMap.put(fullyQualifiedStateKey,newMaxValue);\n            }\n          }\n catch (          ParseException|IOException pie) {\n            throw new ProcessException(pie);\n          }\n        }\n      }\n else {\n        throw new SQLException(\"No rows returned from metadata query: \" + selectQuery);\n      }\n      IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n        String colName=maxValueColumnNameList.get(index);\n        maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n        String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n        if (!StringUtils.isEmpty(maxValue)) {\n          if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n            super.setup(context,false,finalFileToProcess);\n          }\n          Integer type=getColumnType(tableName,colName,dbAdapter);\n          maxValueClauses.add(colName + \" <= \" + getLiteralByType(type,maxValue,dbAdapter.getName()));\n        }\n      }\n);\n      whereClause=StringUtils.join(maxValueClauses,\" AND \");\n      final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n      for (long i=0; i < numberOfFetches; i++) {\n        Long limit=partitionSize == 0 ? null : (long)partitionSize;\n        Long offset=partitionSize == 0 ? null : i * partitionSize;\n        final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n        final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n        FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n        sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n        if (columnNames != null) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n        }\n        if (StringUtils.isNotBlank(whereClause)) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n        }\n        if (StringUtils.isNotBlank(maxColumnNames)) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n        }\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n        if (partitionSize != 0) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n        }\n        session.transfer(sqlFlowFile,REL_SUCCESS);\n      }\n      if (fileToProcess != null) {\n        session.remove(fileToProcess);\n      }\n    }\n catch (    SQLException e) {\n      if (fileToProcess != null) {\n        logger.error(\"Unable to execute SQL select query {} due to {}, routing {} to failure\",new Object[]{selectQuery,e,fileToProcess});\n        fileToProcess=session.putAttribute(fileToProcess,\"generatetablefetch.sql.error\",e.getMessage());\n        session.transfer(fileToProcess,REL_FAILURE);\n      }\n else {\n        logger.error(\"Unable to execute SQL select query {} due to {}\",new Object[]{selectQuery,e});\n        throw new ProcessException(e);\n      }\n    }\n    session.commit();\n    try {\n      stateManager.setState(statePropertyMap,Scope.CLUSTER);\n    }\n catch (    IOException ioe) {\n      logger.error(\"{} failed to update State Manager, observed maximum values will not be recorded. \" + \"Also, any generated SQL statements may be duplicated.\",new Object[]{this,ioe});\n    }\n  }\n catch (  final ProcessException pe) {\n    Throwable t=(pe.getCause() == null ? pe : pe.getCause());\n    logger.error(\"Error during processing: {}\",new Object[]{t.getMessage()},t);\n    session.rollback();\n    context.yield();\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 1229,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 14953,
                        "startLineNumber": 172,
                        "startColumnNumber": 4,
                        "endLineNumber": 411,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void onTrigger(final ProcessContext context,final ProcessSessionFactory sessionFactory) throws ProcessException {\n  if (!isDynamicTableName && !isDynamicMaxValues && !setupComplete.get()) {\n    super.setup(context);\n  }\n  ProcessSession session=sessionFactory.createSession();\n  FlowFile fileToProcess=null;\n  if (context.hasIncomingConnection()) {\n    fileToProcess=session.get();\n    if (fileToProcess == null) {\n      return;\n    }\n  }\n  final ComponentLog logger=getLogger();\n  final DBCPService dbcpService=context.getProperty(DBCP_SERVICE).asControllerService(DBCPService.class);\n  final DatabaseAdapter dbAdapter=dbAdapters.get(context.getProperty(DB_TYPE).getValue());\n  final String tableName=context.getProperty(TABLE_NAME).evaluateAttributeExpressions(fileToProcess).getValue();\n  final String columnNames=context.getProperty(COLUMN_NAMES).evaluateAttributeExpressions(fileToProcess).getValue();\n  final String maxValueColumnNames=context.getProperty(MAX_VALUE_COLUMN_NAMES).evaluateAttributeExpressions(fileToProcess).getValue();\n  final int partitionSize=context.getProperty(PARTITION_SIZE).evaluateAttributeExpressions(fileToProcess).asInteger();\n  final String customWhereClause=context.getProperty(WHERE_CLAUSE).evaluateAttributeExpressions(fileToProcess).getValue();\n  final StateManager stateManager=context.getStateManager();\n  final StateMap stateMap;\n  FlowFile finalFileToProcess=fileToProcess;\n  try {\n    stateMap=stateManager.getState(Scope.CLUSTER);\n  }\n catch (  final IOException ioe) {\n    logger.error(\"Failed to retrieve observed maximum values from the State Manager. Will not perform \" + \"query until this is accomplished.\",ioe);\n    context.yield();\n    return;\n  }\n  try {\n    final Map<String,String> statePropertyMap=new HashMap<>(stateMap.toMap());\n    for (    final Map.Entry<String,String> maxProp : maxValueProperties.entrySet()) {\n      String maxPropKey=maxProp.getKey().toLowerCase();\n      String fullyQualifiedMaxPropKey=getStateKey(tableName,maxPropKey,dbAdapter);\n      if (!statePropertyMap.containsKey(fullyQualifiedMaxPropKey)) {\n        String newMaxPropValue;\n        if (statePropertyMap.containsKey(maxPropKey)) {\n          newMaxPropValue=statePropertyMap.get(maxPropKey);\n        }\n else {\n          newMaxPropValue=maxProp.getValue();\n        }\n        statePropertyMap.put(fullyQualifiedMaxPropKey,newMaxPropValue);\n      }\n    }\n    String whereClause=null;\n    List<String> maxValueColumnNameList=StringUtils.isEmpty(maxValueColumnNames) ? new ArrayList<>(0) : Arrays.asList(maxValueColumnNames.split(\"\\\\s*,\\\\s*\"));\n    List<String> maxValueClauses=new ArrayList<>(maxValueColumnNameList.size());\n    String columnsClause=null;\n    List<String> maxValueSelectColumns=new ArrayList<>(maxValueColumnNameList.size() + 1);\n    maxValueSelectColumns.add(\"COUNT(*)\");\n    IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n      String colName=maxValueColumnNameList.get(index);\n      maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n      String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n      if (!StringUtils.isEmpty(maxValue)) {\n        if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n          super.setup(context,false,finalFileToProcess);\n        }\n        Integer type=getColumnType(tableName,colName,dbAdapter);\n        maxValueClauses.add(colName + (index == 0 ? \" > \" : \" >= \") + getLiteralByType(type,maxValue,dbAdapter.getName()));\n      }\n    }\n);\n    if (customWhereClause != null) {\n      maxValueClauses.add(\"(\" + customWhereClause + \")\");\n    }\n    whereClause=StringUtils.join(maxValueClauses,\" AND \");\n    columnsClause=StringUtils.join(maxValueSelectColumns,\", \");\n    final String selectQuery=dbAdapter.getSelectStatement(tableName,columnsClause,whereClause,null,null,null);\n    long rowCount=0;\n    try (final Connection con=dbcpService.getConnection(finalFileToProcess == null ? Collections.emptyMap() : finalFileToProcess.getAttributes());final Statement st=con.createStatement()){\n      final Integer queryTimeout=context.getProperty(QUERY_TIMEOUT).evaluateAttributeExpressions(fileToProcess).asTimePeriod(TimeUnit.SECONDS).intValue();\n      st.setQueryTimeout(queryTimeout);\n      logger.debug(\"Executing {}\",new Object[]{selectQuery});\n      ResultSet resultSet;\n      resultSet=st.executeQuery(selectQuery);\n      if (resultSet.next()) {\n        rowCount=resultSet.getLong(1);\n        ResultSetMetaData rsmd=resultSet.getMetaData();\n        for (int i=2; i <= rsmd.getColumnCount(); i++) {\n          String resultColumnName=(StringUtils.isNotEmpty(rsmd.getColumnLabel(i)) ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i)).toLowerCase();\n          String fullyQualifiedStateKey=getStateKey(tableName,resultColumnName,dbAdapter);\n          String resultColumnCurrentMax=statePropertyMap.get(fullyQualifiedStateKey);\n          if (StringUtils.isEmpty(resultColumnCurrentMax) && !isDynamicTableName) {\n            resultColumnCurrentMax=statePropertyMap.get(resultColumnName);\n          }\n          int type=rsmd.getColumnType(i);\n          if (isDynamicTableName) {\n            columnTypeMap.put(fullyQualifiedStateKey,type);\n          }\n          try {\n            String newMaxValue=getMaxValueFromRow(resultSet,i,type,resultColumnCurrentMax,dbAdapter.getName());\n            if (newMaxValue != null) {\n              statePropertyMap.put(fullyQualifiedStateKey,newMaxValue);\n            }\n          }\n catch (          ParseException|IOException pie) {\n            throw new ProcessException(pie);\n          }\n        }\n      }\n else {\n        throw new SQLException(\"No rows returned from metadata query: \" + selectQuery);\n      }\n      IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n        String colName=maxValueColumnNameList.get(index);\n        maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n        String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n        if (!StringUtils.isEmpty(maxValue)) {\n          if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n            super.setup(context,false,finalFileToProcess);\n          }\n          Integer type=getColumnType(tableName,colName,dbAdapter);\n          maxValueClauses.add(colName + \" <= \" + getLiteralByType(type,maxValue,dbAdapter.getName()));\n        }\n      }\n);\n      whereClause=StringUtils.join(maxValueClauses,\" AND \");\n      final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n      for (long i=0; i < numberOfFetches; i++) {\n        Long limit=partitionSize == 0 ? null : (long)partitionSize;\n        Long offset=partitionSize == 0 ? null : i * partitionSize;\n        final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n        final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n        FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n        sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n        if (columnNames != null) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n        }\n        if (StringUtils.isNotBlank(whereClause)) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n        }\n        if (StringUtils.isNotBlank(maxColumnNames)) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n        }\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n        if (partitionSize != 0) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n        }\n        session.transfer(sqlFlowFile,REL_SUCCESS);\n      }\n      if (fileToProcess != null) {\n        session.remove(fileToProcess);\n      }\n    }\n catch (    SQLException e) {\n      if (fileToProcess != null) {\n        logger.error(\"Unable to execute SQL select query {} due to {}, routing {} to failure\",new Object[]{selectQuery,e,fileToProcess});\n        fileToProcess=session.putAttribute(fileToProcess,\"generatetablefetch.sql.error\",e.getMessage());\n        session.transfer(fileToProcess,REL_FAILURE);\n      }\n else {\n        logger.error(\"Unable to execute SQL select query {} due to {}\",new Object[]{selectQuery,e});\n        throw new ProcessException(e);\n      }\n    }\n    session.commit();\n    try {\n      stateManager.setState(statePropertyMap,Scope.CLUSTER);\n    }\n catch (    IOException ioe) {\n      logger.error(\"{} failed to update State Manager, observed maximum values will not be recorded. \" + \"Also, any generated SQL statements may be duplicated.\",new Object[]{this,ioe});\n    }\n  }\n catch (  final ProcessException pe) {\n    Throwable t=(pe.getCause() == null ? pe : pe.getCause());\n    logger.error(\"Error during processing: {}\",new Object[]{t.getMessage()},t);\n    session.rollback();\n    context.yield();\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 1247,
                    "astHeight": 18
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 125,
                    "startLineNumber": 353,
                    "startColumnNumber": 16,
                    "endLineNumber": 353,
                    "endColumnNumber": 141
                },
                "nodeContext": "final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 25,
                "astHeight": 9
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "0",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 356,
                "startColumnNumber": 30,
                "endLineNumber": 356,
                "endColumnNumber": 31
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationExpression,fragments]",
                    "nodePosition": {
                        "charLength": 5,
                        "startLineNumber": 356,
                        "startColumnNumber": 26,
                        "endLineNumber": 356,
                        "endColumnNumber": 31
                    },
                    "nodeContext": "i=0",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
                    "nodePosition": {
                        "charLength": 10,
                        "startLineNumber": 356,
                        "startColumnNumber": 21,
                        "endLineNumber": 356,
                        "endColumnNumber": 31
                    },
                    "nodeContext": "long i=0",
                    "nodeType": "VariableDeclarationExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1778,
                        "startLineNumber": 356,
                        "startColumnNumber": 16,
                        "endLineNumber": 378,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "for (long i=0; i < numberOfFetches; i++) {\n  Long limit=partitionSize == 0 ? null : (long)partitionSize;\n  Long offset=partitionSize == 0 ? null : i * partitionSize;\n  final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n  final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n  FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n  sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n  sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n  if (columnNames != null) {\n    sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n  }\n  if (StringUtils.isNotBlank(whereClause)) {\n    sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n  }\n  if (StringUtils.isNotBlank(maxColumnNames)) {\n    sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n  }\n  sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n  if (partitionSize != 0) {\n    sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n  }\n  session.transfer(sqlFlowFile,REL_SUCCESS);\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 185,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 6723,
                        "startLineNumber": 281,
                        "startColumnNumber": 61,
                        "endLineNumber": 383,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  final Integer queryTimeout=context.getProperty(QUERY_TIMEOUT).evaluateAttributeExpressions(fileToProcess).asTimePeriod(TimeUnit.SECONDS).intValue();\n  st.setQueryTimeout(queryTimeout);\n  logger.debug(\"Executing {}\",new Object[]{selectQuery});\n  ResultSet resultSet;\n  resultSet=st.executeQuery(selectQuery);\n  if (resultSet.next()) {\n    rowCount=resultSet.getLong(1);\n    ResultSetMetaData rsmd=resultSet.getMetaData();\n    for (int i=2; i <= rsmd.getColumnCount(); i++) {\n      String resultColumnName=(StringUtils.isNotEmpty(rsmd.getColumnLabel(i)) ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i)).toLowerCase();\n      String fullyQualifiedStateKey=getStateKey(tableName,resultColumnName,dbAdapter);\n      String resultColumnCurrentMax=statePropertyMap.get(fullyQualifiedStateKey);\n      if (StringUtils.isEmpty(resultColumnCurrentMax) && !isDynamicTableName) {\n        resultColumnCurrentMax=statePropertyMap.get(resultColumnName);\n      }\n      int type=rsmd.getColumnType(i);\n      if (isDynamicTableName) {\n        columnTypeMap.put(fullyQualifiedStateKey,type);\n      }\n      try {\n        String newMaxValue=getMaxValueFromRow(resultSet,i,type,resultColumnCurrentMax,dbAdapter.getName());\n        if (newMaxValue != null) {\n          statePropertyMap.put(fullyQualifiedStateKey,newMaxValue);\n        }\n      }\n catch (      ParseException|IOException pie) {\n        throw new ProcessException(pie);\n      }\n    }\n  }\n else {\n    throw new SQLException(\"No rows returned from metadata query: \" + selectQuery);\n  }\n  IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n    String colName=maxValueColumnNameList.get(index);\n    maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n    String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n    if (!StringUtils.isEmpty(maxValue)) {\n      if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n        super.setup(context,false,finalFileToProcess);\n      }\n      Integer type=getColumnType(tableName,colName,dbAdapter);\n      maxValueClauses.add(colName + \" <= \" + getLiteralByType(type,maxValue,dbAdapter.getName()));\n    }\n  }\n);\n  whereClause=StringUtils.join(maxValueClauses,\" AND \");\n  final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n  for (long i=0; i < numberOfFetches; i++) {\n    Long limit=partitionSize == 0 ? null : (long)partitionSize;\n    Long offset=partitionSize == 0 ? null : i * partitionSize;\n    final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n    final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n    FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n    sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n    sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n    if (columnNames != null) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n    }\n    if (StringUtils.isNotBlank(whereClause)) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n    }\n    if (StringUtils.isNotBlank(maxColumnNames)) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n    }\n    sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n    if (partitionSize != 0) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n    }\n    session.transfer(sqlFlowFile,REL_SUCCESS);\n  }\n  if (fileToProcess != null) {\n    session.remove(fileToProcess);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 530,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 7563,
                        "startLineNumber": 280,
                        "startColumnNumber": 12,
                        "endLineNumber": 393,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "try (final Connection con=dbcpService.getConnection(finalFileToProcess == null ? Collections.emptyMap() : finalFileToProcess.getAttributes());final Statement st=con.createStatement()){\n  final Integer queryTimeout=context.getProperty(QUERY_TIMEOUT).evaluateAttributeExpressions(fileToProcess).asTimePeriod(TimeUnit.SECONDS).intValue();\n  st.setQueryTimeout(queryTimeout);\n  logger.debug(\"Executing {}\",new Object[]{selectQuery});\n  ResultSet resultSet;\n  resultSet=st.executeQuery(selectQuery);\n  if (resultSet.next()) {\n    rowCount=resultSet.getLong(1);\n    ResultSetMetaData rsmd=resultSet.getMetaData();\n    for (int i=2; i <= rsmd.getColumnCount(); i++) {\n      String resultColumnName=(StringUtils.isNotEmpty(rsmd.getColumnLabel(i)) ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i)).toLowerCase();\n      String fullyQualifiedStateKey=getStateKey(tableName,resultColumnName,dbAdapter);\n      String resultColumnCurrentMax=statePropertyMap.get(fullyQualifiedStateKey);\n      if (StringUtils.isEmpty(resultColumnCurrentMax) && !isDynamicTableName) {\n        resultColumnCurrentMax=statePropertyMap.get(resultColumnName);\n      }\n      int type=rsmd.getColumnType(i);\n      if (isDynamicTableName) {\n        columnTypeMap.put(fullyQualifiedStateKey,type);\n      }\n      try {\n        String newMaxValue=getMaxValueFromRow(resultSet,i,type,resultColumnCurrentMax,dbAdapter.getName());\n        if (newMaxValue != null) {\n          statePropertyMap.put(fullyQualifiedStateKey,newMaxValue);\n        }\n      }\n catch (      ParseException|IOException pie) {\n        throw new ProcessException(pie);\n      }\n    }\n  }\n else {\n    throw new SQLException(\"No rows returned from metadata query: \" + selectQuery);\n  }\n  IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n    String colName=maxValueColumnNameList.get(index);\n    maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n    String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n    if (!StringUtils.isEmpty(maxValue)) {\n      if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n        super.setup(context,false,finalFileToProcess);\n      }\n      Integer type=getColumnType(tableName,colName,dbAdapter);\n      maxValueClauses.add(colName + \" <= \" + getLiteralByType(type,maxValue,dbAdapter.getName()));\n    }\n  }\n);\n  whereClause=StringUtils.join(maxValueClauses,\" AND \");\n  final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n  for (long i=0; i < numberOfFetches; i++) {\n    Long limit=partitionSize == 0 ? null : (long)partitionSize;\n    Long offset=partitionSize == 0 ? null : i * partitionSize;\n    final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n    final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n    FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n    sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n    sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n    if (columnNames != null) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n    }\n    if (StringUtils.isNotBlank(whereClause)) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n    }\n    if (StringUtils.isNotBlank(maxColumnNames)) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n    }\n    sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n    if (partitionSize != 0) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n    }\n    session.transfer(sqlFlowFile,REL_SUCCESS);\n  }\n  if (fileToProcess != null) {\n    session.remove(fileToProcess);\n  }\n}\n catch (SQLException e) {\n  if (fileToProcess != null) {\n    logger.error(\"Unable to execute SQL select query {} due to {}, routing {} to failure\",new Object[]{selectQuery,e,fileToProcess});\n    fileToProcess=session.putAttribute(fileToProcess,\"generatetablefetch.sql.error\",e.getMessage());\n    session.transfer(fileToProcess,REL_FAILURE);\n  }\n else {\n    logger.error(\"Unable to execute SQL select query {} due to {}\",new Object[]{selectQuery,e});\n    throw new ProcessException(e);\n  }\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 620,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 12385,
                        "startLineNumber": 213,
                        "startColumnNumber": 12,
                        "endLineNumber": 404,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final Map<String,String> statePropertyMap=new HashMap<>(stateMap.toMap());\n  for (  final Map.Entry<String,String> maxProp : maxValueProperties.entrySet()) {\n    String maxPropKey=maxProp.getKey().toLowerCase();\n    String fullyQualifiedMaxPropKey=getStateKey(tableName,maxPropKey,dbAdapter);\n    if (!statePropertyMap.containsKey(fullyQualifiedMaxPropKey)) {\n      String newMaxPropValue;\n      if (statePropertyMap.containsKey(maxPropKey)) {\n        newMaxPropValue=statePropertyMap.get(maxPropKey);\n      }\n else {\n        newMaxPropValue=maxProp.getValue();\n      }\n      statePropertyMap.put(fullyQualifiedMaxPropKey,newMaxPropValue);\n    }\n  }\n  String whereClause=null;\n  List<String> maxValueColumnNameList=StringUtils.isEmpty(maxValueColumnNames) ? new ArrayList<>(0) : Arrays.asList(maxValueColumnNames.split(\"\\\\s*,\\\\s*\"));\n  List<String> maxValueClauses=new ArrayList<>(maxValueColumnNameList.size());\n  String columnsClause=null;\n  List<String> maxValueSelectColumns=new ArrayList<>(maxValueColumnNameList.size() + 1);\n  maxValueSelectColumns.add(\"COUNT(*)\");\n  IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n    String colName=maxValueColumnNameList.get(index);\n    maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n    String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n    if (!StringUtils.isEmpty(maxValue)) {\n      if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n        super.setup(context,false,finalFileToProcess);\n      }\n      Integer type=getColumnType(tableName,colName,dbAdapter);\n      maxValueClauses.add(colName + (index == 0 ? \" > \" : \" >= \") + getLiteralByType(type,maxValue,dbAdapter.getName()));\n    }\n  }\n);\n  if (customWhereClause != null) {\n    maxValueClauses.add(\"(\" + customWhereClause + \")\");\n  }\n  whereClause=StringUtils.join(maxValueClauses,\" AND \");\n  columnsClause=StringUtils.join(maxValueSelectColumns,\", \");\n  final String selectQuery=dbAdapter.getSelectStatement(tableName,columnsClause,whereClause,null,null,null);\n  long rowCount=0;\n  try (final Connection con=dbcpService.getConnection(finalFileToProcess == null ? Collections.emptyMap() : finalFileToProcess.getAttributes());final Statement st=con.createStatement()){\n    final Integer queryTimeout=context.getProperty(QUERY_TIMEOUT).evaluateAttributeExpressions(fileToProcess).asTimePeriod(TimeUnit.SECONDS).intValue();\n    st.setQueryTimeout(queryTimeout);\n    logger.debug(\"Executing {}\",new Object[]{selectQuery});\n    ResultSet resultSet;\n    resultSet=st.executeQuery(selectQuery);\n    if (resultSet.next()) {\n      rowCount=resultSet.getLong(1);\n      ResultSetMetaData rsmd=resultSet.getMetaData();\n      for (int i=2; i <= rsmd.getColumnCount(); i++) {\n        String resultColumnName=(StringUtils.isNotEmpty(rsmd.getColumnLabel(i)) ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i)).toLowerCase();\n        String fullyQualifiedStateKey=getStateKey(tableName,resultColumnName,dbAdapter);\n        String resultColumnCurrentMax=statePropertyMap.get(fullyQualifiedStateKey);\n        if (StringUtils.isEmpty(resultColumnCurrentMax) && !isDynamicTableName) {\n          resultColumnCurrentMax=statePropertyMap.get(resultColumnName);\n        }\n        int type=rsmd.getColumnType(i);\n        if (isDynamicTableName) {\n          columnTypeMap.put(fullyQualifiedStateKey,type);\n        }\n        try {\n          String newMaxValue=getMaxValueFromRow(resultSet,i,type,resultColumnCurrentMax,dbAdapter.getName());\n          if (newMaxValue != null) {\n            statePropertyMap.put(fullyQualifiedStateKey,newMaxValue);\n          }\n        }\n catch (        ParseException|IOException pie) {\n          throw new ProcessException(pie);\n        }\n      }\n    }\n else {\n      throw new SQLException(\"No rows returned from metadata query: \" + selectQuery);\n    }\n    IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n      String colName=maxValueColumnNameList.get(index);\n      maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n      String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n      if (!StringUtils.isEmpty(maxValue)) {\n        if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n          super.setup(context,false,finalFileToProcess);\n        }\n        Integer type=getColumnType(tableName,colName,dbAdapter);\n        maxValueClauses.add(colName + \" <= \" + getLiteralByType(type,maxValue,dbAdapter.getName()));\n      }\n    }\n);\n    whereClause=StringUtils.join(maxValueClauses,\" AND \");\n    final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n    for (long i=0; i < numberOfFetches; i++) {\n      Long limit=partitionSize == 0 ? null : (long)partitionSize;\n      Long offset=partitionSize == 0 ? null : i * partitionSize;\n      final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n      final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n      FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n      sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n      if (columnNames != null) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n      }\n      if (StringUtils.isNotBlank(whereClause)) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n      }\n      if (StringUtils.isNotBlank(maxColumnNames)) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n      }\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n      if (partitionSize != 0) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n      }\n      session.transfer(sqlFlowFile,REL_SUCCESS);\n    }\n    if (fileToProcess != null) {\n      session.remove(fileToProcess);\n    }\n  }\n catch (  SQLException e) {\n    if (fileToProcess != null) {\n      logger.error(\"Unable to execute SQL select query {} due to {}, routing {} to failure\",new Object[]{selectQuery,e,fileToProcess});\n      fileToProcess=session.putAttribute(fileToProcess,\"generatetablefetch.sql.error\",e.getMessage());\n      session.transfer(fileToProcess,REL_FAILURE);\n    }\n else {\n      logger.error(\"Unable to execute SQL select query {} due to {}\",new Object[]{selectQuery,e});\n      throw new ProcessException(e);\n    }\n  }\n  session.commit();\n  try {\n    stateManager.setState(statePropertyMap,Scope.CLUSTER);\n  }\n catch (  IOException ioe) {\n    logger.error(\"{} failed to update State Manager, observed maximum values will not be recorded. \" + \"Also, any generated SQL statements may be duplicated.\",new Object[]{this,ioe});\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 971,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 12730,
                        "startLineNumber": 213,
                        "startColumnNumber": 8,
                        "endLineNumber": 410,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  final Map<String,String> statePropertyMap=new HashMap<>(stateMap.toMap());\n  for (  final Map.Entry<String,String> maxProp : maxValueProperties.entrySet()) {\n    String maxPropKey=maxProp.getKey().toLowerCase();\n    String fullyQualifiedMaxPropKey=getStateKey(tableName,maxPropKey,dbAdapter);\n    if (!statePropertyMap.containsKey(fullyQualifiedMaxPropKey)) {\n      String newMaxPropValue;\n      if (statePropertyMap.containsKey(maxPropKey)) {\n        newMaxPropValue=statePropertyMap.get(maxPropKey);\n      }\n else {\n        newMaxPropValue=maxProp.getValue();\n      }\n      statePropertyMap.put(fullyQualifiedMaxPropKey,newMaxPropValue);\n    }\n  }\n  String whereClause=null;\n  List<String> maxValueColumnNameList=StringUtils.isEmpty(maxValueColumnNames) ? new ArrayList<>(0) : Arrays.asList(maxValueColumnNames.split(\"\\\\s*,\\\\s*\"));\n  List<String> maxValueClauses=new ArrayList<>(maxValueColumnNameList.size());\n  String columnsClause=null;\n  List<String> maxValueSelectColumns=new ArrayList<>(maxValueColumnNameList.size() + 1);\n  maxValueSelectColumns.add(\"COUNT(*)\");\n  IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n    String colName=maxValueColumnNameList.get(index);\n    maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n    String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n    if (!StringUtils.isEmpty(maxValue)) {\n      if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n        super.setup(context,false,finalFileToProcess);\n      }\n      Integer type=getColumnType(tableName,colName,dbAdapter);\n      maxValueClauses.add(colName + (index == 0 ? \" > \" : \" >= \") + getLiteralByType(type,maxValue,dbAdapter.getName()));\n    }\n  }\n);\n  if (customWhereClause != null) {\n    maxValueClauses.add(\"(\" + customWhereClause + \")\");\n  }\n  whereClause=StringUtils.join(maxValueClauses,\" AND \");\n  columnsClause=StringUtils.join(maxValueSelectColumns,\", \");\n  final String selectQuery=dbAdapter.getSelectStatement(tableName,columnsClause,whereClause,null,null,null);\n  long rowCount=0;\n  try (final Connection con=dbcpService.getConnection(finalFileToProcess == null ? Collections.emptyMap() : finalFileToProcess.getAttributes());final Statement st=con.createStatement()){\n    final Integer queryTimeout=context.getProperty(QUERY_TIMEOUT).evaluateAttributeExpressions(fileToProcess).asTimePeriod(TimeUnit.SECONDS).intValue();\n    st.setQueryTimeout(queryTimeout);\n    logger.debug(\"Executing {}\",new Object[]{selectQuery});\n    ResultSet resultSet;\n    resultSet=st.executeQuery(selectQuery);\n    if (resultSet.next()) {\n      rowCount=resultSet.getLong(1);\n      ResultSetMetaData rsmd=resultSet.getMetaData();\n      for (int i=2; i <= rsmd.getColumnCount(); i++) {\n        String resultColumnName=(StringUtils.isNotEmpty(rsmd.getColumnLabel(i)) ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i)).toLowerCase();\n        String fullyQualifiedStateKey=getStateKey(tableName,resultColumnName,dbAdapter);\n        String resultColumnCurrentMax=statePropertyMap.get(fullyQualifiedStateKey);\n        if (StringUtils.isEmpty(resultColumnCurrentMax) && !isDynamicTableName) {\n          resultColumnCurrentMax=statePropertyMap.get(resultColumnName);\n        }\n        int type=rsmd.getColumnType(i);\n        if (isDynamicTableName) {\n          columnTypeMap.put(fullyQualifiedStateKey,type);\n        }\n        try {\n          String newMaxValue=getMaxValueFromRow(resultSet,i,type,resultColumnCurrentMax,dbAdapter.getName());\n          if (newMaxValue != null) {\n            statePropertyMap.put(fullyQualifiedStateKey,newMaxValue);\n          }\n        }\n catch (        ParseException|IOException pie) {\n          throw new ProcessException(pie);\n        }\n      }\n    }\n else {\n      throw new SQLException(\"No rows returned from metadata query: \" + selectQuery);\n    }\n    IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n      String colName=maxValueColumnNameList.get(index);\n      maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n      String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n      if (!StringUtils.isEmpty(maxValue)) {\n        if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n          super.setup(context,false,finalFileToProcess);\n        }\n        Integer type=getColumnType(tableName,colName,dbAdapter);\n        maxValueClauses.add(colName + \" <= \" + getLiteralByType(type,maxValue,dbAdapter.getName()));\n      }\n    }\n);\n    whereClause=StringUtils.join(maxValueClauses,\" AND \");\n    final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n    for (long i=0; i < numberOfFetches; i++) {\n      Long limit=partitionSize == 0 ? null : (long)partitionSize;\n      Long offset=partitionSize == 0 ? null : i * partitionSize;\n      final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n      final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n      FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n      sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n      if (columnNames != null) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n      }\n      if (StringUtils.isNotBlank(whereClause)) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n      }\n      if (StringUtils.isNotBlank(maxColumnNames)) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n      }\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n      if (partitionSize != 0) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n      }\n      session.transfer(sqlFlowFile,REL_SUCCESS);\n    }\n    if (fileToProcess != null) {\n      session.remove(fileToProcess);\n    }\n  }\n catch (  SQLException e) {\n    if (fileToProcess != null) {\n      logger.error(\"Unable to execute SQL select query {} due to {}, routing {} to failure\",new Object[]{selectQuery,e,fileToProcess});\n      fileToProcess=session.putAttribute(fileToProcess,\"generatetablefetch.sql.error\",e.getMessage());\n      session.transfer(fileToProcess,REL_FAILURE);\n    }\n else {\n      logger.error(\"Unable to execute SQL select query {} due to {}\",new Object[]{selectQuery,e});\n      throw new ProcessException(e);\n    }\n  }\n  session.commit();\n  try {\n    stateManager.setState(statePropertyMap,Scope.CLUSTER);\n  }\n catch (  IOException ioe) {\n    logger.error(\"{} failed to update State Manager, observed maximum values will not be recorded. \" + \"Also, any generated SQL statements may be duplicated.\",new Object[]{this,ioe});\n  }\n}\n catch (final ProcessException pe) {\n  Throwable t=(pe.getCause() == null ? pe : pe.getCause());\n  logger.error(\"Error during processing: {}\",new Object[]{t.getMessage()},t);\n  session.rollback();\n  context.yield();\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 1018,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 14819,
                        "startLineNumber": 173,
                        "startColumnNumber": 124,
                        "endLineNumber": 411,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (!isDynamicTableName && !isDynamicMaxValues && !setupComplete.get()) {\n    super.setup(context);\n  }\n  ProcessSession session=sessionFactory.createSession();\n  FlowFile fileToProcess=null;\n  if (context.hasIncomingConnection()) {\n    fileToProcess=session.get();\n    if (fileToProcess == null) {\n      return;\n    }\n  }\n  final ComponentLog logger=getLogger();\n  final DBCPService dbcpService=context.getProperty(DBCP_SERVICE).asControllerService(DBCPService.class);\n  final DatabaseAdapter dbAdapter=dbAdapters.get(context.getProperty(DB_TYPE).getValue());\n  final String tableName=context.getProperty(TABLE_NAME).evaluateAttributeExpressions(fileToProcess).getValue();\n  final String columnNames=context.getProperty(COLUMN_NAMES).evaluateAttributeExpressions(fileToProcess).getValue();\n  final String maxValueColumnNames=context.getProperty(MAX_VALUE_COLUMN_NAMES).evaluateAttributeExpressions(fileToProcess).getValue();\n  final int partitionSize=context.getProperty(PARTITION_SIZE).evaluateAttributeExpressions(fileToProcess).asInteger();\n  final String customWhereClause=context.getProperty(WHERE_CLAUSE).evaluateAttributeExpressions(fileToProcess).getValue();\n  final StateManager stateManager=context.getStateManager();\n  final StateMap stateMap;\n  FlowFile finalFileToProcess=fileToProcess;\n  try {\n    stateMap=stateManager.getState(Scope.CLUSTER);\n  }\n catch (  final IOException ioe) {\n    logger.error(\"Failed to retrieve observed maximum values from the State Manager. Will not perform \" + \"query until this is accomplished.\",ioe);\n    context.yield();\n    return;\n  }\n  try {\n    final Map<String,String> statePropertyMap=new HashMap<>(stateMap.toMap());\n    for (    final Map.Entry<String,String> maxProp : maxValueProperties.entrySet()) {\n      String maxPropKey=maxProp.getKey().toLowerCase();\n      String fullyQualifiedMaxPropKey=getStateKey(tableName,maxPropKey,dbAdapter);\n      if (!statePropertyMap.containsKey(fullyQualifiedMaxPropKey)) {\n        String newMaxPropValue;\n        if (statePropertyMap.containsKey(maxPropKey)) {\n          newMaxPropValue=statePropertyMap.get(maxPropKey);\n        }\n else {\n          newMaxPropValue=maxProp.getValue();\n        }\n        statePropertyMap.put(fullyQualifiedMaxPropKey,newMaxPropValue);\n      }\n    }\n    String whereClause=null;\n    List<String> maxValueColumnNameList=StringUtils.isEmpty(maxValueColumnNames) ? new ArrayList<>(0) : Arrays.asList(maxValueColumnNames.split(\"\\\\s*,\\\\s*\"));\n    List<String> maxValueClauses=new ArrayList<>(maxValueColumnNameList.size());\n    String columnsClause=null;\n    List<String> maxValueSelectColumns=new ArrayList<>(maxValueColumnNameList.size() + 1);\n    maxValueSelectColumns.add(\"COUNT(*)\");\n    IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n      String colName=maxValueColumnNameList.get(index);\n      maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n      String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n      if (!StringUtils.isEmpty(maxValue)) {\n        if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n          super.setup(context,false,finalFileToProcess);\n        }\n        Integer type=getColumnType(tableName,colName,dbAdapter);\n        maxValueClauses.add(colName + (index == 0 ? \" > \" : \" >= \") + getLiteralByType(type,maxValue,dbAdapter.getName()));\n      }\n    }\n);\n    if (customWhereClause != null) {\n      maxValueClauses.add(\"(\" + customWhereClause + \")\");\n    }\n    whereClause=StringUtils.join(maxValueClauses,\" AND \");\n    columnsClause=StringUtils.join(maxValueSelectColumns,\", \");\n    final String selectQuery=dbAdapter.getSelectStatement(tableName,columnsClause,whereClause,null,null,null);\n    long rowCount=0;\n    try (final Connection con=dbcpService.getConnection(finalFileToProcess == null ? Collections.emptyMap() : finalFileToProcess.getAttributes());final Statement st=con.createStatement()){\n      final Integer queryTimeout=context.getProperty(QUERY_TIMEOUT).evaluateAttributeExpressions(fileToProcess).asTimePeriod(TimeUnit.SECONDS).intValue();\n      st.setQueryTimeout(queryTimeout);\n      logger.debug(\"Executing {}\",new Object[]{selectQuery});\n      ResultSet resultSet;\n      resultSet=st.executeQuery(selectQuery);\n      if (resultSet.next()) {\n        rowCount=resultSet.getLong(1);\n        ResultSetMetaData rsmd=resultSet.getMetaData();\n        for (int i=2; i <= rsmd.getColumnCount(); i++) {\n          String resultColumnName=(StringUtils.isNotEmpty(rsmd.getColumnLabel(i)) ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i)).toLowerCase();\n          String fullyQualifiedStateKey=getStateKey(tableName,resultColumnName,dbAdapter);\n          String resultColumnCurrentMax=statePropertyMap.get(fullyQualifiedStateKey);\n          if (StringUtils.isEmpty(resultColumnCurrentMax) && !isDynamicTableName) {\n            resultColumnCurrentMax=statePropertyMap.get(resultColumnName);\n          }\n          int type=rsmd.getColumnType(i);\n          if (isDynamicTableName) {\n            columnTypeMap.put(fullyQualifiedStateKey,type);\n          }\n          try {\n            String newMaxValue=getMaxValueFromRow(resultSet,i,type,resultColumnCurrentMax,dbAdapter.getName());\n            if (newMaxValue != null) {\n              statePropertyMap.put(fullyQualifiedStateKey,newMaxValue);\n            }\n          }\n catch (          ParseException|IOException pie) {\n            throw new ProcessException(pie);\n          }\n        }\n      }\n else {\n        throw new SQLException(\"No rows returned from metadata query: \" + selectQuery);\n      }\n      IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n        String colName=maxValueColumnNameList.get(index);\n        maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n        String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n        if (!StringUtils.isEmpty(maxValue)) {\n          if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n            super.setup(context,false,finalFileToProcess);\n          }\n          Integer type=getColumnType(tableName,colName,dbAdapter);\n          maxValueClauses.add(colName + \" <= \" + getLiteralByType(type,maxValue,dbAdapter.getName()));\n        }\n      }\n);\n      whereClause=StringUtils.join(maxValueClauses,\" AND \");\n      final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n      for (long i=0; i < numberOfFetches; i++) {\n        Long limit=partitionSize == 0 ? null : (long)partitionSize;\n        Long offset=partitionSize == 0 ? null : i * partitionSize;\n        final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n        final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n        FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n        sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n        if (columnNames != null) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n        }\n        if (StringUtils.isNotBlank(whereClause)) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n        }\n        if (StringUtils.isNotBlank(maxColumnNames)) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n        }\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n        if (partitionSize != 0) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n        }\n        session.transfer(sqlFlowFile,REL_SUCCESS);\n      }\n      if (fileToProcess != null) {\n        session.remove(fileToProcess);\n      }\n    }\n catch (    SQLException e) {\n      if (fileToProcess != null) {\n        logger.error(\"Unable to execute SQL select query {} due to {}, routing {} to failure\",new Object[]{selectQuery,e,fileToProcess});\n        fileToProcess=session.putAttribute(fileToProcess,\"generatetablefetch.sql.error\",e.getMessage());\n        session.transfer(fileToProcess,REL_FAILURE);\n      }\n else {\n        logger.error(\"Unable to execute SQL select query {} due to {}\",new Object[]{selectQuery,e});\n        throw new ProcessException(e);\n      }\n    }\n    session.commit();\n    try {\n      stateManager.setState(statePropertyMap,Scope.CLUSTER);\n    }\n catch (    IOException ioe) {\n      logger.error(\"{} failed to update State Manager, observed maximum values will not be recorded. \" + \"Also, any generated SQL statements may be duplicated.\",new Object[]{this,ioe});\n    }\n  }\n catch (  final ProcessException pe) {\n    Throwable t=(pe.getCause() == null ? pe : pe.getCause());\n    logger.error(\"Error during processing: {}\",new Object[]{t.getMessage()},t);\n    session.rollback();\n    context.yield();\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 1229,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 14953,
                        "startLineNumber": 172,
                        "startColumnNumber": 4,
                        "endLineNumber": 411,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void onTrigger(final ProcessContext context,final ProcessSessionFactory sessionFactory) throws ProcessException {\n  if (!isDynamicTableName && !isDynamicMaxValues && !setupComplete.get()) {\n    super.setup(context);\n  }\n  ProcessSession session=sessionFactory.createSession();\n  FlowFile fileToProcess=null;\n  if (context.hasIncomingConnection()) {\n    fileToProcess=session.get();\n    if (fileToProcess == null) {\n      return;\n    }\n  }\n  final ComponentLog logger=getLogger();\n  final DBCPService dbcpService=context.getProperty(DBCP_SERVICE).asControllerService(DBCPService.class);\n  final DatabaseAdapter dbAdapter=dbAdapters.get(context.getProperty(DB_TYPE).getValue());\n  final String tableName=context.getProperty(TABLE_NAME).evaluateAttributeExpressions(fileToProcess).getValue();\n  final String columnNames=context.getProperty(COLUMN_NAMES).evaluateAttributeExpressions(fileToProcess).getValue();\n  final String maxValueColumnNames=context.getProperty(MAX_VALUE_COLUMN_NAMES).evaluateAttributeExpressions(fileToProcess).getValue();\n  final int partitionSize=context.getProperty(PARTITION_SIZE).evaluateAttributeExpressions(fileToProcess).asInteger();\n  final String customWhereClause=context.getProperty(WHERE_CLAUSE).evaluateAttributeExpressions(fileToProcess).getValue();\n  final StateManager stateManager=context.getStateManager();\n  final StateMap stateMap;\n  FlowFile finalFileToProcess=fileToProcess;\n  try {\n    stateMap=stateManager.getState(Scope.CLUSTER);\n  }\n catch (  final IOException ioe) {\n    logger.error(\"Failed to retrieve observed maximum values from the State Manager. Will not perform \" + \"query until this is accomplished.\",ioe);\n    context.yield();\n    return;\n  }\n  try {\n    final Map<String,String> statePropertyMap=new HashMap<>(stateMap.toMap());\n    for (    final Map.Entry<String,String> maxProp : maxValueProperties.entrySet()) {\n      String maxPropKey=maxProp.getKey().toLowerCase();\n      String fullyQualifiedMaxPropKey=getStateKey(tableName,maxPropKey,dbAdapter);\n      if (!statePropertyMap.containsKey(fullyQualifiedMaxPropKey)) {\n        String newMaxPropValue;\n        if (statePropertyMap.containsKey(maxPropKey)) {\n          newMaxPropValue=statePropertyMap.get(maxPropKey);\n        }\n else {\n          newMaxPropValue=maxProp.getValue();\n        }\n        statePropertyMap.put(fullyQualifiedMaxPropKey,newMaxPropValue);\n      }\n    }\n    String whereClause=null;\n    List<String> maxValueColumnNameList=StringUtils.isEmpty(maxValueColumnNames) ? new ArrayList<>(0) : Arrays.asList(maxValueColumnNames.split(\"\\\\s*,\\\\s*\"));\n    List<String> maxValueClauses=new ArrayList<>(maxValueColumnNameList.size());\n    String columnsClause=null;\n    List<String> maxValueSelectColumns=new ArrayList<>(maxValueColumnNameList.size() + 1);\n    maxValueSelectColumns.add(\"COUNT(*)\");\n    IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n      String colName=maxValueColumnNameList.get(index);\n      maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n      String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n      if (!StringUtils.isEmpty(maxValue)) {\n        if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n          super.setup(context,false,finalFileToProcess);\n        }\n        Integer type=getColumnType(tableName,colName,dbAdapter);\n        maxValueClauses.add(colName + (index == 0 ? \" > \" : \" >= \") + getLiteralByType(type,maxValue,dbAdapter.getName()));\n      }\n    }\n);\n    if (customWhereClause != null) {\n      maxValueClauses.add(\"(\" + customWhereClause + \")\");\n    }\n    whereClause=StringUtils.join(maxValueClauses,\" AND \");\n    columnsClause=StringUtils.join(maxValueSelectColumns,\", \");\n    final String selectQuery=dbAdapter.getSelectStatement(tableName,columnsClause,whereClause,null,null,null);\n    long rowCount=0;\n    try (final Connection con=dbcpService.getConnection(finalFileToProcess == null ? Collections.emptyMap() : finalFileToProcess.getAttributes());final Statement st=con.createStatement()){\n      final Integer queryTimeout=context.getProperty(QUERY_TIMEOUT).evaluateAttributeExpressions(fileToProcess).asTimePeriod(TimeUnit.SECONDS).intValue();\n      st.setQueryTimeout(queryTimeout);\n      logger.debug(\"Executing {}\",new Object[]{selectQuery});\n      ResultSet resultSet;\n      resultSet=st.executeQuery(selectQuery);\n      if (resultSet.next()) {\n        rowCount=resultSet.getLong(1);\n        ResultSetMetaData rsmd=resultSet.getMetaData();\n        for (int i=2; i <= rsmd.getColumnCount(); i++) {\n          String resultColumnName=(StringUtils.isNotEmpty(rsmd.getColumnLabel(i)) ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i)).toLowerCase();\n          String fullyQualifiedStateKey=getStateKey(tableName,resultColumnName,dbAdapter);\n          String resultColumnCurrentMax=statePropertyMap.get(fullyQualifiedStateKey);\n          if (StringUtils.isEmpty(resultColumnCurrentMax) && !isDynamicTableName) {\n            resultColumnCurrentMax=statePropertyMap.get(resultColumnName);\n          }\n          int type=rsmd.getColumnType(i);\n          if (isDynamicTableName) {\n            columnTypeMap.put(fullyQualifiedStateKey,type);\n          }\n          try {\n            String newMaxValue=getMaxValueFromRow(resultSet,i,type,resultColumnCurrentMax,dbAdapter.getName());\n            if (newMaxValue != null) {\n              statePropertyMap.put(fullyQualifiedStateKey,newMaxValue);\n            }\n          }\n catch (          ParseException|IOException pie) {\n            throw new ProcessException(pie);\n          }\n        }\n      }\n else {\n        throw new SQLException(\"No rows returned from metadata query: \" + selectQuery);\n      }\n      IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n        String colName=maxValueColumnNameList.get(index);\n        maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n        String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n        if (!StringUtils.isEmpty(maxValue)) {\n          if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n            super.setup(context,false,finalFileToProcess);\n          }\n          Integer type=getColumnType(tableName,colName,dbAdapter);\n          maxValueClauses.add(colName + \" <= \" + getLiteralByType(type,maxValue,dbAdapter.getName()));\n        }\n      }\n);\n      whereClause=StringUtils.join(maxValueClauses,\" AND \");\n      final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n      for (long i=0; i < numberOfFetches; i++) {\n        Long limit=partitionSize == 0 ? null : (long)partitionSize;\n        Long offset=partitionSize == 0 ? null : i * partitionSize;\n        final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n        final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n        FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n        sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n        if (columnNames != null) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n        }\n        if (StringUtils.isNotBlank(whereClause)) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n        }\n        if (StringUtils.isNotBlank(maxColumnNames)) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n        }\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n        if (partitionSize != 0) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n        }\n        session.transfer(sqlFlowFile,REL_SUCCESS);\n      }\n      if (fileToProcess != null) {\n        session.remove(fileToProcess);\n      }\n    }\n catch (    SQLException e) {\n      if (fileToProcess != null) {\n        logger.error(\"Unable to execute SQL select query {} due to {}, routing {} to failure\",new Object[]{selectQuery,e,fileToProcess});\n        fileToProcess=session.putAttribute(fileToProcess,\"generatetablefetch.sql.error\",e.getMessage());\n        session.transfer(fileToProcess,REL_FAILURE);\n      }\n else {\n        logger.error(\"Unable to execute SQL select query {} due to {}\",new Object[]{selectQuery,e});\n        throw new ProcessException(e);\n      }\n    }\n    session.commit();\n    try {\n      stateManager.setState(statePropertyMap,Scope.CLUSTER);\n    }\n catch (    IOException ioe) {\n      logger.error(\"{} failed to update State Manager, observed maximum values will not be recorded. \" + \"Also, any generated SQL statements may be duplicated.\",new Object[]{this,ioe});\n    }\n  }\n catch (  final ProcessException pe) {\n    Throwable t=(pe.getCause() == null ? pe : pe.getCause());\n    logger.error(\"Error during processing: {}\",new Object[]{t.getMessage()},t);\n    session.rollback();\n    context.yield();\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 1247,
                    "astHeight": 18
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
                "nodePosition": {
                    "charLength": 10,
                    "startLineNumber": 356,
                    "startColumnNumber": 21,
                    "endLineNumber": 356,
                    "endColumnNumber": 31
                },
                "nodeContext": "long i=0",
                "nodeType": "VariableDeclarationExpression",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "0",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 357,
                "startColumnNumber": 50,
                "endLineNumber": 357,
                "endColumnNumber": 51
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,expression]",
                    "nodePosition": {
                        "charLength": 18,
                        "startLineNumber": 357,
                        "startColumnNumber": 33,
                        "endLineNumber": 357,
                        "endColumnNumber": 51
                    },
                    "nodeContext": "partitionSize == 0",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 48,
                        "startLineNumber": 357,
                        "startColumnNumber": 33,
                        "endLineNumber": 357,
                        "endColumnNumber": 81
                    },
                    "nodeContext": "partitionSize == 0 ? null : (long)partitionSize",
                    "nodeType": "ConditionalExpression",
                    "astNodeNumber": 8,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 56,
                        "startLineNumber": 357,
                        "startColumnNumber": 25,
                        "endLineNumber": 357,
                        "endColumnNumber": 81
                    },
                    "nodeContext": "limit=partitionSize == 0 ? null : (long)partitionSize",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 10,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 62,
                        "startLineNumber": 357,
                        "startColumnNumber": 20,
                        "endLineNumber": 357,
                        "endColumnNumber": 82
                    },
                    "nodeContext": "Long limit=partitionSize == 0 ? null : (long)partitionSize;\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 13,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 1735,
                        "startLineNumber": 356,
                        "startColumnNumber": 59,
                        "endLineNumber": 378,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  Long limit=partitionSize == 0 ? null : (long)partitionSize;\n  Long offset=partitionSize == 0 ? null : i * partitionSize;\n  final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n  final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n  FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n  sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n  sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n  if (columnNames != null) {\n    sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n  }\n  if (StringUtils.isNotBlank(whereClause)) {\n    sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n  }\n  if (StringUtils.isNotBlank(maxColumnNames)) {\n    sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n  }\n  sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n  if (partitionSize != 0) {\n    sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n  }\n  session.transfer(sqlFlowFile,REL_SUCCESS);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 174,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1778,
                        "startLineNumber": 356,
                        "startColumnNumber": 16,
                        "endLineNumber": 378,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "for (long i=0; i < numberOfFetches; i++) {\n  Long limit=partitionSize == 0 ? null : (long)partitionSize;\n  Long offset=partitionSize == 0 ? null : i * partitionSize;\n  final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n  final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n  FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n  sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n  sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n  if (columnNames != null) {\n    sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n  }\n  if (StringUtils.isNotBlank(whereClause)) {\n    sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n  }\n  if (StringUtils.isNotBlank(maxColumnNames)) {\n    sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n  }\n  sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n  if (partitionSize != 0) {\n    sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n  }\n  session.transfer(sqlFlowFile,REL_SUCCESS);\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 185,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 6723,
                        "startLineNumber": 281,
                        "startColumnNumber": 61,
                        "endLineNumber": 383,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  final Integer queryTimeout=context.getProperty(QUERY_TIMEOUT).evaluateAttributeExpressions(fileToProcess).asTimePeriod(TimeUnit.SECONDS).intValue();\n  st.setQueryTimeout(queryTimeout);\n  logger.debug(\"Executing {}\",new Object[]{selectQuery});\n  ResultSet resultSet;\n  resultSet=st.executeQuery(selectQuery);\n  if (resultSet.next()) {\n    rowCount=resultSet.getLong(1);\n    ResultSetMetaData rsmd=resultSet.getMetaData();\n    for (int i=2; i <= rsmd.getColumnCount(); i++) {\n      String resultColumnName=(StringUtils.isNotEmpty(rsmd.getColumnLabel(i)) ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i)).toLowerCase();\n      String fullyQualifiedStateKey=getStateKey(tableName,resultColumnName,dbAdapter);\n      String resultColumnCurrentMax=statePropertyMap.get(fullyQualifiedStateKey);\n      if (StringUtils.isEmpty(resultColumnCurrentMax) && !isDynamicTableName) {\n        resultColumnCurrentMax=statePropertyMap.get(resultColumnName);\n      }\n      int type=rsmd.getColumnType(i);\n      if (isDynamicTableName) {\n        columnTypeMap.put(fullyQualifiedStateKey,type);\n      }\n      try {\n        String newMaxValue=getMaxValueFromRow(resultSet,i,type,resultColumnCurrentMax,dbAdapter.getName());\n        if (newMaxValue != null) {\n          statePropertyMap.put(fullyQualifiedStateKey,newMaxValue);\n        }\n      }\n catch (      ParseException|IOException pie) {\n        throw new ProcessException(pie);\n      }\n    }\n  }\n else {\n    throw new SQLException(\"No rows returned from metadata query: \" + selectQuery);\n  }\n  IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n    String colName=maxValueColumnNameList.get(index);\n    maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n    String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n    if (!StringUtils.isEmpty(maxValue)) {\n      if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n        super.setup(context,false,finalFileToProcess);\n      }\n      Integer type=getColumnType(tableName,colName,dbAdapter);\n      maxValueClauses.add(colName + \" <= \" + getLiteralByType(type,maxValue,dbAdapter.getName()));\n    }\n  }\n);\n  whereClause=StringUtils.join(maxValueClauses,\" AND \");\n  final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n  for (long i=0; i < numberOfFetches; i++) {\n    Long limit=partitionSize == 0 ? null : (long)partitionSize;\n    Long offset=partitionSize == 0 ? null : i * partitionSize;\n    final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n    final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n    FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n    sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n    sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n    if (columnNames != null) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n    }\n    if (StringUtils.isNotBlank(whereClause)) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n    }\n    if (StringUtils.isNotBlank(maxColumnNames)) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n    }\n    sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n    if (partitionSize != 0) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n    }\n    session.transfer(sqlFlowFile,REL_SUCCESS);\n  }\n  if (fileToProcess != null) {\n    session.remove(fileToProcess);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 530,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 7563,
                        "startLineNumber": 280,
                        "startColumnNumber": 12,
                        "endLineNumber": 393,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "try (final Connection con=dbcpService.getConnection(finalFileToProcess == null ? Collections.emptyMap() : finalFileToProcess.getAttributes());final Statement st=con.createStatement()){\n  final Integer queryTimeout=context.getProperty(QUERY_TIMEOUT).evaluateAttributeExpressions(fileToProcess).asTimePeriod(TimeUnit.SECONDS).intValue();\n  st.setQueryTimeout(queryTimeout);\n  logger.debug(\"Executing {}\",new Object[]{selectQuery});\n  ResultSet resultSet;\n  resultSet=st.executeQuery(selectQuery);\n  if (resultSet.next()) {\n    rowCount=resultSet.getLong(1);\n    ResultSetMetaData rsmd=resultSet.getMetaData();\n    for (int i=2; i <= rsmd.getColumnCount(); i++) {\n      String resultColumnName=(StringUtils.isNotEmpty(rsmd.getColumnLabel(i)) ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i)).toLowerCase();\n      String fullyQualifiedStateKey=getStateKey(tableName,resultColumnName,dbAdapter);\n      String resultColumnCurrentMax=statePropertyMap.get(fullyQualifiedStateKey);\n      if (StringUtils.isEmpty(resultColumnCurrentMax) && !isDynamicTableName) {\n        resultColumnCurrentMax=statePropertyMap.get(resultColumnName);\n      }\n      int type=rsmd.getColumnType(i);\n      if (isDynamicTableName) {\n        columnTypeMap.put(fullyQualifiedStateKey,type);\n      }\n      try {\n        String newMaxValue=getMaxValueFromRow(resultSet,i,type,resultColumnCurrentMax,dbAdapter.getName());\n        if (newMaxValue != null) {\n          statePropertyMap.put(fullyQualifiedStateKey,newMaxValue);\n        }\n      }\n catch (      ParseException|IOException pie) {\n        throw new ProcessException(pie);\n      }\n    }\n  }\n else {\n    throw new SQLException(\"No rows returned from metadata query: \" + selectQuery);\n  }\n  IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n    String colName=maxValueColumnNameList.get(index);\n    maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n    String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n    if (!StringUtils.isEmpty(maxValue)) {\n      if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n        super.setup(context,false,finalFileToProcess);\n      }\n      Integer type=getColumnType(tableName,colName,dbAdapter);\n      maxValueClauses.add(colName + \" <= \" + getLiteralByType(type,maxValue,dbAdapter.getName()));\n    }\n  }\n);\n  whereClause=StringUtils.join(maxValueClauses,\" AND \");\n  final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n  for (long i=0; i < numberOfFetches; i++) {\n    Long limit=partitionSize == 0 ? null : (long)partitionSize;\n    Long offset=partitionSize == 0 ? null : i * partitionSize;\n    final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n    final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n    FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n    sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n    sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n    if (columnNames != null) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n    }\n    if (StringUtils.isNotBlank(whereClause)) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n    }\n    if (StringUtils.isNotBlank(maxColumnNames)) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n    }\n    sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n    if (partitionSize != 0) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n    }\n    session.transfer(sqlFlowFile,REL_SUCCESS);\n  }\n  if (fileToProcess != null) {\n    session.remove(fileToProcess);\n  }\n}\n catch (SQLException e) {\n  if (fileToProcess != null) {\n    logger.error(\"Unable to execute SQL select query {} due to {}, routing {} to failure\",new Object[]{selectQuery,e,fileToProcess});\n    fileToProcess=session.putAttribute(fileToProcess,\"generatetablefetch.sql.error\",e.getMessage());\n    session.transfer(fileToProcess,REL_FAILURE);\n  }\n else {\n    logger.error(\"Unable to execute SQL select query {} due to {}\",new Object[]{selectQuery,e});\n    throw new ProcessException(e);\n  }\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 620,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 12385,
                        "startLineNumber": 213,
                        "startColumnNumber": 12,
                        "endLineNumber": 404,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final Map<String,String> statePropertyMap=new HashMap<>(stateMap.toMap());\n  for (  final Map.Entry<String,String> maxProp : maxValueProperties.entrySet()) {\n    String maxPropKey=maxProp.getKey().toLowerCase();\n    String fullyQualifiedMaxPropKey=getStateKey(tableName,maxPropKey,dbAdapter);\n    if (!statePropertyMap.containsKey(fullyQualifiedMaxPropKey)) {\n      String newMaxPropValue;\n      if (statePropertyMap.containsKey(maxPropKey)) {\n        newMaxPropValue=statePropertyMap.get(maxPropKey);\n      }\n else {\n        newMaxPropValue=maxProp.getValue();\n      }\n      statePropertyMap.put(fullyQualifiedMaxPropKey,newMaxPropValue);\n    }\n  }\n  String whereClause=null;\n  List<String> maxValueColumnNameList=StringUtils.isEmpty(maxValueColumnNames) ? new ArrayList<>(0) : Arrays.asList(maxValueColumnNames.split(\"\\\\s*,\\\\s*\"));\n  List<String> maxValueClauses=new ArrayList<>(maxValueColumnNameList.size());\n  String columnsClause=null;\n  List<String> maxValueSelectColumns=new ArrayList<>(maxValueColumnNameList.size() + 1);\n  maxValueSelectColumns.add(\"COUNT(*)\");\n  IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n    String colName=maxValueColumnNameList.get(index);\n    maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n    String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n    if (!StringUtils.isEmpty(maxValue)) {\n      if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n        super.setup(context,false,finalFileToProcess);\n      }\n      Integer type=getColumnType(tableName,colName,dbAdapter);\n      maxValueClauses.add(colName + (index == 0 ? \" > \" : \" >= \") + getLiteralByType(type,maxValue,dbAdapter.getName()));\n    }\n  }\n);\n  if (customWhereClause != null) {\n    maxValueClauses.add(\"(\" + customWhereClause + \")\");\n  }\n  whereClause=StringUtils.join(maxValueClauses,\" AND \");\n  columnsClause=StringUtils.join(maxValueSelectColumns,\", \");\n  final String selectQuery=dbAdapter.getSelectStatement(tableName,columnsClause,whereClause,null,null,null);\n  long rowCount=0;\n  try (final Connection con=dbcpService.getConnection(finalFileToProcess == null ? Collections.emptyMap() : finalFileToProcess.getAttributes());final Statement st=con.createStatement()){\n    final Integer queryTimeout=context.getProperty(QUERY_TIMEOUT).evaluateAttributeExpressions(fileToProcess).asTimePeriod(TimeUnit.SECONDS).intValue();\n    st.setQueryTimeout(queryTimeout);\n    logger.debug(\"Executing {}\",new Object[]{selectQuery});\n    ResultSet resultSet;\n    resultSet=st.executeQuery(selectQuery);\n    if (resultSet.next()) {\n      rowCount=resultSet.getLong(1);\n      ResultSetMetaData rsmd=resultSet.getMetaData();\n      for (int i=2; i <= rsmd.getColumnCount(); i++) {\n        String resultColumnName=(StringUtils.isNotEmpty(rsmd.getColumnLabel(i)) ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i)).toLowerCase();\n        String fullyQualifiedStateKey=getStateKey(tableName,resultColumnName,dbAdapter);\n        String resultColumnCurrentMax=statePropertyMap.get(fullyQualifiedStateKey);\n        if (StringUtils.isEmpty(resultColumnCurrentMax) && !isDynamicTableName) {\n          resultColumnCurrentMax=statePropertyMap.get(resultColumnName);\n        }\n        int type=rsmd.getColumnType(i);\n        if (isDynamicTableName) {\n          columnTypeMap.put(fullyQualifiedStateKey,type);\n        }\n        try {\n          String newMaxValue=getMaxValueFromRow(resultSet,i,type,resultColumnCurrentMax,dbAdapter.getName());\n          if (newMaxValue != null) {\n            statePropertyMap.put(fullyQualifiedStateKey,newMaxValue);\n          }\n        }\n catch (        ParseException|IOException pie) {\n          throw new ProcessException(pie);\n        }\n      }\n    }\n else {\n      throw new SQLException(\"No rows returned from metadata query: \" + selectQuery);\n    }\n    IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n      String colName=maxValueColumnNameList.get(index);\n      maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n      String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n      if (!StringUtils.isEmpty(maxValue)) {\n        if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n          super.setup(context,false,finalFileToProcess);\n        }\n        Integer type=getColumnType(tableName,colName,dbAdapter);\n        maxValueClauses.add(colName + \" <= \" + getLiteralByType(type,maxValue,dbAdapter.getName()));\n      }\n    }\n);\n    whereClause=StringUtils.join(maxValueClauses,\" AND \");\n    final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n    for (long i=0; i < numberOfFetches; i++) {\n      Long limit=partitionSize == 0 ? null : (long)partitionSize;\n      Long offset=partitionSize == 0 ? null : i * partitionSize;\n      final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n      final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n      FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n      sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n      if (columnNames != null) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n      }\n      if (StringUtils.isNotBlank(whereClause)) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n      }\n      if (StringUtils.isNotBlank(maxColumnNames)) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n      }\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n      if (partitionSize != 0) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n      }\n      session.transfer(sqlFlowFile,REL_SUCCESS);\n    }\n    if (fileToProcess != null) {\n      session.remove(fileToProcess);\n    }\n  }\n catch (  SQLException e) {\n    if (fileToProcess != null) {\n      logger.error(\"Unable to execute SQL select query {} due to {}, routing {} to failure\",new Object[]{selectQuery,e,fileToProcess});\n      fileToProcess=session.putAttribute(fileToProcess,\"generatetablefetch.sql.error\",e.getMessage());\n      session.transfer(fileToProcess,REL_FAILURE);\n    }\n else {\n      logger.error(\"Unable to execute SQL select query {} due to {}\",new Object[]{selectQuery,e});\n      throw new ProcessException(e);\n    }\n  }\n  session.commit();\n  try {\n    stateManager.setState(statePropertyMap,Scope.CLUSTER);\n  }\n catch (  IOException ioe) {\n    logger.error(\"{} failed to update State Manager, observed maximum values will not be recorded. \" + \"Also, any generated SQL statements may be duplicated.\",new Object[]{this,ioe});\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 971,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 12730,
                        "startLineNumber": 213,
                        "startColumnNumber": 8,
                        "endLineNumber": 410,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  final Map<String,String> statePropertyMap=new HashMap<>(stateMap.toMap());\n  for (  final Map.Entry<String,String> maxProp : maxValueProperties.entrySet()) {\n    String maxPropKey=maxProp.getKey().toLowerCase();\n    String fullyQualifiedMaxPropKey=getStateKey(tableName,maxPropKey,dbAdapter);\n    if (!statePropertyMap.containsKey(fullyQualifiedMaxPropKey)) {\n      String newMaxPropValue;\n      if (statePropertyMap.containsKey(maxPropKey)) {\n        newMaxPropValue=statePropertyMap.get(maxPropKey);\n      }\n else {\n        newMaxPropValue=maxProp.getValue();\n      }\n      statePropertyMap.put(fullyQualifiedMaxPropKey,newMaxPropValue);\n    }\n  }\n  String whereClause=null;\n  List<String> maxValueColumnNameList=StringUtils.isEmpty(maxValueColumnNames) ? new ArrayList<>(0) : Arrays.asList(maxValueColumnNames.split(\"\\\\s*,\\\\s*\"));\n  List<String> maxValueClauses=new ArrayList<>(maxValueColumnNameList.size());\n  String columnsClause=null;\n  List<String> maxValueSelectColumns=new ArrayList<>(maxValueColumnNameList.size() + 1);\n  maxValueSelectColumns.add(\"COUNT(*)\");\n  IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n    String colName=maxValueColumnNameList.get(index);\n    maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n    String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n    if (!StringUtils.isEmpty(maxValue)) {\n      if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n        super.setup(context,false,finalFileToProcess);\n      }\n      Integer type=getColumnType(tableName,colName,dbAdapter);\n      maxValueClauses.add(colName + (index == 0 ? \" > \" : \" >= \") + getLiteralByType(type,maxValue,dbAdapter.getName()));\n    }\n  }\n);\n  if (customWhereClause != null) {\n    maxValueClauses.add(\"(\" + customWhereClause + \")\");\n  }\n  whereClause=StringUtils.join(maxValueClauses,\" AND \");\n  columnsClause=StringUtils.join(maxValueSelectColumns,\", \");\n  final String selectQuery=dbAdapter.getSelectStatement(tableName,columnsClause,whereClause,null,null,null);\n  long rowCount=0;\n  try (final Connection con=dbcpService.getConnection(finalFileToProcess == null ? Collections.emptyMap() : finalFileToProcess.getAttributes());final Statement st=con.createStatement()){\n    final Integer queryTimeout=context.getProperty(QUERY_TIMEOUT).evaluateAttributeExpressions(fileToProcess).asTimePeriod(TimeUnit.SECONDS).intValue();\n    st.setQueryTimeout(queryTimeout);\n    logger.debug(\"Executing {}\",new Object[]{selectQuery});\n    ResultSet resultSet;\n    resultSet=st.executeQuery(selectQuery);\n    if (resultSet.next()) {\n      rowCount=resultSet.getLong(1);\n      ResultSetMetaData rsmd=resultSet.getMetaData();\n      for (int i=2; i <= rsmd.getColumnCount(); i++) {\n        String resultColumnName=(StringUtils.isNotEmpty(rsmd.getColumnLabel(i)) ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i)).toLowerCase();\n        String fullyQualifiedStateKey=getStateKey(tableName,resultColumnName,dbAdapter);\n        String resultColumnCurrentMax=statePropertyMap.get(fullyQualifiedStateKey);\n        if (StringUtils.isEmpty(resultColumnCurrentMax) && !isDynamicTableName) {\n          resultColumnCurrentMax=statePropertyMap.get(resultColumnName);\n        }\n        int type=rsmd.getColumnType(i);\n        if (isDynamicTableName) {\n          columnTypeMap.put(fullyQualifiedStateKey,type);\n        }\n        try {\n          String newMaxValue=getMaxValueFromRow(resultSet,i,type,resultColumnCurrentMax,dbAdapter.getName());\n          if (newMaxValue != null) {\n            statePropertyMap.put(fullyQualifiedStateKey,newMaxValue);\n          }\n        }\n catch (        ParseException|IOException pie) {\n          throw new ProcessException(pie);\n        }\n      }\n    }\n else {\n      throw new SQLException(\"No rows returned from metadata query: \" + selectQuery);\n    }\n    IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n      String colName=maxValueColumnNameList.get(index);\n      maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n      String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n      if (!StringUtils.isEmpty(maxValue)) {\n        if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n          super.setup(context,false,finalFileToProcess);\n        }\n        Integer type=getColumnType(tableName,colName,dbAdapter);\n        maxValueClauses.add(colName + \" <= \" + getLiteralByType(type,maxValue,dbAdapter.getName()));\n      }\n    }\n);\n    whereClause=StringUtils.join(maxValueClauses,\" AND \");\n    final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n    for (long i=0; i < numberOfFetches; i++) {\n      Long limit=partitionSize == 0 ? null : (long)partitionSize;\n      Long offset=partitionSize == 0 ? null : i * partitionSize;\n      final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n      final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n      FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n      sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n      if (columnNames != null) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n      }\n      if (StringUtils.isNotBlank(whereClause)) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n      }\n      if (StringUtils.isNotBlank(maxColumnNames)) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n      }\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n      if (partitionSize != 0) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n      }\n      session.transfer(sqlFlowFile,REL_SUCCESS);\n    }\n    if (fileToProcess != null) {\n      session.remove(fileToProcess);\n    }\n  }\n catch (  SQLException e) {\n    if (fileToProcess != null) {\n      logger.error(\"Unable to execute SQL select query {} due to {}, routing {} to failure\",new Object[]{selectQuery,e,fileToProcess});\n      fileToProcess=session.putAttribute(fileToProcess,\"generatetablefetch.sql.error\",e.getMessage());\n      session.transfer(fileToProcess,REL_FAILURE);\n    }\n else {\n      logger.error(\"Unable to execute SQL select query {} due to {}\",new Object[]{selectQuery,e});\n      throw new ProcessException(e);\n    }\n  }\n  session.commit();\n  try {\n    stateManager.setState(statePropertyMap,Scope.CLUSTER);\n  }\n catch (  IOException ioe) {\n    logger.error(\"{} failed to update State Manager, observed maximum values will not be recorded. \" + \"Also, any generated SQL statements may be duplicated.\",new Object[]{this,ioe});\n  }\n}\n catch (final ProcessException pe) {\n  Throwable t=(pe.getCause() == null ? pe : pe.getCause());\n  logger.error(\"Error during processing: {}\",new Object[]{t.getMessage()},t);\n  session.rollback();\n  context.yield();\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 1018,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 14819,
                        "startLineNumber": 173,
                        "startColumnNumber": 124,
                        "endLineNumber": 411,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (!isDynamicTableName && !isDynamicMaxValues && !setupComplete.get()) {\n    super.setup(context);\n  }\n  ProcessSession session=sessionFactory.createSession();\n  FlowFile fileToProcess=null;\n  if (context.hasIncomingConnection()) {\n    fileToProcess=session.get();\n    if (fileToProcess == null) {\n      return;\n    }\n  }\n  final ComponentLog logger=getLogger();\n  final DBCPService dbcpService=context.getProperty(DBCP_SERVICE).asControllerService(DBCPService.class);\n  final DatabaseAdapter dbAdapter=dbAdapters.get(context.getProperty(DB_TYPE).getValue());\n  final String tableName=context.getProperty(TABLE_NAME).evaluateAttributeExpressions(fileToProcess).getValue();\n  final String columnNames=context.getProperty(COLUMN_NAMES).evaluateAttributeExpressions(fileToProcess).getValue();\n  final String maxValueColumnNames=context.getProperty(MAX_VALUE_COLUMN_NAMES).evaluateAttributeExpressions(fileToProcess).getValue();\n  final int partitionSize=context.getProperty(PARTITION_SIZE).evaluateAttributeExpressions(fileToProcess).asInteger();\n  final String customWhereClause=context.getProperty(WHERE_CLAUSE).evaluateAttributeExpressions(fileToProcess).getValue();\n  final StateManager stateManager=context.getStateManager();\n  final StateMap stateMap;\n  FlowFile finalFileToProcess=fileToProcess;\n  try {\n    stateMap=stateManager.getState(Scope.CLUSTER);\n  }\n catch (  final IOException ioe) {\n    logger.error(\"Failed to retrieve observed maximum values from the State Manager. Will not perform \" + \"query until this is accomplished.\",ioe);\n    context.yield();\n    return;\n  }\n  try {\n    final Map<String,String> statePropertyMap=new HashMap<>(stateMap.toMap());\n    for (    final Map.Entry<String,String> maxProp : maxValueProperties.entrySet()) {\n      String maxPropKey=maxProp.getKey().toLowerCase();\n      String fullyQualifiedMaxPropKey=getStateKey(tableName,maxPropKey,dbAdapter);\n      if (!statePropertyMap.containsKey(fullyQualifiedMaxPropKey)) {\n        String newMaxPropValue;\n        if (statePropertyMap.containsKey(maxPropKey)) {\n          newMaxPropValue=statePropertyMap.get(maxPropKey);\n        }\n else {\n          newMaxPropValue=maxProp.getValue();\n        }\n        statePropertyMap.put(fullyQualifiedMaxPropKey,newMaxPropValue);\n      }\n    }\n    String whereClause=null;\n    List<String> maxValueColumnNameList=StringUtils.isEmpty(maxValueColumnNames) ? new ArrayList<>(0) : Arrays.asList(maxValueColumnNames.split(\"\\\\s*,\\\\s*\"));\n    List<String> maxValueClauses=new ArrayList<>(maxValueColumnNameList.size());\n    String columnsClause=null;\n    List<String> maxValueSelectColumns=new ArrayList<>(maxValueColumnNameList.size() + 1);\n    maxValueSelectColumns.add(\"COUNT(*)\");\n    IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n      String colName=maxValueColumnNameList.get(index);\n      maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n      String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n      if (!StringUtils.isEmpty(maxValue)) {\n        if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n          super.setup(context,false,finalFileToProcess);\n        }\n        Integer type=getColumnType(tableName,colName,dbAdapter);\n        maxValueClauses.add(colName + (index == 0 ? \" > \" : \" >= \") + getLiteralByType(type,maxValue,dbAdapter.getName()));\n      }\n    }\n);\n    if (customWhereClause != null) {\n      maxValueClauses.add(\"(\" + customWhereClause + \")\");\n    }\n    whereClause=StringUtils.join(maxValueClauses,\" AND \");\n    columnsClause=StringUtils.join(maxValueSelectColumns,\", \");\n    final String selectQuery=dbAdapter.getSelectStatement(tableName,columnsClause,whereClause,null,null,null);\n    long rowCount=0;\n    try (final Connection con=dbcpService.getConnection(finalFileToProcess == null ? Collections.emptyMap() : finalFileToProcess.getAttributes());final Statement st=con.createStatement()){\n      final Integer queryTimeout=context.getProperty(QUERY_TIMEOUT).evaluateAttributeExpressions(fileToProcess).asTimePeriod(TimeUnit.SECONDS).intValue();\n      st.setQueryTimeout(queryTimeout);\n      logger.debug(\"Executing {}\",new Object[]{selectQuery});\n      ResultSet resultSet;\n      resultSet=st.executeQuery(selectQuery);\n      if (resultSet.next()) {\n        rowCount=resultSet.getLong(1);\n        ResultSetMetaData rsmd=resultSet.getMetaData();\n        for (int i=2; i <= rsmd.getColumnCount(); i++) {\n          String resultColumnName=(StringUtils.isNotEmpty(rsmd.getColumnLabel(i)) ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i)).toLowerCase();\n          String fullyQualifiedStateKey=getStateKey(tableName,resultColumnName,dbAdapter);\n          String resultColumnCurrentMax=statePropertyMap.get(fullyQualifiedStateKey);\n          if (StringUtils.isEmpty(resultColumnCurrentMax) && !isDynamicTableName) {\n            resultColumnCurrentMax=statePropertyMap.get(resultColumnName);\n          }\n          int type=rsmd.getColumnType(i);\n          if (isDynamicTableName) {\n            columnTypeMap.put(fullyQualifiedStateKey,type);\n          }\n          try {\n            String newMaxValue=getMaxValueFromRow(resultSet,i,type,resultColumnCurrentMax,dbAdapter.getName());\n            if (newMaxValue != null) {\n              statePropertyMap.put(fullyQualifiedStateKey,newMaxValue);\n            }\n          }\n catch (          ParseException|IOException pie) {\n            throw new ProcessException(pie);\n          }\n        }\n      }\n else {\n        throw new SQLException(\"No rows returned from metadata query: \" + selectQuery);\n      }\n      IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n        String colName=maxValueColumnNameList.get(index);\n        maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n        String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n        if (!StringUtils.isEmpty(maxValue)) {\n          if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n            super.setup(context,false,finalFileToProcess);\n          }\n          Integer type=getColumnType(tableName,colName,dbAdapter);\n          maxValueClauses.add(colName + \" <= \" + getLiteralByType(type,maxValue,dbAdapter.getName()));\n        }\n      }\n);\n      whereClause=StringUtils.join(maxValueClauses,\" AND \");\n      final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n      for (long i=0; i < numberOfFetches; i++) {\n        Long limit=partitionSize == 0 ? null : (long)partitionSize;\n        Long offset=partitionSize == 0 ? null : i * partitionSize;\n        final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n        final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n        FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n        sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n        if (columnNames != null) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n        }\n        if (StringUtils.isNotBlank(whereClause)) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n        }\n        if (StringUtils.isNotBlank(maxColumnNames)) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n        }\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n        if (partitionSize != 0) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n        }\n        session.transfer(sqlFlowFile,REL_SUCCESS);\n      }\n      if (fileToProcess != null) {\n        session.remove(fileToProcess);\n      }\n    }\n catch (    SQLException e) {\n      if (fileToProcess != null) {\n        logger.error(\"Unable to execute SQL select query {} due to {}, routing {} to failure\",new Object[]{selectQuery,e,fileToProcess});\n        fileToProcess=session.putAttribute(fileToProcess,\"generatetablefetch.sql.error\",e.getMessage());\n        session.transfer(fileToProcess,REL_FAILURE);\n      }\n else {\n        logger.error(\"Unable to execute SQL select query {} due to {}\",new Object[]{selectQuery,e});\n        throw new ProcessException(e);\n      }\n    }\n    session.commit();\n    try {\n      stateManager.setState(statePropertyMap,Scope.CLUSTER);\n    }\n catch (    IOException ioe) {\n      logger.error(\"{} failed to update State Manager, observed maximum values will not be recorded. \" + \"Also, any generated SQL statements may be duplicated.\",new Object[]{this,ioe});\n    }\n  }\n catch (  final ProcessException pe) {\n    Throwable t=(pe.getCause() == null ? pe : pe.getCause());\n    logger.error(\"Error during processing: {}\",new Object[]{t.getMessage()},t);\n    session.rollback();\n    context.yield();\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 1229,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 14953,
                        "startLineNumber": 172,
                        "startColumnNumber": 4,
                        "endLineNumber": 411,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void onTrigger(final ProcessContext context,final ProcessSessionFactory sessionFactory) throws ProcessException {\n  if (!isDynamicTableName && !isDynamicMaxValues && !setupComplete.get()) {\n    super.setup(context);\n  }\n  ProcessSession session=sessionFactory.createSession();\n  FlowFile fileToProcess=null;\n  if (context.hasIncomingConnection()) {\n    fileToProcess=session.get();\n    if (fileToProcess == null) {\n      return;\n    }\n  }\n  final ComponentLog logger=getLogger();\n  final DBCPService dbcpService=context.getProperty(DBCP_SERVICE).asControllerService(DBCPService.class);\n  final DatabaseAdapter dbAdapter=dbAdapters.get(context.getProperty(DB_TYPE).getValue());\n  final String tableName=context.getProperty(TABLE_NAME).evaluateAttributeExpressions(fileToProcess).getValue();\n  final String columnNames=context.getProperty(COLUMN_NAMES).evaluateAttributeExpressions(fileToProcess).getValue();\n  final String maxValueColumnNames=context.getProperty(MAX_VALUE_COLUMN_NAMES).evaluateAttributeExpressions(fileToProcess).getValue();\n  final int partitionSize=context.getProperty(PARTITION_SIZE).evaluateAttributeExpressions(fileToProcess).asInteger();\n  final String customWhereClause=context.getProperty(WHERE_CLAUSE).evaluateAttributeExpressions(fileToProcess).getValue();\n  final StateManager stateManager=context.getStateManager();\n  final StateMap stateMap;\n  FlowFile finalFileToProcess=fileToProcess;\n  try {\n    stateMap=stateManager.getState(Scope.CLUSTER);\n  }\n catch (  final IOException ioe) {\n    logger.error(\"Failed to retrieve observed maximum values from the State Manager. Will not perform \" + \"query until this is accomplished.\",ioe);\n    context.yield();\n    return;\n  }\n  try {\n    final Map<String,String> statePropertyMap=new HashMap<>(stateMap.toMap());\n    for (    final Map.Entry<String,String> maxProp : maxValueProperties.entrySet()) {\n      String maxPropKey=maxProp.getKey().toLowerCase();\n      String fullyQualifiedMaxPropKey=getStateKey(tableName,maxPropKey,dbAdapter);\n      if (!statePropertyMap.containsKey(fullyQualifiedMaxPropKey)) {\n        String newMaxPropValue;\n        if (statePropertyMap.containsKey(maxPropKey)) {\n          newMaxPropValue=statePropertyMap.get(maxPropKey);\n        }\n else {\n          newMaxPropValue=maxProp.getValue();\n        }\n        statePropertyMap.put(fullyQualifiedMaxPropKey,newMaxPropValue);\n      }\n    }\n    String whereClause=null;\n    List<String> maxValueColumnNameList=StringUtils.isEmpty(maxValueColumnNames) ? new ArrayList<>(0) : Arrays.asList(maxValueColumnNames.split(\"\\\\s*,\\\\s*\"));\n    List<String> maxValueClauses=new ArrayList<>(maxValueColumnNameList.size());\n    String columnsClause=null;\n    List<String> maxValueSelectColumns=new ArrayList<>(maxValueColumnNameList.size() + 1);\n    maxValueSelectColumns.add(\"COUNT(*)\");\n    IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n      String colName=maxValueColumnNameList.get(index);\n      maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n      String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n      if (!StringUtils.isEmpty(maxValue)) {\n        if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n          super.setup(context,false,finalFileToProcess);\n        }\n        Integer type=getColumnType(tableName,colName,dbAdapter);\n        maxValueClauses.add(colName + (index == 0 ? \" > \" : \" >= \") + getLiteralByType(type,maxValue,dbAdapter.getName()));\n      }\n    }\n);\n    if (customWhereClause != null) {\n      maxValueClauses.add(\"(\" + customWhereClause + \")\");\n    }\n    whereClause=StringUtils.join(maxValueClauses,\" AND \");\n    columnsClause=StringUtils.join(maxValueSelectColumns,\", \");\n    final String selectQuery=dbAdapter.getSelectStatement(tableName,columnsClause,whereClause,null,null,null);\n    long rowCount=0;\n    try (final Connection con=dbcpService.getConnection(finalFileToProcess == null ? Collections.emptyMap() : finalFileToProcess.getAttributes());final Statement st=con.createStatement()){\n      final Integer queryTimeout=context.getProperty(QUERY_TIMEOUT).evaluateAttributeExpressions(fileToProcess).asTimePeriod(TimeUnit.SECONDS).intValue();\n      st.setQueryTimeout(queryTimeout);\n      logger.debug(\"Executing {}\",new Object[]{selectQuery});\n      ResultSet resultSet;\n      resultSet=st.executeQuery(selectQuery);\n      if (resultSet.next()) {\n        rowCount=resultSet.getLong(1);\n        ResultSetMetaData rsmd=resultSet.getMetaData();\n        for (int i=2; i <= rsmd.getColumnCount(); i++) {\n          String resultColumnName=(StringUtils.isNotEmpty(rsmd.getColumnLabel(i)) ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i)).toLowerCase();\n          String fullyQualifiedStateKey=getStateKey(tableName,resultColumnName,dbAdapter);\n          String resultColumnCurrentMax=statePropertyMap.get(fullyQualifiedStateKey);\n          if (StringUtils.isEmpty(resultColumnCurrentMax) && !isDynamicTableName) {\n            resultColumnCurrentMax=statePropertyMap.get(resultColumnName);\n          }\n          int type=rsmd.getColumnType(i);\n          if (isDynamicTableName) {\n            columnTypeMap.put(fullyQualifiedStateKey,type);\n          }\n          try {\n            String newMaxValue=getMaxValueFromRow(resultSet,i,type,resultColumnCurrentMax,dbAdapter.getName());\n            if (newMaxValue != null) {\n              statePropertyMap.put(fullyQualifiedStateKey,newMaxValue);\n            }\n          }\n catch (          ParseException|IOException pie) {\n            throw new ProcessException(pie);\n          }\n        }\n      }\n else {\n        throw new SQLException(\"No rows returned from metadata query: \" + selectQuery);\n      }\n      IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n        String colName=maxValueColumnNameList.get(index);\n        maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n        String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n        if (!StringUtils.isEmpty(maxValue)) {\n          if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n            super.setup(context,false,finalFileToProcess);\n          }\n          Integer type=getColumnType(tableName,colName,dbAdapter);\n          maxValueClauses.add(colName + \" <= \" + getLiteralByType(type,maxValue,dbAdapter.getName()));\n        }\n      }\n);\n      whereClause=StringUtils.join(maxValueClauses,\" AND \");\n      final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n      for (long i=0; i < numberOfFetches; i++) {\n        Long limit=partitionSize == 0 ? null : (long)partitionSize;\n        Long offset=partitionSize == 0 ? null : i * partitionSize;\n        final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n        final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n        FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n        sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n        if (columnNames != null) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n        }\n        if (StringUtils.isNotBlank(whereClause)) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n        }\n        if (StringUtils.isNotBlank(maxColumnNames)) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n        }\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n        if (partitionSize != 0) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n        }\n        session.transfer(sqlFlowFile,REL_SUCCESS);\n      }\n      if (fileToProcess != null) {\n        session.remove(fileToProcess);\n      }\n    }\n catch (    SQLException e) {\n      if (fileToProcess != null) {\n        logger.error(\"Unable to execute SQL select query {} due to {}, routing {} to failure\",new Object[]{selectQuery,e,fileToProcess});\n        fileToProcess=session.putAttribute(fileToProcess,\"generatetablefetch.sql.error\",e.getMessage());\n        session.transfer(fileToProcess,REL_FAILURE);\n      }\n else {\n        logger.error(\"Unable to execute SQL select query {} due to {}\",new Object[]{selectQuery,e});\n        throw new ProcessException(e);\n      }\n    }\n    session.commit();\n    try {\n      stateManager.setState(statePropertyMap,Scope.CLUSTER);\n    }\n catch (    IOException ioe) {\n      logger.error(\"{} failed to update State Manager, observed maximum values will not be recorded. \" + \"Also, any generated SQL statements may be duplicated.\",new Object[]{this,ioe});\n    }\n  }\n catch (  final ProcessException pe) {\n    Throwable t=(pe.getCause() == null ? pe : pe.getCause());\n    logger.error(\"Error during processing: {}\",new Object[]{t.getMessage()},t);\n    session.rollback();\n    context.yield();\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 1247,
                    "astHeight": 18
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 62,
                    "startLineNumber": 357,
                    "startColumnNumber": 20,
                    "endLineNumber": 357,
                    "endColumnNumber": 82
                },
                "nodeContext": "Long limit=partitionSize == 0 ? null : (long)partitionSize;\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 13,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "0",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 358,
                "startColumnNumber": 51,
                "endLineNumber": 358,
                "endColumnNumber": 52
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,expression]",
                    "nodePosition": {
                        "charLength": 18,
                        "startLineNumber": 358,
                        "startColumnNumber": 34,
                        "endLineNumber": 358,
                        "endColumnNumber": 52
                    },
                    "nodeContext": "partitionSize == 0",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 45,
                        "startLineNumber": 358,
                        "startColumnNumber": 34,
                        "endLineNumber": 358,
                        "endColumnNumber": 79
                    },
                    "nodeContext": "partitionSize == 0 ? null : i * partitionSize",
                    "nodeType": "ConditionalExpression",
                    "astNodeNumber": 8,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 54,
                        "startLineNumber": 358,
                        "startColumnNumber": 25,
                        "endLineNumber": 358,
                        "endColumnNumber": 79
                    },
                    "nodeContext": "offset=partitionSize == 0 ? null : i * partitionSize",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 10,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 60,
                        "startLineNumber": 358,
                        "startColumnNumber": 20,
                        "endLineNumber": 358,
                        "endColumnNumber": 80
                    },
                    "nodeContext": "Long offset=partitionSize == 0 ? null : i * partitionSize;\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 13,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 1735,
                        "startLineNumber": 356,
                        "startColumnNumber": 59,
                        "endLineNumber": 378,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  Long limit=partitionSize == 0 ? null : (long)partitionSize;\n  Long offset=partitionSize == 0 ? null : i * partitionSize;\n  final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n  final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n  FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n  sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n  sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n  if (columnNames != null) {\n    sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n  }\n  if (StringUtils.isNotBlank(whereClause)) {\n    sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n  }\n  if (StringUtils.isNotBlank(maxColumnNames)) {\n    sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n  }\n  sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n  if (partitionSize != 0) {\n    sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n  }\n  session.transfer(sqlFlowFile,REL_SUCCESS);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 174,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1778,
                        "startLineNumber": 356,
                        "startColumnNumber": 16,
                        "endLineNumber": 378,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "for (long i=0; i < numberOfFetches; i++) {\n  Long limit=partitionSize == 0 ? null : (long)partitionSize;\n  Long offset=partitionSize == 0 ? null : i * partitionSize;\n  final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n  final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n  FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n  sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n  sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n  if (columnNames != null) {\n    sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n  }\n  if (StringUtils.isNotBlank(whereClause)) {\n    sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n  }\n  if (StringUtils.isNotBlank(maxColumnNames)) {\n    sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n  }\n  sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n  if (partitionSize != 0) {\n    sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n  }\n  session.transfer(sqlFlowFile,REL_SUCCESS);\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 185,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 6723,
                        "startLineNumber": 281,
                        "startColumnNumber": 61,
                        "endLineNumber": 383,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  final Integer queryTimeout=context.getProperty(QUERY_TIMEOUT).evaluateAttributeExpressions(fileToProcess).asTimePeriod(TimeUnit.SECONDS).intValue();\n  st.setQueryTimeout(queryTimeout);\n  logger.debug(\"Executing {}\",new Object[]{selectQuery});\n  ResultSet resultSet;\n  resultSet=st.executeQuery(selectQuery);\n  if (resultSet.next()) {\n    rowCount=resultSet.getLong(1);\n    ResultSetMetaData rsmd=resultSet.getMetaData();\n    for (int i=2; i <= rsmd.getColumnCount(); i++) {\n      String resultColumnName=(StringUtils.isNotEmpty(rsmd.getColumnLabel(i)) ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i)).toLowerCase();\n      String fullyQualifiedStateKey=getStateKey(tableName,resultColumnName,dbAdapter);\n      String resultColumnCurrentMax=statePropertyMap.get(fullyQualifiedStateKey);\n      if (StringUtils.isEmpty(resultColumnCurrentMax) && !isDynamicTableName) {\n        resultColumnCurrentMax=statePropertyMap.get(resultColumnName);\n      }\n      int type=rsmd.getColumnType(i);\n      if (isDynamicTableName) {\n        columnTypeMap.put(fullyQualifiedStateKey,type);\n      }\n      try {\n        String newMaxValue=getMaxValueFromRow(resultSet,i,type,resultColumnCurrentMax,dbAdapter.getName());\n        if (newMaxValue != null) {\n          statePropertyMap.put(fullyQualifiedStateKey,newMaxValue);\n        }\n      }\n catch (      ParseException|IOException pie) {\n        throw new ProcessException(pie);\n      }\n    }\n  }\n else {\n    throw new SQLException(\"No rows returned from metadata query: \" + selectQuery);\n  }\n  IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n    String colName=maxValueColumnNameList.get(index);\n    maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n    String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n    if (!StringUtils.isEmpty(maxValue)) {\n      if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n        super.setup(context,false,finalFileToProcess);\n      }\n      Integer type=getColumnType(tableName,colName,dbAdapter);\n      maxValueClauses.add(colName + \" <= \" + getLiteralByType(type,maxValue,dbAdapter.getName()));\n    }\n  }\n);\n  whereClause=StringUtils.join(maxValueClauses,\" AND \");\n  final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n  for (long i=0; i < numberOfFetches; i++) {\n    Long limit=partitionSize == 0 ? null : (long)partitionSize;\n    Long offset=partitionSize == 0 ? null : i * partitionSize;\n    final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n    final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n    FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n    sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n    sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n    if (columnNames != null) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n    }\n    if (StringUtils.isNotBlank(whereClause)) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n    }\n    if (StringUtils.isNotBlank(maxColumnNames)) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n    }\n    sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n    if (partitionSize != 0) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n    }\n    session.transfer(sqlFlowFile,REL_SUCCESS);\n  }\n  if (fileToProcess != null) {\n    session.remove(fileToProcess);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 530,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 7563,
                        "startLineNumber": 280,
                        "startColumnNumber": 12,
                        "endLineNumber": 393,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "try (final Connection con=dbcpService.getConnection(finalFileToProcess == null ? Collections.emptyMap() : finalFileToProcess.getAttributes());final Statement st=con.createStatement()){\n  final Integer queryTimeout=context.getProperty(QUERY_TIMEOUT).evaluateAttributeExpressions(fileToProcess).asTimePeriod(TimeUnit.SECONDS).intValue();\n  st.setQueryTimeout(queryTimeout);\n  logger.debug(\"Executing {}\",new Object[]{selectQuery});\n  ResultSet resultSet;\n  resultSet=st.executeQuery(selectQuery);\n  if (resultSet.next()) {\n    rowCount=resultSet.getLong(1);\n    ResultSetMetaData rsmd=resultSet.getMetaData();\n    for (int i=2; i <= rsmd.getColumnCount(); i++) {\n      String resultColumnName=(StringUtils.isNotEmpty(rsmd.getColumnLabel(i)) ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i)).toLowerCase();\n      String fullyQualifiedStateKey=getStateKey(tableName,resultColumnName,dbAdapter);\n      String resultColumnCurrentMax=statePropertyMap.get(fullyQualifiedStateKey);\n      if (StringUtils.isEmpty(resultColumnCurrentMax) && !isDynamicTableName) {\n        resultColumnCurrentMax=statePropertyMap.get(resultColumnName);\n      }\n      int type=rsmd.getColumnType(i);\n      if (isDynamicTableName) {\n        columnTypeMap.put(fullyQualifiedStateKey,type);\n      }\n      try {\n        String newMaxValue=getMaxValueFromRow(resultSet,i,type,resultColumnCurrentMax,dbAdapter.getName());\n        if (newMaxValue != null) {\n          statePropertyMap.put(fullyQualifiedStateKey,newMaxValue);\n        }\n      }\n catch (      ParseException|IOException pie) {\n        throw new ProcessException(pie);\n      }\n    }\n  }\n else {\n    throw new SQLException(\"No rows returned from metadata query: \" + selectQuery);\n  }\n  IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n    String colName=maxValueColumnNameList.get(index);\n    maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n    String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n    if (!StringUtils.isEmpty(maxValue)) {\n      if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n        super.setup(context,false,finalFileToProcess);\n      }\n      Integer type=getColumnType(tableName,colName,dbAdapter);\n      maxValueClauses.add(colName + \" <= \" + getLiteralByType(type,maxValue,dbAdapter.getName()));\n    }\n  }\n);\n  whereClause=StringUtils.join(maxValueClauses,\" AND \");\n  final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n  for (long i=0; i < numberOfFetches; i++) {\n    Long limit=partitionSize == 0 ? null : (long)partitionSize;\n    Long offset=partitionSize == 0 ? null : i * partitionSize;\n    final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n    final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n    FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n    sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n    sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n    if (columnNames != null) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n    }\n    if (StringUtils.isNotBlank(whereClause)) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n    }\n    if (StringUtils.isNotBlank(maxColumnNames)) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n    }\n    sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n    if (partitionSize != 0) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n    }\n    session.transfer(sqlFlowFile,REL_SUCCESS);\n  }\n  if (fileToProcess != null) {\n    session.remove(fileToProcess);\n  }\n}\n catch (SQLException e) {\n  if (fileToProcess != null) {\n    logger.error(\"Unable to execute SQL select query {} due to {}, routing {} to failure\",new Object[]{selectQuery,e,fileToProcess});\n    fileToProcess=session.putAttribute(fileToProcess,\"generatetablefetch.sql.error\",e.getMessage());\n    session.transfer(fileToProcess,REL_FAILURE);\n  }\n else {\n    logger.error(\"Unable to execute SQL select query {} due to {}\",new Object[]{selectQuery,e});\n    throw new ProcessException(e);\n  }\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 620,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 12385,
                        "startLineNumber": 213,
                        "startColumnNumber": 12,
                        "endLineNumber": 404,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final Map<String,String> statePropertyMap=new HashMap<>(stateMap.toMap());\n  for (  final Map.Entry<String,String> maxProp : maxValueProperties.entrySet()) {\n    String maxPropKey=maxProp.getKey().toLowerCase();\n    String fullyQualifiedMaxPropKey=getStateKey(tableName,maxPropKey,dbAdapter);\n    if (!statePropertyMap.containsKey(fullyQualifiedMaxPropKey)) {\n      String newMaxPropValue;\n      if (statePropertyMap.containsKey(maxPropKey)) {\n        newMaxPropValue=statePropertyMap.get(maxPropKey);\n      }\n else {\n        newMaxPropValue=maxProp.getValue();\n      }\n      statePropertyMap.put(fullyQualifiedMaxPropKey,newMaxPropValue);\n    }\n  }\n  String whereClause=null;\n  List<String> maxValueColumnNameList=StringUtils.isEmpty(maxValueColumnNames) ? new ArrayList<>(0) : Arrays.asList(maxValueColumnNames.split(\"\\\\s*,\\\\s*\"));\n  List<String> maxValueClauses=new ArrayList<>(maxValueColumnNameList.size());\n  String columnsClause=null;\n  List<String> maxValueSelectColumns=new ArrayList<>(maxValueColumnNameList.size() + 1);\n  maxValueSelectColumns.add(\"COUNT(*)\");\n  IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n    String colName=maxValueColumnNameList.get(index);\n    maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n    String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n    if (!StringUtils.isEmpty(maxValue)) {\n      if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n        super.setup(context,false,finalFileToProcess);\n      }\n      Integer type=getColumnType(tableName,colName,dbAdapter);\n      maxValueClauses.add(colName + (index == 0 ? \" > \" : \" >= \") + getLiteralByType(type,maxValue,dbAdapter.getName()));\n    }\n  }\n);\n  if (customWhereClause != null) {\n    maxValueClauses.add(\"(\" + customWhereClause + \")\");\n  }\n  whereClause=StringUtils.join(maxValueClauses,\" AND \");\n  columnsClause=StringUtils.join(maxValueSelectColumns,\", \");\n  final String selectQuery=dbAdapter.getSelectStatement(tableName,columnsClause,whereClause,null,null,null);\n  long rowCount=0;\n  try (final Connection con=dbcpService.getConnection(finalFileToProcess == null ? Collections.emptyMap() : finalFileToProcess.getAttributes());final Statement st=con.createStatement()){\n    final Integer queryTimeout=context.getProperty(QUERY_TIMEOUT).evaluateAttributeExpressions(fileToProcess).asTimePeriod(TimeUnit.SECONDS).intValue();\n    st.setQueryTimeout(queryTimeout);\n    logger.debug(\"Executing {}\",new Object[]{selectQuery});\n    ResultSet resultSet;\n    resultSet=st.executeQuery(selectQuery);\n    if (resultSet.next()) {\n      rowCount=resultSet.getLong(1);\n      ResultSetMetaData rsmd=resultSet.getMetaData();\n      for (int i=2; i <= rsmd.getColumnCount(); i++) {\n        String resultColumnName=(StringUtils.isNotEmpty(rsmd.getColumnLabel(i)) ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i)).toLowerCase();\n        String fullyQualifiedStateKey=getStateKey(tableName,resultColumnName,dbAdapter);\n        String resultColumnCurrentMax=statePropertyMap.get(fullyQualifiedStateKey);\n        if (StringUtils.isEmpty(resultColumnCurrentMax) && !isDynamicTableName) {\n          resultColumnCurrentMax=statePropertyMap.get(resultColumnName);\n        }\n        int type=rsmd.getColumnType(i);\n        if (isDynamicTableName) {\n          columnTypeMap.put(fullyQualifiedStateKey,type);\n        }\n        try {\n          String newMaxValue=getMaxValueFromRow(resultSet,i,type,resultColumnCurrentMax,dbAdapter.getName());\n          if (newMaxValue != null) {\n            statePropertyMap.put(fullyQualifiedStateKey,newMaxValue);\n          }\n        }\n catch (        ParseException|IOException pie) {\n          throw new ProcessException(pie);\n        }\n      }\n    }\n else {\n      throw new SQLException(\"No rows returned from metadata query: \" + selectQuery);\n    }\n    IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n      String colName=maxValueColumnNameList.get(index);\n      maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n      String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n      if (!StringUtils.isEmpty(maxValue)) {\n        if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n          super.setup(context,false,finalFileToProcess);\n        }\n        Integer type=getColumnType(tableName,colName,dbAdapter);\n        maxValueClauses.add(colName + \" <= \" + getLiteralByType(type,maxValue,dbAdapter.getName()));\n      }\n    }\n);\n    whereClause=StringUtils.join(maxValueClauses,\" AND \");\n    final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n    for (long i=0; i < numberOfFetches; i++) {\n      Long limit=partitionSize == 0 ? null : (long)partitionSize;\n      Long offset=partitionSize == 0 ? null : i * partitionSize;\n      final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n      final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n      FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n      sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n      if (columnNames != null) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n      }\n      if (StringUtils.isNotBlank(whereClause)) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n      }\n      if (StringUtils.isNotBlank(maxColumnNames)) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n      }\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n      if (partitionSize != 0) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n      }\n      session.transfer(sqlFlowFile,REL_SUCCESS);\n    }\n    if (fileToProcess != null) {\n      session.remove(fileToProcess);\n    }\n  }\n catch (  SQLException e) {\n    if (fileToProcess != null) {\n      logger.error(\"Unable to execute SQL select query {} due to {}, routing {} to failure\",new Object[]{selectQuery,e,fileToProcess});\n      fileToProcess=session.putAttribute(fileToProcess,\"generatetablefetch.sql.error\",e.getMessage());\n      session.transfer(fileToProcess,REL_FAILURE);\n    }\n else {\n      logger.error(\"Unable to execute SQL select query {} due to {}\",new Object[]{selectQuery,e});\n      throw new ProcessException(e);\n    }\n  }\n  session.commit();\n  try {\n    stateManager.setState(statePropertyMap,Scope.CLUSTER);\n  }\n catch (  IOException ioe) {\n    logger.error(\"{} failed to update State Manager, observed maximum values will not be recorded. \" + \"Also, any generated SQL statements may be duplicated.\",new Object[]{this,ioe});\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 971,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 12730,
                        "startLineNumber": 213,
                        "startColumnNumber": 8,
                        "endLineNumber": 410,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  final Map<String,String> statePropertyMap=new HashMap<>(stateMap.toMap());\n  for (  final Map.Entry<String,String> maxProp : maxValueProperties.entrySet()) {\n    String maxPropKey=maxProp.getKey().toLowerCase();\n    String fullyQualifiedMaxPropKey=getStateKey(tableName,maxPropKey,dbAdapter);\n    if (!statePropertyMap.containsKey(fullyQualifiedMaxPropKey)) {\n      String newMaxPropValue;\n      if (statePropertyMap.containsKey(maxPropKey)) {\n        newMaxPropValue=statePropertyMap.get(maxPropKey);\n      }\n else {\n        newMaxPropValue=maxProp.getValue();\n      }\n      statePropertyMap.put(fullyQualifiedMaxPropKey,newMaxPropValue);\n    }\n  }\n  String whereClause=null;\n  List<String> maxValueColumnNameList=StringUtils.isEmpty(maxValueColumnNames) ? new ArrayList<>(0) : Arrays.asList(maxValueColumnNames.split(\"\\\\s*,\\\\s*\"));\n  List<String> maxValueClauses=new ArrayList<>(maxValueColumnNameList.size());\n  String columnsClause=null;\n  List<String> maxValueSelectColumns=new ArrayList<>(maxValueColumnNameList.size() + 1);\n  maxValueSelectColumns.add(\"COUNT(*)\");\n  IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n    String colName=maxValueColumnNameList.get(index);\n    maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n    String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n    if (!StringUtils.isEmpty(maxValue)) {\n      if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n        super.setup(context,false,finalFileToProcess);\n      }\n      Integer type=getColumnType(tableName,colName,dbAdapter);\n      maxValueClauses.add(colName + (index == 0 ? \" > \" : \" >= \") + getLiteralByType(type,maxValue,dbAdapter.getName()));\n    }\n  }\n);\n  if (customWhereClause != null) {\n    maxValueClauses.add(\"(\" + customWhereClause + \")\");\n  }\n  whereClause=StringUtils.join(maxValueClauses,\" AND \");\n  columnsClause=StringUtils.join(maxValueSelectColumns,\", \");\n  final String selectQuery=dbAdapter.getSelectStatement(tableName,columnsClause,whereClause,null,null,null);\n  long rowCount=0;\n  try (final Connection con=dbcpService.getConnection(finalFileToProcess == null ? Collections.emptyMap() : finalFileToProcess.getAttributes());final Statement st=con.createStatement()){\n    final Integer queryTimeout=context.getProperty(QUERY_TIMEOUT).evaluateAttributeExpressions(fileToProcess).asTimePeriod(TimeUnit.SECONDS).intValue();\n    st.setQueryTimeout(queryTimeout);\n    logger.debug(\"Executing {}\",new Object[]{selectQuery});\n    ResultSet resultSet;\n    resultSet=st.executeQuery(selectQuery);\n    if (resultSet.next()) {\n      rowCount=resultSet.getLong(1);\n      ResultSetMetaData rsmd=resultSet.getMetaData();\n      for (int i=2; i <= rsmd.getColumnCount(); i++) {\n        String resultColumnName=(StringUtils.isNotEmpty(rsmd.getColumnLabel(i)) ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i)).toLowerCase();\n        String fullyQualifiedStateKey=getStateKey(tableName,resultColumnName,dbAdapter);\n        String resultColumnCurrentMax=statePropertyMap.get(fullyQualifiedStateKey);\n        if (StringUtils.isEmpty(resultColumnCurrentMax) && !isDynamicTableName) {\n          resultColumnCurrentMax=statePropertyMap.get(resultColumnName);\n        }\n        int type=rsmd.getColumnType(i);\n        if (isDynamicTableName) {\n          columnTypeMap.put(fullyQualifiedStateKey,type);\n        }\n        try {\n          String newMaxValue=getMaxValueFromRow(resultSet,i,type,resultColumnCurrentMax,dbAdapter.getName());\n          if (newMaxValue != null) {\n            statePropertyMap.put(fullyQualifiedStateKey,newMaxValue);\n          }\n        }\n catch (        ParseException|IOException pie) {\n          throw new ProcessException(pie);\n        }\n      }\n    }\n else {\n      throw new SQLException(\"No rows returned from metadata query: \" + selectQuery);\n    }\n    IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n      String colName=maxValueColumnNameList.get(index);\n      maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n      String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n      if (!StringUtils.isEmpty(maxValue)) {\n        if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n          super.setup(context,false,finalFileToProcess);\n        }\n        Integer type=getColumnType(tableName,colName,dbAdapter);\n        maxValueClauses.add(colName + \" <= \" + getLiteralByType(type,maxValue,dbAdapter.getName()));\n      }\n    }\n);\n    whereClause=StringUtils.join(maxValueClauses,\" AND \");\n    final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n    for (long i=0; i < numberOfFetches; i++) {\n      Long limit=partitionSize == 0 ? null : (long)partitionSize;\n      Long offset=partitionSize == 0 ? null : i * partitionSize;\n      final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n      final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n      FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n      sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n      if (columnNames != null) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n      }\n      if (StringUtils.isNotBlank(whereClause)) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n      }\n      if (StringUtils.isNotBlank(maxColumnNames)) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n      }\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n      if (partitionSize != 0) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n      }\n      session.transfer(sqlFlowFile,REL_SUCCESS);\n    }\n    if (fileToProcess != null) {\n      session.remove(fileToProcess);\n    }\n  }\n catch (  SQLException e) {\n    if (fileToProcess != null) {\n      logger.error(\"Unable to execute SQL select query {} due to {}, routing {} to failure\",new Object[]{selectQuery,e,fileToProcess});\n      fileToProcess=session.putAttribute(fileToProcess,\"generatetablefetch.sql.error\",e.getMessage());\n      session.transfer(fileToProcess,REL_FAILURE);\n    }\n else {\n      logger.error(\"Unable to execute SQL select query {} due to {}\",new Object[]{selectQuery,e});\n      throw new ProcessException(e);\n    }\n  }\n  session.commit();\n  try {\n    stateManager.setState(statePropertyMap,Scope.CLUSTER);\n  }\n catch (  IOException ioe) {\n    logger.error(\"{} failed to update State Manager, observed maximum values will not be recorded. \" + \"Also, any generated SQL statements may be duplicated.\",new Object[]{this,ioe});\n  }\n}\n catch (final ProcessException pe) {\n  Throwable t=(pe.getCause() == null ? pe : pe.getCause());\n  logger.error(\"Error during processing: {}\",new Object[]{t.getMessage()},t);\n  session.rollback();\n  context.yield();\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 1018,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 14819,
                        "startLineNumber": 173,
                        "startColumnNumber": 124,
                        "endLineNumber": 411,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (!isDynamicTableName && !isDynamicMaxValues && !setupComplete.get()) {\n    super.setup(context);\n  }\n  ProcessSession session=sessionFactory.createSession();\n  FlowFile fileToProcess=null;\n  if (context.hasIncomingConnection()) {\n    fileToProcess=session.get();\n    if (fileToProcess == null) {\n      return;\n    }\n  }\n  final ComponentLog logger=getLogger();\n  final DBCPService dbcpService=context.getProperty(DBCP_SERVICE).asControllerService(DBCPService.class);\n  final DatabaseAdapter dbAdapter=dbAdapters.get(context.getProperty(DB_TYPE).getValue());\n  final String tableName=context.getProperty(TABLE_NAME).evaluateAttributeExpressions(fileToProcess).getValue();\n  final String columnNames=context.getProperty(COLUMN_NAMES).evaluateAttributeExpressions(fileToProcess).getValue();\n  final String maxValueColumnNames=context.getProperty(MAX_VALUE_COLUMN_NAMES).evaluateAttributeExpressions(fileToProcess).getValue();\n  final int partitionSize=context.getProperty(PARTITION_SIZE).evaluateAttributeExpressions(fileToProcess).asInteger();\n  final String customWhereClause=context.getProperty(WHERE_CLAUSE).evaluateAttributeExpressions(fileToProcess).getValue();\n  final StateManager stateManager=context.getStateManager();\n  final StateMap stateMap;\n  FlowFile finalFileToProcess=fileToProcess;\n  try {\n    stateMap=stateManager.getState(Scope.CLUSTER);\n  }\n catch (  final IOException ioe) {\n    logger.error(\"Failed to retrieve observed maximum values from the State Manager. Will not perform \" + \"query until this is accomplished.\",ioe);\n    context.yield();\n    return;\n  }\n  try {\n    final Map<String,String> statePropertyMap=new HashMap<>(stateMap.toMap());\n    for (    final Map.Entry<String,String> maxProp : maxValueProperties.entrySet()) {\n      String maxPropKey=maxProp.getKey().toLowerCase();\n      String fullyQualifiedMaxPropKey=getStateKey(tableName,maxPropKey,dbAdapter);\n      if (!statePropertyMap.containsKey(fullyQualifiedMaxPropKey)) {\n        String newMaxPropValue;\n        if (statePropertyMap.containsKey(maxPropKey)) {\n          newMaxPropValue=statePropertyMap.get(maxPropKey);\n        }\n else {\n          newMaxPropValue=maxProp.getValue();\n        }\n        statePropertyMap.put(fullyQualifiedMaxPropKey,newMaxPropValue);\n      }\n    }\n    String whereClause=null;\n    List<String> maxValueColumnNameList=StringUtils.isEmpty(maxValueColumnNames) ? new ArrayList<>(0) : Arrays.asList(maxValueColumnNames.split(\"\\\\s*,\\\\s*\"));\n    List<String> maxValueClauses=new ArrayList<>(maxValueColumnNameList.size());\n    String columnsClause=null;\n    List<String> maxValueSelectColumns=new ArrayList<>(maxValueColumnNameList.size() + 1);\n    maxValueSelectColumns.add(\"COUNT(*)\");\n    IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n      String colName=maxValueColumnNameList.get(index);\n      maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n      String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n      if (!StringUtils.isEmpty(maxValue)) {\n        if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n          super.setup(context,false,finalFileToProcess);\n        }\n        Integer type=getColumnType(tableName,colName,dbAdapter);\n        maxValueClauses.add(colName + (index == 0 ? \" > \" : \" >= \") + getLiteralByType(type,maxValue,dbAdapter.getName()));\n      }\n    }\n);\n    if (customWhereClause != null) {\n      maxValueClauses.add(\"(\" + customWhereClause + \")\");\n    }\n    whereClause=StringUtils.join(maxValueClauses,\" AND \");\n    columnsClause=StringUtils.join(maxValueSelectColumns,\", \");\n    final String selectQuery=dbAdapter.getSelectStatement(tableName,columnsClause,whereClause,null,null,null);\n    long rowCount=0;\n    try (final Connection con=dbcpService.getConnection(finalFileToProcess == null ? Collections.emptyMap() : finalFileToProcess.getAttributes());final Statement st=con.createStatement()){\n      final Integer queryTimeout=context.getProperty(QUERY_TIMEOUT).evaluateAttributeExpressions(fileToProcess).asTimePeriod(TimeUnit.SECONDS).intValue();\n      st.setQueryTimeout(queryTimeout);\n      logger.debug(\"Executing {}\",new Object[]{selectQuery});\n      ResultSet resultSet;\n      resultSet=st.executeQuery(selectQuery);\n      if (resultSet.next()) {\n        rowCount=resultSet.getLong(1);\n        ResultSetMetaData rsmd=resultSet.getMetaData();\n        for (int i=2; i <= rsmd.getColumnCount(); i++) {\n          String resultColumnName=(StringUtils.isNotEmpty(rsmd.getColumnLabel(i)) ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i)).toLowerCase();\n          String fullyQualifiedStateKey=getStateKey(tableName,resultColumnName,dbAdapter);\n          String resultColumnCurrentMax=statePropertyMap.get(fullyQualifiedStateKey);\n          if (StringUtils.isEmpty(resultColumnCurrentMax) && !isDynamicTableName) {\n            resultColumnCurrentMax=statePropertyMap.get(resultColumnName);\n          }\n          int type=rsmd.getColumnType(i);\n          if (isDynamicTableName) {\n            columnTypeMap.put(fullyQualifiedStateKey,type);\n          }\n          try {\n            String newMaxValue=getMaxValueFromRow(resultSet,i,type,resultColumnCurrentMax,dbAdapter.getName());\n            if (newMaxValue != null) {\n              statePropertyMap.put(fullyQualifiedStateKey,newMaxValue);\n            }\n          }\n catch (          ParseException|IOException pie) {\n            throw new ProcessException(pie);\n          }\n        }\n      }\n else {\n        throw new SQLException(\"No rows returned from metadata query: \" + selectQuery);\n      }\n      IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n        String colName=maxValueColumnNameList.get(index);\n        maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n        String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n        if (!StringUtils.isEmpty(maxValue)) {\n          if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n            super.setup(context,false,finalFileToProcess);\n          }\n          Integer type=getColumnType(tableName,colName,dbAdapter);\n          maxValueClauses.add(colName + \" <= \" + getLiteralByType(type,maxValue,dbAdapter.getName()));\n        }\n      }\n);\n      whereClause=StringUtils.join(maxValueClauses,\" AND \");\n      final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n      for (long i=0; i < numberOfFetches; i++) {\n        Long limit=partitionSize == 0 ? null : (long)partitionSize;\n        Long offset=partitionSize == 0 ? null : i * partitionSize;\n        final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n        final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n        FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n        sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n        if (columnNames != null) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n        }\n        if (StringUtils.isNotBlank(whereClause)) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n        }\n        if (StringUtils.isNotBlank(maxColumnNames)) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n        }\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n        if (partitionSize != 0) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n        }\n        session.transfer(sqlFlowFile,REL_SUCCESS);\n      }\n      if (fileToProcess != null) {\n        session.remove(fileToProcess);\n      }\n    }\n catch (    SQLException e) {\n      if (fileToProcess != null) {\n        logger.error(\"Unable to execute SQL select query {} due to {}, routing {} to failure\",new Object[]{selectQuery,e,fileToProcess});\n        fileToProcess=session.putAttribute(fileToProcess,\"generatetablefetch.sql.error\",e.getMessage());\n        session.transfer(fileToProcess,REL_FAILURE);\n      }\n else {\n        logger.error(\"Unable to execute SQL select query {} due to {}\",new Object[]{selectQuery,e});\n        throw new ProcessException(e);\n      }\n    }\n    session.commit();\n    try {\n      stateManager.setState(statePropertyMap,Scope.CLUSTER);\n    }\n catch (    IOException ioe) {\n      logger.error(\"{} failed to update State Manager, observed maximum values will not be recorded. \" + \"Also, any generated SQL statements may be duplicated.\",new Object[]{this,ioe});\n    }\n  }\n catch (  final ProcessException pe) {\n    Throwable t=(pe.getCause() == null ? pe : pe.getCause());\n    logger.error(\"Error during processing: {}\",new Object[]{t.getMessage()},t);\n    session.rollback();\n    context.yield();\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 1229,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 14953,
                        "startLineNumber": 172,
                        "startColumnNumber": 4,
                        "endLineNumber": 411,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void onTrigger(final ProcessContext context,final ProcessSessionFactory sessionFactory) throws ProcessException {\n  if (!isDynamicTableName && !isDynamicMaxValues && !setupComplete.get()) {\n    super.setup(context);\n  }\n  ProcessSession session=sessionFactory.createSession();\n  FlowFile fileToProcess=null;\n  if (context.hasIncomingConnection()) {\n    fileToProcess=session.get();\n    if (fileToProcess == null) {\n      return;\n    }\n  }\n  final ComponentLog logger=getLogger();\n  final DBCPService dbcpService=context.getProperty(DBCP_SERVICE).asControllerService(DBCPService.class);\n  final DatabaseAdapter dbAdapter=dbAdapters.get(context.getProperty(DB_TYPE).getValue());\n  final String tableName=context.getProperty(TABLE_NAME).evaluateAttributeExpressions(fileToProcess).getValue();\n  final String columnNames=context.getProperty(COLUMN_NAMES).evaluateAttributeExpressions(fileToProcess).getValue();\n  final String maxValueColumnNames=context.getProperty(MAX_VALUE_COLUMN_NAMES).evaluateAttributeExpressions(fileToProcess).getValue();\n  final int partitionSize=context.getProperty(PARTITION_SIZE).evaluateAttributeExpressions(fileToProcess).asInteger();\n  final String customWhereClause=context.getProperty(WHERE_CLAUSE).evaluateAttributeExpressions(fileToProcess).getValue();\n  final StateManager stateManager=context.getStateManager();\n  final StateMap stateMap;\n  FlowFile finalFileToProcess=fileToProcess;\n  try {\n    stateMap=stateManager.getState(Scope.CLUSTER);\n  }\n catch (  final IOException ioe) {\n    logger.error(\"Failed to retrieve observed maximum values from the State Manager. Will not perform \" + \"query until this is accomplished.\",ioe);\n    context.yield();\n    return;\n  }\n  try {\n    final Map<String,String> statePropertyMap=new HashMap<>(stateMap.toMap());\n    for (    final Map.Entry<String,String> maxProp : maxValueProperties.entrySet()) {\n      String maxPropKey=maxProp.getKey().toLowerCase();\n      String fullyQualifiedMaxPropKey=getStateKey(tableName,maxPropKey,dbAdapter);\n      if (!statePropertyMap.containsKey(fullyQualifiedMaxPropKey)) {\n        String newMaxPropValue;\n        if (statePropertyMap.containsKey(maxPropKey)) {\n          newMaxPropValue=statePropertyMap.get(maxPropKey);\n        }\n else {\n          newMaxPropValue=maxProp.getValue();\n        }\n        statePropertyMap.put(fullyQualifiedMaxPropKey,newMaxPropValue);\n      }\n    }\n    String whereClause=null;\n    List<String> maxValueColumnNameList=StringUtils.isEmpty(maxValueColumnNames) ? new ArrayList<>(0) : Arrays.asList(maxValueColumnNames.split(\"\\\\s*,\\\\s*\"));\n    List<String> maxValueClauses=new ArrayList<>(maxValueColumnNameList.size());\n    String columnsClause=null;\n    List<String> maxValueSelectColumns=new ArrayList<>(maxValueColumnNameList.size() + 1);\n    maxValueSelectColumns.add(\"COUNT(*)\");\n    IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n      String colName=maxValueColumnNameList.get(index);\n      maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n      String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n      if (!StringUtils.isEmpty(maxValue)) {\n        if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n          super.setup(context,false,finalFileToProcess);\n        }\n        Integer type=getColumnType(tableName,colName,dbAdapter);\n        maxValueClauses.add(colName + (index == 0 ? \" > \" : \" >= \") + getLiteralByType(type,maxValue,dbAdapter.getName()));\n      }\n    }\n);\n    if (customWhereClause != null) {\n      maxValueClauses.add(\"(\" + customWhereClause + \")\");\n    }\n    whereClause=StringUtils.join(maxValueClauses,\" AND \");\n    columnsClause=StringUtils.join(maxValueSelectColumns,\", \");\n    final String selectQuery=dbAdapter.getSelectStatement(tableName,columnsClause,whereClause,null,null,null);\n    long rowCount=0;\n    try (final Connection con=dbcpService.getConnection(finalFileToProcess == null ? Collections.emptyMap() : finalFileToProcess.getAttributes());final Statement st=con.createStatement()){\n      final Integer queryTimeout=context.getProperty(QUERY_TIMEOUT).evaluateAttributeExpressions(fileToProcess).asTimePeriod(TimeUnit.SECONDS).intValue();\n      st.setQueryTimeout(queryTimeout);\n      logger.debug(\"Executing {}\",new Object[]{selectQuery});\n      ResultSet resultSet;\n      resultSet=st.executeQuery(selectQuery);\n      if (resultSet.next()) {\n        rowCount=resultSet.getLong(1);\n        ResultSetMetaData rsmd=resultSet.getMetaData();\n        for (int i=2; i <= rsmd.getColumnCount(); i++) {\n          String resultColumnName=(StringUtils.isNotEmpty(rsmd.getColumnLabel(i)) ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i)).toLowerCase();\n          String fullyQualifiedStateKey=getStateKey(tableName,resultColumnName,dbAdapter);\n          String resultColumnCurrentMax=statePropertyMap.get(fullyQualifiedStateKey);\n          if (StringUtils.isEmpty(resultColumnCurrentMax) && !isDynamicTableName) {\n            resultColumnCurrentMax=statePropertyMap.get(resultColumnName);\n          }\n          int type=rsmd.getColumnType(i);\n          if (isDynamicTableName) {\n            columnTypeMap.put(fullyQualifiedStateKey,type);\n          }\n          try {\n            String newMaxValue=getMaxValueFromRow(resultSet,i,type,resultColumnCurrentMax,dbAdapter.getName());\n            if (newMaxValue != null) {\n              statePropertyMap.put(fullyQualifiedStateKey,newMaxValue);\n            }\n          }\n catch (          ParseException|IOException pie) {\n            throw new ProcessException(pie);\n          }\n        }\n      }\n else {\n        throw new SQLException(\"No rows returned from metadata query: \" + selectQuery);\n      }\n      IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n        String colName=maxValueColumnNameList.get(index);\n        maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n        String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n        if (!StringUtils.isEmpty(maxValue)) {\n          if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n            super.setup(context,false,finalFileToProcess);\n          }\n          Integer type=getColumnType(tableName,colName,dbAdapter);\n          maxValueClauses.add(colName + \" <= \" + getLiteralByType(type,maxValue,dbAdapter.getName()));\n        }\n      }\n);\n      whereClause=StringUtils.join(maxValueClauses,\" AND \");\n      final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n      for (long i=0; i < numberOfFetches; i++) {\n        Long limit=partitionSize == 0 ? null : (long)partitionSize;\n        Long offset=partitionSize == 0 ? null : i * partitionSize;\n        final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n        final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n        FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n        sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n        if (columnNames != null) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n        }\n        if (StringUtils.isNotBlank(whereClause)) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n        }\n        if (StringUtils.isNotBlank(maxColumnNames)) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n        }\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n        if (partitionSize != 0) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n        }\n        session.transfer(sqlFlowFile,REL_SUCCESS);\n      }\n      if (fileToProcess != null) {\n        session.remove(fileToProcess);\n      }\n    }\n catch (    SQLException e) {\n      if (fileToProcess != null) {\n        logger.error(\"Unable to execute SQL select query {} due to {}, routing {} to failure\",new Object[]{selectQuery,e,fileToProcess});\n        fileToProcess=session.putAttribute(fileToProcess,\"generatetablefetch.sql.error\",e.getMessage());\n        session.transfer(fileToProcess,REL_FAILURE);\n      }\n else {\n        logger.error(\"Unable to execute SQL select query {} due to {}\",new Object[]{selectQuery,e});\n        throw new ProcessException(e);\n      }\n    }\n    session.commit();\n    try {\n      stateManager.setState(statePropertyMap,Scope.CLUSTER);\n    }\n catch (    IOException ioe) {\n      logger.error(\"{} failed to update State Manager, observed maximum values will not be recorded. \" + \"Also, any generated SQL statements may be duplicated.\",new Object[]{this,ioe});\n    }\n  }\n catch (  final ProcessException pe) {\n    Throwable t=(pe.getCause() == null ? pe : pe.getCause());\n    logger.error(\"Error during processing: {}\",new Object[]{t.getMessage()},t);\n    session.rollback();\n    context.yield();\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 1247,
                    "astHeight": 18
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 60,
                    "startLineNumber": 358,
                    "startColumnNumber": 20,
                    "endLineNumber": 358,
                    "endColumnNumber": 80
                },
                "nodeContext": "Long offset=partitionSize == 0 ? null : i * partitionSize;\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 13,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "0",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 374,
                "startColumnNumber": 41,
                "endLineNumber": 374,
                "endColumnNumber": 42
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 18,
                        "startLineNumber": 374,
                        "startColumnNumber": 24,
                        "endLineNumber": 374,
                        "endColumnNumber": 42
                    },
                    "nodeContext": "partitionSize != 0",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 173,
                        "startLineNumber": 374,
                        "startColumnNumber": 20,
                        "endLineNumber": 376,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (partitionSize != 0) {\n  sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 17,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 1735,
                        "startLineNumber": 356,
                        "startColumnNumber": 59,
                        "endLineNumber": 378,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  Long limit=partitionSize == 0 ? null : (long)partitionSize;\n  Long offset=partitionSize == 0 ? null : i * partitionSize;\n  final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n  final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n  FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n  sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n  sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n  if (columnNames != null) {\n    sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n  }\n  if (StringUtils.isNotBlank(whereClause)) {\n    sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n  }\n  if (StringUtils.isNotBlank(maxColumnNames)) {\n    sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n  }\n  sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n  if (partitionSize != 0) {\n    sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n  }\n  session.transfer(sqlFlowFile,REL_SUCCESS);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 174,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1778,
                        "startLineNumber": 356,
                        "startColumnNumber": 16,
                        "endLineNumber": 378,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "for (long i=0; i < numberOfFetches; i++) {\n  Long limit=partitionSize == 0 ? null : (long)partitionSize;\n  Long offset=partitionSize == 0 ? null : i * partitionSize;\n  final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n  final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n  FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n  sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n  sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n  if (columnNames != null) {\n    sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n  }\n  if (StringUtils.isNotBlank(whereClause)) {\n    sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n  }\n  if (StringUtils.isNotBlank(maxColumnNames)) {\n    sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n  }\n  sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n  if (partitionSize != 0) {\n    sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n  }\n  session.transfer(sqlFlowFile,REL_SUCCESS);\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 185,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 6723,
                        "startLineNumber": 281,
                        "startColumnNumber": 61,
                        "endLineNumber": 383,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  final Integer queryTimeout=context.getProperty(QUERY_TIMEOUT).evaluateAttributeExpressions(fileToProcess).asTimePeriod(TimeUnit.SECONDS).intValue();\n  st.setQueryTimeout(queryTimeout);\n  logger.debug(\"Executing {}\",new Object[]{selectQuery});\n  ResultSet resultSet;\n  resultSet=st.executeQuery(selectQuery);\n  if (resultSet.next()) {\n    rowCount=resultSet.getLong(1);\n    ResultSetMetaData rsmd=resultSet.getMetaData();\n    for (int i=2; i <= rsmd.getColumnCount(); i++) {\n      String resultColumnName=(StringUtils.isNotEmpty(rsmd.getColumnLabel(i)) ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i)).toLowerCase();\n      String fullyQualifiedStateKey=getStateKey(tableName,resultColumnName,dbAdapter);\n      String resultColumnCurrentMax=statePropertyMap.get(fullyQualifiedStateKey);\n      if (StringUtils.isEmpty(resultColumnCurrentMax) && !isDynamicTableName) {\n        resultColumnCurrentMax=statePropertyMap.get(resultColumnName);\n      }\n      int type=rsmd.getColumnType(i);\n      if (isDynamicTableName) {\n        columnTypeMap.put(fullyQualifiedStateKey,type);\n      }\n      try {\n        String newMaxValue=getMaxValueFromRow(resultSet,i,type,resultColumnCurrentMax,dbAdapter.getName());\n        if (newMaxValue != null) {\n          statePropertyMap.put(fullyQualifiedStateKey,newMaxValue);\n        }\n      }\n catch (      ParseException|IOException pie) {\n        throw new ProcessException(pie);\n      }\n    }\n  }\n else {\n    throw new SQLException(\"No rows returned from metadata query: \" + selectQuery);\n  }\n  IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n    String colName=maxValueColumnNameList.get(index);\n    maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n    String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n    if (!StringUtils.isEmpty(maxValue)) {\n      if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n        super.setup(context,false,finalFileToProcess);\n      }\n      Integer type=getColumnType(tableName,colName,dbAdapter);\n      maxValueClauses.add(colName + \" <= \" + getLiteralByType(type,maxValue,dbAdapter.getName()));\n    }\n  }\n);\n  whereClause=StringUtils.join(maxValueClauses,\" AND \");\n  final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n  for (long i=0; i < numberOfFetches; i++) {\n    Long limit=partitionSize == 0 ? null : (long)partitionSize;\n    Long offset=partitionSize == 0 ? null : i * partitionSize;\n    final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n    final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n    FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n    sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n    sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n    if (columnNames != null) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n    }\n    if (StringUtils.isNotBlank(whereClause)) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n    }\n    if (StringUtils.isNotBlank(maxColumnNames)) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n    }\n    sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n    if (partitionSize != 0) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n    }\n    session.transfer(sqlFlowFile,REL_SUCCESS);\n  }\n  if (fileToProcess != null) {\n    session.remove(fileToProcess);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 530,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 7563,
                        "startLineNumber": 280,
                        "startColumnNumber": 12,
                        "endLineNumber": 393,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "try (final Connection con=dbcpService.getConnection(finalFileToProcess == null ? Collections.emptyMap() : finalFileToProcess.getAttributes());final Statement st=con.createStatement()){\n  final Integer queryTimeout=context.getProperty(QUERY_TIMEOUT).evaluateAttributeExpressions(fileToProcess).asTimePeriod(TimeUnit.SECONDS).intValue();\n  st.setQueryTimeout(queryTimeout);\n  logger.debug(\"Executing {}\",new Object[]{selectQuery});\n  ResultSet resultSet;\n  resultSet=st.executeQuery(selectQuery);\n  if (resultSet.next()) {\n    rowCount=resultSet.getLong(1);\n    ResultSetMetaData rsmd=resultSet.getMetaData();\n    for (int i=2; i <= rsmd.getColumnCount(); i++) {\n      String resultColumnName=(StringUtils.isNotEmpty(rsmd.getColumnLabel(i)) ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i)).toLowerCase();\n      String fullyQualifiedStateKey=getStateKey(tableName,resultColumnName,dbAdapter);\n      String resultColumnCurrentMax=statePropertyMap.get(fullyQualifiedStateKey);\n      if (StringUtils.isEmpty(resultColumnCurrentMax) && !isDynamicTableName) {\n        resultColumnCurrentMax=statePropertyMap.get(resultColumnName);\n      }\n      int type=rsmd.getColumnType(i);\n      if (isDynamicTableName) {\n        columnTypeMap.put(fullyQualifiedStateKey,type);\n      }\n      try {\n        String newMaxValue=getMaxValueFromRow(resultSet,i,type,resultColumnCurrentMax,dbAdapter.getName());\n        if (newMaxValue != null) {\n          statePropertyMap.put(fullyQualifiedStateKey,newMaxValue);\n        }\n      }\n catch (      ParseException|IOException pie) {\n        throw new ProcessException(pie);\n      }\n    }\n  }\n else {\n    throw new SQLException(\"No rows returned from metadata query: \" + selectQuery);\n  }\n  IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n    String colName=maxValueColumnNameList.get(index);\n    maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n    String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n    if (!StringUtils.isEmpty(maxValue)) {\n      if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n        super.setup(context,false,finalFileToProcess);\n      }\n      Integer type=getColumnType(tableName,colName,dbAdapter);\n      maxValueClauses.add(colName + \" <= \" + getLiteralByType(type,maxValue,dbAdapter.getName()));\n    }\n  }\n);\n  whereClause=StringUtils.join(maxValueClauses,\" AND \");\n  final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n  for (long i=0; i < numberOfFetches; i++) {\n    Long limit=partitionSize == 0 ? null : (long)partitionSize;\n    Long offset=partitionSize == 0 ? null : i * partitionSize;\n    final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n    final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n    FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n    sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n    sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n    if (columnNames != null) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n    }\n    if (StringUtils.isNotBlank(whereClause)) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n    }\n    if (StringUtils.isNotBlank(maxColumnNames)) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n    }\n    sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n    if (partitionSize != 0) {\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n    }\n    session.transfer(sqlFlowFile,REL_SUCCESS);\n  }\n  if (fileToProcess != null) {\n    session.remove(fileToProcess);\n  }\n}\n catch (SQLException e) {\n  if (fileToProcess != null) {\n    logger.error(\"Unable to execute SQL select query {} due to {}, routing {} to failure\",new Object[]{selectQuery,e,fileToProcess});\n    fileToProcess=session.putAttribute(fileToProcess,\"generatetablefetch.sql.error\",e.getMessage());\n    session.transfer(fileToProcess,REL_FAILURE);\n  }\n else {\n    logger.error(\"Unable to execute SQL select query {} due to {}\",new Object[]{selectQuery,e});\n    throw new ProcessException(e);\n  }\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 620,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 12385,
                        "startLineNumber": 213,
                        "startColumnNumber": 12,
                        "endLineNumber": 404,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final Map<String,String> statePropertyMap=new HashMap<>(stateMap.toMap());\n  for (  final Map.Entry<String,String> maxProp : maxValueProperties.entrySet()) {\n    String maxPropKey=maxProp.getKey().toLowerCase();\n    String fullyQualifiedMaxPropKey=getStateKey(tableName,maxPropKey,dbAdapter);\n    if (!statePropertyMap.containsKey(fullyQualifiedMaxPropKey)) {\n      String newMaxPropValue;\n      if (statePropertyMap.containsKey(maxPropKey)) {\n        newMaxPropValue=statePropertyMap.get(maxPropKey);\n      }\n else {\n        newMaxPropValue=maxProp.getValue();\n      }\n      statePropertyMap.put(fullyQualifiedMaxPropKey,newMaxPropValue);\n    }\n  }\n  String whereClause=null;\n  List<String> maxValueColumnNameList=StringUtils.isEmpty(maxValueColumnNames) ? new ArrayList<>(0) : Arrays.asList(maxValueColumnNames.split(\"\\\\s*,\\\\s*\"));\n  List<String> maxValueClauses=new ArrayList<>(maxValueColumnNameList.size());\n  String columnsClause=null;\n  List<String> maxValueSelectColumns=new ArrayList<>(maxValueColumnNameList.size() + 1);\n  maxValueSelectColumns.add(\"COUNT(*)\");\n  IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n    String colName=maxValueColumnNameList.get(index);\n    maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n    String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n    if (!StringUtils.isEmpty(maxValue)) {\n      if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n        super.setup(context,false,finalFileToProcess);\n      }\n      Integer type=getColumnType(tableName,colName,dbAdapter);\n      maxValueClauses.add(colName + (index == 0 ? \" > \" : \" >= \") + getLiteralByType(type,maxValue,dbAdapter.getName()));\n    }\n  }\n);\n  if (customWhereClause != null) {\n    maxValueClauses.add(\"(\" + customWhereClause + \")\");\n  }\n  whereClause=StringUtils.join(maxValueClauses,\" AND \");\n  columnsClause=StringUtils.join(maxValueSelectColumns,\", \");\n  final String selectQuery=dbAdapter.getSelectStatement(tableName,columnsClause,whereClause,null,null,null);\n  long rowCount=0;\n  try (final Connection con=dbcpService.getConnection(finalFileToProcess == null ? Collections.emptyMap() : finalFileToProcess.getAttributes());final Statement st=con.createStatement()){\n    final Integer queryTimeout=context.getProperty(QUERY_TIMEOUT).evaluateAttributeExpressions(fileToProcess).asTimePeriod(TimeUnit.SECONDS).intValue();\n    st.setQueryTimeout(queryTimeout);\n    logger.debug(\"Executing {}\",new Object[]{selectQuery});\n    ResultSet resultSet;\n    resultSet=st.executeQuery(selectQuery);\n    if (resultSet.next()) {\n      rowCount=resultSet.getLong(1);\n      ResultSetMetaData rsmd=resultSet.getMetaData();\n      for (int i=2; i <= rsmd.getColumnCount(); i++) {\n        String resultColumnName=(StringUtils.isNotEmpty(rsmd.getColumnLabel(i)) ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i)).toLowerCase();\n        String fullyQualifiedStateKey=getStateKey(tableName,resultColumnName,dbAdapter);\n        String resultColumnCurrentMax=statePropertyMap.get(fullyQualifiedStateKey);\n        if (StringUtils.isEmpty(resultColumnCurrentMax) && !isDynamicTableName) {\n          resultColumnCurrentMax=statePropertyMap.get(resultColumnName);\n        }\n        int type=rsmd.getColumnType(i);\n        if (isDynamicTableName) {\n          columnTypeMap.put(fullyQualifiedStateKey,type);\n        }\n        try {\n          String newMaxValue=getMaxValueFromRow(resultSet,i,type,resultColumnCurrentMax,dbAdapter.getName());\n          if (newMaxValue != null) {\n            statePropertyMap.put(fullyQualifiedStateKey,newMaxValue);\n          }\n        }\n catch (        ParseException|IOException pie) {\n          throw new ProcessException(pie);\n        }\n      }\n    }\n else {\n      throw new SQLException(\"No rows returned from metadata query: \" + selectQuery);\n    }\n    IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n      String colName=maxValueColumnNameList.get(index);\n      maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n      String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n      if (!StringUtils.isEmpty(maxValue)) {\n        if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n          super.setup(context,false,finalFileToProcess);\n        }\n        Integer type=getColumnType(tableName,colName,dbAdapter);\n        maxValueClauses.add(colName + \" <= \" + getLiteralByType(type,maxValue,dbAdapter.getName()));\n      }\n    }\n);\n    whereClause=StringUtils.join(maxValueClauses,\" AND \");\n    final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n    for (long i=0; i < numberOfFetches; i++) {\n      Long limit=partitionSize == 0 ? null : (long)partitionSize;\n      Long offset=partitionSize == 0 ? null : i * partitionSize;\n      final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n      final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n      FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n      sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n      if (columnNames != null) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n      }\n      if (StringUtils.isNotBlank(whereClause)) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n      }\n      if (StringUtils.isNotBlank(maxColumnNames)) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n      }\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n      if (partitionSize != 0) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n      }\n      session.transfer(sqlFlowFile,REL_SUCCESS);\n    }\n    if (fileToProcess != null) {\n      session.remove(fileToProcess);\n    }\n  }\n catch (  SQLException e) {\n    if (fileToProcess != null) {\n      logger.error(\"Unable to execute SQL select query {} due to {}, routing {} to failure\",new Object[]{selectQuery,e,fileToProcess});\n      fileToProcess=session.putAttribute(fileToProcess,\"generatetablefetch.sql.error\",e.getMessage());\n      session.transfer(fileToProcess,REL_FAILURE);\n    }\n else {\n      logger.error(\"Unable to execute SQL select query {} due to {}\",new Object[]{selectQuery,e});\n      throw new ProcessException(e);\n    }\n  }\n  session.commit();\n  try {\n    stateManager.setState(statePropertyMap,Scope.CLUSTER);\n  }\n catch (  IOException ioe) {\n    logger.error(\"{} failed to update State Manager, observed maximum values will not be recorded. \" + \"Also, any generated SQL statements may be duplicated.\",new Object[]{this,ioe});\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 971,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 12730,
                        "startLineNumber": 213,
                        "startColumnNumber": 8,
                        "endLineNumber": 410,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  final Map<String,String> statePropertyMap=new HashMap<>(stateMap.toMap());\n  for (  final Map.Entry<String,String> maxProp : maxValueProperties.entrySet()) {\n    String maxPropKey=maxProp.getKey().toLowerCase();\n    String fullyQualifiedMaxPropKey=getStateKey(tableName,maxPropKey,dbAdapter);\n    if (!statePropertyMap.containsKey(fullyQualifiedMaxPropKey)) {\n      String newMaxPropValue;\n      if (statePropertyMap.containsKey(maxPropKey)) {\n        newMaxPropValue=statePropertyMap.get(maxPropKey);\n      }\n else {\n        newMaxPropValue=maxProp.getValue();\n      }\n      statePropertyMap.put(fullyQualifiedMaxPropKey,newMaxPropValue);\n    }\n  }\n  String whereClause=null;\n  List<String> maxValueColumnNameList=StringUtils.isEmpty(maxValueColumnNames) ? new ArrayList<>(0) : Arrays.asList(maxValueColumnNames.split(\"\\\\s*,\\\\s*\"));\n  List<String> maxValueClauses=new ArrayList<>(maxValueColumnNameList.size());\n  String columnsClause=null;\n  List<String> maxValueSelectColumns=new ArrayList<>(maxValueColumnNameList.size() + 1);\n  maxValueSelectColumns.add(\"COUNT(*)\");\n  IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n    String colName=maxValueColumnNameList.get(index);\n    maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n    String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n    if (!StringUtils.isEmpty(maxValue)) {\n      if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n        super.setup(context,false,finalFileToProcess);\n      }\n      Integer type=getColumnType(tableName,colName,dbAdapter);\n      maxValueClauses.add(colName + (index == 0 ? \" > \" : \" >= \") + getLiteralByType(type,maxValue,dbAdapter.getName()));\n    }\n  }\n);\n  if (customWhereClause != null) {\n    maxValueClauses.add(\"(\" + customWhereClause + \")\");\n  }\n  whereClause=StringUtils.join(maxValueClauses,\" AND \");\n  columnsClause=StringUtils.join(maxValueSelectColumns,\", \");\n  final String selectQuery=dbAdapter.getSelectStatement(tableName,columnsClause,whereClause,null,null,null);\n  long rowCount=0;\n  try (final Connection con=dbcpService.getConnection(finalFileToProcess == null ? Collections.emptyMap() : finalFileToProcess.getAttributes());final Statement st=con.createStatement()){\n    final Integer queryTimeout=context.getProperty(QUERY_TIMEOUT).evaluateAttributeExpressions(fileToProcess).asTimePeriod(TimeUnit.SECONDS).intValue();\n    st.setQueryTimeout(queryTimeout);\n    logger.debug(\"Executing {}\",new Object[]{selectQuery});\n    ResultSet resultSet;\n    resultSet=st.executeQuery(selectQuery);\n    if (resultSet.next()) {\n      rowCount=resultSet.getLong(1);\n      ResultSetMetaData rsmd=resultSet.getMetaData();\n      for (int i=2; i <= rsmd.getColumnCount(); i++) {\n        String resultColumnName=(StringUtils.isNotEmpty(rsmd.getColumnLabel(i)) ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i)).toLowerCase();\n        String fullyQualifiedStateKey=getStateKey(tableName,resultColumnName,dbAdapter);\n        String resultColumnCurrentMax=statePropertyMap.get(fullyQualifiedStateKey);\n        if (StringUtils.isEmpty(resultColumnCurrentMax) && !isDynamicTableName) {\n          resultColumnCurrentMax=statePropertyMap.get(resultColumnName);\n        }\n        int type=rsmd.getColumnType(i);\n        if (isDynamicTableName) {\n          columnTypeMap.put(fullyQualifiedStateKey,type);\n        }\n        try {\n          String newMaxValue=getMaxValueFromRow(resultSet,i,type,resultColumnCurrentMax,dbAdapter.getName());\n          if (newMaxValue != null) {\n            statePropertyMap.put(fullyQualifiedStateKey,newMaxValue);\n          }\n        }\n catch (        ParseException|IOException pie) {\n          throw new ProcessException(pie);\n        }\n      }\n    }\n else {\n      throw new SQLException(\"No rows returned from metadata query: \" + selectQuery);\n    }\n    IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n      String colName=maxValueColumnNameList.get(index);\n      maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n      String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n      if (!StringUtils.isEmpty(maxValue)) {\n        if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n          super.setup(context,false,finalFileToProcess);\n        }\n        Integer type=getColumnType(tableName,colName,dbAdapter);\n        maxValueClauses.add(colName + \" <= \" + getLiteralByType(type,maxValue,dbAdapter.getName()));\n      }\n    }\n);\n    whereClause=StringUtils.join(maxValueClauses,\" AND \");\n    final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n    for (long i=0; i < numberOfFetches; i++) {\n      Long limit=partitionSize == 0 ? null : (long)partitionSize;\n      Long offset=partitionSize == 0 ? null : i * partitionSize;\n      final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n      final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n      FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n      sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n      if (columnNames != null) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n      }\n      if (StringUtils.isNotBlank(whereClause)) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n      }\n      if (StringUtils.isNotBlank(maxColumnNames)) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n      }\n      sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n      if (partitionSize != 0) {\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n      }\n      session.transfer(sqlFlowFile,REL_SUCCESS);\n    }\n    if (fileToProcess != null) {\n      session.remove(fileToProcess);\n    }\n  }\n catch (  SQLException e) {\n    if (fileToProcess != null) {\n      logger.error(\"Unable to execute SQL select query {} due to {}, routing {} to failure\",new Object[]{selectQuery,e,fileToProcess});\n      fileToProcess=session.putAttribute(fileToProcess,\"generatetablefetch.sql.error\",e.getMessage());\n      session.transfer(fileToProcess,REL_FAILURE);\n    }\n else {\n      logger.error(\"Unable to execute SQL select query {} due to {}\",new Object[]{selectQuery,e});\n      throw new ProcessException(e);\n    }\n  }\n  session.commit();\n  try {\n    stateManager.setState(statePropertyMap,Scope.CLUSTER);\n  }\n catch (  IOException ioe) {\n    logger.error(\"{} failed to update State Manager, observed maximum values will not be recorded. \" + \"Also, any generated SQL statements may be duplicated.\",new Object[]{this,ioe});\n  }\n}\n catch (final ProcessException pe) {\n  Throwable t=(pe.getCause() == null ? pe : pe.getCause());\n  logger.error(\"Error during processing: {}\",new Object[]{t.getMessage()},t);\n  session.rollback();\n  context.yield();\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 1018,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 14819,
                        "startLineNumber": 173,
                        "startColumnNumber": 124,
                        "endLineNumber": 411,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (!isDynamicTableName && !isDynamicMaxValues && !setupComplete.get()) {\n    super.setup(context);\n  }\n  ProcessSession session=sessionFactory.createSession();\n  FlowFile fileToProcess=null;\n  if (context.hasIncomingConnection()) {\n    fileToProcess=session.get();\n    if (fileToProcess == null) {\n      return;\n    }\n  }\n  final ComponentLog logger=getLogger();\n  final DBCPService dbcpService=context.getProperty(DBCP_SERVICE).asControllerService(DBCPService.class);\n  final DatabaseAdapter dbAdapter=dbAdapters.get(context.getProperty(DB_TYPE).getValue());\n  final String tableName=context.getProperty(TABLE_NAME).evaluateAttributeExpressions(fileToProcess).getValue();\n  final String columnNames=context.getProperty(COLUMN_NAMES).evaluateAttributeExpressions(fileToProcess).getValue();\n  final String maxValueColumnNames=context.getProperty(MAX_VALUE_COLUMN_NAMES).evaluateAttributeExpressions(fileToProcess).getValue();\n  final int partitionSize=context.getProperty(PARTITION_SIZE).evaluateAttributeExpressions(fileToProcess).asInteger();\n  final String customWhereClause=context.getProperty(WHERE_CLAUSE).evaluateAttributeExpressions(fileToProcess).getValue();\n  final StateManager stateManager=context.getStateManager();\n  final StateMap stateMap;\n  FlowFile finalFileToProcess=fileToProcess;\n  try {\n    stateMap=stateManager.getState(Scope.CLUSTER);\n  }\n catch (  final IOException ioe) {\n    logger.error(\"Failed to retrieve observed maximum values from the State Manager. Will not perform \" + \"query until this is accomplished.\",ioe);\n    context.yield();\n    return;\n  }\n  try {\n    final Map<String,String> statePropertyMap=new HashMap<>(stateMap.toMap());\n    for (    final Map.Entry<String,String> maxProp : maxValueProperties.entrySet()) {\n      String maxPropKey=maxProp.getKey().toLowerCase();\n      String fullyQualifiedMaxPropKey=getStateKey(tableName,maxPropKey,dbAdapter);\n      if (!statePropertyMap.containsKey(fullyQualifiedMaxPropKey)) {\n        String newMaxPropValue;\n        if (statePropertyMap.containsKey(maxPropKey)) {\n          newMaxPropValue=statePropertyMap.get(maxPropKey);\n        }\n else {\n          newMaxPropValue=maxProp.getValue();\n        }\n        statePropertyMap.put(fullyQualifiedMaxPropKey,newMaxPropValue);\n      }\n    }\n    String whereClause=null;\n    List<String> maxValueColumnNameList=StringUtils.isEmpty(maxValueColumnNames) ? new ArrayList<>(0) : Arrays.asList(maxValueColumnNames.split(\"\\\\s*,\\\\s*\"));\n    List<String> maxValueClauses=new ArrayList<>(maxValueColumnNameList.size());\n    String columnsClause=null;\n    List<String> maxValueSelectColumns=new ArrayList<>(maxValueColumnNameList.size() + 1);\n    maxValueSelectColumns.add(\"COUNT(*)\");\n    IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n      String colName=maxValueColumnNameList.get(index);\n      maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n      String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n      if (!StringUtils.isEmpty(maxValue)) {\n        if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n          super.setup(context,false,finalFileToProcess);\n        }\n        Integer type=getColumnType(tableName,colName,dbAdapter);\n        maxValueClauses.add(colName + (index == 0 ? \" > \" : \" >= \") + getLiteralByType(type,maxValue,dbAdapter.getName()));\n      }\n    }\n);\n    if (customWhereClause != null) {\n      maxValueClauses.add(\"(\" + customWhereClause + \")\");\n    }\n    whereClause=StringUtils.join(maxValueClauses,\" AND \");\n    columnsClause=StringUtils.join(maxValueSelectColumns,\", \");\n    final String selectQuery=dbAdapter.getSelectStatement(tableName,columnsClause,whereClause,null,null,null);\n    long rowCount=0;\n    try (final Connection con=dbcpService.getConnection(finalFileToProcess == null ? Collections.emptyMap() : finalFileToProcess.getAttributes());final Statement st=con.createStatement()){\n      final Integer queryTimeout=context.getProperty(QUERY_TIMEOUT).evaluateAttributeExpressions(fileToProcess).asTimePeriod(TimeUnit.SECONDS).intValue();\n      st.setQueryTimeout(queryTimeout);\n      logger.debug(\"Executing {}\",new Object[]{selectQuery});\n      ResultSet resultSet;\n      resultSet=st.executeQuery(selectQuery);\n      if (resultSet.next()) {\n        rowCount=resultSet.getLong(1);\n        ResultSetMetaData rsmd=resultSet.getMetaData();\n        for (int i=2; i <= rsmd.getColumnCount(); i++) {\n          String resultColumnName=(StringUtils.isNotEmpty(rsmd.getColumnLabel(i)) ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i)).toLowerCase();\n          String fullyQualifiedStateKey=getStateKey(tableName,resultColumnName,dbAdapter);\n          String resultColumnCurrentMax=statePropertyMap.get(fullyQualifiedStateKey);\n          if (StringUtils.isEmpty(resultColumnCurrentMax) && !isDynamicTableName) {\n            resultColumnCurrentMax=statePropertyMap.get(resultColumnName);\n          }\n          int type=rsmd.getColumnType(i);\n          if (isDynamicTableName) {\n            columnTypeMap.put(fullyQualifiedStateKey,type);\n          }\n          try {\n            String newMaxValue=getMaxValueFromRow(resultSet,i,type,resultColumnCurrentMax,dbAdapter.getName());\n            if (newMaxValue != null) {\n              statePropertyMap.put(fullyQualifiedStateKey,newMaxValue);\n            }\n          }\n catch (          ParseException|IOException pie) {\n            throw new ProcessException(pie);\n          }\n        }\n      }\n else {\n        throw new SQLException(\"No rows returned from metadata query: \" + selectQuery);\n      }\n      IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n        String colName=maxValueColumnNameList.get(index);\n        maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n        String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n        if (!StringUtils.isEmpty(maxValue)) {\n          if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n            super.setup(context,false,finalFileToProcess);\n          }\n          Integer type=getColumnType(tableName,colName,dbAdapter);\n          maxValueClauses.add(colName + \" <= \" + getLiteralByType(type,maxValue,dbAdapter.getName()));\n        }\n      }\n);\n      whereClause=StringUtils.join(maxValueClauses,\" AND \");\n      final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n      for (long i=0; i < numberOfFetches; i++) {\n        Long limit=partitionSize == 0 ? null : (long)partitionSize;\n        Long offset=partitionSize == 0 ? null : i * partitionSize;\n        final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n        final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n        FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n        sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n        if (columnNames != null) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n        }\n        if (StringUtils.isNotBlank(whereClause)) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n        }\n        if (StringUtils.isNotBlank(maxColumnNames)) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n        }\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n        if (partitionSize != 0) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n        }\n        session.transfer(sqlFlowFile,REL_SUCCESS);\n      }\n      if (fileToProcess != null) {\n        session.remove(fileToProcess);\n      }\n    }\n catch (    SQLException e) {\n      if (fileToProcess != null) {\n        logger.error(\"Unable to execute SQL select query {} due to {}, routing {} to failure\",new Object[]{selectQuery,e,fileToProcess});\n        fileToProcess=session.putAttribute(fileToProcess,\"generatetablefetch.sql.error\",e.getMessage());\n        session.transfer(fileToProcess,REL_FAILURE);\n      }\n else {\n        logger.error(\"Unable to execute SQL select query {} due to {}\",new Object[]{selectQuery,e});\n        throw new ProcessException(e);\n      }\n    }\n    session.commit();\n    try {\n      stateManager.setState(statePropertyMap,Scope.CLUSTER);\n    }\n catch (    IOException ioe) {\n      logger.error(\"{} failed to update State Manager, observed maximum values will not be recorded. \" + \"Also, any generated SQL statements may be duplicated.\",new Object[]{this,ioe});\n    }\n  }\n catch (  final ProcessException pe) {\n    Throwable t=(pe.getCause() == null ? pe : pe.getCause());\n    logger.error(\"Error during processing: {}\",new Object[]{t.getMessage()},t);\n    session.rollback();\n    context.yield();\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 1229,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 14953,
                        "startLineNumber": 172,
                        "startColumnNumber": 4,
                        "endLineNumber": 411,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void onTrigger(final ProcessContext context,final ProcessSessionFactory sessionFactory) throws ProcessException {\n  if (!isDynamicTableName && !isDynamicMaxValues && !setupComplete.get()) {\n    super.setup(context);\n  }\n  ProcessSession session=sessionFactory.createSession();\n  FlowFile fileToProcess=null;\n  if (context.hasIncomingConnection()) {\n    fileToProcess=session.get();\n    if (fileToProcess == null) {\n      return;\n    }\n  }\n  final ComponentLog logger=getLogger();\n  final DBCPService dbcpService=context.getProperty(DBCP_SERVICE).asControllerService(DBCPService.class);\n  final DatabaseAdapter dbAdapter=dbAdapters.get(context.getProperty(DB_TYPE).getValue());\n  final String tableName=context.getProperty(TABLE_NAME).evaluateAttributeExpressions(fileToProcess).getValue();\n  final String columnNames=context.getProperty(COLUMN_NAMES).evaluateAttributeExpressions(fileToProcess).getValue();\n  final String maxValueColumnNames=context.getProperty(MAX_VALUE_COLUMN_NAMES).evaluateAttributeExpressions(fileToProcess).getValue();\n  final int partitionSize=context.getProperty(PARTITION_SIZE).evaluateAttributeExpressions(fileToProcess).asInteger();\n  final String customWhereClause=context.getProperty(WHERE_CLAUSE).evaluateAttributeExpressions(fileToProcess).getValue();\n  final StateManager stateManager=context.getStateManager();\n  final StateMap stateMap;\n  FlowFile finalFileToProcess=fileToProcess;\n  try {\n    stateMap=stateManager.getState(Scope.CLUSTER);\n  }\n catch (  final IOException ioe) {\n    logger.error(\"Failed to retrieve observed maximum values from the State Manager. Will not perform \" + \"query until this is accomplished.\",ioe);\n    context.yield();\n    return;\n  }\n  try {\n    final Map<String,String> statePropertyMap=new HashMap<>(stateMap.toMap());\n    for (    final Map.Entry<String,String> maxProp : maxValueProperties.entrySet()) {\n      String maxPropKey=maxProp.getKey().toLowerCase();\n      String fullyQualifiedMaxPropKey=getStateKey(tableName,maxPropKey,dbAdapter);\n      if (!statePropertyMap.containsKey(fullyQualifiedMaxPropKey)) {\n        String newMaxPropValue;\n        if (statePropertyMap.containsKey(maxPropKey)) {\n          newMaxPropValue=statePropertyMap.get(maxPropKey);\n        }\n else {\n          newMaxPropValue=maxProp.getValue();\n        }\n        statePropertyMap.put(fullyQualifiedMaxPropKey,newMaxPropValue);\n      }\n    }\n    String whereClause=null;\n    List<String> maxValueColumnNameList=StringUtils.isEmpty(maxValueColumnNames) ? new ArrayList<>(0) : Arrays.asList(maxValueColumnNames.split(\"\\\\s*,\\\\s*\"));\n    List<String> maxValueClauses=new ArrayList<>(maxValueColumnNameList.size());\n    String columnsClause=null;\n    List<String> maxValueSelectColumns=new ArrayList<>(maxValueColumnNameList.size() + 1);\n    maxValueSelectColumns.add(\"COUNT(*)\");\n    IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n      String colName=maxValueColumnNameList.get(index);\n      maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n      String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n      if (!StringUtils.isEmpty(maxValue)) {\n        if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n          super.setup(context,false,finalFileToProcess);\n        }\n        Integer type=getColumnType(tableName,colName,dbAdapter);\n        maxValueClauses.add(colName + (index == 0 ? \" > \" : \" >= \") + getLiteralByType(type,maxValue,dbAdapter.getName()));\n      }\n    }\n);\n    if (customWhereClause != null) {\n      maxValueClauses.add(\"(\" + customWhereClause + \")\");\n    }\n    whereClause=StringUtils.join(maxValueClauses,\" AND \");\n    columnsClause=StringUtils.join(maxValueSelectColumns,\", \");\n    final String selectQuery=dbAdapter.getSelectStatement(tableName,columnsClause,whereClause,null,null,null);\n    long rowCount=0;\n    try (final Connection con=dbcpService.getConnection(finalFileToProcess == null ? Collections.emptyMap() : finalFileToProcess.getAttributes());final Statement st=con.createStatement()){\n      final Integer queryTimeout=context.getProperty(QUERY_TIMEOUT).evaluateAttributeExpressions(fileToProcess).asTimePeriod(TimeUnit.SECONDS).intValue();\n      st.setQueryTimeout(queryTimeout);\n      logger.debug(\"Executing {}\",new Object[]{selectQuery});\n      ResultSet resultSet;\n      resultSet=st.executeQuery(selectQuery);\n      if (resultSet.next()) {\n        rowCount=resultSet.getLong(1);\n        ResultSetMetaData rsmd=resultSet.getMetaData();\n        for (int i=2; i <= rsmd.getColumnCount(); i++) {\n          String resultColumnName=(StringUtils.isNotEmpty(rsmd.getColumnLabel(i)) ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i)).toLowerCase();\n          String fullyQualifiedStateKey=getStateKey(tableName,resultColumnName,dbAdapter);\n          String resultColumnCurrentMax=statePropertyMap.get(fullyQualifiedStateKey);\n          if (StringUtils.isEmpty(resultColumnCurrentMax) && !isDynamicTableName) {\n            resultColumnCurrentMax=statePropertyMap.get(resultColumnName);\n          }\n          int type=rsmd.getColumnType(i);\n          if (isDynamicTableName) {\n            columnTypeMap.put(fullyQualifiedStateKey,type);\n          }\n          try {\n            String newMaxValue=getMaxValueFromRow(resultSet,i,type,resultColumnCurrentMax,dbAdapter.getName());\n            if (newMaxValue != null) {\n              statePropertyMap.put(fullyQualifiedStateKey,newMaxValue);\n            }\n          }\n catch (          ParseException|IOException pie) {\n            throw new ProcessException(pie);\n          }\n        }\n      }\n else {\n        throw new SQLException(\"No rows returned from metadata query: \" + selectQuery);\n      }\n      IntStream.range(0,maxValueColumnNameList.size()).forEach((index) -> {\n        String colName=maxValueColumnNameList.get(index);\n        maxValueSelectColumns.add(\"MAX(\" + colName + \") \"+ colName);\n        String maxValue=getColumnStateMaxValue(tableName,statePropertyMap,colName,dbAdapter);\n        if (!StringUtils.isEmpty(maxValue)) {\n          if (columnTypeMap.isEmpty() || getColumnType(tableName,colName,dbAdapter) == null) {\n            super.setup(context,false,finalFileToProcess);\n          }\n          Integer type=getColumnType(tableName,colName,dbAdapter);\n          maxValueClauses.add(colName + \" <= \" + getLiteralByType(type,maxValue,dbAdapter.getName()));\n        }\n      }\n);\n      whereClause=StringUtils.join(maxValueClauses,\" AND \");\n      final long numberOfFetches=(partitionSize == 0) ? 1 : (rowCount / partitionSize) + (rowCount % partitionSize == 0 ? 0 : 1);\n      for (long i=0; i < numberOfFetches; i++) {\n        Long limit=partitionSize == 0 ? null : (long)partitionSize;\n        Long offset=partitionSize == 0 ? null : i * partitionSize;\n        final String maxColumnNames=StringUtils.join(maxValueColumnNameList,\", \");\n        final String query=dbAdapter.getSelectStatement(tableName,columnNames,whereClause,maxColumnNames,limit,offset);\n        FlowFile sqlFlowFile=(fileToProcess == null) ? session.create() : session.create(fileToProcess);\n        sqlFlowFile=session.write(sqlFlowFile,out -> out.write(query.getBytes()));\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.tableName\",tableName);\n        if (columnNames != null) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.columnNames\",columnNames);\n        }\n        if (StringUtils.isNotBlank(whereClause)) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.whereClause\",whereClause);\n        }\n        if (StringUtils.isNotBlank(maxColumnNames)) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.maxColumnNames\",maxColumnNames);\n        }\n        sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.limit\",String.valueOf(limit));\n        if (partitionSize != 0) {\n          sqlFlowFile=session.putAttribute(sqlFlowFile,\"generatetablefetch.offset\",String.valueOf(offset));\n        }\n        session.transfer(sqlFlowFile,REL_SUCCESS);\n      }\n      if (fileToProcess != null) {\n        session.remove(fileToProcess);\n      }\n    }\n catch (    SQLException e) {\n      if (fileToProcess != null) {\n        logger.error(\"Unable to execute SQL select query {} due to {}, routing {} to failure\",new Object[]{selectQuery,e,fileToProcess});\n        fileToProcess=session.putAttribute(fileToProcess,\"generatetablefetch.sql.error\",e.getMessage());\n        session.transfer(fileToProcess,REL_FAILURE);\n      }\n else {\n        logger.error(\"Unable to execute SQL select query {} due to {}\",new Object[]{selectQuery,e});\n        throw new ProcessException(e);\n      }\n    }\n    session.commit();\n    try {\n      stateManager.setState(statePropertyMap,Scope.CLUSTER);\n    }\n catch (    IOException ioe) {\n      logger.error(\"{} failed to update State Manager, observed maximum values will not be recorded. \" + \"Also, any generated SQL statements may be duplicated.\",new Object[]{this,ioe});\n    }\n  }\n catch (  final ProcessException pe) {\n    Throwable t=(pe.getCause() == null ? pe : pe.getCause());\n    logger.error(\"Error during processing: {}\",new Object[]{t.getMessage()},t);\n    session.rollback();\n    context.yield();\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 1247,
                    "astHeight": 18
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 18,
                    "startLineNumber": 374,
                    "startColumnNumber": 24,
                    "endLineNumber": 374,
                    "endColumnNumber": 42
                },
                "nodeContext": "partitionSize != 0",
                "nodeType": "InfixExpression",
                "astNodeNumber": 3,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "int"
        }
    ],
    "positionList": [
        {
            "charLength": 1,
            "startLineNumber": 242,
            "startColumnNumber": 38,
            "endLineNumber": 242,
            "endColumnNumber": 39
        },
        {
            "charLength": 1,
            "startLineNumber": 251,
            "startColumnNumber": 28,
            "endLineNumber": 251,
            "endColumnNumber": 29
        },
        {
            "charLength": 1,
            "startLineNumber": 278,
            "startColumnNumber": 28,
            "endLineNumber": 278,
            "endColumnNumber": 29
        },
        {
            "charLength": 1,
            "startLineNumber": 333,
            "startColumnNumber": 32,
            "endLineNumber": 333,
            "endColumnNumber": 33
        },
        {
            "charLength": 1,
            "startLineNumber": 353,
            "startColumnNumber": 63,
            "endLineNumber": 353,
            "endColumnNumber": 64
        },
        {
            "charLength": 1,
            "startLineNumber": 353,
            "startColumnNumber": 130,
            "endLineNumber": 353,
            "endColumnNumber": 131
        },
        {
            "charLength": 1,
            "startLineNumber": 353,
            "startColumnNumber": 134,
            "endLineNumber": 353,
            "endColumnNumber": 135
        },
        {
            "charLength": 1,
            "startLineNumber": 356,
            "startColumnNumber": 30,
            "endLineNumber": 356,
            "endColumnNumber": 31
        },
        {
            "charLength": 1,
            "startLineNumber": 357,
            "startColumnNumber": 50,
            "endLineNumber": 357,
            "endColumnNumber": 51
        },
        {
            "charLength": 1,
            "startLineNumber": 358,
            "startColumnNumber": 51,
            "endLineNumber": 358,
            "endColumnNumber": 52
        },
        {
            "charLength": 1,
            "startLineNumber": 374,
            "startColumnNumber": 41,
            "endLineNumber": 374,
            "endColumnNumber": 42
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 0,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 0,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 0,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 0,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 0,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 0,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 0,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 3,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 4,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 4,
            "secondKey": 2,
            "layout": 7
        },
        {
            "firstKey": 4,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 8,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 9,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 10,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 0,
            "layout": 9
        },
        {
            "firstKey": 5,
            "secondKey": 1,
            "layout": 9
        },
        {
            "firstKey": 5,
            "secondKey": 2,
            "layout": 9
        },
        {
            "firstKey": 5,
            "secondKey": 3,
            "layout": 7
        },
        {
            "firstKey": 5,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 6,
            "layout": 1
        },
        {
            "firstKey": 5,
            "secondKey": 7,
            "layout": 7
        },
        {
            "firstKey": 5,
            "secondKey": 8,
            "layout": 7
        },
        {
            "firstKey": 5,
            "secondKey": 9,
            "layout": 7
        },
        {
            "firstKey": 5,
            "secondKey": 10,
            "layout": 7
        },
        {
            "firstKey": 6,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 6,
            "secondKey": 1,
            "layout": 8
        },
        {
            "firstKey": 6,
            "secondKey": 2,
            "layout": 8
        },
        {
            "firstKey": 6,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 6,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 5,
            "layout": 0
        },
        {
            "firstKey": 6,
            "secondKey": 7,
            "layout": 6
        },
        {
            "firstKey": 6,
            "secondKey": 8,
            "layout": 6
        },
        {
            "firstKey": 6,
            "secondKey": 9,
            "layout": 6
        },
        {
            "firstKey": 6,
            "secondKey": 10,
            "layout": 6
        },
        {
            "firstKey": 7,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 7,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 7,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 8,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 8,
            "secondKey": 1,
            "layout": 8
        },
        {
            "firstKey": 8,
            "secondKey": 2,
            "layout": 8
        },
        {
            "firstKey": 8,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 5,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 6,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 9,
            "secondKey": 1,
            "layout": 8
        },
        {
            "firstKey": 9,
            "secondKey": 2,
            "layout": 8
        },
        {
            "firstKey": 9,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 9,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 9,
            "secondKey": 5,
            "layout": 6
        },
        {
            "firstKey": 9,
            "secondKey": 6,
            "layout": 6
        },
        {
            "firstKey": 9,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 9,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 9,
            "layout": 2
        }
    ]
}