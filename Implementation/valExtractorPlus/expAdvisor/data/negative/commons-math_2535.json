{
    "id": 2535,
    "expression": "lu",
    "projectName": "commons-math",
    "commitID": "d60149c7f8a840f9a21556aabfbc0d33e1d58eb5",
    "filePath": "src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java",
    "occurrences": 11,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 0,
    "expressionList": [
        {
            "nodeContext": "lu",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 114,
                "startColumnNumber": 39,
                "endLineNumber": 114,
                "endColumnNumber": 41
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 114,
                        "startColumnNumber": 39,
                        "endLineNumber": 114,
                        "endColumnNumber": 46
                    },
                    "nodeContext": "lu[row]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 15,
                        "startLineNumber": 114,
                        "startColumnNumber": 31,
                        "endLineNumber": 114,
                        "endColumnNumber": 46
                    },
                    "nodeContext": "luRow=lu[row]",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 31,
                        "startLineNumber": 114,
                        "startColumnNumber": 16,
                        "endLineNumber": 114,
                        "endColumnNumber": 47
                    },
                    "nodeContext": "final double[] luRow=lu[row];\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 10,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 247,
                        "startLineNumber": 113,
                        "startColumnNumber": 48,
                        "endLineNumber": 120,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  final double[] luRow=lu[row];\n  sum=luRow[col];\n  for (int i=0; i < row; i++) {\n    sum-=luRow[i] * lu[i][col];\n  }\n  luRow[col]=sum;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 47,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 283,
                        "startLineNumber": 113,
                        "startColumnNumber": 12,
                        "endLineNumber": 120,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (int row=0; row < col; row++) {\n  final double[] luRow=lu[row];\n  sum=luRow[col];\n  for (int i=0; i < row; i++) {\n    sum-=luRow[i] * lu[i][col];\n  }\n  luRow[col]=sum;\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 58,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 1811,
                        "startLineNumber": 108,
                        "startColumnNumber": 42,
                        "endLineNumber": 165,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  double sum=0;\n  for (int row=0; row < col; row++) {\n    final double[] luRow=lu[row];\n    sum=luRow[col];\n    for (int i=0; i < row; i++) {\n      sum-=luRow[i] * lu[i][col];\n    }\n    luRow[col]=sum;\n  }\n  int max=col;\n  double largest=Double.NEGATIVE_INFINITY;\n  for (int row=col; row < m; row++) {\n    final double[] luRow=lu[row];\n    sum=luRow[col];\n    for (int i=0; i < col; i++) {\n      sum-=luRow[i] * lu[i][col];\n    }\n    luRow[col]=sum;\n    if (Math.abs(sum) > largest) {\n      largest=Math.abs(sum);\n      max=row;\n    }\n  }\n  if (Math.abs(lu[max][col]) < singularityThreshold) {\n    singular=true;\n    return;\n  }\n  if (max != col) {\n    double tmp=0;\n    for (int i=0; i < m; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=pivot[max];\n    pivot[max]=pivot[col];\n    pivot[col]=temp;\n    even=!even;\n  }\n  final double luDiag=lu[col][col];\n  for (int row=col + 1; row < m; row++) {\n    lu[row][col]/=luDiag;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 278,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1845,
                        "startLineNumber": 108,
                        "startColumnNumber": 8,
                        "endLineNumber": 165,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int col=0; col < m; col++) {\n  double sum=0;\n  for (int row=0; row < col; row++) {\n    final double[] luRow=lu[row];\n    sum=luRow[col];\n    for (int i=0; i < row; i++) {\n      sum-=luRow[i] * lu[i][col];\n    }\n    luRow[col]=sum;\n  }\n  int max=col;\n  double largest=Double.NEGATIVE_INFINITY;\n  for (int row=col; row < m; row++) {\n    final double[] luRow=lu[row];\n    sum=luRow[col];\n    for (int i=0; i < col; i++) {\n      sum-=luRow[i] * lu[i][col];\n    }\n    luRow[col]=sum;\n    if (Math.abs(sum) > largest) {\n      largest=Math.abs(sum);\n      max=row;\n    }\n  }\n  if (Math.abs(lu[max][col]) < singularityThreshold) {\n    singular=true;\n    return;\n  }\n  if (max != col) {\n    double tmp=0;\n    for (int i=0; i < m; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=pivot[max];\n    pivot[max]=pivot[col];\n    pivot[col]=temp;\n    even=!even;\n  }\n  final double luDiag=lu[col][col];\n  for (int row=col + 1; row < m; row++) {\n    lu[row][col]/=luDiag;\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 289,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2410,
                        "startLineNumber": 87,
                        "startColumnNumber": 40,
                        "endLineNumber": 167,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (!matrix.isSquare()) {\n    throw new NonSquareMatrixException(matrix.getRowDimension(),matrix.getColumnDimension());\n  }\n  final int m=matrix.getColumnDimension();\n  lu=matrix.getData();\n  pivot=new int[m];\n  cachedL=null;\n  cachedU=null;\n  cachedP=null;\n  for (int row=0; row < m; row++) {\n    pivot[row]=row;\n  }\n  even=true;\n  singular=false;\n  for (int col=0; col < m; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      final double[] luRow=lu[row];\n      sum=luRow[col];\n      for (int i=0; i < row; i++) {\n        sum-=luRow[i] * lu[i][col];\n      }\n      luRow[col]=sum;\n    }\n    int max=col;\n    double largest=Double.NEGATIVE_INFINITY;\n    for (int row=col; row < m; row++) {\n      final double[] luRow=lu[row];\n      sum=luRow[col];\n      for (int i=0; i < col; i++) {\n        sum-=luRow[i] * lu[i][col];\n      }\n      luRow[col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < singularityThreshold) {\n      singular=true;\n      return;\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < m; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=pivot[max];\n      pivot[max]=pivot[col];\n      pivot[col]=temp;\n      even=!even;\n    }\n    final double luDiag=lu[col][col];\n    for (int row=col + 1; row < m; row++) {\n      lu[row][col]/=luDiag;\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 366,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2839,
                        "startLineNumber": 79,
                        "startColumnNumber": 4,
                        "endLineNumber": 167,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Calculates the LU-decomposition of the given matrix. \n * @param matrix The matrix to decompose.\n * @param singularityThreshold threshold (based on partial row norm)under which a matrix is considered singular\n * @exception NonSquareMatrixException if matrix is not square\n */\npublic LUDecompositionImpl(RealMatrix matrix,double singularityThreshold) throws NonSquareMatrixException {\n  if (!matrix.isSquare()) {\n    throw new NonSquareMatrixException(matrix.getRowDimension(),matrix.getColumnDimension());\n  }\n  final int m=matrix.getColumnDimension();\n  lu=matrix.getData();\n  pivot=new int[m];\n  cachedL=null;\n  cachedU=null;\n  cachedP=null;\n  for (int row=0; row < m; row++) {\n    pivot[row]=row;\n  }\n  even=true;\n  singular=false;\n  for (int col=0; col < m; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      final double[] luRow=lu[row];\n      sum=luRow[col];\n      for (int i=0; i < row; i++) {\n        sum-=luRow[i] * lu[i][col];\n      }\n      luRow[col]=sum;\n    }\n    int max=col;\n    double largest=Double.NEGATIVE_INFINITY;\n    for (int row=col; row < m; row++) {\n      final double[] luRow=lu[row];\n      sum=luRow[col];\n      for (int i=0; i < col; i++) {\n        sum-=luRow[i] * lu[i][col];\n      }\n      luRow[col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < singularityThreshold) {\n      singular=true;\n      return;\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < m; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=pivot[max];\n      pivot[max]=pivot[col];\n      pivot[col]=temp;\n      even=!even;\n    }\n    final double luDiag=lu[col][col];\n    for (int row=col + 1; row < m; row++) {\n      lu[row][col]/=luDiag;\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 379,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 31,
                    "startLineNumber": 114,
                    "startColumnNumber": 16,
                    "endLineNumber": 114,
                    "endColumnNumber": 47
                },
                "nodeContext": "final double[] luRow=lu[row];\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 10,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "double[][]"
        },
        {
            "nodeContext": "lu",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 117,
                "startColumnNumber": 38,
                "endLineNumber": 117,
                "endColumnNumber": 40
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
                    "nodePosition": {
                        "charLength": 5,
                        "startLineNumber": 117,
                        "startColumnNumber": 38,
                        "endLineNumber": 117,
                        "endColumnNumber": 43
                    },
                    "nodeContext": "lu[i]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 10,
                        "startLineNumber": 117,
                        "startColumnNumber": 38,
                        "endLineNumber": 117,
                        "endColumnNumber": 48
                    },
                    "nodeContext": "lu[i][col]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 21,
                        "startLineNumber": 117,
                        "startColumnNumber": 27,
                        "endLineNumber": 117,
                        "endColumnNumber": 48
                    },
                    "nodeContext": "luRow[i] * lu[i][col]",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 28,
                        "startLineNumber": 117,
                        "startColumnNumber": 20,
                        "endLineNumber": 117,
                        "endColumnNumber": 48
                    },
                    "nodeContext": "sum-=luRow[i] * lu[i][col]",
                    "nodeType": "Assignment",
                    "astNodeNumber": 11,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 29,
                        "startLineNumber": 117,
                        "startColumnNumber": 20,
                        "endLineNumber": 117,
                        "endColumnNumber": 49
                    },
                    "nodeContext": "sum-=luRow[i] * lu[i][col];\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 12,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 69,
                        "startLineNumber": 116,
                        "startColumnNumber": 46,
                        "endLineNumber": 118,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  sum-=luRow[i] * lu[i][col];\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 13,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 99,
                        "startLineNumber": 116,
                        "startColumnNumber": 16,
                        "endLineNumber": 118,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "for (int i=0; i < row; i++) {\n  sum-=luRow[i] * lu[i][col];\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 24,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 247,
                        "startLineNumber": 113,
                        "startColumnNumber": 48,
                        "endLineNumber": 120,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  final double[] luRow=lu[row];\n  sum=luRow[col];\n  for (int i=0; i < row; i++) {\n    sum-=luRow[i] * lu[i][col];\n  }\n  luRow[col]=sum;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 47,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 283,
                        "startLineNumber": 113,
                        "startColumnNumber": 12,
                        "endLineNumber": 120,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (int row=0; row < col; row++) {\n  final double[] luRow=lu[row];\n  sum=luRow[col];\n  for (int i=0; i < row; i++) {\n    sum-=luRow[i] * lu[i][col];\n  }\n  luRow[col]=sum;\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 58,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 1811,
                        "startLineNumber": 108,
                        "startColumnNumber": 42,
                        "endLineNumber": 165,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  double sum=0;\n  for (int row=0; row < col; row++) {\n    final double[] luRow=lu[row];\n    sum=luRow[col];\n    for (int i=0; i < row; i++) {\n      sum-=luRow[i] * lu[i][col];\n    }\n    luRow[col]=sum;\n  }\n  int max=col;\n  double largest=Double.NEGATIVE_INFINITY;\n  for (int row=col; row < m; row++) {\n    final double[] luRow=lu[row];\n    sum=luRow[col];\n    for (int i=0; i < col; i++) {\n      sum-=luRow[i] * lu[i][col];\n    }\n    luRow[col]=sum;\n    if (Math.abs(sum) > largest) {\n      largest=Math.abs(sum);\n      max=row;\n    }\n  }\n  if (Math.abs(lu[max][col]) < singularityThreshold) {\n    singular=true;\n    return;\n  }\n  if (max != col) {\n    double tmp=0;\n    for (int i=0; i < m; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=pivot[max];\n    pivot[max]=pivot[col];\n    pivot[col]=temp;\n    even=!even;\n  }\n  final double luDiag=lu[col][col];\n  for (int row=col + 1; row < m; row++) {\n    lu[row][col]/=luDiag;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 278,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1845,
                        "startLineNumber": 108,
                        "startColumnNumber": 8,
                        "endLineNumber": 165,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int col=0; col < m; col++) {\n  double sum=0;\n  for (int row=0; row < col; row++) {\n    final double[] luRow=lu[row];\n    sum=luRow[col];\n    for (int i=0; i < row; i++) {\n      sum-=luRow[i] * lu[i][col];\n    }\n    luRow[col]=sum;\n  }\n  int max=col;\n  double largest=Double.NEGATIVE_INFINITY;\n  for (int row=col; row < m; row++) {\n    final double[] luRow=lu[row];\n    sum=luRow[col];\n    for (int i=0; i < col; i++) {\n      sum-=luRow[i] * lu[i][col];\n    }\n    luRow[col]=sum;\n    if (Math.abs(sum) > largest) {\n      largest=Math.abs(sum);\n      max=row;\n    }\n  }\n  if (Math.abs(lu[max][col]) < singularityThreshold) {\n    singular=true;\n    return;\n  }\n  if (max != col) {\n    double tmp=0;\n    for (int i=0; i < m; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=pivot[max];\n    pivot[max]=pivot[col];\n    pivot[col]=temp;\n    even=!even;\n  }\n  final double luDiag=lu[col][col];\n  for (int row=col + 1; row < m; row++) {\n    lu[row][col]/=luDiag;\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 289,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2410,
                        "startLineNumber": 87,
                        "startColumnNumber": 40,
                        "endLineNumber": 167,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (!matrix.isSquare()) {\n    throw new NonSquareMatrixException(matrix.getRowDimension(),matrix.getColumnDimension());\n  }\n  final int m=matrix.getColumnDimension();\n  lu=matrix.getData();\n  pivot=new int[m];\n  cachedL=null;\n  cachedU=null;\n  cachedP=null;\n  for (int row=0; row < m; row++) {\n    pivot[row]=row;\n  }\n  even=true;\n  singular=false;\n  for (int col=0; col < m; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      final double[] luRow=lu[row];\n      sum=luRow[col];\n      for (int i=0; i < row; i++) {\n        sum-=luRow[i] * lu[i][col];\n      }\n      luRow[col]=sum;\n    }\n    int max=col;\n    double largest=Double.NEGATIVE_INFINITY;\n    for (int row=col; row < m; row++) {\n      final double[] luRow=lu[row];\n      sum=luRow[col];\n      for (int i=0; i < col; i++) {\n        sum-=luRow[i] * lu[i][col];\n      }\n      luRow[col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < singularityThreshold) {\n      singular=true;\n      return;\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < m; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=pivot[max];\n      pivot[max]=pivot[col];\n      pivot[col]=temp;\n      even=!even;\n    }\n    final double luDiag=lu[col][col];\n    for (int row=col + 1; row < m; row++) {\n      lu[row][col]/=luDiag;\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 366,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2839,
                        "startLineNumber": 79,
                        "startColumnNumber": 4,
                        "endLineNumber": 167,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Calculates the LU-decomposition of the given matrix. \n * @param matrix The matrix to decompose.\n * @param singularityThreshold threshold (based on partial row norm)under which a matrix is considered singular\n * @exception NonSquareMatrixException if matrix is not square\n */\npublic LUDecompositionImpl(RealMatrix matrix,double singularityThreshold) throws NonSquareMatrixException {\n  if (!matrix.isSquare()) {\n    throw new NonSquareMatrixException(matrix.getRowDimension(),matrix.getColumnDimension());\n  }\n  final int m=matrix.getColumnDimension();\n  lu=matrix.getData();\n  pivot=new int[m];\n  cachedL=null;\n  cachedU=null;\n  cachedP=null;\n  for (int row=0; row < m; row++) {\n    pivot[row]=row;\n  }\n  even=true;\n  singular=false;\n  for (int col=0; col < m; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      final double[] luRow=lu[row];\n      sum=luRow[col];\n      for (int i=0; i < row; i++) {\n        sum-=luRow[i] * lu[i][col];\n      }\n      luRow[col]=sum;\n    }\n    int max=col;\n    double largest=Double.NEGATIVE_INFINITY;\n    for (int row=col; row < m; row++) {\n      final double[] luRow=lu[row];\n      sum=luRow[col];\n      for (int i=0; i < col; i++) {\n        sum-=luRow[i] * lu[i][col];\n      }\n      luRow[col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < singularityThreshold) {\n      singular=true;\n      return;\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < m; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=pivot[max];\n      pivot[max]=pivot[col];\n      pivot[col]=temp;\n      even=!even;\n    }\n    final double luDiag=lu[col][col];\n    for (int row=col + 1; row < m; row++) {\n      lu[row][col]/=luDiag;\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 379,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 29,
                    "startLineNumber": 117,
                    "startColumnNumber": 20,
                    "endLineNumber": 117,
                    "endColumnNumber": 49
                },
                "nodeContext": "sum-=luRow[i] * lu[i][col];\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 12,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "double[][]"
        },
        {
            "nodeContext": "lu",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 126,
                "startColumnNumber": 39,
                "endLineNumber": 126,
                "endColumnNumber": 41
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 126,
                        "startColumnNumber": 39,
                        "endLineNumber": 126,
                        "endColumnNumber": 46
                    },
                    "nodeContext": "lu[row]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 15,
                        "startLineNumber": 126,
                        "startColumnNumber": 31,
                        "endLineNumber": 126,
                        "endColumnNumber": 46
                    },
                    "nodeContext": "luRow=lu[row]",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 31,
                        "startLineNumber": 126,
                        "startColumnNumber": 16,
                        "endLineNumber": 126,
                        "endColumnNumber": 47
                    },
                    "nodeContext": "final double[] luRow=lu[row];\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 10,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 441,
                        "startLineNumber": 125,
                        "startColumnNumber": 48,
                        "endLineNumber": 138,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  final double[] luRow=lu[row];\n  sum=luRow[col];\n  for (int i=0; i < col; i++) {\n    sum-=luRow[i] * lu[i][col];\n  }\n  luRow[col]=sum;\n  if (Math.abs(sum) > largest) {\n    largest=Math.abs(sum);\n    max=row;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 66,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 477,
                        "startLineNumber": 125,
                        "startColumnNumber": 12,
                        "endLineNumber": 138,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (int row=col; row < m; row++) {\n  final double[] luRow=lu[row];\n  sum=luRow[col];\n  for (int i=0; i < col; i++) {\n    sum-=luRow[i] * lu[i][col];\n  }\n  luRow[col]=sum;\n  if (Math.abs(sum) > largest) {\n    largest=Math.abs(sum);\n    max=row;\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 77,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 1811,
                        "startLineNumber": 108,
                        "startColumnNumber": 42,
                        "endLineNumber": 165,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  double sum=0;\n  for (int row=0; row < col; row++) {\n    final double[] luRow=lu[row];\n    sum=luRow[col];\n    for (int i=0; i < row; i++) {\n      sum-=luRow[i] * lu[i][col];\n    }\n    luRow[col]=sum;\n  }\n  int max=col;\n  double largest=Double.NEGATIVE_INFINITY;\n  for (int row=col; row < m; row++) {\n    final double[] luRow=lu[row];\n    sum=luRow[col];\n    for (int i=0; i < col; i++) {\n      sum-=luRow[i] * lu[i][col];\n    }\n    luRow[col]=sum;\n    if (Math.abs(sum) > largest) {\n      largest=Math.abs(sum);\n      max=row;\n    }\n  }\n  if (Math.abs(lu[max][col]) < singularityThreshold) {\n    singular=true;\n    return;\n  }\n  if (max != col) {\n    double tmp=0;\n    for (int i=0; i < m; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=pivot[max];\n    pivot[max]=pivot[col];\n    pivot[col]=temp;\n    even=!even;\n  }\n  final double luDiag=lu[col][col];\n  for (int row=col + 1; row < m; row++) {\n    lu[row][col]/=luDiag;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 278,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1845,
                        "startLineNumber": 108,
                        "startColumnNumber": 8,
                        "endLineNumber": 165,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int col=0; col < m; col++) {\n  double sum=0;\n  for (int row=0; row < col; row++) {\n    final double[] luRow=lu[row];\n    sum=luRow[col];\n    for (int i=0; i < row; i++) {\n      sum-=luRow[i] * lu[i][col];\n    }\n    luRow[col]=sum;\n  }\n  int max=col;\n  double largest=Double.NEGATIVE_INFINITY;\n  for (int row=col; row < m; row++) {\n    final double[] luRow=lu[row];\n    sum=luRow[col];\n    for (int i=0; i < col; i++) {\n      sum-=luRow[i] * lu[i][col];\n    }\n    luRow[col]=sum;\n    if (Math.abs(sum) > largest) {\n      largest=Math.abs(sum);\n      max=row;\n    }\n  }\n  if (Math.abs(lu[max][col]) < singularityThreshold) {\n    singular=true;\n    return;\n  }\n  if (max != col) {\n    double tmp=0;\n    for (int i=0; i < m; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=pivot[max];\n    pivot[max]=pivot[col];\n    pivot[col]=temp;\n    even=!even;\n  }\n  final double luDiag=lu[col][col];\n  for (int row=col + 1; row < m; row++) {\n    lu[row][col]/=luDiag;\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 289,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2410,
                        "startLineNumber": 87,
                        "startColumnNumber": 40,
                        "endLineNumber": 167,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (!matrix.isSquare()) {\n    throw new NonSquareMatrixException(matrix.getRowDimension(),matrix.getColumnDimension());\n  }\n  final int m=matrix.getColumnDimension();\n  lu=matrix.getData();\n  pivot=new int[m];\n  cachedL=null;\n  cachedU=null;\n  cachedP=null;\n  for (int row=0; row < m; row++) {\n    pivot[row]=row;\n  }\n  even=true;\n  singular=false;\n  for (int col=0; col < m; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      final double[] luRow=lu[row];\n      sum=luRow[col];\n      for (int i=0; i < row; i++) {\n        sum-=luRow[i] * lu[i][col];\n      }\n      luRow[col]=sum;\n    }\n    int max=col;\n    double largest=Double.NEGATIVE_INFINITY;\n    for (int row=col; row < m; row++) {\n      final double[] luRow=lu[row];\n      sum=luRow[col];\n      for (int i=0; i < col; i++) {\n        sum-=luRow[i] * lu[i][col];\n      }\n      luRow[col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < singularityThreshold) {\n      singular=true;\n      return;\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < m; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=pivot[max];\n      pivot[max]=pivot[col];\n      pivot[col]=temp;\n      even=!even;\n    }\n    final double luDiag=lu[col][col];\n    for (int row=col + 1; row < m; row++) {\n      lu[row][col]/=luDiag;\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 366,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2839,
                        "startLineNumber": 79,
                        "startColumnNumber": 4,
                        "endLineNumber": 167,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Calculates the LU-decomposition of the given matrix. \n * @param matrix The matrix to decompose.\n * @param singularityThreshold threshold (based on partial row norm)under which a matrix is considered singular\n * @exception NonSquareMatrixException if matrix is not square\n */\npublic LUDecompositionImpl(RealMatrix matrix,double singularityThreshold) throws NonSquareMatrixException {\n  if (!matrix.isSquare()) {\n    throw new NonSquareMatrixException(matrix.getRowDimension(),matrix.getColumnDimension());\n  }\n  final int m=matrix.getColumnDimension();\n  lu=matrix.getData();\n  pivot=new int[m];\n  cachedL=null;\n  cachedU=null;\n  cachedP=null;\n  for (int row=0; row < m; row++) {\n    pivot[row]=row;\n  }\n  even=true;\n  singular=false;\n  for (int col=0; col < m; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      final double[] luRow=lu[row];\n      sum=luRow[col];\n      for (int i=0; i < row; i++) {\n        sum-=luRow[i] * lu[i][col];\n      }\n      luRow[col]=sum;\n    }\n    int max=col;\n    double largest=Double.NEGATIVE_INFINITY;\n    for (int row=col; row < m; row++) {\n      final double[] luRow=lu[row];\n      sum=luRow[col];\n      for (int i=0; i < col; i++) {\n        sum-=luRow[i] * lu[i][col];\n      }\n      luRow[col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < singularityThreshold) {\n      singular=true;\n      return;\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < m; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=pivot[max];\n      pivot[max]=pivot[col];\n      pivot[col]=temp;\n      even=!even;\n    }\n    final double luDiag=lu[col][col];\n    for (int row=col + 1; row < m; row++) {\n      lu[row][col]/=luDiag;\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 379,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 31,
                    "startLineNumber": 126,
                    "startColumnNumber": 16,
                    "endLineNumber": 126,
                    "endColumnNumber": 47
                },
                "nodeContext": "final double[] luRow=lu[row];\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 10,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "double[][]"
        },
        {
            "nodeContext": "lu",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 129,
                "startColumnNumber": 38,
                "endLineNumber": 129,
                "endColumnNumber": 40
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
                    "nodePosition": {
                        "charLength": 5,
                        "startLineNumber": 129,
                        "startColumnNumber": 38,
                        "endLineNumber": 129,
                        "endColumnNumber": 43
                    },
                    "nodeContext": "lu[i]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 10,
                        "startLineNumber": 129,
                        "startColumnNumber": 38,
                        "endLineNumber": 129,
                        "endColumnNumber": 48
                    },
                    "nodeContext": "lu[i][col]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 21,
                        "startLineNumber": 129,
                        "startColumnNumber": 27,
                        "endLineNumber": 129,
                        "endColumnNumber": 48
                    },
                    "nodeContext": "luRow[i] * lu[i][col]",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 28,
                        "startLineNumber": 129,
                        "startColumnNumber": 20,
                        "endLineNumber": 129,
                        "endColumnNumber": 48
                    },
                    "nodeContext": "sum-=luRow[i] * lu[i][col]",
                    "nodeType": "Assignment",
                    "astNodeNumber": 11,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 29,
                        "startLineNumber": 129,
                        "startColumnNumber": 20,
                        "endLineNumber": 129,
                        "endColumnNumber": 49
                    },
                    "nodeContext": "sum-=luRow[i] * lu[i][col];\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 12,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 69,
                        "startLineNumber": 128,
                        "startColumnNumber": 46,
                        "endLineNumber": 130,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  sum-=luRow[i] * lu[i][col];\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 13,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 99,
                        "startLineNumber": 128,
                        "startColumnNumber": 16,
                        "endLineNumber": 130,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "for (int i=0; i < col; i++) {\n  sum-=luRow[i] * lu[i][col];\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 24,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 441,
                        "startLineNumber": 125,
                        "startColumnNumber": 48,
                        "endLineNumber": 138,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  final double[] luRow=lu[row];\n  sum=luRow[col];\n  for (int i=0; i < col; i++) {\n    sum-=luRow[i] * lu[i][col];\n  }\n  luRow[col]=sum;\n  if (Math.abs(sum) > largest) {\n    largest=Math.abs(sum);\n    max=row;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 66,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 477,
                        "startLineNumber": 125,
                        "startColumnNumber": 12,
                        "endLineNumber": 138,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (int row=col; row < m; row++) {\n  final double[] luRow=lu[row];\n  sum=luRow[col];\n  for (int i=0; i < col; i++) {\n    sum-=luRow[i] * lu[i][col];\n  }\n  luRow[col]=sum;\n  if (Math.abs(sum) > largest) {\n    largest=Math.abs(sum);\n    max=row;\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 77,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 1811,
                        "startLineNumber": 108,
                        "startColumnNumber": 42,
                        "endLineNumber": 165,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  double sum=0;\n  for (int row=0; row < col; row++) {\n    final double[] luRow=lu[row];\n    sum=luRow[col];\n    for (int i=0; i < row; i++) {\n      sum-=luRow[i] * lu[i][col];\n    }\n    luRow[col]=sum;\n  }\n  int max=col;\n  double largest=Double.NEGATIVE_INFINITY;\n  for (int row=col; row < m; row++) {\n    final double[] luRow=lu[row];\n    sum=luRow[col];\n    for (int i=0; i < col; i++) {\n      sum-=luRow[i] * lu[i][col];\n    }\n    luRow[col]=sum;\n    if (Math.abs(sum) > largest) {\n      largest=Math.abs(sum);\n      max=row;\n    }\n  }\n  if (Math.abs(lu[max][col]) < singularityThreshold) {\n    singular=true;\n    return;\n  }\n  if (max != col) {\n    double tmp=0;\n    for (int i=0; i < m; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=pivot[max];\n    pivot[max]=pivot[col];\n    pivot[col]=temp;\n    even=!even;\n  }\n  final double luDiag=lu[col][col];\n  for (int row=col + 1; row < m; row++) {\n    lu[row][col]/=luDiag;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 278,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1845,
                        "startLineNumber": 108,
                        "startColumnNumber": 8,
                        "endLineNumber": 165,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int col=0; col < m; col++) {\n  double sum=0;\n  for (int row=0; row < col; row++) {\n    final double[] luRow=lu[row];\n    sum=luRow[col];\n    for (int i=0; i < row; i++) {\n      sum-=luRow[i] * lu[i][col];\n    }\n    luRow[col]=sum;\n  }\n  int max=col;\n  double largest=Double.NEGATIVE_INFINITY;\n  for (int row=col; row < m; row++) {\n    final double[] luRow=lu[row];\n    sum=luRow[col];\n    for (int i=0; i < col; i++) {\n      sum-=luRow[i] * lu[i][col];\n    }\n    luRow[col]=sum;\n    if (Math.abs(sum) > largest) {\n      largest=Math.abs(sum);\n      max=row;\n    }\n  }\n  if (Math.abs(lu[max][col]) < singularityThreshold) {\n    singular=true;\n    return;\n  }\n  if (max != col) {\n    double tmp=0;\n    for (int i=0; i < m; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=pivot[max];\n    pivot[max]=pivot[col];\n    pivot[col]=temp;\n    even=!even;\n  }\n  final double luDiag=lu[col][col];\n  for (int row=col + 1; row < m; row++) {\n    lu[row][col]/=luDiag;\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 289,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2410,
                        "startLineNumber": 87,
                        "startColumnNumber": 40,
                        "endLineNumber": 167,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (!matrix.isSquare()) {\n    throw new NonSquareMatrixException(matrix.getRowDimension(),matrix.getColumnDimension());\n  }\n  final int m=matrix.getColumnDimension();\n  lu=matrix.getData();\n  pivot=new int[m];\n  cachedL=null;\n  cachedU=null;\n  cachedP=null;\n  for (int row=0; row < m; row++) {\n    pivot[row]=row;\n  }\n  even=true;\n  singular=false;\n  for (int col=0; col < m; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      final double[] luRow=lu[row];\n      sum=luRow[col];\n      for (int i=0; i < row; i++) {\n        sum-=luRow[i] * lu[i][col];\n      }\n      luRow[col]=sum;\n    }\n    int max=col;\n    double largest=Double.NEGATIVE_INFINITY;\n    for (int row=col; row < m; row++) {\n      final double[] luRow=lu[row];\n      sum=luRow[col];\n      for (int i=0; i < col; i++) {\n        sum-=luRow[i] * lu[i][col];\n      }\n      luRow[col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < singularityThreshold) {\n      singular=true;\n      return;\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < m; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=pivot[max];\n      pivot[max]=pivot[col];\n      pivot[col]=temp;\n      even=!even;\n    }\n    final double luDiag=lu[col][col];\n    for (int row=col + 1; row < m; row++) {\n      lu[row][col]/=luDiag;\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 366,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2839,
                        "startLineNumber": 79,
                        "startColumnNumber": 4,
                        "endLineNumber": 167,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Calculates the LU-decomposition of the given matrix. \n * @param matrix The matrix to decompose.\n * @param singularityThreshold threshold (based on partial row norm)under which a matrix is considered singular\n * @exception NonSquareMatrixException if matrix is not square\n */\npublic LUDecompositionImpl(RealMatrix matrix,double singularityThreshold) throws NonSquareMatrixException {\n  if (!matrix.isSquare()) {\n    throw new NonSquareMatrixException(matrix.getRowDimension(),matrix.getColumnDimension());\n  }\n  final int m=matrix.getColumnDimension();\n  lu=matrix.getData();\n  pivot=new int[m];\n  cachedL=null;\n  cachedU=null;\n  cachedP=null;\n  for (int row=0; row < m; row++) {\n    pivot[row]=row;\n  }\n  even=true;\n  singular=false;\n  for (int col=0; col < m; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      final double[] luRow=lu[row];\n      sum=luRow[col];\n      for (int i=0; i < row; i++) {\n        sum-=luRow[i] * lu[i][col];\n      }\n      luRow[col]=sum;\n    }\n    int max=col;\n    double largest=Double.NEGATIVE_INFINITY;\n    for (int row=col; row < m; row++) {\n      final double[] luRow=lu[row];\n      sum=luRow[col];\n      for (int i=0; i < col; i++) {\n        sum-=luRow[i] * lu[i][col];\n      }\n      luRow[col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < singularityThreshold) {\n      singular=true;\n      return;\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < m; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=pivot[max];\n      pivot[max]=pivot[col];\n      pivot[col]=temp;\n      even=!even;\n    }\n    final double luDiag=lu[col][col];\n    for (int row=col + 1; row < m; row++) {\n      lu[row][col]/=luDiag;\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 379,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 29,
                    "startLineNumber": 129,
                    "startColumnNumber": 20,
                    "endLineNumber": 129,
                    "endColumnNumber": 49
                },
                "nodeContext": "sum-=luRow[i] * lu[i][col];\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 12,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "double[][]"
        },
        {
            "nodeContext": "lu",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 141,
                "startColumnNumber": 25,
                "endLineNumber": 141,
                "endColumnNumber": 27
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 141,
                        "startColumnNumber": 25,
                        "endLineNumber": 141,
                        "endColumnNumber": 32
                    },
                    "nodeContext": "lu[max]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 12,
                        "startLineNumber": 141,
                        "startColumnNumber": 25,
                        "endLineNumber": 141,
                        "endColumnNumber": 37
                    },
                    "nodeContext": "lu[max][col]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 22,
                        "startLineNumber": 141,
                        "startColumnNumber": 16,
                        "endLineNumber": 141,
                        "endColumnNumber": 38
                    },
                    "nodeContext": "Math.abs(lu[max][col])",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 45,
                        "startLineNumber": 141,
                        "startColumnNumber": 16,
                        "endLineNumber": 141,
                        "endColumnNumber": 61
                    },
                    "nodeContext": "Math.abs(lu[max][col]) < singularityThreshold",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 10,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 123,
                        "startLineNumber": 141,
                        "startColumnNumber": 12,
                        "endLineNumber": 144,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (Math.abs(lu[max][col]) < singularityThreshold) {\n  singular=true;\n  return;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 17,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 1811,
                        "startLineNumber": 108,
                        "startColumnNumber": 42,
                        "endLineNumber": 165,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  double sum=0;\n  for (int row=0; row < col; row++) {\n    final double[] luRow=lu[row];\n    sum=luRow[col];\n    for (int i=0; i < row; i++) {\n      sum-=luRow[i] * lu[i][col];\n    }\n    luRow[col]=sum;\n  }\n  int max=col;\n  double largest=Double.NEGATIVE_INFINITY;\n  for (int row=col; row < m; row++) {\n    final double[] luRow=lu[row];\n    sum=luRow[col];\n    for (int i=0; i < col; i++) {\n      sum-=luRow[i] * lu[i][col];\n    }\n    luRow[col]=sum;\n    if (Math.abs(sum) > largest) {\n      largest=Math.abs(sum);\n      max=row;\n    }\n  }\n  if (Math.abs(lu[max][col]) < singularityThreshold) {\n    singular=true;\n    return;\n  }\n  if (max != col) {\n    double tmp=0;\n    for (int i=0; i < m; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=pivot[max];\n    pivot[max]=pivot[col];\n    pivot[col]=temp;\n    even=!even;\n  }\n  final double luDiag=lu[col][col];\n  for (int row=col + 1; row < m; row++) {\n    lu[row][col]/=luDiag;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 278,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1845,
                        "startLineNumber": 108,
                        "startColumnNumber": 8,
                        "endLineNumber": 165,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int col=0; col < m; col++) {\n  double sum=0;\n  for (int row=0; row < col; row++) {\n    final double[] luRow=lu[row];\n    sum=luRow[col];\n    for (int i=0; i < row; i++) {\n      sum-=luRow[i] * lu[i][col];\n    }\n    luRow[col]=sum;\n  }\n  int max=col;\n  double largest=Double.NEGATIVE_INFINITY;\n  for (int row=col; row < m; row++) {\n    final double[] luRow=lu[row];\n    sum=luRow[col];\n    for (int i=0; i < col; i++) {\n      sum-=luRow[i] * lu[i][col];\n    }\n    luRow[col]=sum;\n    if (Math.abs(sum) > largest) {\n      largest=Math.abs(sum);\n      max=row;\n    }\n  }\n  if (Math.abs(lu[max][col]) < singularityThreshold) {\n    singular=true;\n    return;\n  }\n  if (max != col) {\n    double tmp=0;\n    for (int i=0; i < m; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=pivot[max];\n    pivot[max]=pivot[col];\n    pivot[col]=temp;\n    even=!even;\n  }\n  final double luDiag=lu[col][col];\n  for (int row=col + 1; row < m; row++) {\n    lu[row][col]/=luDiag;\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 289,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2410,
                        "startLineNumber": 87,
                        "startColumnNumber": 40,
                        "endLineNumber": 167,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (!matrix.isSquare()) {\n    throw new NonSquareMatrixException(matrix.getRowDimension(),matrix.getColumnDimension());\n  }\n  final int m=matrix.getColumnDimension();\n  lu=matrix.getData();\n  pivot=new int[m];\n  cachedL=null;\n  cachedU=null;\n  cachedP=null;\n  for (int row=0; row < m; row++) {\n    pivot[row]=row;\n  }\n  even=true;\n  singular=false;\n  for (int col=0; col < m; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      final double[] luRow=lu[row];\n      sum=luRow[col];\n      for (int i=0; i < row; i++) {\n        sum-=luRow[i] * lu[i][col];\n      }\n      luRow[col]=sum;\n    }\n    int max=col;\n    double largest=Double.NEGATIVE_INFINITY;\n    for (int row=col; row < m; row++) {\n      final double[] luRow=lu[row];\n      sum=luRow[col];\n      for (int i=0; i < col; i++) {\n        sum-=luRow[i] * lu[i][col];\n      }\n      luRow[col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < singularityThreshold) {\n      singular=true;\n      return;\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < m; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=pivot[max];\n      pivot[max]=pivot[col];\n      pivot[col]=temp;\n      even=!even;\n    }\n    final double luDiag=lu[col][col];\n    for (int row=col + 1; row < m; row++) {\n      lu[row][col]/=luDiag;\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 366,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2839,
                        "startLineNumber": 79,
                        "startColumnNumber": 4,
                        "endLineNumber": 167,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Calculates the LU-decomposition of the given matrix. \n * @param matrix The matrix to decompose.\n * @param singularityThreshold threshold (based on partial row norm)under which a matrix is considered singular\n * @exception NonSquareMatrixException if matrix is not square\n */\npublic LUDecompositionImpl(RealMatrix matrix,double singularityThreshold) throws NonSquareMatrixException {\n  if (!matrix.isSquare()) {\n    throw new NonSquareMatrixException(matrix.getRowDimension(),matrix.getColumnDimension());\n  }\n  final int m=matrix.getColumnDimension();\n  lu=matrix.getData();\n  pivot=new int[m];\n  cachedL=null;\n  cachedU=null;\n  cachedP=null;\n  for (int row=0; row < m; row++) {\n    pivot[row]=row;\n  }\n  even=true;\n  singular=false;\n  for (int col=0; col < m; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      final double[] luRow=lu[row];\n      sum=luRow[col];\n      for (int i=0; i < row; i++) {\n        sum-=luRow[i] * lu[i][col];\n      }\n      luRow[col]=sum;\n    }\n    int max=col;\n    double largest=Double.NEGATIVE_INFINITY;\n    for (int row=col; row < m; row++) {\n      final double[] luRow=lu[row];\n      sum=luRow[col];\n      for (int i=0; i < col; i++) {\n        sum-=luRow[i] * lu[i][col];\n      }\n      luRow[col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < singularityThreshold) {\n      singular=true;\n      return;\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < m; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=pivot[max];\n      pivot[max]=pivot[col];\n      pivot[col]=temp;\n      even=!even;\n    }\n    final double luDiag=lu[col][col];\n    for (int row=col + 1; row < m; row++) {\n      lu[row][col]/=luDiag;\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 379,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 45,
                    "startLineNumber": 141,
                    "startColumnNumber": 16,
                    "endLineNumber": 141,
                    "endColumnNumber": 61
                },
                "nodeContext": "Math.abs(lu[max][col]) < singularityThreshold",
                "nodeType": "InfixExpression",
                "astNodeNumber": 10,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "double[][]"
        },
        {
            "nodeContext": "lu",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 150,
                "startColumnNumber": 26,
                "endLineNumber": 150,
                "endColumnNumber": 28
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 150,
                        "startColumnNumber": 26,
                        "endLineNumber": 150,
                        "endColumnNumber": 33
                    },
                    "nodeContext": "lu[max]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 10,
                        "startLineNumber": 150,
                        "startColumnNumber": 26,
                        "endLineNumber": 150,
                        "endColumnNumber": 36
                    },
                    "nodeContext": "lu[max][i]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 16,
                        "startLineNumber": 150,
                        "startColumnNumber": 20,
                        "endLineNumber": 150,
                        "endColumnNumber": 36
                    },
                    "nodeContext": "tmp=lu[max][i]",
                    "nodeType": "Assignment",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 17,
                        "startLineNumber": 150,
                        "startColumnNumber": 20,
                        "endLineNumber": 150,
                        "endColumnNumber": 37
                    },
                    "nodeContext": "tmp=lu[max][i];\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 140,
                        "startLineNumber": 149,
                        "startColumnNumber": 44,
                        "endLineNumber": 153,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  tmp=lu[max][i];\n  lu[max][i]=lu[col][i];\n  lu[col][i]=tmp;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 29,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 168,
                        "startLineNumber": 149,
                        "startColumnNumber": 16,
                        "endLineNumber": 153,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "for (int i=0; i < m; i++) {\n  tmp=lu[max][i];\n  lu[max][i]=lu[col][i];\n  lu[col][i]=tmp;\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 40,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 377,
                        "startLineNumber": 147,
                        "startColumnNumber": 28,
                        "endLineNumber": 158,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  double tmp=0;\n  for (int i=0; i < m; i++) {\n    tmp=lu[max][i];\n    lu[max][i]=lu[col][i];\n    lu[col][i]=tmp;\n  }\n  int temp=pivot[max];\n  pivot[max]=pivot[col];\n  pivot[col]=temp;\n  even=!even;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 72,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 393,
                        "startLineNumber": 147,
                        "startColumnNumber": 12,
                        "endLineNumber": 158,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (max != col) {\n  double tmp=0;\n  for (int i=0; i < m; i++) {\n    tmp=lu[max][i];\n    lu[max][i]=lu[col][i];\n    lu[col][i]=tmp;\n  }\n  int temp=pivot[max];\n  pivot[max]=pivot[col];\n  pivot[col]=temp;\n  even=!even;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 76,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 1811,
                        "startLineNumber": 108,
                        "startColumnNumber": 42,
                        "endLineNumber": 165,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  double sum=0;\n  for (int row=0; row < col; row++) {\n    final double[] luRow=lu[row];\n    sum=luRow[col];\n    for (int i=0; i < row; i++) {\n      sum-=luRow[i] * lu[i][col];\n    }\n    luRow[col]=sum;\n  }\n  int max=col;\n  double largest=Double.NEGATIVE_INFINITY;\n  for (int row=col; row < m; row++) {\n    final double[] luRow=lu[row];\n    sum=luRow[col];\n    for (int i=0; i < col; i++) {\n      sum-=luRow[i] * lu[i][col];\n    }\n    luRow[col]=sum;\n    if (Math.abs(sum) > largest) {\n      largest=Math.abs(sum);\n      max=row;\n    }\n  }\n  if (Math.abs(lu[max][col]) < singularityThreshold) {\n    singular=true;\n    return;\n  }\n  if (max != col) {\n    double tmp=0;\n    for (int i=0; i < m; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=pivot[max];\n    pivot[max]=pivot[col];\n    pivot[col]=temp;\n    even=!even;\n  }\n  final double luDiag=lu[col][col];\n  for (int row=col + 1; row < m; row++) {\n    lu[row][col]/=luDiag;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 278,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1845,
                        "startLineNumber": 108,
                        "startColumnNumber": 8,
                        "endLineNumber": 165,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int col=0; col < m; col++) {\n  double sum=0;\n  for (int row=0; row < col; row++) {\n    final double[] luRow=lu[row];\n    sum=luRow[col];\n    for (int i=0; i < row; i++) {\n      sum-=luRow[i] * lu[i][col];\n    }\n    luRow[col]=sum;\n  }\n  int max=col;\n  double largest=Double.NEGATIVE_INFINITY;\n  for (int row=col; row < m; row++) {\n    final double[] luRow=lu[row];\n    sum=luRow[col];\n    for (int i=0; i < col; i++) {\n      sum-=luRow[i] * lu[i][col];\n    }\n    luRow[col]=sum;\n    if (Math.abs(sum) > largest) {\n      largest=Math.abs(sum);\n      max=row;\n    }\n  }\n  if (Math.abs(lu[max][col]) < singularityThreshold) {\n    singular=true;\n    return;\n  }\n  if (max != col) {\n    double tmp=0;\n    for (int i=0; i < m; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=pivot[max];\n    pivot[max]=pivot[col];\n    pivot[col]=temp;\n    even=!even;\n  }\n  final double luDiag=lu[col][col];\n  for (int row=col + 1; row < m; row++) {\n    lu[row][col]/=luDiag;\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 289,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2410,
                        "startLineNumber": 87,
                        "startColumnNumber": 40,
                        "endLineNumber": 167,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (!matrix.isSquare()) {\n    throw new NonSquareMatrixException(matrix.getRowDimension(),matrix.getColumnDimension());\n  }\n  final int m=matrix.getColumnDimension();\n  lu=matrix.getData();\n  pivot=new int[m];\n  cachedL=null;\n  cachedU=null;\n  cachedP=null;\n  for (int row=0; row < m; row++) {\n    pivot[row]=row;\n  }\n  even=true;\n  singular=false;\n  for (int col=0; col < m; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      final double[] luRow=lu[row];\n      sum=luRow[col];\n      for (int i=0; i < row; i++) {\n        sum-=luRow[i] * lu[i][col];\n      }\n      luRow[col]=sum;\n    }\n    int max=col;\n    double largest=Double.NEGATIVE_INFINITY;\n    for (int row=col; row < m; row++) {\n      final double[] luRow=lu[row];\n      sum=luRow[col];\n      for (int i=0; i < col; i++) {\n        sum-=luRow[i] * lu[i][col];\n      }\n      luRow[col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < singularityThreshold) {\n      singular=true;\n      return;\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < m; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=pivot[max];\n      pivot[max]=pivot[col];\n      pivot[col]=temp;\n      even=!even;\n    }\n    final double luDiag=lu[col][col];\n    for (int row=col + 1; row < m; row++) {\n      lu[row][col]/=luDiag;\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 366,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2839,
                        "startLineNumber": 79,
                        "startColumnNumber": 4,
                        "endLineNumber": 167,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Calculates the LU-decomposition of the given matrix. \n * @param matrix The matrix to decompose.\n * @param singularityThreshold threshold (based on partial row norm)under which a matrix is considered singular\n * @exception NonSquareMatrixException if matrix is not square\n */\npublic LUDecompositionImpl(RealMatrix matrix,double singularityThreshold) throws NonSquareMatrixException {\n  if (!matrix.isSquare()) {\n    throw new NonSquareMatrixException(matrix.getRowDimension(),matrix.getColumnDimension());\n  }\n  final int m=matrix.getColumnDimension();\n  lu=matrix.getData();\n  pivot=new int[m];\n  cachedL=null;\n  cachedU=null;\n  cachedP=null;\n  for (int row=0; row < m; row++) {\n    pivot[row]=row;\n  }\n  even=true;\n  singular=false;\n  for (int col=0; col < m; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      final double[] luRow=lu[row];\n      sum=luRow[col];\n      for (int i=0; i < row; i++) {\n        sum-=luRow[i] * lu[i][col];\n      }\n      luRow[col]=sum;\n    }\n    int max=col;\n    double largest=Double.NEGATIVE_INFINITY;\n    for (int row=col; row < m; row++) {\n      final double[] luRow=lu[row];\n      sum=luRow[col];\n      for (int i=0; i < col; i++) {\n        sum-=luRow[i] * lu[i][col];\n      }\n      luRow[col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < singularityThreshold) {\n      singular=true;\n      return;\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < m; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=pivot[max];\n      pivot[max]=pivot[col];\n      pivot[col]=temp;\n      even=!even;\n    }\n    final double luDiag=lu[col][col];\n    for (int row=col + 1; row < m; row++) {\n      lu[row][col]/=luDiag;\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 379,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 17,
                    "startLineNumber": 150,
                    "startColumnNumber": 20,
                    "endLineNumber": 150,
                    "endColumnNumber": 37
                },
                "nodeContext": "tmp=lu[max][i];\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "double[][]"
        },
        {
            "nodeContext": "lu",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 151,
                "startColumnNumber": 20,
                "endLineNumber": 151,
                "endColumnNumber": 22
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 151,
                        "startColumnNumber": 20,
                        "endLineNumber": 151,
                        "endColumnNumber": 27
                    },
                    "nodeContext": "lu[max]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
                    "nodePosition": {
                        "charLength": 10,
                        "startLineNumber": 151,
                        "startColumnNumber": 20,
                        "endLineNumber": 151,
                        "endColumnNumber": 30
                    },
                    "nodeContext": "lu[max][i]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 23,
                        "startLineNumber": 151,
                        "startColumnNumber": 20,
                        "endLineNumber": 151,
                        "endColumnNumber": 43
                    },
                    "nodeContext": "lu[max][i]=lu[col][i]",
                    "nodeType": "Assignment",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 24,
                        "startLineNumber": 151,
                        "startColumnNumber": 20,
                        "endLineNumber": 151,
                        "endColumnNumber": 44
                    },
                    "nodeContext": "lu[max][i]=lu[col][i];\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 12,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 140,
                        "startLineNumber": 149,
                        "startColumnNumber": 44,
                        "endLineNumber": 153,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  tmp=lu[max][i];\n  lu[max][i]=lu[col][i];\n  lu[col][i]=tmp;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 29,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 168,
                        "startLineNumber": 149,
                        "startColumnNumber": 16,
                        "endLineNumber": 153,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "for (int i=0; i < m; i++) {\n  tmp=lu[max][i];\n  lu[max][i]=lu[col][i];\n  lu[col][i]=tmp;\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 40,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 377,
                        "startLineNumber": 147,
                        "startColumnNumber": 28,
                        "endLineNumber": 158,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  double tmp=0;\n  for (int i=0; i < m; i++) {\n    tmp=lu[max][i];\n    lu[max][i]=lu[col][i];\n    lu[col][i]=tmp;\n  }\n  int temp=pivot[max];\n  pivot[max]=pivot[col];\n  pivot[col]=temp;\n  even=!even;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 72,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 393,
                        "startLineNumber": 147,
                        "startColumnNumber": 12,
                        "endLineNumber": 158,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (max != col) {\n  double tmp=0;\n  for (int i=0; i < m; i++) {\n    tmp=lu[max][i];\n    lu[max][i]=lu[col][i];\n    lu[col][i]=tmp;\n  }\n  int temp=pivot[max];\n  pivot[max]=pivot[col];\n  pivot[col]=temp;\n  even=!even;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 76,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 1811,
                        "startLineNumber": 108,
                        "startColumnNumber": 42,
                        "endLineNumber": 165,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  double sum=0;\n  for (int row=0; row < col; row++) {\n    final double[] luRow=lu[row];\n    sum=luRow[col];\n    for (int i=0; i < row; i++) {\n      sum-=luRow[i] * lu[i][col];\n    }\n    luRow[col]=sum;\n  }\n  int max=col;\n  double largest=Double.NEGATIVE_INFINITY;\n  for (int row=col; row < m; row++) {\n    final double[] luRow=lu[row];\n    sum=luRow[col];\n    for (int i=0; i < col; i++) {\n      sum-=luRow[i] * lu[i][col];\n    }\n    luRow[col]=sum;\n    if (Math.abs(sum) > largest) {\n      largest=Math.abs(sum);\n      max=row;\n    }\n  }\n  if (Math.abs(lu[max][col]) < singularityThreshold) {\n    singular=true;\n    return;\n  }\n  if (max != col) {\n    double tmp=0;\n    for (int i=0; i < m; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=pivot[max];\n    pivot[max]=pivot[col];\n    pivot[col]=temp;\n    even=!even;\n  }\n  final double luDiag=lu[col][col];\n  for (int row=col + 1; row < m; row++) {\n    lu[row][col]/=luDiag;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 278,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1845,
                        "startLineNumber": 108,
                        "startColumnNumber": 8,
                        "endLineNumber": 165,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int col=0; col < m; col++) {\n  double sum=0;\n  for (int row=0; row < col; row++) {\n    final double[] luRow=lu[row];\n    sum=luRow[col];\n    for (int i=0; i < row; i++) {\n      sum-=luRow[i] * lu[i][col];\n    }\n    luRow[col]=sum;\n  }\n  int max=col;\n  double largest=Double.NEGATIVE_INFINITY;\n  for (int row=col; row < m; row++) {\n    final double[] luRow=lu[row];\n    sum=luRow[col];\n    for (int i=0; i < col; i++) {\n      sum-=luRow[i] * lu[i][col];\n    }\n    luRow[col]=sum;\n    if (Math.abs(sum) > largest) {\n      largest=Math.abs(sum);\n      max=row;\n    }\n  }\n  if (Math.abs(lu[max][col]) < singularityThreshold) {\n    singular=true;\n    return;\n  }\n  if (max != col) {\n    double tmp=0;\n    for (int i=0; i < m; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=pivot[max];\n    pivot[max]=pivot[col];\n    pivot[col]=temp;\n    even=!even;\n  }\n  final double luDiag=lu[col][col];\n  for (int row=col + 1; row < m; row++) {\n    lu[row][col]/=luDiag;\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 289,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2410,
                        "startLineNumber": 87,
                        "startColumnNumber": 40,
                        "endLineNumber": 167,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (!matrix.isSquare()) {\n    throw new NonSquareMatrixException(matrix.getRowDimension(),matrix.getColumnDimension());\n  }\n  final int m=matrix.getColumnDimension();\n  lu=matrix.getData();\n  pivot=new int[m];\n  cachedL=null;\n  cachedU=null;\n  cachedP=null;\n  for (int row=0; row < m; row++) {\n    pivot[row]=row;\n  }\n  even=true;\n  singular=false;\n  for (int col=0; col < m; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      final double[] luRow=lu[row];\n      sum=luRow[col];\n      for (int i=0; i < row; i++) {\n        sum-=luRow[i] * lu[i][col];\n      }\n      luRow[col]=sum;\n    }\n    int max=col;\n    double largest=Double.NEGATIVE_INFINITY;\n    for (int row=col; row < m; row++) {\n      final double[] luRow=lu[row];\n      sum=luRow[col];\n      for (int i=0; i < col; i++) {\n        sum-=luRow[i] * lu[i][col];\n      }\n      luRow[col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < singularityThreshold) {\n      singular=true;\n      return;\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < m; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=pivot[max];\n      pivot[max]=pivot[col];\n      pivot[col]=temp;\n      even=!even;\n    }\n    final double luDiag=lu[col][col];\n    for (int row=col + 1; row < m; row++) {\n      lu[row][col]/=luDiag;\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 366,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2839,
                        "startLineNumber": 79,
                        "startColumnNumber": 4,
                        "endLineNumber": 167,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Calculates the LU-decomposition of the given matrix. \n * @param matrix The matrix to decompose.\n * @param singularityThreshold threshold (based on partial row norm)under which a matrix is considered singular\n * @exception NonSquareMatrixException if matrix is not square\n */\npublic LUDecompositionImpl(RealMatrix matrix,double singularityThreshold) throws NonSquareMatrixException {\n  if (!matrix.isSquare()) {\n    throw new NonSquareMatrixException(matrix.getRowDimension(),matrix.getColumnDimension());\n  }\n  final int m=matrix.getColumnDimension();\n  lu=matrix.getData();\n  pivot=new int[m];\n  cachedL=null;\n  cachedU=null;\n  cachedP=null;\n  for (int row=0; row < m; row++) {\n    pivot[row]=row;\n  }\n  even=true;\n  singular=false;\n  for (int col=0; col < m; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      final double[] luRow=lu[row];\n      sum=luRow[col];\n      for (int i=0; i < row; i++) {\n        sum-=luRow[i] * lu[i][col];\n      }\n      luRow[col]=sum;\n    }\n    int max=col;\n    double largest=Double.NEGATIVE_INFINITY;\n    for (int row=col; row < m; row++) {\n      final double[] luRow=lu[row];\n      sum=luRow[col];\n      for (int i=0; i < col; i++) {\n        sum-=luRow[i] * lu[i][col];\n      }\n      luRow[col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < singularityThreshold) {\n      singular=true;\n      return;\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < m; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=pivot[max];\n      pivot[max]=pivot[col];\n      pivot[col]=temp;\n      even=!even;\n    }\n    final double luDiag=lu[col][col];\n    for (int row=col + 1; row < m; row++) {\n      lu[row][col]/=luDiag;\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 379,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 24,
                    "startLineNumber": 151,
                    "startColumnNumber": 20,
                    "endLineNumber": 151,
                    "endColumnNumber": 44
                },
                "nodeContext": "lu[max][i]=lu[col][i];\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 12,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "double[][]"
        },
        {
            "nodeContext": "lu",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 151,
                "startColumnNumber": 33,
                "endLineNumber": 151,
                "endColumnNumber": 35
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 151,
                        "startColumnNumber": 33,
                        "endLineNumber": 151,
                        "endColumnNumber": 40
                    },
                    "nodeContext": "lu[col]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 10,
                        "startLineNumber": 151,
                        "startColumnNumber": 33,
                        "endLineNumber": 151,
                        "endColumnNumber": 43
                    },
                    "nodeContext": "lu[col][i]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 23,
                        "startLineNumber": 151,
                        "startColumnNumber": 20,
                        "endLineNumber": 151,
                        "endColumnNumber": 43
                    },
                    "nodeContext": "lu[max][i]=lu[col][i]",
                    "nodeType": "Assignment",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 24,
                        "startLineNumber": 151,
                        "startColumnNumber": 20,
                        "endLineNumber": 151,
                        "endColumnNumber": 44
                    },
                    "nodeContext": "lu[max][i]=lu[col][i];\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 12,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 140,
                        "startLineNumber": 149,
                        "startColumnNumber": 44,
                        "endLineNumber": 153,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  tmp=lu[max][i];\n  lu[max][i]=lu[col][i];\n  lu[col][i]=tmp;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 29,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 168,
                        "startLineNumber": 149,
                        "startColumnNumber": 16,
                        "endLineNumber": 153,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "for (int i=0; i < m; i++) {\n  tmp=lu[max][i];\n  lu[max][i]=lu[col][i];\n  lu[col][i]=tmp;\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 40,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 377,
                        "startLineNumber": 147,
                        "startColumnNumber": 28,
                        "endLineNumber": 158,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  double tmp=0;\n  for (int i=0; i < m; i++) {\n    tmp=lu[max][i];\n    lu[max][i]=lu[col][i];\n    lu[col][i]=tmp;\n  }\n  int temp=pivot[max];\n  pivot[max]=pivot[col];\n  pivot[col]=temp;\n  even=!even;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 72,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 393,
                        "startLineNumber": 147,
                        "startColumnNumber": 12,
                        "endLineNumber": 158,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (max != col) {\n  double tmp=0;\n  for (int i=0; i < m; i++) {\n    tmp=lu[max][i];\n    lu[max][i]=lu[col][i];\n    lu[col][i]=tmp;\n  }\n  int temp=pivot[max];\n  pivot[max]=pivot[col];\n  pivot[col]=temp;\n  even=!even;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 76,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 1811,
                        "startLineNumber": 108,
                        "startColumnNumber": 42,
                        "endLineNumber": 165,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  double sum=0;\n  for (int row=0; row < col; row++) {\n    final double[] luRow=lu[row];\n    sum=luRow[col];\n    for (int i=0; i < row; i++) {\n      sum-=luRow[i] * lu[i][col];\n    }\n    luRow[col]=sum;\n  }\n  int max=col;\n  double largest=Double.NEGATIVE_INFINITY;\n  for (int row=col; row < m; row++) {\n    final double[] luRow=lu[row];\n    sum=luRow[col];\n    for (int i=0; i < col; i++) {\n      sum-=luRow[i] * lu[i][col];\n    }\n    luRow[col]=sum;\n    if (Math.abs(sum) > largest) {\n      largest=Math.abs(sum);\n      max=row;\n    }\n  }\n  if (Math.abs(lu[max][col]) < singularityThreshold) {\n    singular=true;\n    return;\n  }\n  if (max != col) {\n    double tmp=0;\n    for (int i=0; i < m; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=pivot[max];\n    pivot[max]=pivot[col];\n    pivot[col]=temp;\n    even=!even;\n  }\n  final double luDiag=lu[col][col];\n  for (int row=col + 1; row < m; row++) {\n    lu[row][col]/=luDiag;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 278,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1845,
                        "startLineNumber": 108,
                        "startColumnNumber": 8,
                        "endLineNumber": 165,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int col=0; col < m; col++) {\n  double sum=0;\n  for (int row=0; row < col; row++) {\n    final double[] luRow=lu[row];\n    sum=luRow[col];\n    for (int i=0; i < row; i++) {\n      sum-=luRow[i] * lu[i][col];\n    }\n    luRow[col]=sum;\n  }\n  int max=col;\n  double largest=Double.NEGATIVE_INFINITY;\n  for (int row=col; row < m; row++) {\n    final double[] luRow=lu[row];\n    sum=luRow[col];\n    for (int i=0; i < col; i++) {\n      sum-=luRow[i] * lu[i][col];\n    }\n    luRow[col]=sum;\n    if (Math.abs(sum) > largest) {\n      largest=Math.abs(sum);\n      max=row;\n    }\n  }\n  if (Math.abs(lu[max][col]) < singularityThreshold) {\n    singular=true;\n    return;\n  }\n  if (max != col) {\n    double tmp=0;\n    for (int i=0; i < m; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=pivot[max];\n    pivot[max]=pivot[col];\n    pivot[col]=temp;\n    even=!even;\n  }\n  final double luDiag=lu[col][col];\n  for (int row=col + 1; row < m; row++) {\n    lu[row][col]/=luDiag;\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 289,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2410,
                        "startLineNumber": 87,
                        "startColumnNumber": 40,
                        "endLineNumber": 167,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (!matrix.isSquare()) {\n    throw new NonSquareMatrixException(matrix.getRowDimension(),matrix.getColumnDimension());\n  }\n  final int m=matrix.getColumnDimension();\n  lu=matrix.getData();\n  pivot=new int[m];\n  cachedL=null;\n  cachedU=null;\n  cachedP=null;\n  for (int row=0; row < m; row++) {\n    pivot[row]=row;\n  }\n  even=true;\n  singular=false;\n  for (int col=0; col < m; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      final double[] luRow=lu[row];\n      sum=luRow[col];\n      for (int i=0; i < row; i++) {\n        sum-=luRow[i] * lu[i][col];\n      }\n      luRow[col]=sum;\n    }\n    int max=col;\n    double largest=Double.NEGATIVE_INFINITY;\n    for (int row=col; row < m; row++) {\n      final double[] luRow=lu[row];\n      sum=luRow[col];\n      for (int i=0; i < col; i++) {\n        sum-=luRow[i] * lu[i][col];\n      }\n      luRow[col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < singularityThreshold) {\n      singular=true;\n      return;\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < m; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=pivot[max];\n      pivot[max]=pivot[col];\n      pivot[col]=temp;\n      even=!even;\n    }\n    final double luDiag=lu[col][col];\n    for (int row=col + 1; row < m; row++) {\n      lu[row][col]/=luDiag;\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 366,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2839,
                        "startLineNumber": 79,
                        "startColumnNumber": 4,
                        "endLineNumber": 167,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Calculates the LU-decomposition of the given matrix. \n * @param matrix The matrix to decompose.\n * @param singularityThreshold threshold (based on partial row norm)under which a matrix is considered singular\n * @exception NonSquareMatrixException if matrix is not square\n */\npublic LUDecompositionImpl(RealMatrix matrix,double singularityThreshold) throws NonSquareMatrixException {\n  if (!matrix.isSquare()) {\n    throw new NonSquareMatrixException(matrix.getRowDimension(),matrix.getColumnDimension());\n  }\n  final int m=matrix.getColumnDimension();\n  lu=matrix.getData();\n  pivot=new int[m];\n  cachedL=null;\n  cachedU=null;\n  cachedP=null;\n  for (int row=0; row < m; row++) {\n    pivot[row]=row;\n  }\n  even=true;\n  singular=false;\n  for (int col=0; col < m; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      final double[] luRow=lu[row];\n      sum=luRow[col];\n      for (int i=0; i < row; i++) {\n        sum-=luRow[i] * lu[i][col];\n      }\n      luRow[col]=sum;\n    }\n    int max=col;\n    double largest=Double.NEGATIVE_INFINITY;\n    for (int row=col; row < m; row++) {\n      final double[] luRow=lu[row];\n      sum=luRow[col];\n      for (int i=0; i < col; i++) {\n        sum-=luRow[i] * lu[i][col];\n      }\n      luRow[col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < singularityThreshold) {\n      singular=true;\n      return;\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < m; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=pivot[max];\n      pivot[max]=pivot[col];\n      pivot[col]=temp;\n      even=!even;\n    }\n    final double luDiag=lu[col][col];\n    for (int row=col + 1; row < m; row++) {\n      lu[row][col]/=luDiag;\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 379,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 24,
                    "startLineNumber": 151,
                    "startColumnNumber": 20,
                    "endLineNumber": 151,
                    "endColumnNumber": 44
                },
                "nodeContext": "lu[max][i]=lu[col][i];\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 12,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "double[][]"
        },
        {
            "nodeContext": "lu",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 152,
                "startColumnNumber": 20,
                "endLineNumber": 152,
                "endColumnNumber": 22
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 152,
                        "startColumnNumber": 20,
                        "endLineNumber": 152,
                        "endColumnNumber": 27
                    },
                    "nodeContext": "lu[col]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
                    "nodePosition": {
                        "charLength": 10,
                        "startLineNumber": 152,
                        "startColumnNumber": 20,
                        "endLineNumber": 152,
                        "endColumnNumber": 30
                    },
                    "nodeContext": "lu[col][i]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 16,
                        "startLineNumber": 152,
                        "startColumnNumber": 20,
                        "endLineNumber": 152,
                        "endColumnNumber": 36
                    },
                    "nodeContext": "lu[col][i]=tmp",
                    "nodeType": "Assignment",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 17,
                        "startLineNumber": 152,
                        "startColumnNumber": 20,
                        "endLineNumber": 152,
                        "endColumnNumber": 37
                    },
                    "nodeContext": "lu[col][i]=tmp;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 140,
                        "startLineNumber": 149,
                        "startColumnNumber": 44,
                        "endLineNumber": 153,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  tmp=lu[max][i];\n  lu[max][i]=lu[col][i];\n  lu[col][i]=tmp;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 29,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 168,
                        "startLineNumber": 149,
                        "startColumnNumber": 16,
                        "endLineNumber": 153,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "for (int i=0; i < m; i++) {\n  tmp=lu[max][i];\n  lu[max][i]=lu[col][i];\n  lu[col][i]=tmp;\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 40,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 377,
                        "startLineNumber": 147,
                        "startColumnNumber": 28,
                        "endLineNumber": 158,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  double tmp=0;\n  for (int i=0; i < m; i++) {\n    tmp=lu[max][i];\n    lu[max][i]=lu[col][i];\n    lu[col][i]=tmp;\n  }\n  int temp=pivot[max];\n  pivot[max]=pivot[col];\n  pivot[col]=temp;\n  even=!even;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 72,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 393,
                        "startLineNumber": 147,
                        "startColumnNumber": 12,
                        "endLineNumber": 158,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (max != col) {\n  double tmp=0;\n  for (int i=0; i < m; i++) {\n    tmp=lu[max][i];\n    lu[max][i]=lu[col][i];\n    lu[col][i]=tmp;\n  }\n  int temp=pivot[max];\n  pivot[max]=pivot[col];\n  pivot[col]=temp;\n  even=!even;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 76,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 1811,
                        "startLineNumber": 108,
                        "startColumnNumber": 42,
                        "endLineNumber": 165,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  double sum=0;\n  for (int row=0; row < col; row++) {\n    final double[] luRow=lu[row];\n    sum=luRow[col];\n    for (int i=0; i < row; i++) {\n      sum-=luRow[i] * lu[i][col];\n    }\n    luRow[col]=sum;\n  }\n  int max=col;\n  double largest=Double.NEGATIVE_INFINITY;\n  for (int row=col; row < m; row++) {\n    final double[] luRow=lu[row];\n    sum=luRow[col];\n    for (int i=0; i < col; i++) {\n      sum-=luRow[i] * lu[i][col];\n    }\n    luRow[col]=sum;\n    if (Math.abs(sum) > largest) {\n      largest=Math.abs(sum);\n      max=row;\n    }\n  }\n  if (Math.abs(lu[max][col]) < singularityThreshold) {\n    singular=true;\n    return;\n  }\n  if (max != col) {\n    double tmp=0;\n    for (int i=0; i < m; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=pivot[max];\n    pivot[max]=pivot[col];\n    pivot[col]=temp;\n    even=!even;\n  }\n  final double luDiag=lu[col][col];\n  for (int row=col + 1; row < m; row++) {\n    lu[row][col]/=luDiag;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 278,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1845,
                        "startLineNumber": 108,
                        "startColumnNumber": 8,
                        "endLineNumber": 165,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int col=0; col < m; col++) {\n  double sum=0;\n  for (int row=0; row < col; row++) {\n    final double[] luRow=lu[row];\n    sum=luRow[col];\n    for (int i=0; i < row; i++) {\n      sum-=luRow[i] * lu[i][col];\n    }\n    luRow[col]=sum;\n  }\n  int max=col;\n  double largest=Double.NEGATIVE_INFINITY;\n  for (int row=col; row < m; row++) {\n    final double[] luRow=lu[row];\n    sum=luRow[col];\n    for (int i=0; i < col; i++) {\n      sum-=luRow[i] * lu[i][col];\n    }\n    luRow[col]=sum;\n    if (Math.abs(sum) > largest) {\n      largest=Math.abs(sum);\n      max=row;\n    }\n  }\n  if (Math.abs(lu[max][col]) < singularityThreshold) {\n    singular=true;\n    return;\n  }\n  if (max != col) {\n    double tmp=0;\n    for (int i=0; i < m; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=pivot[max];\n    pivot[max]=pivot[col];\n    pivot[col]=temp;\n    even=!even;\n  }\n  final double luDiag=lu[col][col];\n  for (int row=col + 1; row < m; row++) {\n    lu[row][col]/=luDiag;\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 289,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2410,
                        "startLineNumber": 87,
                        "startColumnNumber": 40,
                        "endLineNumber": 167,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (!matrix.isSquare()) {\n    throw new NonSquareMatrixException(matrix.getRowDimension(),matrix.getColumnDimension());\n  }\n  final int m=matrix.getColumnDimension();\n  lu=matrix.getData();\n  pivot=new int[m];\n  cachedL=null;\n  cachedU=null;\n  cachedP=null;\n  for (int row=0; row < m; row++) {\n    pivot[row]=row;\n  }\n  even=true;\n  singular=false;\n  for (int col=0; col < m; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      final double[] luRow=lu[row];\n      sum=luRow[col];\n      for (int i=0; i < row; i++) {\n        sum-=luRow[i] * lu[i][col];\n      }\n      luRow[col]=sum;\n    }\n    int max=col;\n    double largest=Double.NEGATIVE_INFINITY;\n    for (int row=col; row < m; row++) {\n      final double[] luRow=lu[row];\n      sum=luRow[col];\n      for (int i=0; i < col; i++) {\n        sum-=luRow[i] * lu[i][col];\n      }\n      luRow[col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < singularityThreshold) {\n      singular=true;\n      return;\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < m; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=pivot[max];\n      pivot[max]=pivot[col];\n      pivot[col]=temp;\n      even=!even;\n    }\n    final double luDiag=lu[col][col];\n    for (int row=col + 1; row < m; row++) {\n      lu[row][col]/=luDiag;\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 366,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2839,
                        "startLineNumber": 79,
                        "startColumnNumber": 4,
                        "endLineNumber": 167,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Calculates the LU-decomposition of the given matrix. \n * @param matrix The matrix to decompose.\n * @param singularityThreshold threshold (based on partial row norm)under which a matrix is considered singular\n * @exception NonSquareMatrixException if matrix is not square\n */\npublic LUDecompositionImpl(RealMatrix matrix,double singularityThreshold) throws NonSquareMatrixException {\n  if (!matrix.isSquare()) {\n    throw new NonSquareMatrixException(matrix.getRowDimension(),matrix.getColumnDimension());\n  }\n  final int m=matrix.getColumnDimension();\n  lu=matrix.getData();\n  pivot=new int[m];\n  cachedL=null;\n  cachedU=null;\n  cachedP=null;\n  for (int row=0; row < m; row++) {\n    pivot[row]=row;\n  }\n  even=true;\n  singular=false;\n  for (int col=0; col < m; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      final double[] luRow=lu[row];\n      sum=luRow[col];\n      for (int i=0; i < row; i++) {\n        sum-=luRow[i] * lu[i][col];\n      }\n      luRow[col]=sum;\n    }\n    int max=col;\n    double largest=Double.NEGATIVE_INFINITY;\n    for (int row=col; row < m; row++) {\n      final double[] luRow=lu[row];\n      sum=luRow[col];\n      for (int i=0; i < col; i++) {\n        sum-=luRow[i] * lu[i][col];\n      }\n      luRow[col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < singularityThreshold) {\n      singular=true;\n      return;\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < m; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=pivot[max];\n      pivot[max]=pivot[col];\n      pivot[col]=temp;\n      even=!even;\n    }\n    final double luDiag=lu[col][col];\n    for (int row=col + 1; row < m; row++) {\n      lu[row][col]/=luDiag;\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 379,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 17,
                    "startLineNumber": 152,
                    "startColumnNumber": 20,
                    "endLineNumber": 152,
                    "endColumnNumber": 37
                },
                "nodeContext": "lu[col][i]=tmp;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "double[][]"
        },
        {
            "nodeContext": "lu",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 161,
                "startColumnNumber": 34,
                "endLineNumber": 161,
                "endColumnNumber": 36
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 161,
                        "startColumnNumber": 34,
                        "endLineNumber": 161,
                        "endColumnNumber": 41
                    },
                    "nodeContext": "lu[col]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 12,
                        "startLineNumber": 161,
                        "startColumnNumber": 34,
                        "endLineNumber": 161,
                        "endColumnNumber": 46
                    },
                    "nodeContext": "lu[col][col]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 21,
                        "startLineNumber": 161,
                        "startColumnNumber": 25,
                        "endLineNumber": 161,
                        "endColumnNumber": 46
                    },
                    "nodeContext": "luDiag=lu[col][col]",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 35,
                        "startLineNumber": 161,
                        "startColumnNumber": 12,
                        "endLineNumber": 161,
                        "endColumnNumber": 47
                    },
                    "nodeContext": "final double luDiag=lu[col][col];\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 10,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 1811,
                        "startLineNumber": 108,
                        "startColumnNumber": 42,
                        "endLineNumber": 165,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  double sum=0;\n  for (int row=0; row < col; row++) {\n    final double[] luRow=lu[row];\n    sum=luRow[col];\n    for (int i=0; i < row; i++) {\n      sum-=luRow[i] * lu[i][col];\n    }\n    luRow[col]=sum;\n  }\n  int max=col;\n  double largest=Double.NEGATIVE_INFINITY;\n  for (int row=col; row < m; row++) {\n    final double[] luRow=lu[row];\n    sum=luRow[col];\n    for (int i=0; i < col; i++) {\n      sum-=luRow[i] * lu[i][col];\n    }\n    luRow[col]=sum;\n    if (Math.abs(sum) > largest) {\n      largest=Math.abs(sum);\n      max=row;\n    }\n  }\n  if (Math.abs(lu[max][col]) < singularityThreshold) {\n    singular=true;\n    return;\n  }\n  if (max != col) {\n    double tmp=0;\n    for (int i=0; i < m; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=pivot[max];\n    pivot[max]=pivot[col];\n    pivot[col]=temp;\n    even=!even;\n  }\n  final double luDiag=lu[col][col];\n  for (int row=col + 1; row < m; row++) {\n    lu[row][col]/=luDiag;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 278,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1845,
                        "startLineNumber": 108,
                        "startColumnNumber": 8,
                        "endLineNumber": 165,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int col=0; col < m; col++) {\n  double sum=0;\n  for (int row=0; row < col; row++) {\n    final double[] luRow=lu[row];\n    sum=luRow[col];\n    for (int i=0; i < row; i++) {\n      sum-=luRow[i] * lu[i][col];\n    }\n    luRow[col]=sum;\n  }\n  int max=col;\n  double largest=Double.NEGATIVE_INFINITY;\n  for (int row=col; row < m; row++) {\n    final double[] luRow=lu[row];\n    sum=luRow[col];\n    for (int i=0; i < col; i++) {\n      sum-=luRow[i] * lu[i][col];\n    }\n    luRow[col]=sum;\n    if (Math.abs(sum) > largest) {\n      largest=Math.abs(sum);\n      max=row;\n    }\n  }\n  if (Math.abs(lu[max][col]) < singularityThreshold) {\n    singular=true;\n    return;\n  }\n  if (max != col) {\n    double tmp=0;\n    for (int i=0; i < m; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=pivot[max];\n    pivot[max]=pivot[col];\n    pivot[col]=temp;\n    even=!even;\n  }\n  final double luDiag=lu[col][col];\n  for (int row=col + 1; row < m; row++) {\n    lu[row][col]/=luDiag;\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 289,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2410,
                        "startLineNumber": 87,
                        "startColumnNumber": 40,
                        "endLineNumber": 167,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (!matrix.isSquare()) {\n    throw new NonSquareMatrixException(matrix.getRowDimension(),matrix.getColumnDimension());\n  }\n  final int m=matrix.getColumnDimension();\n  lu=matrix.getData();\n  pivot=new int[m];\n  cachedL=null;\n  cachedU=null;\n  cachedP=null;\n  for (int row=0; row < m; row++) {\n    pivot[row]=row;\n  }\n  even=true;\n  singular=false;\n  for (int col=0; col < m; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      final double[] luRow=lu[row];\n      sum=luRow[col];\n      for (int i=0; i < row; i++) {\n        sum-=luRow[i] * lu[i][col];\n      }\n      luRow[col]=sum;\n    }\n    int max=col;\n    double largest=Double.NEGATIVE_INFINITY;\n    for (int row=col; row < m; row++) {\n      final double[] luRow=lu[row];\n      sum=luRow[col];\n      for (int i=0; i < col; i++) {\n        sum-=luRow[i] * lu[i][col];\n      }\n      luRow[col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < singularityThreshold) {\n      singular=true;\n      return;\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < m; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=pivot[max];\n      pivot[max]=pivot[col];\n      pivot[col]=temp;\n      even=!even;\n    }\n    final double luDiag=lu[col][col];\n    for (int row=col + 1; row < m; row++) {\n      lu[row][col]/=luDiag;\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 366,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2839,
                        "startLineNumber": 79,
                        "startColumnNumber": 4,
                        "endLineNumber": 167,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Calculates the LU-decomposition of the given matrix. \n * @param matrix The matrix to decompose.\n * @param singularityThreshold threshold (based on partial row norm)under which a matrix is considered singular\n * @exception NonSquareMatrixException if matrix is not square\n */\npublic LUDecompositionImpl(RealMatrix matrix,double singularityThreshold) throws NonSquareMatrixException {\n  if (!matrix.isSquare()) {\n    throw new NonSquareMatrixException(matrix.getRowDimension(),matrix.getColumnDimension());\n  }\n  final int m=matrix.getColumnDimension();\n  lu=matrix.getData();\n  pivot=new int[m];\n  cachedL=null;\n  cachedU=null;\n  cachedP=null;\n  for (int row=0; row < m; row++) {\n    pivot[row]=row;\n  }\n  even=true;\n  singular=false;\n  for (int col=0; col < m; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      final double[] luRow=lu[row];\n      sum=luRow[col];\n      for (int i=0; i < row; i++) {\n        sum-=luRow[i] * lu[i][col];\n      }\n      luRow[col]=sum;\n    }\n    int max=col;\n    double largest=Double.NEGATIVE_INFINITY;\n    for (int row=col; row < m; row++) {\n      final double[] luRow=lu[row];\n      sum=luRow[col];\n      for (int i=0; i < col; i++) {\n        sum-=luRow[i] * lu[i][col];\n      }\n      luRow[col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < singularityThreshold) {\n      singular=true;\n      return;\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < m; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=pivot[max];\n      pivot[max]=pivot[col];\n      pivot[col]=temp;\n      even=!even;\n    }\n    final double luDiag=lu[col][col];\n    for (int row=col + 1; row < m; row++) {\n      lu[row][col]/=luDiag;\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 379,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 35,
                    "startLineNumber": 161,
                    "startColumnNumber": 12,
                    "endLineNumber": 161,
                    "endColumnNumber": 47
                },
                "nodeContext": "final double luDiag=lu[col][col];\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 10,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "double[][]"
        },
        {
            "nodeContext": "lu",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 163,
                "startColumnNumber": 16,
                "endLineNumber": 163,
                "endColumnNumber": 18
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 163,
                        "startColumnNumber": 16,
                        "endLineNumber": 163,
                        "endColumnNumber": 23
                    },
                    "nodeContext": "lu[row]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
                    "nodePosition": {
                        "charLength": 12,
                        "startLineNumber": 163,
                        "startColumnNumber": 16,
                        "endLineNumber": 163,
                        "endColumnNumber": 28
                    },
                    "nodeContext": "lu[row][col]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 22,
                        "startLineNumber": 163,
                        "startColumnNumber": 16,
                        "endLineNumber": 163,
                        "endColumnNumber": 38
                    },
                    "nodeContext": "lu[row][col]/=luDiag",
                    "nodeType": "Assignment",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 23,
                        "startLineNumber": 163,
                        "startColumnNumber": 16,
                        "endLineNumber": 163,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "lu[row][col]/=luDiag;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 55,
                        "startLineNumber": 162,
                        "startColumnNumber": 52,
                        "endLineNumber": 164,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  lu[row][col]/=luDiag;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 9,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 95,
                        "startLineNumber": 162,
                        "startColumnNumber": 12,
                        "endLineNumber": 164,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (int row=col + 1; row < m; row++) {\n  lu[row][col]/=luDiag;\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 22,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 1811,
                        "startLineNumber": 108,
                        "startColumnNumber": 42,
                        "endLineNumber": 165,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  double sum=0;\n  for (int row=0; row < col; row++) {\n    final double[] luRow=lu[row];\n    sum=luRow[col];\n    for (int i=0; i < row; i++) {\n      sum-=luRow[i] * lu[i][col];\n    }\n    luRow[col]=sum;\n  }\n  int max=col;\n  double largest=Double.NEGATIVE_INFINITY;\n  for (int row=col; row < m; row++) {\n    final double[] luRow=lu[row];\n    sum=luRow[col];\n    for (int i=0; i < col; i++) {\n      sum-=luRow[i] * lu[i][col];\n    }\n    luRow[col]=sum;\n    if (Math.abs(sum) > largest) {\n      largest=Math.abs(sum);\n      max=row;\n    }\n  }\n  if (Math.abs(lu[max][col]) < singularityThreshold) {\n    singular=true;\n    return;\n  }\n  if (max != col) {\n    double tmp=0;\n    for (int i=0; i < m; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=pivot[max];\n    pivot[max]=pivot[col];\n    pivot[col]=temp;\n    even=!even;\n  }\n  final double luDiag=lu[col][col];\n  for (int row=col + 1; row < m; row++) {\n    lu[row][col]/=luDiag;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 278,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1845,
                        "startLineNumber": 108,
                        "startColumnNumber": 8,
                        "endLineNumber": 165,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int col=0; col < m; col++) {\n  double sum=0;\n  for (int row=0; row < col; row++) {\n    final double[] luRow=lu[row];\n    sum=luRow[col];\n    for (int i=0; i < row; i++) {\n      sum-=luRow[i] * lu[i][col];\n    }\n    luRow[col]=sum;\n  }\n  int max=col;\n  double largest=Double.NEGATIVE_INFINITY;\n  for (int row=col; row < m; row++) {\n    final double[] luRow=lu[row];\n    sum=luRow[col];\n    for (int i=0; i < col; i++) {\n      sum-=luRow[i] * lu[i][col];\n    }\n    luRow[col]=sum;\n    if (Math.abs(sum) > largest) {\n      largest=Math.abs(sum);\n      max=row;\n    }\n  }\n  if (Math.abs(lu[max][col]) < singularityThreshold) {\n    singular=true;\n    return;\n  }\n  if (max != col) {\n    double tmp=0;\n    for (int i=0; i < m; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=pivot[max];\n    pivot[max]=pivot[col];\n    pivot[col]=temp;\n    even=!even;\n  }\n  final double luDiag=lu[col][col];\n  for (int row=col + 1; row < m; row++) {\n    lu[row][col]/=luDiag;\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 289,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2410,
                        "startLineNumber": 87,
                        "startColumnNumber": 40,
                        "endLineNumber": 167,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (!matrix.isSquare()) {\n    throw new NonSquareMatrixException(matrix.getRowDimension(),matrix.getColumnDimension());\n  }\n  final int m=matrix.getColumnDimension();\n  lu=matrix.getData();\n  pivot=new int[m];\n  cachedL=null;\n  cachedU=null;\n  cachedP=null;\n  for (int row=0; row < m; row++) {\n    pivot[row]=row;\n  }\n  even=true;\n  singular=false;\n  for (int col=0; col < m; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      final double[] luRow=lu[row];\n      sum=luRow[col];\n      for (int i=0; i < row; i++) {\n        sum-=luRow[i] * lu[i][col];\n      }\n      luRow[col]=sum;\n    }\n    int max=col;\n    double largest=Double.NEGATIVE_INFINITY;\n    for (int row=col; row < m; row++) {\n      final double[] luRow=lu[row];\n      sum=luRow[col];\n      for (int i=0; i < col; i++) {\n        sum-=luRow[i] * lu[i][col];\n      }\n      luRow[col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < singularityThreshold) {\n      singular=true;\n      return;\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < m; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=pivot[max];\n      pivot[max]=pivot[col];\n      pivot[col]=temp;\n      even=!even;\n    }\n    final double luDiag=lu[col][col];\n    for (int row=col + 1; row < m; row++) {\n      lu[row][col]/=luDiag;\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 366,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2839,
                        "startLineNumber": 79,
                        "startColumnNumber": 4,
                        "endLineNumber": 167,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Calculates the LU-decomposition of the given matrix. \n * @param matrix The matrix to decompose.\n * @param singularityThreshold threshold (based on partial row norm)under which a matrix is considered singular\n * @exception NonSquareMatrixException if matrix is not square\n */\npublic LUDecompositionImpl(RealMatrix matrix,double singularityThreshold) throws NonSquareMatrixException {\n  if (!matrix.isSquare()) {\n    throw new NonSquareMatrixException(matrix.getRowDimension(),matrix.getColumnDimension());\n  }\n  final int m=matrix.getColumnDimension();\n  lu=matrix.getData();\n  pivot=new int[m];\n  cachedL=null;\n  cachedU=null;\n  cachedP=null;\n  for (int row=0; row < m; row++) {\n    pivot[row]=row;\n  }\n  even=true;\n  singular=false;\n  for (int col=0; col < m; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      final double[] luRow=lu[row];\n      sum=luRow[col];\n      for (int i=0; i < row; i++) {\n        sum-=luRow[i] * lu[i][col];\n      }\n      luRow[col]=sum;\n    }\n    int max=col;\n    double largest=Double.NEGATIVE_INFINITY;\n    for (int row=col; row < m; row++) {\n      final double[] luRow=lu[row];\n      sum=luRow[col];\n      for (int i=0; i < col; i++) {\n        sum-=luRow[i] * lu[i][col];\n      }\n      luRow[col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < singularityThreshold) {\n      singular=true;\n      return;\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < m; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=pivot[max];\n      pivot[max]=pivot[col];\n      pivot[col]=temp;\n      even=!even;\n    }\n    final double luDiag=lu[col][col];\n    for (int row=col + 1; row < m; row++) {\n      lu[row][col]/=luDiag;\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 379,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 23,
                    "startLineNumber": 163,
                    "startColumnNumber": 16,
                    "endLineNumber": 163,
                    "endColumnNumber": 39
                },
                "nodeContext": "lu[row][col]/=luDiag;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "double[][]"
        }
    ],
    "positionList": [
        {
            "charLength": 2,
            "startLineNumber": 114,
            "startColumnNumber": 39,
            "endLineNumber": 114,
            "endColumnNumber": 41
        },
        {
            "charLength": 2,
            "startLineNumber": 117,
            "startColumnNumber": 38,
            "endLineNumber": 117,
            "endColumnNumber": 40
        },
        {
            "charLength": 2,
            "startLineNumber": 126,
            "startColumnNumber": 39,
            "endLineNumber": 126,
            "endColumnNumber": 41
        },
        {
            "charLength": 2,
            "startLineNumber": 129,
            "startColumnNumber": 38,
            "endLineNumber": 129,
            "endColumnNumber": 40
        },
        {
            "charLength": 2,
            "startLineNumber": 141,
            "startColumnNumber": 25,
            "endLineNumber": 141,
            "endColumnNumber": 27
        },
        {
            "charLength": 2,
            "startLineNumber": 150,
            "startColumnNumber": 26,
            "endLineNumber": 150,
            "endColumnNumber": 28
        },
        {
            "charLength": 2,
            "startLineNumber": 151,
            "startColumnNumber": 20,
            "endLineNumber": 151,
            "endColumnNumber": 22
        },
        {
            "charLength": 2,
            "startLineNumber": 151,
            "startColumnNumber": 33,
            "endLineNumber": 151,
            "endColumnNumber": 35
        },
        {
            "charLength": 2,
            "startLineNumber": 152,
            "startColumnNumber": 20,
            "endLineNumber": 152,
            "endColumnNumber": 22
        },
        {
            "charLength": 2,
            "startLineNumber": 161,
            "startColumnNumber": 34,
            "endLineNumber": 161,
            "endColumnNumber": 36
        },
        {
            "charLength": 2,
            "startLineNumber": 163,
            "startColumnNumber": 16,
            "endLineNumber": 163,
            "endColumnNumber": 18
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 0,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 0,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 0,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 0,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 0,
            "secondKey": 8,
            "layout": 5
        },
        {
            "firstKey": 0,
            "secondKey": 9,
            "layout": 5
        },
        {
            "firstKey": 0,
            "secondKey": 10,
            "layout": 5
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 9
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 9
        },
        {
            "firstKey": 1,
            "secondKey": 4,
            "layout": 9
        },
        {
            "firstKey": 1,
            "secondKey": 5,
            "layout": 9
        },
        {
            "firstKey": 1,
            "secondKey": 6,
            "layout": 9
        },
        {
            "firstKey": 1,
            "secondKey": 7,
            "layout": 9
        },
        {
            "firstKey": 1,
            "secondKey": 8,
            "layout": 9
        },
        {
            "firstKey": 1,
            "secondKey": 9,
            "layout": 9
        },
        {
            "firstKey": 1,
            "secondKey": 10,
            "layout": 9
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 8,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 9,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 10,
            "layout": 5
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 9
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 9
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 7
        },
        {
            "firstKey": 3,
            "secondKey": 4,
            "layout": 9
        },
        {
            "firstKey": 3,
            "secondKey": 5,
            "layout": 9
        },
        {
            "firstKey": 3,
            "secondKey": 6,
            "layout": 9
        },
        {
            "firstKey": 3,
            "secondKey": 7,
            "layout": 9
        },
        {
            "firstKey": 3,
            "secondKey": 8,
            "layout": 9
        },
        {
            "firstKey": 3,
            "secondKey": 9,
            "layout": 9
        },
        {
            "firstKey": 3,
            "secondKey": 10,
            "layout": 9
        },
        {
            "firstKey": 4,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 8,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 9,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 10,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 5,
            "secondKey": 1,
            "layout": 8
        },
        {
            "firstKey": 5,
            "secondKey": 2,
            "layout": 8
        },
        {
            "firstKey": 5,
            "secondKey": 3,
            "layout": 8
        },
        {
            "firstKey": 5,
            "secondKey": 4,
            "layout": 8
        },
        {
            "firstKey": 5,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 9,
            "layout": 8
        },
        {
            "firstKey": 5,
            "secondKey": 10,
            "layout": 8
        },
        {
            "firstKey": 6,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 6,
            "secondKey": 1,
            "layout": 8
        },
        {
            "firstKey": 6,
            "secondKey": 2,
            "layout": 8
        },
        {
            "firstKey": 6,
            "secondKey": 3,
            "layout": 8
        },
        {
            "firstKey": 6,
            "secondKey": 4,
            "layout": 8
        },
        {
            "firstKey": 6,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 9,
            "layout": 8
        },
        {
            "firstKey": 6,
            "secondKey": 10,
            "layout": 8
        },
        {
            "firstKey": 7,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 7,
            "secondKey": 1,
            "layout": 8
        },
        {
            "firstKey": 7,
            "secondKey": 2,
            "layout": 8
        },
        {
            "firstKey": 7,
            "secondKey": 3,
            "layout": 8
        },
        {
            "firstKey": 7,
            "secondKey": 4,
            "layout": 8
        },
        {
            "firstKey": 7,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 7,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 9,
            "layout": 8
        },
        {
            "firstKey": 7,
            "secondKey": 10,
            "layout": 8
        },
        {
            "firstKey": 8,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 8,
            "secondKey": 1,
            "layout": 8
        },
        {
            "firstKey": 8,
            "secondKey": 2,
            "layout": 8
        },
        {
            "firstKey": 8,
            "secondKey": 3,
            "layout": 8
        },
        {
            "firstKey": 8,
            "secondKey": 4,
            "layout": 8
        },
        {
            "firstKey": 8,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 9,
            "layout": 8
        },
        {
            "firstKey": 8,
            "secondKey": 10,
            "layout": 8
        },
        {
            "firstKey": 9,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 5,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 6,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 7,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 8,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 9,
            "layout": 6
        }
    ]
}