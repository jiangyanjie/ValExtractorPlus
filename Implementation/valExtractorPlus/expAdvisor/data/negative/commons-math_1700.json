{
    "id": 1700,
    "expression": "aa",
    "projectName": "commons-math",
    "commitID": "f040e261bfdd835d6b1908d17b03503b85dd9ced",
    "filePath": "src/main/java/org/apache/commons/math3/util/FastMath.java",
    "occurrences": 22,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 0,
    "expressionList": [
        {
            "nodeContext": "aa",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 1167,
                "startColumnNumber": 33,
                "endLineNumber": 1167,
                "endColumnNumber": 35
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 1167,
                        "startColumnNumber": 28,
                        "endLineNumber": 1167,
                        "endColumnNumber": 35
                    },
                    "nodeContext": "xa - aa",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 12,
                        "startLineNumber": 1167,
                        "startColumnNumber": 23,
                        "endLineNumber": 1167,
                        "endColumnNumber": 35
                    },
                    "nodeContext": "ab=xa - aa",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 20,
                        "startLineNumber": 1167,
                        "startColumnNumber": 16,
                        "endLineNumber": 1167,
                        "endColumnNumber": 36
                    },
                    "nodeContext": "double ab=xa - aa;\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1644,
                        "startLineNumber": 1158,
                        "startColumnNumber": 56,
                        "endLineNumber": 1201,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  double xa=x - 1.0;\n  double xb=xa - x + 1.0;\n  double tmp=xa * HEX_40000000;\n  double aa=xa + tmp - tmp;\n  double ab=xa - aa;\n  xa=aa;\n  xb=ab;\n  double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n  double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n  for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    aa=ya + LN_QUICK_COEF[i][0];\n    ab=yb + LN_QUICK_COEF[i][1];\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n  }\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n  return ya + yb;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 220,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1688,
                        "startLineNumber": 1158,
                        "startColumnNumber": 12,
                        "endLineNumber": 1201,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (x < 1.01 && x > 0.99 && hiPrec == null) {\n  double xa=x - 1.0;\n  double xb=xa - x + 1.0;\n  double tmp=xa * HEX_40000000;\n  double aa=xa + tmp - tmp;\n  double ab=xa - aa;\n  xa=aa;\n  xb=ab;\n  double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n  double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n  for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    aa=ya + LN_QUICK_COEF[i][0];\n    ab=yb + LN_QUICK_COEF[i][1];\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n  }\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n  return ya + yb;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 232,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1712,
                        "startLineNumber": 1157,
                        "startColumnNumber": 35,
                        "endLineNumber": 1202,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (x < 1.01 && x > 0.99 && hiPrec == null) {\n    double xa=x - 1.0;\n    double xb=xa - x + 1.0;\n    double tmp=xa * HEX_40000000;\n    double aa=xa + tmp - tmp;\n    double ab=xa - aa;\n    xa=aa;\n    xb=ab;\n    double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n    double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n    for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_QUICK_COEF[i][0];\n      ab=yb + LN_QUICK_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    return ya + yb;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 233,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1739,
                        "startLineNumber": 1157,
                        "startColumnNumber": 8,
                        "endLineNumber": 1202,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (exp == -1 || exp == 0) {\n  if (x < 1.01 && x > 0.99 && hiPrec == null) {\n    double xa=x - 1.0;\n    double xb=xa - x + 1.0;\n    double tmp=xa * HEX_40000000;\n    double aa=xa + tmp - tmp;\n    double ab=xa - aa;\n    xa=aa;\n    xb=ab;\n    double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n    double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n    for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_QUICK_COEF[i][0];\n      ab=yb + LN_QUICK_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    return ya + yb;\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 242,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 6912,
                        "startLineNumber": 1108,
                        "startColumnNumber": 69,
                        "endLineNumber": 1328,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (x == 0) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  long bits=Double.doubleToLongBits(x);\n  if ((bits & 0x8000000000000000L) != 0 || x != x) {\n    if (x != 0.0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NaN;\n      }\n      return Double.NaN;\n    }\n  }\n  if (x == Double.POSITIVE_INFINITY) {\n    if (hiPrec != null) {\n      hiPrec[0]=Double.POSITIVE_INFINITY;\n    }\n    return Double.POSITIVE_INFINITY;\n  }\n  int exp=(int)(bits >> 52) - 1023;\n  if ((bits & 0x7ff0000000000000L) == 0) {\n    if (x == 0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NEGATIVE_INFINITY;\n      }\n      return Double.NEGATIVE_INFINITY;\n    }\n    bits<<=1;\n    while ((bits & 0x0010000000000000L) == 0) {\n      exp--;\n      bits<<=1;\n    }\n  }\n  if (exp == -1 || exp == 0) {\n    if (x < 1.01 && x > 0.99 && hiPrec == null) {\n      double xa=x - 1.0;\n      double xb=xa - x + 1.0;\n      double tmp=xa * HEX_40000000;\n      double aa=xa + tmp - tmp;\n      double ab=xa - aa;\n      xa=aa;\n      xb=ab;\n      double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n      double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n      for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n        aa=ya * xa;\n        ab=ya * xb + yb * xa + yb * xb;\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n        aa=ya + LN_QUICK_COEF[i][0];\n        ab=yb + LN_QUICK_COEF[i][1];\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n      }\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      return ya + yb;\n    }\n  }\n  double lnm[]=lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n  double epsilon=(bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n  double lnza=0.0;\n  double lnzb=0.0;\n  if (hiPrec != null) {\n    double tmp=epsilon * HEX_40000000;\n    double aa=epsilon + tmp - tmp;\n    double ab=epsilon - aa;\n    double xa=aa;\n    double xb=ab;\n    double numer=bits & 0x3ffffffffffL;\n    double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n    aa=numer - xa * denom - xb * denom;\n    xb+=aa / denom;\n    double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n    double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n    for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_HI_PREC_COEF[i][0];\n      ab=yb + LN_HI_PREC_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    lnza=aa + ab;\n    lnzb=-(lnza - aa - ab);\n  }\n else {\n    lnza=-0.16624882440418567;\n    lnza=lnza * epsilon + 0.19999954120254515;\n    lnza=lnza * epsilon + -0.2499999997677497;\n    lnza=lnza * epsilon + 0.3333333333332802;\n    lnza=lnza * epsilon + -0.5;\n    lnza=lnza * epsilon + 1.0;\n    lnza=lnza * epsilon;\n  }\n  double a=LN_2_A * exp;\n  double b=0.0;\n  double c=a + lnm[0];\n  double d=-(c - a - lnm[0]);\n  a=c;\n  b=b + d;\n  c=a + lnza;\n  d=-(c - a - lnza);\n  a=c;\n  b=b + d;\n  c=a + LN_2_B * exp;\n  d=-(c - a - LN_2_B * exp);\n  a=c;\n  b=b + d;\n  c=a + lnm[1];\n  d=-(c - a - lnm[1]);\n  a=c;\n  b=b + d;\n  c=a + lnzb;\n  d=-(c - a - lnzb);\n  a=c;\n  b=b + d;\n  if (hiPrec != null) {\n    hiPrec[0]=a;\n    hiPrec[1]=b;\n  }\n  return a + b;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 883,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7218,
                        "startLineNumber": 1102,
                        "startColumnNumber": 4,
                        "endLineNumber": 1328,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Internal helper method for natural logarithm function.\n * @param x original argument of the natural logarithm function\n * @param hiPrec extra bits of precision on output (To Be Confirmed)\n * @return log(x)\n */\nprivate static double log(final double x,final double[] hiPrec){\n  if (x == 0) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  long bits=Double.doubleToLongBits(x);\n  if ((bits & 0x8000000000000000L) != 0 || x != x) {\n    if (x != 0.0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NaN;\n      }\n      return Double.NaN;\n    }\n  }\n  if (x == Double.POSITIVE_INFINITY) {\n    if (hiPrec != null) {\n      hiPrec[0]=Double.POSITIVE_INFINITY;\n    }\n    return Double.POSITIVE_INFINITY;\n  }\n  int exp=(int)(bits >> 52) - 1023;\n  if ((bits & 0x7ff0000000000000L) == 0) {\n    if (x == 0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NEGATIVE_INFINITY;\n      }\n      return Double.NEGATIVE_INFINITY;\n    }\n    bits<<=1;\n    while ((bits & 0x0010000000000000L) == 0) {\n      exp--;\n      bits<<=1;\n    }\n  }\n  if (exp == -1 || exp == 0) {\n    if (x < 1.01 && x > 0.99 && hiPrec == null) {\n      double xa=x - 1.0;\n      double xb=xa - x + 1.0;\n      double tmp=xa * HEX_40000000;\n      double aa=xa + tmp - tmp;\n      double ab=xa - aa;\n      xa=aa;\n      xb=ab;\n      double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n      double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n      for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n        aa=ya * xa;\n        ab=ya * xb + yb * xa + yb * xb;\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n        aa=ya + LN_QUICK_COEF[i][0];\n        ab=yb + LN_QUICK_COEF[i][1];\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n      }\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      return ya + yb;\n    }\n  }\n  double lnm[]=lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n  double epsilon=(bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n  double lnza=0.0;\n  double lnzb=0.0;\n  if (hiPrec != null) {\n    double tmp=epsilon * HEX_40000000;\n    double aa=epsilon + tmp - tmp;\n    double ab=epsilon - aa;\n    double xa=aa;\n    double xb=ab;\n    double numer=bits & 0x3ffffffffffL;\n    double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n    aa=numer - xa * denom - xb * denom;\n    xb+=aa / denom;\n    double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n    double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n    for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_HI_PREC_COEF[i][0];\n      ab=yb + LN_HI_PREC_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    lnza=aa + ab;\n    lnzb=-(lnza - aa - ab);\n  }\n else {\n    lnza=-0.16624882440418567;\n    lnza=lnza * epsilon + 0.19999954120254515;\n    lnza=lnza * epsilon + -0.2499999997677497;\n    lnza=lnza * epsilon + 0.3333333333332802;\n    lnza=lnza * epsilon + -0.5;\n    lnza=lnza * epsilon + 1.0;\n    lnza=lnza * epsilon;\n  }\n  double a=LN_2_A * exp;\n  double b=0.0;\n  double c=a + lnm[0];\n  double d=-(c - a - lnm[0]);\n  a=c;\n  b=b + d;\n  c=a + lnza;\n  d=-(c - a - lnza);\n  a=c;\n  b=b + d;\n  c=a + LN_2_B * exp;\n  d=-(c - a - LN_2_B * exp);\n  a=c;\n  b=b + d;\n  c=a + lnm[1];\n  d=-(c - a - lnm[1]);\n  a=c;\n  b=b + d;\n  c=a + lnzb;\n  d=-(c - a - lnzb);\n  a=c;\n  b=b + d;\n  if (hiPrec != null) {\n    hiPrec[0]=a;\n    hiPrec[1]=b;\n  }\n  return a + b;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 899,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 20,
                    "startLineNumber": 1167,
                    "startColumnNumber": 16,
                    "endLineNumber": 1167,
                    "endColumnNumber": 36
                },
                "nodeContext": "double ab=xa - aa;\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 7,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "double"
        },
        {
            "nodeContext": "aa",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 1168,
                "startColumnNumber": 21,
                "endLineNumber": 1168,
                "endColumnNumber": 23
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 1168,
                        "startColumnNumber": 16,
                        "endLineNumber": 1168,
                        "endColumnNumber": 23
                    },
                    "nodeContext": "xa=aa",
                    "nodeType": "Assignment",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 8,
                        "startLineNumber": 1168,
                        "startColumnNumber": 16,
                        "endLineNumber": 1168,
                        "endColumnNumber": 24
                    },
                    "nodeContext": "xa=aa;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1644,
                        "startLineNumber": 1158,
                        "startColumnNumber": 56,
                        "endLineNumber": 1201,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  double xa=x - 1.0;\n  double xb=xa - x + 1.0;\n  double tmp=xa * HEX_40000000;\n  double aa=xa + tmp - tmp;\n  double ab=xa - aa;\n  xa=aa;\n  xb=ab;\n  double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n  double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n  for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    aa=ya + LN_QUICK_COEF[i][0];\n    ab=yb + LN_QUICK_COEF[i][1];\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n  }\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n  return ya + yb;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 220,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1688,
                        "startLineNumber": 1158,
                        "startColumnNumber": 12,
                        "endLineNumber": 1201,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (x < 1.01 && x > 0.99 && hiPrec == null) {\n  double xa=x - 1.0;\n  double xb=xa - x + 1.0;\n  double tmp=xa * HEX_40000000;\n  double aa=xa + tmp - tmp;\n  double ab=xa - aa;\n  xa=aa;\n  xb=ab;\n  double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n  double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n  for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    aa=ya + LN_QUICK_COEF[i][0];\n    ab=yb + LN_QUICK_COEF[i][1];\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n  }\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n  return ya + yb;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 232,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1712,
                        "startLineNumber": 1157,
                        "startColumnNumber": 35,
                        "endLineNumber": 1202,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (x < 1.01 && x > 0.99 && hiPrec == null) {\n    double xa=x - 1.0;\n    double xb=xa - x + 1.0;\n    double tmp=xa * HEX_40000000;\n    double aa=xa + tmp - tmp;\n    double ab=xa - aa;\n    xa=aa;\n    xb=ab;\n    double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n    double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n    for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_QUICK_COEF[i][0];\n      ab=yb + LN_QUICK_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    return ya + yb;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 233,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1739,
                        "startLineNumber": 1157,
                        "startColumnNumber": 8,
                        "endLineNumber": 1202,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (exp == -1 || exp == 0) {\n  if (x < 1.01 && x > 0.99 && hiPrec == null) {\n    double xa=x - 1.0;\n    double xb=xa - x + 1.0;\n    double tmp=xa * HEX_40000000;\n    double aa=xa + tmp - tmp;\n    double ab=xa - aa;\n    xa=aa;\n    xb=ab;\n    double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n    double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n    for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_QUICK_COEF[i][0];\n      ab=yb + LN_QUICK_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    return ya + yb;\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 242,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 6912,
                        "startLineNumber": 1108,
                        "startColumnNumber": 69,
                        "endLineNumber": 1328,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (x == 0) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  long bits=Double.doubleToLongBits(x);\n  if ((bits & 0x8000000000000000L) != 0 || x != x) {\n    if (x != 0.0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NaN;\n      }\n      return Double.NaN;\n    }\n  }\n  if (x == Double.POSITIVE_INFINITY) {\n    if (hiPrec != null) {\n      hiPrec[0]=Double.POSITIVE_INFINITY;\n    }\n    return Double.POSITIVE_INFINITY;\n  }\n  int exp=(int)(bits >> 52) - 1023;\n  if ((bits & 0x7ff0000000000000L) == 0) {\n    if (x == 0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NEGATIVE_INFINITY;\n      }\n      return Double.NEGATIVE_INFINITY;\n    }\n    bits<<=1;\n    while ((bits & 0x0010000000000000L) == 0) {\n      exp--;\n      bits<<=1;\n    }\n  }\n  if (exp == -1 || exp == 0) {\n    if (x < 1.01 && x > 0.99 && hiPrec == null) {\n      double xa=x - 1.0;\n      double xb=xa - x + 1.0;\n      double tmp=xa * HEX_40000000;\n      double aa=xa + tmp - tmp;\n      double ab=xa - aa;\n      xa=aa;\n      xb=ab;\n      double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n      double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n      for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n        aa=ya * xa;\n        ab=ya * xb + yb * xa + yb * xb;\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n        aa=ya + LN_QUICK_COEF[i][0];\n        ab=yb + LN_QUICK_COEF[i][1];\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n      }\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      return ya + yb;\n    }\n  }\n  double lnm[]=lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n  double epsilon=(bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n  double lnza=0.0;\n  double lnzb=0.0;\n  if (hiPrec != null) {\n    double tmp=epsilon * HEX_40000000;\n    double aa=epsilon + tmp - tmp;\n    double ab=epsilon - aa;\n    double xa=aa;\n    double xb=ab;\n    double numer=bits & 0x3ffffffffffL;\n    double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n    aa=numer - xa * denom - xb * denom;\n    xb+=aa / denom;\n    double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n    double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n    for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_HI_PREC_COEF[i][0];\n      ab=yb + LN_HI_PREC_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    lnza=aa + ab;\n    lnzb=-(lnza - aa - ab);\n  }\n else {\n    lnza=-0.16624882440418567;\n    lnza=lnza * epsilon + 0.19999954120254515;\n    lnza=lnza * epsilon + -0.2499999997677497;\n    lnza=lnza * epsilon + 0.3333333333332802;\n    lnza=lnza * epsilon + -0.5;\n    lnza=lnza * epsilon + 1.0;\n    lnza=lnza * epsilon;\n  }\n  double a=LN_2_A * exp;\n  double b=0.0;\n  double c=a + lnm[0];\n  double d=-(c - a - lnm[0]);\n  a=c;\n  b=b + d;\n  c=a + lnza;\n  d=-(c - a - lnza);\n  a=c;\n  b=b + d;\n  c=a + LN_2_B * exp;\n  d=-(c - a - LN_2_B * exp);\n  a=c;\n  b=b + d;\n  c=a + lnm[1];\n  d=-(c - a - lnm[1]);\n  a=c;\n  b=b + d;\n  c=a + lnzb;\n  d=-(c - a - lnzb);\n  a=c;\n  b=b + d;\n  if (hiPrec != null) {\n    hiPrec[0]=a;\n    hiPrec[1]=b;\n  }\n  return a + b;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 883,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7218,
                        "startLineNumber": 1102,
                        "startColumnNumber": 4,
                        "endLineNumber": 1328,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Internal helper method for natural logarithm function.\n * @param x original argument of the natural logarithm function\n * @param hiPrec extra bits of precision on output (To Be Confirmed)\n * @return log(x)\n */\nprivate static double log(final double x,final double[] hiPrec){\n  if (x == 0) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  long bits=Double.doubleToLongBits(x);\n  if ((bits & 0x8000000000000000L) != 0 || x != x) {\n    if (x != 0.0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NaN;\n      }\n      return Double.NaN;\n    }\n  }\n  if (x == Double.POSITIVE_INFINITY) {\n    if (hiPrec != null) {\n      hiPrec[0]=Double.POSITIVE_INFINITY;\n    }\n    return Double.POSITIVE_INFINITY;\n  }\n  int exp=(int)(bits >> 52) - 1023;\n  if ((bits & 0x7ff0000000000000L) == 0) {\n    if (x == 0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NEGATIVE_INFINITY;\n      }\n      return Double.NEGATIVE_INFINITY;\n    }\n    bits<<=1;\n    while ((bits & 0x0010000000000000L) == 0) {\n      exp--;\n      bits<<=1;\n    }\n  }\n  if (exp == -1 || exp == 0) {\n    if (x < 1.01 && x > 0.99 && hiPrec == null) {\n      double xa=x - 1.0;\n      double xb=xa - x + 1.0;\n      double tmp=xa * HEX_40000000;\n      double aa=xa + tmp - tmp;\n      double ab=xa - aa;\n      xa=aa;\n      xb=ab;\n      double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n      double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n      for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n        aa=ya * xa;\n        ab=ya * xb + yb * xa + yb * xb;\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n        aa=ya + LN_QUICK_COEF[i][0];\n        ab=yb + LN_QUICK_COEF[i][1];\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n      }\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      return ya + yb;\n    }\n  }\n  double lnm[]=lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n  double epsilon=(bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n  double lnza=0.0;\n  double lnzb=0.0;\n  if (hiPrec != null) {\n    double tmp=epsilon * HEX_40000000;\n    double aa=epsilon + tmp - tmp;\n    double ab=epsilon - aa;\n    double xa=aa;\n    double xb=ab;\n    double numer=bits & 0x3ffffffffffL;\n    double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n    aa=numer - xa * denom - xb * denom;\n    xb+=aa / denom;\n    double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n    double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n    for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_HI_PREC_COEF[i][0];\n      ab=yb + LN_HI_PREC_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    lnza=aa + ab;\n    lnzb=-(lnza - aa - ab);\n  }\n else {\n    lnza=-0.16624882440418567;\n    lnza=lnza * epsilon + 0.19999954120254515;\n    lnza=lnza * epsilon + -0.2499999997677497;\n    lnza=lnza * epsilon + 0.3333333333332802;\n    lnza=lnza * epsilon + -0.5;\n    lnza=lnza * epsilon + 1.0;\n    lnza=lnza * epsilon;\n  }\n  double a=LN_2_A * exp;\n  double b=0.0;\n  double c=a + lnm[0];\n  double d=-(c - a - lnm[0]);\n  a=c;\n  b=b + d;\n  c=a + lnza;\n  d=-(c - a - lnza);\n  a=c;\n  b=b + d;\n  c=a + LN_2_B * exp;\n  d=-(c - a - LN_2_B * exp);\n  a=c;\n  b=b + d;\n  c=a + lnm[1];\n  d=-(c - a - lnm[1]);\n  a=c;\n  b=b + d;\n  c=a + lnzb;\n  d=-(c - a - lnzb);\n  a=c;\n  b=b + d;\n  if (hiPrec != null) {\n    hiPrec[0]=a;\n    hiPrec[1]=b;\n  }\n  return a + b;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 899,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 8,
                    "startLineNumber": 1168,
                    "startColumnNumber": 16,
                    "endLineNumber": 1168,
                    "endColumnNumber": 24
                },
                "nodeContext": "xa=aa;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 4,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "double"
        },
        {
            "nodeContext": "aa",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 1179,
                "startColumnNumber": 26,
                "endLineNumber": 1179,
                "endColumnNumber": 28
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 17,
                        "startLineNumber": 1179,
                        "startColumnNumber": 26,
                        "endLineNumber": 1179,
                        "endColumnNumber": 43
                    },
                    "nodeContext": "aa * HEX_40000000",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 23,
                        "startLineNumber": 1179,
                        "startColumnNumber": 20,
                        "endLineNumber": 1179,
                        "endColumnNumber": 43
                    },
                    "nodeContext": "tmp=aa * HEX_40000000",
                    "nodeType": "Assignment",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 24,
                        "startLineNumber": 1179,
                        "startColumnNumber": 20,
                        "endLineNumber": 1179,
                        "endColumnNumber": 44
                    },
                    "nodeContext": "tmp=aa * HEX_40000000;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 6,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 640,
                        "startLineNumber": 1174,
                        "startColumnNumber": 68,
                        "endLineNumber": 1190,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n  aa=ya + LN_QUICK_COEF[i][0];\n  ab=yb + LN_QUICK_COEF[i][1];\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 85,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 692,
                        "startLineNumber": 1174,
                        "startColumnNumber": 16,
                        "endLineNumber": 1190,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n  aa=ya + LN_QUICK_COEF[i][0];\n  ab=yb + LN_QUICK_COEF[i][1];\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 100,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1644,
                        "startLineNumber": 1158,
                        "startColumnNumber": 56,
                        "endLineNumber": 1201,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  double xa=x - 1.0;\n  double xb=xa - x + 1.0;\n  double tmp=xa * HEX_40000000;\n  double aa=xa + tmp - tmp;\n  double ab=xa - aa;\n  xa=aa;\n  xb=ab;\n  double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n  double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n  for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    aa=ya + LN_QUICK_COEF[i][0];\n    ab=yb + LN_QUICK_COEF[i][1];\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n  }\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n  return ya + yb;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 220,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1688,
                        "startLineNumber": 1158,
                        "startColumnNumber": 12,
                        "endLineNumber": 1201,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (x < 1.01 && x > 0.99 && hiPrec == null) {\n  double xa=x - 1.0;\n  double xb=xa - x + 1.0;\n  double tmp=xa * HEX_40000000;\n  double aa=xa + tmp - tmp;\n  double ab=xa - aa;\n  xa=aa;\n  xb=ab;\n  double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n  double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n  for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    aa=ya + LN_QUICK_COEF[i][0];\n    ab=yb + LN_QUICK_COEF[i][1];\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n  }\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n  return ya + yb;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 232,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1712,
                        "startLineNumber": 1157,
                        "startColumnNumber": 35,
                        "endLineNumber": 1202,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (x < 1.01 && x > 0.99 && hiPrec == null) {\n    double xa=x - 1.0;\n    double xb=xa - x + 1.0;\n    double tmp=xa * HEX_40000000;\n    double aa=xa + tmp - tmp;\n    double ab=xa - aa;\n    xa=aa;\n    xb=ab;\n    double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n    double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n    for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_QUICK_COEF[i][0];\n      ab=yb + LN_QUICK_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    return ya + yb;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 233,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1739,
                        "startLineNumber": 1157,
                        "startColumnNumber": 8,
                        "endLineNumber": 1202,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (exp == -1 || exp == 0) {\n  if (x < 1.01 && x > 0.99 && hiPrec == null) {\n    double xa=x - 1.0;\n    double xb=xa - x + 1.0;\n    double tmp=xa * HEX_40000000;\n    double aa=xa + tmp - tmp;\n    double ab=xa - aa;\n    xa=aa;\n    xb=ab;\n    double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n    double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n    for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_QUICK_COEF[i][0];\n      ab=yb + LN_QUICK_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    return ya + yb;\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 242,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 6912,
                        "startLineNumber": 1108,
                        "startColumnNumber": 69,
                        "endLineNumber": 1328,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (x == 0) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  long bits=Double.doubleToLongBits(x);\n  if ((bits & 0x8000000000000000L) != 0 || x != x) {\n    if (x != 0.0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NaN;\n      }\n      return Double.NaN;\n    }\n  }\n  if (x == Double.POSITIVE_INFINITY) {\n    if (hiPrec != null) {\n      hiPrec[0]=Double.POSITIVE_INFINITY;\n    }\n    return Double.POSITIVE_INFINITY;\n  }\n  int exp=(int)(bits >> 52) - 1023;\n  if ((bits & 0x7ff0000000000000L) == 0) {\n    if (x == 0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NEGATIVE_INFINITY;\n      }\n      return Double.NEGATIVE_INFINITY;\n    }\n    bits<<=1;\n    while ((bits & 0x0010000000000000L) == 0) {\n      exp--;\n      bits<<=1;\n    }\n  }\n  if (exp == -1 || exp == 0) {\n    if (x < 1.01 && x > 0.99 && hiPrec == null) {\n      double xa=x - 1.0;\n      double xb=xa - x + 1.0;\n      double tmp=xa * HEX_40000000;\n      double aa=xa + tmp - tmp;\n      double ab=xa - aa;\n      xa=aa;\n      xb=ab;\n      double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n      double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n      for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n        aa=ya * xa;\n        ab=ya * xb + yb * xa + yb * xb;\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n        aa=ya + LN_QUICK_COEF[i][0];\n        ab=yb + LN_QUICK_COEF[i][1];\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n      }\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      return ya + yb;\n    }\n  }\n  double lnm[]=lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n  double epsilon=(bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n  double lnza=0.0;\n  double lnzb=0.0;\n  if (hiPrec != null) {\n    double tmp=epsilon * HEX_40000000;\n    double aa=epsilon + tmp - tmp;\n    double ab=epsilon - aa;\n    double xa=aa;\n    double xb=ab;\n    double numer=bits & 0x3ffffffffffL;\n    double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n    aa=numer - xa * denom - xb * denom;\n    xb+=aa / denom;\n    double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n    double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n    for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_HI_PREC_COEF[i][0];\n      ab=yb + LN_HI_PREC_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    lnza=aa + ab;\n    lnzb=-(lnza - aa - ab);\n  }\n else {\n    lnza=-0.16624882440418567;\n    lnza=lnza * epsilon + 0.19999954120254515;\n    lnza=lnza * epsilon + -0.2499999997677497;\n    lnza=lnza * epsilon + 0.3333333333332802;\n    lnza=lnza * epsilon + -0.5;\n    lnza=lnza * epsilon + 1.0;\n    lnza=lnza * epsilon;\n  }\n  double a=LN_2_A * exp;\n  double b=0.0;\n  double c=a + lnm[0];\n  double d=-(c - a - lnm[0]);\n  a=c;\n  b=b + d;\n  c=a + lnza;\n  d=-(c - a - lnza);\n  a=c;\n  b=b + d;\n  c=a + LN_2_B * exp;\n  d=-(c - a - LN_2_B * exp);\n  a=c;\n  b=b + d;\n  c=a + lnm[1];\n  d=-(c - a - lnm[1]);\n  a=c;\n  b=b + d;\n  c=a + lnzb;\n  d=-(c - a - lnzb);\n  a=c;\n  b=b + d;\n  if (hiPrec != null) {\n    hiPrec[0]=a;\n    hiPrec[1]=b;\n  }\n  return a + b;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 883,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7218,
                        "startLineNumber": 1102,
                        "startColumnNumber": 4,
                        "endLineNumber": 1328,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Internal helper method for natural logarithm function.\n * @param x original argument of the natural logarithm function\n * @param hiPrec extra bits of precision on output (To Be Confirmed)\n * @return log(x)\n */\nprivate static double log(final double x,final double[] hiPrec){\n  if (x == 0) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  long bits=Double.doubleToLongBits(x);\n  if ((bits & 0x8000000000000000L) != 0 || x != x) {\n    if (x != 0.0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NaN;\n      }\n      return Double.NaN;\n    }\n  }\n  if (x == Double.POSITIVE_INFINITY) {\n    if (hiPrec != null) {\n      hiPrec[0]=Double.POSITIVE_INFINITY;\n    }\n    return Double.POSITIVE_INFINITY;\n  }\n  int exp=(int)(bits >> 52) - 1023;\n  if ((bits & 0x7ff0000000000000L) == 0) {\n    if (x == 0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NEGATIVE_INFINITY;\n      }\n      return Double.NEGATIVE_INFINITY;\n    }\n    bits<<=1;\n    while ((bits & 0x0010000000000000L) == 0) {\n      exp--;\n      bits<<=1;\n    }\n  }\n  if (exp == -1 || exp == 0) {\n    if (x < 1.01 && x > 0.99 && hiPrec == null) {\n      double xa=x - 1.0;\n      double xb=xa - x + 1.0;\n      double tmp=xa * HEX_40000000;\n      double aa=xa + tmp - tmp;\n      double ab=xa - aa;\n      xa=aa;\n      xb=ab;\n      double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n      double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n      for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n        aa=ya * xa;\n        ab=ya * xb + yb * xa + yb * xb;\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n        aa=ya + LN_QUICK_COEF[i][0];\n        ab=yb + LN_QUICK_COEF[i][1];\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n      }\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      return ya + yb;\n    }\n  }\n  double lnm[]=lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n  double epsilon=(bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n  double lnza=0.0;\n  double lnzb=0.0;\n  if (hiPrec != null) {\n    double tmp=epsilon * HEX_40000000;\n    double aa=epsilon + tmp - tmp;\n    double ab=epsilon - aa;\n    double xa=aa;\n    double xb=ab;\n    double numer=bits & 0x3ffffffffffL;\n    double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n    aa=numer - xa * denom - xb * denom;\n    xb+=aa / denom;\n    double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n    double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n    for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_HI_PREC_COEF[i][0];\n      ab=yb + LN_HI_PREC_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    lnza=aa + ab;\n    lnzb=-(lnza - aa - ab);\n  }\n else {\n    lnza=-0.16624882440418567;\n    lnza=lnza * epsilon + 0.19999954120254515;\n    lnza=lnza * epsilon + -0.2499999997677497;\n    lnza=lnza * epsilon + 0.3333333333332802;\n    lnza=lnza * epsilon + -0.5;\n    lnza=lnza * epsilon + 1.0;\n    lnza=lnza * epsilon;\n  }\n  double a=LN_2_A * exp;\n  double b=0.0;\n  double c=a + lnm[0];\n  double d=-(c - a - lnm[0]);\n  a=c;\n  b=b + d;\n  c=a + lnza;\n  d=-(c - a - lnza);\n  a=c;\n  b=b + d;\n  c=a + LN_2_B * exp;\n  d=-(c - a - LN_2_B * exp);\n  a=c;\n  b=b + d;\n  c=a + lnm[1];\n  d=-(c - a - lnm[1]);\n  a=c;\n  b=b + d;\n  c=a + lnzb;\n  d=-(c - a - lnzb);\n  a=c;\n  b=b + d;\n  if (hiPrec != null) {\n    hiPrec[0]=a;\n    hiPrec[1]=b;\n  }\n  return a + b;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 899,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 24,
                    "startLineNumber": 1179,
                    "startColumnNumber": 20,
                    "endLineNumber": 1179,
                    "endColumnNumber": 44
                },
                "nodeContext": "tmp=aa * HEX_40000000;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 6,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "double"
        },
        {
            "nodeContext": "aa",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 1180,
                "startColumnNumber": 25,
                "endLineNumber": 1180,
                "endColumnNumber": 27
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 8,
                        "startLineNumber": 1180,
                        "startColumnNumber": 25,
                        "endLineNumber": 1180,
                        "endColumnNumber": 33
                    },
                    "nodeContext": "aa + tmp",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 14,
                        "startLineNumber": 1180,
                        "startColumnNumber": 25,
                        "endLineNumber": 1180,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "aa + tmp - tmp",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 19,
                        "startLineNumber": 1180,
                        "startColumnNumber": 20,
                        "endLineNumber": 1180,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "ya=aa + tmp - tmp",
                    "nodeType": "Assignment",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 20,
                        "startLineNumber": 1180,
                        "startColumnNumber": 20,
                        "endLineNumber": 1180,
                        "endColumnNumber": 40
                    },
                    "nodeContext": "ya=aa + tmp - tmp;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 640,
                        "startLineNumber": 1174,
                        "startColumnNumber": 68,
                        "endLineNumber": 1190,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n  aa=ya + LN_QUICK_COEF[i][0];\n  ab=yb + LN_QUICK_COEF[i][1];\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 85,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 692,
                        "startLineNumber": 1174,
                        "startColumnNumber": 16,
                        "endLineNumber": 1190,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n  aa=ya + LN_QUICK_COEF[i][0];\n  ab=yb + LN_QUICK_COEF[i][1];\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 100,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1644,
                        "startLineNumber": 1158,
                        "startColumnNumber": 56,
                        "endLineNumber": 1201,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  double xa=x - 1.0;\n  double xb=xa - x + 1.0;\n  double tmp=xa * HEX_40000000;\n  double aa=xa + tmp - tmp;\n  double ab=xa - aa;\n  xa=aa;\n  xb=ab;\n  double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n  double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n  for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    aa=ya + LN_QUICK_COEF[i][0];\n    ab=yb + LN_QUICK_COEF[i][1];\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n  }\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n  return ya + yb;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 220,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1688,
                        "startLineNumber": 1158,
                        "startColumnNumber": 12,
                        "endLineNumber": 1201,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (x < 1.01 && x > 0.99 && hiPrec == null) {\n  double xa=x - 1.0;\n  double xb=xa - x + 1.0;\n  double tmp=xa * HEX_40000000;\n  double aa=xa + tmp - tmp;\n  double ab=xa - aa;\n  xa=aa;\n  xb=ab;\n  double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n  double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n  for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    aa=ya + LN_QUICK_COEF[i][0];\n    ab=yb + LN_QUICK_COEF[i][1];\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n  }\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n  return ya + yb;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 232,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1712,
                        "startLineNumber": 1157,
                        "startColumnNumber": 35,
                        "endLineNumber": 1202,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (x < 1.01 && x > 0.99 && hiPrec == null) {\n    double xa=x - 1.0;\n    double xb=xa - x + 1.0;\n    double tmp=xa * HEX_40000000;\n    double aa=xa + tmp - tmp;\n    double ab=xa - aa;\n    xa=aa;\n    xb=ab;\n    double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n    double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n    for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_QUICK_COEF[i][0];\n      ab=yb + LN_QUICK_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    return ya + yb;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 233,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1739,
                        "startLineNumber": 1157,
                        "startColumnNumber": 8,
                        "endLineNumber": 1202,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (exp == -1 || exp == 0) {\n  if (x < 1.01 && x > 0.99 && hiPrec == null) {\n    double xa=x - 1.0;\n    double xb=xa - x + 1.0;\n    double tmp=xa * HEX_40000000;\n    double aa=xa + tmp - tmp;\n    double ab=xa - aa;\n    xa=aa;\n    xb=ab;\n    double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n    double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n    for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_QUICK_COEF[i][0];\n      ab=yb + LN_QUICK_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    return ya + yb;\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 242,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 6912,
                        "startLineNumber": 1108,
                        "startColumnNumber": 69,
                        "endLineNumber": 1328,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (x == 0) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  long bits=Double.doubleToLongBits(x);\n  if ((bits & 0x8000000000000000L) != 0 || x != x) {\n    if (x != 0.0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NaN;\n      }\n      return Double.NaN;\n    }\n  }\n  if (x == Double.POSITIVE_INFINITY) {\n    if (hiPrec != null) {\n      hiPrec[0]=Double.POSITIVE_INFINITY;\n    }\n    return Double.POSITIVE_INFINITY;\n  }\n  int exp=(int)(bits >> 52) - 1023;\n  if ((bits & 0x7ff0000000000000L) == 0) {\n    if (x == 0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NEGATIVE_INFINITY;\n      }\n      return Double.NEGATIVE_INFINITY;\n    }\n    bits<<=1;\n    while ((bits & 0x0010000000000000L) == 0) {\n      exp--;\n      bits<<=1;\n    }\n  }\n  if (exp == -1 || exp == 0) {\n    if (x < 1.01 && x > 0.99 && hiPrec == null) {\n      double xa=x - 1.0;\n      double xb=xa - x + 1.0;\n      double tmp=xa * HEX_40000000;\n      double aa=xa + tmp - tmp;\n      double ab=xa - aa;\n      xa=aa;\n      xb=ab;\n      double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n      double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n      for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n        aa=ya * xa;\n        ab=ya * xb + yb * xa + yb * xb;\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n        aa=ya + LN_QUICK_COEF[i][0];\n        ab=yb + LN_QUICK_COEF[i][1];\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n      }\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      return ya + yb;\n    }\n  }\n  double lnm[]=lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n  double epsilon=(bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n  double lnza=0.0;\n  double lnzb=0.0;\n  if (hiPrec != null) {\n    double tmp=epsilon * HEX_40000000;\n    double aa=epsilon + tmp - tmp;\n    double ab=epsilon - aa;\n    double xa=aa;\n    double xb=ab;\n    double numer=bits & 0x3ffffffffffL;\n    double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n    aa=numer - xa * denom - xb * denom;\n    xb+=aa / denom;\n    double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n    double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n    for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_HI_PREC_COEF[i][0];\n      ab=yb + LN_HI_PREC_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    lnza=aa + ab;\n    lnzb=-(lnza - aa - ab);\n  }\n else {\n    lnza=-0.16624882440418567;\n    lnza=lnza * epsilon + 0.19999954120254515;\n    lnza=lnza * epsilon + -0.2499999997677497;\n    lnza=lnza * epsilon + 0.3333333333332802;\n    lnza=lnza * epsilon + -0.5;\n    lnza=lnza * epsilon + 1.0;\n    lnza=lnza * epsilon;\n  }\n  double a=LN_2_A * exp;\n  double b=0.0;\n  double c=a + lnm[0];\n  double d=-(c - a - lnm[0]);\n  a=c;\n  b=b + d;\n  c=a + lnza;\n  d=-(c - a - lnza);\n  a=c;\n  b=b + d;\n  c=a + LN_2_B * exp;\n  d=-(c - a - LN_2_B * exp);\n  a=c;\n  b=b + d;\n  c=a + lnm[1];\n  d=-(c - a - lnm[1]);\n  a=c;\n  b=b + d;\n  c=a + lnzb;\n  d=-(c - a - lnzb);\n  a=c;\n  b=b + d;\n  if (hiPrec != null) {\n    hiPrec[0]=a;\n    hiPrec[1]=b;\n  }\n  return a + b;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 883,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7218,
                        "startLineNumber": 1102,
                        "startColumnNumber": 4,
                        "endLineNumber": 1328,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Internal helper method for natural logarithm function.\n * @param x original argument of the natural logarithm function\n * @param hiPrec extra bits of precision on output (To Be Confirmed)\n * @return log(x)\n */\nprivate static double log(final double x,final double[] hiPrec){\n  if (x == 0) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  long bits=Double.doubleToLongBits(x);\n  if ((bits & 0x8000000000000000L) != 0 || x != x) {\n    if (x != 0.0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NaN;\n      }\n      return Double.NaN;\n    }\n  }\n  if (x == Double.POSITIVE_INFINITY) {\n    if (hiPrec != null) {\n      hiPrec[0]=Double.POSITIVE_INFINITY;\n    }\n    return Double.POSITIVE_INFINITY;\n  }\n  int exp=(int)(bits >> 52) - 1023;\n  if ((bits & 0x7ff0000000000000L) == 0) {\n    if (x == 0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NEGATIVE_INFINITY;\n      }\n      return Double.NEGATIVE_INFINITY;\n    }\n    bits<<=1;\n    while ((bits & 0x0010000000000000L) == 0) {\n      exp--;\n      bits<<=1;\n    }\n  }\n  if (exp == -1 || exp == 0) {\n    if (x < 1.01 && x > 0.99 && hiPrec == null) {\n      double xa=x - 1.0;\n      double xb=xa - x + 1.0;\n      double tmp=xa * HEX_40000000;\n      double aa=xa + tmp - tmp;\n      double ab=xa - aa;\n      xa=aa;\n      xb=ab;\n      double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n      double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n      for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n        aa=ya * xa;\n        ab=ya * xb + yb * xa + yb * xb;\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n        aa=ya + LN_QUICK_COEF[i][0];\n        ab=yb + LN_QUICK_COEF[i][1];\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n      }\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      return ya + yb;\n    }\n  }\n  double lnm[]=lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n  double epsilon=(bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n  double lnza=0.0;\n  double lnzb=0.0;\n  if (hiPrec != null) {\n    double tmp=epsilon * HEX_40000000;\n    double aa=epsilon + tmp - tmp;\n    double ab=epsilon - aa;\n    double xa=aa;\n    double xb=ab;\n    double numer=bits & 0x3ffffffffffL;\n    double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n    aa=numer - xa * denom - xb * denom;\n    xb+=aa / denom;\n    double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n    double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n    for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_HI_PREC_COEF[i][0];\n      ab=yb + LN_HI_PREC_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    lnza=aa + ab;\n    lnzb=-(lnza - aa - ab);\n  }\n else {\n    lnza=-0.16624882440418567;\n    lnza=lnza * epsilon + 0.19999954120254515;\n    lnza=lnza * epsilon + -0.2499999997677497;\n    lnza=lnza * epsilon + 0.3333333333332802;\n    lnza=lnza * epsilon + -0.5;\n    lnza=lnza * epsilon + 1.0;\n    lnza=lnza * epsilon;\n  }\n  double a=LN_2_A * exp;\n  double b=0.0;\n  double c=a + lnm[0];\n  double d=-(c - a - lnm[0]);\n  a=c;\n  b=b + d;\n  c=a + lnza;\n  d=-(c - a - lnza);\n  a=c;\n  b=b + d;\n  c=a + LN_2_B * exp;\n  d=-(c - a - LN_2_B * exp);\n  a=c;\n  b=b + d;\n  c=a + lnm[1];\n  d=-(c - a - lnm[1]);\n  a=c;\n  b=b + d;\n  c=a + lnzb;\n  d=-(c - a - lnzb);\n  a=c;\n  b=b + d;\n  if (hiPrec != null) {\n    hiPrec[0]=a;\n    hiPrec[1]=b;\n  }\n  return a + b;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 899,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 20,
                    "startLineNumber": 1180,
                    "startColumnNumber": 20,
                    "endLineNumber": 1180,
                    "endColumnNumber": 40
                },
                "nodeContext": "ya=aa + tmp - tmp;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "double"
        },
        {
            "nodeContext": "aa",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 1181,
                "startColumnNumber": 25,
                "endLineNumber": 1181,
                "endColumnNumber": 27
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 1181,
                        "startColumnNumber": 25,
                        "endLineNumber": 1181,
                        "endColumnNumber": 32
                    },
                    "nodeContext": "aa - ya",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 12,
                        "startLineNumber": 1181,
                        "startColumnNumber": 25,
                        "endLineNumber": 1181,
                        "endColumnNumber": 37
                    },
                    "nodeContext": "aa - ya + ab",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 17,
                        "startLineNumber": 1181,
                        "startColumnNumber": 20,
                        "endLineNumber": 1181,
                        "endColumnNumber": 37
                    },
                    "nodeContext": "yb=aa - ya + ab",
                    "nodeType": "Assignment",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 18,
                        "startLineNumber": 1181,
                        "startColumnNumber": 20,
                        "endLineNumber": 1181,
                        "endColumnNumber": 38
                    },
                    "nodeContext": "yb=aa - ya + ab;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 640,
                        "startLineNumber": 1174,
                        "startColumnNumber": 68,
                        "endLineNumber": 1190,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n  aa=ya + LN_QUICK_COEF[i][0];\n  ab=yb + LN_QUICK_COEF[i][1];\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 85,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 692,
                        "startLineNumber": 1174,
                        "startColumnNumber": 16,
                        "endLineNumber": 1190,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n  aa=ya + LN_QUICK_COEF[i][0];\n  ab=yb + LN_QUICK_COEF[i][1];\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 100,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1644,
                        "startLineNumber": 1158,
                        "startColumnNumber": 56,
                        "endLineNumber": 1201,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  double xa=x - 1.0;\n  double xb=xa - x + 1.0;\n  double tmp=xa * HEX_40000000;\n  double aa=xa + tmp - tmp;\n  double ab=xa - aa;\n  xa=aa;\n  xb=ab;\n  double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n  double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n  for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    aa=ya + LN_QUICK_COEF[i][0];\n    ab=yb + LN_QUICK_COEF[i][1];\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n  }\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n  return ya + yb;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 220,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1688,
                        "startLineNumber": 1158,
                        "startColumnNumber": 12,
                        "endLineNumber": 1201,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (x < 1.01 && x > 0.99 && hiPrec == null) {\n  double xa=x - 1.0;\n  double xb=xa - x + 1.0;\n  double tmp=xa * HEX_40000000;\n  double aa=xa + tmp - tmp;\n  double ab=xa - aa;\n  xa=aa;\n  xb=ab;\n  double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n  double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n  for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    aa=ya + LN_QUICK_COEF[i][0];\n    ab=yb + LN_QUICK_COEF[i][1];\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n  }\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n  return ya + yb;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 232,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1712,
                        "startLineNumber": 1157,
                        "startColumnNumber": 35,
                        "endLineNumber": 1202,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (x < 1.01 && x > 0.99 && hiPrec == null) {\n    double xa=x - 1.0;\n    double xb=xa - x + 1.0;\n    double tmp=xa * HEX_40000000;\n    double aa=xa + tmp - tmp;\n    double ab=xa - aa;\n    xa=aa;\n    xb=ab;\n    double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n    double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n    for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_QUICK_COEF[i][0];\n      ab=yb + LN_QUICK_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    return ya + yb;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 233,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1739,
                        "startLineNumber": 1157,
                        "startColumnNumber": 8,
                        "endLineNumber": 1202,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (exp == -1 || exp == 0) {\n  if (x < 1.01 && x > 0.99 && hiPrec == null) {\n    double xa=x - 1.0;\n    double xb=xa - x + 1.0;\n    double tmp=xa * HEX_40000000;\n    double aa=xa + tmp - tmp;\n    double ab=xa - aa;\n    xa=aa;\n    xb=ab;\n    double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n    double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n    for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_QUICK_COEF[i][0];\n      ab=yb + LN_QUICK_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    return ya + yb;\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 242,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 6912,
                        "startLineNumber": 1108,
                        "startColumnNumber": 69,
                        "endLineNumber": 1328,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (x == 0) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  long bits=Double.doubleToLongBits(x);\n  if ((bits & 0x8000000000000000L) != 0 || x != x) {\n    if (x != 0.0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NaN;\n      }\n      return Double.NaN;\n    }\n  }\n  if (x == Double.POSITIVE_INFINITY) {\n    if (hiPrec != null) {\n      hiPrec[0]=Double.POSITIVE_INFINITY;\n    }\n    return Double.POSITIVE_INFINITY;\n  }\n  int exp=(int)(bits >> 52) - 1023;\n  if ((bits & 0x7ff0000000000000L) == 0) {\n    if (x == 0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NEGATIVE_INFINITY;\n      }\n      return Double.NEGATIVE_INFINITY;\n    }\n    bits<<=1;\n    while ((bits & 0x0010000000000000L) == 0) {\n      exp--;\n      bits<<=1;\n    }\n  }\n  if (exp == -1 || exp == 0) {\n    if (x < 1.01 && x > 0.99 && hiPrec == null) {\n      double xa=x - 1.0;\n      double xb=xa - x + 1.0;\n      double tmp=xa * HEX_40000000;\n      double aa=xa + tmp - tmp;\n      double ab=xa - aa;\n      xa=aa;\n      xb=ab;\n      double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n      double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n      for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n        aa=ya * xa;\n        ab=ya * xb + yb * xa + yb * xb;\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n        aa=ya + LN_QUICK_COEF[i][0];\n        ab=yb + LN_QUICK_COEF[i][1];\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n      }\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      return ya + yb;\n    }\n  }\n  double lnm[]=lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n  double epsilon=(bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n  double lnza=0.0;\n  double lnzb=0.0;\n  if (hiPrec != null) {\n    double tmp=epsilon * HEX_40000000;\n    double aa=epsilon + tmp - tmp;\n    double ab=epsilon - aa;\n    double xa=aa;\n    double xb=ab;\n    double numer=bits & 0x3ffffffffffL;\n    double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n    aa=numer - xa * denom - xb * denom;\n    xb+=aa / denom;\n    double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n    double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n    for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_HI_PREC_COEF[i][0];\n      ab=yb + LN_HI_PREC_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    lnza=aa + ab;\n    lnzb=-(lnza - aa - ab);\n  }\n else {\n    lnza=-0.16624882440418567;\n    lnza=lnza * epsilon + 0.19999954120254515;\n    lnza=lnza * epsilon + -0.2499999997677497;\n    lnza=lnza * epsilon + 0.3333333333332802;\n    lnza=lnza * epsilon + -0.5;\n    lnza=lnza * epsilon + 1.0;\n    lnza=lnza * epsilon;\n  }\n  double a=LN_2_A * exp;\n  double b=0.0;\n  double c=a + lnm[0];\n  double d=-(c - a - lnm[0]);\n  a=c;\n  b=b + d;\n  c=a + lnza;\n  d=-(c - a - lnza);\n  a=c;\n  b=b + d;\n  c=a + LN_2_B * exp;\n  d=-(c - a - LN_2_B * exp);\n  a=c;\n  b=b + d;\n  c=a + lnm[1];\n  d=-(c - a - lnm[1]);\n  a=c;\n  b=b + d;\n  c=a + lnzb;\n  d=-(c - a - lnzb);\n  a=c;\n  b=b + d;\n  if (hiPrec != null) {\n    hiPrec[0]=a;\n    hiPrec[1]=b;\n  }\n  return a + b;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 883,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7218,
                        "startLineNumber": 1102,
                        "startColumnNumber": 4,
                        "endLineNumber": 1328,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Internal helper method for natural logarithm function.\n * @param x original argument of the natural logarithm function\n * @param hiPrec extra bits of precision on output (To Be Confirmed)\n * @return log(x)\n */\nprivate static double log(final double x,final double[] hiPrec){\n  if (x == 0) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  long bits=Double.doubleToLongBits(x);\n  if ((bits & 0x8000000000000000L) != 0 || x != x) {\n    if (x != 0.0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NaN;\n      }\n      return Double.NaN;\n    }\n  }\n  if (x == Double.POSITIVE_INFINITY) {\n    if (hiPrec != null) {\n      hiPrec[0]=Double.POSITIVE_INFINITY;\n    }\n    return Double.POSITIVE_INFINITY;\n  }\n  int exp=(int)(bits >> 52) - 1023;\n  if ((bits & 0x7ff0000000000000L) == 0) {\n    if (x == 0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NEGATIVE_INFINITY;\n      }\n      return Double.NEGATIVE_INFINITY;\n    }\n    bits<<=1;\n    while ((bits & 0x0010000000000000L) == 0) {\n      exp--;\n      bits<<=1;\n    }\n  }\n  if (exp == -1 || exp == 0) {\n    if (x < 1.01 && x > 0.99 && hiPrec == null) {\n      double xa=x - 1.0;\n      double xb=xa - x + 1.0;\n      double tmp=xa * HEX_40000000;\n      double aa=xa + tmp - tmp;\n      double ab=xa - aa;\n      xa=aa;\n      xb=ab;\n      double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n      double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n      for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n        aa=ya * xa;\n        ab=ya * xb + yb * xa + yb * xb;\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n        aa=ya + LN_QUICK_COEF[i][0];\n        ab=yb + LN_QUICK_COEF[i][1];\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n      }\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      return ya + yb;\n    }\n  }\n  double lnm[]=lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n  double epsilon=(bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n  double lnza=0.0;\n  double lnzb=0.0;\n  if (hiPrec != null) {\n    double tmp=epsilon * HEX_40000000;\n    double aa=epsilon + tmp - tmp;\n    double ab=epsilon - aa;\n    double xa=aa;\n    double xb=ab;\n    double numer=bits & 0x3ffffffffffL;\n    double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n    aa=numer - xa * denom - xb * denom;\n    xb+=aa / denom;\n    double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n    double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n    for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_HI_PREC_COEF[i][0];\n      ab=yb + LN_HI_PREC_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    lnza=aa + ab;\n    lnzb=-(lnza - aa - ab);\n  }\n else {\n    lnza=-0.16624882440418567;\n    lnza=lnza * epsilon + 0.19999954120254515;\n    lnza=lnza * epsilon + -0.2499999997677497;\n    lnza=lnza * epsilon + 0.3333333333332802;\n    lnza=lnza * epsilon + -0.5;\n    lnza=lnza * epsilon + 1.0;\n    lnza=lnza * epsilon;\n  }\n  double a=LN_2_A * exp;\n  double b=0.0;\n  double c=a + lnm[0];\n  double d=-(c - a - lnm[0]);\n  a=c;\n  b=b + d;\n  c=a + lnza;\n  d=-(c - a - lnza);\n  a=c;\n  b=b + d;\n  c=a + LN_2_B * exp;\n  d=-(c - a - LN_2_B * exp);\n  a=c;\n  b=b + d;\n  c=a + lnm[1];\n  d=-(c - a - lnm[1]);\n  a=c;\n  b=b + d;\n  c=a + lnzb;\n  d=-(c - a - lnzb);\n  a=c;\n  b=b + d;\n  if (hiPrec != null) {\n    hiPrec[0]=a;\n    hiPrec[1]=b;\n  }\n  return a + b;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 899,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 18,
                    "startLineNumber": 1181,
                    "startColumnNumber": 20,
                    "endLineNumber": 1181,
                    "endColumnNumber": 38
                },
                "nodeContext": "yb=aa - ya + ab;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "double"
        },
        {
            "nodeContext": "aa",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 1187,
                "startColumnNumber": 26,
                "endLineNumber": 1187,
                "endColumnNumber": 28
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 17,
                        "startLineNumber": 1187,
                        "startColumnNumber": 26,
                        "endLineNumber": 1187,
                        "endColumnNumber": 43
                    },
                    "nodeContext": "aa * HEX_40000000",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 23,
                        "startLineNumber": 1187,
                        "startColumnNumber": 20,
                        "endLineNumber": 1187,
                        "endColumnNumber": 43
                    },
                    "nodeContext": "tmp=aa * HEX_40000000",
                    "nodeType": "Assignment",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 24,
                        "startLineNumber": 1187,
                        "startColumnNumber": 20,
                        "endLineNumber": 1187,
                        "endColumnNumber": 44
                    },
                    "nodeContext": "tmp=aa * HEX_40000000;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 6,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 640,
                        "startLineNumber": 1174,
                        "startColumnNumber": 68,
                        "endLineNumber": 1190,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n  aa=ya + LN_QUICK_COEF[i][0];\n  ab=yb + LN_QUICK_COEF[i][1];\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 85,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 692,
                        "startLineNumber": 1174,
                        "startColumnNumber": 16,
                        "endLineNumber": 1190,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n  aa=ya + LN_QUICK_COEF[i][0];\n  ab=yb + LN_QUICK_COEF[i][1];\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 100,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1644,
                        "startLineNumber": 1158,
                        "startColumnNumber": 56,
                        "endLineNumber": 1201,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  double xa=x - 1.0;\n  double xb=xa - x + 1.0;\n  double tmp=xa * HEX_40000000;\n  double aa=xa + tmp - tmp;\n  double ab=xa - aa;\n  xa=aa;\n  xb=ab;\n  double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n  double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n  for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    aa=ya + LN_QUICK_COEF[i][0];\n    ab=yb + LN_QUICK_COEF[i][1];\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n  }\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n  return ya + yb;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 220,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1688,
                        "startLineNumber": 1158,
                        "startColumnNumber": 12,
                        "endLineNumber": 1201,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (x < 1.01 && x > 0.99 && hiPrec == null) {\n  double xa=x - 1.0;\n  double xb=xa - x + 1.0;\n  double tmp=xa * HEX_40000000;\n  double aa=xa + tmp - tmp;\n  double ab=xa - aa;\n  xa=aa;\n  xb=ab;\n  double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n  double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n  for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    aa=ya + LN_QUICK_COEF[i][0];\n    ab=yb + LN_QUICK_COEF[i][1];\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n  }\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n  return ya + yb;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 232,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1712,
                        "startLineNumber": 1157,
                        "startColumnNumber": 35,
                        "endLineNumber": 1202,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (x < 1.01 && x > 0.99 && hiPrec == null) {\n    double xa=x - 1.0;\n    double xb=xa - x + 1.0;\n    double tmp=xa * HEX_40000000;\n    double aa=xa + tmp - tmp;\n    double ab=xa - aa;\n    xa=aa;\n    xb=ab;\n    double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n    double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n    for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_QUICK_COEF[i][0];\n      ab=yb + LN_QUICK_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    return ya + yb;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 233,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1739,
                        "startLineNumber": 1157,
                        "startColumnNumber": 8,
                        "endLineNumber": 1202,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (exp == -1 || exp == 0) {\n  if (x < 1.01 && x > 0.99 && hiPrec == null) {\n    double xa=x - 1.0;\n    double xb=xa - x + 1.0;\n    double tmp=xa * HEX_40000000;\n    double aa=xa + tmp - tmp;\n    double ab=xa - aa;\n    xa=aa;\n    xb=ab;\n    double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n    double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n    for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_QUICK_COEF[i][0];\n      ab=yb + LN_QUICK_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    return ya + yb;\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 242,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 6912,
                        "startLineNumber": 1108,
                        "startColumnNumber": 69,
                        "endLineNumber": 1328,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (x == 0) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  long bits=Double.doubleToLongBits(x);\n  if ((bits & 0x8000000000000000L) != 0 || x != x) {\n    if (x != 0.0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NaN;\n      }\n      return Double.NaN;\n    }\n  }\n  if (x == Double.POSITIVE_INFINITY) {\n    if (hiPrec != null) {\n      hiPrec[0]=Double.POSITIVE_INFINITY;\n    }\n    return Double.POSITIVE_INFINITY;\n  }\n  int exp=(int)(bits >> 52) - 1023;\n  if ((bits & 0x7ff0000000000000L) == 0) {\n    if (x == 0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NEGATIVE_INFINITY;\n      }\n      return Double.NEGATIVE_INFINITY;\n    }\n    bits<<=1;\n    while ((bits & 0x0010000000000000L) == 0) {\n      exp--;\n      bits<<=1;\n    }\n  }\n  if (exp == -1 || exp == 0) {\n    if (x < 1.01 && x > 0.99 && hiPrec == null) {\n      double xa=x - 1.0;\n      double xb=xa - x + 1.0;\n      double tmp=xa * HEX_40000000;\n      double aa=xa + tmp - tmp;\n      double ab=xa - aa;\n      xa=aa;\n      xb=ab;\n      double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n      double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n      for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n        aa=ya * xa;\n        ab=ya * xb + yb * xa + yb * xb;\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n        aa=ya + LN_QUICK_COEF[i][0];\n        ab=yb + LN_QUICK_COEF[i][1];\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n      }\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      return ya + yb;\n    }\n  }\n  double lnm[]=lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n  double epsilon=(bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n  double lnza=0.0;\n  double lnzb=0.0;\n  if (hiPrec != null) {\n    double tmp=epsilon * HEX_40000000;\n    double aa=epsilon + tmp - tmp;\n    double ab=epsilon - aa;\n    double xa=aa;\n    double xb=ab;\n    double numer=bits & 0x3ffffffffffL;\n    double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n    aa=numer - xa * denom - xb * denom;\n    xb+=aa / denom;\n    double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n    double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n    for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_HI_PREC_COEF[i][0];\n      ab=yb + LN_HI_PREC_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    lnza=aa + ab;\n    lnzb=-(lnza - aa - ab);\n  }\n else {\n    lnza=-0.16624882440418567;\n    lnza=lnza * epsilon + 0.19999954120254515;\n    lnza=lnza * epsilon + -0.2499999997677497;\n    lnza=lnza * epsilon + 0.3333333333332802;\n    lnza=lnza * epsilon + -0.5;\n    lnza=lnza * epsilon + 1.0;\n    lnza=lnza * epsilon;\n  }\n  double a=LN_2_A * exp;\n  double b=0.0;\n  double c=a + lnm[0];\n  double d=-(c - a - lnm[0]);\n  a=c;\n  b=b + d;\n  c=a + lnza;\n  d=-(c - a - lnza);\n  a=c;\n  b=b + d;\n  c=a + LN_2_B * exp;\n  d=-(c - a - LN_2_B * exp);\n  a=c;\n  b=b + d;\n  c=a + lnm[1];\n  d=-(c - a - lnm[1]);\n  a=c;\n  b=b + d;\n  c=a + lnzb;\n  d=-(c - a - lnzb);\n  a=c;\n  b=b + d;\n  if (hiPrec != null) {\n    hiPrec[0]=a;\n    hiPrec[1]=b;\n  }\n  return a + b;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 883,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7218,
                        "startLineNumber": 1102,
                        "startColumnNumber": 4,
                        "endLineNumber": 1328,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Internal helper method for natural logarithm function.\n * @param x original argument of the natural logarithm function\n * @param hiPrec extra bits of precision on output (To Be Confirmed)\n * @return log(x)\n */\nprivate static double log(final double x,final double[] hiPrec){\n  if (x == 0) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  long bits=Double.doubleToLongBits(x);\n  if ((bits & 0x8000000000000000L) != 0 || x != x) {\n    if (x != 0.0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NaN;\n      }\n      return Double.NaN;\n    }\n  }\n  if (x == Double.POSITIVE_INFINITY) {\n    if (hiPrec != null) {\n      hiPrec[0]=Double.POSITIVE_INFINITY;\n    }\n    return Double.POSITIVE_INFINITY;\n  }\n  int exp=(int)(bits >> 52) - 1023;\n  if ((bits & 0x7ff0000000000000L) == 0) {\n    if (x == 0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NEGATIVE_INFINITY;\n      }\n      return Double.NEGATIVE_INFINITY;\n    }\n    bits<<=1;\n    while ((bits & 0x0010000000000000L) == 0) {\n      exp--;\n      bits<<=1;\n    }\n  }\n  if (exp == -1 || exp == 0) {\n    if (x < 1.01 && x > 0.99 && hiPrec == null) {\n      double xa=x - 1.0;\n      double xb=xa - x + 1.0;\n      double tmp=xa * HEX_40000000;\n      double aa=xa + tmp - tmp;\n      double ab=xa - aa;\n      xa=aa;\n      xb=ab;\n      double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n      double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n      for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n        aa=ya * xa;\n        ab=ya * xb + yb * xa + yb * xb;\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n        aa=ya + LN_QUICK_COEF[i][0];\n        ab=yb + LN_QUICK_COEF[i][1];\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n      }\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      return ya + yb;\n    }\n  }\n  double lnm[]=lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n  double epsilon=(bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n  double lnza=0.0;\n  double lnzb=0.0;\n  if (hiPrec != null) {\n    double tmp=epsilon * HEX_40000000;\n    double aa=epsilon + tmp - tmp;\n    double ab=epsilon - aa;\n    double xa=aa;\n    double xb=ab;\n    double numer=bits & 0x3ffffffffffL;\n    double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n    aa=numer - xa * denom - xb * denom;\n    xb+=aa / denom;\n    double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n    double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n    for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_HI_PREC_COEF[i][0];\n      ab=yb + LN_HI_PREC_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    lnza=aa + ab;\n    lnzb=-(lnza - aa - ab);\n  }\n else {\n    lnza=-0.16624882440418567;\n    lnza=lnza * epsilon + 0.19999954120254515;\n    lnza=lnza * epsilon + -0.2499999997677497;\n    lnza=lnza * epsilon + 0.3333333333332802;\n    lnza=lnza * epsilon + -0.5;\n    lnza=lnza * epsilon + 1.0;\n    lnza=lnza * epsilon;\n  }\n  double a=LN_2_A * exp;\n  double b=0.0;\n  double c=a + lnm[0];\n  double d=-(c - a - lnm[0]);\n  a=c;\n  b=b + d;\n  c=a + lnza;\n  d=-(c - a - lnza);\n  a=c;\n  b=b + d;\n  c=a + LN_2_B * exp;\n  d=-(c - a - LN_2_B * exp);\n  a=c;\n  b=b + d;\n  c=a + lnm[1];\n  d=-(c - a - lnm[1]);\n  a=c;\n  b=b + d;\n  c=a + lnzb;\n  d=-(c - a - lnzb);\n  a=c;\n  b=b + d;\n  if (hiPrec != null) {\n    hiPrec[0]=a;\n    hiPrec[1]=b;\n  }\n  return a + b;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 899,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 24,
                    "startLineNumber": 1187,
                    "startColumnNumber": 20,
                    "endLineNumber": 1187,
                    "endColumnNumber": 44
                },
                "nodeContext": "tmp=aa * HEX_40000000;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 6,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "double"
        },
        {
            "nodeContext": "aa",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 1188,
                "startColumnNumber": 25,
                "endLineNumber": 1188,
                "endColumnNumber": 27
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 8,
                        "startLineNumber": 1188,
                        "startColumnNumber": 25,
                        "endLineNumber": 1188,
                        "endColumnNumber": 33
                    },
                    "nodeContext": "aa + tmp",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 14,
                        "startLineNumber": 1188,
                        "startColumnNumber": 25,
                        "endLineNumber": 1188,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "aa + tmp - tmp",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 19,
                        "startLineNumber": 1188,
                        "startColumnNumber": 20,
                        "endLineNumber": 1188,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "ya=aa + tmp - tmp",
                    "nodeType": "Assignment",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 20,
                        "startLineNumber": 1188,
                        "startColumnNumber": 20,
                        "endLineNumber": 1188,
                        "endColumnNumber": 40
                    },
                    "nodeContext": "ya=aa + tmp - tmp;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 640,
                        "startLineNumber": 1174,
                        "startColumnNumber": 68,
                        "endLineNumber": 1190,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n  aa=ya + LN_QUICK_COEF[i][0];\n  ab=yb + LN_QUICK_COEF[i][1];\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 85,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 692,
                        "startLineNumber": 1174,
                        "startColumnNumber": 16,
                        "endLineNumber": 1190,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n  aa=ya + LN_QUICK_COEF[i][0];\n  ab=yb + LN_QUICK_COEF[i][1];\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 100,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1644,
                        "startLineNumber": 1158,
                        "startColumnNumber": 56,
                        "endLineNumber": 1201,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  double xa=x - 1.0;\n  double xb=xa - x + 1.0;\n  double tmp=xa * HEX_40000000;\n  double aa=xa + tmp - tmp;\n  double ab=xa - aa;\n  xa=aa;\n  xb=ab;\n  double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n  double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n  for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    aa=ya + LN_QUICK_COEF[i][0];\n    ab=yb + LN_QUICK_COEF[i][1];\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n  }\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n  return ya + yb;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 220,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1688,
                        "startLineNumber": 1158,
                        "startColumnNumber": 12,
                        "endLineNumber": 1201,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (x < 1.01 && x > 0.99 && hiPrec == null) {\n  double xa=x - 1.0;\n  double xb=xa - x + 1.0;\n  double tmp=xa * HEX_40000000;\n  double aa=xa + tmp - tmp;\n  double ab=xa - aa;\n  xa=aa;\n  xb=ab;\n  double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n  double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n  for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    aa=ya + LN_QUICK_COEF[i][0];\n    ab=yb + LN_QUICK_COEF[i][1];\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n  }\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n  return ya + yb;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 232,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1712,
                        "startLineNumber": 1157,
                        "startColumnNumber": 35,
                        "endLineNumber": 1202,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (x < 1.01 && x > 0.99 && hiPrec == null) {\n    double xa=x - 1.0;\n    double xb=xa - x + 1.0;\n    double tmp=xa * HEX_40000000;\n    double aa=xa + tmp - tmp;\n    double ab=xa - aa;\n    xa=aa;\n    xb=ab;\n    double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n    double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n    for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_QUICK_COEF[i][0];\n      ab=yb + LN_QUICK_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    return ya + yb;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 233,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1739,
                        "startLineNumber": 1157,
                        "startColumnNumber": 8,
                        "endLineNumber": 1202,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (exp == -1 || exp == 0) {\n  if (x < 1.01 && x > 0.99 && hiPrec == null) {\n    double xa=x - 1.0;\n    double xb=xa - x + 1.0;\n    double tmp=xa * HEX_40000000;\n    double aa=xa + tmp - tmp;\n    double ab=xa - aa;\n    xa=aa;\n    xb=ab;\n    double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n    double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n    for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_QUICK_COEF[i][0];\n      ab=yb + LN_QUICK_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    return ya + yb;\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 242,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 6912,
                        "startLineNumber": 1108,
                        "startColumnNumber": 69,
                        "endLineNumber": 1328,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (x == 0) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  long bits=Double.doubleToLongBits(x);\n  if ((bits & 0x8000000000000000L) != 0 || x != x) {\n    if (x != 0.0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NaN;\n      }\n      return Double.NaN;\n    }\n  }\n  if (x == Double.POSITIVE_INFINITY) {\n    if (hiPrec != null) {\n      hiPrec[0]=Double.POSITIVE_INFINITY;\n    }\n    return Double.POSITIVE_INFINITY;\n  }\n  int exp=(int)(bits >> 52) - 1023;\n  if ((bits & 0x7ff0000000000000L) == 0) {\n    if (x == 0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NEGATIVE_INFINITY;\n      }\n      return Double.NEGATIVE_INFINITY;\n    }\n    bits<<=1;\n    while ((bits & 0x0010000000000000L) == 0) {\n      exp--;\n      bits<<=1;\n    }\n  }\n  if (exp == -1 || exp == 0) {\n    if (x < 1.01 && x > 0.99 && hiPrec == null) {\n      double xa=x - 1.0;\n      double xb=xa - x + 1.0;\n      double tmp=xa * HEX_40000000;\n      double aa=xa + tmp - tmp;\n      double ab=xa - aa;\n      xa=aa;\n      xb=ab;\n      double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n      double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n      for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n        aa=ya * xa;\n        ab=ya * xb + yb * xa + yb * xb;\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n        aa=ya + LN_QUICK_COEF[i][0];\n        ab=yb + LN_QUICK_COEF[i][1];\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n      }\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      return ya + yb;\n    }\n  }\n  double lnm[]=lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n  double epsilon=(bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n  double lnza=0.0;\n  double lnzb=0.0;\n  if (hiPrec != null) {\n    double tmp=epsilon * HEX_40000000;\n    double aa=epsilon + tmp - tmp;\n    double ab=epsilon - aa;\n    double xa=aa;\n    double xb=ab;\n    double numer=bits & 0x3ffffffffffL;\n    double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n    aa=numer - xa * denom - xb * denom;\n    xb+=aa / denom;\n    double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n    double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n    for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_HI_PREC_COEF[i][0];\n      ab=yb + LN_HI_PREC_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    lnza=aa + ab;\n    lnzb=-(lnza - aa - ab);\n  }\n else {\n    lnza=-0.16624882440418567;\n    lnza=lnza * epsilon + 0.19999954120254515;\n    lnza=lnza * epsilon + -0.2499999997677497;\n    lnza=lnza * epsilon + 0.3333333333332802;\n    lnza=lnza * epsilon + -0.5;\n    lnza=lnza * epsilon + 1.0;\n    lnza=lnza * epsilon;\n  }\n  double a=LN_2_A * exp;\n  double b=0.0;\n  double c=a + lnm[0];\n  double d=-(c - a - lnm[0]);\n  a=c;\n  b=b + d;\n  c=a + lnza;\n  d=-(c - a - lnza);\n  a=c;\n  b=b + d;\n  c=a + LN_2_B * exp;\n  d=-(c - a - LN_2_B * exp);\n  a=c;\n  b=b + d;\n  c=a + lnm[1];\n  d=-(c - a - lnm[1]);\n  a=c;\n  b=b + d;\n  c=a + lnzb;\n  d=-(c - a - lnzb);\n  a=c;\n  b=b + d;\n  if (hiPrec != null) {\n    hiPrec[0]=a;\n    hiPrec[1]=b;\n  }\n  return a + b;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 883,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7218,
                        "startLineNumber": 1102,
                        "startColumnNumber": 4,
                        "endLineNumber": 1328,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Internal helper method for natural logarithm function.\n * @param x original argument of the natural logarithm function\n * @param hiPrec extra bits of precision on output (To Be Confirmed)\n * @return log(x)\n */\nprivate static double log(final double x,final double[] hiPrec){\n  if (x == 0) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  long bits=Double.doubleToLongBits(x);\n  if ((bits & 0x8000000000000000L) != 0 || x != x) {\n    if (x != 0.0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NaN;\n      }\n      return Double.NaN;\n    }\n  }\n  if (x == Double.POSITIVE_INFINITY) {\n    if (hiPrec != null) {\n      hiPrec[0]=Double.POSITIVE_INFINITY;\n    }\n    return Double.POSITIVE_INFINITY;\n  }\n  int exp=(int)(bits >> 52) - 1023;\n  if ((bits & 0x7ff0000000000000L) == 0) {\n    if (x == 0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NEGATIVE_INFINITY;\n      }\n      return Double.NEGATIVE_INFINITY;\n    }\n    bits<<=1;\n    while ((bits & 0x0010000000000000L) == 0) {\n      exp--;\n      bits<<=1;\n    }\n  }\n  if (exp == -1 || exp == 0) {\n    if (x < 1.01 && x > 0.99 && hiPrec == null) {\n      double xa=x - 1.0;\n      double xb=xa - x + 1.0;\n      double tmp=xa * HEX_40000000;\n      double aa=xa + tmp - tmp;\n      double ab=xa - aa;\n      xa=aa;\n      xb=ab;\n      double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n      double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n      for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n        aa=ya * xa;\n        ab=ya * xb + yb * xa + yb * xb;\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n        aa=ya + LN_QUICK_COEF[i][0];\n        ab=yb + LN_QUICK_COEF[i][1];\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n      }\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      return ya + yb;\n    }\n  }\n  double lnm[]=lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n  double epsilon=(bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n  double lnza=0.0;\n  double lnzb=0.0;\n  if (hiPrec != null) {\n    double tmp=epsilon * HEX_40000000;\n    double aa=epsilon + tmp - tmp;\n    double ab=epsilon - aa;\n    double xa=aa;\n    double xb=ab;\n    double numer=bits & 0x3ffffffffffL;\n    double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n    aa=numer - xa * denom - xb * denom;\n    xb+=aa / denom;\n    double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n    double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n    for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_HI_PREC_COEF[i][0];\n      ab=yb + LN_HI_PREC_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    lnza=aa + ab;\n    lnzb=-(lnza - aa - ab);\n  }\n else {\n    lnza=-0.16624882440418567;\n    lnza=lnza * epsilon + 0.19999954120254515;\n    lnza=lnza * epsilon + -0.2499999997677497;\n    lnza=lnza * epsilon + 0.3333333333332802;\n    lnza=lnza * epsilon + -0.5;\n    lnza=lnza * epsilon + 1.0;\n    lnza=lnza * epsilon;\n  }\n  double a=LN_2_A * exp;\n  double b=0.0;\n  double c=a + lnm[0];\n  double d=-(c - a - lnm[0]);\n  a=c;\n  b=b + d;\n  c=a + lnza;\n  d=-(c - a - lnza);\n  a=c;\n  b=b + d;\n  c=a + LN_2_B * exp;\n  d=-(c - a - LN_2_B * exp);\n  a=c;\n  b=b + d;\n  c=a + lnm[1];\n  d=-(c - a - lnm[1]);\n  a=c;\n  b=b + d;\n  c=a + lnzb;\n  d=-(c - a - lnzb);\n  a=c;\n  b=b + d;\n  if (hiPrec != null) {\n    hiPrec[0]=a;\n    hiPrec[1]=b;\n  }\n  return a + b;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 899,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 20,
                    "startLineNumber": 1188,
                    "startColumnNumber": 20,
                    "endLineNumber": 1188,
                    "endColumnNumber": 40
                },
                "nodeContext": "ya=aa + tmp - tmp;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "double"
        },
        {
            "nodeContext": "aa",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 1189,
                "startColumnNumber": 25,
                "endLineNumber": 1189,
                "endColumnNumber": 27
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 1189,
                        "startColumnNumber": 25,
                        "endLineNumber": 1189,
                        "endColumnNumber": 32
                    },
                    "nodeContext": "aa - ya",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 12,
                        "startLineNumber": 1189,
                        "startColumnNumber": 25,
                        "endLineNumber": 1189,
                        "endColumnNumber": 37
                    },
                    "nodeContext": "aa - ya + ab",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 17,
                        "startLineNumber": 1189,
                        "startColumnNumber": 20,
                        "endLineNumber": 1189,
                        "endColumnNumber": 37
                    },
                    "nodeContext": "yb=aa - ya + ab",
                    "nodeType": "Assignment",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 18,
                        "startLineNumber": 1189,
                        "startColumnNumber": 20,
                        "endLineNumber": 1189,
                        "endColumnNumber": 38
                    },
                    "nodeContext": "yb=aa - ya + ab;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 640,
                        "startLineNumber": 1174,
                        "startColumnNumber": 68,
                        "endLineNumber": 1190,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n  aa=ya + LN_QUICK_COEF[i][0];\n  ab=yb + LN_QUICK_COEF[i][1];\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 85,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 692,
                        "startLineNumber": 1174,
                        "startColumnNumber": 16,
                        "endLineNumber": 1190,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n  aa=ya + LN_QUICK_COEF[i][0];\n  ab=yb + LN_QUICK_COEF[i][1];\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 100,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1644,
                        "startLineNumber": 1158,
                        "startColumnNumber": 56,
                        "endLineNumber": 1201,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  double xa=x - 1.0;\n  double xb=xa - x + 1.0;\n  double tmp=xa * HEX_40000000;\n  double aa=xa + tmp - tmp;\n  double ab=xa - aa;\n  xa=aa;\n  xb=ab;\n  double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n  double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n  for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    aa=ya + LN_QUICK_COEF[i][0];\n    ab=yb + LN_QUICK_COEF[i][1];\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n  }\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n  return ya + yb;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 220,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1688,
                        "startLineNumber": 1158,
                        "startColumnNumber": 12,
                        "endLineNumber": 1201,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (x < 1.01 && x > 0.99 && hiPrec == null) {\n  double xa=x - 1.0;\n  double xb=xa - x + 1.0;\n  double tmp=xa * HEX_40000000;\n  double aa=xa + tmp - tmp;\n  double ab=xa - aa;\n  xa=aa;\n  xb=ab;\n  double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n  double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n  for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    aa=ya + LN_QUICK_COEF[i][0];\n    ab=yb + LN_QUICK_COEF[i][1];\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n  }\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n  return ya + yb;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 232,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1712,
                        "startLineNumber": 1157,
                        "startColumnNumber": 35,
                        "endLineNumber": 1202,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (x < 1.01 && x > 0.99 && hiPrec == null) {\n    double xa=x - 1.0;\n    double xb=xa - x + 1.0;\n    double tmp=xa * HEX_40000000;\n    double aa=xa + tmp - tmp;\n    double ab=xa - aa;\n    xa=aa;\n    xb=ab;\n    double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n    double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n    for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_QUICK_COEF[i][0];\n      ab=yb + LN_QUICK_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    return ya + yb;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 233,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1739,
                        "startLineNumber": 1157,
                        "startColumnNumber": 8,
                        "endLineNumber": 1202,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (exp == -1 || exp == 0) {\n  if (x < 1.01 && x > 0.99 && hiPrec == null) {\n    double xa=x - 1.0;\n    double xb=xa - x + 1.0;\n    double tmp=xa * HEX_40000000;\n    double aa=xa + tmp - tmp;\n    double ab=xa - aa;\n    xa=aa;\n    xb=ab;\n    double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n    double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n    for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_QUICK_COEF[i][0];\n      ab=yb + LN_QUICK_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    return ya + yb;\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 242,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 6912,
                        "startLineNumber": 1108,
                        "startColumnNumber": 69,
                        "endLineNumber": 1328,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (x == 0) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  long bits=Double.doubleToLongBits(x);\n  if ((bits & 0x8000000000000000L) != 0 || x != x) {\n    if (x != 0.0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NaN;\n      }\n      return Double.NaN;\n    }\n  }\n  if (x == Double.POSITIVE_INFINITY) {\n    if (hiPrec != null) {\n      hiPrec[0]=Double.POSITIVE_INFINITY;\n    }\n    return Double.POSITIVE_INFINITY;\n  }\n  int exp=(int)(bits >> 52) - 1023;\n  if ((bits & 0x7ff0000000000000L) == 0) {\n    if (x == 0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NEGATIVE_INFINITY;\n      }\n      return Double.NEGATIVE_INFINITY;\n    }\n    bits<<=1;\n    while ((bits & 0x0010000000000000L) == 0) {\n      exp--;\n      bits<<=1;\n    }\n  }\n  if (exp == -1 || exp == 0) {\n    if (x < 1.01 && x > 0.99 && hiPrec == null) {\n      double xa=x - 1.0;\n      double xb=xa - x + 1.0;\n      double tmp=xa * HEX_40000000;\n      double aa=xa + tmp - tmp;\n      double ab=xa - aa;\n      xa=aa;\n      xb=ab;\n      double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n      double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n      for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n        aa=ya * xa;\n        ab=ya * xb + yb * xa + yb * xb;\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n        aa=ya + LN_QUICK_COEF[i][0];\n        ab=yb + LN_QUICK_COEF[i][1];\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n      }\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      return ya + yb;\n    }\n  }\n  double lnm[]=lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n  double epsilon=(bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n  double lnza=0.0;\n  double lnzb=0.0;\n  if (hiPrec != null) {\n    double tmp=epsilon * HEX_40000000;\n    double aa=epsilon + tmp - tmp;\n    double ab=epsilon - aa;\n    double xa=aa;\n    double xb=ab;\n    double numer=bits & 0x3ffffffffffL;\n    double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n    aa=numer - xa * denom - xb * denom;\n    xb+=aa / denom;\n    double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n    double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n    for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_HI_PREC_COEF[i][0];\n      ab=yb + LN_HI_PREC_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    lnza=aa + ab;\n    lnzb=-(lnza - aa - ab);\n  }\n else {\n    lnza=-0.16624882440418567;\n    lnza=lnza * epsilon + 0.19999954120254515;\n    lnza=lnza * epsilon + -0.2499999997677497;\n    lnza=lnza * epsilon + 0.3333333333332802;\n    lnza=lnza * epsilon + -0.5;\n    lnza=lnza * epsilon + 1.0;\n    lnza=lnza * epsilon;\n  }\n  double a=LN_2_A * exp;\n  double b=0.0;\n  double c=a + lnm[0];\n  double d=-(c - a - lnm[0]);\n  a=c;\n  b=b + d;\n  c=a + lnza;\n  d=-(c - a - lnza);\n  a=c;\n  b=b + d;\n  c=a + LN_2_B * exp;\n  d=-(c - a - LN_2_B * exp);\n  a=c;\n  b=b + d;\n  c=a + lnm[1];\n  d=-(c - a - lnm[1]);\n  a=c;\n  b=b + d;\n  c=a + lnzb;\n  d=-(c - a - lnzb);\n  a=c;\n  b=b + d;\n  if (hiPrec != null) {\n    hiPrec[0]=a;\n    hiPrec[1]=b;\n  }\n  return a + b;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 883,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7218,
                        "startLineNumber": 1102,
                        "startColumnNumber": 4,
                        "endLineNumber": 1328,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Internal helper method for natural logarithm function.\n * @param x original argument of the natural logarithm function\n * @param hiPrec extra bits of precision on output (To Be Confirmed)\n * @return log(x)\n */\nprivate static double log(final double x,final double[] hiPrec){\n  if (x == 0) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  long bits=Double.doubleToLongBits(x);\n  if ((bits & 0x8000000000000000L) != 0 || x != x) {\n    if (x != 0.0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NaN;\n      }\n      return Double.NaN;\n    }\n  }\n  if (x == Double.POSITIVE_INFINITY) {\n    if (hiPrec != null) {\n      hiPrec[0]=Double.POSITIVE_INFINITY;\n    }\n    return Double.POSITIVE_INFINITY;\n  }\n  int exp=(int)(bits >> 52) - 1023;\n  if ((bits & 0x7ff0000000000000L) == 0) {\n    if (x == 0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NEGATIVE_INFINITY;\n      }\n      return Double.NEGATIVE_INFINITY;\n    }\n    bits<<=1;\n    while ((bits & 0x0010000000000000L) == 0) {\n      exp--;\n      bits<<=1;\n    }\n  }\n  if (exp == -1 || exp == 0) {\n    if (x < 1.01 && x > 0.99 && hiPrec == null) {\n      double xa=x - 1.0;\n      double xb=xa - x + 1.0;\n      double tmp=xa * HEX_40000000;\n      double aa=xa + tmp - tmp;\n      double ab=xa - aa;\n      xa=aa;\n      xb=ab;\n      double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n      double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n      for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n        aa=ya * xa;\n        ab=ya * xb + yb * xa + yb * xb;\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n        aa=ya + LN_QUICK_COEF[i][0];\n        ab=yb + LN_QUICK_COEF[i][1];\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n      }\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      return ya + yb;\n    }\n  }\n  double lnm[]=lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n  double epsilon=(bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n  double lnza=0.0;\n  double lnzb=0.0;\n  if (hiPrec != null) {\n    double tmp=epsilon * HEX_40000000;\n    double aa=epsilon + tmp - tmp;\n    double ab=epsilon - aa;\n    double xa=aa;\n    double xb=ab;\n    double numer=bits & 0x3ffffffffffL;\n    double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n    aa=numer - xa * denom - xb * denom;\n    xb+=aa / denom;\n    double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n    double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n    for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_HI_PREC_COEF[i][0];\n      ab=yb + LN_HI_PREC_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    lnza=aa + ab;\n    lnzb=-(lnza - aa - ab);\n  }\n else {\n    lnza=-0.16624882440418567;\n    lnza=lnza * epsilon + 0.19999954120254515;\n    lnza=lnza * epsilon + -0.2499999997677497;\n    lnza=lnza * epsilon + 0.3333333333332802;\n    lnza=lnza * epsilon + -0.5;\n    lnza=lnza * epsilon + 1.0;\n    lnza=lnza * epsilon;\n  }\n  double a=LN_2_A * exp;\n  double b=0.0;\n  double c=a + lnm[0];\n  double d=-(c - a - lnm[0]);\n  a=c;\n  b=b + d;\n  c=a + lnza;\n  d=-(c - a - lnza);\n  a=c;\n  b=b + d;\n  c=a + LN_2_B * exp;\n  d=-(c - a - LN_2_B * exp);\n  a=c;\n  b=b + d;\n  c=a + lnm[1];\n  d=-(c - a - lnm[1]);\n  a=c;\n  b=b + d;\n  c=a + lnzb;\n  d=-(c - a - lnzb);\n  a=c;\n  b=b + d;\n  if (hiPrec != null) {\n    hiPrec[0]=a;\n    hiPrec[1]=b;\n  }\n  return a + b;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 899,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 18,
                    "startLineNumber": 1189,
                    "startColumnNumber": 20,
                    "endLineNumber": 1189,
                    "endColumnNumber": 38
                },
                "nodeContext": "yb=aa - ya + ab;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "double"
        },
        {
            "nodeContext": "aa",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 1196,
                "startColumnNumber": 22,
                "endLineNumber": 1196,
                "endColumnNumber": 24
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 17,
                        "startLineNumber": 1196,
                        "startColumnNumber": 22,
                        "endLineNumber": 1196,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "aa * HEX_40000000",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 23,
                        "startLineNumber": 1196,
                        "startColumnNumber": 16,
                        "endLineNumber": 1196,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "tmp=aa * HEX_40000000",
                    "nodeType": "Assignment",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 24,
                        "startLineNumber": 1196,
                        "startColumnNumber": 16,
                        "endLineNumber": 1196,
                        "endColumnNumber": 40
                    },
                    "nodeContext": "tmp=aa * HEX_40000000;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 6,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1644,
                        "startLineNumber": 1158,
                        "startColumnNumber": 56,
                        "endLineNumber": 1201,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  double xa=x - 1.0;\n  double xb=xa - x + 1.0;\n  double tmp=xa * HEX_40000000;\n  double aa=xa + tmp - tmp;\n  double ab=xa - aa;\n  xa=aa;\n  xb=ab;\n  double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n  double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n  for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    aa=ya + LN_QUICK_COEF[i][0];\n    ab=yb + LN_QUICK_COEF[i][1];\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n  }\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n  return ya + yb;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 220,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1688,
                        "startLineNumber": 1158,
                        "startColumnNumber": 12,
                        "endLineNumber": 1201,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (x < 1.01 && x > 0.99 && hiPrec == null) {\n  double xa=x - 1.0;\n  double xb=xa - x + 1.0;\n  double tmp=xa * HEX_40000000;\n  double aa=xa + tmp - tmp;\n  double ab=xa - aa;\n  xa=aa;\n  xb=ab;\n  double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n  double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n  for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    aa=ya + LN_QUICK_COEF[i][0];\n    ab=yb + LN_QUICK_COEF[i][1];\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n  }\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n  return ya + yb;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 232,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1712,
                        "startLineNumber": 1157,
                        "startColumnNumber": 35,
                        "endLineNumber": 1202,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (x < 1.01 && x > 0.99 && hiPrec == null) {\n    double xa=x - 1.0;\n    double xb=xa - x + 1.0;\n    double tmp=xa * HEX_40000000;\n    double aa=xa + tmp - tmp;\n    double ab=xa - aa;\n    xa=aa;\n    xb=ab;\n    double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n    double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n    for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_QUICK_COEF[i][0];\n      ab=yb + LN_QUICK_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    return ya + yb;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 233,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1739,
                        "startLineNumber": 1157,
                        "startColumnNumber": 8,
                        "endLineNumber": 1202,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (exp == -1 || exp == 0) {\n  if (x < 1.01 && x > 0.99 && hiPrec == null) {\n    double xa=x - 1.0;\n    double xb=xa - x + 1.0;\n    double tmp=xa * HEX_40000000;\n    double aa=xa + tmp - tmp;\n    double ab=xa - aa;\n    xa=aa;\n    xb=ab;\n    double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n    double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n    for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_QUICK_COEF[i][0];\n      ab=yb + LN_QUICK_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    return ya + yb;\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 242,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 6912,
                        "startLineNumber": 1108,
                        "startColumnNumber": 69,
                        "endLineNumber": 1328,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (x == 0) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  long bits=Double.doubleToLongBits(x);\n  if ((bits & 0x8000000000000000L) != 0 || x != x) {\n    if (x != 0.0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NaN;\n      }\n      return Double.NaN;\n    }\n  }\n  if (x == Double.POSITIVE_INFINITY) {\n    if (hiPrec != null) {\n      hiPrec[0]=Double.POSITIVE_INFINITY;\n    }\n    return Double.POSITIVE_INFINITY;\n  }\n  int exp=(int)(bits >> 52) - 1023;\n  if ((bits & 0x7ff0000000000000L) == 0) {\n    if (x == 0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NEGATIVE_INFINITY;\n      }\n      return Double.NEGATIVE_INFINITY;\n    }\n    bits<<=1;\n    while ((bits & 0x0010000000000000L) == 0) {\n      exp--;\n      bits<<=1;\n    }\n  }\n  if (exp == -1 || exp == 0) {\n    if (x < 1.01 && x > 0.99 && hiPrec == null) {\n      double xa=x - 1.0;\n      double xb=xa - x + 1.0;\n      double tmp=xa * HEX_40000000;\n      double aa=xa + tmp - tmp;\n      double ab=xa - aa;\n      xa=aa;\n      xb=ab;\n      double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n      double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n      for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n        aa=ya * xa;\n        ab=ya * xb + yb * xa + yb * xb;\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n        aa=ya + LN_QUICK_COEF[i][0];\n        ab=yb + LN_QUICK_COEF[i][1];\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n      }\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      return ya + yb;\n    }\n  }\n  double lnm[]=lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n  double epsilon=(bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n  double lnza=0.0;\n  double lnzb=0.0;\n  if (hiPrec != null) {\n    double tmp=epsilon * HEX_40000000;\n    double aa=epsilon + tmp - tmp;\n    double ab=epsilon - aa;\n    double xa=aa;\n    double xb=ab;\n    double numer=bits & 0x3ffffffffffL;\n    double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n    aa=numer - xa * denom - xb * denom;\n    xb+=aa / denom;\n    double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n    double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n    for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_HI_PREC_COEF[i][0];\n      ab=yb + LN_HI_PREC_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    lnza=aa + ab;\n    lnzb=-(lnza - aa - ab);\n  }\n else {\n    lnza=-0.16624882440418567;\n    lnza=lnza * epsilon + 0.19999954120254515;\n    lnza=lnza * epsilon + -0.2499999997677497;\n    lnza=lnza * epsilon + 0.3333333333332802;\n    lnza=lnza * epsilon + -0.5;\n    lnza=lnza * epsilon + 1.0;\n    lnza=lnza * epsilon;\n  }\n  double a=LN_2_A * exp;\n  double b=0.0;\n  double c=a + lnm[0];\n  double d=-(c - a - lnm[0]);\n  a=c;\n  b=b + d;\n  c=a + lnza;\n  d=-(c - a - lnza);\n  a=c;\n  b=b + d;\n  c=a + LN_2_B * exp;\n  d=-(c - a - LN_2_B * exp);\n  a=c;\n  b=b + d;\n  c=a + lnm[1];\n  d=-(c - a - lnm[1]);\n  a=c;\n  b=b + d;\n  c=a + lnzb;\n  d=-(c - a - lnzb);\n  a=c;\n  b=b + d;\n  if (hiPrec != null) {\n    hiPrec[0]=a;\n    hiPrec[1]=b;\n  }\n  return a + b;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 883,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7218,
                        "startLineNumber": 1102,
                        "startColumnNumber": 4,
                        "endLineNumber": 1328,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Internal helper method for natural logarithm function.\n * @param x original argument of the natural logarithm function\n * @param hiPrec extra bits of precision on output (To Be Confirmed)\n * @return log(x)\n */\nprivate static double log(final double x,final double[] hiPrec){\n  if (x == 0) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  long bits=Double.doubleToLongBits(x);\n  if ((bits & 0x8000000000000000L) != 0 || x != x) {\n    if (x != 0.0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NaN;\n      }\n      return Double.NaN;\n    }\n  }\n  if (x == Double.POSITIVE_INFINITY) {\n    if (hiPrec != null) {\n      hiPrec[0]=Double.POSITIVE_INFINITY;\n    }\n    return Double.POSITIVE_INFINITY;\n  }\n  int exp=(int)(bits >> 52) - 1023;\n  if ((bits & 0x7ff0000000000000L) == 0) {\n    if (x == 0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NEGATIVE_INFINITY;\n      }\n      return Double.NEGATIVE_INFINITY;\n    }\n    bits<<=1;\n    while ((bits & 0x0010000000000000L) == 0) {\n      exp--;\n      bits<<=1;\n    }\n  }\n  if (exp == -1 || exp == 0) {\n    if (x < 1.01 && x > 0.99 && hiPrec == null) {\n      double xa=x - 1.0;\n      double xb=xa - x + 1.0;\n      double tmp=xa * HEX_40000000;\n      double aa=xa + tmp - tmp;\n      double ab=xa - aa;\n      xa=aa;\n      xb=ab;\n      double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n      double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n      for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n        aa=ya * xa;\n        ab=ya * xb + yb * xa + yb * xb;\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n        aa=ya + LN_QUICK_COEF[i][0];\n        ab=yb + LN_QUICK_COEF[i][1];\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n      }\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      return ya + yb;\n    }\n  }\n  double lnm[]=lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n  double epsilon=(bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n  double lnza=0.0;\n  double lnzb=0.0;\n  if (hiPrec != null) {\n    double tmp=epsilon * HEX_40000000;\n    double aa=epsilon + tmp - tmp;\n    double ab=epsilon - aa;\n    double xa=aa;\n    double xb=ab;\n    double numer=bits & 0x3ffffffffffL;\n    double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n    aa=numer - xa * denom - xb * denom;\n    xb+=aa / denom;\n    double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n    double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n    for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_HI_PREC_COEF[i][0];\n      ab=yb + LN_HI_PREC_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    lnza=aa + ab;\n    lnzb=-(lnza - aa - ab);\n  }\n else {\n    lnza=-0.16624882440418567;\n    lnza=lnza * epsilon + 0.19999954120254515;\n    lnza=lnza * epsilon + -0.2499999997677497;\n    lnza=lnza * epsilon + 0.3333333333332802;\n    lnza=lnza * epsilon + -0.5;\n    lnza=lnza * epsilon + 1.0;\n    lnza=lnza * epsilon;\n  }\n  double a=LN_2_A * exp;\n  double b=0.0;\n  double c=a + lnm[0];\n  double d=-(c - a - lnm[0]);\n  a=c;\n  b=b + d;\n  c=a + lnza;\n  d=-(c - a - lnza);\n  a=c;\n  b=b + d;\n  c=a + LN_2_B * exp;\n  d=-(c - a - LN_2_B * exp);\n  a=c;\n  b=b + d;\n  c=a + lnm[1];\n  d=-(c - a - lnm[1]);\n  a=c;\n  b=b + d;\n  c=a + lnzb;\n  d=-(c - a - lnzb);\n  a=c;\n  b=b + d;\n  if (hiPrec != null) {\n    hiPrec[0]=a;\n    hiPrec[1]=b;\n  }\n  return a + b;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 899,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 24,
                    "startLineNumber": 1196,
                    "startColumnNumber": 16,
                    "endLineNumber": 1196,
                    "endColumnNumber": 40
                },
                "nodeContext": "tmp=aa * HEX_40000000;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 6,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "double"
        },
        {
            "nodeContext": "aa",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 1197,
                "startColumnNumber": 21,
                "endLineNumber": 1197,
                "endColumnNumber": 23
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 8,
                        "startLineNumber": 1197,
                        "startColumnNumber": 21,
                        "endLineNumber": 1197,
                        "endColumnNumber": 29
                    },
                    "nodeContext": "aa + tmp",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 14,
                        "startLineNumber": 1197,
                        "startColumnNumber": 21,
                        "endLineNumber": 1197,
                        "endColumnNumber": 35
                    },
                    "nodeContext": "aa + tmp - tmp",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 19,
                        "startLineNumber": 1197,
                        "startColumnNumber": 16,
                        "endLineNumber": 1197,
                        "endColumnNumber": 35
                    },
                    "nodeContext": "ya=aa + tmp - tmp",
                    "nodeType": "Assignment",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 20,
                        "startLineNumber": 1197,
                        "startColumnNumber": 16,
                        "endLineNumber": 1197,
                        "endColumnNumber": 36
                    },
                    "nodeContext": "ya=aa + tmp - tmp;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1644,
                        "startLineNumber": 1158,
                        "startColumnNumber": 56,
                        "endLineNumber": 1201,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  double xa=x - 1.0;\n  double xb=xa - x + 1.0;\n  double tmp=xa * HEX_40000000;\n  double aa=xa + tmp - tmp;\n  double ab=xa - aa;\n  xa=aa;\n  xb=ab;\n  double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n  double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n  for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    aa=ya + LN_QUICK_COEF[i][0];\n    ab=yb + LN_QUICK_COEF[i][1];\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n  }\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n  return ya + yb;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 220,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1688,
                        "startLineNumber": 1158,
                        "startColumnNumber": 12,
                        "endLineNumber": 1201,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (x < 1.01 && x > 0.99 && hiPrec == null) {\n  double xa=x - 1.0;\n  double xb=xa - x + 1.0;\n  double tmp=xa * HEX_40000000;\n  double aa=xa + tmp - tmp;\n  double ab=xa - aa;\n  xa=aa;\n  xb=ab;\n  double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n  double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n  for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    aa=ya + LN_QUICK_COEF[i][0];\n    ab=yb + LN_QUICK_COEF[i][1];\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n  }\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n  return ya + yb;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 232,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1712,
                        "startLineNumber": 1157,
                        "startColumnNumber": 35,
                        "endLineNumber": 1202,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (x < 1.01 && x > 0.99 && hiPrec == null) {\n    double xa=x - 1.0;\n    double xb=xa - x + 1.0;\n    double tmp=xa * HEX_40000000;\n    double aa=xa + tmp - tmp;\n    double ab=xa - aa;\n    xa=aa;\n    xb=ab;\n    double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n    double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n    for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_QUICK_COEF[i][0];\n      ab=yb + LN_QUICK_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    return ya + yb;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 233,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1739,
                        "startLineNumber": 1157,
                        "startColumnNumber": 8,
                        "endLineNumber": 1202,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (exp == -1 || exp == 0) {\n  if (x < 1.01 && x > 0.99 && hiPrec == null) {\n    double xa=x - 1.0;\n    double xb=xa - x + 1.0;\n    double tmp=xa * HEX_40000000;\n    double aa=xa + tmp - tmp;\n    double ab=xa - aa;\n    xa=aa;\n    xb=ab;\n    double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n    double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n    for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_QUICK_COEF[i][0];\n      ab=yb + LN_QUICK_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    return ya + yb;\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 242,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 6912,
                        "startLineNumber": 1108,
                        "startColumnNumber": 69,
                        "endLineNumber": 1328,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (x == 0) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  long bits=Double.doubleToLongBits(x);\n  if ((bits & 0x8000000000000000L) != 0 || x != x) {\n    if (x != 0.0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NaN;\n      }\n      return Double.NaN;\n    }\n  }\n  if (x == Double.POSITIVE_INFINITY) {\n    if (hiPrec != null) {\n      hiPrec[0]=Double.POSITIVE_INFINITY;\n    }\n    return Double.POSITIVE_INFINITY;\n  }\n  int exp=(int)(bits >> 52) - 1023;\n  if ((bits & 0x7ff0000000000000L) == 0) {\n    if (x == 0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NEGATIVE_INFINITY;\n      }\n      return Double.NEGATIVE_INFINITY;\n    }\n    bits<<=1;\n    while ((bits & 0x0010000000000000L) == 0) {\n      exp--;\n      bits<<=1;\n    }\n  }\n  if (exp == -1 || exp == 0) {\n    if (x < 1.01 && x > 0.99 && hiPrec == null) {\n      double xa=x - 1.0;\n      double xb=xa - x + 1.0;\n      double tmp=xa * HEX_40000000;\n      double aa=xa + tmp - tmp;\n      double ab=xa - aa;\n      xa=aa;\n      xb=ab;\n      double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n      double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n      for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n        aa=ya * xa;\n        ab=ya * xb + yb * xa + yb * xb;\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n        aa=ya + LN_QUICK_COEF[i][0];\n        ab=yb + LN_QUICK_COEF[i][1];\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n      }\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      return ya + yb;\n    }\n  }\n  double lnm[]=lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n  double epsilon=(bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n  double lnza=0.0;\n  double lnzb=0.0;\n  if (hiPrec != null) {\n    double tmp=epsilon * HEX_40000000;\n    double aa=epsilon + tmp - tmp;\n    double ab=epsilon - aa;\n    double xa=aa;\n    double xb=ab;\n    double numer=bits & 0x3ffffffffffL;\n    double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n    aa=numer - xa * denom - xb * denom;\n    xb+=aa / denom;\n    double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n    double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n    for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_HI_PREC_COEF[i][0];\n      ab=yb + LN_HI_PREC_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    lnza=aa + ab;\n    lnzb=-(lnza - aa - ab);\n  }\n else {\n    lnza=-0.16624882440418567;\n    lnza=lnza * epsilon + 0.19999954120254515;\n    lnza=lnza * epsilon + -0.2499999997677497;\n    lnza=lnza * epsilon + 0.3333333333332802;\n    lnza=lnza * epsilon + -0.5;\n    lnza=lnza * epsilon + 1.0;\n    lnza=lnza * epsilon;\n  }\n  double a=LN_2_A * exp;\n  double b=0.0;\n  double c=a + lnm[0];\n  double d=-(c - a - lnm[0]);\n  a=c;\n  b=b + d;\n  c=a + lnza;\n  d=-(c - a - lnza);\n  a=c;\n  b=b + d;\n  c=a + LN_2_B * exp;\n  d=-(c - a - LN_2_B * exp);\n  a=c;\n  b=b + d;\n  c=a + lnm[1];\n  d=-(c - a - lnm[1]);\n  a=c;\n  b=b + d;\n  c=a + lnzb;\n  d=-(c - a - lnzb);\n  a=c;\n  b=b + d;\n  if (hiPrec != null) {\n    hiPrec[0]=a;\n    hiPrec[1]=b;\n  }\n  return a + b;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 883,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7218,
                        "startLineNumber": 1102,
                        "startColumnNumber": 4,
                        "endLineNumber": 1328,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Internal helper method for natural logarithm function.\n * @param x original argument of the natural logarithm function\n * @param hiPrec extra bits of precision on output (To Be Confirmed)\n * @return log(x)\n */\nprivate static double log(final double x,final double[] hiPrec){\n  if (x == 0) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  long bits=Double.doubleToLongBits(x);\n  if ((bits & 0x8000000000000000L) != 0 || x != x) {\n    if (x != 0.0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NaN;\n      }\n      return Double.NaN;\n    }\n  }\n  if (x == Double.POSITIVE_INFINITY) {\n    if (hiPrec != null) {\n      hiPrec[0]=Double.POSITIVE_INFINITY;\n    }\n    return Double.POSITIVE_INFINITY;\n  }\n  int exp=(int)(bits >> 52) - 1023;\n  if ((bits & 0x7ff0000000000000L) == 0) {\n    if (x == 0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NEGATIVE_INFINITY;\n      }\n      return Double.NEGATIVE_INFINITY;\n    }\n    bits<<=1;\n    while ((bits & 0x0010000000000000L) == 0) {\n      exp--;\n      bits<<=1;\n    }\n  }\n  if (exp == -1 || exp == 0) {\n    if (x < 1.01 && x > 0.99 && hiPrec == null) {\n      double xa=x - 1.0;\n      double xb=xa - x + 1.0;\n      double tmp=xa * HEX_40000000;\n      double aa=xa + tmp - tmp;\n      double ab=xa - aa;\n      xa=aa;\n      xb=ab;\n      double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n      double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n      for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n        aa=ya * xa;\n        ab=ya * xb + yb * xa + yb * xb;\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n        aa=ya + LN_QUICK_COEF[i][0];\n        ab=yb + LN_QUICK_COEF[i][1];\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n      }\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      return ya + yb;\n    }\n  }\n  double lnm[]=lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n  double epsilon=(bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n  double lnza=0.0;\n  double lnzb=0.0;\n  if (hiPrec != null) {\n    double tmp=epsilon * HEX_40000000;\n    double aa=epsilon + tmp - tmp;\n    double ab=epsilon - aa;\n    double xa=aa;\n    double xb=ab;\n    double numer=bits & 0x3ffffffffffL;\n    double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n    aa=numer - xa * denom - xb * denom;\n    xb+=aa / denom;\n    double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n    double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n    for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_HI_PREC_COEF[i][0];\n      ab=yb + LN_HI_PREC_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    lnza=aa + ab;\n    lnzb=-(lnza - aa - ab);\n  }\n else {\n    lnza=-0.16624882440418567;\n    lnza=lnza * epsilon + 0.19999954120254515;\n    lnza=lnza * epsilon + -0.2499999997677497;\n    lnza=lnza * epsilon + 0.3333333333332802;\n    lnza=lnza * epsilon + -0.5;\n    lnza=lnza * epsilon + 1.0;\n    lnza=lnza * epsilon;\n  }\n  double a=LN_2_A * exp;\n  double b=0.0;\n  double c=a + lnm[0];\n  double d=-(c - a - lnm[0]);\n  a=c;\n  b=b + d;\n  c=a + lnza;\n  d=-(c - a - lnza);\n  a=c;\n  b=b + d;\n  c=a + LN_2_B * exp;\n  d=-(c - a - LN_2_B * exp);\n  a=c;\n  b=b + d;\n  c=a + lnm[1];\n  d=-(c - a - lnm[1]);\n  a=c;\n  b=b + d;\n  c=a + lnzb;\n  d=-(c - a - lnzb);\n  a=c;\n  b=b + d;\n  if (hiPrec != null) {\n    hiPrec[0]=a;\n    hiPrec[1]=b;\n  }\n  return a + b;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 899,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 20,
                    "startLineNumber": 1197,
                    "startColumnNumber": 16,
                    "endLineNumber": 1197,
                    "endColumnNumber": 36
                },
                "nodeContext": "ya=aa + tmp - tmp;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "double"
        },
        {
            "nodeContext": "aa",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 1198,
                "startColumnNumber": 21,
                "endLineNumber": 1198,
                "endColumnNumber": 23
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 1198,
                        "startColumnNumber": 21,
                        "endLineNumber": 1198,
                        "endColumnNumber": 28
                    },
                    "nodeContext": "aa - ya",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 12,
                        "startLineNumber": 1198,
                        "startColumnNumber": 21,
                        "endLineNumber": 1198,
                        "endColumnNumber": 33
                    },
                    "nodeContext": "aa - ya + ab",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 17,
                        "startLineNumber": 1198,
                        "startColumnNumber": 16,
                        "endLineNumber": 1198,
                        "endColumnNumber": 33
                    },
                    "nodeContext": "yb=aa - ya + ab",
                    "nodeType": "Assignment",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 18,
                        "startLineNumber": 1198,
                        "startColumnNumber": 16,
                        "endLineNumber": 1198,
                        "endColumnNumber": 34
                    },
                    "nodeContext": "yb=aa - ya + ab;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1644,
                        "startLineNumber": 1158,
                        "startColumnNumber": 56,
                        "endLineNumber": 1201,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  double xa=x - 1.0;\n  double xb=xa - x + 1.0;\n  double tmp=xa * HEX_40000000;\n  double aa=xa + tmp - tmp;\n  double ab=xa - aa;\n  xa=aa;\n  xb=ab;\n  double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n  double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n  for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    aa=ya + LN_QUICK_COEF[i][0];\n    ab=yb + LN_QUICK_COEF[i][1];\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n  }\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n  return ya + yb;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 220,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1688,
                        "startLineNumber": 1158,
                        "startColumnNumber": 12,
                        "endLineNumber": 1201,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (x < 1.01 && x > 0.99 && hiPrec == null) {\n  double xa=x - 1.0;\n  double xb=xa - x + 1.0;\n  double tmp=xa * HEX_40000000;\n  double aa=xa + tmp - tmp;\n  double ab=xa - aa;\n  xa=aa;\n  xb=ab;\n  double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n  double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n  for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    aa=ya + LN_QUICK_COEF[i][0];\n    ab=yb + LN_QUICK_COEF[i][1];\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n  }\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n  return ya + yb;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 232,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1712,
                        "startLineNumber": 1157,
                        "startColumnNumber": 35,
                        "endLineNumber": 1202,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (x < 1.01 && x > 0.99 && hiPrec == null) {\n    double xa=x - 1.0;\n    double xb=xa - x + 1.0;\n    double tmp=xa * HEX_40000000;\n    double aa=xa + tmp - tmp;\n    double ab=xa - aa;\n    xa=aa;\n    xb=ab;\n    double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n    double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n    for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_QUICK_COEF[i][0];\n      ab=yb + LN_QUICK_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    return ya + yb;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 233,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1739,
                        "startLineNumber": 1157,
                        "startColumnNumber": 8,
                        "endLineNumber": 1202,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (exp == -1 || exp == 0) {\n  if (x < 1.01 && x > 0.99 && hiPrec == null) {\n    double xa=x - 1.0;\n    double xb=xa - x + 1.0;\n    double tmp=xa * HEX_40000000;\n    double aa=xa + tmp - tmp;\n    double ab=xa - aa;\n    xa=aa;\n    xb=ab;\n    double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n    double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n    for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_QUICK_COEF[i][0];\n      ab=yb + LN_QUICK_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    return ya + yb;\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 242,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 6912,
                        "startLineNumber": 1108,
                        "startColumnNumber": 69,
                        "endLineNumber": 1328,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (x == 0) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  long bits=Double.doubleToLongBits(x);\n  if ((bits & 0x8000000000000000L) != 0 || x != x) {\n    if (x != 0.0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NaN;\n      }\n      return Double.NaN;\n    }\n  }\n  if (x == Double.POSITIVE_INFINITY) {\n    if (hiPrec != null) {\n      hiPrec[0]=Double.POSITIVE_INFINITY;\n    }\n    return Double.POSITIVE_INFINITY;\n  }\n  int exp=(int)(bits >> 52) - 1023;\n  if ((bits & 0x7ff0000000000000L) == 0) {\n    if (x == 0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NEGATIVE_INFINITY;\n      }\n      return Double.NEGATIVE_INFINITY;\n    }\n    bits<<=1;\n    while ((bits & 0x0010000000000000L) == 0) {\n      exp--;\n      bits<<=1;\n    }\n  }\n  if (exp == -1 || exp == 0) {\n    if (x < 1.01 && x > 0.99 && hiPrec == null) {\n      double xa=x - 1.0;\n      double xb=xa - x + 1.0;\n      double tmp=xa * HEX_40000000;\n      double aa=xa + tmp - tmp;\n      double ab=xa - aa;\n      xa=aa;\n      xb=ab;\n      double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n      double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n      for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n        aa=ya * xa;\n        ab=ya * xb + yb * xa + yb * xb;\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n        aa=ya + LN_QUICK_COEF[i][0];\n        ab=yb + LN_QUICK_COEF[i][1];\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n      }\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      return ya + yb;\n    }\n  }\n  double lnm[]=lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n  double epsilon=(bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n  double lnza=0.0;\n  double lnzb=0.0;\n  if (hiPrec != null) {\n    double tmp=epsilon * HEX_40000000;\n    double aa=epsilon + tmp - tmp;\n    double ab=epsilon - aa;\n    double xa=aa;\n    double xb=ab;\n    double numer=bits & 0x3ffffffffffL;\n    double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n    aa=numer - xa * denom - xb * denom;\n    xb+=aa / denom;\n    double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n    double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n    for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_HI_PREC_COEF[i][0];\n      ab=yb + LN_HI_PREC_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    lnza=aa + ab;\n    lnzb=-(lnza - aa - ab);\n  }\n else {\n    lnza=-0.16624882440418567;\n    lnza=lnza * epsilon + 0.19999954120254515;\n    lnza=lnza * epsilon + -0.2499999997677497;\n    lnza=lnza * epsilon + 0.3333333333332802;\n    lnza=lnza * epsilon + -0.5;\n    lnza=lnza * epsilon + 1.0;\n    lnza=lnza * epsilon;\n  }\n  double a=LN_2_A * exp;\n  double b=0.0;\n  double c=a + lnm[0];\n  double d=-(c - a - lnm[0]);\n  a=c;\n  b=b + d;\n  c=a + lnza;\n  d=-(c - a - lnza);\n  a=c;\n  b=b + d;\n  c=a + LN_2_B * exp;\n  d=-(c - a - LN_2_B * exp);\n  a=c;\n  b=b + d;\n  c=a + lnm[1];\n  d=-(c - a - lnm[1]);\n  a=c;\n  b=b + d;\n  c=a + lnzb;\n  d=-(c - a - lnzb);\n  a=c;\n  b=b + d;\n  if (hiPrec != null) {\n    hiPrec[0]=a;\n    hiPrec[1]=b;\n  }\n  return a + b;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 883,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7218,
                        "startLineNumber": 1102,
                        "startColumnNumber": 4,
                        "endLineNumber": 1328,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Internal helper method for natural logarithm function.\n * @param x original argument of the natural logarithm function\n * @param hiPrec extra bits of precision on output (To Be Confirmed)\n * @return log(x)\n */\nprivate static double log(final double x,final double[] hiPrec){\n  if (x == 0) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  long bits=Double.doubleToLongBits(x);\n  if ((bits & 0x8000000000000000L) != 0 || x != x) {\n    if (x != 0.0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NaN;\n      }\n      return Double.NaN;\n    }\n  }\n  if (x == Double.POSITIVE_INFINITY) {\n    if (hiPrec != null) {\n      hiPrec[0]=Double.POSITIVE_INFINITY;\n    }\n    return Double.POSITIVE_INFINITY;\n  }\n  int exp=(int)(bits >> 52) - 1023;\n  if ((bits & 0x7ff0000000000000L) == 0) {\n    if (x == 0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NEGATIVE_INFINITY;\n      }\n      return Double.NEGATIVE_INFINITY;\n    }\n    bits<<=1;\n    while ((bits & 0x0010000000000000L) == 0) {\n      exp--;\n      bits<<=1;\n    }\n  }\n  if (exp == -1 || exp == 0) {\n    if (x < 1.01 && x > 0.99 && hiPrec == null) {\n      double xa=x - 1.0;\n      double xb=xa - x + 1.0;\n      double tmp=xa * HEX_40000000;\n      double aa=xa + tmp - tmp;\n      double ab=xa - aa;\n      xa=aa;\n      xb=ab;\n      double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n      double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n      for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n        aa=ya * xa;\n        ab=ya * xb + yb * xa + yb * xb;\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n        aa=ya + LN_QUICK_COEF[i][0];\n        ab=yb + LN_QUICK_COEF[i][1];\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n      }\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      return ya + yb;\n    }\n  }\n  double lnm[]=lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n  double epsilon=(bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n  double lnza=0.0;\n  double lnzb=0.0;\n  if (hiPrec != null) {\n    double tmp=epsilon * HEX_40000000;\n    double aa=epsilon + tmp - tmp;\n    double ab=epsilon - aa;\n    double xa=aa;\n    double xb=ab;\n    double numer=bits & 0x3ffffffffffL;\n    double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n    aa=numer - xa * denom - xb * denom;\n    xb+=aa / denom;\n    double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n    double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n    for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_HI_PREC_COEF[i][0];\n      ab=yb + LN_HI_PREC_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    lnza=aa + ab;\n    lnzb=-(lnza - aa - ab);\n  }\n else {\n    lnza=-0.16624882440418567;\n    lnza=lnza * epsilon + 0.19999954120254515;\n    lnza=lnza * epsilon + -0.2499999997677497;\n    lnza=lnza * epsilon + 0.3333333333332802;\n    lnza=lnza * epsilon + -0.5;\n    lnza=lnza * epsilon + 1.0;\n    lnza=lnza * epsilon;\n  }\n  double a=LN_2_A * exp;\n  double b=0.0;\n  double c=a + lnm[0];\n  double d=-(c - a - lnm[0]);\n  a=c;\n  b=b + d;\n  c=a + lnza;\n  d=-(c - a - lnza);\n  a=c;\n  b=b + d;\n  c=a + LN_2_B * exp;\n  d=-(c - a - LN_2_B * exp);\n  a=c;\n  b=b + d;\n  c=a + lnm[1];\n  d=-(c - a - lnm[1]);\n  a=c;\n  b=b + d;\n  c=a + lnzb;\n  d=-(c - a - lnzb);\n  a=c;\n  b=b + d;\n  if (hiPrec != null) {\n    hiPrec[0]=a;\n    hiPrec[1]=b;\n  }\n  return a + b;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 899,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 18,
                    "startLineNumber": 1198,
                    "startColumnNumber": 16,
                    "endLineNumber": 1198,
                    "endColumnNumber": 34
                },
                "nodeContext": "yb=aa - ya + ab;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "double"
        },
        {
            "nodeContext": "aa",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 1225,
                "startColumnNumber": 34,
                "endLineNumber": 1225,
                "endColumnNumber": 36
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 12,
                        "startLineNumber": 1225,
                        "startColumnNumber": 24,
                        "endLineNumber": 1225,
                        "endColumnNumber": 36
                    },
                    "nodeContext": "epsilon - aa",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 17,
                        "startLineNumber": 1225,
                        "startColumnNumber": 19,
                        "endLineNumber": 1225,
                        "endColumnNumber": 36
                    },
                    "nodeContext": "ab=epsilon - aa",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 25,
                        "startLineNumber": 1225,
                        "startColumnNumber": 12,
                        "endLineNumber": 1225,
                        "endColumnNumber": 37
                    },
                    "nodeContext": "double ab=epsilon - aa;\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1686,
                        "startLineNumber": 1221,
                        "startColumnNumber": 28,
                        "endLineNumber": 1269,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  double tmp=epsilon * HEX_40000000;\n  double aa=epsilon + tmp - tmp;\n  double ab=epsilon - aa;\n  double xa=aa;\n  double xb=ab;\n  double numer=bits & 0x3ffffffffffL;\n  double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n  aa=numer - xa * denom - xb * denom;\n  xb+=aa / denom;\n  double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n  double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n  for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    aa=ya + LN_HI_PREC_COEF[i][0];\n    ab=yb + LN_HI_PREC_COEF[i][1];\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n  }\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  lnza=aa + ab;\n  lnzb=-(lnza - aa - ab);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 230,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2163,
                        "startLineNumber": 1221,
                        "startColumnNumber": 8,
                        "endLineNumber": 1279,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (hiPrec != null) {\n  double tmp=epsilon * HEX_40000000;\n  double aa=epsilon + tmp - tmp;\n  double ab=epsilon - aa;\n  double xa=aa;\n  double xb=ab;\n  double numer=bits & 0x3ffffffffffL;\n  double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n  aa=numer - xa * denom - xb * denom;\n  xb+=aa / denom;\n  double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n  double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n  for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    aa=ya + LN_HI_PREC_COEF[i][0];\n    ab=yb + LN_HI_PREC_COEF[i][1];\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n  }\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  lnza=aa + ab;\n  lnzb=-(lnza - aa - ab);\n}\n else {\n  lnza=-0.16624882440418567;\n  lnza=lnza * epsilon + 0.19999954120254515;\n  lnza=lnza * epsilon + -0.2499999997677497;\n  lnza=lnza * epsilon + 0.3333333333332802;\n  lnza=lnza * epsilon + -0.5;\n  lnza=lnza * epsilon + 1.0;\n  lnza=lnza * epsilon;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 288,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 6912,
                        "startLineNumber": 1108,
                        "startColumnNumber": 69,
                        "endLineNumber": 1328,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (x == 0) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  long bits=Double.doubleToLongBits(x);\n  if ((bits & 0x8000000000000000L) != 0 || x != x) {\n    if (x != 0.0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NaN;\n      }\n      return Double.NaN;\n    }\n  }\n  if (x == Double.POSITIVE_INFINITY) {\n    if (hiPrec != null) {\n      hiPrec[0]=Double.POSITIVE_INFINITY;\n    }\n    return Double.POSITIVE_INFINITY;\n  }\n  int exp=(int)(bits >> 52) - 1023;\n  if ((bits & 0x7ff0000000000000L) == 0) {\n    if (x == 0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NEGATIVE_INFINITY;\n      }\n      return Double.NEGATIVE_INFINITY;\n    }\n    bits<<=1;\n    while ((bits & 0x0010000000000000L) == 0) {\n      exp--;\n      bits<<=1;\n    }\n  }\n  if (exp == -1 || exp == 0) {\n    if (x < 1.01 && x > 0.99 && hiPrec == null) {\n      double xa=x - 1.0;\n      double xb=xa - x + 1.0;\n      double tmp=xa * HEX_40000000;\n      double aa=xa + tmp - tmp;\n      double ab=xa - aa;\n      xa=aa;\n      xb=ab;\n      double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n      double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n      for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n        aa=ya * xa;\n        ab=ya * xb + yb * xa + yb * xb;\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n        aa=ya + LN_QUICK_COEF[i][0];\n        ab=yb + LN_QUICK_COEF[i][1];\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n      }\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      return ya + yb;\n    }\n  }\n  double lnm[]=lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n  double epsilon=(bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n  double lnza=0.0;\n  double lnzb=0.0;\n  if (hiPrec != null) {\n    double tmp=epsilon * HEX_40000000;\n    double aa=epsilon + tmp - tmp;\n    double ab=epsilon - aa;\n    double xa=aa;\n    double xb=ab;\n    double numer=bits & 0x3ffffffffffL;\n    double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n    aa=numer - xa * denom - xb * denom;\n    xb+=aa / denom;\n    double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n    double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n    for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_HI_PREC_COEF[i][0];\n      ab=yb + LN_HI_PREC_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    lnza=aa + ab;\n    lnzb=-(lnza - aa - ab);\n  }\n else {\n    lnza=-0.16624882440418567;\n    lnza=lnza * epsilon + 0.19999954120254515;\n    lnza=lnza * epsilon + -0.2499999997677497;\n    lnza=lnza * epsilon + 0.3333333333332802;\n    lnza=lnza * epsilon + -0.5;\n    lnza=lnza * epsilon + 1.0;\n    lnza=lnza * epsilon;\n  }\n  double a=LN_2_A * exp;\n  double b=0.0;\n  double c=a + lnm[0];\n  double d=-(c - a - lnm[0]);\n  a=c;\n  b=b + d;\n  c=a + lnza;\n  d=-(c - a - lnza);\n  a=c;\n  b=b + d;\n  c=a + LN_2_B * exp;\n  d=-(c - a - LN_2_B * exp);\n  a=c;\n  b=b + d;\n  c=a + lnm[1];\n  d=-(c - a - lnm[1]);\n  a=c;\n  b=b + d;\n  c=a + lnzb;\n  d=-(c - a - lnzb);\n  a=c;\n  b=b + d;\n  if (hiPrec != null) {\n    hiPrec[0]=a;\n    hiPrec[1]=b;\n  }\n  return a + b;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 883,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7218,
                        "startLineNumber": 1102,
                        "startColumnNumber": 4,
                        "endLineNumber": 1328,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Internal helper method for natural logarithm function.\n * @param x original argument of the natural logarithm function\n * @param hiPrec extra bits of precision on output (To Be Confirmed)\n * @return log(x)\n */\nprivate static double log(final double x,final double[] hiPrec){\n  if (x == 0) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  long bits=Double.doubleToLongBits(x);\n  if ((bits & 0x8000000000000000L) != 0 || x != x) {\n    if (x != 0.0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NaN;\n      }\n      return Double.NaN;\n    }\n  }\n  if (x == Double.POSITIVE_INFINITY) {\n    if (hiPrec != null) {\n      hiPrec[0]=Double.POSITIVE_INFINITY;\n    }\n    return Double.POSITIVE_INFINITY;\n  }\n  int exp=(int)(bits >> 52) - 1023;\n  if ((bits & 0x7ff0000000000000L) == 0) {\n    if (x == 0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NEGATIVE_INFINITY;\n      }\n      return Double.NEGATIVE_INFINITY;\n    }\n    bits<<=1;\n    while ((bits & 0x0010000000000000L) == 0) {\n      exp--;\n      bits<<=1;\n    }\n  }\n  if (exp == -1 || exp == 0) {\n    if (x < 1.01 && x > 0.99 && hiPrec == null) {\n      double xa=x - 1.0;\n      double xb=xa - x + 1.0;\n      double tmp=xa * HEX_40000000;\n      double aa=xa + tmp - tmp;\n      double ab=xa - aa;\n      xa=aa;\n      xb=ab;\n      double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n      double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n      for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n        aa=ya * xa;\n        ab=ya * xb + yb * xa + yb * xb;\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n        aa=ya + LN_QUICK_COEF[i][0];\n        ab=yb + LN_QUICK_COEF[i][1];\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n      }\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      return ya + yb;\n    }\n  }\n  double lnm[]=lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n  double epsilon=(bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n  double lnza=0.0;\n  double lnzb=0.0;\n  if (hiPrec != null) {\n    double tmp=epsilon * HEX_40000000;\n    double aa=epsilon + tmp - tmp;\n    double ab=epsilon - aa;\n    double xa=aa;\n    double xb=ab;\n    double numer=bits & 0x3ffffffffffL;\n    double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n    aa=numer - xa * denom - xb * denom;\n    xb+=aa / denom;\n    double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n    double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n    for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_HI_PREC_COEF[i][0];\n      ab=yb + LN_HI_PREC_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    lnza=aa + ab;\n    lnzb=-(lnza - aa - ab);\n  }\n else {\n    lnza=-0.16624882440418567;\n    lnza=lnza * epsilon + 0.19999954120254515;\n    lnza=lnza * epsilon + -0.2499999997677497;\n    lnza=lnza * epsilon + 0.3333333333332802;\n    lnza=lnza * epsilon + -0.5;\n    lnza=lnza * epsilon + 1.0;\n    lnza=lnza * epsilon;\n  }\n  double a=LN_2_A * exp;\n  double b=0.0;\n  double c=a + lnm[0];\n  double d=-(c - a - lnm[0]);\n  a=c;\n  b=b + d;\n  c=a + lnza;\n  d=-(c - a - lnza);\n  a=c;\n  b=b + d;\n  c=a + LN_2_B * exp;\n  d=-(c - a - LN_2_B * exp);\n  a=c;\n  b=b + d;\n  c=a + lnm[1];\n  d=-(c - a - lnm[1]);\n  a=c;\n  b=b + d;\n  c=a + lnzb;\n  d=-(c - a - lnzb);\n  a=c;\n  b=b + d;\n  if (hiPrec != null) {\n    hiPrec[0]=a;\n    hiPrec[1]=b;\n  }\n  return a + b;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 899,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 25,
                    "startLineNumber": 1225,
                    "startColumnNumber": 12,
                    "endLineNumber": 1225,
                    "endColumnNumber": 37
                },
                "nodeContext": "double ab=epsilon - aa;\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 7,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "double"
        },
        {
            "nodeContext": "aa",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 1226,
                "startColumnNumber": 24,
                "endLineNumber": 1226,
                "endColumnNumber": 26
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 1226,
                        "startColumnNumber": 19,
                        "endLineNumber": 1226,
                        "endColumnNumber": 26
                    },
                    "nodeContext": "xa=aa",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 15,
                        "startLineNumber": 1226,
                        "startColumnNumber": 12,
                        "endLineNumber": 1226,
                        "endColumnNumber": 27
                    },
                    "nodeContext": "double xa=aa;\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1686,
                        "startLineNumber": 1221,
                        "startColumnNumber": 28,
                        "endLineNumber": 1269,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  double tmp=epsilon * HEX_40000000;\n  double aa=epsilon + tmp - tmp;\n  double ab=epsilon - aa;\n  double xa=aa;\n  double xb=ab;\n  double numer=bits & 0x3ffffffffffL;\n  double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n  aa=numer - xa * denom - xb * denom;\n  xb+=aa / denom;\n  double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n  double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n  for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    aa=ya + LN_HI_PREC_COEF[i][0];\n    ab=yb + LN_HI_PREC_COEF[i][1];\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n  }\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  lnza=aa + ab;\n  lnzb=-(lnza - aa - ab);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 230,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2163,
                        "startLineNumber": 1221,
                        "startColumnNumber": 8,
                        "endLineNumber": 1279,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (hiPrec != null) {\n  double tmp=epsilon * HEX_40000000;\n  double aa=epsilon + tmp - tmp;\n  double ab=epsilon - aa;\n  double xa=aa;\n  double xb=ab;\n  double numer=bits & 0x3ffffffffffL;\n  double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n  aa=numer - xa * denom - xb * denom;\n  xb+=aa / denom;\n  double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n  double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n  for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    aa=ya + LN_HI_PREC_COEF[i][0];\n    ab=yb + LN_HI_PREC_COEF[i][1];\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n  }\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  lnza=aa + ab;\n  lnzb=-(lnza - aa - ab);\n}\n else {\n  lnza=-0.16624882440418567;\n  lnza=lnza * epsilon + 0.19999954120254515;\n  lnza=lnza * epsilon + -0.2499999997677497;\n  lnza=lnza * epsilon + 0.3333333333332802;\n  lnza=lnza * epsilon + -0.5;\n  lnza=lnza * epsilon + 1.0;\n  lnza=lnza * epsilon;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 288,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 6912,
                        "startLineNumber": 1108,
                        "startColumnNumber": 69,
                        "endLineNumber": 1328,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (x == 0) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  long bits=Double.doubleToLongBits(x);\n  if ((bits & 0x8000000000000000L) != 0 || x != x) {\n    if (x != 0.0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NaN;\n      }\n      return Double.NaN;\n    }\n  }\n  if (x == Double.POSITIVE_INFINITY) {\n    if (hiPrec != null) {\n      hiPrec[0]=Double.POSITIVE_INFINITY;\n    }\n    return Double.POSITIVE_INFINITY;\n  }\n  int exp=(int)(bits >> 52) - 1023;\n  if ((bits & 0x7ff0000000000000L) == 0) {\n    if (x == 0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NEGATIVE_INFINITY;\n      }\n      return Double.NEGATIVE_INFINITY;\n    }\n    bits<<=1;\n    while ((bits & 0x0010000000000000L) == 0) {\n      exp--;\n      bits<<=1;\n    }\n  }\n  if (exp == -1 || exp == 0) {\n    if (x < 1.01 && x > 0.99 && hiPrec == null) {\n      double xa=x - 1.0;\n      double xb=xa - x + 1.0;\n      double tmp=xa * HEX_40000000;\n      double aa=xa + tmp - tmp;\n      double ab=xa - aa;\n      xa=aa;\n      xb=ab;\n      double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n      double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n      for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n        aa=ya * xa;\n        ab=ya * xb + yb * xa + yb * xb;\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n        aa=ya + LN_QUICK_COEF[i][0];\n        ab=yb + LN_QUICK_COEF[i][1];\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n      }\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      return ya + yb;\n    }\n  }\n  double lnm[]=lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n  double epsilon=(bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n  double lnza=0.0;\n  double lnzb=0.0;\n  if (hiPrec != null) {\n    double tmp=epsilon * HEX_40000000;\n    double aa=epsilon + tmp - tmp;\n    double ab=epsilon - aa;\n    double xa=aa;\n    double xb=ab;\n    double numer=bits & 0x3ffffffffffL;\n    double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n    aa=numer - xa * denom - xb * denom;\n    xb+=aa / denom;\n    double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n    double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n    for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_HI_PREC_COEF[i][0];\n      ab=yb + LN_HI_PREC_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    lnza=aa + ab;\n    lnzb=-(lnza - aa - ab);\n  }\n else {\n    lnza=-0.16624882440418567;\n    lnza=lnza * epsilon + 0.19999954120254515;\n    lnza=lnza * epsilon + -0.2499999997677497;\n    lnza=lnza * epsilon + 0.3333333333332802;\n    lnza=lnza * epsilon + -0.5;\n    lnza=lnza * epsilon + 1.0;\n    lnza=lnza * epsilon;\n  }\n  double a=LN_2_A * exp;\n  double b=0.0;\n  double c=a + lnm[0];\n  double d=-(c - a - lnm[0]);\n  a=c;\n  b=b + d;\n  c=a + lnza;\n  d=-(c - a - lnza);\n  a=c;\n  b=b + d;\n  c=a + LN_2_B * exp;\n  d=-(c - a - LN_2_B * exp);\n  a=c;\n  b=b + d;\n  c=a + lnm[1];\n  d=-(c - a - lnm[1]);\n  a=c;\n  b=b + d;\n  c=a + lnzb;\n  d=-(c - a - lnzb);\n  a=c;\n  b=b + d;\n  if (hiPrec != null) {\n    hiPrec[0]=a;\n    hiPrec[1]=b;\n  }\n  return a + b;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 883,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7218,
                        "startLineNumber": 1102,
                        "startColumnNumber": 4,
                        "endLineNumber": 1328,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Internal helper method for natural logarithm function.\n * @param x original argument of the natural logarithm function\n * @param hiPrec extra bits of precision on output (To Be Confirmed)\n * @return log(x)\n */\nprivate static double log(final double x,final double[] hiPrec){\n  if (x == 0) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  long bits=Double.doubleToLongBits(x);\n  if ((bits & 0x8000000000000000L) != 0 || x != x) {\n    if (x != 0.0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NaN;\n      }\n      return Double.NaN;\n    }\n  }\n  if (x == Double.POSITIVE_INFINITY) {\n    if (hiPrec != null) {\n      hiPrec[0]=Double.POSITIVE_INFINITY;\n    }\n    return Double.POSITIVE_INFINITY;\n  }\n  int exp=(int)(bits >> 52) - 1023;\n  if ((bits & 0x7ff0000000000000L) == 0) {\n    if (x == 0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NEGATIVE_INFINITY;\n      }\n      return Double.NEGATIVE_INFINITY;\n    }\n    bits<<=1;\n    while ((bits & 0x0010000000000000L) == 0) {\n      exp--;\n      bits<<=1;\n    }\n  }\n  if (exp == -1 || exp == 0) {\n    if (x < 1.01 && x > 0.99 && hiPrec == null) {\n      double xa=x - 1.0;\n      double xb=xa - x + 1.0;\n      double tmp=xa * HEX_40000000;\n      double aa=xa + tmp - tmp;\n      double ab=xa - aa;\n      xa=aa;\n      xb=ab;\n      double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n      double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n      for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n        aa=ya * xa;\n        ab=ya * xb + yb * xa + yb * xb;\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n        aa=ya + LN_QUICK_COEF[i][0];\n        ab=yb + LN_QUICK_COEF[i][1];\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n      }\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      return ya + yb;\n    }\n  }\n  double lnm[]=lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n  double epsilon=(bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n  double lnza=0.0;\n  double lnzb=0.0;\n  if (hiPrec != null) {\n    double tmp=epsilon * HEX_40000000;\n    double aa=epsilon + tmp - tmp;\n    double ab=epsilon - aa;\n    double xa=aa;\n    double xb=ab;\n    double numer=bits & 0x3ffffffffffL;\n    double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n    aa=numer - xa * denom - xb * denom;\n    xb+=aa / denom;\n    double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n    double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n    for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_HI_PREC_COEF[i][0];\n      ab=yb + LN_HI_PREC_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    lnza=aa + ab;\n    lnzb=-(lnza - aa - ab);\n  }\n else {\n    lnza=-0.16624882440418567;\n    lnza=lnza * epsilon + 0.19999954120254515;\n    lnza=lnza * epsilon + -0.2499999997677497;\n    lnza=lnza * epsilon + 0.3333333333332802;\n    lnza=lnza * epsilon + -0.5;\n    lnza=lnza * epsilon + 1.0;\n    lnza=lnza * epsilon;\n  }\n  double a=LN_2_A * exp;\n  double b=0.0;\n  double c=a + lnm[0];\n  double d=-(c - a - lnm[0]);\n  a=c;\n  b=b + d;\n  c=a + lnza;\n  d=-(c - a - lnza);\n  a=c;\n  b=b + d;\n  c=a + LN_2_B * exp;\n  d=-(c - a - LN_2_B * exp);\n  a=c;\n  b=b + d;\n  c=a + lnm[1];\n  d=-(c - a - lnm[1]);\n  a=c;\n  b=b + d;\n  c=a + lnzb;\n  d=-(c - a - lnzb);\n  a=c;\n  b=b + d;\n  if (hiPrec != null) {\n    hiPrec[0]=a;\n    hiPrec[1]=b;\n  }\n  return a + b;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 899,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 15,
                    "startLineNumber": 1226,
                    "startColumnNumber": 12,
                    "endLineNumber": 1226,
                    "endColumnNumber": 27
                },
                "nodeContext": "double xa=aa;\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "double"
        },
        {
            "nodeContext": "aa",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 1233,
                "startColumnNumber": 18,
                "endLineNumber": 1233,
                "endColumnNumber": 20
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 10,
                        "startLineNumber": 1233,
                        "startColumnNumber": 18,
                        "endLineNumber": 1233,
                        "endColumnNumber": 28
                    },
                    "nodeContext": "aa / denom",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 16,
                        "startLineNumber": 1233,
                        "startColumnNumber": 12,
                        "endLineNumber": 1233,
                        "endColumnNumber": 28
                    },
                    "nodeContext": "xb+=aa / denom",
                    "nodeType": "Assignment",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 17,
                        "startLineNumber": 1233,
                        "startColumnNumber": 12,
                        "endLineNumber": 1233,
                        "endColumnNumber": 29
                    },
                    "nodeContext": "xb+=aa / denom;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 6,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1686,
                        "startLineNumber": 1221,
                        "startColumnNumber": 28,
                        "endLineNumber": 1269,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  double tmp=epsilon * HEX_40000000;\n  double aa=epsilon + tmp - tmp;\n  double ab=epsilon - aa;\n  double xa=aa;\n  double xb=ab;\n  double numer=bits & 0x3ffffffffffL;\n  double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n  aa=numer - xa * denom - xb * denom;\n  xb+=aa / denom;\n  double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n  double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n  for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    aa=ya + LN_HI_PREC_COEF[i][0];\n    ab=yb + LN_HI_PREC_COEF[i][1];\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n  }\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  lnza=aa + ab;\n  lnzb=-(lnza - aa - ab);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 230,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2163,
                        "startLineNumber": 1221,
                        "startColumnNumber": 8,
                        "endLineNumber": 1279,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (hiPrec != null) {\n  double tmp=epsilon * HEX_40000000;\n  double aa=epsilon + tmp - tmp;\n  double ab=epsilon - aa;\n  double xa=aa;\n  double xb=ab;\n  double numer=bits & 0x3ffffffffffL;\n  double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n  aa=numer - xa * denom - xb * denom;\n  xb+=aa / denom;\n  double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n  double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n  for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    aa=ya + LN_HI_PREC_COEF[i][0];\n    ab=yb + LN_HI_PREC_COEF[i][1];\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n  }\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  lnza=aa + ab;\n  lnzb=-(lnza - aa - ab);\n}\n else {\n  lnza=-0.16624882440418567;\n  lnza=lnza * epsilon + 0.19999954120254515;\n  lnza=lnza * epsilon + -0.2499999997677497;\n  lnza=lnza * epsilon + 0.3333333333332802;\n  lnza=lnza * epsilon + -0.5;\n  lnza=lnza * epsilon + 1.0;\n  lnza=lnza * epsilon;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 288,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 6912,
                        "startLineNumber": 1108,
                        "startColumnNumber": 69,
                        "endLineNumber": 1328,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (x == 0) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  long bits=Double.doubleToLongBits(x);\n  if ((bits & 0x8000000000000000L) != 0 || x != x) {\n    if (x != 0.0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NaN;\n      }\n      return Double.NaN;\n    }\n  }\n  if (x == Double.POSITIVE_INFINITY) {\n    if (hiPrec != null) {\n      hiPrec[0]=Double.POSITIVE_INFINITY;\n    }\n    return Double.POSITIVE_INFINITY;\n  }\n  int exp=(int)(bits >> 52) - 1023;\n  if ((bits & 0x7ff0000000000000L) == 0) {\n    if (x == 0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NEGATIVE_INFINITY;\n      }\n      return Double.NEGATIVE_INFINITY;\n    }\n    bits<<=1;\n    while ((bits & 0x0010000000000000L) == 0) {\n      exp--;\n      bits<<=1;\n    }\n  }\n  if (exp == -1 || exp == 0) {\n    if (x < 1.01 && x > 0.99 && hiPrec == null) {\n      double xa=x - 1.0;\n      double xb=xa - x + 1.0;\n      double tmp=xa * HEX_40000000;\n      double aa=xa + tmp - tmp;\n      double ab=xa - aa;\n      xa=aa;\n      xb=ab;\n      double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n      double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n      for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n        aa=ya * xa;\n        ab=ya * xb + yb * xa + yb * xb;\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n        aa=ya + LN_QUICK_COEF[i][0];\n        ab=yb + LN_QUICK_COEF[i][1];\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n      }\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      return ya + yb;\n    }\n  }\n  double lnm[]=lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n  double epsilon=(bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n  double lnza=0.0;\n  double lnzb=0.0;\n  if (hiPrec != null) {\n    double tmp=epsilon * HEX_40000000;\n    double aa=epsilon + tmp - tmp;\n    double ab=epsilon - aa;\n    double xa=aa;\n    double xb=ab;\n    double numer=bits & 0x3ffffffffffL;\n    double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n    aa=numer - xa * denom - xb * denom;\n    xb+=aa / denom;\n    double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n    double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n    for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_HI_PREC_COEF[i][0];\n      ab=yb + LN_HI_PREC_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    lnza=aa + ab;\n    lnzb=-(lnza - aa - ab);\n  }\n else {\n    lnza=-0.16624882440418567;\n    lnza=lnza * epsilon + 0.19999954120254515;\n    lnza=lnza * epsilon + -0.2499999997677497;\n    lnza=lnza * epsilon + 0.3333333333332802;\n    lnza=lnza * epsilon + -0.5;\n    lnza=lnza * epsilon + 1.0;\n    lnza=lnza * epsilon;\n  }\n  double a=LN_2_A * exp;\n  double b=0.0;\n  double c=a + lnm[0];\n  double d=-(c - a - lnm[0]);\n  a=c;\n  b=b + d;\n  c=a + lnza;\n  d=-(c - a - lnza);\n  a=c;\n  b=b + d;\n  c=a + LN_2_B * exp;\n  d=-(c - a - LN_2_B * exp);\n  a=c;\n  b=b + d;\n  c=a + lnm[1];\n  d=-(c - a - lnm[1]);\n  a=c;\n  b=b + d;\n  c=a + lnzb;\n  d=-(c - a - lnzb);\n  a=c;\n  b=b + d;\n  if (hiPrec != null) {\n    hiPrec[0]=a;\n    hiPrec[1]=b;\n  }\n  return a + b;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 883,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7218,
                        "startLineNumber": 1102,
                        "startColumnNumber": 4,
                        "endLineNumber": 1328,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Internal helper method for natural logarithm function.\n * @param x original argument of the natural logarithm function\n * @param hiPrec extra bits of precision on output (To Be Confirmed)\n * @return log(x)\n */\nprivate static double log(final double x,final double[] hiPrec){\n  if (x == 0) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  long bits=Double.doubleToLongBits(x);\n  if ((bits & 0x8000000000000000L) != 0 || x != x) {\n    if (x != 0.0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NaN;\n      }\n      return Double.NaN;\n    }\n  }\n  if (x == Double.POSITIVE_INFINITY) {\n    if (hiPrec != null) {\n      hiPrec[0]=Double.POSITIVE_INFINITY;\n    }\n    return Double.POSITIVE_INFINITY;\n  }\n  int exp=(int)(bits >> 52) - 1023;\n  if ((bits & 0x7ff0000000000000L) == 0) {\n    if (x == 0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NEGATIVE_INFINITY;\n      }\n      return Double.NEGATIVE_INFINITY;\n    }\n    bits<<=1;\n    while ((bits & 0x0010000000000000L) == 0) {\n      exp--;\n      bits<<=1;\n    }\n  }\n  if (exp == -1 || exp == 0) {\n    if (x < 1.01 && x > 0.99 && hiPrec == null) {\n      double xa=x - 1.0;\n      double xb=xa - x + 1.0;\n      double tmp=xa * HEX_40000000;\n      double aa=xa + tmp - tmp;\n      double ab=xa - aa;\n      xa=aa;\n      xb=ab;\n      double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n      double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n      for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n        aa=ya * xa;\n        ab=ya * xb + yb * xa + yb * xb;\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n        aa=ya + LN_QUICK_COEF[i][0];\n        ab=yb + LN_QUICK_COEF[i][1];\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n      }\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      return ya + yb;\n    }\n  }\n  double lnm[]=lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n  double epsilon=(bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n  double lnza=0.0;\n  double lnzb=0.0;\n  if (hiPrec != null) {\n    double tmp=epsilon * HEX_40000000;\n    double aa=epsilon + tmp - tmp;\n    double ab=epsilon - aa;\n    double xa=aa;\n    double xb=ab;\n    double numer=bits & 0x3ffffffffffL;\n    double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n    aa=numer - xa * denom - xb * denom;\n    xb+=aa / denom;\n    double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n    double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n    for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_HI_PREC_COEF[i][0];\n      ab=yb + LN_HI_PREC_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    lnza=aa + ab;\n    lnzb=-(lnza - aa - ab);\n  }\n else {\n    lnza=-0.16624882440418567;\n    lnza=lnza * epsilon + 0.19999954120254515;\n    lnza=lnza * epsilon + -0.2499999997677497;\n    lnza=lnza * epsilon + 0.3333333333332802;\n    lnza=lnza * epsilon + -0.5;\n    lnza=lnza * epsilon + 1.0;\n    lnza=lnza * epsilon;\n  }\n  double a=LN_2_A * exp;\n  double b=0.0;\n  double c=a + lnm[0];\n  double d=-(c - a - lnm[0]);\n  a=c;\n  b=b + d;\n  c=a + lnza;\n  d=-(c - a - lnza);\n  a=c;\n  b=b + d;\n  c=a + LN_2_B * exp;\n  d=-(c - a - LN_2_B * exp);\n  a=c;\n  b=b + d;\n  c=a + lnm[1];\n  d=-(c - a - lnm[1]);\n  a=c;\n  b=b + d;\n  c=a + lnzb;\n  d=-(c - a - lnzb);\n  a=c;\n  b=b + d;\n  if (hiPrec != null) {\n    hiPrec[0]=a;\n    hiPrec[1]=b;\n  }\n  return a + b;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 899,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 17,
                    "startLineNumber": 1233,
                    "startColumnNumber": 12,
                    "endLineNumber": 1233,
                    "endColumnNumber": 29
                },
                "nodeContext": "xb+=aa / denom;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 6,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "double"
        },
        {
            "nodeContext": "aa",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 1244,
                "startColumnNumber": 22,
                "endLineNumber": 1244,
                "endColumnNumber": 24
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 17,
                        "startLineNumber": 1244,
                        "startColumnNumber": 22,
                        "endLineNumber": 1244,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "aa * HEX_40000000",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 23,
                        "startLineNumber": 1244,
                        "startColumnNumber": 16,
                        "endLineNumber": 1244,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "tmp=aa * HEX_40000000",
                    "nodeType": "Assignment",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 24,
                        "startLineNumber": 1244,
                        "startColumnNumber": 16,
                        "endLineNumber": 1244,
                        "endColumnNumber": 40
                    },
                    "nodeContext": "tmp=aa * HEX_40000000;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 6,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 585,
                        "startLineNumber": 1239,
                        "startColumnNumber": 66,
                        "endLineNumber": 1255,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n  aa=ya + LN_HI_PREC_COEF[i][0];\n  ab=yb + LN_HI_PREC_COEF[i][1];\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 85,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 639,
                        "startLineNumber": 1239,
                        "startColumnNumber": 12,
                        "endLineNumber": 1255,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n  aa=ya + LN_HI_PREC_COEF[i][0];\n  ab=yb + LN_HI_PREC_COEF[i][1];\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 100,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1686,
                        "startLineNumber": 1221,
                        "startColumnNumber": 28,
                        "endLineNumber": 1269,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  double tmp=epsilon * HEX_40000000;\n  double aa=epsilon + tmp - tmp;\n  double ab=epsilon - aa;\n  double xa=aa;\n  double xb=ab;\n  double numer=bits & 0x3ffffffffffL;\n  double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n  aa=numer - xa * denom - xb * denom;\n  xb+=aa / denom;\n  double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n  double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n  for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    aa=ya + LN_HI_PREC_COEF[i][0];\n    ab=yb + LN_HI_PREC_COEF[i][1];\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n  }\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  lnza=aa + ab;\n  lnzb=-(lnza - aa - ab);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 230,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2163,
                        "startLineNumber": 1221,
                        "startColumnNumber": 8,
                        "endLineNumber": 1279,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (hiPrec != null) {\n  double tmp=epsilon * HEX_40000000;\n  double aa=epsilon + tmp - tmp;\n  double ab=epsilon - aa;\n  double xa=aa;\n  double xb=ab;\n  double numer=bits & 0x3ffffffffffL;\n  double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n  aa=numer - xa * denom - xb * denom;\n  xb+=aa / denom;\n  double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n  double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n  for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    aa=ya + LN_HI_PREC_COEF[i][0];\n    ab=yb + LN_HI_PREC_COEF[i][1];\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n  }\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  lnza=aa + ab;\n  lnzb=-(lnza - aa - ab);\n}\n else {\n  lnza=-0.16624882440418567;\n  lnza=lnza * epsilon + 0.19999954120254515;\n  lnza=lnza * epsilon + -0.2499999997677497;\n  lnza=lnza * epsilon + 0.3333333333332802;\n  lnza=lnza * epsilon + -0.5;\n  lnza=lnza * epsilon + 1.0;\n  lnza=lnza * epsilon;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 288,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 6912,
                        "startLineNumber": 1108,
                        "startColumnNumber": 69,
                        "endLineNumber": 1328,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (x == 0) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  long bits=Double.doubleToLongBits(x);\n  if ((bits & 0x8000000000000000L) != 0 || x != x) {\n    if (x != 0.0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NaN;\n      }\n      return Double.NaN;\n    }\n  }\n  if (x == Double.POSITIVE_INFINITY) {\n    if (hiPrec != null) {\n      hiPrec[0]=Double.POSITIVE_INFINITY;\n    }\n    return Double.POSITIVE_INFINITY;\n  }\n  int exp=(int)(bits >> 52) - 1023;\n  if ((bits & 0x7ff0000000000000L) == 0) {\n    if (x == 0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NEGATIVE_INFINITY;\n      }\n      return Double.NEGATIVE_INFINITY;\n    }\n    bits<<=1;\n    while ((bits & 0x0010000000000000L) == 0) {\n      exp--;\n      bits<<=1;\n    }\n  }\n  if (exp == -1 || exp == 0) {\n    if (x < 1.01 && x > 0.99 && hiPrec == null) {\n      double xa=x - 1.0;\n      double xb=xa - x + 1.0;\n      double tmp=xa * HEX_40000000;\n      double aa=xa + tmp - tmp;\n      double ab=xa - aa;\n      xa=aa;\n      xb=ab;\n      double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n      double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n      for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n        aa=ya * xa;\n        ab=ya * xb + yb * xa + yb * xb;\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n        aa=ya + LN_QUICK_COEF[i][0];\n        ab=yb + LN_QUICK_COEF[i][1];\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n      }\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      return ya + yb;\n    }\n  }\n  double lnm[]=lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n  double epsilon=(bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n  double lnza=0.0;\n  double lnzb=0.0;\n  if (hiPrec != null) {\n    double tmp=epsilon * HEX_40000000;\n    double aa=epsilon + tmp - tmp;\n    double ab=epsilon - aa;\n    double xa=aa;\n    double xb=ab;\n    double numer=bits & 0x3ffffffffffL;\n    double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n    aa=numer - xa * denom - xb * denom;\n    xb+=aa / denom;\n    double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n    double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n    for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_HI_PREC_COEF[i][0];\n      ab=yb + LN_HI_PREC_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    lnza=aa + ab;\n    lnzb=-(lnza - aa - ab);\n  }\n else {\n    lnza=-0.16624882440418567;\n    lnza=lnza * epsilon + 0.19999954120254515;\n    lnza=lnza * epsilon + -0.2499999997677497;\n    lnza=lnza * epsilon + 0.3333333333332802;\n    lnza=lnza * epsilon + -0.5;\n    lnza=lnza * epsilon + 1.0;\n    lnza=lnza * epsilon;\n  }\n  double a=LN_2_A * exp;\n  double b=0.0;\n  double c=a + lnm[0];\n  double d=-(c - a - lnm[0]);\n  a=c;\n  b=b + d;\n  c=a + lnza;\n  d=-(c - a - lnza);\n  a=c;\n  b=b + d;\n  c=a + LN_2_B * exp;\n  d=-(c - a - LN_2_B * exp);\n  a=c;\n  b=b + d;\n  c=a + lnm[1];\n  d=-(c - a - lnm[1]);\n  a=c;\n  b=b + d;\n  c=a + lnzb;\n  d=-(c - a - lnzb);\n  a=c;\n  b=b + d;\n  if (hiPrec != null) {\n    hiPrec[0]=a;\n    hiPrec[1]=b;\n  }\n  return a + b;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 883,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7218,
                        "startLineNumber": 1102,
                        "startColumnNumber": 4,
                        "endLineNumber": 1328,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Internal helper method for natural logarithm function.\n * @param x original argument of the natural logarithm function\n * @param hiPrec extra bits of precision on output (To Be Confirmed)\n * @return log(x)\n */\nprivate static double log(final double x,final double[] hiPrec){\n  if (x == 0) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  long bits=Double.doubleToLongBits(x);\n  if ((bits & 0x8000000000000000L) != 0 || x != x) {\n    if (x != 0.0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NaN;\n      }\n      return Double.NaN;\n    }\n  }\n  if (x == Double.POSITIVE_INFINITY) {\n    if (hiPrec != null) {\n      hiPrec[0]=Double.POSITIVE_INFINITY;\n    }\n    return Double.POSITIVE_INFINITY;\n  }\n  int exp=(int)(bits >> 52) - 1023;\n  if ((bits & 0x7ff0000000000000L) == 0) {\n    if (x == 0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NEGATIVE_INFINITY;\n      }\n      return Double.NEGATIVE_INFINITY;\n    }\n    bits<<=1;\n    while ((bits & 0x0010000000000000L) == 0) {\n      exp--;\n      bits<<=1;\n    }\n  }\n  if (exp == -1 || exp == 0) {\n    if (x < 1.01 && x > 0.99 && hiPrec == null) {\n      double xa=x - 1.0;\n      double xb=xa - x + 1.0;\n      double tmp=xa * HEX_40000000;\n      double aa=xa + tmp - tmp;\n      double ab=xa - aa;\n      xa=aa;\n      xb=ab;\n      double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n      double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n      for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n        aa=ya * xa;\n        ab=ya * xb + yb * xa + yb * xb;\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n        aa=ya + LN_QUICK_COEF[i][0];\n        ab=yb + LN_QUICK_COEF[i][1];\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n      }\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      return ya + yb;\n    }\n  }\n  double lnm[]=lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n  double epsilon=(bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n  double lnza=0.0;\n  double lnzb=0.0;\n  if (hiPrec != null) {\n    double tmp=epsilon * HEX_40000000;\n    double aa=epsilon + tmp - tmp;\n    double ab=epsilon - aa;\n    double xa=aa;\n    double xb=ab;\n    double numer=bits & 0x3ffffffffffL;\n    double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n    aa=numer - xa * denom - xb * denom;\n    xb+=aa / denom;\n    double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n    double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n    for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_HI_PREC_COEF[i][0];\n      ab=yb + LN_HI_PREC_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    lnza=aa + ab;\n    lnzb=-(lnza - aa - ab);\n  }\n else {\n    lnza=-0.16624882440418567;\n    lnza=lnza * epsilon + 0.19999954120254515;\n    lnza=lnza * epsilon + -0.2499999997677497;\n    lnza=lnza * epsilon + 0.3333333333332802;\n    lnza=lnza * epsilon + -0.5;\n    lnza=lnza * epsilon + 1.0;\n    lnza=lnza * epsilon;\n  }\n  double a=LN_2_A * exp;\n  double b=0.0;\n  double c=a + lnm[0];\n  double d=-(c - a - lnm[0]);\n  a=c;\n  b=b + d;\n  c=a + lnza;\n  d=-(c - a - lnza);\n  a=c;\n  b=b + d;\n  c=a + LN_2_B * exp;\n  d=-(c - a - LN_2_B * exp);\n  a=c;\n  b=b + d;\n  c=a + lnm[1];\n  d=-(c - a - lnm[1]);\n  a=c;\n  b=b + d;\n  c=a + lnzb;\n  d=-(c - a - lnzb);\n  a=c;\n  b=b + d;\n  if (hiPrec != null) {\n    hiPrec[0]=a;\n    hiPrec[1]=b;\n  }\n  return a + b;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 899,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 24,
                    "startLineNumber": 1244,
                    "startColumnNumber": 16,
                    "endLineNumber": 1244,
                    "endColumnNumber": 40
                },
                "nodeContext": "tmp=aa * HEX_40000000;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 6,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "double"
        },
        {
            "nodeContext": "aa",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 1245,
                "startColumnNumber": 21,
                "endLineNumber": 1245,
                "endColumnNumber": 23
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 8,
                        "startLineNumber": 1245,
                        "startColumnNumber": 21,
                        "endLineNumber": 1245,
                        "endColumnNumber": 29
                    },
                    "nodeContext": "aa + tmp",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 14,
                        "startLineNumber": 1245,
                        "startColumnNumber": 21,
                        "endLineNumber": 1245,
                        "endColumnNumber": 35
                    },
                    "nodeContext": "aa + tmp - tmp",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 19,
                        "startLineNumber": 1245,
                        "startColumnNumber": 16,
                        "endLineNumber": 1245,
                        "endColumnNumber": 35
                    },
                    "nodeContext": "ya=aa + tmp - tmp",
                    "nodeType": "Assignment",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 20,
                        "startLineNumber": 1245,
                        "startColumnNumber": 16,
                        "endLineNumber": 1245,
                        "endColumnNumber": 36
                    },
                    "nodeContext": "ya=aa + tmp - tmp;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 585,
                        "startLineNumber": 1239,
                        "startColumnNumber": 66,
                        "endLineNumber": 1255,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n  aa=ya + LN_HI_PREC_COEF[i][0];\n  ab=yb + LN_HI_PREC_COEF[i][1];\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 85,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 639,
                        "startLineNumber": 1239,
                        "startColumnNumber": 12,
                        "endLineNumber": 1255,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n  aa=ya + LN_HI_PREC_COEF[i][0];\n  ab=yb + LN_HI_PREC_COEF[i][1];\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 100,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1686,
                        "startLineNumber": 1221,
                        "startColumnNumber": 28,
                        "endLineNumber": 1269,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  double tmp=epsilon * HEX_40000000;\n  double aa=epsilon + tmp - tmp;\n  double ab=epsilon - aa;\n  double xa=aa;\n  double xb=ab;\n  double numer=bits & 0x3ffffffffffL;\n  double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n  aa=numer - xa * denom - xb * denom;\n  xb+=aa / denom;\n  double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n  double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n  for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    aa=ya + LN_HI_PREC_COEF[i][0];\n    ab=yb + LN_HI_PREC_COEF[i][1];\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n  }\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  lnza=aa + ab;\n  lnzb=-(lnza - aa - ab);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 230,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2163,
                        "startLineNumber": 1221,
                        "startColumnNumber": 8,
                        "endLineNumber": 1279,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (hiPrec != null) {\n  double tmp=epsilon * HEX_40000000;\n  double aa=epsilon + tmp - tmp;\n  double ab=epsilon - aa;\n  double xa=aa;\n  double xb=ab;\n  double numer=bits & 0x3ffffffffffL;\n  double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n  aa=numer - xa * denom - xb * denom;\n  xb+=aa / denom;\n  double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n  double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n  for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    aa=ya + LN_HI_PREC_COEF[i][0];\n    ab=yb + LN_HI_PREC_COEF[i][1];\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n  }\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  lnza=aa + ab;\n  lnzb=-(lnza - aa - ab);\n}\n else {\n  lnza=-0.16624882440418567;\n  lnza=lnza * epsilon + 0.19999954120254515;\n  lnza=lnza * epsilon + -0.2499999997677497;\n  lnza=lnza * epsilon + 0.3333333333332802;\n  lnza=lnza * epsilon + -0.5;\n  lnza=lnza * epsilon + 1.0;\n  lnza=lnza * epsilon;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 288,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 6912,
                        "startLineNumber": 1108,
                        "startColumnNumber": 69,
                        "endLineNumber": 1328,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (x == 0) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  long bits=Double.doubleToLongBits(x);\n  if ((bits & 0x8000000000000000L) != 0 || x != x) {\n    if (x != 0.0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NaN;\n      }\n      return Double.NaN;\n    }\n  }\n  if (x == Double.POSITIVE_INFINITY) {\n    if (hiPrec != null) {\n      hiPrec[0]=Double.POSITIVE_INFINITY;\n    }\n    return Double.POSITIVE_INFINITY;\n  }\n  int exp=(int)(bits >> 52) - 1023;\n  if ((bits & 0x7ff0000000000000L) == 0) {\n    if (x == 0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NEGATIVE_INFINITY;\n      }\n      return Double.NEGATIVE_INFINITY;\n    }\n    bits<<=1;\n    while ((bits & 0x0010000000000000L) == 0) {\n      exp--;\n      bits<<=1;\n    }\n  }\n  if (exp == -1 || exp == 0) {\n    if (x < 1.01 && x > 0.99 && hiPrec == null) {\n      double xa=x - 1.0;\n      double xb=xa - x + 1.0;\n      double tmp=xa * HEX_40000000;\n      double aa=xa + tmp - tmp;\n      double ab=xa - aa;\n      xa=aa;\n      xb=ab;\n      double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n      double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n      for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n        aa=ya * xa;\n        ab=ya * xb + yb * xa + yb * xb;\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n        aa=ya + LN_QUICK_COEF[i][0];\n        ab=yb + LN_QUICK_COEF[i][1];\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n      }\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      return ya + yb;\n    }\n  }\n  double lnm[]=lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n  double epsilon=(bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n  double lnza=0.0;\n  double lnzb=0.0;\n  if (hiPrec != null) {\n    double tmp=epsilon * HEX_40000000;\n    double aa=epsilon + tmp - tmp;\n    double ab=epsilon - aa;\n    double xa=aa;\n    double xb=ab;\n    double numer=bits & 0x3ffffffffffL;\n    double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n    aa=numer - xa * denom - xb * denom;\n    xb+=aa / denom;\n    double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n    double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n    for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_HI_PREC_COEF[i][0];\n      ab=yb + LN_HI_PREC_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    lnza=aa + ab;\n    lnzb=-(lnza - aa - ab);\n  }\n else {\n    lnza=-0.16624882440418567;\n    lnza=lnza * epsilon + 0.19999954120254515;\n    lnza=lnza * epsilon + -0.2499999997677497;\n    lnza=lnza * epsilon + 0.3333333333332802;\n    lnza=lnza * epsilon + -0.5;\n    lnza=lnza * epsilon + 1.0;\n    lnza=lnza * epsilon;\n  }\n  double a=LN_2_A * exp;\n  double b=0.0;\n  double c=a + lnm[0];\n  double d=-(c - a - lnm[0]);\n  a=c;\n  b=b + d;\n  c=a + lnza;\n  d=-(c - a - lnza);\n  a=c;\n  b=b + d;\n  c=a + LN_2_B * exp;\n  d=-(c - a - LN_2_B * exp);\n  a=c;\n  b=b + d;\n  c=a + lnm[1];\n  d=-(c - a - lnm[1]);\n  a=c;\n  b=b + d;\n  c=a + lnzb;\n  d=-(c - a - lnzb);\n  a=c;\n  b=b + d;\n  if (hiPrec != null) {\n    hiPrec[0]=a;\n    hiPrec[1]=b;\n  }\n  return a + b;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 883,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7218,
                        "startLineNumber": 1102,
                        "startColumnNumber": 4,
                        "endLineNumber": 1328,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Internal helper method for natural logarithm function.\n * @param x original argument of the natural logarithm function\n * @param hiPrec extra bits of precision on output (To Be Confirmed)\n * @return log(x)\n */\nprivate static double log(final double x,final double[] hiPrec){\n  if (x == 0) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  long bits=Double.doubleToLongBits(x);\n  if ((bits & 0x8000000000000000L) != 0 || x != x) {\n    if (x != 0.0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NaN;\n      }\n      return Double.NaN;\n    }\n  }\n  if (x == Double.POSITIVE_INFINITY) {\n    if (hiPrec != null) {\n      hiPrec[0]=Double.POSITIVE_INFINITY;\n    }\n    return Double.POSITIVE_INFINITY;\n  }\n  int exp=(int)(bits >> 52) - 1023;\n  if ((bits & 0x7ff0000000000000L) == 0) {\n    if (x == 0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NEGATIVE_INFINITY;\n      }\n      return Double.NEGATIVE_INFINITY;\n    }\n    bits<<=1;\n    while ((bits & 0x0010000000000000L) == 0) {\n      exp--;\n      bits<<=1;\n    }\n  }\n  if (exp == -1 || exp == 0) {\n    if (x < 1.01 && x > 0.99 && hiPrec == null) {\n      double xa=x - 1.0;\n      double xb=xa - x + 1.0;\n      double tmp=xa * HEX_40000000;\n      double aa=xa + tmp - tmp;\n      double ab=xa - aa;\n      xa=aa;\n      xb=ab;\n      double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n      double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n      for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n        aa=ya * xa;\n        ab=ya * xb + yb * xa + yb * xb;\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n        aa=ya + LN_QUICK_COEF[i][0];\n        ab=yb + LN_QUICK_COEF[i][1];\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n      }\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      return ya + yb;\n    }\n  }\n  double lnm[]=lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n  double epsilon=(bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n  double lnza=0.0;\n  double lnzb=0.0;\n  if (hiPrec != null) {\n    double tmp=epsilon * HEX_40000000;\n    double aa=epsilon + tmp - tmp;\n    double ab=epsilon - aa;\n    double xa=aa;\n    double xb=ab;\n    double numer=bits & 0x3ffffffffffL;\n    double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n    aa=numer - xa * denom - xb * denom;\n    xb+=aa / denom;\n    double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n    double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n    for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_HI_PREC_COEF[i][0];\n      ab=yb + LN_HI_PREC_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    lnza=aa + ab;\n    lnzb=-(lnza - aa - ab);\n  }\n else {\n    lnza=-0.16624882440418567;\n    lnza=lnza * epsilon + 0.19999954120254515;\n    lnza=lnza * epsilon + -0.2499999997677497;\n    lnza=lnza * epsilon + 0.3333333333332802;\n    lnza=lnza * epsilon + -0.5;\n    lnza=lnza * epsilon + 1.0;\n    lnza=lnza * epsilon;\n  }\n  double a=LN_2_A * exp;\n  double b=0.0;\n  double c=a + lnm[0];\n  double d=-(c - a - lnm[0]);\n  a=c;\n  b=b + d;\n  c=a + lnza;\n  d=-(c - a - lnza);\n  a=c;\n  b=b + d;\n  c=a + LN_2_B * exp;\n  d=-(c - a - LN_2_B * exp);\n  a=c;\n  b=b + d;\n  c=a + lnm[1];\n  d=-(c - a - lnm[1]);\n  a=c;\n  b=b + d;\n  c=a + lnzb;\n  d=-(c - a - lnzb);\n  a=c;\n  b=b + d;\n  if (hiPrec != null) {\n    hiPrec[0]=a;\n    hiPrec[1]=b;\n  }\n  return a + b;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 899,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 20,
                    "startLineNumber": 1245,
                    "startColumnNumber": 16,
                    "endLineNumber": 1245,
                    "endColumnNumber": 36
                },
                "nodeContext": "ya=aa + tmp - tmp;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "double"
        },
        {
            "nodeContext": "aa",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 1246,
                "startColumnNumber": 21,
                "endLineNumber": 1246,
                "endColumnNumber": 23
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 1246,
                        "startColumnNumber": 21,
                        "endLineNumber": 1246,
                        "endColumnNumber": 28
                    },
                    "nodeContext": "aa - ya",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 12,
                        "startLineNumber": 1246,
                        "startColumnNumber": 21,
                        "endLineNumber": 1246,
                        "endColumnNumber": 33
                    },
                    "nodeContext": "aa - ya + ab",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 17,
                        "startLineNumber": 1246,
                        "startColumnNumber": 16,
                        "endLineNumber": 1246,
                        "endColumnNumber": 33
                    },
                    "nodeContext": "yb=aa - ya + ab",
                    "nodeType": "Assignment",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 18,
                        "startLineNumber": 1246,
                        "startColumnNumber": 16,
                        "endLineNumber": 1246,
                        "endColumnNumber": 34
                    },
                    "nodeContext": "yb=aa - ya + ab;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 585,
                        "startLineNumber": 1239,
                        "startColumnNumber": 66,
                        "endLineNumber": 1255,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n  aa=ya + LN_HI_PREC_COEF[i][0];\n  ab=yb + LN_HI_PREC_COEF[i][1];\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 85,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 639,
                        "startLineNumber": 1239,
                        "startColumnNumber": 12,
                        "endLineNumber": 1255,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n  aa=ya + LN_HI_PREC_COEF[i][0];\n  ab=yb + LN_HI_PREC_COEF[i][1];\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 100,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1686,
                        "startLineNumber": 1221,
                        "startColumnNumber": 28,
                        "endLineNumber": 1269,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  double tmp=epsilon * HEX_40000000;\n  double aa=epsilon + tmp - tmp;\n  double ab=epsilon - aa;\n  double xa=aa;\n  double xb=ab;\n  double numer=bits & 0x3ffffffffffL;\n  double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n  aa=numer - xa * denom - xb * denom;\n  xb+=aa / denom;\n  double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n  double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n  for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    aa=ya + LN_HI_PREC_COEF[i][0];\n    ab=yb + LN_HI_PREC_COEF[i][1];\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n  }\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  lnza=aa + ab;\n  lnzb=-(lnza - aa - ab);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 230,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2163,
                        "startLineNumber": 1221,
                        "startColumnNumber": 8,
                        "endLineNumber": 1279,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (hiPrec != null) {\n  double tmp=epsilon * HEX_40000000;\n  double aa=epsilon + tmp - tmp;\n  double ab=epsilon - aa;\n  double xa=aa;\n  double xb=ab;\n  double numer=bits & 0x3ffffffffffL;\n  double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n  aa=numer - xa * denom - xb * denom;\n  xb+=aa / denom;\n  double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n  double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n  for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    aa=ya + LN_HI_PREC_COEF[i][0];\n    ab=yb + LN_HI_PREC_COEF[i][1];\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n  }\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  lnza=aa + ab;\n  lnzb=-(lnza - aa - ab);\n}\n else {\n  lnza=-0.16624882440418567;\n  lnza=lnza * epsilon + 0.19999954120254515;\n  lnza=lnza * epsilon + -0.2499999997677497;\n  lnza=lnza * epsilon + 0.3333333333332802;\n  lnza=lnza * epsilon + -0.5;\n  lnza=lnza * epsilon + 1.0;\n  lnza=lnza * epsilon;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 288,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 6912,
                        "startLineNumber": 1108,
                        "startColumnNumber": 69,
                        "endLineNumber": 1328,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (x == 0) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  long bits=Double.doubleToLongBits(x);\n  if ((bits & 0x8000000000000000L) != 0 || x != x) {\n    if (x != 0.0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NaN;\n      }\n      return Double.NaN;\n    }\n  }\n  if (x == Double.POSITIVE_INFINITY) {\n    if (hiPrec != null) {\n      hiPrec[0]=Double.POSITIVE_INFINITY;\n    }\n    return Double.POSITIVE_INFINITY;\n  }\n  int exp=(int)(bits >> 52) - 1023;\n  if ((bits & 0x7ff0000000000000L) == 0) {\n    if (x == 0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NEGATIVE_INFINITY;\n      }\n      return Double.NEGATIVE_INFINITY;\n    }\n    bits<<=1;\n    while ((bits & 0x0010000000000000L) == 0) {\n      exp--;\n      bits<<=1;\n    }\n  }\n  if (exp == -1 || exp == 0) {\n    if (x < 1.01 && x > 0.99 && hiPrec == null) {\n      double xa=x - 1.0;\n      double xb=xa - x + 1.0;\n      double tmp=xa * HEX_40000000;\n      double aa=xa + tmp - tmp;\n      double ab=xa - aa;\n      xa=aa;\n      xb=ab;\n      double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n      double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n      for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n        aa=ya * xa;\n        ab=ya * xb + yb * xa + yb * xb;\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n        aa=ya + LN_QUICK_COEF[i][0];\n        ab=yb + LN_QUICK_COEF[i][1];\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n      }\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      return ya + yb;\n    }\n  }\n  double lnm[]=lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n  double epsilon=(bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n  double lnza=0.0;\n  double lnzb=0.0;\n  if (hiPrec != null) {\n    double tmp=epsilon * HEX_40000000;\n    double aa=epsilon + tmp - tmp;\n    double ab=epsilon - aa;\n    double xa=aa;\n    double xb=ab;\n    double numer=bits & 0x3ffffffffffL;\n    double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n    aa=numer - xa * denom - xb * denom;\n    xb+=aa / denom;\n    double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n    double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n    for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_HI_PREC_COEF[i][0];\n      ab=yb + LN_HI_PREC_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    lnza=aa + ab;\n    lnzb=-(lnza - aa - ab);\n  }\n else {\n    lnza=-0.16624882440418567;\n    lnza=lnza * epsilon + 0.19999954120254515;\n    lnza=lnza * epsilon + -0.2499999997677497;\n    lnza=lnza * epsilon + 0.3333333333332802;\n    lnza=lnza * epsilon + -0.5;\n    lnza=lnza * epsilon + 1.0;\n    lnza=lnza * epsilon;\n  }\n  double a=LN_2_A * exp;\n  double b=0.0;\n  double c=a + lnm[0];\n  double d=-(c - a - lnm[0]);\n  a=c;\n  b=b + d;\n  c=a + lnza;\n  d=-(c - a - lnza);\n  a=c;\n  b=b + d;\n  c=a + LN_2_B * exp;\n  d=-(c - a - LN_2_B * exp);\n  a=c;\n  b=b + d;\n  c=a + lnm[1];\n  d=-(c - a - lnm[1]);\n  a=c;\n  b=b + d;\n  c=a + lnzb;\n  d=-(c - a - lnzb);\n  a=c;\n  b=b + d;\n  if (hiPrec != null) {\n    hiPrec[0]=a;\n    hiPrec[1]=b;\n  }\n  return a + b;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 883,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7218,
                        "startLineNumber": 1102,
                        "startColumnNumber": 4,
                        "endLineNumber": 1328,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Internal helper method for natural logarithm function.\n * @param x original argument of the natural logarithm function\n * @param hiPrec extra bits of precision on output (To Be Confirmed)\n * @return log(x)\n */\nprivate static double log(final double x,final double[] hiPrec){\n  if (x == 0) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  long bits=Double.doubleToLongBits(x);\n  if ((bits & 0x8000000000000000L) != 0 || x != x) {\n    if (x != 0.0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NaN;\n      }\n      return Double.NaN;\n    }\n  }\n  if (x == Double.POSITIVE_INFINITY) {\n    if (hiPrec != null) {\n      hiPrec[0]=Double.POSITIVE_INFINITY;\n    }\n    return Double.POSITIVE_INFINITY;\n  }\n  int exp=(int)(bits >> 52) - 1023;\n  if ((bits & 0x7ff0000000000000L) == 0) {\n    if (x == 0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NEGATIVE_INFINITY;\n      }\n      return Double.NEGATIVE_INFINITY;\n    }\n    bits<<=1;\n    while ((bits & 0x0010000000000000L) == 0) {\n      exp--;\n      bits<<=1;\n    }\n  }\n  if (exp == -1 || exp == 0) {\n    if (x < 1.01 && x > 0.99 && hiPrec == null) {\n      double xa=x - 1.0;\n      double xb=xa - x + 1.0;\n      double tmp=xa * HEX_40000000;\n      double aa=xa + tmp - tmp;\n      double ab=xa - aa;\n      xa=aa;\n      xb=ab;\n      double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n      double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n      for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n        aa=ya * xa;\n        ab=ya * xb + yb * xa + yb * xb;\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n        aa=ya + LN_QUICK_COEF[i][0];\n        ab=yb + LN_QUICK_COEF[i][1];\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n      }\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      return ya + yb;\n    }\n  }\n  double lnm[]=lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n  double epsilon=(bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n  double lnza=0.0;\n  double lnzb=0.0;\n  if (hiPrec != null) {\n    double tmp=epsilon * HEX_40000000;\n    double aa=epsilon + tmp - tmp;\n    double ab=epsilon - aa;\n    double xa=aa;\n    double xb=ab;\n    double numer=bits & 0x3ffffffffffL;\n    double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n    aa=numer - xa * denom - xb * denom;\n    xb+=aa / denom;\n    double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n    double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n    for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_HI_PREC_COEF[i][0];\n      ab=yb + LN_HI_PREC_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    lnza=aa + ab;\n    lnzb=-(lnza - aa - ab);\n  }\n else {\n    lnza=-0.16624882440418567;\n    lnza=lnza * epsilon + 0.19999954120254515;\n    lnza=lnza * epsilon + -0.2499999997677497;\n    lnza=lnza * epsilon + 0.3333333333332802;\n    lnza=lnza * epsilon + -0.5;\n    lnza=lnza * epsilon + 1.0;\n    lnza=lnza * epsilon;\n  }\n  double a=LN_2_A * exp;\n  double b=0.0;\n  double c=a + lnm[0];\n  double d=-(c - a - lnm[0]);\n  a=c;\n  b=b + d;\n  c=a + lnza;\n  d=-(c - a - lnza);\n  a=c;\n  b=b + d;\n  c=a + LN_2_B * exp;\n  d=-(c - a - LN_2_B * exp);\n  a=c;\n  b=b + d;\n  c=a + lnm[1];\n  d=-(c - a - lnm[1]);\n  a=c;\n  b=b + d;\n  c=a + lnzb;\n  d=-(c - a - lnzb);\n  a=c;\n  b=b + d;\n  if (hiPrec != null) {\n    hiPrec[0]=a;\n    hiPrec[1]=b;\n  }\n  return a + b;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 899,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 18,
                    "startLineNumber": 1246,
                    "startColumnNumber": 16,
                    "endLineNumber": 1246,
                    "endColumnNumber": 34
                },
                "nodeContext": "yb=aa - ya + ab;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "double"
        },
        {
            "nodeContext": "aa",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 1252,
                "startColumnNumber": 22,
                "endLineNumber": 1252,
                "endColumnNumber": 24
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 17,
                        "startLineNumber": 1252,
                        "startColumnNumber": 22,
                        "endLineNumber": 1252,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "aa * HEX_40000000",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 23,
                        "startLineNumber": 1252,
                        "startColumnNumber": 16,
                        "endLineNumber": 1252,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "tmp=aa * HEX_40000000",
                    "nodeType": "Assignment",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 24,
                        "startLineNumber": 1252,
                        "startColumnNumber": 16,
                        "endLineNumber": 1252,
                        "endColumnNumber": 40
                    },
                    "nodeContext": "tmp=aa * HEX_40000000;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 6,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 585,
                        "startLineNumber": 1239,
                        "startColumnNumber": 66,
                        "endLineNumber": 1255,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n  aa=ya + LN_HI_PREC_COEF[i][0];\n  ab=yb + LN_HI_PREC_COEF[i][1];\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 85,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 639,
                        "startLineNumber": 1239,
                        "startColumnNumber": 12,
                        "endLineNumber": 1255,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n  aa=ya + LN_HI_PREC_COEF[i][0];\n  ab=yb + LN_HI_PREC_COEF[i][1];\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 100,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1686,
                        "startLineNumber": 1221,
                        "startColumnNumber": 28,
                        "endLineNumber": 1269,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  double tmp=epsilon * HEX_40000000;\n  double aa=epsilon + tmp - tmp;\n  double ab=epsilon - aa;\n  double xa=aa;\n  double xb=ab;\n  double numer=bits & 0x3ffffffffffL;\n  double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n  aa=numer - xa * denom - xb * denom;\n  xb+=aa / denom;\n  double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n  double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n  for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    aa=ya + LN_HI_PREC_COEF[i][0];\n    ab=yb + LN_HI_PREC_COEF[i][1];\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n  }\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  lnza=aa + ab;\n  lnzb=-(lnza - aa - ab);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 230,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2163,
                        "startLineNumber": 1221,
                        "startColumnNumber": 8,
                        "endLineNumber": 1279,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (hiPrec != null) {\n  double tmp=epsilon * HEX_40000000;\n  double aa=epsilon + tmp - tmp;\n  double ab=epsilon - aa;\n  double xa=aa;\n  double xb=ab;\n  double numer=bits & 0x3ffffffffffL;\n  double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n  aa=numer - xa * denom - xb * denom;\n  xb+=aa / denom;\n  double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n  double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n  for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    aa=ya + LN_HI_PREC_COEF[i][0];\n    ab=yb + LN_HI_PREC_COEF[i][1];\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n  }\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  lnza=aa + ab;\n  lnzb=-(lnza - aa - ab);\n}\n else {\n  lnza=-0.16624882440418567;\n  lnza=lnza * epsilon + 0.19999954120254515;\n  lnza=lnza * epsilon + -0.2499999997677497;\n  lnza=lnza * epsilon + 0.3333333333332802;\n  lnza=lnza * epsilon + -0.5;\n  lnza=lnza * epsilon + 1.0;\n  lnza=lnza * epsilon;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 288,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 6912,
                        "startLineNumber": 1108,
                        "startColumnNumber": 69,
                        "endLineNumber": 1328,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (x == 0) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  long bits=Double.doubleToLongBits(x);\n  if ((bits & 0x8000000000000000L) != 0 || x != x) {\n    if (x != 0.0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NaN;\n      }\n      return Double.NaN;\n    }\n  }\n  if (x == Double.POSITIVE_INFINITY) {\n    if (hiPrec != null) {\n      hiPrec[0]=Double.POSITIVE_INFINITY;\n    }\n    return Double.POSITIVE_INFINITY;\n  }\n  int exp=(int)(bits >> 52) - 1023;\n  if ((bits & 0x7ff0000000000000L) == 0) {\n    if (x == 0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NEGATIVE_INFINITY;\n      }\n      return Double.NEGATIVE_INFINITY;\n    }\n    bits<<=1;\n    while ((bits & 0x0010000000000000L) == 0) {\n      exp--;\n      bits<<=1;\n    }\n  }\n  if (exp == -1 || exp == 0) {\n    if (x < 1.01 && x > 0.99 && hiPrec == null) {\n      double xa=x - 1.0;\n      double xb=xa - x + 1.0;\n      double tmp=xa * HEX_40000000;\n      double aa=xa + tmp - tmp;\n      double ab=xa - aa;\n      xa=aa;\n      xb=ab;\n      double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n      double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n      for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n        aa=ya * xa;\n        ab=ya * xb + yb * xa + yb * xb;\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n        aa=ya + LN_QUICK_COEF[i][0];\n        ab=yb + LN_QUICK_COEF[i][1];\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n      }\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      return ya + yb;\n    }\n  }\n  double lnm[]=lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n  double epsilon=(bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n  double lnza=0.0;\n  double lnzb=0.0;\n  if (hiPrec != null) {\n    double tmp=epsilon * HEX_40000000;\n    double aa=epsilon + tmp - tmp;\n    double ab=epsilon - aa;\n    double xa=aa;\n    double xb=ab;\n    double numer=bits & 0x3ffffffffffL;\n    double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n    aa=numer - xa * denom - xb * denom;\n    xb+=aa / denom;\n    double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n    double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n    for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_HI_PREC_COEF[i][0];\n      ab=yb + LN_HI_PREC_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    lnza=aa + ab;\n    lnzb=-(lnza - aa - ab);\n  }\n else {\n    lnza=-0.16624882440418567;\n    lnza=lnza * epsilon + 0.19999954120254515;\n    lnza=lnza * epsilon + -0.2499999997677497;\n    lnza=lnza * epsilon + 0.3333333333332802;\n    lnza=lnza * epsilon + -0.5;\n    lnza=lnza * epsilon + 1.0;\n    lnza=lnza * epsilon;\n  }\n  double a=LN_2_A * exp;\n  double b=0.0;\n  double c=a + lnm[0];\n  double d=-(c - a - lnm[0]);\n  a=c;\n  b=b + d;\n  c=a + lnza;\n  d=-(c - a - lnza);\n  a=c;\n  b=b + d;\n  c=a + LN_2_B * exp;\n  d=-(c - a - LN_2_B * exp);\n  a=c;\n  b=b + d;\n  c=a + lnm[1];\n  d=-(c - a - lnm[1]);\n  a=c;\n  b=b + d;\n  c=a + lnzb;\n  d=-(c - a - lnzb);\n  a=c;\n  b=b + d;\n  if (hiPrec != null) {\n    hiPrec[0]=a;\n    hiPrec[1]=b;\n  }\n  return a + b;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 883,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7218,
                        "startLineNumber": 1102,
                        "startColumnNumber": 4,
                        "endLineNumber": 1328,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Internal helper method for natural logarithm function.\n * @param x original argument of the natural logarithm function\n * @param hiPrec extra bits of precision on output (To Be Confirmed)\n * @return log(x)\n */\nprivate static double log(final double x,final double[] hiPrec){\n  if (x == 0) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  long bits=Double.doubleToLongBits(x);\n  if ((bits & 0x8000000000000000L) != 0 || x != x) {\n    if (x != 0.0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NaN;\n      }\n      return Double.NaN;\n    }\n  }\n  if (x == Double.POSITIVE_INFINITY) {\n    if (hiPrec != null) {\n      hiPrec[0]=Double.POSITIVE_INFINITY;\n    }\n    return Double.POSITIVE_INFINITY;\n  }\n  int exp=(int)(bits >> 52) - 1023;\n  if ((bits & 0x7ff0000000000000L) == 0) {\n    if (x == 0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NEGATIVE_INFINITY;\n      }\n      return Double.NEGATIVE_INFINITY;\n    }\n    bits<<=1;\n    while ((bits & 0x0010000000000000L) == 0) {\n      exp--;\n      bits<<=1;\n    }\n  }\n  if (exp == -1 || exp == 0) {\n    if (x < 1.01 && x > 0.99 && hiPrec == null) {\n      double xa=x - 1.0;\n      double xb=xa - x + 1.0;\n      double tmp=xa * HEX_40000000;\n      double aa=xa + tmp - tmp;\n      double ab=xa - aa;\n      xa=aa;\n      xb=ab;\n      double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n      double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n      for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n        aa=ya * xa;\n        ab=ya * xb + yb * xa + yb * xb;\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n        aa=ya + LN_QUICK_COEF[i][0];\n        ab=yb + LN_QUICK_COEF[i][1];\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n      }\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      return ya + yb;\n    }\n  }\n  double lnm[]=lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n  double epsilon=(bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n  double lnza=0.0;\n  double lnzb=0.0;\n  if (hiPrec != null) {\n    double tmp=epsilon * HEX_40000000;\n    double aa=epsilon + tmp - tmp;\n    double ab=epsilon - aa;\n    double xa=aa;\n    double xb=ab;\n    double numer=bits & 0x3ffffffffffL;\n    double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n    aa=numer - xa * denom - xb * denom;\n    xb+=aa / denom;\n    double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n    double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n    for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_HI_PREC_COEF[i][0];\n      ab=yb + LN_HI_PREC_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    lnza=aa + ab;\n    lnzb=-(lnza - aa - ab);\n  }\n else {\n    lnza=-0.16624882440418567;\n    lnza=lnza * epsilon + 0.19999954120254515;\n    lnza=lnza * epsilon + -0.2499999997677497;\n    lnza=lnza * epsilon + 0.3333333333332802;\n    lnza=lnza * epsilon + -0.5;\n    lnza=lnza * epsilon + 1.0;\n    lnza=lnza * epsilon;\n  }\n  double a=LN_2_A * exp;\n  double b=0.0;\n  double c=a + lnm[0];\n  double d=-(c - a - lnm[0]);\n  a=c;\n  b=b + d;\n  c=a + lnza;\n  d=-(c - a - lnza);\n  a=c;\n  b=b + d;\n  c=a + LN_2_B * exp;\n  d=-(c - a - LN_2_B * exp);\n  a=c;\n  b=b + d;\n  c=a + lnm[1];\n  d=-(c - a - lnm[1]);\n  a=c;\n  b=b + d;\n  c=a + lnzb;\n  d=-(c - a - lnzb);\n  a=c;\n  b=b + d;\n  if (hiPrec != null) {\n    hiPrec[0]=a;\n    hiPrec[1]=b;\n  }\n  return a + b;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 899,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 24,
                    "startLineNumber": 1252,
                    "startColumnNumber": 16,
                    "endLineNumber": 1252,
                    "endColumnNumber": 40
                },
                "nodeContext": "tmp=aa * HEX_40000000;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 6,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "double"
        },
        {
            "nodeContext": "aa",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 1253,
                "startColumnNumber": 21,
                "endLineNumber": 1253,
                "endColumnNumber": 23
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 8,
                        "startLineNumber": 1253,
                        "startColumnNumber": 21,
                        "endLineNumber": 1253,
                        "endColumnNumber": 29
                    },
                    "nodeContext": "aa + tmp",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 14,
                        "startLineNumber": 1253,
                        "startColumnNumber": 21,
                        "endLineNumber": 1253,
                        "endColumnNumber": 35
                    },
                    "nodeContext": "aa + tmp - tmp",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 19,
                        "startLineNumber": 1253,
                        "startColumnNumber": 16,
                        "endLineNumber": 1253,
                        "endColumnNumber": 35
                    },
                    "nodeContext": "ya=aa + tmp - tmp",
                    "nodeType": "Assignment",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 20,
                        "startLineNumber": 1253,
                        "startColumnNumber": 16,
                        "endLineNumber": 1253,
                        "endColumnNumber": 36
                    },
                    "nodeContext": "ya=aa + tmp - tmp;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 585,
                        "startLineNumber": 1239,
                        "startColumnNumber": 66,
                        "endLineNumber": 1255,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n  aa=ya + LN_HI_PREC_COEF[i][0];\n  ab=yb + LN_HI_PREC_COEF[i][1];\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 85,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 639,
                        "startLineNumber": 1239,
                        "startColumnNumber": 12,
                        "endLineNumber": 1255,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n  aa=ya + LN_HI_PREC_COEF[i][0];\n  ab=yb + LN_HI_PREC_COEF[i][1];\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 100,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1686,
                        "startLineNumber": 1221,
                        "startColumnNumber": 28,
                        "endLineNumber": 1269,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  double tmp=epsilon * HEX_40000000;\n  double aa=epsilon + tmp - tmp;\n  double ab=epsilon - aa;\n  double xa=aa;\n  double xb=ab;\n  double numer=bits & 0x3ffffffffffL;\n  double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n  aa=numer - xa * denom - xb * denom;\n  xb+=aa / denom;\n  double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n  double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n  for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    aa=ya + LN_HI_PREC_COEF[i][0];\n    ab=yb + LN_HI_PREC_COEF[i][1];\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n  }\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  lnza=aa + ab;\n  lnzb=-(lnza - aa - ab);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 230,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2163,
                        "startLineNumber": 1221,
                        "startColumnNumber": 8,
                        "endLineNumber": 1279,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (hiPrec != null) {\n  double tmp=epsilon * HEX_40000000;\n  double aa=epsilon + tmp - tmp;\n  double ab=epsilon - aa;\n  double xa=aa;\n  double xb=ab;\n  double numer=bits & 0x3ffffffffffL;\n  double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n  aa=numer - xa * denom - xb * denom;\n  xb+=aa / denom;\n  double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n  double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n  for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    aa=ya + LN_HI_PREC_COEF[i][0];\n    ab=yb + LN_HI_PREC_COEF[i][1];\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n  }\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  lnza=aa + ab;\n  lnzb=-(lnza - aa - ab);\n}\n else {\n  lnza=-0.16624882440418567;\n  lnza=lnza * epsilon + 0.19999954120254515;\n  lnza=lnza * epsilon + -0.2499999997677497;\n  lnza=lnza * epsilon + 0.3333333333332802;\n  lnza=lnza * epsilon + -0.5;\n  lnza=lnza * epsilon + 1.0;\n  lnza=lnza * epsilon;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 288,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 6912,
                        "startLineNumber": 1108,
                        "startColumnNumber": 69,
                        "endLineNumber": 1328,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (x == 0) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  long bits=Double.doubleToLongBits(x);\n  if ((bits & 0x8000000000000000L) != 0 || x != x) {\n    if (x != 0.0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NaN;\n      }\n      return Double.NaN;\n    }\n  }\n  if (x == Double.POSITIVE_INFINITY) {\n    if (hiPrec != null) {\n      hiPrec[0]=Double.POSITIVE_INFINITY;\n    }\n    return Double.POSITIVE_INFINITY;\n  }\n  int exp=(int)(bits >> 52) - 1023;\n  if ((bits & 0x7ff0000000000000L) == 0) {\n    if (x == 0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NEGATIVE_INFINITY;\n      }\n      return Double.NEGATIVE_INFINITY;\n    }\n    bits<<=1;\n    while ((bits & 0x0010000000000000L) == 0) {\n      exp--;\n      bits<<=1;\n    }\n  }\n  if (exp == -1 || exp == 0) {\n    if (x < 1.01 && x > 0.99 && hiPrec == null) {\n      double xa=x - 1.0;\n      double xb=xa - x + 1.0;\n      double tmp=xa * HEX_40000000;\n      double aa=xa + tmp - tmp;\n      double ab=xa - aa;\n      xa=aa;\n      xb=ab;\n      double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n      double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n      for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n        aa=ya * xa;\n        ab=ya * xb + yb * xa + yb * xb;\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n        aa=ya + LN_QUICK_COEF[i][0];\n        ab=yb + LN_QUICK_COEF[i][1];\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n      }\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      return ya + yb;\n    }\n  }\n  double lnm[]=lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n  double epsilon=(bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n  double lnza=0.0;\n  double lnzb=0.0;\n  if (hiPrec != null) {\n    double tmp=epsilon * HEX_40000000;\n    double aa=epsilon + tmp - tmp;\n    double ab=epsilon - aa;\n    double xa=aa;\n    double xb=ab;\n    double numer=bits & 0x3ffffffffffL;\n    double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n    aa=numer - xa * denom - xb * denom;\n    xb+=aa / denom;\n    double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n    double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n    for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_HI_PREC_COEF[i][0];\n      ab=yb + LN_HI_PREC_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    lnza=aa + ab;\n    lnzb=-(lnza - aa - ab);\n  }\n else {\n    lnza=-0.16624882440418567;\n    lnza=lnza * epsilon + 0.19999954120254515;\n    lnza=lnza * epsilon + -0.2499999997677497;\n    lnza=lnza * epsilon + 0.3333333333332802;\n    lnza=lnza * epsilon + -0.5;\n    lnza=lnza * epsilon + 1.0;\n    lnza=lnza * epsilon;\n  }\n  double a=LN_2_A * exp;\n  double b=0.0;\n  double c=a + lnm[0];\n  double d=-(c - a - lnm[0]);\n  a=c;\n  b=b + d;\n  c=a + lnza;\n  d=-(c - a - lnza);\n  a=c;\n  b=b + d;\n  c=a + LN_2_B * exp;\n  d=-(c - a - LN_2_B * exp);\n  a=c;\n  b=b + d;\n  c=a + lnm[1];\n  d=-(c - a - lnm[1]);\n  a=c;\n  b=b + d;\n  c=a + lnzb;\n  d=-(c - a - lnzb);\n  a=c;\n  b=b + d;\n  if (hiPrec != null) {\n    hiPrec[0]=a;\n    hiPrec[1]=b;\n  }\n  return a + b;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 883,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7218,
                        "startLineNumber": 1102,
                        "startColumnNumber": 4,
                        "endLineNumber": 1328,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Internal helper method for natural logarithm function.\n * @param x original argument of the natural logarithm function\n * @param hiPrec extra bits of precision on output (To Be Confirmed)\n * @return log(x)\n */\nprivate static double log(final double x,final double[] hiPrec){\n  if (x == 0) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  long bits=Double.doubleToLongBits(x);\n  if ((bits & 0x8000000000000000L) != 0 || x != x) {\n    if (x != 0.0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NaN;\n      }\n      return Double.NaN;\n    }\n  }\n  if (x == Double.POSITIVE_INFINITY) {\n    if (hiPrec != null) {\n      hiPrec[0]=Double.POSITIVE_INFINITY;\n    }\n    return Double.POSITIVE_INFINITY;\n  }\n  int exp=(int)(bits >> 52) - 1023;\n  if ((bits & 0x7ff0000000000000L) == 0) {\n    if (x == 0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NEGATIVE_INFINITY;\n      }\n      return Double.NEGATIVE_INFINITY;\n    }\n    bits<<=1;\n    while ((bits & 0x0010000000000000L) == 0) {\n      exp--;\n      bits<<=1;\n    }\n  }\n  if (exp == -1 || exp == 0) {\n    if (x < 1.01 && x > 0.99 && hiPrec == null) {\n      double xa=x - 1.0;\n      double xb=xa - x + 1.0;\n      double tmp=xa * HEX_40000000;\n      double aa=xa + tmp - tmp;\n      double ab=xa - aa;\n      xa=aa;\n      xb=ab;\n      double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n      double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n      for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n        aa=ya * xa;\n        ab=ya * xb + yb * xa + yb * xb;\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n        aa=ya + LN_QUICK_COEF[i][0];\n        ab=yb + LN_QUICK_COEF[i][1];\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n      }\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      return ya + yb;\n    }\n  }\n  double lnm[]=lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n  double epsilon=(bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n  double lnza=0.0;\n  double lnzb=0.0;\n  if (hiPrec != null) {\n    double tmp=epsilon * HEX_40000000;\n    double aa=epsilon + tmp - tmp;\n    double ab=epsilon - aa;\n    double xa=aa;\n    double xb=ab;\n    double numer=bits & 0x3ffffffffffL;\n    double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n    aa=numer - xa * denom - xb * denom;\n    xb+=aa / denom;\n    double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n    double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n    for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_HI_PREC_COEF[i][0];\n      ab=yb + LN_HI_PREC_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    lnza=aa + ab;\n    lnzb=-(lnza - aa - ab);\n  }\n else {\n    lnza=-0.16624882440418567;\n    lnza=lnza * epsilon + 0.19999954120254515;\n    lnza=lnza * epsilon + -0.2499999997677497;\n    lnza=lnza * epsilon + 0.3333333333332802;\n    lnza=lnza * epsilon + -0.5;\n    lnza=lnza * epsilon + 1.0;\n    lnza=lnza * epsilon;\n  }\n  double a=LN_2_A * exp;\n  double b=0.0;\n  double c=a + lnm[0];\n  double d=-(c - a - lnm[0]);\n  a=c;\n  b=b + d;\n  c=a + lnza;\n  d=-(c - a - lnza);\n  a=c;\n  b=b + d;\n  c=a + LN_2_B * exp;\n  d=-(c - a - LN_2_B * exp);\n  a=c;\n  b=b + d;\n  c=a + lnm[1];\n  d=-(c - a - lnm[1]);\n  a=c;\n  b=b + d;\n  c=a + lnzb;\n  d=-(c - a - lnzb);\n  a=c;\n  b=b + d;\n  if (hiPrec != null) {\n    hiPrec[0]=a;\n    hiPrec[1]=b;\n  }\n  return a + b;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 899,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 20,
                    "startLineNumber": 1253,
                    "startColumnNumber": 16,
                    "endLineNumber": 1253,
                    "endColumnNumber": 36
                },
                "nodeContext": "ya=aa + tmp - tmp;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "double"
        },
        {
            "nodeContext": "aa",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 1254,
                "startColumnNumber": 21,
                "endLineNumber": 1254,
                "endColumnNumber": 23
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 1254,
                        "startColumnNumber": 21,
                        "endLineNumber": 1254,
                        "endColumnNumber": 28
                    },
                    "nodeContext": "aa - ya",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 12,
                        "startLineNumber": 1254,
                        "startColumnNumber": 21,
                        "endLineNumber": 1254,
                        "endColumnNumber": 33
                    },
                    "nodeContext": "aa - ya + ab",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 17,
                        "startLineNumber": 1254,
                        "startColumnNumber": 16,
                        "endLineNumber": 1254,
                        "endColumnNumber": 33
                    },
                    "nodeContext": "yb=aa - ya + ab",
                    "nodeType": "Assignment",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 18,
                        "startLineNumber": 1254,
                        "startColumnNumber": 16,
                        "endLineNumber": 1254,
                        "endColumnNumber": 34
                    },
                    "nodeContext": "yb=aa - ya + ab;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 585,
                        "startLineNumber": 1239,
                        "startColumnNumber": 66,
                        "endLineNumber": 1255,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n  aa=ya + LN_HI_PREC_COEF[i][0];\n  ab=yb + LN_HI_PREC_COEF[i][1];\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 85,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 639,
                        "startLineNumber": 1239,
                        "startColumnNumber": 12,
                        "endLineNumber": 1255,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n  aa=ya + LN_HI_PREC_COEF[i][0];\n  ab=yb + LN_HI_PREC_COEF[i][1];\n  tmp=aa * HEX_40000000;\n  ya=aa + tmp - tmp;\n  yb=aa - ya + ab;\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 100,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1686,
                        "startLineNumber": 1221,
                        "startColumnNumber": 28,
                        "endLineNumber": 1269,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  double tmp=epsilon * HEX_40000000;\n  double aa=epsilon + tmp - tmp;\n  double ab=epsilon - aa;\n  double xa=aa;\n  double xb=ab;\n  double numer=bits & 0x3ffffffffffL;\n  double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n  aa=numer - xa * denom - xb * denom;\n  xb+=aa / denom;\n  double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n  double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n  for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    aa=ya + LN_HI_PREC_COEF[i][0];\n    ab=yb + LN_HI_PREC_COEF[i][1];\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n  }\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  lnza=aa + ab;\n  lnzb=-(lnza - aa - ab);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 230,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2163,
                        "startLineNumber": 1221,
                        "startColumnNumber": 8,
                        "endLineNumber": 1279,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (hiPrec != null) {\n  double tmp=epsilon * HEX_40000000;\n  double aa=epsilon + tmp - tmp;\n  double ab=epsilon - aa;\n  double xa=aa;\n  double xb=ab;\n  double numer=bits & 0x3ffffffffffL;\n  double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n  aa=numer - xa * denom - xb * denom;\n  xb+=aa / denom;\n  double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n  double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n  for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    aa=ya + LN_HI_PREC_COEF[i][0];\n    ab=yb + LN_HI_PREC_COEF[i][1];\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n  }\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  lnza=aa + ab;\n  lnzb=-(lnza - aa - ab);\n}\n else {\n  lnza=-0.16624882440418567;\n  lnza=lnza * epsilon + 0.19999954120254515;\n  lnza=lnza * epsilon + -0.2499999997677497;\n  lnza=lnza * epsilon + 0.3333333333332802;\n  lnza=lnza * epsilon + -0.5;\n  lnza=lnza * epsilon + 1.0;\n  lnza=lnza * epsilon;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 288,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 6912,
                        "startLineNumber": 1108,
                        "startColumnNumber": 69,
                        "endLineNumber": 1328,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (x == 0) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  long bits=Double.doubleToLongBits(x);\n  if ((bits & 0x8000000000000000L) != 0 || x != x) {\n    if (x != 0.0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NaN;\n      }\n      return Double.NaN;\n    }\n  }\n  if (x == Double.POSITIVE_INFINITY) {\n    if (hiPrec != null) {\n      hiPrec[0]=Double.POSITIVE_INFINITY;\n    }\n    return Double.POSITIVE_INFINITY;\n  }\n  int exp=(int)(bits >> 52) - 1023;\n  if ((bits & 0x7ff0000000000000L) == 0) {\n    if (x == 0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NEGATIVE_INFINITY;\n      }\n      return Double.NEGATIVE_INFINITY;\n    }\n    bits<<=1;\n    while ((bits & 0x0010000000000000L) == 0) {\n      exp--;\n      bits<<=1;\n    }\n  }\n  if (exp == -1 || exp == 0) {\n    if (x < 1.01 && x > 0.99 && hiPrec == null) {\n      double xa=x - 1.0;\n      double xb=xa - x + 1.0;\n      double tmp=xa * HEX_40000000;\n      double aa=xa + tmp - tmp;\n      double ab=xa - aa;\n      xa=aa;\n      xb=ab;\n      double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n      double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n      for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n        aa=ya * xa;\n        ab=ya * xb + yb * xa + yb * xb;\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n        aa=ya + LN_QUICK_COEF[i][0];\n        ab=yb + LN_QUICK_COEF[i][1];\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n      }\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      return ya + yb;\n    }\n  }\n  double lnm[]=lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n  double epsilon=(bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n  double lnza=0.0;\n  double lnzb=0.0;\n  if (hiPrec != null) {\n    double tmp=epsilon * HEX_40000000;\n    double aa=epsilon + tmp - tmp;\n    double ab=epsilon - aa;\n    double xa=aa;\n    double xb=ab;\n    double numer=bits & 0x3ffffffffffL;\n    double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n    aa=numer - xa * denom - xb * denom;\n    xb+=aa / denom;\n    double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n    double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n    for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_HI_PREC_COEF[i][0];\n      ab=yb + LN_HI_PREC_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    lnza=aa + ab;\n    lnzb=-(lnza - aa - ab);\n  }\n else {\n    lnza=-0.16624882440418567;\n    lnza=lnza * epsilon + 0.19999954120254515;\n    lnza=lnza * epsilon + -0.2499999997677497;\n    lnza=lnza * epsilon + 0.3333333333332802;\n    lnza=lnza * epsilon + -0.5;\n    lnza=lnza * epsilon + 1.0;\n    lnza=lnza * epsilon;\n  }\n  double a=LN_2_A * exp;\n  double b=0.0;\n  double c=a + lnm[0];\n  double d=-(c - a - lnm[0]);\n  a=c;\n  b=b + d;\n  c=a + lnza;\n  d=-(c - a - lnza);\n  a=c;\n  b=b + d;\n  c=a + LN_2_B * exp;\n  d=-(c - a - LN_2_B * exp);\n  a=c;\n  b=b + d;\n  c=a + lnm[1];\n  d=-(c - a - lnm[1]);\n  a=c;\n  b=b + d;\n  c=a + lnzb;\n  d=-(c - a - lnzb);\n  a=c;\n  b=b + d;\n  if (hiPrec != null) {\n    hiPrec[0]=a;\n    hiPrec[1]=b;\n  }\n  return a + b;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 883,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7218,
                        "startLineNumber": 1102,
                        "startColumnNumber": 4,
                        "endLineNumber": 1328,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Internal helper method for natural logarithm function.\n * @param x original argument of the natural logarithm function\n * @param hiPrec extra bits of precision on output (To Be Confirmed)\n * @return log(x)\n */\nprivate static double log(final double x,final double[] hiPrec){\n  if (x == 0) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  long bits=Double.doubleToLongBits(x);\n  if ((bits & 0x8000000000000000L) != 0 || x != x) {\n    if (x != 0.0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NaN;\n      }\n      return Double.NaN;\n    }\n  }\n  if (x == Double.POSITIVE_INFINITY) {\n    if (hiPrec != null) {\n      hiPrec[0]=Double.POSITIVE_INFINITY;\n    }\n    return Double.POSITIVE_INFINITY;\n  }\n  int exp=(int)(bits >> 52) - 1023;\n  if ((bits & 0x7ff0000000000000L) == 0) {\n    if (x == 0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NEGATIVE_INFINITY;\n      }\n      return Double.NEGATIVE_INFINITY;\n    }\n    bits<<=1;\n    while ((bits & 0x0010000000000000L) == 0) {\n      exp--;\n      bits<<=1;\n    }\n  }\n  if (exp == -1 || exp == 0) {\n    if (x < 1.01 && x > 0.99 && hiPrec == null) {\n      double xa=x - 1.0;\n      double xb=xa - x + 1.0;\n      double tmp=xa * HEX_40000000;\n      double aa=xa + tmp - tmp;\n      double ab=xa - aa;\n      xa=aa;\n      xb=ab;\n      double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n      double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n      for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n        aa=ya * xa;\n        ab=ya * xb + yb * xa + yb * xb;\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n        aa=ya + LN_QUICK_COEF[i][0];\n        ab=yb + LN_QUICK_COEF[i][1];\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n      }\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      return ya + yb;\n    }\n  }\n  double lnm[]=lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n  double epsilon=(bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n  double lnza=0.0;\n  double lnzb=0.0;\n  if (hiPrec != null) {\n    double tmp=epsilon * HEX_40000000;\n    double aa=epsilon + tmp - tmp;\n    double ab=epsilon - aa;\n    double xa=aa;\n    double xb=ab;\n    double numer=bits & 0x3ffffffffffL;\n    double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n    aa=numer - xa * denom - xb * denom;\n    xb+=aa / denom;\n    double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n    double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n    for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_HI_PREC_COEF[i][0];\n      ab=yb + LN_HI_PREC_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    lnza=aa + ab;\n    lnzb=-(lnza - aa - ab);\n  }\n else {\n    lnza=-0.16624882440418567;\n    lnza=lnza * epsilon + 0.19999954120254515;\n    lnza=lnza * epsilon + -0.2499999997677497;\n    lnza=lnza * epsilon + 0.3333333333332802;\n    lnza=lnza * epsilon + -0.5;\n    lnza=lnza * epsilon + 1.0;\n    lnza=lnza * epsilon;\n  }\n  double a=LN_2_A * exp;\n  double b=0.0;\n  double c=a + lnm[0];\n  double d=-(c - a - lnm[0]);\n  a=c;\n  b=b + d;\n  c=a + lnza;\n  d=-(c - a - lnza);\n  a=c;\n  b=b + d;\n  c=a + LN_2_B * exp;\n  d=-(c - a - LN_2_B * exp);\n  a=c;\n  b=b + d;\n  c=a + lnm[1];\n  d=-(c - a - lnm[1]);\n  a=c;\n  b=b + d;\n  c=a + lnzb;\n  d=-(c - a - lnzb);\n  a=c;\n  b=b + d;\n  if (hiPrec != null) {\n    hiPrec[0]=a;\n    hiPrec[1]=b;\n  }\n  return a + b;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 899,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 18,
                    "startLineNumber": 1254,
                    "startColumnNumber": 16,
                    "endLineNumber": 1254,
                    "endColumnNumber": 34
                },
                "nodeContext": "yb=aa - ya + ab;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "double"
        },
        {
            "nodeContext": "aa",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 1267,
                "startColumnNumber": 19,
                "endLineNumber": 1267,
                "endColumnNumber": 21
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 1267,
                        "startColumnNumber": 19,
                        "endLineNumber": 1267,
                        "endColumnNumber": 26
                    },
                    "nodeContext": "aa + ab",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 14,
                        "startLineNumber": 1267,
                        "startColumnNumber": 12,
                        "endLineNumber": 1267,
                        "endColumnNumber": 26
                    },
                    "nodeContext": "lnza=aa + ab",
                    "nodeType": "Assignment",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 15,
                        "startLineNumber": 1267,
                        "startColumnNumber": 12,
                        "endLineNumber": 1267,
                        "endColumnNumber": 27
                    },
                    "nodeContext": "lnza=aa + ab;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 6,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1686,
                        "startLineNumber": 1221,
                        "startColumnNumber": 28,
                        "endLineNumber": 1269,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  double tmp=epsilon * HEX_40000000;\n  double aa=epsilon + tmp - tmp;\n  double ab=epsilon - aa;\n  double xa=aa;\n  double xb=ab;\n  double numer=bits & 0x3ffffffffffL;\n  double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n  aa=numer - xa * denom - xb * denom;\n  xb+=aa / denom;\n  double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n  double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n  for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    aa=ya + LN_HI_PREC_COEF[i][0];\n    ab=yb + LN_HI_PREC_COEF[i][1];\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n  }\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  lnza=aa + ab;\n  lnzb=-(lnza - aa - ab);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 230,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2163,
                        "startLineNumber": 1221,
                        "startColumnNumber": 8,
                        "endLineNumber": 1279,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (hiPrec != null) {\n  double tmp=epsilon * HEX_40000000;\n  double aa=epsilon + tmp - tmp;\n  double ab=epsilon - aa;\n  double xa=aa;\n  double xb=ab;\n  double numer=bits & 0x3ffffffffffL;\n  double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n  aa=numer - xa * denom - xb * denom;\n  xb+=aa / denom;\n  double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n  double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n  for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    aa=ya + LN_HI_PREC_COEF[i][0];\n    ab=yb + LN_HI_PREC_COEF[i][1];\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n  }\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  lnza=aa + ab;\n  lnzb=-(lnza - aa - ab);\n}\n else {\n  lnza=-0.16624882440418567;\n  lnza=lnza * epsilon + 0.19999954120254515;\n  lnza=lnza * epsilon + -0.2499999997677497;\n  lnza=lnza * epsilon + 0.3333333333332802;\n  lnza=lnza * epsilon + -0.5;\n  lnza=lnza * epsilon + 1.0;\n  lnza=lnza * epsilon;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 288,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 6912,
                        "startLineNumber": 1108,
                        "startColumnNumber": 69,
                        "endLineNumber": 1328,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (x == 0) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  long bits=Double.doubleToLongBits(x);\n  if ((bits & 0x8000000000000000L) != 0 || x != x) {\n    if (x != 0.0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NaN;\n      }\n      return Double.NaN;\n    }\n  }\n  if (x == Double.POSITIVE_INFINITY) {\n    if (hiPrec != null) {\n      hiPrec[0]=Double.POSITIVE_INFINITY;\n    }\n    return Double.POSITIVE_INFINITY;\n  }\n  int exp=(int)(bits >> 52) - 1023;\n  if ((bits & 0x7ff0000000000000L) == 0) {\n    if (x == 0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NEGATIVE_INFINITY;\n      }\n      return Double.NEGATIVE_INFINITY;\n    }\n    bits<<=1;\n    while ((bits & 0x0010000000000000L) == 0) {\n      exp--;\n      bits<<=1;\n    }\n  }\n  if (exp == -1 || exp == 0) {\n    if (x < 1.01 && x > 0.99 && hiPrec == null) {\n      double xa=x - 1.0;\n      double xb=xa - x + 1.0;\n      double tmp=xa * HEX_40000000;\n      double aa=xa + tmp - tmp;\n      double ab=xa - aa;\n      xa=aa;\n      xb=ab;\n      double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n      double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n      for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n        aa=ya * xa;\n        ab=ya * xb + yb * xa + yb * xb;\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n        aa=ya + LN_QUICK_COEF[i][0];\n        ab=yb + LN_QUICK_COEF[i][1];\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n      }\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      return ya + yb;\n    }\n  }\n  double lnm[]=lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n  double epsilon=(bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n  double lnza=0.0;\n  double lnzb=0.0;\n  if (hiPrec != null) {\n    double tmp=epsilon * HEX_40000000;\n    double aa=epsilon + tmp - tmp;\n    double ab=epsilon - aa;\n    double xa=aa;\n    double xb=ab;\n    double numer=bits & 0x3ffffffffffL;\n    double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n    aa=numer - xa * denom - xb * denom;\n    xb+=aa / denom;\n    double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n    double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n    for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_HI_PREC_COEF[i][0];\n      ab=yb + LN_HI_PREC_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    lnza=aa + ab;\n    lnzb=-(lnza - aa - ab);\n  }\n else {\n    lnza=-0.16624882440418567;\n    lnza=lnza * epsilon + 0.19999954120254515;\n    lnza=lnza * epsilon + -0.2499999997677497;\n    lnza=lnza * epsilon + 0.3333333333332802;\n    lnza=lnza * epsilon + -0.5;\n    lnza=lnza * epsilon + 1.0;\n    lnza=lnza * epsilon;\n  }\n  double a=LN_2_A * exp;\n  double b=0.0;\n  double c=a + lnm[0];\n  double d=-(c - a - lnm[0]);\n  a=c;\n  b=b + d;\n  c=a + lnza;\n  d=-(c - a - lnza);\n  a=c;\n  b=b + d;\n  c=a + LN_2_B * exp;\n  d=-(c - a - LN_2_B * exp);\n  a=c;\n  b=b + d;\n  c=a + lnm[1];\n  d=-(c - a - lnm[1]);\n  a=c;\n  b=b + d;\n  c=a + lnzb;\n  d=-(c - a - lnzb);\n  a=c;\n  b=b + d;\n  if (hiPrec != null) {\n    hiPrec[0]=a;\n    hiPrec[1]=b;\n  }\n  return a + b;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 883,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7218,
                        "startLineNumber": 1102,
                        "startColumnNumber": 4,
                        "endLineNumber": 1328,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Internal helper method for natural logarithm function.\n * @param x original argument of the natural logarithm function\n * @param hiPrec extra bits of precision on output (To Be Confirmed)\n * @return log(x)\n */\nprivate static double log(final double x,final double[] hiPrec){\n  if (x == 0) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  long bits=Double.doubleToLongBits(x);\n  if ((bits & 0x8000000000000000L) != 0 || x != x) {\n    if (x != 0.0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NaN;\n      }\n      return Double.NaN;\n    }\n  }\n  if (x == Double.POSITIVE_INFINITY) {\n    if (hiPrec != null) {\n      hiPrec[0]=Double.POSITIVE_INFINITY;\n    }\n    return Double.POSITIVE_INFINITY;\n  }\n  int exp=(int)(bits >> 52) - 1023;\n  if ((bits & 0x7ff0000000000000L) == 0) {\n    if (x == 0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NEGATIVE_INFINITY;\n      }\n      return Double.NEGATIVE_INFINITY;\n    }\n    bits<<=1;\n    while ((bits & 0x0010000000000000L) == 0) {\n      exp--;\n      bits<<=1;\n    }\n  }\n  if (exp == -1 || exp == 0) {\n    if (x < 1.01 && x > 0.99 && hiPrec == null) {\n      double xa=x - 1.0;\n      double xb=xa - x + 1.0;\n      double tmp=xa * HEX_40000000;\n      double aa=xa + tmp - tmp;\n      double ab=xa - aa;\n      xa=aa;\n      xb=ab;\n      double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n      double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n      for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n        aa=ya * xa;\n        ab=ya * xb + yb * xa + yb * xb;\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n        aa=ya + LN_QUICK_COEF[i][0];\n        ab=yb + LN_QUICK_COEF[i][1];\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n      }\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      return ya + yb;\n    }\n  }\n  double lnm[]=lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n  double epsilon=(bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n  double lnza=0.0;\n  double lnzb=0.0;\n  if (hiPrec != null) {\n    double tmp=epsilon * HEX_40000000;\n    double aa=epsilon + tmp - tmp;\n    double ab=epsilon - aa;\n    double xa=aa;\n    double xb=ab;\n    double numer=bits & 0x3ffffffffffL;\n    double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n    aa=numer - xa * denom - xb * denom;\n    xb+=aa / denom;\n    double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n    double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n    for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_HI_PREC_COEF[i][0];\n      ab=yb + LN_HI_PREC_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    lnza=aa + ab;\n    lnzb=-(lnza - aa - ab);\n  }\n else {\n    lnza=-0.16624882440418567;\n    lnza=lnza * epsilon + 0.19999954120254515;\n    lnza=lnza * epsilon + -0.2499999997677497;\n    lnza=lnza * epsilon + 0.3333333333332802;\n    lnza=lnza * epsilon + -0.5;\n    lnza=lnza * epsilon + 1.0;\n    lnza=lnza * epsilon;\n  }\n  double a=LN_2_A * exp;\n  double b=0.0;\n  double c=a + lnm[0];\n  double d=-(c - a - lnm[0]);\n  a=c;\n  b=b + d;\n  c=a + lnza;\n  d=-(c - a - lnza);\n  a=c;\n  b=b + d;\n  c=a + LN_2_B * exp;\n  d=-(c - a - LN_2_B * exp);\n  a=c;\n  b=b + d;\n  c=a + lnm[1];\n  d=-(c - a - lnm[1]);\n  a=c;\n  b=b + d;\n  c=a + lnzb;\n  d=-(c - a - lnzb);\n  a=c;\n  b=b + d;\n  if (hiPrec != null) {\n    hiPrec[0]=a;\n    hiPrec[1]=b;\n  }\n  return a + b;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 899,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 15,
                    "startLineNumber": 1267,
                    "startColumnNumber": 12,
                    "endLineNumber": 1267,
                    "endColumnNumber": 27
                },
                "nodeContext": "lnza=aa + ab;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 6,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "double"
        },
        {
            "nodeContext": "aa",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 1268,
                "startColumnNumber": 28,
                "endLineNumber": 1268,
                "endColumnNumber": 30
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
                    "nodePosition": {
                        "charLength": 14,
                        "startLineNumber": 1268,
                        "startColumnNumber": 21,
                        "endLineNumber": 1268,
                        "endColumnNumber": 35
                    },
                    "nodeContext": "lnza - aa - ab",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
                    "nodePosition": {
                        "charLength": 16,
                        "startLineNumber": 1268,
                        "startColumnNumber": 20,
                        "endLineNumber": 1268,
                        "endColumnNumber": 36
                    },
                    "nodeContext": "(lnza - aa - ab)",
                    "nodeType": "ParenthesizedExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 17,
                        "startLineNumber": 1268,
                        "startColumnNumber": 19,
                        "endLineNumber": 1268,
                        "endColumnNumber": 36
                    },
                    "nodeContext": "-(lnza - aa - ab)",
                    "nodeType": "PrefixExpression",
                    "astNodeNumber": 6,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 24,
                        "startLineNumber": 1268,
                        "startColumnNumber": 12,
                        "endLineNumber": 1268,
                        "endColumnNumber": 36
                    },
                    "nodeContext": "lnzb=-(lnza - aa - ab)",
                    "nodeType": "Assignment",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 25,
                        "startLineNumber": 1268,
                        "startColumnNumber": 12,
                        "endLineNumber": 1268,
                        "endColumnNumber": 37
                    },
                    "nodeContext": "lnzb=-(lnza - aa - ab);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 9,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1686,
                        "startLineNumber": 1221,
                        "startColumnNumber": 28,
                        "endLineNumber": 1269,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  double tmp=epsilon * HEX_40000000;\n  double aa=epsilon + tmp - tmp;\n  double ab=epsilon - aa;\n  double xa=aa;\n  double xb=ab;\n  double numer=bits & 0x3ffffffffffL;\n  double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n  aa=numer - xa * denom - xb * denom;\n  xb+=aa / denom;\n  double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n  double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n  for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    aa=ya + LN_HI_PREC_COEF[i][0];\n    ab=yb + LN_HI_PREC_COEF[i][1];\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n  }\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  lnza=aa + ab;\n  lnzb=-(lnza - aa - ab);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 230,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2163,
                        "startLineNumber": 1221,
                        "startColumnNumber": 8,
                        "endLineNumber": 1279,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (hiPrec != null) {\n  double tmp=epsilon * HEX_40000000;\n  double aa=epsilon + tmp - tmp;\n  double ab=epsilon - aa;\n  double xa=aa;\n  double xb=ab;\n  double numer=bits & 0x3ffffffffffL;\n  double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n  aa=numer - xa * denom - xb * denom;\n  xb+=aa / denom;\n  double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n  double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n  for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n    aa=ya + LN_HI_PREC_COEF[i][0];\n    ab=yb + LN_HI_PREC_COEF[i][1];\n    tmp=aa * HEX_40000000;\n    ya=aa + tmp - tmp;\n    yb=aa - ya + ab;\n  }\n  aa=ya * xa;\n  ab=ya * xb + yb * xa + yb * xb;\n  lnza=aa + ab;\n  lnzb=-(lnza - aa - ab);\n}\n else {\n  lnza=-0.16624882440418567;\n  lnza=lnza * epsilon + 0.19999954120254515;\n  lnza=lnza * epsilon + -0.2499999997677497;\n  lnza=lnza * epsilon + 0.3333333333332802;\n  lnza=lnza * epsilon + -0.5;\n  lnza=lnza * epsilon + 1.0;\n  lnza=lnza * epsilon;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 288,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 6912,
                        "startLineNumber": 1108,
                        "startColumnNumber": 69,
                        "endLineNumber": 1328,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (x == 0) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  long bits=Double.doubleToLongBits(x);\n  if ((bits & 0x8000000000000000L) != 0 || x != x) {\n    if (x != 0.0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NaN;\n      }\n      return Double.NaN;\n    }\n  }\n  if (x == Double.POSITIVE_INFINITY) {\n    if (hiPrec != null) {\n      hiPrec[0]=Double.POSITIVE_INFINITY;\n    }\n    return Double.POSITIVE_INFINITY;\n  }\n  int exp=(int)(bits >> 52) - 1023;\n  if ((bits & 0x7ff0000000000000L) == 0) {\n    if (x == 0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NEGATIVE_INFINITY;\n      }\n      return Double.NEGATIVE_INFINITY;\n    }\n    bits<<=1;\n    while ((bits & 0x0010000000000000L) == 0) {\n      exp--;\n      bits<<=1;\n    }\n  }\n  if (exp == -1 || exp == 0) {\n    if (x < 1.01 && x > 0.99 && hiPrec == null) {\n      double xa=x - 1.0;\n      double xb=xa - x + 1.0;\n      double tmp=xa * HEX_40000000;\n      double aa=xa + tmp - tmp;\n      double ab=xa - aa;\n      xa=aa;\n      xb=ab;\n      double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n      double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n      for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n        aa=ya * xa;\n        ab=ya * xb + yb * xa + yb * xb;\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n        aa=ya + LN_QUICK_COEF[i][0];\n        ab=yb + LN_QUICK_COEF[i][1];\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n      }\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      return ya + yb;\n    }\n  }\n  double lnm[]=lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n  double epsilon=(bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n  double lnza=0.0;\n  double lnzb=0.0;\n  if (hiPrec != null) {\n    double tmp=epsilon * HEX_40000000;\n    double aa=epsilon + tmp - tmp;\n    double ab=epsilon - aa;\n    double xa=aa;\n    double xb=ab;\n    double numer=bits & 0x3ffffffffffL;\n    double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n    aa=numer - xa * denom - xb * denom;\n    xb+=aa / denom;\n    double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n    double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n    for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_HI_PREC_COEF[i][0];\n      ab=yb + LN_HI_PREC_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    lnza=aa + ab;\n    lnzb=-(lnza - aa - ab);\n  }\n else {\n    lnza=-0.16624882440418567;\n    lnza=lnza * epsilon + 0.19999954120254515;\n    lnza=lnza * epsilon + -0.2499999997677497;\n    lnza=lnza * epsilon + 0.3333333333332802;\n    lnza=lnza * epsilon + -0.5;\n    lnza=lnza * epsilon + 1.0;\n    lnza=lnza * epsilon;\n  }\n  double a=LN_2_A * exp;\n  double b=0.0;\n  double c=a + lnm[0];\n  double d=-(c - a - lnm[0]);\n  a=c;\n  b=b + d;\n  c=a + lnza;\n  d=-(c - a - lnza);\n  a=c;\n  b=b + d;\n  c=a + LN_2_B * exp;\n  d=-(c - a - LN_2_B * exp);\n  a=c;\n  b=b + d;\n  c=a + lnm[1];\n  d=-(c - a - lnm[1]);\n  a=c;\n  b=b + d;\n  c=a + lnzb;\n  d=-(c - a - lnzb);\n  a=c;\n  b=b + d;\n  if (hiPrec != null) {\n    hiPrec[0]=a;\n    hiPrec[1]=b;\n  }\n  return a + b;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 883,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7218,
                        "startLineNumber": 1102,
                        "startColumnNumber": 4,
                        "endLineNumber": 1328,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Internal helper method for natural logarithm function.\n * @param x original argument of the natural logarithm function\n * @param hiPrec extra bits of precision on output (To Be Confirmed)\n * @return log(x)\n */\nprivate static double log(final double x,final double[] hiPrec){\n  if (x == 0) {\n    return Double.NEGATIVE_INFINITY;\n  }\n  long bits=Double.doubleToLongBits(x);\n  if ((bits & 0x8000000000000000L) != 0 || x != x) {\n    if (x != 0.0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NaN;\n      }\n      return Double.NaN;\n    }\n  }\n  if (x == Double.POSITIVE_INFINITY) {\n    if (hiPrec != null) {\n      hiPrec[0]=Double.POSITIVE_INFINITY;\n    }\n    return Double.POSITIVE_INFINITY;\n  }\n  int exp=(int)(bits >> 52) - 1023;\n  if ((bits & 0x7ff0000000000000L) == 0) {\n    if (x == 0) {\n      if (hiPrec != null) {\n        hiPrec[0]=Double.NEGATIVE_INFINITY;\n      }\n      return Double.NEGATIVE_INFINITY;\n    }\n    bits<<=1;\n    while ((bits & 0x0010000000000000L) == 0) {\n      exp--;\n      bits<<=1;\n    }\n  }\n  if (exp == -1 || exp == 0) {\n    if (x < 1.01 && x > 0.99 && hiPrec == null) {\n      double xa=x - 1.0;\n      double xb=xa - x + 1.0;\n      double tmp=xa * HEX_40000000;\n      double aa=xa + tmp - tmp;\n      double ab=xa - aa;\n      xa=aa;\n      xb=ab;\n      double ya=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][0];\n      double yb=LN_QUICK_COEF[LN_QUICK_COEF.length - 1][1];\n      for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {\n        aa=ya * xa;\n        ab=ya * xb + yb * xa + yb * xb;\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n        aa=ya + LN_QUICK_COEF[i][0];\n        ab=yb + LN_QUICK_COEF[i][1];\n        tmp=aa * HEX_40000000;\n        ya=aa + tmp - tmp;\n        yb=aa - ya + ab;\n      }\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      return ya + yb;\n    }\n  }\n  double lnm[]=lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\n  double epsilon=(bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\n  double lnza=0.0;\n  double lnzb=0.0;\n  if (hiPrec != null) {\n    double tmp=epsilon * HEX_40000000;\n    double aa=epsilon + tmp - tmp;\n    double ab=epsilon - aa;\n    double xa=aa;\n    double xb=ab;\n    double numer=bits & 0x3ffffffffffL;\n    double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);\n    aa=numer - xa * denom - xb * denom;\n    xb+=aa / denom;\n    double ya=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][0];\n    double yb=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1][1];\n    for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {\n      aa=ya * xa;\n      ab=ya * xb + yb * xa + yb * xb;\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n      aa=ya + LN_HI_PREC_COEF[i][0];\n      ab=yb + LN_HI_PREC_COEF[i][1];\n      tmp=aa * HEX_40000000;\n      ya=aa + tmp - tmp;\n      yb=aa - ya + ab;\n    }\n    aa=ya * xa;\n    ab=ya * xb + yb * xa + yb * xb;\n    lnza=aa + ab;\n    lnzb=-(lnza - aa - ab);\n  }\n else {\n    lnza=-0.16624882440418567;\n    lnza=lnza * epsilon + 0.19999954120254515;\n    lnza=lnza * epsilon + -0.2499999997677497;\n    lnza=lnza * epsilon + 0.3333333333332802;\n    lnza=lnza * epsilon + -0.5;\n    lnza=lnza * epsilon + 1.0;\n    lnza=lnza * epsilon;\n  }\n  double a=LN_2_A * exp;\n  double b=0.0;\n  double c=a + lnm[0];\n  double d=-(c - a - lnm[0]);\n  a=c;\n  b=b + d;\n  c=a + lnza;\n  d=-(c - a - lnza);\n  a=c;\n  b=b + d;\n  c=a + LN_2_B * exp;\n  d=-(c - a - LN_2_B * exp);\n  a=c;\n  b=b + d;\n  c=a + lnm[1];\n  d=-(c - a - lnm[1]);\n  a=c;\n  b=b + d;\n  c=a + lnzb;\n  d=-(c - a - lnzb);\n  a=c;\n  b=b + d;\n  if (hiPrec != null) {\n    hiPrec[0]=a;\n    hiPrec[1]=b;\n  }\n  return a + b;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 899,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 25,
                    "startLineNumber": 1268,
                    "startColumnNumber": 12,
                    "endLineNumber": 1268,
                    "endColumnNumber": 37
                },
                "nodeContext": "lnzb=-(lnza - aa - ab);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 9,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "double"
        }
    ],
    "positionList": [
        {
            "charLength": 2,
            "startLineNumber": 1167,
            "startColumnNumber": 33,
            "endLineNumber": 1167,
            "endColumnNumber": 35
        },
        {
            "charLength": 2,
            "startLineNumber": 1168,
            "startColumnNumber": 21,
            "endLineNumber": 1168,
            "endColumnNumber": 23
        },
        {
            "charLength": 2,
            "startLineNumber": 1179,
            "startColumnNumber": 26,
            "endLineNumber": 1179,
            "endColumnNumber": 28
        },
        {
            "charLength": 2,
            "startLineNumber": 1180,
            "startColumnNumber": 25,
            "endLineNumber": 1180,
            "endColumnNumber": 27
        },
        {
            "charLength": 2,
            "startLineNumber": 1181,
            "startColumnNumber": 25,
            "endLineNumber": 1181,
            "endColumnNumber": 27
        },
        {
            "charLength": 2,
            "startLineNumber": 1187,
            "startColumnNumber": 26,
            "endLineNumber": 1187,
            "endColumnNumber": 28
        },
        {
            "charLength": 2,
            "startLineNumber": 1188,
            "startColumnNumber": 25,
            "endLineNumber": 1188,
            "endColumnNumber": 27
        },
        {
            "charLength": 2,
            "startLineNumber": 1189,
            "startColumnNumber": 25,
            "endLineNumber": 1189,
            "endColumnNumber": 27
        },
        {
            "charLength": 2,
            "startLineNumber": 1196,
            "startColumnNumber": 22,
            "endLineNumber": 1196,
            "endColumnNumber": 24
        },
        {
            "charLength": 2,
            "startLineNumber": 1197,
            "startColumnNumber": 21,
            "endLineNumber": 1197,
            "endColumnNumber": 23
        },
        {
            "charLength": 2,
            "startLineNumber": 1198,
            "startColumnNumber": 21,
            "endLineNumber": 1198,
            "endColumnNumber": 23
        },
        {
            "charLength": 2,
            "startLineNumber": 1225,
            "startColumnNumber": 34,
            "endLineNumber": 1225,
            "endColumnNumber": 36
        },
        {
            "charLength": 2,
            "startLineNumber": 1226,
            "startColumnNumber": 24,
            "endLineNumber": 1226,
            "endColumnNumber": 26
        },
        {
            "charLength": 2,
            "startLineNumber": 1233,
            "startColumnNumber": 18,
            "endLineNumber": 1233,
            "endColumnNumber": 20
        },
        {
            "charLength": 2,
            "startLineNumber": 1244,
            "startColumnNumber": 22,
            "endLineNumber": 1244,
            "endColumnNumber": 24
        },
        {
            "charLength": 2,
            "startLineNumber": 1245,
            "startColumnNumber": 21,
            "endLineNumber": 1245,
            "endColumnNumber": 23
        },
        {
            "charLength": 2,
            "startLineNumber": 1246,
            "startColumnNumber": 21,
            "endLineNumber": 1246,
            "endColumnNumber": 23
        },
        {
            "charLength": 2,
            "startLineNumber": 1252,
            "startColumnNumber": 22,
            "endLineNumber": 1252,
            "endColumnNumber": 24
        },
        {
            "charLength": 2,
            "startLineNumber": 1253,
            "startColumnNumber": 21,
            "endLineNumber": 1253,
            "endColumnNumber": 23
        },
        {
            "charLength": 2,
            "startLineNumber": 1254,
            "startColumnNumber": 21,
            "endLineNumber": 1254,
            "endColumnNumber": 23
        },
        {
            "charLength": 2,
            "startLineNumber": 1267,
            "startColumnNumber": 19,
            "endLineNumber": 1267,
            "endColumnNumber": 21
        },
        {
            "charLength": 2,
            "startLineNumber": 1268,
            "startColumnNumber": 28,
            "endLineNumber": 1268,
            "endColumnNumber": 30
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 11,
            "layout": 7
        },
        {
            "firstKey": 0,
            "secondKey": 12,
            "layout": 7
        },
        {
            "firstKey": 0,
            "secondKey": 13,
            "layout": 7
        },
        {
            "firstKey": 0,
            "secondKey": 14,
            "layout": 7
        },
        {
            "firstKey": 0,
            "secondKey": 15,
            "layout": 7
        },
        {
            "firstKey": 0,
            "secondKey": 16,
            "layout": 7
        },
        {
            "firstKey": 0,
            "secondKey": 17,
            "layout": 7
        },
        {
            "firstKey": 0,
            "secondKey": 18,
            "layout": 7
        },
        {
            "firstKey": 0,
            "secondKey": 19,
            "layout": 7
        },
        {
            "firstKey": 0,
            "secondKey": 20,
            "layout": 7
        },
        {
            "firstKey": 0,
            "secondKey": 21,
            "layout": 7
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 11,
            "layout": 6
        },
        {
            "firstKey": 1,
            "secondKey": 12,
            "layout": 6
        },
        {
            "firstKey": 1,
            "secondKey": 13,
            "layout": 6
        },
        {
            "firstKey": 1,
            "secondKey": 14,
            "layout": 6
        },
        {
            "firstKey": 1,
            "secondKey": 15,
            "layout": 6
        },
        {
            "firstKey": 1,
            "secondKey": 16,
            "layout": 6
        },
        {
            "firstKey": 1,
            "secondKey": 17,
            "layout": 6
        },
        {
            "firstKey": 1,
            "secondKey": 18,
            "layout": 6
        },
        {
            "firstKey": 1,
            "secondKey": 19,
            "layout": 6
        },
        {
            "firstKey": 1,
            "secondKey": 20,
            "layout": 6
        },
        {
            "firstKey": 1,
            "secondKey": 21,
            "layout": 6
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 8,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 9,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 10,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 11,
            "layout": 9
        },
        {
            "firstKey": 2,
            "secondKey": 12,
            "layout": 9
        },
        {
            "firstKey": 2,
            "secondKey": 13,
            "layout": 9
        },
        {
            "firstKey": 2,
            "secondKey": 14,
            "layout": 9
        },
        {
            "firstKey": 2,
            "secondKey": 15,
            "layout": 9
        },
        {
            "firstKey": 2,
            "secondKey": 16,
            "layout": 9
        },
        {
            "firstKey": 2,
            "secondKey": 17,
            "layout": 9
        },
        {
            "firstKey": 2,
            "secondKey": 18,
            "layout": 9
        },
        {
            "firstKey": 2,
            "secondKey": 19,
            "layout": 9
        },
        {
            "firstKey": 2,
            "secondKey": 20,
            "layout": 9
        },
        {
            "firstKey": 2,
            "secondKey": 21,
            "layout": 9
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 8,
            "layout": 6
        },
        {
            "firstKey": 3,
            "secondKey": 9,
            "layout": 6
        },
        {
            "firstKey": 3,
            "secondKey": 10,
            "layout": 6
        },
        {
            "firstKey": 3,
            "secondKey": 11,
            "layout": 10
        },
        {
            "firstKey": 3,
            "secondKey": 12,
            "layout": 10
        },
        {
            "firstKey": 3,
            "secondKey": 13,
            "layout": 10
        },
        {
            "firstKey": 3,
            "secondKey": 14,
            "layout": 10
        },
        {
            "firstKey": 3,
            "secondKey": 15,
            "layout": 10
        },
        {
            "firstKey": 3,
            "secondKey": 16,
            "layout": 10
        },
        {
            "firstKey": 3,
            "secondKey": 17,
            "layout": 10
        },
        {
            "firstKey": 3,
            "secondKey": 18,
            "layout": 10
        },
        {
            "firstKey": 3,
            "secondKey": 19,
            "layout": 10
        },
        {
            "firstKey": 3,
            "secondKey": 20,
            "layout": 10
        },
        {
            "firstKey": 3,
            "secondKey": 21,
            "layout": 10
        },
        {
            "firstKey": 4,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 4,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 4,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 8,
            "layout": 6
        },
        {
            "firstKey": 4,
            "secondKey": 9,
            "layout": 6
        },
        {
            "firstKey": 4,
            "secondKey": 10,
            "layout": 6
        },
        {
            "firstKey": 4,
            "secondKey": 11,
            "layout": 10
        },
        {
            "firstKey": 4,
            "secondKey": 12,
            "layout": 10
        },
        {
            "firstKey": 4,
            "secondKey": 13,
            "layout": 10
        },
        {
            "firstKey": 4,
            "secondKey": 14,
            "layout": 10
        },
        {
            "firstKey": 4,
            "secondKey": 15,
            "layout": 10
        },
        {
            "firstKey": 4,
            "secondKey": 16,
            "layout": 10
        },
        {
            "firstKey": 4,
            "secondKey": 17,
            "layout": 10
        },
        {
            "firstKey": 4,
            "secondKey": 18,
            "layout": 10
        },
        {
            "firstKey": 4,
            "secondKey": 19,
            "layout": 10
        },
        {
            "firstKey": 4,
            "secondKey": 20,
            "layout": 10
        },
        {
            "firstKey": 4,
            "secondKey": 21,
            "layout": 10
        },
        {
            "firstKey": 5,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 8,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 9,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 10,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 11,
            "layout": 9
        },
        {
            "firstKey": 5,
            "secondKey": 12,
            "layout": 9
        },
        {
            "firstKey": 5,
            "secondKey": 13,
            "layout": 9
        },
        {
            "firstKey": 5,
            "secondKey": 14,
            "layout": 9
        },
        {
            "firstKey": 5,
            "secondKey": 15,
            "layout": 9
        },
        {
            "firstKey": 5,
            "secondKey": 16,
            "layout": 9
        },
        {
            "firstKey": 5,
            "secondKey": 17,
            "layout": 9
        },
        {
            "firstKey": 5,
            "secondKey": 18,
            "layout": 9
        },
        {
            "firstKey": 5,
            "secondKey": 19,
            "layout": 9
        },
        {
            "firstKey": 5,
            "secondKey": 20,
            "layout": 9
        },
        {
            "firstKey": 5,
            "secondKey": 21,
            "layout": 9
        },
        {
            "firstKey": 6,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 6,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 6,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 8,
            "layout": 6
        },
        {
            "firstKey": 6,
            "secondKey": 9,
            "layout": 6
        },
        {
            "firstKey": 6,
            "secondKey": 10,
            "layout": 6
        },
        {
            "firstKey": 6,
            "secondKey": 11,
            "layout": 10
        },
        {
            "firstKey": 6,
            "secondKey": 12,
            "layout": 10
        },
        {
            "firstKey": 6,
            "secondKey": 13,
            "layout": 10
        },
        {
            "firstKey": 6,
            "secondKey": 14,
            "layout": 10
        },
        {
            "firstKey": 6,
            "secondKey": 15,
            "layout": 10
        },
        {
            "firstKey": 6,
            "secondKey": 16,
            "layout": 10
        },
        {
            "firstKey": 6,
            "secondKey": 17,
            "layout": 10
        },
        {
            "firstKey": 6,
            "secondKey": 18,
            "layout": 10
        },
        {
            "firstKey": 6,
            "secondKey": 19,
            "layout": 10
        },
        {
            "firstKey": 6,
            "secondKey": 20,
            "layout": 10
        },
        {
            "firstKey": 6,
            "secondKey": 21,
            "layout": 10
        },
        {
            "firstKey": 7,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 7,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 7,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 8,
            "layout": 6
        },
        {
            "firstKey": 7,
            "secondKey": 9,
            "layout": 6
        },
        {
            "firstKey": 7,
            "secondKey": 10,
            "layout": 6
        },
        {
            "firstKey": 7,
            "secondKey": 11,
            "layout": 10
        },
        {
            "firstKey": 7,
            "secondKey": 12,
            "layout": 10
        },
        {
            "firstKey": 7,
            "secondKey": 13,
            "layout": 10
        },
        {
            "firstKey": 7,
            "secondKey": 14,
            "layout": 10
        },
        {
            "firstKey": 7,
            "secondKey": 15,
            "layout": 10
        },
        {
            "firstKey": 7,
            "secondKey": 16,
            "layout": 10
        },
        {
            "firstKey": 7,
            "secondKey": 17,
            "layout": 10
        },
        {
            "firstKey": 7,
            "secondKey": 18,
            "layout": 10
        },
        {
            "firstKey": 7,
            "secondKey": 19,
            "layout": 10
        },
        {
            "firstKey": 7,
            "secondKey": 20,
            "layout": 10
        },
        {
            "firstKey": 7,
            "secondKey": 21,
            "layout": 10
        },
        {
            "firstKey": 8,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 11,
            "layout": 7
        },
        {
            "firstKey": 8,
            "secondKey": 12,
            "layout": 7
        },
        {
            "firstKey": 8,
            "secondKey": 13,
            "layout": 7
        },
        {
            "firstKey": 8,
            "secondKey": 14,
            "layout": 7
        },
        {
            "firstKey": 8,
            "secondKey": 15,
            "layout": 7
        },
        {
            "firstKey": 8,
            "secondKey": 16,
            "layout": 7
        },
        {
            "firstKey": 8,
            "secondKey": 17,
            "layout": 7
        },
        {
            "firstKey": 8,
            "secondKey": 18,
            "layout": 7
        },
        {
            "firstKey": 8,
            "secondKey": 19,
            "layout": 7
        },
        {
            "firstKey": 8,
            "secondKey": 20,
            "layout": 7
        },
        {
            "firstKey": 8,
            "secondKey": 21,
            "layout": 7
        },
        {
            "firstKey": 9,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 11,
            "layout": 8
        },
        {
            "firstKey": 9,
            "secondKey": 12,
            "layout": 8
        },
        {
            "firstKey": 9,
            "secondKey": 13,
            "layout": 8
        },
        {
            "firstKey": 9,
            "secondKey": 14,
            "layout": 8
        },
        {
            "firstKey": 9,
            "secondKey": 15,
            "layout": 8
        },
        {
            "firstKey": 9,
            "secondKey": 16,
            "layout": 8
        },
        {
            "firstKey": 9,
            "secondKey": 17,
            "layout": 8
        },
        {
            "firstKey": 9,
            "secondKey": 18,
            "layout": 8
        },
        {
            "firstKey": 9,
            "secondKey": 19,
            "layout": 8
        },
        {
            "firstKey": 9,
            "secondKey": 20,
            "layout": 8
        },
        {
            "firstKey": 9,
            "secondKey": 21,
            "layout": 8
        },
        {
            "firstKey": 10,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 11,
            "layout": 8
        },
        {
            "firstKey": 10,
            "secondKey": 12,
            "layout": 8
        },
        {
            "firstKey": 10,
            "secondKey": 13,
            "layout": 8
        },
        {
            "firstKey": 10,
            "secondKey": 14,
            "layout": 8
        },
        {
            "firstKey": 10,
            "secondKey": 15,
            "layout": 8
        },
        {
            "firstKey": 10,
            "secondKey": 16,
            "layout": 8
        },
        {
            "firstKey": 10,
            "secondKey": 17,
            "layout": 8
        },
        {
            "firstKey": 10,
            "secondKey": 18,
            "layout": 8
        },
        {
            "firstKey": 10,
            "secondKey": 19,
            "layout": 8
        },
        {
            "firstKey": 10,
            "secondKey": 20,
            "layout": 8
        },
        {
            "firstKey": 10,
            "secondKey": 21,
            "layout": 8
        },
        {
            "firstKey": 11,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 8,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 9,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 10,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 11,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 11,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 11,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 11,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 11,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 11,
            "secondKey": 18,
            "layout": 3
        },
        {
            "firstKey": 11,
            "secondKey": 19,
            "layout": 3
        },
        {
            "firstKey": 11,
            "secondKey": 20,
            "layout": 3
        },
        {
            "firstKey": 11,
            "secondKey": 21,
            "layout": 3
        },
        {
            "firstKey": 12,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 12,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 12,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 12,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 12,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 12,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 12,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 12,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 12,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 12,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 12,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 12,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 16,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 17,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 18,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 19,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 20,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 21,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 13,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 13,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 13,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 13,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 13,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 13,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 13,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 13,
            "secondKey": 8,
            "layout": 5
        },
        {
            "firstKey": 13,
            "secondKey": 9,
            "layout": 5
        },
        {
            "firstKey": 13,
            "secondKey": 10,
            "layout": 5
        },
        {
            "firstKey": 13,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 18,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 19,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 20,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 21,
            "layout": 3
        },
        {
            "firstKey": 14,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 14,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 14,
            "secondKey": 2,
            "layout": 7
        },
        {
            "firstKey": 14,
            "secondKey": 3,
            "layout": 7
        },
        {
            "firstKey": 14,
            "secondKey": 4,
            "layout": 7
        },
        {
            "firstKey": 14,
            "secondKey": 5,
            "layout": 7
        },
        {
            "firstKey": 14,
            "secondKey": 6,
            "layout": 7
        },
        {
            "firstKey": 14,
            "secondKey": 7,
            "layout": 7
        },
        {
            "firstKey": 14,
            "secondKey": 8,
            "layout": 7
        },
        {
            "firstKey": 14,
            "secondKey": 9,
            "layout": 7
        },
        {
            "firstKey": 14,
            "secondKey": 10,
            "layout": 7
        },
        {
            "firstKey": 14,
            "secondKey": 11,
            "layout": 5
        },
        {
            "firstKey": 14,
            "secondKey": 12,
            "layout": 5
        },
        {
            "firstKey": 14,
            "secondKey": 13,
            "layout": 5
        },
        {
            "firstKey": 14,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 14,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 14,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 14,
            "secondKey": 18,
            "layout": 3
        },
        {
            "firstKey": 14,
            "secondKey": 19,
            "layout": 3
        },
        {
            "firstKey": 14,
            "secondKey": 20,
            "layout": 5
        },
        {
            "firstKey": 14,
            "secondKey": 21,
            "layout": 5
        },
        {
            "firstKey": 15,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 15,
            "secondKey": 1,
            "layout": 8
        },
        {
            "firstKey": 15,
            "secondKey": 2,
            "layout": 8
        },
        {
            "firstKey": 15,
            "secondKey": 3,
            "layout": 8
        },
        {
            "firstKey": 15,
            "secondKey": 4,
            "layout": 8
        },
        {
            "firstKey": 15,
            "secondKey": 5,
            "layout": 8
        },
        {
            "firstKey": 15,
            "secondKey": 6,
            "layout": 8
        },
        {
            "firstKey": 15,
            "secondKey": 7,
            "layout": 8
        },
        {
            "firstKey": 15,
            "secondKey": 8,
            "layout": 8
        },
        {
            "firstKey": 15,
            "secondKey": 9,
            "layout": 8
        },
        {
            "firstKey": 15,
            "secondKey": 10,
            "layout": 8
        },
        {
            "firstKey": 15,
            "secondKey": 11,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 12,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 13,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 14,
            "layout": 4
        },
        {
            "firstKey": 15,
            "secondKey": 16,
            "layout": 4
        },
        {
            "firstKey": 15,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 15,
            "secondKey": 18,
            "layout": 4
        },
        {
            "firstKey": 15,
            "secondKey": 19,
            "layout": 4
        },
        {
            "firstKey": 15,
            "secondKey": 20,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 21,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 16,
            "secondKey": 1,
            "layout": 8
        },
        {
            "firstKey": 16,
            "secondKey": 2,
            "layout": 8
        },
        {
            "firstKey": 16,
            "secondKey": 3,
            "layout": 8
        },
        {
            "firstKey": 16,
            "secondKey": 4,
            "layout": 8
        },
        {
            "firstKey": 16,
            "secondKey": 5,
            "layout": 8
        },
        {
            "firstKey": 16,
            "secondKey": 6,
            "layout": 8
        },
        {
            "firstKey": 16,
            "secondKey": 7,
            "layout": 8
        },
        {
            "firstKey": 16,
            "secondKey": 8,
            "layout": 8
        },
        {
            "firstKey": 16,
            "secondKey": 9,
            "layout": 8
        },
        {
            "firstKey": 16,
            "secondKey": 10,
            "layout": 8
        },
        {
            "firstKey": 16,
            "secondKey": 11,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 12,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 13,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 14,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 15,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 18,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 19,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 20,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 21,
            "layout": 6
        },
        {
            "firstKey": 17,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 17,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 17,
            "secondKey": 2,
            "layout": 7
        },
        {
            "firstKey": 17,
            "secondKey": 3,
            "layout": 7
        },
        {
            "firstKey": 17,
            "secondKey": 4,
            "layout": 7
        },
        {
            "firstKey": 17,
            "secondKey": 5,
            "layout": 7
        },
        {
            "firstKey": 17,
            "secondKey": 6,
            "layout": 7
        },
        {
            "firstKey": 17,
            "secondKey": 7,
            "layout": 7
        },
        {
            "firstKey": 17,
            "secondKey": 8,
            "layout": 7
        },
        {
            "firstKey": 17,
            "secondKey": 9,
            "layout": 7
        },
        {
            "firstKey": 17,
            "secondKey": 10,
            "layout": 7
        },
        {
            "firstKey": 17,
            "secondKey": 11,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 12,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 13,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 17,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 17,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 17,
            "secondKey": 18,
            "layout": 3
        },
        {
            "firstKey": 17,
            "secondKey": 19,
            "layout": 3
        },
        {
            "firstKey": 17,
            "secondKey": 20,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 21,
            "layout": 5
        },
        {
            "firstKey": 18,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 18,
            "secondKey": 1,
            "layout": 8
        },
        {
            "firstKey": 18,
            "secondKey": 2,
            "layout": 8
        },
        {
            "firstKey": 18,
            "secondKey": 3,
            "layout": 8
        },
        {
            "firstKey": 18,
            "secondKey": 4,
            "layout": 8
        },
        {
            "firstKey": 18,
            "secondKey": 5,
            "layout": 8
        },
        {
            "firstKey": 18,
            "secondKey": 6,
            "layout": 8
        },
        {
            "firstKey": 18,
            "secondKey": 7,
            "layout": 8
        },
        {
            "firstKey": 18,
            "secondKey": 8,
            "layout": 8
        },
        {
            "firstKey": 18,
            "secondKey": 9,
            "layout": 8
        },
        {
            "firstKey": 18,
            "secondKey": 10,
            "layout": 8
        },
        {
            "firstKey": 18,
            "secondKey": 11,
            "layout": 6
        },
        {
            "firstKey": 18,
            "secondKey": 12,
            "layout": 6
        },
        {
            "firstKey": 18,
            "secondKey": 13,
            "layout": 6
        },
        {
            "firstKey": 18,
            "secondKey": 14,
            "layout": 4
        },
        {
            "firstKey": 18,
            "secondKey": 15,
            "layout": 4
        },
        {
            "firstKey": 18,
            "secondKey": 16,
            "layout": 4
        },
        {
            "firstKey": 18,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 18,
            "secondKey": 19,
            "layout": 4
        },
        {
            "firstKey": 18,
            "secondKey": 20,
            "layout": 6
        },
        {
            "firstKey": 18,
            "secondKey": 21,
            "layout": 6
        },
        {
            "firstKey": 19,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 19,
            "secondKey": 1,
            "layout": 8
        },
        {
            "firstKey": 19,
            "secondKey": 2,
            "layout": 8
        },
        {
            "firstKey": 19,
            "secondKey": 3,
            "layout": 8
        },
        {
            "firstKey": 19,
            "secondKey": 4,
            "layout": 8
        },
        {
            "firstKey": 19,
            "secondKey": 5,
            "layout": 8
        },
        {
            "firstKey": 19,
            "secondKey": 6,
            "layout": 8
        },
        {
            "firstKey": 19,
            "secondKey": 7,
            "layout": 8
        },
        {
            "firstKey": 19,
            "secondKey": 8,
            "layout": 8
        },
        {
            "firstKey": 19,
            "secondKey": 9,
            "layout": 8
        },
        {
            "firstKey": 19,
            "secondKey": 10,
            "layout": 8
        },
        {
            "firstKey": 19,
            "secondKey": 11,
            "layout": 6
        },
        {
            "firstKey": 19,
            "secondKey": 12,
            "layout": 6
        },
        {
            "firstKey": 19,
            "secondKey": 13,
            "layout": 6
        },
        {
            "firstKey": 19,
            "secondKey": 14,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 15,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 16,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 18,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 20,
            "layout": 6
        },
        {
            "firstKey": 19,
            "secondKey": 21,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 20,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 20,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 20,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 20,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 20,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 20,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 20,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 20,
            "secondKey": 8,
            "layout": 5
        },
        {
            "firstKey": 20,
            "secondKey": 9,
            "layout": 5
        },
        {
            "firstKey": 20,
            "secondKey": 10,
            "layout": 5
        },
        {
            "firstKey": 20,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 20,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 20,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 20,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 20,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 20,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 20,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 20,
            "secondKey": 18,
            "layout": 3
        },
        {
            "firstKey": 20,
            "secondKey": 19,
            "layout": 3
        },
        {
            "firstKey": 20,
            "secondKey": 21,
            "layout": 3
        },
        {
            "firstKey": 21,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 2,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 3,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 4,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 5,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 6,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 7,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 8,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 9,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 10,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 11,
            "layout": 5
        },
        {
            "firstKey": 21,
            "secondKey": 12,
            "layout": 5
        },
        {
            "firstKey": 21,
            "secondKey": 13,
            "layout": 5
        },
        {
            "firstKey": 21,
            "secondKey": 14,
            "layout": 5
        },
        {
            "firstKey": 21,
            "secondKey": 15,
            "layout": 5
        },
        {
            "firstKey": 21,
            "secondKey": 16,
            "layout": 5
        },
        {
            "firstKey": 21,
            "secondKey": 17,
            "layout": 5
        },
        {
            "firstKey": 21,
            "secondKey": 18,
            "layout": 5
        },
        {
            "firstKey": 21,
            "secondKey": 19,
            "layout": 5
        },
        {
            "firstKey": 21,
            "secondKey": 20,
            "layout": 5
        }
    ]
}