{
    "id": 743,
    "expression": "ze",
    "projectName": "commons-compress",
    "commitID": "e3ea7b6607e7c96b9e2b6813c05bfba887c8e226",
    "filePath": "src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java",
    "occurrences": 11,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "ze",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 841,
                "startColumnNumber": 12,
                "endLineNumber": 841,
                "endColumnNumber": 14
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 62,
                        "startLineNumber": 841,
                        "startColumnNumber": 12,
                        "endLineNumber": 841,
                        "endColumnNumber": 74
                    },
                    "nodeContext": "ze.getExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 83,
                        "startLineNumber": 840,
                        "startColumnNumber": 28,
                        "endLineNumber": 841,
                        "endColumnNumber": 74
                    },
                    "nodeContext": "extra=ze.getExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 104,
                        "startLineNumber": 840,
                        "startColumnNumber": 8,
                        "endLineNumber": 841,
                        "endColumnNumber": 75
                    },
                    "nodeContext": "final ZipExtraField extra=ze.getExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 12,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1860,
                        "startLineNumber": 839,
                        "startColumnNumber": 27,
                        "endLineNumber": 878,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final ZipExtraField extra=ze.getExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);\n  if (extra != null && !(extra instanceof Zip64ExtendedInformationExtraField)) {\n    throw new ZipException(\"archive contains unparseable zip64 extra field\");\n  }\n  final Zip64ExtendedInformationExtraField z64=(Zip64ExtendedInformationExtraField)extra;\n  if (z64 != null) {\n    final boolean hasUncompressedSize=ze.getSize() == ZIP64_MAGIC;\n    final boolean hasCompressedSize=ze.getCompressedSize() == ZIP64_MAGIC;\n    final boolean hasRelativeHeaderOffset=ze.getLocalHeaderOffset() == ZIP64_MAGIC;\n    final boolean hasDiskStart=ze.getDiskNumberStart() == ZIP64_MAGIC_SHORT;\n    z64.reparseCentralDirectoryData(hasUncompressedSize,hasCompressedSize,hasRelativeHeaderOffset,hasDiskStart);\n    if (hasUncompressedSize) {\n      ze.setSize(z64.getSize().getLongValue());\n    }\n else     if (hasCompressedSize) {\n      z64.setSize(new ZipEightByteInteger(ze.getSize()));\n    }\n    if (hasCompressedSize) {\n      ze.setCompressedSize(z64.getCompressedSize().getLongValue());\n    }\n else     if (hasUncompressedSize) {\n      z64.setCompressedSize(new ZipEightByteInteger(ze.getCompressedSize()));\n    }\n    if (hasRelativeHeaderOffset) {\n      ze.setLocalHeaderOffset(z64.getRelativeHeaderOffset().getLongValue());\n    }\n    if (hasDiskStart) {\n      ze.setDiskNumberStart(z64.getDiskStartNumber().getValue());\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 167,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2509,
                        "startLineNumber": 826,
                        "startColumnNumber": 4,
                        "endLineNumber": 878,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * If the entry holds a Zip64 extended information extra field, read sizes from there if the entry's sizes are set to 0xFFFFFFFFF, do the same for the offset of the local file header. <p>Ensures the Zip64 extra either knows both compressed and uncompressed size or neither of both as the internal logic in ExtraFieldUtils forces the field to create local header data even if they are never used - and here a field with only one size would be invalid.</p>\n */\nprivate void setSizesAndOffsetFromZip64Extra(final ZipArchiveEntry ze) throws IOException {\n  final ZipExtraField extra=ze.getExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);\n  if (extra != null && !(extra instanceof Zip64ExtendedInformationExtraField)) {\n    throw new ZipException(\"archive contains unparseable zip64 extra field\");\n  }\n  final Zip64ExtendedInformationExtraField z64=(Zip64ExtendedInformationExtraField)extra;\n  if (z64 != null) {\n    final boolean hasUncompressedSize=ze.getSize() == ZIP64_MAGIC;\n    final boolean hasCompressedSize=ze.getCompressedSize() == ZIP64_MAGIC;\n    final boolean hasRelativeHeaderOffset=ze.getLocalHeaderOffset() == ZIP64_MAGIC;\n    final boolean hasDiskStart=ze.getDiskNumberStart() == ZIP64_MAGIC_SHORT;\n    z64.reparseCentralDirectoryData(hasUncompressedSize,hasCompressedSize,hasRelativeHeaderOffset,hasDiskStart);\n    if (hasUncompressedSize) {\n      ze.setSize(z64.getSize().getLongValue());\n    }\n else     if (hasCompressedSize) {\n      z64.setSize(new ZipEightByteInteger(ze.getSize()));\n    }\n    if (hasCompressedSize) {\n      ze.setCompressedSize(z64.getCompressedSize().getLongValue());\n    }\n else     if (hasUncompressedSize) {\n      z64.setCompressedSize(new ZipEightByteInteger(ze.getCompressedSize()));\n    }\n    if (hasRelativeHeaderOffset) {\n      ze.setLocalHeaderOffset(z64.getRelativeHeaderOffset().getLongValue());\n    }\n    if (hasDiskStart) {\n      ze.setDiskNumberStart(z64.getDiskStartNumber().getValue());\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 179,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                "nodePosition": {
                    "charLength": 62,
                    "startLineNumber": 841,
                    "startColumnNumber": 12,
                    "endLineNumber": 841,
                    "endColumnNumber": 74
                },
                "nodeContext": "ze.getExtraField(Zip64ExtendedInformationExtraField.HEADER_ID)",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 6,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
        },
        {
            "nodeContext": "ze",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 848,
                "startColumnNumber": 48,
                "endLineNumber": 848,
                "endColumnNumber": 50
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 12,
                        "startLineNumber": 848,
                        "startColumnNumber": 48,
                        "endLineNumber": 848,
                        "endColumnNumber": 60
                    },
                    "nodeContext": "ze.getSize()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 27,
                        "startLineNumber": 848,
                        "startColumnNumber": 48,
                        "endLineNumber": 848,
                        "endColumnNumber": 75
                    },
                    "nodeContext": "ze.getSize() == ZIP64_MAGIC",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 49,
                        "startLineNumber": 848,
                        "startColumnNumber": 26,
                        "endLineNumber": 848,
                        "endColumnNumber": 75
                    },
                    "nodeContext": "hasUncompressedSize=ze.getSize() == ZIP64_MAGIC",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 64,
                        "startLineNumber": 848,
                        "startColumnNumber": 12,
                        "endLineNumber": 848,
                        "endColumnNumber": 76
                    },
                    "nodeContext": "final boolean hasUncompressedSize=ze.getSize() == ZIP64_MAGIC;\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 10,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1412,
                        "startLineNumber": 847,
                        "startColumnNumber": 25,
                        "endLineNumber": 877,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final boolean hasUncompressedSize=ze.getSize() == ZIP64_MAGIC;\n  final boolean hasCompressedSize=ze.getCompressedSize() == ZIP64_MAGIC;\n  final boolean hasRelativeHeaderOffset=ze.getLocalHeaderOffset() == ZIP64_MAGIC;\n  final boolean hasDiskStart=ze.getDiskNumberStart() == ZIP64_MAGIC_SHORT;\n  z64.reparseCentralDirectoryData(hasUncompressedSize,hasCompressedSize,hasRelativeHeaderOffset,hasDiskStart);\n  if (hasUncompressedSize) {\n    ze.setSize(z64.getSize().getLongValue());\n  }\n else   if (hasCompressedSize) {\n    z64.setSize(new ZipEightByteInteger(ze.getSize()));\n  }\n  if (hasCompressedSize) {\n    ze.setCompressedSize(z64.getCompressedSize().getLongValue());\n  }\n else   if (hasUncompressedSize) {\n    z64.setCompressedSize(new ZipEightByteInteger(ze.getCompressedSize()));\n  }\n  if (hasRelativeHeaderOffset) {\n    ze.setLocalHeaderOffset(z64.getRelativeHeaderOffset().getLongValue());\n  }\n  if (hasDiskStart) {\n    ze.setDiskNumberStart(z64.getDiskStartNumber().getValue());\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 123,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1429,
                        "startLineNumber": 847,
                        "startColumnNumber": 8,
                        "endLineNumber": 877,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (z64 != null) {\n  final boolean hasUncompressedSize=ze.getSize() == ZIP64_MAGIC;\n  final boolean hasCompressedSize=ze.getCompressedSize() == ZIP64_MAGIC;\n  final boolean hasRelativeHeaderOffset=ze.getLocalHeaderOffset() == ZIP64_MAGIC;\n  final boolean hasDiskStart=ze.getDiskNumberStart() == ZIP64_MAGIC_SHORT;\n  z64.reparseCentralDirectoryData(hasUncompressedSize,hasCompressedSize,hasRelativeHeaderOffset,hasDiskStart);\n  if (hasUncompressedSize) {\n    ze.setSize(z64.getSize().getLongValue());\n  }\n else   if (hasCompressedSize) {\n    z64.setSize(new ZipEightByteInteger(ze.getSize()));\n  }\n  if (hasCompressedSize) {\n    ze.setCompressedSize(z64.getCompressedSize().getLongValue());\n  }\n else   if (hasUncompressedSize) {\n    z64.setCompressedSize(new ZipEightByteInteger(ze.getCompressedSize()));\n  }\n  if (hasRelativeHeaderOffset) {\n    ze.setLocalHeaderOffset(z64.getRelativeHeaderOffset().getLongValue());\n  }\n  if (hasDiskStart) {\n    ze.setDiskNumberStart(z64.getDiskStartNumber().getValue());\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 127,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1860,
                        "startLineNumber": 839,
                        "startColumnNumber": 27,
                        "endLineNumber": 878,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final ZipExtraField extra=ze.getExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);\n  if (extra != null && !(extra instanceof Zip64ExtendedInformationExtraField)) {\n    throw new ZipException(\"archive contains unparseable zip64 extra field\");\n  }\n  final Zip64ExtendedInformationExtraField z64=(Zip64ExtendedInformationExtraField)extra;\n  if (z64 != null) {\n    final boolean hasUncompressedSize=ze.getSize() == ZIP64_MAGIC;\n    final boolean hasCompressedSize=ze.getCompressedSize() == ZIP64_MAGIC;\n    final boolean hasRelativeHeaderOffset=ze.getLocalHeaderOffset() == ZIP64_MAGIC;\n    final boolean hasDiskStart=ze.getDiskNumberStart() == ZIP64_MAGIC_SHORT;\n    z64.reparseCentralDirectoryData(hasUncompressedSize,hasCompressedSize,hasRelativeHeaderOffset,hasDiskStart);\n    if (hasUncompressedSize) {\n      ze.setSize(z64.getSize().getLongValue());\n    }\n else     if (hasCompressedSize) {\n      z64.setSize(new ZipEightByteInteger(ze.getSize()));\n    }\n    if (hasCompressedSize) {\n      ze.setCompressedSize(z64.getCompressedSize().getLongValue());\n    }\n else     if (hasUncompressedSize) {\n      z64.setCompressedSize(new ZipEightByteInteger(ze.getCompressedSize()));\n    }\n    if (hasRelativeHeaderOffset) {\n      ze.setLocalHeaderOffset(z64.getRelativeHeaderOffset().getLongValue());\n    }\n    if (hasDiskStart) {\n      ze.setDiskNumberStart(z64.getDiskStartNumber().getValue());\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 167,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2509,
                        "startLineNumber": 826,
                        "startColumnNumber": 4,
                        "endLineNumber": 878,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * If the entry holds a Zip64 extended information extra field, read sizes from there if the entry's sizes are set to 0xFFFFFFFFF, do the same for the offset of the local file header. <p>Ensures the Zip64 extra either knows both compressed and uncompressed size or neither of both as the internal logic in ExtraFieldUtils forces the field to create local header data even if they are never used - and here a field with only one size would be invalid.</p>\n */\nprivate void setSizesAndOffsetFromZip64Extra(final ZipArchiveEntry ze) throws IOException {\n  final ZipExtraField extra=ze.getExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);\n  if (extra != null && !(extra instanceof Zip64ExtendedInformationExtraField)) {\n    throw new ZipException(\"archive contains unparseable zip64 extra field\");\n  }\n  final Zip64ExtendedInformationExtraField z64=(Zip64ExtendedInformationExtraField)extra;\n  if (z64 != null) {\n    final boolean hasUncompressedSize=ze.getSize() == ZIP64_MAGIC;\n    final boolean hasCompressedSize=ze.getCompressedSize() == ZIP64_MAGIC;\n    final boolean hasRelativeHeaderOffset=ze.getLocalHeaderOffset() == ZIP64_MAGIC;\n    final boolean hasDiskStart=ze.getDiskNumberStart() == ZIP64_MAGIC_SHORT;\n    z64.reparseCentralDirectoryData(hasUncompressedSize,hasCompressedSize,hasRelativeHeaderOffset,hasDiskStart);\n    if (hasUncompressedSize) {\n      ze.setSize(z64.getSize().getLongValue());\n    }\n else     if (hasCompressedSize) {\n      z64.setSize(new ZipEightByteInteger(ze.getSize()));\n    }\n    if (hasCompressedSize) {\n      ze.setCompressedSize(z64.getCompressedSize().getLongValue());\n    }\n else     if (hasUncompressedSize) {\n      z64.setCompressedSize(new ZipEightByteInteger(ze.getCompressedSize()));\n    }\n    if (hasRelativeHeaderOffset) {\n      ze.setLocalHeaderOffset(z64.getRelativeHeaderOffset().getLongValue());\n    }\n    if (hasDiskStart) {\n      ze.setDiskNumberStart(z64.getDiskStartNumber().getValue());\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 179,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 64,
                    "startLineNumber": 848,
                    "startColumnNumber": 12,
                    "endLineNumber": 848,
                    "endColumnNumber": 76
                },
                "nodeContext": "final boolean hasUncompressedSize=ze.getSize() == ZIP64_MAGIC;\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 10,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
        },
        {
            "nodeContext": "ze",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 849,
                "startColumnNumber": 46,
                "endLineNumber": 849,
                "endColumnNumber": 48
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 22,
                        "startLineNumber": 849,
                        "startColumnNumber": 46,
                        "endLineNumber": 849,
                        "endColumnNumber": 68
                    },
                    "nodeContext": "ze.getCompressedSize()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 37,
                        "startLineNumber": 849,
                        "startColumnNumber": 46,
                        "endLineNumber": 849,
                        "endColumnNumber": 83
                    },
                    "nodeContext": "ze.getCompressedSize() == ZIP64_MAGIC",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 57,
                        "startLineNumber": 849,
                        "startColumnNumber": 26,
                        "endLineNumber": 849,
                        "endColumnNumber": 83
                    },
                    "nodeContext": "hasCompressedSize=ze.getCompressedSize() == ZIP64_MAGIC",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 72,
                        "startLineNumber": 849,
                        "startColumnNumber": 12,
                        "endLineNumber": 849,
                        "endColumnNumber": 84
                    },
                    "nodeContext": "final boolean hasCompressedSize=ze.getCompressedSize() == ZIP64_MAGIC;\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 10,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1412,
                        "startLineNumber": 847,
                        "startColumnNumber": 25,
                        "endLineNumber": 877,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final boolean hasUncompressedSize=ze.getSize() == ZIP64_MAGIC;\n  final boolean hasCompressedSize=ze.getCompressedSize() == ZIP64_MAGIC;\n  final boolean hasRelativeHeaderOffset=ze.getLocalHeaderOffset() == ZIP64_MAGIC;\n  final boolean hasDiskStart=ze.getDiskNumberStart() == ZIP64_MAGIC_SHORT;\n  z64.reparseCentralDirectoryData(hasUncompressedSize,hasCompressedSize,hasRelativeHeaderOffset,hasDiskStart);\n  if (hasUncompressedSize) {\n    ze.setSize(z64.getSize().getLongValue());\n  }\n else   if (hasCompressedSize) {\n    z64.setSize(new ZipEightByteInteger(ze.getSize()));\n  }\n  if (hasCompressedSize) {\n    ze.setCompressedSize(z64.getCompressedSize().getLongValue());\n  }\n else   if (hasUncompressedSize) {\n    z64.setCompressedSize(new ZipEightByteInteger(ze.getCompressedSize()));\n  }\n  if (hasRelativeHeaderOffset) {\n    ze.setLocalHeaderOffset(z64.getRelativeHeaderOffset().getLongValue());\n  }\n  if (hasDiskStart) {\n    ze.setDiskNumberStart(z64.getDiskStartNumber().getValue());\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 123,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1429,
                        "startLineNumber": 847,
                        "startColumnNumber": 8,
                        "endLineNumber": 877,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (z64 != null) {\n  final boolean hasUncompressedSize=ze.getSize() == ZIP64_MAGIC;\n  final boolean hasCompressedSize=ze.getCompressedSize() == ZIP64_MAGIC;\n  final boolean hasRelativeHeaderOffset=ze.getLocalHeaderOffset() == ZIP64_MAGIC;\n  final boolean hasDiskStart=ze.getDiskNumberStart() == ZIP64_MAGIC_SHORT;\n  z64.reparseCentralDirectoryData(hasUncompressedSize,hasCompressedSize,hasRelativeHeaderOffset,hasDiskStart);\n  if (hasUncompressedSize) {\n    ze.setSize(z64.getSize().getLongValue());\n  }\n else   if (hasCompressedSize) {\n    z64.setSize(new ZipEightByteInteger(ze.getSize()));\n  }\n  if (hasCompressedSize) {\n    ze.setCompressedSize(z64.getCompressedSize().getLongValue());\n  }\n else   if (hasUncompressedSize) {\n    z64.setCompressedSize(new ZipEightByteInteger(ze.getCompressedSize()));\n  }\n  if (hasRelativeHeaderOffset) {\n    ze.setLocalHeaderOffset(z64.getRelativeHeaderOffset().getLongValue());\n  }\n  if (hasDiskStart) {\n    ze.setDiskNumberStart(z64.getDiskStartNumber().getValue());\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 127,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1860,
                        "startLineNumber": 839,
                        "startColumnNumber": 27,
                        "endLineNumber": 878,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final ZipExtraField extra=ze.getExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);\n  if (extra != null && !(extra instanceof Zip64ExtendedInformationExtraField)) {\n    throw new ZipException(\"archive contains unparseable zip64 extra field\");\n  }\n  final Zip64ExtendedInformationExtraField z64=(Zip64ExtendedInformationExtraField)extra;\n  if (z64 != null) {\n    final boolean hasUncompressedSize=ze.getSize() == ZIP64_MAGIC;\n    final boolean hasCompressedSize=ze.getCompressedSize() == ZIP64_MAGIC;\n    final boolean hasRelativeHeaderOffset=ze.getLocalHeaderOffset() == ZIP64_MAGIC;\n    final boolean hasDiskStart=ze.getDiskNumberStart() == ZIP64_MAGIC_SHORT;\n    z64.reparseCentralDirectoryData(hasUncompressedSize,hasCompressedSize,hasRelativeHeaderOffset,hasDiskStart);\n    if (hasUncompressedSize) {\n      ze.setSize(z64.getSize().getLongValue());\n    }\n else     if (hasCompressedSize) {\n      z64.setSize(new ZipEightByteInteger(ze.getSize()));\n    }\n    if (hasCompressedSize) {\n      ze.setCompressedSize(z64.getCompressedSize().getLongValue());\n    }\n else     if (hasUncompressedSize) {\n      z64.setCompressedSize(new ZipEightByteInteger(ze.getCompressedSize()));\n    }\n    if (hasRelativeHeaderOffset) {\n      ze.setLocalHeaderOffset(z64.getRelativeHeaderOffset().getLongValue());\n    }\n    if (hasDiskStart) {\n      ze.setDiskNumberStart(z64.getDiskStartNumber().getValue());\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 167,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2509,
                        "startLineNumber": 826,
                        "startColumnNumber": 4,
                        "endLineNumber": 878,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * If the entry holds a Zip64 extended information extra field, read sizes from there if the entry's sizes are set to 0xFFFFFFFFF, do the same for the offset of the local file header. <p>Ensures the Zip64 extra either knows both compressed and uncompressed size or neither of both as the internal logic in ExtraFieldUtils forces the field to create local header data even if they are never used - and here a field with only one size would be invalid.</p>\n */\nprivate void setSizesAndOffsetFromZip64Extra(final ZipArchiveEntry ze) throws IOException {\n  final ZipExtraField extra=ze.getExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);\n  if (extra != null && !(extra instanceof Zip64ExtendedInformationExtraField)) {\n    throw new ZipException(\"archive contains unparseable zip64 extra field\");\n  }\n  final Zip64ExtendedInformationExtraField z64=(Zip64ExtendedInformationExtraField)extra;\n  if (z64 != null) {\n    final boolean hasUncompressedSize=ze.getSize() == ZIP64_MAGIC;\n    final boolean hasCompressedSize=ze.getCompressedSize() == ZIP64_MAGIC;\n    final boolean hasRelativeHeaderOffset=ze.getLocalHeaderOffset() == ZIP64_MAGIC;\n    final boolean hasDiskStart=ze.getDiskNumberStart() == ZIP64_MAGIC_SHORT;\n    z64.reparseCentralDirectoryData(hasUncompressedSize,hasCompressedSize,hasRelativeHeaderOffset,hasDiskStart);\n    if (hasUncompressedSize) {\n      ze.setSize(z64.getSize().getLongValue());\n    }\n else     if (hasCompressedSize) {\n      z64.setSize(new ZipEightByteInteger(ze.getSize()));\n    }\n    if (hasCompressedSize) {\n      ze.setCompressedSize(z64.getCompressedSize().getLongValue());\n    }\n else     if (hasUncompressedSize) {\n      z64.setCompressedSize(new ZipEightByteInteger(ze.getCompressedSize()));\n    }\n    if (hasRelativeHeaderOffset) {\n      ze.setLocalHeaderOffset(z64.getRelativeHeaderOffset().getLongValue());\n    }\n    if (hasDiskStart) {\n      ze.setDiskNumberStart(z64.getDiskStartNumber().getValue());\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 179,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 72,
                    "startLineNumber": 849,
                    "startColumnNumber": 12,
                    "endLineNumber": 849,
                    "endColumnNumber": 84
                },
                "nodeContext": "final boolean hasCompressedSize=ze.getCompressedSize() == ZIP64_MAGIC;\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 10,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
        },
        {
            "nodeContext": "ze",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 851,
                "startColumnNumber": 16,
                "endLineNumber": 851,
                "endColumnNumber": 18
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 25,
                        "startLineNumber": 851,
                        "startColumnNumber": 16,
                        "endLineNumber": 851,
                        "endColumnNumber": 41
                    },
                    "nodeContext": "ze.getLocalHeaderOffset()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 40,
                        "startLineNumber": 851,
                        "startColumnNumber": 16,
                        "endLineNumber": 851,
                        "endColumnNumber": 56
                    },
                    "nodeContext": "ze.getLocalHeaderOffset() == ZIP64_MAGIC",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 83,
                        "startLineNumber": 850,
                        "startColumnNumber": 26,
                        "endLineNumber": 851,
                        "endColumnNumber": 56
                    },
                    "nodeContext": "hasRelativeHeaderOffset=ze.getLocalHeaderOffset() == ZIP64_MAGIC",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 98,
                        "startLineNumber": 850,
                        "startColumnNumber": 12,
                        "endLineNumber": 851,
                        "endColumnNumber": 57
                    },
                    "nodeContext": "final boolean hasRelativeHeaderOffset=ze.getLocalHeaderOffset() == ZIP64_MAGIC;\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 10,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1412,
                        "startLineNumber": 847,
                        "startColumnNumber": 25,
                        "endLineNumber": 877,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final boolean hasUncompressedSize=ze.getSize() == ZIP64_MAGIC;\n  final boolean hasCompressedSize=ze.getCompressedSize() == ZIP64_MAGIC;\n  final boolean hasRelativeHeaderOffset=ze.getLocalHeaderOffset() == ZIP64_MAGIC;\n  final boolean hasDiskStart=ze.getDiskNumberStart() == ZIP64_MAGIC_SHORT;\n  z64.reparseCentralDirectoryData(hasUncompressedSize,hasCompressedSize,hasRelativeHeaderOffset,hasDiskStart);\n  if (hasUncompressedSize) {\n    ze.setSize(z64.getSize().getLongValue());\n  }\n else   if (hasCompressedSize) {\n    z64.setSize(new ZipEightByteInteger(ze.getSize()));\n  }\n  if (hasCompressedSize) {\n    ze.setCompressedSize(z64.getCompressedSize().getLongValue());\n  }\n else   if (hasUncompressedSize) {\n    z64.setCompressedSize(new ZipEightByteInteger(ze.getCompressedSize()));\n  }\n  if (hasRelativeHeaderOffset) {\n    ze.setLocalHeaderOffset(z64.getRelativeHeaderOffset().getLongValue());\n  }\n  if (hasDiskStart) {\n    ze.setDiskNumberStart(z64.getDiskStartNumber().getValue());\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 123,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1429,
                        "startLineNumber": 847,
                        "startColumnNumber": 8,
                        "endLineNumber": 877,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (z64 != null) {\n  final boolean hasUncompressedSize=ze.getSize() == ZIP64_MAGIC;\n  final boolean hasCompressedSize=ze.getCompressedSize() == ZIP64_MAGIC;\n  final boolean hasRelativeHeaderOffset=ze.getLocalHeaderOffset() == ZIP64_MAGIC;\n  final boolean hasDiskStart=ze.getDiskNumberStart() == ZIP64_MAGIC_SHORT;\n  z64.reparseCentralDirectoryData(hasUncompressedSize,hasCompressedSize,hasRelativeHeaderOffset,hasDiskStart);\n  if (hasUncompressedSize) {\n    ze.setSize(z64.getSize().getLongValue());\n  }\n else   if (hasCompressedSize) {\n    z64.setSize(new ZipEightByteInteger(ze.getSize()));\n  }\n  if (hasCompressedSize) {\n    ze.setCompressedSize(z64.getCompressedSize().getLongValue());\n  }\n else   if (hasUncompressedSize) {\n    z64.setCompressedSize(new ZipEightByteInteger(ze.getCompressedSize()));\n  }\n  if (hasRelativeHeaderOffset) {\n    ze.setLocalHeaderOffset(z64.getRelativeHeaderOffset().getLongValue());\n  }\n  if (hasDiskStart) {\n    ze.setDiskNumberStart(z64.getDiskStartNumber().getValue());\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 127,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1860,
                        "startLineNumber": 839,
                        "startColumnNumber": 27,
                        "endLineNumber": 878,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final ZipExtraField extra=ze.getExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);\n  if (extra != null && !(extra instanceof Zip64ExtendedInformationExtraField)) {\n    throw new ZipException(\"archive contains unparseable zip64 extra field\");\n  }\n  final Zip64ExtendedInformationExtraField z64=(Zip64ExtendedInformationExtraField)extra;\n  if (z64 != null) {\n    final boolean hasUncompressedSize=ze.getSize() == ZIP64_MAGIC;\n    final boolean hasCompressedSize=ze.getCompressedSize() == ZIP64_MAGIC;\n    final boolean hasRelativeHeaderOffset=ze.getLocalHeaderOffset() == ZIP64_MAGIC;\n    final boolean hasDiskStart=ze.getDiskNumberStart() == ZIP64_MAGIC_SHORT;\n    z64.reparseCentralDirectoryData(hasUncompressedSize,hasCompressedSize,hasRelativeHeaderOffset,hasDiskStart);\n    if (hasUncompressedSize) {\n      ze.setSize(z64.getSize().getLongValue());\n    }\n else     if (hasCompressedSize) {\n      z64.setSize(new ZipEightByteInteger(ze.getSize()));\n    }\n    if (hasCompressedSize) {\n      ze.setCompressedSize(z64.getCompressedSize().getLongValue());\n    }\n else     if (hasUncompressedSize) {\n      z64.setCompressedSize(new ZipEightByteInteger(ze.getCompressedSize()));\n    }\n    if (hasRelativeHeaderOffset) {\n      ze.setLocalHeaderOffset(z64.getRelativeHeaderOffset().getLongValue());\n    }\n    if (hasDiskStart) {\n      ze.setDiskNumberStart(z64.getDiskStartNumber().getValue());\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 167,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2509,
                        "startLineNumber": 826,
                        "startColumnNumber": 4,
                        "endLineNumber": 878,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * If the entry holds a Zip64 extended information extra field, read sizes from there if the entry's sizes are set to 0xFFFFFFFFF, do the same for the offset of the local file header. <p>Ensures the Zip64 extra either knows both compressed and uncompressed size or neither of both as the internal logic in ExtraFieldUtils forces the field to create local header data even if they are never used - and here a field with only one size would be invalid.</p>\n */\nprivate void setSizesAndOffsetFromZip64Extra(final ZipArchiveEntry ze) throws IOException {\n  final ZipExtraField extra=ze.getExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);\n  if (extra != null && !(extra instanceof Zip64ExtendedInformationExtraField)) {\n    throw new ZipException(\"archive contains unparseable zip64 extra field\");\n  }\n  final Zip64ExtendedInformationExtraField z64=(Zip64ExtendedInformationExtraField)extra;\n  if (z64 != null) {\n    final boolean hasUncompressedSize=ze.getSize() == ZIP64_MAGIC;\n    final boolean hasCompressedSize=ze.getCompressedSize() == ZIP64_MAGIC;\n    final boolean hasRelativeHeaderOffset=ze.getLocalHeaderOffset() == ZIP64_MAGIC;\n    final boolean hasDiskStart=ze.getDiskNumberStart() == ZIP64_MAGIC_SHORT;\n    z64.reparseCentralDirectoryData(hasUncompressedSize,hasCompressedSize,hasRelativeHeaderOffset,hasDiskStart);\n    if (hasUncompressedSize) {\n      ze.setSize(z64.getSize().getLongValue());\n    }\n else     if (hasCompressedSize) {\n      z64.setSize(new ZipEightByteInteger(ze.getSize()));\n    }\n    if (hasCompressedSize) {\n      ze.setCompressedSize(z64.getCompressedSize().getLongValue());\n    }\n else     if (hasUncompressedSize) {\n      z64.setCompressedSize(new ZipEightByteInteger(ze.getCompressedSize()));\n    }\n    if (hasRelativeHeaderOffset) {\n      ze.setLocalHeaderOffset(z64.getRelativeHeaderOffset().getLongValue());\n    }\n    if (hasDiskStart) {\n      ze.setDiskNumberStart(z64.getDiskStartNumber().getValue());\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 179,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                "nodePosition": {
                    "charLength": 40,
                    "startLineNumber": 851,
                    "startColumnNumber": 16,
                    "endLineNumber": 851,
                    "endColumnNumber": 56
                },
                "nodeContext": "ze.getLocalHeaderOffset() == ZIP64_MAGIC",
                "nodeType": "InfixExpression",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
        },
        {
            "nodeContext": "ze",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 852,
                "startColumnNumber": 41,
                "endLineNumber": 852,
                "endColumnNumber": 43
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 23,
                        "startLineNumber": 852,
                        "startColumnNumber": 41,
                        "endLineNumber": 852,
                        "endColumnNumber": 64
                    },
                    "nodeContext": "ze.getDiskNumberStart()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 44,
                        "startLineNumber": 852,
                        "startColumnNumber": 41,
                        "endLineNumber": 852,
                        "endColumnNumber": 85
                    },
                    "nodeContext": "ze.getDiskNumberStart() == ZIP64_MAGIC_SHORT",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 59,
                        "startLineNumber": 852,
                        "startColumnNumber": 26,
                        "endLineNumber": 852,
                        "endColumnNumber": 85
                    },
                    "nodeContext": "hasDiskStart=ze.getDiskNumberStart() == ZIP64_MAGIC_SHORT",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 74,
                        "startLineNumber": 852,
                        "startColumnNumber": 12,
                        "endLineNumber": 852,
                        "endColumnNumber": 86
                    },
                    "nodeContext": "final boolean hasDiskStart=ze.getDiskNumberStart() == ZIP64_MAGIC_SHORT;\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 10,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1412,
                        "startLineNumber": 847,
                        "startColumnNumber": 25,
                        "endLineNumber": 877,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final boolean hasUncompressedSize=ze.getSize() == ZIP64_MAGIC;\n  final boolean hasCompressedSize=ze.getCompressedSize() == ZIP64_MAGIC;\n  final boolean hasRelativeHeaderOffset=ze.getLocalHeaderOffset() == ZIP64_MAGIC;\n  final boolean hasDiskStart=ze.getDiskNumberStart() == ZIP64_MAGIC_SHORT;\n  z64.reparseCentralDirectoryData(hasUncompressedSize,hasCompressedSize,hasRelativeHeaderOffset,hasDiskStart);\n  if (hasUncompressedSize) {\n    ze.setSize(z64.getSize().getLongValue());\n  }\n else   if (hasCompressedSize) {\n    z64.setSize(new ZipEightByteInteger(ze.getSize()));\n  }\n  if (hasCompressedSize) {\n    ze.setCompressedSize(z64.getCompressedSize().getLongValue());\n  }\n else   if (hasUncompressedSize) {\n    z64.setCompressedSize(new ZipEightByteInteger(ze.getCompressedSize()));\n  }\n  if (hasRelativeHeaderOffset) {\n    ze.setLocalHeaderOffset(z64.getRelativeHeaderOffset().getLongValue());\n  }\n  if (hasDiskStart) {\n    ze.setDiskNumberStart(z64.getDiskStartNumber().getValue());\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 123,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1429,
                        "startLineNumber": 847,
                        "startColumnNumber": 8,
                        "endLineNumber": 877,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (z64 != null) {\n  final boolean hasUncompressedSize=ze.getSize() == ZIP64_MAGIC;\n  final boolean hasCompressedSize=ze.getCompressedSize() == ZIP64_MAGIC;\n  final boolean hasRelativeHeaderOffset=ze.getLocalHeaderOffset() == ZIP64_MAGIC;\n  final boolean hasDiskStart=ze.getDiskNumberStart() == ZIP64_MAGIC_SHORT;\n  z64.reparseCentralDirectoryData(hasUncompressedSize,hasCompressedSize,hasRelativeHeaderOffset,hasDiskStart);\n  if (hasUncompressedSize) {\n    ze.setSize(z64.getSize().getLongValue());\n  }\n else   if (hasCompressedSize) {\n    z64.setSize(new ZipEightByteInteger(ze.getSize()));\n  }\n  if (hasCompressedSize) {\n    ze.setCompressedSize(z64.getCompressedSize().getLongValue());\n  }\n else   if (hasUncompressedSize) {\n    z64.setCompressedSize(new ZipEightByteInteger(ze.getCompressedSize()));\n  }\n  if (hasRelativeHeaderOffset) {\n    ze.setLocalHeaderOffset(z64.getRelativeHeaderOffset().getLongValue());\n  }\n  if (hasDiskStart) {\n    ze.setDiskNumberStart(z64.getDiskStartNumber().getValue());\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 127,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1860,
                        "startLineNumber": 839,
                        "startColumnNumber": 27,
                        "endLineNumber": 878,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final ZipExtraField extra=ze.getExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);\n  if (extra != null && !(extra instanceof Zip64ExtendedInformationExtraField)) {\n    throw new ZipException(\"archive contains unparseable zip64 extra field\");\n  }\n  final Zip64ExtendedInformationExtraField z64=(Zip64ExtendedInformationExtraField)extra;\n  if (z64 != null) {\n    final boolean hasUncompressedSize=ze.getSize() == ZIP64_MAGIC;\n    final boolean hasCompressedSize=ze.getCompressedSize() == ZIP64_MAGIC;\n    final boolean hasRelativeHeaderOffset=ze.getLocalHeaderOffset() == ZIP64_MAGIC;\n    final boolean hasDiskStart=ze.getDiskNumberStart() == ZIP64_MAGIC_SHORT;\n    z64.reparseCentralDirectoryData(hasUncompressedSize,hasCompressedSize,hasRelativeHeaderOffset,hasDiskStart);\n    if (hasUncompressedSize) {\n      ze.setSize(z64.getSize().getLongValue());\n    }\n else     if (hasCompressedSize) {\n      z64.setSize(new ZipEightByteInteger(ze.getSize()));\n    }\n    if (hasCompressedSize) {\n      ze.setCompressedSize(z64.getCompressedSize().getLongValue());\n    }\n else     if (hasUncompressedSize) {\n      z64.setCompressedSize(new ZipEightByteInteger(ze.getCompressedSize()));\n    }\n    if (hasRelativeHeaderOffset) {\n      ze.setLocalHeaderOffset(z64.getRelativeHeaderOffset().getLongValue());\n    }\n    if (hasDiskStart) {\n      ze.setDiskNumberStart(z64.getDiskStartNumber().getValue());\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 167,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2509,
                        "startLineNumber": 826,
                        "startColumnNumber": 4,
                        "endLineNumber": 878,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * If the entry holds a Zip64 extended information extra field, read sizes from there if the entry's sizes are set to 0xFFFFFFFFF, do the same for the offset of the local file header. <p>Ensures the Zip64 extra either knows both compressed and uncompressed size or neither of both as the internal logic in ExtraFieldUtils forces the field to create local header data even if they are never used - and here a field with only one size would be invalid.</p>\n */\nprivate void setSizesAndOffsetFromZip64Extra(final ZipArchiveEntry ze) throws IOException {\n  final ZipExtraField extra=ze.getExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);\n  if (extra != null && !(extra instanceof Zip64ExtendedInformationExtraField)) {\n    throw new ZipException(\"archive contains unparseable zip64 extra field\");\n  }\n  final Zip64ExtendedInformationExtraField z64=(Zip64ExtendedInformationExtraField)extra;\n  if (z64 != null) {\n    final boolean hasUncompressedSize=ze.getSize() == ZIP64_MAGIC;\n    final boolean hasCompressedSize=ze.getCompressedSize() == ZIP64_MAGIC;\n    final boolean hasRelativeHeaderOffset=ze.getLocalHeaderOffset() == ZIP64_MAGIC;\n    final boolean hasDiskStart=ze.getDiskNumberStart() == ZIP64_MAGIC_SHORT;\n    z64.reparseCentralDirectoryData(hasUncompressedSize,hasCompressedSize,hasRelativeHeaderOffset,hasDiskStart);\n    if (hasUncompressedSize) {\n      ze.setSize(z64.getSize().getLongValue());\n    }\n else     if (hasCompressedSize) {\n      z64.setSize(new ZipEightByteInteger(ze.getSize()));\n    }\n    if (hasCompressedSize) {\n      ze.setCompressedSize(z64.getCompressedSize().getLongValue());\n    }\n else     if (hasUncompressedSize) {\n      z64.setCompressedSize(new ZipEightByteInteger(ze.getCompressedSize()));\n    }\n    if (hasRelativeHeaderOffset) {\n      ze.setLocalHeaderOffset(z64.getRelativeHeaderOffset().getLongValue());\n    }\n    if (hasDiskStart) {\n      ze.setDiskNumberStart(z64.getDiskStartNumber().getValue());\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 179,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 74,
                    "startLineNumber": 852,
                    "startColumnNumber": 12,
                    "endLineNumber": 852,
                    "endColumnNumber": 86
                },
                "nodeContext": "final boolean hasDiskStart=ze.getDiskNumberStart() == ZIP64_MAGIC_SHORT;\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 10,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
        },
        {
            "nodeContext": "ze",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 859,
                "startColumnNumber": 16,
                "endLineNumber": 859,
                "endColumnNumber": 18
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 40,
                        "startLineNumber": 859,
                        "startColumnNumber": 16,
                        "endLineNumber": 859,
                        "endColumnNumber": 56
                    },
                    "nodeContext": "ze.setSize(z64.getSize().getLongValue())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 41,
                        "startLineNumber": 859,
                        "startColumnNumber": 16,
                        "endLineNumber": 859,
                        "endColumnNumber": 57
                    },
                    "nodeContext": "ze.setSize(z64.getSize().getLongValue());\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 9,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 75,
                        "startLineNumber": 858,
                        "startColumnNumber": 37,
                        "endLineNumber": 860,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  ze.setSize(z64.getSize().getLongValue());\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 10,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 214,
                        "startLineNumber": 858,
                        "startColumnNumber": 12,
                        "endLineNumber": 862,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (hasUncompressedSize) {\n  ze.setSize(z64.getSize().getLongValue());\n}\n else if (hasCompressedSize) {\n  z64.setSize(new ZipEightByteInteger(ze.getSize()));\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 25,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1412,
                        "startLineNumber": 847,
                        "startColumnNumber": 25,
                        "endLineNumber": 877,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final boolean hasUncompressedSize=ze.getSize() == ZIP64_MAGIC;\n  final boolean hasCompressedSize=ze.getCompressedSize() == ZIP64_MAGIC;\n  final boolean hasRelativeHeaderOffset=ze.getLocalHeaderOffset() == ZIP64_MAGIC;\n  final boolean hasDiskStart=ze.getDiskNumberStart() == ZIP64_MAGIC_SHORT;\n  z64.reparseCentralDirectoryData(hasUncompressedSize,hasCompressedSize,hasRelativeHeaderOffset,hasDiskStart);\n  if (hasUncompressedSize) {\n    ze.setSize(z64.getSize().getLongValue());\n  }\n else   if (hasCompressedSize) {\n    z64.setSize(new ZipEightByteInteger(ze.getSize()));\n  }\n  if (hasCompressedSize) {\n    ze.setCompressedSize(z64.getCompressedSize().getLongValue());\n  }\n else   if (hasUncompressedSize) {\n    z64.setCompressedSize(new ZipEightByteInteger(ze.getCompressedSize()));\n  }\n  if (hasRelativeHeaderOffset) {\n    ze.setLocalHeaderOffset(z64.getRelativeHeaderOffset().getLongValue());\n  }\n  if (hasDiskStart) {\n    ze.setDiskNumberStart(z64.getDiskStartNumber().getValue());\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 123,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1429,
                        "startLineNumber": 847,
                        "startColumnNumber": 8,
                        "endLineNumber": 877,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (z64 != null) {\n  final boolean hasUncompressedSize=ze.getSize() == ZIP64_MAGIC;\n  final boolean hasCompressedSize=ze.getCompressedSize() == ZIP64_MAGIC;\n  final boolean hasRelativeHeaderOffset=ze.getLocalHeaderOffset() == ZIP64_MAGIC;\n  final boolean hasDiskStart=ze.getDiskNumberStart() == ZIP64_MAGIC_SHORT;\n  z64.reparseCentralDirectoryData(hasUncompressedSize,hasCompressedSize,hasRelativeHeaderOffset,hasDiskStart);\n  if (hasUncompressedSize) {\n    ze.setSize(z64.getSize().getLongValue());\n  }\n else   if (hasCompressedSize) {\n    z64.setSize(new ZipEightByteInteger(ze.getSize()));\n  }\n  if (hasCompressedSize) {\n    ze.setCompressedSize(z64.getCompressedSize().getLongValue());\n  }\n else   if (hasUncompressedSize) {\n    z64.setCompressedSize(new ZipEightByteInteger(ze.getCompressedSize()));\n  }\n  if (hasRelativeHeaderOffset) {\n    ze.setLocalHeaderOffset(z64.getRelativeHeaderOffset().getLongValue());\n  }\n  if (hasDiskStart) {\n    ze.setDiskNumberStart(z64.getDiskStartNumber().getValue());\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 127,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1860,
                        "startLineNumber": 839,
                        "startColumnNumber": 27,
                        "endLineNumber": 878,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final ZipExtraField extra=ze.getExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);\n  if (extra != null && !(extra instanceof Zip64ExtendedInformationExtraField)) {\n    throw new ZipException(\"archive contains unparseable zip64 extra field\");\n  }\n  final Zip64ExtendedInformationExtraField z64=(Zip64ExtendedInformationExtraField)extra;\n  if (z64 != null) {\n    final boolean hasUncompressedSize=ze.getSize() == ZIP64_MAGIC;\n    final boolean hasCompressedSize=ze.getCompressedSize() == ZIP64_MAGIC;\n    final boolean hasRelativeHeaderOffset=ze.getLocalHeaderOffset() == ZIP64_MAGIC;\n    final boolean hasDiskStart=ze.getDiskNumberStart() == ZIP64_MAGIC_SHORT;\n    z64.reparseCentralDirectoryData(hasUncompressedSize,hasCompressedSize,hasRelativeHeaderOffset,hasDiskStart);\n    if (hasUncompressedSize) {\n      ze.setSize(z64.getSize().getLongValue());\n    }\n else     if (hasCompressedSize) {\n      z64.setSize(new ZipEightByteInteger(ze.getSize()));\n    }\n    if (hasCompressedSize) {\n      ze.setCompressedSize(z64.getCompressedSize().getLongValue());\n    }\n else     if (hasUncompressedSize) {\n      z64.setCompressedSize(new ZipEightByteInteger(ze.getCompressedSize()));\n    }\n    if (hasRelativeHeaderOffset) {\n      ze.setLocalHeaderOffset(z64.getRelativeHeaderOffset().getLongValue());\n    }\n    if (hasDiskStart) {\n      ze.setDiskNumberStart(z64.getDiskStartNumber().getValue());\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 167,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2509,
                        "startLineNumber": 826,
                        "startColumnNumber": 4,
                        "endLineNumber": 878,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * If the entry holds a Zip64 extended information extra field, read sizes from there if the entry's sizes are set to 0xFFFFFFFFF, do the same for the offset of the local file header. <p>Ensures the Zip64 extra either knows both compressed and uncompressed size or neither of both as the internal logic in ExtraFieldUtils forces the field to create local header data even if they are never used - and here a field with only one size would be invalid.</p>\n */\nprivate void setSizesAndOffsetFromZip64Extra(final ZipArchiveEntry ze) throws IOException {\n  final ZipExtraField extra=ze.getExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);\n  if (extra != null && !(extra instanceof Zip64ExtendedInformationExtraField)) {\n    throw new ZipException(\"archive contains unparseable zip64 extra field\");\n  }\n  final Zip64ExtendedInformationExtraField z64=(Zip64ExtendedInformationExtraField)extra;\n  if (z64 != null) {\n    final boolean hasUncompressedSize=ze.getSize() == ZIP64_MAGIC;\n    final boolean hasCompressedSize=ze.getCompressedSize() == ZIP64_MAGIC;\n    final boolean hasRelativeHeaderOffset=ze.getLocalHeaderOffset() == ZIP64_MAGIC;\n    final boolean hasDiskStart=ze.getDiskNumberStart() == ZIP64_MAGIC_SHORT;\n    z64.reparseCentralDirectoryData(hasUncompressedSize,hasCompressedSize,hasRelativeHeaderOffset,hasDiskStart);\n    if (hasUncompressedSize) {\n      ze.setSize(z64.getSize().getLongValue());\n    }\n else     if (hasCompressedSize) {\n      z64.setSize(new ZipEightByteInteger(ze.getSize()));\n    }\n    if (hasCompressedSize) {\n      ze.setCompressedSize(z64.getCompressedSize().getLongValue());\n    }\n else     if (hasUncompressedSize) {\n      z64.setCompressedSize(new ZipEightByteInteger(ze.getCompressedSize()));\n    }\n    if (hasRelativeHeaderOffset) {\n      ze.setLocalHeaderOffset(z64.getRelativeHeaderOffset().getLongValue());\n    }\n    if (hasDiskStart) {\n      ze.setDiskNumberStart(z64.getDiskStartNumber().getValue());\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 179,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 41,
                    "startLineNumber": 859,
                    "startColumnNumber": 16,
                    "endLineNumber": 859,
                    "endColumnNumber": 57
                },
                "nodeContext": "ze.setSize(z64.getSize().getLongValue());\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 9,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
        },
        {
            "nodeContext": "ze",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 861,
                "startColumnNumber": 52,
                "endLineNumber": 861,
                "endColumnNumber": 54
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
                    "nodePosition": {
                        "charLength": 12,
                        "startLineNumber": 861,
                        "startColumnNumber": 52,
                        "endLineNumber": 861,
                        "endColumnNumber": 64
                    },
                    "nodeContext": "ze.getSize()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 37,
                        "startLineNumber": 861,
                        "startColumnNumber": 28,
                        "endLineNumber": 861,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "new ZipEightByteInteger(ze.getSize())",
                    "nodeType": "ClassInstanceCreation",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 50,
                        "startLineNumber": 861,
                        "startColumnNumber": 16,
                        "endLineNumber": 861,
                        "endColumnNumber": 66
                    },
                    "nodeContext": "z64.setSize(new ZipEightByteInteger(ze.getSize()))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 51,
                        "startLineNumber": 861,
                        "startColumnNumber": 16,
                        "endLineNumber": 861,
                        "endColumnNumber": 67
                    },
                    "nodeContext": "z64.setSize(new ZipEightByteInteger(ze.getSize()));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 10,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 85,
                        "startLineNumber": 860,
                        "startColumnNumber": 42,
                        "endLineNumber": 862,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  z64.setSize(new ZipEightByteInteger(ze.getSize()));\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 11,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 108,
                        "startLineNumber": 860,
                        "startColumnNumber": 19,
                        "endLineNumber": 862,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (hasCompressedSize) {\n  z64.setSize(new ZipEightByteInteger(ze.getSize()));\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 13,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 214,
                        "startLineNumber": 858,
                        "startColumnNumber": 12,
                        "endLineNumber": 862,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (hasUncompressedSize) {\n  ze.setSize(z64.getSize().getLongValue());\n}\n else if (hasCompressedSize) {\n  z64.setSize(new ZipEightByteInteger(ze.getSize()));\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 25,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1412,
                        "startLineNumber": 847,
                        "startColumnNumber": 25,
                        "endLineNumber": 877,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final boolean hasUncompressedSize=ze.getSize() == ZIP64_MAGIC;\n  final boolean hasCompressedSize=ze.getCompressedSize() == ZIP64_MAGIC;\n  final boolean hasRelativeHeaderOffset=ze.getLocalHeaderOffset() == ZIP64_MAGIC;\n  final boolean hasDiskStart=ze.getDiskNumberStart() == ZIP64_MAGIC_SHORT;\n  z64.reparseCentralDirectoryData(hasUncompressedSize,hasCompressedSize,hasRelativeHeaderOffset,hasDiskStart);\n  if (hasUncompressedSize) {\n    ze.setSize(z64.getSize().getLongValue());\n  }\n else   if (hasCompressedSize) {\n    z64.setSize(new ZipEightByteInteger(ze.getSize()));\n  }\n  if (hasCompressedSize) {\n    ze.setCompressedSize(z64.getCompressedSize().getLongValue());\n  }\n else   if (hasUncompressedSize) {\n    z64.setCompressedSize(new ZipEightByteInteger(ze.getCompressedSize()));\n  }\n  if (hasRelativeHeaderOffset) {\n    ze.setLocalHeaderOffset(z64.getRelativeHeaderOffset().getLongValue());\n  }\n  if (hasDiskStart) {\n    ze.setDiskNumberStart(z64.getDiskStartNumber().getValue());\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 123,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1429,
                        "startLineNumber": 847,
                        "startColumnNumber": 8,
                        "endLineNumber": 877,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (z64 != null) {\n  final boolean hasUncompressedSize=ze.getSize() == ZIP64_MAGIC;\n  final boolean hasCompressedSize=ze.getCompressedSize() == ZIP64_MAGIC;\n  final boolean hasRelativeHeaderOffset=ze.getLocalHeaderOffset() == ZIP64_MAGIC;\n  final boolean hasDiskStart=ze.getDiskNumberStart() == ZIP64_MAGIC_SHORT;\n  z64.reparseCentralDirectoryData(hasUncompressedSize,hasCompressedSize,hasRelativeHeaderOffset,hasDiskStart);\n  if (hasUncompressedSize) {\n    ze.setSize(z64.getSize().getLongValue());\n  }\n else   if (hasCompressedSize) {\n    z64.setSize(new ZipEightByteInteger(ze.getSize()));\n  }\n  if (hasCompressedSize) {\n    ze.setCompressedSize(z64.getCompressedSize().getLongValue());\n  }\n else   if (hasUncompressedSize) {\n    z64.setCompressedSize(new ZipEightByteInteger(ze.getCompressedSize()));\n  }\n  if (hasRelativeHeaderOffset) {\n    ze.setLocalHeaderOffset(z64.getRelativeHeaderOffset().getLongValue());\n  }\n  if (hasDiskStart) {\n    ze.setDiskNumberStart(z64.getDiskStartNumber().getValue());\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 127,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1860,
                        "startLineNumber": 839,
                        "startColumnNumber": 27,
                        "endLineNumber": 878,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final ZipExtraField extra=ze.getExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);\n  if (extra != null && !(extra instanceof Zip64ExtendedInformationExtraField)) {\n    throw new ZipException(\"archive contains unparseable zip64 extra field\");\n  }\n  final Zip64ExtendedInformationExtraField z64=(Zip64ExtendedInformationExtraField)extra;\n  if (z64 != null) {\n    final boolean hasUncompressedSize=ze.getSize() == ZIP64_MAGIC;\n    final boolean hasCompressedSize=ze.getCompressedSize() == ZIP64_MAGIC;\n    final boolean hasRelativeHeaderOffset=ze.getLocalHeaderOffset() == ZIP64_MAGIC;\n    final boolean hasDiskStart=ze.getDiskNumberStart() == ZIP64_MAGIC_SHORT;\n    z64.reparseCentralDirectoryData(hasUncompressedSize,hasCompressedSize,hasRelativeHeaderOffset,hasDiskStart);\n    if (hasUncompressedSize) {\n      ze.setSize(z64.getSize().getLongValue());\n    }\n else     if (hasCompressedSize) {\n      z64.setSize(new ZipEightByteInteger(ze.getSize()));\n    }\n    if (hasCompressedSize) {\n      ze.setCompressedSize(z64.getCompressedSize().getLongValue());\n    }\n else     if (hasUncompressedSize) {\n      z64.setCompressedSize(new ZipEightByteInteger(ze.getCompressedSize()));\n    }\n    if (hasRelativeHeaderOffset) {\n      ze.setLocalHeaderOffset(z64.getRelativeHeaderOffset().getLongValue());\n    }\n    if (hasDiskStart) {\n      ze.setDiskNumberStart(z64.getDiskStartNumber().getValue());\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 167,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2509,
                        "startLineNumber": 826,
                        "startColumnNumber": 4,
                        "endLineNumber": 878,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * If the entry holds a Zip64 extended information extra field, read sizes from there if the entry's sizes are set to 0xFFFFFFFFF, do the same for the offset of the local file header. <p>Ensures the Zip64 extra either knows both compressed and uncompressed size or neither of both as the internal logic in ExtraFieldUtils forces the field to create local header data even if they are never used - and here a field with only one size would be invalid.</p>\n */\nprivate void setSizesAndOffsetFromZip64Extra(final ZipArchiveEntry ze) throws IOException {\n  final ZipExtraField extra=ze.getExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);\n  if (extra != null && !(extra instanceof Zip64ExtendedInformationExtraField)) {\n    throw new ZipException(\"archive contains unparseable zip64 extra field\");\n  }\n  final Zip64ExtendedInformationExtraField z64=(Zip64ExtendedInformationExtraField)extra;\n  if (z64 != null) {\n    final boolean hasUncompressedSize=ze.getSize() == ZIP64_MAGIC;\n    final boolean hasCompressedSize=ze.getCompressedSize() == ZIP64_MAGIC;\n    final boolean hasRelativeHeaderOffset=ze.getLocalHeaderOffset() == ZIP64_MAGIC;\n    final boolean hasDiskStart=ze.getDiskNumberStart() == ZIP64_MAGIC_SHORT;\n    z64.reparseCentralDirectoryData(hasUncompressedSize,hasCompressedSize,hasRelativeHeaderOffset,hasDiskStart);\n    if (hasUncompressedSize) {\n      ze.setSize(z64.getSize().getLongValue());\n    }\n else     if (hasCompressedSize) {\n      z64.setSize(new ZipEightByteInteger(ze.getSize()));\n    }\n    if (hasCompressedSize) {\n      ze.setCompressedSize(z64.getCompressedSize().getLongValue());\n    }\n else     if (hasUncompressedSize) {\n      z64.setCompressedSize(new ZipEightByteInteger(ze.getCompressedSize()));\n    }\n    if (hasRelativeHeaderOffset) {\n      ze.setLocalHeaderOffset(z64.getRelativeHeaderOffset().getLongValue());\n    }\n    if (hasDiskStart) {\n      ze.setDiskNumberStart(z64.getDiskStartNumber().getValue());\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 179,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 51,
                    "startLineNumber": 861,
                    "startColumnNumber": 16,
                    "endLineNumber": 861,
                    "endColumnNumber": 67
                },
                "nodeContext": "z64.setSize(new ZipEightByteInteger(ze.getSize()));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 10,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
        },
        {
            "nodeContext": "ze",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 865,
                "startColumnNumber": 16,
                "endLineNumber": 865,
                "endColumnNumber": 18
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 60,
                        "startLineNumber": 865,
                        "startColumnNumber": 16,
                        "endLineNumber": 865,
                        "endColumnNumber": 76
                    },
                    "nodeContext": "ze.setCompressedSize(z64.getCompressedSize().getLongValue())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 61,
                        "startLineNumber": 865,
                        "startColumnNumber": 16,
                        "endLineNumber": 865,
                        "endColumnNumber": 77
                    },
                    "nodeContext": "ze.setCompressedSize(z64.getCompressedSize().getLongValue());\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 9,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 95,
                        "startLineNumber": 864,
                        "startColumnNumber": 35,
                        "endLineNumber": 866,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  ze.setCompressedSize(z64.getCompressedSize().getLongValue());\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 10,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 254,
                        "startLineNumber": 864,
                        "startColumnNumber": 12,
                        "endLineNumber": 868,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (hasCompressedSize) {\n  ze.setCompressedSize(z64.getCompressedSize().getLongValue());\n}\n else if (hasUncompressedSize) {\n  z64.setCompressedSize(new ZipEightByteInteger(ze.getCompressedSize()));\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 25,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1412,
                        "startLineNumber": 847,
                        "startColumnNumber": 25,
                        "endLineNumber": 877,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final boolean hasUncompressedSize=ze.getSize() == ZIP64_MAGIC;\n  final boolean hasCompressedSize=ze.getCompressedSize() == ZIP64_MAGIC;\n  final boolean hasRelativeHeaderOffset=ze.getLocalHeaderOffset() == ZIP64_MAGIC;\n  final boolean hasDiskStart=ze.getDiskNumberStart() == ZIP64_MAGIC_SHORT;\n  z64.reparseCentralDirectoryData(hasUncompressedSize,hasCompressedSize,hasRelativeHeaderOffset,hasDiskStart);\n  if (hasUncompressedSize) {\n    ze.setSize(z64.getSize().getLongValue());\n  }\n else   if (hasCompressedSize) {\n    z64.setSize(new ZipEightByteInteger(ze.getSize()));\n  }\n  if (hasCompressedSize) {\n    ze.setCompressedSize(z64.getCompressedSize().getLongValue());\n  }\n else   if (hasUncompressedSize) {\n    z64.setCompressedSize(new ZipEightByteInteger(ze.getCompressedSize()));\n  }\n  if (hasRelativeHeaderOffset) {\n    ze.setLocalHeaderOffset(z64.getRelativeHeaderOffset().getLongValue());\n  }\n  if (hasDiskStart) {\n    ze.setDiskNumberStart(z64.getDiskStartNumber().getValue());\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 123,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1429,
                        "startLineNumber": 847,
                        "startColumnNumber": 8,
                        "endLineNumber": 877,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (z64 != null) {\n  final boolean hasUncompressedSize=ze.getSize() == ZIP64_MAGIC;\n  final boolean hasCompressedSize=ze.getCompressedSize() == ZIP64_MAGIC;\n  final boolean hasRelativeHeaderOffset=ze.getLocalHeaderOffset() == ZIP64_MAGIC;\n  final boolean hasDiskStart=ze.getDiskNumberStart() == ZIP64_MAGIC_SHORT;\n  z64.reparseCentralDirectoryData(hasUncompressedSize,hasCompressedSize,hasRelativeHeaderOffset,hasDiskStart);\n  if (hasUncompressedSize) {\n    ze.setSize(z64.getSize().getLongValue());\n  }\n else   if (hasCompressedSize) {\n    z64.setSize(new ZipEightByteInteger(ze.getSize()));\n  }\n  if (hasCompressedSize) {\n    ze.setCompressedSize(z64.getCompressedSize().getLongValue());\n  }\n else   if (hasUncompressedSize) {\n    z64.setCompressedSize(new ZipEightByteInteger(ze.getCompressedSize()));\n  }\n  if (hasRelativeHeaderOffset) {\n    ze.setLocalHeaderOffset(z64.getRelativeHeaderOffset().getLongValue());\n  }\n  if (hasDiskStart) {\n    ze.setDiskNumberStart(z64.getDiskStartNumber().getValue());\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 127,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1860,
                        "startLineNumber": 839,
                        "startColumnNumber": 27,
                        "endLineNumber": 878,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final ZipExtraField extra=ze.getExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);\n  if (extra != null && !(extra instanceof Zip64ExtendedInformationExtraField)) {\n    throw new ZipException(\"archive contains unparseable zip64 extra field\");\n  }\n  final Zip64ExtendedInformationExtraField z64=(Zip64ExtendedInformationExtraField)extra;\n  if (z64 != null) {\n    final boolean hasUncompressedSize=ze.getSize() == ZIP64_MAGIC;\n    final boolean hasCompressedSize=ze.getCompressedSize() == ZIP64_MAGIC;\n    final boolean hasRelativeHeaderOffset=ze.getLocalHeaderOffset() == ZIP64_MAGIC;\n    final boolean hasDiskStart=ze.getDiskNumberStart() == ZIP64_MAGIC_SHORT;\n    z64.reparseCentralDirectoryData(hasUncompressedSize,hasCompressedSize,hasRelativeHeaderOffset,hasDiskStart);\n    if (hasUncompressedSize) {\n      ze.setSize(z64.getSize().getLongValue());\n    }\n else     if (hasCompressedSize) {\n      z64.setSize(new ZipEightByteInteger(ze.getSize()));\n    }\n    if (hasCompressedSize) {\n      ze.setCompressedSize(z64.getCompressedSize().getLongValue());\n    }\n else     if (hasUncompressedSize) {\n      z64.setCompressedSize(new ZipEightByteInteger(ze.getCompressedSize()));\n    }\n    if (hasRelativeHeaderOffset) {\n      ze.setLocalHeaderOffset(z64.getRelativeHeaderOffset().getLongValue());\n    }\n    if (hasDiskStart) {\n      ze.setDiskNumberStart(z64.getDiskStartNumber().getValue());\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 167,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2509,
                        "startLineNumber": 826,
                        "startColumnNumber": 4,
                        "endLineNumber": 878,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * If the entry holds a Zip64 extended information extra field, read sizes from there if the entry's sizes are set to 0xFFFFFFFFF, do the same for the offset of the local file header. <p>Ensures the Zip64 extra either knows both compressed and uncompressed size or neither of both as the internal logic in ExtraFieldUtils forces the field to create local header data even if they are never used - and here a field with only one size would be invalid.</p>\n */\nprivate void setSizesAndOffsetFromZip64Extra(final ZipArchiveEntry ze) throws IOException {\n  final ZipExtraField extra=ze.getExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);\n  if (extra != null && !(extra instanceof Zip64ExtendedInformationExtraField)) {\n    throw new ZipException(\"archive contains unparseable zip64 extra field\");\n  }\n  final Zip64ExtendedInformationExtraField z64=(Zip64ExtendedInformationExtraField)extra;\n  if (z64 != null) {\n    final boolean hasUncompressedSize=ze.getSize() == ZIP64_MAGIC;\n    final boolean hasCompressedSize=ze.getCompressedSize() == ZIP64_MAGIC;\n    final boolean hasRelativeHeaderOffset=ze.getLocalHeaderOffset() == ZIP64_MAGIC;\n    final boolean hasDiskStart=ze.getDiskNumberStart() == ZIP64_MAGIC_SHORT;\n    z64.reparseCentralDirectoryData(hasUncompressedSize,hasCompressedSize,hasRelativeHeaderOffset,hasDiskStart);\n    if (hasUncompressedSize) {\n      ze.setSize(z64.getSize().getLongValue());\n    }\n else     if (hasCompressedSize) {\n      z64.setSize(new ZipEightByteInteger(ze.getSize()));\n    }\n    if (hasCompressedSize) {\n      ze.setCompressedSize(z64.getCompressedSize().getLongValue());\n    }\n else     if (hasUncompressedSize) {\n      z64.setCompressedSize(new ZipEightByteInteger(ze.getCompressedSize()));\n    }\n    if (hasRelativeHeaderOffset) {\n      ze.setLocalHeaderOffset(z64.getRelativeHeaderOffset().getLongValue());\n    }\n    if (hasDiskStart) {\n      ze.setDiskNumberStart(z64.getDiskStartNumber().getValue());\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 179,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 61,
                    "startLineNumber": 865,
                    "startColumnNumber": 16,
                    "endLineNumber": 865,
                    "endColumnNumber": 77
                },
                "nodeContext": "ze.setCompressedSize(z64.getCompressedSize().getLongValue());\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 9,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
        },
        {
            "nodeContext": "ze",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 867,
                "startColumnNumber": 62,
                "endLineNumber": 867,
                "endColumnNumber": 64
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
                    "nodePosition": {
                        "charLength": 22,
                        "startLineNumber": 867,
                        "startColumnNumber": 62,
                        "endLineNumber": 867,
                        "endColumnNumber": 84
                    },
                    "nodeContext": "ze.getCompressedSize()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 47,
                        "startLineNumber": 867,
                        "startColumnNumber": 38,
                        "endLineNumber": 867,
                        "endColumnNumber": 85
                    },
                    "nodeContext": "new ZipEightByteInteger(ze.getCompressedSize())",
                    "nodeType": "ClassInstanceCreation",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 70,
                        "startLineNumber": 867,
                        "startColumnNumber": 16,
                        "endLineNumber": 867,
                        "endColumnNumber": 86
                    },
                    "nodeContext": "z64.setCompressedSize(new ZipEightByteInteger(ze.getCompressedSize()))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 71,
                        "startLineNumber": 867,
                        "startColumnNumber": 16,
                        "endLineNumber": 867,
                        "endColumnNumber": 87
                    },
                    "nodeContext": "z64.setCompressedSize(new ZipEightByteInteger(ze.getCompressedSize()));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 10,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 105,
                        "startLineNumber": 866,
                        "startColumnNumber": 44,
                        "endLineNumber": 868,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  z64.setCompressedSize(new ZipEightByteInteger(ze.getCompressedSize()));\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 11,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 130,
                        "startLineNumber": 866,
                        "startColumnNumber": 19,
                        "endLineNumber": 868,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (hasUncompressedSize) {\n  z64.setCompressedSize(new ZipEightByteInteger(ze.getCompressedSize()));\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 13,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 254,
                        "startLineNumber": 864,
                        "startColumnNumber": 12,
                        "endLineNumber": 868,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (hasCompressedSize) {\n  ze.setCompressedSize(z64.getCompressedSize().getLongValue());\n}\n else if (hasUncompressedSize) {\n  z64.setCompressedSize(new ZipEightByteInteger(ze.getCompressedSize()));\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 25,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1412,
                        "startLineNumber": 847,
                        "startColumnNumber": 25,
                        "endLineNumber": 877,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final boolean hasUncompressedSize=ze.getSize() == ZIP64_MAGIC;\n  final boolean hasCompressedSize=ze.getCompressedSize() == ZIP64_MAGIC;\n  final boolean hasRelativeHeaderOffset=ze.getLocalHeaderOffset() == ZIP64_MAGIC;\n  final boolean hasDiskStart=ze.getDiskNumberStart() == ZIP64_MAGIC_SHORT;\n  z64.reparseCentralDirectoryData(hasUncompressedSize,hasCompressedSize,hasRelativeHeaderOffset,hasDiskStart);\n  if (hasUncompressedSize) {\n    ze.setSize(z64.getSize().getLongValue());\n  }\n else   if (hasCompressedSize) {\n    z64.setSize(new ZipEightByteInteger(ze.getSize()));\n  }\n  if (hasCompressedSize) {\n    ze.setCompressedSize(z64.getCompressedSize().getLongValue());\n  }\n else   if (hasUncompressedSize) {\n    z64.setCompressedSize(new ZipEightByteInteger(ze.getCompressedSize()));\n  }\n  if (hasRelativeHeaderOffset) {\n    ze.setLocalHeaderOffset(z64.getRelativeHeaderOffset().getLongValue());\n  }\n  if (hasDiskStart) {\n    ze.setDiskNumberStart(z64.getDiskStartNumber().getValue());\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 123,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1429,
                        "startLineNumber": 847,
                        "startColumnNumber": 8,
                        "endLineNumber": 877,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (z64 != null) {\n  final boolean hasUncompressedSize=ze.getSize() == ZIP64_MAGIC;\n  final boolean hasCompressedSize=ze.getCompressedSize() == ZIP64_MAGIC;\n  final boolean hasRelativeHeaderOffset=ze.getLocalHeaderOffset() == ZIP64_MAGIC;\n  final boolean hasDiskStart=ze.getDiskNumberStart() == ZIP64_MAGIC_SHORT;\n  z64.reparseCentralDirectoryData(hasUncompressedSize,hasCompressedSize,hasRelativeHeaderOffset,hasDiskStart);\n  if (hasUncompressedSize) {\n    ze.setSize(z64.getSize().getLongValue());\n  }\n else   if (hasCompressedSize) {\n    z64.setSize(new ZipEightByteInteger(ze.getSize()));\n  }\n  if (hasCompressedSize) {\n    ze.setCompressedSize(z64.getCompressedSize().getLongValue());\n  }\n else   if (hasUncompressedSize) {\n    z64.setCompressedSize(new ZipEightByteInteger(ze.getCompressedSize()));\n  }\n  if (hasRelativeHeaderOffset) {\n    ze.setLocalHeaderOffset(z64.getRelativeHeaderOffset().getLongValue());\n  }\n  if (hasDiskStart) {\n    ze.setDiskNumberStart(z64.getDiskStartNumber().getValue());\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 127,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1860,
                        "startLineNumber": 839,
                        "startColumnNumber": 27,
                        "endLineNumber": 878,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final ZipExtraField extra=ze.getExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);\n  if (extra != null && !(extra instanceof Zip64ExtendedInformationExtraField)) {\n    throw new ZipException(\"archive contains unparseable zip64 extra field\");\n  }\n  final Zip64ExtendedInformationExtraField z64=(Zip64ExtendedInformationExtraField)extra;\n  if (z64 != null) {\n    final boolean hasUncompressedSize=ze.getSize() == ZIP64_MAGIC;\n    final boolean hasCompressedSize=ze.getCompressedSize() == ZIP64_MAGIC;\n    final boolean hasRelativeHeaderOffset=ze.getLocalHeaderOffset() == ZIP64_MAGIC;\n    final boolean hasDiskStart=ze.getDiskNumberStart() == ZIP64_MAGIC_SHORT;\n    z64.reparseCentralDirectoryData(hasUncompressedSize,hasCompressedSize,hasRelativeHeaderOffset,hasDiskStart);\n    if (hasUncompressedSize) {\n      ze.setSize(z64.getSize().getLongValue());\n    }\n else     if (hasCompressedSize) {\n      z64.setSize(new ZipEightByteInteger(ze.getSize()));\n    }\n    if (hasCompressedSize) {\n      ze.setCompressedSize(z64.getCompressedSize().getLongValue());\n    }\n else     if (hasUncompressedSize) {\n      z64.setCompressedSize(new ZipEightByteInteger(ze.getCompressedSize()));\n    }\n    if (hasRelativeHeaderOffset) {\n      ze.setLocalHeaderOffset(z64.getRelativeHeaderOffset().getLongValue());\n    }\n    if (hasDiskStart) {\n      ze.setDiskNumberStart(z64.getDiskStartNumber().getValue());\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 167,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2509,
                        "startLineNumber": 826,
                        "startColumnNumber": 4,
                        "endLineNumber": 878,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * If the entry holds a Zip64 extended information extra field, read sizes from there if the entry's sizes are set to 0xFFFFFFFFF, do the same for the offset of the local file header. <p>Ensures the Zip64 extra either knows both compressed and uncompressed size or neither of both as the internal logic in ExtraFieldUtils forces the field to create local header data even if they are never used - and here a field with only one size would be invalid.</p>\n */\nprivate void setSizesAndOffsetFromZip64Extra(final ZipArchiveEntry ze) throws IOException {\n  final ZipExtraField extra=ze.getExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);\n  if (extra != null && !(extra instanceof Zip64ExtendedInformationExtraField)) {\n    throw new ZipException(\"archive contains unparseable zip64 extra field\");\n  }\n  final Zip64ExtendedInformationExtraField z64=(Zip64ExtendedInformationExtraField)extra;\n  if (z64 != null) {\n    final boolean hasUncompressedSize=ze.getSize() == ZIP64_MAGIC;\n    final boolean hasCompressedSize=ze.getCompressedSize() == ZIP64_MAGIC;\n    final boolean hasRelativeHeaderOffset=ze.getLocalHeaderOffset() == ZIP64_MAGIC;\n    final boolean hasDiskStart=ze.getDiskNumberStart() == ZIP64_MAGIC_SHORT;\n    z64.reparseCentralDirectoryData(hasUncompressedSize,hasCompressedSize,hasRelativeHeaderOffset,hasDiskStart);\n    if (hasUncompressedSize) {\n      ze.setSize(z64.getSize().getLongValue());\n    }\n else     if (hasCompressedSize) {\n      z64.setSize(new ZipEightByteInteger(ze.getSize()));\n    }\n    if (hasCompressedSize) {\n      ze.setCompressedSize(z64.getCompressedSize().getLongValue());\n    }\n else     if (hasUncompressedSize) {\n      z64.setCompressedSize(new ZipEightByteInteger(ze.getCompressedSize()));\n    }\n    if (hasRelativeHeaderOffset) {\n      ze.setLocalHeaderOffset(z64.getRelativeHeaderOffset().getLongValue());\n    }\n    if (hasDiskStart) {\n      ze.setDiskNumberStart(z64.getDiskStartNumber().getValue());\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 179,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 71,
                    "startLineNumber": 867,
                    "startColumnNumber": 16,
                    "endLineNumber": 867,
                    "endColumnNumber": 87
                },
                "nodeContext": "z64.setCompressedSize(new ZipEightByteInteger(ze.getCompressedSize()));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 10,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
        },
        {
            "nodeContext": "ze",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 871,
                "startColumnNumber": 16,
                "endLineNumber": 871,
                "endColumnNumber": 18
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 69,
                        "startLineNumber": 871,
                        "startColumnNumber": 16,
                        "endLineNumber": 871,
                        "endColumnNumber": 85
                    },
                    "nodeContext": "ze.setLocalHeaderOffset(z64.getRelativeHeaderOffset().getLongValue())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 70,
                        "startLineNumber": 871,
                        "startColumnNumber": 16,
                        "endLineNumber": 871,
                        "endColumnNumber": 86
                    },
                    "nodeContext": "ze.setLocalHeaderOffset(z64.getRelativeHeaderOffset().getLongValue());\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 9,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 104,
                        "startLineNumber": 870,
                        "startColumnNumber": 41,
                        "endLineNumber": 872,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  ze.setLocalHeaderOffset(z64.getRelativeHeaderOffset().getLongValue());\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 10,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 133,
                        "startLineNumber": 870,
                        "startColumnNumber": 12,
                        "endLineNumber": 872,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (hasRelativeHeaderOffset) {\n  ze.setLocalHeaderOffset(z64.getRelativeHeaderOffset().getLongValue());\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 12,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1412,
                        "startLineNumber": 847,
                        "startColumnNumber": 25,
                        "endLineNumber": 877,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final boolean hasUncompressedSize=ze.getSize() == ZIP64_MAGIC;\n  final boolean hasCompressedSize=ze.getCompressedSize() == ZIP64_MAGIC;\n  final boolean hasRelativeHeaderOffset=ze.getLocalHeaderOffset() == ZIP64_MAGIC;\n  final boolean hasDiskStart=ze.getDiskNumberStart() == ZIP64_MAGIC_SHORT;\n  z64.reparseCentralDirectoryData(hasUncompressedSize,hasCompressedSize,hasRelativeHeaderOffset,hasDiskStart);\n  if (hasUncompressedSize) {\n    ze.setSize(z64.getSize().getLongValue());\n  }\n else   if (hasCompressedSize) {\n    z64.setSize(new ZipEightByteInteger(ze.getSize()));\n  }\n  if (hasCompressedSize) {\n    ze.setCompressedSize(z64.getCompressedSize().getLongValue());\n  }\n else   if (hasUncompressedSize) {\n    z64.setCompressedSize(new ZipEightByteInteger(ze.getCompressedSize()));\n  }\n  if (hasRelativeHeaderOffset) {\n    ze.setLocalHeaderOffset(z64.getRelativeHeaderOffset().getLongValue());\n  }\n  if (hasDiskStart) {\n    ze.setDiskNumberStart(z64.getDiskStartNumber().getValue());\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 123,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1429,
                        "startLineNumber": 847,
                        "startColumnNumber": 8,
                        "endLineNumber": 877,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (z64 != null) {\n  final boolean hasUncompressedSize=ze.getSize() == ZIP64_MAGIC;\n  final boolean hasCompressedSize=ze.getCompressedSize() == ZIP64_MAGIC;\n  final boolean hasRelativeHeaderOffset=ze.getLocalHeaderOffset() == ZIP64_MAGIC;\n  final boolean hasDiskStart=ze.getDiskNumberStart() == ZIP64_MAGIC_SHORT;\n  z64.reparseCentralDirectoryData(hasUncompressedSize,hasCompressedSize,hasRelativeHeaderOffset,hasDiskStart);\n  if (hasUncompressedSize) {\n    ze.setSize(z64.getSize().getLongValue());\n  }\n else   if (hasCompressedSize) {\n    z64.setSize(new ZipEightByteInteger(ze.getSize()));\n  }\n  if (hasCompressedSize) {\n    ze.setCompressedSize(z64.getCompressedSize().getLongValue());\n  }\n else   if (hasUncompressedSize) {\n    z64.setCompressedSize(new ZipEightByteInteger(ze.getCompressedSize()));\n  }\n  if (hasRelativeHeaderOffset) {\n    ze.setLocalHeaderOffset(z64.getRelativeHeaderOffset().getLongValue());\n  }\n  if (hasDiskStart) {\n    ze.setDiskNumberStart(z64.getDiskStartNumber().getValue());\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 127,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1860,
                        "startLineNumber": 839,
                        "startColumnNumber": 27,
                        "endLineNumber": 878,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final ZipExtraField extra=ze.getExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);\n  if (extra != null && !(extra instanceof Zip64ExtendedInformationExtraField)) {\n    throw new ZipException(\"archive contains unparseable zip64 extra field\");\n  }\n  final Zip64ExtendedInformationExtraField z64=(Zip64ExtendedInformationExtraField)extra;\n  if (z64 != null) {\n    final boolean hasUncompressedSize=ze.getSize() == ZIP64_MAGIC;\n    final boolean hasCompressedSize=ze.getCompressedSize() == ZIP64_MAGIC;\n    final boolean hasRelativeHeaderOffset=ze.getLocalHeaderOffset() == ZIP64_MAGIC;\n    final boolean hasDiskStart=ze.getDiskNumberStart() == ZIP64_MAGIC_SHORT;\n    z64.reparseCentralDirectoryData(hasUncompressedSize,hasCompressedSize,hasRelativeHeaderOffset,hasDiskStart);\n    if (hasUncompressedSize) {\n      ze.setSize(z64.getSize().getLongValue());\n    }\n else     if (hasCompressedSize) {\n      z64.setSize(new ZipEightByteInteger(ze.getSize()));\n    }\n    if (hasCompressedSize) {\n      ze.setCompressedSize(z64.getCompressedSize().getLongValue());\n    }\n else     if (hasUncompressedSize) {\n      z64.setCompressedSize(new ZipEightByteInteger(ze.getCompressedSize()));\n    }\n    if (hasRelativeHeaderOffset) {\n      ze.setLocalHeaderOffset(z64.getRelativeHeaderOffset().getLongValue());\n    }\n    if (hasDiskStart) {\n      ze.setDiskNumberStart(z64.getDiskStartNumber().getValue());\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 167,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2509,
                        "startLineNumber": 826,
                        "startColumnNumber": 4,
                        "endLineNumber": 878,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * If the entry holds a Zip64 extended information extra field, read sizes from there if the entry's sizes are set to 0xFFFFFFFFF, do the same for the offset of the local file header. <p>Ensures the Zip64 extra either knows both compressed and uncompressed size or neither of both as the internal logic in ExtraFieldUtils forces the field to create local header data even if they are never used - and here a field with only one size would be invalid.</p>\n */\nprivate void setSizesAndOffsetFromZip64Extra(final ZipArchiveEntry ze) throws IOException {\n  final ZipExtraField extra=ze.getExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);\n  if (extra != null && !(extra instanceof Zip64ExtendedInformationExtraField)) {\n    throw new ZipException(\"archive contains unparseable zip64 extra field\");\n  }\n  final Zip64ExtendedInformationExtraField z64=(Zip64ExtendedInformationExtraField)extra;\n  if (z64 != null) {\n    final boolean hasUncompressedSize=ze.getSize() == ZIP64_MAGIC;\n    final boolean hasCompressedSize=ze.getCompressedSize() == ZIP64_MAGIC;\n    final boolean hasRelativeHeaderOffset=ze.getLocalHeaderOffset() == ZIP64_MAGIC;\n    final boolean hasDiskStart=ze.getDiskNumberStart() == ZIP64_MAGIC_SHORT;\n    z64.reparseCentralDirectoryData(hasUncompressedSize,hasCompressedSize,hasRelativeHeaderOffset,hasDiskStart);\n    if (hasUncompressedSize) {\n      ze.setSize(z64.getSize().getLongValue());\n    }\n else     if (hasCompressedSize) {\n      z64.setSize(new ZipEightByteInteger(ze.getSize()));\n    }\n    if (hasCompressedSize) {\n      ze.setCompressedSize(z64.getCompressedSize().getLongValue());\n    }\n else     if (hasUncompressedSize) {\n      z64.setCompressedSize(new ZipEightByteInteger(ze.getCompressedSize()));\n    }\n    if (hasRelativeHeaderOffset) {\n      ze.setLocalHeaderOffset(z64.getRelativeHeaderOffset().getLongValue());\n    }\n    if (hasDiskStart) {\n      ze.setDiskNumberStart(z64.getDiskStartNumber().getValue());\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 179,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 70,
                    "startLineNumber": 871,
                    "startColumnNumber": 16,
                    "endLineNumber": 871,
                    "endColumnNumber": 86
                },
                "nodeContext": "ze.setLocalHeaderOffset(z64.getRelativeHeaderOffset().getLongValue());\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 9,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
        },
        {
            "nodeContext": "ze",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 875,
                "startColumnNumber": 16,
                "endLineNumber": 875,
                "endColumnNumber": 18
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 58,
                        "startLineNumber": 875,
                        "startColumnNumber": 16,
                        "endLineNumber": 875,
                        "endColumnNumber": 74
                    },
                    "nodeContext": "ze.setDiskNumberStart(z64.getDiskStartNumber().getValue())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 59,
                        "startLineNumber": 875,
                        "startColumnNumber": 16,
                        "endLineNumber": 875,
                        "endColumnNumber": 75
                    },
                    "nodeContext": "ze.setDiskNumberStart(z64.getDiskStartNumber().getValue());\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 9,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 93,
                        "startLineNumber": 874,
                        "startColumnNumber": 30,
                        "endLineNumber": 876,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  ze.setDiskNumberStart(z64.getDiskStartNumber().getValue());\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 10,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 111,
                        "startLineNumber": 874,
                        "startColumnNumber": 12,
                        "endLineNumber": 876,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (hasDiskStart) {\n  ze.setDiskNumberStart(z64.getDiskStartNumber().getValue());\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 12,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1412,
                        "startLineNumber": 847,
                        "startColumnNumber": 25,
                        "endLineNumber": 877,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final boolean hasUncompressedSize=ze.getSize() == ZIP64_MAGIC;\n  final boolean hasCompressedSize=ze.getCompressedSize() == ZIP64_MAGIC;\n  final boolean hasRelativeHeaderOffset=ze.getLocalHeaderOffset() == ZIP64_MAGIC;\n  final boolean hasDiskStart=ze.getDiskNumberStart() == ZIP64_MAGIC_SHORT;\n  z64.reparseCentralDirectoryData(hasUncompressedSize,hasCompressedSize,hasRelativeHeaderOffset,hasDiskStart);\n  if (hasUncompressedSize) {\n    ze.setSize(z64.getSize().getLongValue());\n  }\n else   if (hasCompressedSize) {\n    z64.setSize(new ZipEightByteInteger(ze.getSize()));\n  }\n  if (hasCompressedSize) {\n    ze.setCompressedSize(z64.getCompressedSize().getLongValue());\n  }\n else   if (hasUncompressedSize) {\n    z64.setCompressedSize(new ZipEightByteInteger(ze.getCompressedSize()));\n  }\n  if (hasRelativeHeaderOffset) {\n    ze.setLocalHeaderOffset(z64.getRelativeHeaderOffset().getLongValue());\n  }\n  if (hasDiskStart) {\n    ze.setDiskNumberStart(z64.getDiskStartNumber().getValue());\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 123,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1429,
                        "startLineNumber": 847,
                        "startColumnNumber": 8,
                        "endLineNumber": 877,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (z64 != null) {\n  final boolean hasUncompressedSize=ze.getSize() == ZIP64_MAGIC;\n  final boolean hasCompressedSize=ze.getCompressedSize() == ZIP64_MAGIC;\n  final boolean hasRelativeHeaderOffset=ze.getLocalHeaderOffset() == ZIP64_MAGIC;\n  final boolean hasDiskStart=ze.getDiskNumberStart() == ZIP64_MAGIC_SHORT;\n  z64.reparseCentralDirectoryData(hasUncompressedSize,hasCompressedSize,hasRelativeHeaderOffset,hasDiskStart);\n  if (hasUncompressedSize) {\n    ze.setSize(z64.getSize().getLongValue());\n  }\n else   if (hasCompressedSize) {\n    z64.setSize(new ZipEightByteInteger(ze.getSize()));\n  }\n  if (hasCompressedSize) {\n    ze.setCompressedSize(z64.getCompressedSize().getLongValue());\n  }\n else   if (hasUncompressedSize) {\n    z64.setCompressedSize(new ZipEightByteInteger(ze.getCompressedSize()));\n  }\n  if (hasRelativeHeaderOffset) {\n    ze.setLocalHeaderOffset(z64.getRelativeHeaderOffset().getLongValue());\n  }\n  if (hasDiskStart) {\n    ze.setDiskNumberStart(z64.getDiskStartNumber().getValue());\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 127,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1860,
                        "startLineNumber": 839,
                        "startColumnNumber": 27,
                        "endLineNumber": 878,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final ZipExtraField extra=ze.getExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);\n  if (extra != null && !(extra instanceof Zip64ExtendedInformationExtraField)) {\n    throw new ZipException(\"archive contains unparseable zip64 extra field\");\n  }\n  final Zip64ExtendedInformationExtraField z64=(Zip64ExtendedInformationExtraField)extra;\n  if (z64 != null) {\n    final boolean hasUncompressedSize=ze.getSize() == ZIP64_MAGIC;\n    final boolean hasCompressedSize=ze.getCompressedSize() == ZIP64_MAGIC;\n    final boolean hasRelativeHeaderOffset=ze.getLocalHeaderOffset() == ZIP64_MAGIC;\n    final boolean hasDiskStart=ze.getDiskNumberStart() == ZIP64_MAGIC_SHORT;\n    z64.reparseCentralDirectoryData(hasUncompressedSize,hasCompressedSize,hasRelativeHeaderOffset,hasDiskStart);\n    if (hasUncompressedSize) {\n      ze.setSize(z64.getSize().getLongValue());\n    }\n else     if (hasCompressedSize) {\n      z64.setSize(new ZipEightByteInteger(ze.getSize()));\n    }\n    if (hasCompressedSize) {\n      ze.setCompressedSize(z64.getCompressedSize().getLongValue());\n    }\n else     if (hasUncompressedSize) {\n      z64.setCompressedSize(new ZipEightByteInteger(ze.getCompressedSize()));\n    }\n    if (hasRelativeHeaderOffset) {\n      ze.setLocalHeaderOffset(z64.getRelativeHeaderOffset().getLongValue());\n    }\n    if (hasDiskStart) {\n      ze.setDiskNumberStart(z64.getDiskStartNumber().getValue());\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 167,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2509,
                        "startLineNumber": 826,
                        "startColumnNumber": 4,
                        "endLineNumber": 878,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * If the entry holds a Zip64 extended information extra field, read sizes from there if the entry's sizes are set to 0xFFFFFFFFF, do the same for the offset of the local file header. <p>Ensures the Zip64 extra either knows both compressed and uncompressed size or neither of both as the internal logic in ExtraFieldUtils forces the field to create local header data even if they are never used - and here a field with only one size would be invalid.</p>\n */\nprivate void setSizesAndOffsetFromZip64Extra(final ZipArchiveEntry ze) throws IOException {\n  final ZipExtraField extra=ze.getExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);\n  if (extra != null && !(extra instanceof Zip64ExtendedInformationExtraField)) {\n    throw new ZipException(\"archive contains unparseable zip64 extra field\");\n  }\n  final Zip64ExtendedInformationExtraField z64=(Zip64ExtendedInformationExtraField)extra;\n  if (z64 != null) {\n    final boolean hasUncompressedSize=ze.getSize() == ZIP64_MAGIC;\n    final boolean hasCompressedSize=ze.getCompressedSize() == ZIP64_MAGIC;\n    final boolean hasRelativeHeaderOffset=ze.getLocalHeaderOffset() == ZIP64_MAGIC;\n    final boolean hasDiskStart=ze.getDiskNumberStart() == ZIP64_MAGIC_SHORT;\n    z64.reparseCentralDirectoryData(hasUncompressedSize,hasCompressedSize,hasRelativeHeaderOffset,hasDiskStart);\n    if (hasUncompressedSize) {\n      ze.setSize(z64.getSize().getLongValue());\n    }\n else     if (hasCompressedSize) {\n      z64.setSize(new ZipEightByteInteger(ze.getSize()));\n    }\n    if (hasCompressedSize) {\n      ze.setCompressedSize(z64.getCompressedSize().getLongValue());\n    }\n else     if (hasUncompressedSize) {\n      z64.setCompressedSize(new ZipEightByteInteger(ze.getCompressedSize()));\n    }\n    if (hasRelativeHeaderOffset) {\n      ze.setLocalHeaderOffset(z64.getRelativeHeaderOffset().getLongValue());\n    }\n    if (hasDiskStart) {\n      ze.setDiskNumberStart(z64.getDiskStartNumber().getValue());\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 179,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 59,
                    "startLineNumber": 875,
                    "startColumnNumber": 16,
                    "endLineNumber": 875,
                    "endColumnNumber": 75
                },
                "nodeContext": "ze.setDiskNumberStart(z64.getDiskStartNumber().getValue());\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 9,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "org.apache.commons.compress.archivers.zip.ZipArchiveEntry"
        }
    ],
    "positionList": [
        {
            "charLength": 2,
            "startLineNumber": 841,
            "startColumnNumber": 12,
            "endLineNumber": 841,
            "endColumnNumber": 14
        },
        {
            "charLength": 2,
            "startLineNumber": 848,
            "startColumnNumber": 48,
            "endLineNumber": 848,
            "endColumnNumber": 50
        },
        {
            "charLength": 2,
            "startLineNumber": 849,
            "startColumnNumber": 46,
            "endLineNumber": 849,
            "endColumnNumber": 48
        },
        {
            "charLength": 2,
            "startLineNumber": 851,
            "startColumnNumber": 16,
            "endLineNumber": 851,
            "endColumnNumber": 18
        },
        {
            "charLength": 2,
            "startLineNumber": 852,
            "startColumnNumber": 41,
            "endLineNumber": 852,
            "endColumnNumber": 43
        },
        {
            "charLength": 2,
            "startLineNumber": 859,
            "startColumnNumber": 16,
            "endLineNumber": 859,
            "endColumnNumber": 18
        },
        {
            "charLength": 2,
            "startLineNumber": 861,
            "startColumnNumber": 52,
            "endLineNumber": 861,
            "endColumnNumber": 54
        },
        {
            "charLength": 2,
            "startLineNumber": 865,
            "startColumnNumber": 16,
            "endLineNumber": 865,
            "endColumnNumber": 18
        },
        {
            "charLength": 2,
            "startLineNumber": 867,
            "startColumnNumber": 62,
            "endLineNumber": 867,
            "endColumnNumber": 64
        },
        {
            "charLength": 2,
            "startLineNumber": 871,
            "startColumnNumber": 16,
            "endLineNumber": 871,
            "endColumnNumber": 18
        },
        {
            "charLength": 2,
            "startLineNumber": 875,
            "startColumnNumber": 16,
            "endLineNumber": 875,
            "endColumnNumber": 18
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 4,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 5,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 0,
            "layout": 9
        },
        {
            "firstKey": 6,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 6,
            "secondKey": 2,
            "layout": 7
        },
        {
            "firstKey": 6,
            "secondKey": 3,
            "layout": 7
        },
        {
            "firstKey": 6,
            "secondKey": 4,
            "layout": 7
        },
        {
            "firstKey": 6,
            "secondKey": 5,
            "layout": 6
        },
        {
            "firstKey": 6,
            "secondKey": 7,
            "layout": 7
        },
        {
            "firstKey": 6,
            "secondKey": 8,
            "layout": 7
        },
        {
            "firstKey": 6,
            "secondKey": 9,
            "layout": 7
        },
        {
            "firstKey": 6,
            "secondKey": 10,
            "layout": 7
        },
        {
            "firstKey": 7,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 7,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 0,
            "layout": 9
        },
        {
            "firstKey": 8,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 8,
            "secondKey": 2,
            "layout": 7
        },
        {
            "firstKey": 8,
            "secondKey": 3,
            "layout": 7
        },
        {
            "firstKey": 8,
            "secondKey": 4,
            "layout": 7
        },
        {
            "firstKey": 8,
            "secondKey": 5,
            "layout": 7
        },
        {
            "firstKey": 8,
            "secondKey": 6,
            "layout": 7
        },
        {
            "firstKey": 8,
            "secondKey": 7,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 9,
            "layout": 7
        },
        {
            "firstKey": 8,
            "secondKey": 10,
            "layout": 7
        },
        {
            "firstKey": 9,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 9,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 9,
            "layout": 4
        }
    ]
}