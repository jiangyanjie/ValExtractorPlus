{
    "id": 1107,
    "expression": "request",
    "projectName": "nifi",
    "commitID": "4d533a99b3790ec842a7230fd6cae0d59158c2b5",
    "filePath": "nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/HandleHttpRequest.java",
    "occurrences": 38,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "request",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 495,
                "startColumnNumber": 42,
                "endLineNumber": 495,
                "endColumnNumber": 49
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 24,
                        "startLineNumber": 495,
                        "startColumnNumber": 42,
                        "endLineNumber": 495,
                        "endColumnNumber": 66
                    },
                    "nodeContext": "request.getInputStream()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 54,
                        "startLineNumber": 495,
                        "startColumnNumber": 23,
                        "endLineNumber": 495,
                        "endColumnNumber": 77
                    },
                    "nodeContext": "session.importFrom(request.getInputStream(),flowFile)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 65,
                        "startLineNumber": 495,
                        "startColumnNumber": 12,
                        "endLineNumber": 495,
                        "endColumnNumber": 77
                    },
                    "nodeContext": "flowFile=session.importFrom(request.getInputStream(),flowFile)",
                    "nodeType": "Assignment",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 66,
                        "startLineNumber": 495,
                        "startColumnNumber": 12,
                        "endLineNumber": 495,
                        "endColumnNumber": 78
                    },
                    "nodeContext": "flowFile=session.importFrom(request.getInputStream(),flowFile);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 10,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 90,
                        "startLineNumber": 494,
                        "startColumnNumber": 12,
                        "endLineNumber": 496,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  flowFile=session.importFrom(request.getInputStream(),flowFile);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 11,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 350,
                        "startLineNumber": 494,
                        "startColumnNumber": 8,
                        "endLineNumber": 501,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  flowFile=session.importFrom(request.getInputStream(),flowFile);\n}\n catch (final IOException e) {\n  getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n  session.remove(flowFile);\n  return;\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 41,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8324,
                        "startLineNumber": 476,
                        "startColumnNumber": 110,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 956,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8444,
                        "startLineNumber": 475,
                        "startColumnNumber": 4,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void onTrigger(final ProcessContext context,final ProcessSession session) throws ProcessException {\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 974,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 66,
                    "startLineNumber": 495,
                    "startColumnNumber": 12,
                    "endLineNumber": 495,
                    "endColumnNumber": 78
                },
                "nodeContext": "flowFile=session.importFrom(request.getInputStream(),flowFile);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 10,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.processors.standard.HttpServletRequest"
        },
        {
            "nodeContext": "request",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 498,
                "startColumnNumber": 33,
                "endLineNumber": 498,
                "endColumnNumber": 40
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ArrayInitializer,expressions]",
                    "nodePosition": {
                        "charLength": 23,
                        "startLineNumber": 498,
                        "startColumnNumber": 33,
                        "endLineNumber": 498,
                        "endColumnNumber": 56
                    },
                    "nodeContext": "request.getRemoteAddr()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ArrayCreation,initializer]",
                    "nodePosition": {
                        "charLength": 28,
                        "startLineNumber": 498,
                        "startColumnNumber": 32,
                        "endLineNumber": 498,
                        "endColumnNumber": 60
                    },
                    "nodeContext": "{request.getRemoteAddr(),e}",
                    "nodeType": "ArrayInitializer",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 40,
                        "startLineNumber": 498,
                        "startColumnNumber": 20,
                        "endLineNumber": 498,
                        "endColumnNumber": 60
                    },
                    "nodeContext": "new Object[]{request.getRemoteAddr(),e}",
                    "nodeType": "ArrayCreation",
                    "astNodeNumber": 10,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 144,
                        "startLineNumber": 497,
                        "startColumnNumber": 12,
                        "endLineNumber": 498,
                        "endColumnNumber": 61
                    },
                    "nodeContext": "getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e})",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 15,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 145,
                        "startLineNumber": 497,
                        "startColumnNumber": 12,
                        "endLineNumber": 498,
                        "endColumnNumber": 62
                    },
                    "nodeContext": "getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 16,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
                    "nodePosition": {
                        "charLength": 227,
                        "startLineNumber": 496,
                        "startColumnNumber": 38,
                        "endLineNumber": 501,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n  session.remove(flowFile);\n  return;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 23,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
                    "nodePosition": {
                        "charLength": 255,
                        "startLineNumber": 496,
                        "startColumnNumber": 10,
                        "endLineNumber": 501,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "catch (final IOException e) {\n  getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n  session.remove(flowFile);\n  return;\n}\n",
                    "nodeType": "CatchClause",
                    "astNodeNumber": 29,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 350,
                        "startLineNumber": 494,
                        "startColumnNumber": 8,
                        "endLineNumber": 501,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  flowFile=session.importFrom(request.getInputStream(),flowFile);\n}\n catch (final IOException e) {\n  getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n  session.remove(flowFile);\n  return;\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 41,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8324,
                        "startLineNumber": 476,
                        "startColumnNumber": 110,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 956,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8444,
                        "startLineNumber": 475,
                        "startColumnNumber": 4,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void onTrigger(final ProcessContext context,final ProcessSession session) throws ProcessException {\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 974,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                "nodePosition": {
                    "charLength": 40,
                    "startLineNumber": 498,
                    "startColumnNumber": 20,
                    "endLineNumber": 498,
                    "endColumnNumber": 60
                },
                "nodeContext": "new Object[]{request.getRemoteAddr(),e}",
                "nodeType": "ArrayCreation",
                "astNodeNumber": 10,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.processors.standard.HttpServletRequest"
        },
        {
            "nodeContext": "request",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 503,
                "startColumnNumber": 31,
                "endLineNumber": 503,
                "endColumnNumber": 38
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 30,
                        "startLineNumber": 503,
                        "startColumnNumber": 31,
                        "endLineNumber": 503,
                        "endColumnNumber": 61
                    },
                    "nodeContext": "request.getCharacterEncoding()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,expression]",
                    "nodePosition": {
                        "charLength": 38,
                        "startLineNumber": 503,
                        "startColumnNumber": 31,
                        "endLineNumber": 503,
                        "endColumnNumber": 69
                    },
                    "nodeContext": "request.getCharacterEncoding() == null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 123,
                        "startLineNumber": 503,
                        "startColumnNumber": 31,
                        "endLineNumber": 503,
                        "endColumnNumber": 154
                    },
                    "nodeContext": "request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding()",
                    "nodeType": "ConditionalExpression",
                    "astNodeNumber": 15,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 133,
                        "startLineNumber": 503,
                        "startColumnNumber": 21,
                        "endLineNumber": 503,
                        "endColumnNumber": 154
                    },
                    "nodeContext": "charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding()",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 17,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 147,
                        "startLineNumber": 503,
                        "startColumnNumber": 8,
                        "endLineNumber": 503,
                        "endColumnNumber": 155
                    },
                    "nodeContext": "final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 21,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8324,
                        "startLineNumber": 476,
                        "startColumnNumber": 110,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 956,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8444,
                        "startLineNumber": 475,
                        "startColumnNumber": 4,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void onTrigger(final ProcessContext context,final ProcessSession session) throws ProcessException {\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 974,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 147,
                    "startLineNumber": 503,
                    "startColumnNumber": 8,
                    "endLineNumber": 503,
                    "endColumnNumber": 155
                },
                "nodeContext": "final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 21,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.processors.standard.HttpServletRequest"
        },
        {
            "nodeContext": "request",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 503,
                "startColumnNumber": 124,
                "endLineNumber": 503,
                "endColumnNumber": 131
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,elseExpression]",
                    "nodePosition": {
                        "charLength": 30,
                        "startLineNumber": 503,
                        "startColumnNumber": 124,
                        "endLineNumber": 503,
                        "endColumnNumber": 154
                    },
                    "nodeContext": "request.getCharacterEncoding()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 123,
                        "startLineNumber": 503,
                        "startColumnNumber": 31,
                        "endLineNumber": 503,
                        "endColumnNumber": 154
                    },
                    "nodeContext": "request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding()",
                    "nodeType": "ConditionalExpression",
                    "astNodeNumber": 15,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 133,
                        "startLineNumber": 503,
                        "startColumnNumber": 21,
                        "endLineNumber": 503,
                        "endColumnNumber": 154
                    },
                    "nodeContext": "charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding()",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 17,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 147,
                        "startLineNumber": 503,
                        "startColumnNumber": 8,
                        "endLineNumber": 503,
                        "endColumnNumber": 155
                    },
                    "nodeContext": "final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 21,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8324,
                        "startLineNumber": 476,
                        "startColumnNumber": 110,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 956,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8444,
                        "startLineNumber": 475,
                        "startColumnNumber": 4,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void onTrigger(final ProcessContext context,final ProcessSession session) throws ProcessException {\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 974,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 147,
                    "startLineNumber": 503,
                    "startColumnNumber": 8,
                    "endLineNumber": 503,
                    "endColumnNumber": 155
                },
                "nodeContext": "final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 21,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.processors.standard.HttpServletRequest"
        },
        {
            "nodeContext": "request",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 509,
                "startColumnNumber": 50,
                "endLineNumber": 509,
                "endColumnNumber": 57
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 24,
                        "startLineNumber": 509,
                        "startColumnNumber": 50,
                        "endLineNumber": 509,
                        "endColumnNumber": 74
                    },
                    "nodeContext": "request.getContentType()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 63,
                        "startLineNumber": 509,
                        "startColumnNumber": 12,
                        "endLineNumber": 509,
                        "endColumnNumber": 75
                    },
                    "nodeContext": "putAttribute(attributes,\"mime.type\",request.getContentType())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 64,
                        "startLineNumber": 509,
                        "startColumnNumber": 12,
                        "endLineNumber": 509,
                        "endColumnNumber": 76
                    },
                    "nodeContext": "putAttribute(attributes,\"mime.type\",request.getContentType());\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 4236,
                        "startLineNumber": 507,
                        "startColumnNumber": 12,
                        "endLineNumber": 577,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n  putAttribute(attributes,\"mime.type\",request.getContentType());\n  putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n  putAttribute(attributes,\"http.context.path\",request.getContextPath());\n  putAttribute(attributes,\"http.method\",request.getMethod());\n  putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n  putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n  if (request.getQueryString() != null) {\n    putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n  }\n  putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n  putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n  putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n  putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n  putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n  putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n  putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n  if (request.getDispatcherType() != null) {\n    putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n  }\n  putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n  putAttribute(attributes,\"http.locale\",request.getLocale());\n  putAttribute(attributes,\"http.server.name\",request.getServerName());\n  putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n  final Enumeration<String> paramEnumeration=request.getParameterNames();\n  while (paramEnumeration.hasMoreElements()) {\n    final String paramName=paramEnumeration.nextElement();\n    final String value=request.getParameter(paramName);\n    attributes.put(\"http.param.\" + paramName,value);\n  }\n  final Cookie[] cookies=request.getCookies();\n  if (cookies != null) {\n    for (    final Cookie cookie : cookies) {\n      final String name=cookie.getName();\n      final String cookiePrefix=\"http.cookie.\" + name + \".\";\n      attributes.put(cookiePrefix + \"value\",cookie.getValue());\n      attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n      attributes.put(cookiePrefix + \"path\",cookie.getPath());\n      attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n      attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n      attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n    }\n  }\n  final String queryString=request.getQueryString();\n  if (queryString != null) {\n    final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n    for (    final String keyValueString : params) {\n      final int indexOf=keyValueString.indexOf(\"=\");\n      if (indexOf < 0) {\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n      }\n else {\n        final String key=keyValueString.substring(0,indexOf);\n        final String value;\n        if (indexOf == keyValueString.length() - 1) {\n          value=\"\";\n        }\n else {\n          value=keyValueString.substring(indexOf + 1);\n        }\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 464,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4426,
                        "startLineNumber": 507,
                        "startColumnNumber": 8,
                        "endLineNumber": 579,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n  putAttribute(attributes,\"mime.type\",request.getContentType());\n  putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n  putAttribute(attributes,\"http.context.path\",request.getContextPath());\n  putAttribute(attributes,\"http.method\",request.getMethod());\n  putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n  putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n  if (request.getQueryString() != null) {\n    putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n  }\n  putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n  putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n  putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n  putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n  putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n  putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n  putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n  if (request.getDispatcherType() != null) {\n    putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n  }\n  putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n  putAttribute(attributes,\"http.locale\",request.getLocale());\n  putAttribute(attributes,\"http.server.name\",request.getServerName());\n  putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n  final Enumeration<String> paramEnumeration=request.getParameterNames();\n  while (paramEnumeration.hasMoreElements()) {\n    final String paramName=paramEnumeration.nextElement();\n    final String value=request.getParameter(paramName);\n    attributes.put(\"http.param.\" + paramName,value);\n  }\n  final Cookie[] cookies=request.getCookies();\n  if (cookies != null) {\n    for (    final Cookie cookie : cookies) {\n      final String name=cookie.getName();\n      final String cookiePrefix=\"http.cookie.\" + name + \".\";\n      attributes.put(cookiePrefix + \"value\",cookie.getValue());\n      attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n      attributes.put(cookiePrefix + \"path\",cookie.getPath());\n      attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n      attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n      attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n    }\n  }\n  final String queryString=request.getQueryString();\n  if (queryString != null) {\n    final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n    for (    final String keyValueString : params) {\n      final int indexOf=keyValueString.indexOf(\"=\");\n      if (indexOf < 0) {\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n      }\n else {\n        final String key=keyValueString.substring(0,indexOf);\n        final String value;\n        if (indexOf == keyValueString.length() - 1) {\n          value=\"\";\n        }\n else {\n          value=keyValueString.substring(indexOf + 1);\n        }\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n      }\n    }\n  }\n}\n catch (final UnsupportedEncodingException uee) {\n  throw new ProcessException(\"Invalid character encoding\",uee);\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 478,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8324,
                        "startLineNumber": 476,
                        "startColumnNumber": 110,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 956,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8444,
                        "startLineNumber": 475,
                        "startColumnNumber": 4,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void onTrigger(final ProcessContext context,final ProcessSession session) throws ProcessException {\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 974,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 64,
                    "startLineNumber": 509,
                    "startColumnNumber": 12,
                    "endLineNumber": 509,
                    "endColumnNumber": 76
                },
                "nodeContext": "putAttribute(attributes,\"mime.type\",request.getContentType());\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.processors.standard.HttpServletRequest"
        },
        {
            "nodeContext": "request",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 510,
                "startColumnNumber": 58,
                "endLineNumber": 510,
                "endColumnNumber": 65
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 24,
                        "startLineNumber": 510,
                        "startColumnNumber": 58,
                        "endLineNumber": 510,
                        "endColumnNumber": 82
                    },
                    "nodeContext": "request.getServletPath()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 71,
                        "startLineNumber": 510,
                        "startColumnNumber": 12,
                        "endLineNumber": 510,
                        "endColumnNumber": 83
                    },
                    "nodeContext": "putAttribute(attributes,\"http.servlet.path\",request.getServletPath())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 72,
                        "startLineNumber": 510,
                        "startColumnNumber": 12,
                        "endLineNumber": 510,
                        "endColumnNumber": 84
                    },
                    "nodeContext": "putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 4236,
                        "startLineNumber": 507,
                        "startColumnNumber": 12,
                        "endLineNumber": 577,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n  putAttribute(attributes,\"mime.type\",request.getContentType());\n  putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n  putAttribute(attributes,\"http.context.path\",request.getContextPath());\n  putAttribute(attributes,\"http.method\",request.getMethod());\n  putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n  putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n  if (request.getQueryString() != null) {\n    putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n  }\n  putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n  putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n  putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n  putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n  putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n  putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n  putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n  if (request.getDispatcherType() != null) {\n    putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n  }\n  putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n  putAttribute(attributes,\"http.locale\",request.getLocale());\n  putAttribute(attributes,\"http.server.name\",request.getServerName());\n  putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n  final Enumeration<String> paramEnumeration=request.getParameterNames();\n  while (paramEnumeration.hasMoreElements()) {\n    final String paramName=paramEnumeration.nextElement();\n    final String value=request.getParameter(paramName);\n    attributes.put(\"http.param.\" + paramName,value);\n  }\n  final Cookie[] cookies=request.getCookies();\n  if (cookies != null) {\n    for (    final Cookie cookie : cookies) {\n      final String name=cookie.getName();\n      final String cookiePrefix=\"http.cookie.\" + name + \".\";\n      attributes.put(cookiePrefix + \"value\",cookie.getValue());\n      attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n      attributes.put(cookiePrefix + \"path\",cookie.getPath());\n      attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n      attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n      attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n    }\n  }\n  final String queryString=request.getQueryString();\n  if (queryString != null) {\n    final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n    for (    final String keyValueString : params) {\n      final int indexOf=keyValueString.indexOf(\"=\");\n      if (indexOf < 0) {\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n      }\n else {\n        final String key=keyValueString.substring(0,indexOf);\n        final String value;\n        if (indexOf == keyValueString.length() - 1) {\n          value=\"\";\n        }\n else {\n          value=keyValueString.substring(indexOf + 1);\n        }\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 464,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4426,
                        "startLineNumber": 507,
                        "startColumnNumber": 8,
                        "endLineNumber": 579,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n  putAttribute(attributes,\"mime.type\",request.getContentType());\n  putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n  putAttribute(attributes,\"http.context.path\",request.getContextPath());\n  putAttribute(attributes,\"http.method\",request.getMethod());\n  putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n  putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n  if (request.getQueryString() != null) {\n    putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n  }\n  putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n  putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n  putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n  putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n  putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n  putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n  putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n  if (request.getDispatcherType() != null) {\n    putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n  }\n  putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n  putAttribute(attributes,\"http.locale\",request.getLocale());\n  putAttribute(attributes,\"http.server.name\",request.getServerName());\n  putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n  final Enumeration<String> paramEnumeration=request.getParameterNames();\n  while (paramEnumeration.hasMoreElements()) {\n    final String paramName=paramEnumeration.nextElement();\n    final String value=request.getParameter(paramName);\n    attributes.put(\"http.param.\" + paramName,value);\n  }\n  final Cookie[] cookies=request.getCookies();\n  if (cookies != null) {\n    for (    final Cookie cookie : cookies) {\n      final String name=cookie.getName();\n      final String cookiePrefix=\"http.cookie.\" + name + \".\";\n      attributes.put(cookiePrefix + \"value\",cookie.getValue());\n      attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n      attributes.put(cookiePrefix + \"path\",cookie.getPath());\n      attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n      attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n      attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n    }\n  }\n  final String queryString=request.getQueryString();\n  if (queryString != null) {\n    final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n    for (    final String keyValueString : params) {\n      final int indexOf=keyValueString.indexOf(\"=\");\n      if (indexOf < 0) {\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n      }\n else {\n        final String key=keyValueString.substring(0,indexOf);\n        final String value;\n        if (indexOf == keyValueString.length() - 1) {\n          value=\"\";\n        }\n else {\n          value=keyValueString.substring(indexOf + 1);\n        }\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n      }\n    }\n  }\n}\n catch (final UnsupportedEncodingException uee) {\n  throw new ProcessException(\"Invalid character encoding\",uee);\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 478,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8324,
                        "startLineNumber": 476,
                        "startColumnNumber": 110,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 956,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8444,
                        "startLineNumber": 475,
                        "startColumnNumber": 4,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void onTrigger(final ProcessContext context,final ProcessSession session) throws ProcessException {\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 974,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 72,
                    "startLineNumber": 510,
                    "startColumnNumber": 12,
                    "endLineNumber": 510,
                    "endColumnNumber": 84
                },
                "nodeContext": "putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.processors.standard.HttpServletRequest"
        },
        {
            "nodeContext": "request",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 511,
                "startColumnNumber": 58,
                "endLineNumber": 511,
                "endColumnNumber": 65
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 24,
                        "startLineNumber": 511,
                        "startColumnNumber": 58,
                        "endLineNumber": 511,
                        "endColumnNumber": 82
                    },
                    "nodeContext": "request.getContextPath()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 71,
                        "startLineNumber": 511,
                        "startColumnNumber": 12,
                        "endLineNumber": 511,
                        "endColumnNumber": 83
                    },
                    "nodeContext": "putAttribute(attributes,\"http.context.path\",request.getContextPath())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 72,
                        "startLineNumber": 511,
                        "startColumnNumber": 12,
                        "endLineNumber": 511,
                        "endColumnNumber": 84
                    },
                    "nodeContext": "putAttribute(attributes,\"http.context.path\",request.getContextPath());\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 4236,
                        "startLineNumber": 507,
                        "startColumnNumber": 12,
                        "endLineNumber": 577,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n  putAttribute(attributes,\"mime.type\",request.getContentType());\n  putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n  putAttribute(attributes,\"http.context.path\",request.getContextPath());\n  putAttribute(attributes,\"http.method\",request.getMethod());\n  putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n  putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n  if (request.getQueryString() != null) {\n    putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n  }\n  putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n  putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n  putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n  putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n  putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n  putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n  putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n  if (request.getDispatcherType() != null) {\n    putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n  }\n  putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n  putAttribute(attributes,\"http.locale\",request.getLocale());\n  putAttribute(attributes,\"http.server.name\",request.getServerName());\n  putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n  final Enumeration<String> paramEnumeration=request.getParameterNames();\n  while (paramEnumeration.hasMoreElements()) {\n    final String paramName=paramEnumeration.nextElement();\n    final String value=request.getParameter(paramName);\n    attributes.put(\"http.param.\" + paramName,value);\n  }\n  final Cookie[] cookies=request.getCookies();\n  if (cookies != null) {\n    for (    final Cookie cookie : cookies) {\n      final String name=cookie.getName();\n      final String cookiePrefix=\"http.cookie.\" + name + \".\";\n      attributes.put(cookiePrefix + \"value\",cookie.getValue());\n      attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n      attributes.put(cookiePrefix + \"path\",cookie.getPath());\n      attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n      attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n      attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n    }\n  }\n  final String queryString=request.getQueryString();\n  if (queryString != null) {\n    final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n    for (    final String keyValueString : params) {\n      final int indexOf=keyValueString.indexOf(\"=\");\n      if (indexOf < 0) {\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n      }\n else {\n        final String key=keyValueString.substring(0,indexOf);\n        final String value;\n        if (indexOf == keyValueString.length() - 1) {\n          value=\"\";\n        }\n else {\n          value=keyValueString.substring(indexOf + 1);\n        }\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 464,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4426,
                        "startLineNumber": 507,
                        "startColumnNumber": 8,
                        "endLineNumber": 579,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n  putAttribute(attributes,\"mime.type\",request.getContentType());\n  putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n  putAttribute(attributes,\"http.context.path\",request.getContextPath());\n  putAttribute(attributes,\"http.method\",request.getMethod());\n  putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n  putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n  if (request.getQueryString() != null) {\n    putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n  }\n  putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n  putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n  putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n  putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n  putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n  putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n  putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n  if (request.getDispatcherType() != null) {\n    putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n  }\n  putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n  putAttribute(attributes,\"http.locale\",request.getLocale());\n  putAttribute(attributes,\"http.server.name\",request.getServerName());\n  putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n  final Enumeration<String> paramEnumeration=request.getParameterNames();\n  while (paramEnumeration.hasMoreElements()) {\n    final String paramName=paramEnumeration.nextElement();\n    final String value=request.getParameter(paramName);\n    attributes.put(\"http.param.\" + paramName,value);\n  }\n  final Cookie[] cookies=request.getCookies();\n  if (cookies != null) {\n    for (    final Cookie cookie : cookies) {\n      final String name=cookie.getName();\n      final String cookiePrefix=\"http.cookie.\" + name + \".\";\n      attributes.put(cookiePrefix + \"value\",cookie.getValue());\n      attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n      attributes.put(cookiePrefix + \"path\",cookie.getPath());\n      attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n      attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n      attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n    }\n  }\n  final String queryString=request.getQueryString();\n  if (queryString != null) {\n    final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n    for (    final String keyValueString : params) {\n      final int indexOf=keyValueString.indexOf(\"=\");\n      if (indexOf < 0) {\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n      }\n else {\n        final String key=keyValueString.substring(0,indexOf);\n        final String value;\n        if (indexOf == keyValueString.length() - 1) {\n          value=\"\";\n        }\n else {\n          value=keyValueString.substring(indexOf + 1);\n        }\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n      }\n    }\n  }\n}\n catch (final UnsupportedEncodingException uee) {\n  throw new ProcessException(\"Invalid character encoding\",uee);\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 478,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8324,
                        "startLineNumber": 476,
                        "startColumnNumber": 110,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 956,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8444,
                        "startLineNumber": 475,
                        "startColumnNumber": 4,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void onTrigger(final ProcessContext context,final ProcessSession session) throws ProcessException {\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 974,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 72,
                    "startLineNumber": 511,
                    "startColumnNumber": 12,
                    "endLineNumber": 511,
                    "endColumnNumber": 84
                },
                "nodeContext": "putAttribute(attributes,\"http.context.path\",request.getContextPath());\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.processors.standard.HttpServletRequest"
        },
        {
            "nodeContext": "request",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 512,
                "startColumnNumber": 52,
                "endLineNumber": 512,
                "endColumnNumber": 59
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 19,
                        "startLineNumber": 512,
                        "startColumnNumber": 52,
                        "endLineNumber": 512,
                        "endColumnNumber": 71
                    },
                    "nodeContext": "request.getMethod()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 60,
                        "startLineNumber": 512,
                        "startColumnNumber": 12,
                        "endLineNumber": 512,
                        "endColumnNumber": 72
                    },
                    "nodeContext": "putAttribute(attributes,\"http.method\",request.getMethod())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 61,
                        "startLineNumber": 512,
                        "startColumnNumber": 12,
                        "endLineNumber": 512,
                        "endColumnNumber": 73
                    },
                    "nodeContext": "putAttribute(attributes,\"http.method\",request.getMethod());\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 4236,
                        "startLineNumber": 507,
                        "startColumnNumber": 12,
                        "endLineNumber": 577,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n  putAttribute(attributes,\"mime.type\",request.getContentType());\n  putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n  putAttribute(attributes,\"http.context.path\",request.getContextPath());\n  putAttribute(attributes,\"http.method\",request.getMethod());\n  putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n  putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n  if (request.getQueryString() != null) {\n    putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n  }\n  putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n  putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n  putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n  putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n  putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n  putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n  putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n  if (request.getDispatcherType() != null) {\n    putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n  }\n  putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n  putAttribute(attributes,\"http.locale\",request.getLocale());\n  putAttribute(attributes,\"http.server.name\",request.getServerName());\n  putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n  final Enumeration<String> paramEnumeration=request.getParameterNames();\n  while (paramEnumeration.hasMoreElements()) {\n    final String paramName=paramEnumeration.nextElement();\n    final String value=request.getParameter(paramName);\n    attributes.put(\"http.param.\" + paramName,value);\n  }\n  final Cookie[] cookies=request.getCookies();\n  if (cookies != null) {\n    for (    final Cookie cookie : cookies) {\n      final String name=cookie.getName();\n      final String cookiePrefix=\"http.cookie.\" + name + \".\";\n      attributes.put(cookiePrefix + \"value\",cookie.getValue());\n      attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n      attributes.put(cookiePrefix + \"path\",cookie.getPath());\n      attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n      attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n      attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n    }\n  }\n  final String queryString=request.getQueryString();\n  if (queryString != null) {\n    final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n    for (    final String keyValueString : params) {\n      final int indexOf=keyValueString.indexOf(\"=\");\n      if (indexOf < 0) {\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n      }\n else {\n        final String key=keyValueString.substring(0,indexOf);\n        final String value;\n        if (indexOf == keyValueString.length() - 1) {\n          value=\"\";\n        }\n else {\n          value=keyValueString.substring(indexOf + 1);\n        }\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 464,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4426,
                        "startLineNumber": 507,
                        "startColumnNumber": 8,
                        "endLineNumber": 579,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n  putAttribute(attributes,\"mime.type\",request.getContentType());\n  putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n  putAttribute(attributes,\"http.context.path\",request.getContextPath());\n  putAttribute(attributes,\"http.method\",request.getMethod());\n  putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n  putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n  if (request.getQueryString() != null) {\n    putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n  }\n  putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n  putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n  putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n  putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n  putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n  putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n  putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n  if (request.getDispatcherType() != null) {\n    putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n  }\n  putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n  putAttribute(attributes,\"http.locale\",request.getLocale());\n  putAttribute(attributes,\"http.server.name\",request.getServerName());\n  putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n  final Enumeration<String> paramEnumeration=request.getParameterNames();\n  while (paramEnumeration.hasMoreElements()) {\n    final String paramName=paramEnumeration.nextElement();\n    final String value=request.getParameter(paramName);\n    attributes.put(\"http.param.\" + paramName,value);\n  }\n  final Cookie[] cookies=request.getCookies();\n  if (cookies != null) {\n    for (    final Cookie cookie : cookies) {\n      final String name=cookie.getName();\n      final String cookiePrefix=\"http.cookie.\" + name + \".\";\n      attributes.put(cookiePrefix + \"value\",cookie.getValue());\n      attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n      attributes.put(cookiePrefix + \"path\",cookie.getPath());\n      attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n      attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n      attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n    }\n  }\n  final String queryString=request.getQueryString();\n  if (queryString != null) {\n    final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n    for (    final String keyValueString : params) {\n      final int indexOf=keyValueString.indexOf(\"=\");\n      if (indexOf < 0) {\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n      }\n else {\n        final String key=keyValueString.substring(0,indexOf);\n        final String value;\n        if (indexOf == keyValueString.length() - 1) {\n          value=\"\";\n        }\n else {\n          value=keyValueString.substring(indexOf + 1);\n        }\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n      }\n    }\n  }\n}\n catch (final UnsupportedEncodingException uee) {\n  throw new ProcessException(\"Invalid character encoding\",uee);\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 478,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8324,
                        "startLineNumber": 476,
                        "startColumnNumber": 110,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 956,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8444,
                        "startLineNumber": 475,
                        "startColumnNumber": 4,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void onTrigger(final ProcessContext context,final ProcessSession session) throws ProcessException {\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 974,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 61,
                    "startLineNumber": 512,
                    "startColumnNumber": 12,
                    "endLineNumber": 512,
                    "endColumnNumber": 73
                },
                "nodeContext": "putAttribute(attributes,\"http.method\",request.getMethod());\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.processors.standard.HttpServletRequest"
        },
        {
            "nodeContext": "request",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 513,
                "startColumnNumber": 56,
                "endLineNumber": 513,
                "endColumnNumber": 63
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 22,
                        "startLineNumber": 513,
                        "startColumnNumber": 56,
                        "endLineNumber": 513,
                        "endColumnNumber": 78
                    },
                    "nodeContext": "request.getLocalAddr()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 67,
                        "startLineNumber": 513,
                        "startColumnNumber": 12,
                        "endLineNumber": 513,
                        "endColumnNumber": 79
                    },
                    "nodeContext": "putAttribute(attributes,\"http.local.addr\",request.getLocalAddr())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 68,
                        "startLineNumber": 513,
                        "startColumnNumber": 12,
                        "endLineNumber": 513,
                        "endColumnNumber": 80
                    },
                    "nodeContext": "putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 4236,
                        "startLineNumber": 507,
                        "startColumnNumber": 12,
                        "endLineNumber": 577,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n  putAttribute(attributes,\"mime.type\",request.getContentType());\n  putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n  putAttribute(attributes,\"http.context.path\",request.getContextPath());\n  putAttribute(attributes,\"http.method\",request.getMethod());\n  putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n  putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n  if (request.getQueryString() != null) {\n    putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n  }\n  putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n  putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n  putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n  putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n  putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n  putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n  putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n  if (request.getDispatcherType() != null) {\n    putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n  }\n  putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n  putAttribute(attributes,\"http.locale\",request.getLocale());\n  putAttribute(attributes,\"http.server.name\",request.getServerName());\n  putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n  final Enumeration<String> paramEnumeration=request.getParameterNames();\n  while (paramEnumeration.hasMoreElements()) {\n    final String paramName=paramEnumeration.nextElement();\n    final String value=request.getParameter(paramName);\n    attributes.put(\"http.param.\" + paramName,value);\n  }\n  final Cookie[] cookies=request.getCookies();\n  if (cookies != null) {\n    for (    final Cookie cookie : cookies) {\n      final String name=cookie.getName();\n      final String cookiePrefix=\"http.cookie.\" + name + \".\";\n      attributes.put(cookiePrefix + \"value\",cookie.getValue());\n      attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n      attributes.put(cookiePrefix + \"path\",cookie.getPath());\n      attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n      attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n      attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n    }\n  }\n  final String queryString=request.getQueryString();\n  if (queryString != null) {\n    final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n    for (    final String keyValueString : params) {\n      final int indexOf=keyValueString.indexOf(\"=\");\n      if (indexOf < 0) {\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n      }\n else {\n        final String key=keyValueString.substring(0,indexOf);\n        final String value;\n        if (indexOf == keyValueString.length() - 1) {\n          value=\"\";\n        }\n else {\n          value=keyValueString.substring(indexOf + 1);\n        }\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 464,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4426,
                        "startLineNumber": 507,
                        "startColumnNumber": 8,
                        "endLineNumber": 579,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n  putAttribute(attributes,\"mime.type\",request.getContentType());\n  putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n  putAttribute(attributes,\"http.context.path\",request.getContextPath());\n  putAttribute(attributes,\"http.method\",request.getMethod());\n  putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n  putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n  if (request.getQueryString() != null) {\n    putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n  }\n  putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n  putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n  putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n  putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n  putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n  putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n  putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n  if (request.getDispatcherType() != null) {\n    putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n  }\n  putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n  putAttribute(attributes,\"http.locale\",request.getLocale());\n  putAttribute(attributes,\"http.server.name\",request.getServerName());\n  putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n  final Enumeration<String> paramEnumeration=request.getParameterNames();\n  while (paramEnumeration.hasMoreElements()) {\n    final String paramName=paramEnumeration.nextElement();\n    final String value=request.getParameter(paramName);\n    attributes.put(\"http.param.\" + paramName,value);\n  }\n  final Cookie[] cookies=request.getCookies();\n  if (cookies != null) {\n    for (    final Cookie cookie : cookies) {\n      final String name=cookie.getName();\n      final String cookiePrefix=\"http.cookie.\" + name + \".\";\n      attributes.put(cookiePrefix + \"value\",cookie.getValue());\n      attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n      attributes.put(cookiePrefix + \"path\",cookie.getPath());\n      attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n      attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n      attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n    }\n  }\n  final String queryString=request.getQueryString();\n  if (queryString != null) {\n    final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n    for (    final String keyValueString : params) {\n      final int indexOf=keyValueString.indexOf(\"=\");\n      if (indexOf < 0) {\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n      }\n else {\n        final String key=keyValueString.substring(0,indexOf);\n        final String value;\n        if (indexOf == keyValueString.length() - 1) {\n          value=\"\";\n        }\n else {\n          value=keyValueString.substring(indexOf + 1);\n        }\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n      }\n    }\n  }\n}\n catch (final UnsupportedEncodingException uee) {\n  throw new ProcessException(\"Invalid character encoding\",uee);\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 478,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8324,
                        "startLineNumber": 476,
                        "startColumnNumber": 110,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 956,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8444,
                        "startLineNumber": 475,
                        "startColumnNumber": 4,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void onTrigger(final ProcessContext context,final ProcessSession session) throws ProcessException {\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 974,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 68,
                    "startLineNumber": 513,
                    "startColumnNumber": 12,
                    "endLineNumber": 513,
                    "endColumnNumber": 80
                },
                "nodeContext": "putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.processors.standard.HttpServletRequest"
        },
        {
            "nodeContext": "request",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 514,
                "startColumnNumber": 64,
                "endLineNumber": 514,
                "endColumnNumber": 71
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 22,
                        "startLineNumber": 514,
                        "startColumnNumber": 64,
                        "endLineNumber": 514,
                        "endColumnNumber": 86
                    },
                    "nodeContext": "request.getLocalName()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 75,
                        "startLineNumber": 514,
                        "startColumnNumber": 12,
                        "endLineNumber": 514,
                        "endColumnNumber": 87
                    },
                    "nodeContext": "putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 9,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 76,
                        "startLineNumber": 514,
                        "startColumnNumber": 12,
                        "endLineNumber": 514,
                        "endColumnNumber": 88
                    },
                    "nodeContext": "putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 10,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 4236,
                        "startLineNumber": 507,
                        "startColumnNumber": 12,
                        "endLineNumber": 577,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n  putAttribute(attributes,\"mime.type\",request.getContentType());\n  putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n  putAttribute(attributes,\"http.context.path\",request.getContextPath());\n  putAttribute(attributes,\"http.method\",request.getMethod());\n  putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n  putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n  if (request.getQueryString() != null) {\n    putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n  }\n  putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n  putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n  putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n  putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n  putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n  putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n  putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n  if (request.getDispatcherType() != null) {\n    putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n  }\n  putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n  putAttribute(attributes,\"http.locale\",request.getLocale());\n  putAttribute(attributes,\"http.server.name\",request.getServerName());\n  putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n  final Enumeration<String> paramEnumeration=request.getParameterNames();\n  while (paramEnumeration.hasMoreElements()) {\n    final String paramName=paramEnumeration.nextElement();\n    final String value=request.getParameter(paramName);\n    attributes.put(\"http.param.\" + paramName,value);\n  }\n  final Cookie[] cookies=request.getCookies();\n  if (cookies != null) {\n    for (    final Cookie cookie : cookies) {\n      final String name=cookie.getName();\n      final String cookiePrefix=\"http.cookie.\" + name + \".\";\n      attributes.put(cookiePrefix + \"value\",cookie.getValue());\n      attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n      attributes.put(cookiePrefix + \"path\",cookie.getPath());\n      attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n      attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n      attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n    }\n  }\n  final String queryString=request.getQueryString();\n  if (queryString != null) {\n    final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n    for (    final String keyValueString : params) {\n      final int indexOf=keyValueString.indexOf(\"=\");\n      if (indexOf < 0) {\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n      }\n else {\n        final String key=keyValueString.substring(0,indexOf);\n        final String value;\n        if (indexOf == keyValueString.length() - 1) {\n          value=\"\";\n        }\n else {\n          value=keyValueString.substring(indexOf + 1);\n        }\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 464,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4426,
                        "startLineNumber": 507,
                        "startColumnNumber": 8,
                        "endLineNumber": 579,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n  putAttribute(attributes,\"mime.type\",request.getContentType());\n  putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n  putAttribute(attributes,\"http.context.path\",request.getContextPath());\n  putAttribute(attributes,\"http.method\",request.getMethod());\n  putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n  putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n  if (request.getQueryString() != null) {\n    putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n  }\n  putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n  putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n  putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n  putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n  putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n  putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n  putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n  if (request.getDispatcherType() != null) {\n    putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n  }\n  putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n  putAttribute(attributes,\"http.locale\",request.getLocale());\n  putAttribute(attributes,\"http.server.name\",request.getServerName());\n  putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n  final Enumeration<String> paramEnumeration=request.getParameterNames();\n  while (paramEnumeration.hasMoreElements()) {\n    final String paramName=paramEnumeration.nextElement();\n    final String value=request.getParameter(paramName);\n    attributes.put(\"http.param.\" + paramName,value);\n  }\n  final Cookie[] cookies=request.getCookies();\n  if (cookies != null) {\n    for (    final Cookie cookie : cookies) {\n      final String name=cookie.getName();\n      final String cookiePrefix=\"http.cookie.\" + name + \".\";\n      attributes.put(cookiePrefix + \"value\",cookie.getValue());\n      attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n      attributes.put(cookiePrefix + \"path\",cookie.getPath());\n      attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n      attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n      attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n    }\n  }\n  final String queryString=request.getQueryString();\n  if (queryString != null) {\n    final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n    for (    final String keyValueString : params) {\n      final int indexOf=keyValueString.indexOf(\"=\");\n      if (indexOf < 0) {\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n      }\n else {\n        final String key=keyValueString.substring(0,indexOf);\n        final String value;\n        if (indexOf == keyValueString.length() - 1) {\n          value=\"\";\n        }\n else {\n          value=keyValueString.substring(indexOf + 1);\n        }\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n      }\n    }\n  }\n}\n catch (final UnsupportedEncodingException uee) {\n  throw new ProcessException(\"Invalid character encoding\",uee);\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 478,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8324,
                        "startLineNumber": 476,
                        "startColumnNumber": 110,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 956,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8444,
                        "startLineNumber": 475,
                        "startColumnNumber": 4,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void onTrigger(final ProcessContext context,final ProcessSession session) throws ProcessException {\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 974,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 76,
                    "startLineNumber": 514,
                    "startColumnNumber": 12,
                    "endLineNumber": 514,
                    "endColumnNumber": 88
                },
                "nodeContext": "putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 10,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.processors.standard.HttpServletRequest"
        },
        {
            "nodeContext": "request",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 515,
                "startColumnNumber": 16,
                "endLineNumber": 515,
                "endColumnNumber": 23
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 24,
                        "startLineNumber": 515,
                        "startColumnNumber": 16,
                        "endLineNumber": 515,
                        "endColumnNumber": 40
                    },
                    "nodeContext": "request.getQueryString()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 32,
                        "startLineNumber": 515,
                        "startColumnNumber": 16,
                        "endLineNumber": 515,
                        "endColumnNumber": 48
                    },
                    "nodeContext": "request.getQueryString() != null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 170,
                        "startLineNumber": 515,
                        "startColumnNumber": 12,
                        "endLineNumber": 517,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (request.getQueryString() != null) {\n  putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 19,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 4236,
                        "startLineNumber": 507,
                        "startColumnNumber": 12,
                        "endLineNumber": 577,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n  putAttribute(attributes,\"mime.type\",request.getContentType());\n  putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n  putAttribute(attributes,\"http.context.path\",request.getContextPath());\n  putAttribute(attributes,\"http.method\",request.getMethod());\n  putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n  putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n  if (request.getQueryString() != null) {\n    putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n  }\n  putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n  putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n  putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n  putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n  putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n  putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n  putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n  if (request.getDispatcherType() != null) {\n    putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n  }\n  putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n  putAttribute(attributes,\"http.locale\",request.getLocale());\n  putAttribute(attributes,\"http.server.name\",request.getServerName());\n  putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n  final Enumeration<String> paramEnumeration=request.getParameterNames();\n  while (paramEnumeration.hasMoreElements()) {\n    final String paramName=paramEnumeration.nextElement();\n    final String value=request.getParameter(paramName);\n    attributes.put(\"http.param.\" + paramName,value);\n  }\n  final Cookie[] cookies=request.getCookies();\n  if (cookies != null) {\n    for (    final Cookie cookie : cookies) {\n      final String name=cookie.getName();\n      final String cookiePrefix=\"http.cookie.\" + name + \".\";\n      attributes.put(cookiePrefix + \"value\",cookie.getValue());\n      attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n      attributes.put(cookiePrefix + \"path\",cookie.getPath());\n      attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n      attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n      attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n    }\n  }\n  final String queryString=request.getQueryString();\n  if (queryString != null) {\n    final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n    for (    final String keyValueString : params) {\n      final int indexOf=keyValueString.indexOf(\"=\");\n      if (indexOf < 0) {\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n      }\n else {\n        final String key=keyValueString.substring(0,indexOf);\n        final String value;\n        if (indexOf == keyValueString.length() - 1) {\n          value=\"\";\n        }\n else {\n          value=keyValueString.substring(indexOf + 1);\n        }\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 464,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4426,
                        "startLineNumber": 507,
                        "startColumnNumber": 8,
                        "endLineNumber": 579,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n  putAttribute(attributes,\"mime.type\",request.getContentType());\n  putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n  putAttribute(attributes,\"http.context.path\",request.getContextPath());\n  putAttribute(attributes,\"http.method\",request.getMethod());\n  putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n  putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n  if (request.getQueryString() != null) {\n    putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n  }\n  putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n  putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n  putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n  putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n  putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n  putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n  putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n  if (request.getDispatcherType() != null) {\n    putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n  }\n  putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n  putAttribute(attributes,\"http.locale\",request.getLocale());\n  putAttribute(attributes,\"http.server.name\",request.getServerName());\n  putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n  final Enumeration<String> paramEnumeration=request.getParameterNames();\n  while (paramEnumeration.hasMoreElements()) {\n    final String paramName=paramEnumeration.nextElement();\n    final String value=request.getParameter(paramName);\n    attributes.put(\"http.param.\" + paramName,value);\n  }\n  final Cookie[] cookies=request.getCookies();\n  if (cookies != null) {\n    for (    final Cookie cookie : cookies) {\n      final String name=cookie.getName();\n      final String cookiePrefix=\"http.cookie.\" + name + \".\";\n      attributes.put(cookiePrefix + \"value\",cookie.getValue());\n      attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n      attributes.put(cookiePrefix + \"path\",cookie.getPath());\n      attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n      attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n      attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n    }\n  }\n  final String queryString=request.getQueryString();\n  if (queryString != null) {\n    final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n    for (    final String keyValueString : params) {\n      final int indexOf=keyValueString.indexOf(\"=\");\n      if (indexOf < 0) {\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n      }\n else {\n        final String key=keyValueString.substring(0,indexOf);\n        final String value;\n        if (indexOf == keyValueString.length() - 1) {\n          value=\"\";\n        }\n else {\n          value=keyValueString.substring(indexOf + 1);\n        }\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n      }\n    }\n  }\n}\n catch (final UnsupportedEncodingException uee) {\n  throw new ProcessException(\"Invalid character encoding\",uee);\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 478,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8324,
                        "startLineNumber": 476,
                        "startColumnNumber": 110,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 956,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8444,
                        "startLineNumber": 475,
                        "startColumnNumber": 4,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void onTrigger(final ProcessContext context,final ProcessSession session) throws ProcessException {\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 974,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 32,
                    "startLineNumber": 515,
                    "startColumnNumber": 16,
                    "endLineNumber": 515,
                    "endColumnNumber": 48
                },
                "nodeContext": "request.getQueryString() != null",
                "nodeType": "InfixExpression",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.processors.standard.HttpServletRequest"
        },
        {
            "nodeContext": "request",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 516,
                "startColumnNumber": 80,
                "endLineNumber": 516,
                "endColumnNumber": 87
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 24,
                        "startLineNumber": 516,
                        "startColumnNumber": 80,
                        "endLineNumber": 516,
                        "endColumnNumber": 104
                    },
                    "nodeContext": "request.getQueryString()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 52,
                        "startLineNumber": 516,
                        "startColumnNumber": 62,
                        "endLineNumber": 516,
                        "endColumnNumber": 114
                    },
                    "nodeContext": "URLDecoder.decode(request.getQueryString(),charset)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 99,
                        "startLineNumber": 516,
                        "startColumnNumber": 16,
                        "endLineNumber": 516,
                        "endColumnNumber": 115
                    },
                    "nodeContext": "putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 100,
                        "startLineNumber": 516,
                        "startColumnNumber": 16,
                        "endLineNumber": 516,
                        "endColumnNumber": 116
                    },
                    "nodeContext": "putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 12,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 132,
                        "startLineNumber": 515,
                        "startColumnNumber": 50,
                        "endLineNumber": 517,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 13,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 170,
                        "startLineNumber": 515,
                        "startColumnNumber": 12,
                        "endLineNumber": 517,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (request.getQueryString() != null) {\n  putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 19,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 4236,
                        "startLineNumber": 507,
                        "startColumnNumber": 12,
                        "endLineNumber": 577,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n  putAttribute(attributes,\"mime.type\",request.getContentType());\n  putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n  putAttribute(attributes,\"http.context.path\",request.getContextPath());\n  putAttribute(attributes,\"http.method\",request.getMethod());\n  putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n  putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n  if (request.getQueryString() != null) {\n    putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n  }\n  putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n  putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n  putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n  putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n  putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n  putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n  putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n  if (request.getDispatcherType() != null) {\n    putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n  }\n  putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n  putAttribute(attributes,\"http.locale\",request.getLocale());\n  putAttribute(attributes,\"http.server.name\",request.getServerName());\n  putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n  final Enumeration<String> paramEnumeration=request.getParameterNames();\n  while (paramEnumeration.hasMoreElements()) {\n    final String paramName=paramEnumeration.nextElement();\n    final String value=request.getParameter(paramName);\n    attributes.put(\"http.param.\" + paramName,value);\n  }\n  final Cookie[] cookies=request.getCookies();\n  if (cookies != null) {\n    for (    final Cookie cookie : cookies) {\n      final String name=cookie.getName();\n      final String cookiePrefix=\"http.cookie.\" + name + \".\";\n      attributes.put(cookiePrefix + \"value\",cookie.getValue());\n      attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n      attributes.put(cookiePrefix + \"path\",cookie.getPath());\n      attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n      attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n      attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n    }\n  }\n  final String queryString=request.getQueryString();\n  if (queryString != null) {\n    final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n    for (    final String keyValueString : params) {\n      final int indexOf=keyValueString.indexOf(\"=\");\n      if (indexOf < 0) {\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n      }\n else {\n        final String key=keyValueString.substring(0,indexOf);\n        final String value;\n        if (indexOf == keyValueString.length() - 1) {\n          value=\"\";\n        }\n else {\n          value=keyValueString.substring(indexOf + 1);\n        }\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 464,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4426,
                        "startLineNumber": 507,
                        "startColumnNumber": 8,
                        "endLineNumber": 579,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n  putAttribute(attributes,\"mime.type\",request.getContentType());\n  putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n  putAttribute(attributes,\"http.context.path\",request.getContextPath());\n  putAttribute(attributes,\"http.method\",request.getMethod());\n  putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n  putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n  if (request.getQueryString() != null) {\n    putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n  }\n  putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n  putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n  putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n  putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n  putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n  putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n  putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n  if (request.getDispatcherType() != null) {\n    putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n  }\n  putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n  putAttribute(attributes,\"http.locale\",request.getLocale());\n  putAttribute(attributes,\"http.server.name\",request.getServerName());\n  putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n  final Enumeration<String> paramEnumeration=request.getParameterNames();\n  while (paramEnumeration.hasMoreElements()) {\n    final String paramName=paramEnumeration.nextElement();\n    final String value=request.getParameter(paramName);\n    attributes.put(\"http.param.\" + paramName,value);\n  }\n  final Cookie[] cookies=request.getCookies();\n  if (cookies != null) {\n    for (    final Cookie cookie : cookies) {\n      final String name=cookie.getName();\n      final String cookiePrefix=\"http.cookie.\" + name + \".\";\n      attributes.put(cookiePrefix + \"value\",cookie.getValue());\n      attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n      attributes.put(cookiePrefix + \"path\",cookie.getPath());\n      attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n      attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n      attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n    }\n  }\n  final String queryString=request.getQueryString();\n  if (queryString != null) {\n    final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n    for (    final String keyValueString : params) {\n      final int indexOf=keyValueString.indexOf(\"=\");\n      if (indexOf < 0) {\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n      }\n else {\n        final String key=keyValueString.substring(0,indexOf);\n        final String value;\n        if (indexOf == keyValueString.length() - 1) {\n          value=\"\";\n        }\n else {\n          value=keyValueString.substring(indexOf + 1);\n        }\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n      }\n    }\n  }\n}\n catch (final UnsupportedEncodingException uee) {\n  throw new ProcessException(\"Invalid character encoding\",uee);\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 478,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8324,
                        "startLineNumber": 476,
                        "startColumnNumber": 110,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 956,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8444,
                        "startLineNumber": 475,
                        "startColumnNumber": 4,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void onTrigger(final ProcessContext context,final ProcessSession session) throws ProcessException {\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 974,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 100,
                    "startLineNumber": 516,
                    "startColumnNumber": 16,
                    "endLineNumber": 516,
                    "endColumnNumber": 116
                },
                "nodeContext": "putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 12,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.processors.standard.HttpServletRequest"
        },
        {
            "nodeContext": "request",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 518,
                "startColumnNumber": 65,
                "endLineNumber": 518,
                "endColumnNumber": 72
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 23,
                        "startLineNumber": 518,
                        "startColumnNumber": 65,
                        "endLineNumber": 518,
                        "endColumnNumber": 88
                    },
                    "nodeContext": "request.getRemoteHost()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 77,
                        "startLineNumber": 518,
                        "startColumnNumber": 12,
                        "endLineNumber": 518,
                        "endColumnNumber": 89
                    },
                    "nodeContext": "putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 9,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 78,
                        "startLineNumber": 518,
                        "startColumnNumber": 12,
                        "endLineNumber": 518,
                        "endColumnNumber": 90
                    },
                    "nodeContext": "putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 10,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 4236,
                        "startLineNumber": 507,
                        "startColumnNumber": 12,
                        "endLineNumber": 577,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n  putAttribute(attributes,\"mime.type\",request.getContentType());\n  putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n  putAttribute(attributes,\"http.context.path\",request.getContextPath());\n  putAttribute(attributes,\"http.method\",request.getMethod());\n  putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n  putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n  if (request.getQueryString() != null) {\n    putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n  }\n  putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n  putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n  putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n  putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n  putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n  putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n  putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n  if (request.getDispatcherType() != null) {\n    putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n  }\n  putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n  putAttribute(attributes,\"http.locale\",request.getLocale());\n  putAttribute(attributes,\"http.server.name\",request.getServerName());\n  putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n  final Enumeration<String> paramEnumeration=request.getParameterNames();\n  while (paramEnumeration.hasMoreElements()) {\n    final String paramName=paramEnumeration.nextElement();\n    final String value=request.getParameter(paramName);\n    attributes.put(\"http.param.\" + paramName,value);\n  }\n  final Cookie[] cookies=request.getCookies();\n  if (cookies != null) {\n    for (    final Cookie cookie : cookies) {\n      final String name=cookie.getName();\n      final String cookiePrefix=\"http.cookie.\" + name + \".\";\n      attributes.put(cookiePrefix + \"value\",cookie.getValue());\n      attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n      attributes.put(cookiePrefix + \"path\",cookie.getPath());\n      attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n      attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n      attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n    }\n  }\n  final String queryString=request.getQueryString();\n  if (queryString != null) {\n    final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n    for (    final String keyValueString : params) {\n      final int indexOf=keyValueString.indexOf(\"=\");\n      if (indexOf < 0) {\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n      }\n else {\n        final String key=keyValueString.substring(0,indexOf);\n        final String value;\n        if (indexOf == keyValueString.length() - 1) {\n          value=\"\";\n        }\n else {\n          value=keyValueString.substring(indexOf + 1);\n        }\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 464,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4426,
                        "startLineNumber": 507,
                        "startColumnNumber": 8,
                        "endLineNumber": 579,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n  putAttribute(attributes,\"mime.type\",request.getContentType());\n  putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n  putAttribute(attributes,\"http.context.path\",request.getContextPath());\n  putAttribute(attributes,\"http.method\",request.getMethod());\n  putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n  putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n  if (request.getQueryString() != null) {\n    putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n  }\n  putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n  putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n  putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n  putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n  putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n  putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n  putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n  if (request.getDispatcherType() != null) {\n    putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n  }\n  putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n  putAttribute(attributes,\"http.locale\",request.getLocale());\n  putAttribute(attributes,\"http.server.name\",request.getServerName());\n  putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n  final Enumeration<String> paramEnumeration=request.getParameterNames();\n  while (paramEnumeration.hasMoreElements()) {\n    final String paramName=paramEnumeration.nextElement();\n    final String value=request.getParameter(paramName);\n    attributes.put(\"http.param.\" + paramName,value);\n  }\n  final Cookie[] cookies=request.getCookies();\n  if (cookies != null) {\n    for (    final Cookie cookie : cookies) {\n      final String name=cookie.getName();\n      final String cookiePrefix=\"http.cookie.\" + name + \".\";\n      attributes.put(cookiePrefix + \"value\",cookie.getValue());\n      attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n      attributes.put(cookiePrefix + \"path\",cookie.getPath());\n      attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n      attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n      attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n    }\n  }\n  final String queryString=request.getQueryString();\n  if (queryString != null) {\n    final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n    for (    final String keyValueString : params) {\n      final int indexOf=keyValueString.indexOf(\"=\");\n      if (indexOf < 0) {\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n      }\n else {\n        final String key=keyValueString.substring(0,indexOf);\n        final String value;\n        if (indexOf == keyValueString.length() - 1) {\n          value=\"\";\n        }\n else {\n          value=keyValueString.substring(indexOf + 1);\n        }\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n      }\n    }\n  }\n}\n catch (final UnsupportedEncodingException uee) {\n  throw new ProcessException(\"Invalid character encoding\",uee);\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 478,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8324,
                        "startLineNumber": 476,
                        "startColumnNumber": 110,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 956,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8444,
                        "startLineNumber": 475,
                        "startColumnNumber": 4,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void onTrigger(final ProcessContext context,final ProcessSession session) throws ProcessException {\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 974,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 78,
                    "startLineNumber": 518,
                    "startColumnNumber": 12,
                    "endLineNumber": 518,
                    "endColumnNumber": 90
                },
                "nodeContext": "putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 10,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.processors.standard.HttpServletRequest"
        },
        {
            "nodeContext": "request",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 519,
                "startColumnNumber": 57,
                "endLineNumber": 519,
                "endColumnNumber": 64
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 23,
                        "startLineNumber": 519,
                        "startColumnNumber": 57,
                        "endLineNumber": 519,
                        "endColumnNumber": 80
                    },
                    "nodeContext": "request.getRemoteAddr()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 69,
                        "startLineNumber": 519,
                        "startColumnNumber": 12,
                        "endLineNumber": 519,
                        "endColumnNumber": 81
                    },
                    "nodeContext": "putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 70,
                        "startLineNumber": 519,
                        "startColumnNumber": 12,
                        "endLineNumber": 519,
                        "endColumnNumber": 82
                    },
                    "nodeContext": "putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 4236,
                        "startLineNumber": 507,
                        "startColumnNumber": 12,
                        "endLineNumber": 577,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n  putAttribute(attributes,\"mime.type\",request.getContentType());\n  putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n  putAttribute(attributes,\"http.context.path\",request.getContextPath());\n  putAttribute(attributes,\"http.method\",request.getMethod());\n  putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n  putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n  if (request.getQueryString() != null) {\n    putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n  }\n  putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n  putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n  putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n  putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n  putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n  putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n  putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n  if (request.getDispatcherType() != null) {\n    putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n  }\n  putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n  putAttribute(attributes,\"http.locale\",request.getLocale());\n  putAttribute(attributes,\"http.server.name\",request.getServerName());\n  putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n  final Enumeration<String> paramEnumeration=request.getParameterNames();\n  while (paramEnumeration.hasMoreElements()) {\n    final String paramName=paramEnumeration.nextElement();\n    final String value=request.getParameter(paramName);\n    attributes.put(\"http.param.\" + paramName,value);\n  }\n  final Cookie[] cookies=request.getCookies();\n  if (cookies != null) {\n    for (    final Cookie cookie : cookies) {\n      final String name=cookie.getName();\n      final String cookiePrefix=\"http.cookie.\" + name + \".\";\n      attributes.put(cookiePrefix + \"value\",cookie.getValue());\n      attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n      attributes.put(cookiePrefix + \"path\",cookie.getPath());\n      attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n      attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n      attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n    }\n  }\n  final String queryString=request.getQueryString();\n  if (queryString != null) {\n    final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n    for (    final String keyValueString : params) {\n      final int indexOf=keyValueString.indexOf(\"=\");\n      if (indexOf < 0) {\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n      }\n else {\n        final String key=keyValueString.substring(0,indexOf);\n        final String value;\n        if (indexOf == keyValueString.length() - 1) {\n          value=\"\";\n        }\n else {\n          value=keyValueString.substring(indexOf + 1);\n        }\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 464,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4426,
                        "startLineNumber": 507,
                        "startColumnNumber": 8,
                        "endLineNumber": 579,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n  putAttribute(attributes,\"mime.type\",request.getContentType());\n  putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n  putAttribute(attributes,\"http.context.path\",request.getContextPath());\n  putAttribute(attributes,\"http.method\",request.getMethod());\n  putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n  putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n  if (request.getQueryString() != null) {\n    putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n  }\n  putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n  putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n  putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n  putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n  putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n  putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n  putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n  if (request.getDispatcherType() != null) {\n    putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n  }\n  putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n  putAttribute(attributes,\"http.locale\",request.getLocale());\n  putAttribute(attributes,\"http.server.name\",request.getServerName());\n  putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n  final Enumeration<String> paramEnumeration=request.getParameterNames();\n  while (paramEnumeration.hasMoreElements()) {\n    final String paramName=paramEnumeration.nextElement();\n    final String value=request.getParameter(paramName);\n    attributes.put(\"http.param.\" + paramName,value);\n  }\n  final Cookie[] cookies=request.getCookies();\n  if (cookies != null) {\n    for (    final Cookie cookie : cookies) {\n      final String name=cookie.getName();\n      final String cookiePrefix=\"http.cookie.\" + name + \".\";\n      attributes.put(cookiePrefix + \"value\",cookie.getValue());\n      attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n      attributes.put(cookiePrefix + \"path\",cookie.getPath());\n      attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n      attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n      attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n    }\n  }\n  final String queryString=request.getQueryString();\n  if (queryString != null) {\n    final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n    for (    final String keyValueString : params) {\n      final int indexOf=keyValueString.indexOf(\"=\");\n      if (indexOf < 0) {\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n      }\n else {\n        final String key=keyValueString.substring(0,indexOf);\n        final String value;\n        if (indexOf == keyValueString.length() - 1) {\n          value=\"\";\n        }\n else {\n          value=keyValueString.substring(indexOf + 1);\n        }\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n      }\n    }\n  }\n}\n catch (final UnsupportedEncodingException uee) {\n  throw new ProcessException(\"Invalid character encoding\",uee);\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 478,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8324,
                        "startLineNumber": 476,
                        "startColumnNumber": 110,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 956,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8444,
                        "startLineNumber": 475,
                        "startColumnNumber": 4,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void onTrigger(final ProcessContext context,final ProcessSession session) throws ProcessException {\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 974,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 70,
                    "startLineNumber": 519,
                    "startColumnNumber": 12,
                    "endLineNumber": 519,
                    "endColumnNumber": 82
                },
                "nodeContext": "putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.processors.standard.HttpServletRequest"
        },
        {
            "nodeContext": "request",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 520,
                "startColumnNumber": 57,
                "endLineNumber": 520,
                "endColumnNumber": 64
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 23,
                        "startLineNumber": 520,
                        "startColumnNumber": 57,
                        "endLineNumber": 520,
                        "endColumnNumber": 80
                    },
                    "nodeContext": "request.getRemoteUser()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 69,
                        "startLineNumber": 520,
                        "startColumnNumber": 12,
                        "endLineNumber": 520,
                        "endColumnNumber": 81
                    },
                    "nodeContext": "putAttribute(attributes,\"http.remote.user\",request.getRemoteUser())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 70,
                        "startLineNumber": 520,
                        "startColumnNumber": 12,
                        "endLineNumber": 520,
                        "endColumnNumber": 82
                    },
                    "nodeContext": "putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 4236,
                        "startLineNumber": 507,
                        "startColumnNumber": 12,
                        "endLineNumber": 577,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n  putAttribute(attributes,\"mime.type\",request.getContentType());\n  putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n  putAttribute(attributes,\"http.context.path\",request.getContextPath());\n  putAttribute(attributes,\"http.method\",request.getMethod());\n  putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n  putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n  if (request.getQueryString() != null) {\n    putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n  }\n  putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n  putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n  putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n  putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n  putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n  putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n  putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n  if (request.getDispatcherType() != null) {\n    putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n  }\n  putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n  putAttribute(attributes,\"http.locale\",request.getLocale());\n  putAttribute(attributes,\"http.server.name\",request.getServerName());\n  putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n  final Enumeration<String> paramEnumeration=request.getParameterNames();\n  while (paramEnumeration.hasMoreElements()) {\n    final String paramName=paramEnumeration.nextElement();\n    final String value=request.getParameter(paramName);\n    attributes.put(\"http.param.\" + paramName,value);\n  }\n  final Cookie[] cookies=request.getCookies();\n  if (cookies != null) {\n    for (    final Cookie cookie : cookies) {\n      final String name=cookie.getName();\n      final String cookiePrefix=\"http.cookie.\" + name + \".\";\n      attributes.put(cookiePrefix + \"value\",cookie.getValue());\n      attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n      attributes.put(cookiePrefix + \"path\",cookie.getPath());\n      attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n      attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n      attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n    }\n  }\n  final String queryString=request.getQueryString();\n  if (queryString != null) {\n    final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n    for (    final String keyValueString : params) {\n      final int indexOf=keyValueString.indexOf(\"=\");\n      if (indexOf < 0) {\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n      }\n else {\n        final String key=keyValueString.substring(0,indexOf);\n        final String value;\n        if (indexOf == keyValueString.length() - 1) {\n          value=\"\";\n        }\n else {\n          value=keyValueString.substring(indexOf + 1);\n        }\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 464,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4426,
                        "startLineNumber": 507,
                        "startColumnNumber": 8,
                        "endLineNumber": 579,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n  putAttribute(attributes,\"mime.type\",request.getContentType());\n  putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n  putAttribute(attributes,\"http.context.path\",request.getContextPath());\n  putAttribute(attributes,\"http.method\",request.getMethod());\n  putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n  putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n  if (request.getQueryString() != null) {\n    putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n  }\n  putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n  putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n  putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n  putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n  putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n  putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n  putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n  if (request.getDispatcherType() != null) {\n    putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n  }\n  putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n  putAttribute(attributes,\"http.locale\",request.getLocale());\n  putAttribute(attributes,\"http.server.name\",request.getServerName());\n  putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n  final Enumeration<String> paramEnumeration=request.getParameterNames();\n  while (paramEnumeration.hasMoreElements()) {\n    final String paramName=paramEnumeration.nextElement();\n    final String value=request.getParameter(paramName);\n    attributes.put(\"http.param.\" + paramName,value);\n  }\n  final Cookie[] cookies=request.getCookies();\n  if (cookies != null) {\n    for (    final Cookie cookie : cookies) {\n      final String name=cookie.getName();\n      final String cookiePrefix=\"http.cookie.\" + name + \".\";\n      attributes.put(cookiePrefix + \"value\",cookie.getValue());\n      attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n      attributes.put(cookiePrefix + \"path\",cookie.getPath());\n      attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n      attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n      attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n    }\n  }\n  final String queryString=request.getQueryString();\n  if (queryString != null) {\n    final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n    for (    final String keyValueString : params) {\n      final int indexOf=keyValueString.indexOf(\"=\");\n      if (indexOf < 0) {\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n      }\n else {\n        final String key=keyValueString.substring(0,indexOf);\n        final String value;\n        if (indexOf == keyValueString.length() - 1) {\n          value=\"\";\n        }\n else {\n          value=keyValueString.substring(indexOf + 1);\n        }\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n      }\n    }\n  }\n}\n catch (final UnsupportedEncodingException uee) {\n  throw new ProcessException(\"Invalid character encoding\",uee);\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 478,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8324,
                        "startLineNumber": 476,
                        "startColumnNumber": 110,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 956,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8444,
                        "startLineNumber": 475,
                        "startColumnNumber": 4,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void onTrigger(final ProcessContext context,final ProcessSession session) throws ProcessException {\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 974,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 70,
                    "startLineNumber": 520,
                    "startColumnNumber": 12,
                    "endLineNumber": 520,
                    "endColumnNumber": 82
                },
                "nodeContext": "putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.processors.standard.HttpServletRequest"
        },
        {
            "nodeContext": "request",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 521,
                "startColumnNumber": 65,
                "endLineNumber": 521,
                "endColumnNumber": 72
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 23,
                        "startLineNumber": 521,
                        "startColumnNumber": 65,
                        "endLineNumber": 521,
                        "endColumnNumber": 88
                    },
                    "nodeContext": "request.getRequestURI()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 77,
                        "startLineNumber": 521,
                        "startColumnNumber": 12,
                        "endLineNumber": 521,
                        "endColumnNumber": 89
                    },
                    "nodeContext": "putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 9,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 78,
                        "startLineNumber": 521,
                        "startColumnNumber": 12,
                        "endLineNumber": 521,
                        "endColumnNumber": 90
                    },
                    "nodeContext": "putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 10,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 4236,
                        "startLineNumber": 507,
                        "startColumnNumber": 12,
                        "endLineNumber": 577,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n  putAttribute(attributes,\"mime.type\",request.getContentType());\n  putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n  putAttribute(attributes,\"http.context.path\",request.getContextPath());\n  putAttribute(attributes,\"http.method\",request.getMethod());\n  putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n  putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n  if (request.getQueryString() != null) {\n    putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n  }\n  putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n  putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n  putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n  putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n  putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n  putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n  putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n  if (request.getDispatcherType() != null) {\n    putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n  }\n  putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n  putAttribute(attributes,\"http.locale\",request.getLocale());\n  putAttribute(attributes,\"http.server.name\",request.getServerName());\n  putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n  final Enumeration<String> paramEnumeration=request.getParameterNames();\n  while (paramEnumeration.hasMoreElements()) {\n    final String paramName=paramEnumeration.nextElement();\n    final String value=request.getParameter(paramName);\n    attributes.put(\"http.param.\" + paramName,value);\n  }\n  final Cookie[] cookies=request.getCookies();\n  if (cookies != null) {\n    for (    final Cookie cookie : cookies) {\n      final String name=cookie.getName();\n      final String cookiePrefix=\"http.cookie.\" + name + \".\";\n      attributes.put(cookiePrefix + \"value\",cookie.getValue());\n      attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n      attributes.put(cookiePrefix + \"path\",cookie.getPath());\n      attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n      attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n      attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n    }\n  }\n  final String queryString=request.getQueryString();\n  if (queryString != null) {\n    final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n    for (    final String keyValueString : params) {\n      final int indexOf=keyValueString.indexOf(\"=\");\n      if (indexOf < 0) {\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n      }\n else {\n        final String key=keyValueString.substring(0,indexOf);\n        final String value;\n        if (indexOf == keyValueString.length() - 1) {\n          value=\"\";\n        }\n else {\n          value=keyValueString.substring(indexOf + 1);\n        }\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 464,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4426,
                        "startLineNumber": 507,
                        "startColumnNumber": 8,
                        "endLineNumber": 579,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n  putAttribute(attributes,\"mime.type\",request.getContentType());\n  putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n  putAttribute(attributes,\"http.context.path\",request.getContextPath());\n  putAttribute(attributes,\"http.method\",request.getMethod());\n  putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n  putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n  if (request.getQueryString() != null) {\n    putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n  }\n  putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n  putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n  putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n  putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n  putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n  putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n  putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n  if (request.getDispatcherType() != null) {\n    putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n  }\n  putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n  putAttribute(attributes,\"http.locale\",request.getLocale());\n  putAttribute(attributes,\"http.server.name\",request.getServerName());\n  putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n  final Enumeration<String> paramEnumeration=request.getParameterNames();\n  while (paramEnumeration.hasMoreElements()) {\n    final String paramName=paramEnumeration.nextElement();\n    final String value=request.getParameter(paramName);\n    attributes.put(\"http.param.\" + paramName,value);\n  }\n  final Cookie[] cookies=request.getCookies();\n  if (cookies != null) {\n    for (    final Cookie cookie : cookies) {\n      final String name=cookie.getName();\n      final String cookiePrefix=\"http.cookie.\" + name + \".\";\n      attributes.put(cookiePrefix + \"value\",cookie.getValue());\n      attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n      attributes.put(cookiePrefix + \"path\",cookie.getPath());\n      attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n      attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n      attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n    }\n  }\n  final String queryString=request.getQueryString();\n  if (queryString != null) {\n    final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n    for (    final String keyValueString : params) {\n      final int indexOf=keyValueString.indexOf(\"=\");\n      if (indexOf < 0) {\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n      }\n else {\n        final String key=keyValueString.substring(0,indexOf);\n        final String value;\n        if (indexOf == keyValueString.length() - 1) {\n          value=\"\";\n        }\n else {\n          value=keyValueString.substring(indexOf + 1);\n        }\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n      }\n    }\n  }\n}\n catch (final UnsupportedEncodingException uee) {\n  throw new ProcessException(\"Invalid character encoding\",uee);\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 478,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8324,
                        "startLineNumber": 476,
                        "startColumnNumber": 110,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 956,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8444,
                        "startLineNumber": 475,
                        "startColumnNumber": 4,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void onTrigger(final ProcessContext context,final ProcessSession session) throws ProcessException {\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 974,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 78,
                    "startLineNumber": 521,
                    "startColumnNumber": 12,
                    "endLineNumber": 521,
                    "endColumnNumber": 90
                },
                "nodeContext": "putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 10,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.processors.standard.HttpServletRequest"
        },
        {
            "nodeContext": "request",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 522,
                "startColumnNumber": 57,
                "endLineNumber": 522,
                "endColumnNumber": 64
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 23,
                        "startLineNumber": 522,
                        "startColumnNumber": 57,
                        "endLineNumber": 522,
                        "endColumnNumber": 80
                    },
                    "nodeContext": "request.getRequestURL()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 34,
                        "startLineNumber": 522,
                        "startColumnNumber": 57,
                        "endLineNumber": 522,
                        "endColumnNumber": 91
                    },
                    "nodeContext": "request.getRequestURL().toString()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 80,
                        "startLineNumber": 522,
                        "startColumnNumber": 12,
                        "endLineNumber": 522,
                        "endColumnNumber": 92
                    },
                    "nodeContext": "putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 81,
                        "startLineNumber": 522,
                        "startColumnNumber": 12,
                        "endLineNumber": 522,
                        "endColumnNumber": 93
                    },
                    "nodeContext": "putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 10,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 4236,
                        "startLineNumber": 507,
                        "startColumnNumber": 12,
                        "endLineNumber": 577,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n  putAttribute(attributes,\"mime.type\",request.getContentType());\n  putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n  putAttribute(attributes,\"http.context.path\",request.getContextPath());\n  putAttribute(attributes,\"http.method\",request.getMethod());\n  putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n  putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n  if (request.getQueryString() != null) {\n    putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n  }\n  putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n  putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n  putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n  putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n  putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n  putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n  putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n  if (request.getDispatcherType() != null) {\n    putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n  }\n  putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n  putAttribute(attributes,\"http.locale\",request.getLocale());\n  putAttribute(attributes,\"http.server.name\",request.getServerName());\n  putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n  final Enumeration<String> paramEnumeration=request.getParameterNames();\n  while (paramEnumeration.hasMoreElements()) {\n    final String paramName=paramEnumeration.nextElement();\n    final String value=request.getParameter(paramName);\n    attributes.put(\"http.param.\" + paramName,value);\n  }\n  final Cookie[] cookies=request.getCookies();\n  if (cookies != null) {\n    for (    final Cookie cookie : cookies) {\n      final String name=cookie.getName();\n      final String cookiePrefix=\"http.cookie.\" + name + \".\";\n      attributes.put(cookiePrefix + \"value\",cookie.getValue());\n      attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n      attributes.put(cookiePrefix + \"path\",cookie.getPath());\n      attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n      attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n      attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n    }\n  }\n  final String queryString=request.getQueryString();\n  if (queryString != null) {\n    final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n    for (    final String keyValueString : params) {\n      final int indexOf=keyValueString.indexOf(\"=\");\n      if (indexOf < 0) {\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n      }\n else {\n        final String key=keyValueString.substring(0,indexOf);\n        final String value;\n        if (indexOf == keyValueString.length() - 1) {\n          value=\"\";\n        }\n else {\n          value=keyValueString.substring(indexOf + 1);\n        }\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 464,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4426,
                        "startLineNumber": 507,
                        "startColumnNumber": 8,
                        "endLineNumber": 579,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n  putAttribute(attributes,\"mime.type\",request.getContentType());\n  putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n  putAttribute(attributes,\"http.context.path\",request.getContextPath());\n  putAttribute(attributes,\"http.method\",request.getMethod());\n  putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n  putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n  if (request.getQueryString() != null) {\n    putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n  }\n  putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n  putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n  putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n  putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n  putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n  putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n  putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n  if (request.getDispatcherType() != null) {\n    putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n  }\n  putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n  putAttribute(attributes,\"http.locale\",request.getLocale());\n  putAttribute(attributes,\"http.server.name\",request.getServerName());\n  putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n  final Enumeration<String> paramEnumeration=request.getParameterNames();\n  while (paramEnumeration.hasMoreElements()) {\n    final String paramName=paramEnumeration.nextElement();\n    final String value=request.getParameter(paramName);\n    attributes.put(\"http.param.\" + paramName,value);\n  }\n  final Cookie[] cookies=request.getCookies();\n  if (cookies != null) {\n    for (    final Cookie cookie : cookies) {\n      final String name=cookie.getName();\n      final String cookiePrefix=\"http.cookie.\" + name + \".\";\n      attributes.put(cookiePrefix + \"value\",cookie.getValue());\n      attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n      attributes.put(cookiePrefix + \"path\",cookie.getPath());\n      attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n      attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n      attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n    }\n  }\n  final String queryString=request.getQueryString();\n  if (queryString != null) {\n    final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n    for (    final String keyValueString : params) {\n      final int indexOf=keyValueString.indexOf(\"=\");\n      if (indexOf < 0) {\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n      }\n else {\n        final String key=keyValueString.substring(0,indexOf);\n        final String value;\n        if (indexOf == keyValueString.length() - 1) {\n          value=\"\";\n        }\n else {\n          value=keyValueString.substring(indexOf + 1);\n        }\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n      }\n    }\n  }\n}\n catch (final UnsupportedEncodingException uee) {\n  throw new ProcessException(\"Invalid character encoding\",uee);\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 478,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8324,
                        "startLineNumber": 476,
                        "startColumnNumber": 110,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 956,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8444,
                        "startLineNumber": 475,
                        "startColumnNumber": 4,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void onTrigger(final ProcessContext context,final ProcessSession session) throws ProcessException {\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 974,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 81,
                    "startLineNumber": 522,
                    "startColumnNumber": 12,
                    "endLineNumber": 522,
                    "endColumnNumber": 93
                },
                "nodeContext": "putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 10,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.processors.standard.HttpServletRequest"
        },
        {
            "nodeContext": "request",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 523,
                "startColumnNumber": 55,
                "endLineNumber": 523,
                "endColumnNumber": 62
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 21,
                        "startLineNumber": 523,
                        "startColumnNumber": 55,
                        "endLineNumber": 523,
                        "endColumnNumber": 76
                    },
                    "nodeContext": "request.getAuthType()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 65,
                        "startLineNumber": 523,
                        "startColumnNumber": 12,
                        "endLineNumber": 523,
                        "endColumnNumber": 77
                    },
                    "nodeContext": "putAttribute(attributes,\"http.auth.type\",request.getAuthType())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 66,
                        "startLineNumber": 523,
                        "startColumnNumber": 12,
                        "endLineNumber": 523,
                        "endColumnNumber": 78
                    },
                    "nodeContext": "putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 4236,
                        "startLineNumber": 507,
                        "startColumnNumber": 12,
                        "endLineNumber": 577,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n  putAttribute(attributes,\"mime.type\",request.getContentType());\n  putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n  putAttribute(attributes,\"http.context.path\",request.getContextPath());\n  putAttribute(attributes,\"http.method\",request.getMethod());\n  putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n  putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n  if (request.getQueryString() != null) {\n    putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n  }\n  putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n  putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n  putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n  putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n  putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n  putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n  putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n  if (request.getDispatcherType() != null) {\n    putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n  }\n  putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n  putAttribute(attributes,\"http.locale\",request.getLocale());\n  putAttribute(attributes,\"http.server.name\",request.getServerName());\n  putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n  final Enumeration<String> paramEnumeration=request.getParameterNames();\n  while (paramEnumeration.hasMoreElements()) {\n    final String paramName=paramEnumeration.nextElement();\n    final String value=request.getParameter(paramName);\n    attributes.put(\"http.param.\" + paramName,value);\n  }\n  final Cookie[] cookies=request.getCookies();\n  if (cookies != null) {\n    for (    final Cookie cookie : cookies) {\n      final String name=cookie.getName();\n      final String cookiePrefix=\"http.cookie.\" + name + \".\";\n      attributes.put(cookiePrefix + \"value\",cookie.getValue());\n      attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n      attributes.put(cookiePrefix + \"path\",cookie.getPath());\n      attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n      attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n      attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n    }\n  }\n  final String queryString=request.getQueryString();\n  if (queryString != null) {\n    final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n    for (    final String keyValueString : params) {\n      final int indexOf=keyValueString.indexOf(\"=\");\n      if (indexOf < 0) {\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n      }\n else {\n        final String key=keyValueString.substring(0,indexOf);\n        final String value;\n        if (indexOf == keyValueString.length() - 1) {\n          value=\"\";\n        }\n else {\n          value=keyValueString.substring(indexOf + 1);\n        }\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 464,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4426,
                        "startLineNumber": 507,
                        "startColumnNumber": 8,
                        "endLineNumber": 579,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n  putAttribute(attributes,\"mime.type\",request.getContentType());\n  putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n  putAttribute(attributes,\"http.context.path\",request.getContextPath());\n  putAttribute(attributes,\"http.method\",request.getMethod());\n  putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n  putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n  if (request.getQueryString() != null) {\n    putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n  }\n  putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n  putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n  putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n  putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n  putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n  putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n  putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n  if (request.getDispatcherType() != null) {\n    putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n  }\n  putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n  putAttribute(attributes,\"http.locale\",request.getLocale());\n  putAttribute(attributes,\"http.server.name\",request.getServerName());\n  putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n  final Enumeration<String> paramEnumeration=request.getParameterNames();\n  while (paramEnumeration.hasMoreElements()) {\n    final String paramName=paramEnumeration.nextElement();\n    final String value=request.getParameter(paramName);\n    attributes.put(\"http.param.\" + paramName,value);\n  }\n  final Cookie[] cookies=request.getCookies();\n  if (cookies != null) {\n    for (    final Cookie cookie : cookies) {\n      final String name=cookie.getName();\n      final String cookiePrefix=\"http.cookie.\" + name + \".\";\n      attributes.put(cookiePrefix + \"value\",cookie.getValue());\n      attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n      attributes.put(cookiePrefix + \"path\",cookie.getPath());\n      attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n      attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n      attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n    }\n  }\n  final String queryString=request.getQueryString();\n  if (queryString != null) {\n    final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n    for (    final String keyValueString : params) {\n      final int indexOf=keyValueString.indexOf(\"=\");\n      if (indexOf < 0) {\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n      }\n else {\n        final String key=keyValueString.substring(0,indexOf);\n        final String value;\n        if (indexOf == keyValueString.length() - 1) {\n          value=\"\";\n        }\n else {\n          value=keyValueString.substring(indexOf + 1);\n        }\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n      }\n    }\n  }\n}\n catch (final UnsupportedEncodingException uee) {\n  throw new ProcessException(\"Invalid character encoding\",uee);\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 478,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8324,
                        "startLineNumber": 476,
                        "startColumnNumber": 110,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 956,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8444,
                        "startLineNumber": 475,
                        "startColumnNumber": 4,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void onTrigger(final ProcessContext context,final ProcessSession session) throws ProcessException {\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 974,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 66,
                    "startLineNumber": 523,
                    "startColumnNumber": 12,
                    "endLineNumber": 523,
                    "endColumnNumber": 78
                },
                "nodeContext": "putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.processors.standard.HttpServletRequest"
        },
        {
            "nodeContext": "request",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 525,
                "startColumnNumber": 66,
                "endLineNumber": 525,
                "endColumnNumber": 73
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 31,
                        "startLineNumber": 525,
                        "startColumnNumber": 66,
                        "endLineNumber": 525,
                        "endColumnNumber": 97
                    },
                    "nodeContext": "request.getRequestedSessionId()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 86,
                        "startLineNumber": 525,
                        "startColumnNumber": 12,
                        "endLineNumber": 525,
                        "endColumnNumber": 98
                    },
                    "nodeContext": "putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 87,
                        "startLineNumber": 525,
                        "startColumnNumber": 12,
                        "endLineNumber": 525,
                        "endColumnNumber": 99
                    },
                    "nodeContext": "putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 4236,
                        "startLineNumber": 507,
                        "startColumnNumber": 12,
                        "endLineNumber": 577,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n  putAttribute(attributes,\"mime.type\",request.getContentType());\n  putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n  putAttribute(attributes,\"http.context.path\",request.getContextPath());\n  putAttribute(attributes,\"http.method\",request.getMethod());\n  putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n  putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n  if (request.getQueryString() != null) {\n    putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n  }\n  putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n  putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n  putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n  putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n  putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n  putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n  putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n  if (request.getDispatcherType() != null) {\n    putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n  }\n  putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n  putAttribute(attributes,\"http.locale\",request.getLocale());\n  putAttribute(attributes,\"http.server.name\",request.getServerName());\n  putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n  final Enumeration<String> paramEnumeration=request.getParameterNames();\n  while (paramEnumeration.hasMoreElements()) {\n    final String paramName=paramEnumeration.nextElement();\n    final String value=request.getParameter(paramName);\n    attributes.put(\"http.param.\" + paramName,value);\n  }\n  final Cookie[] cookies=request.getCookies();\n  if (cookies != null) {\n    for (    final Cookie cookie : cookies) {\n      final String name=cookie.getName();\n      final String cookiePrefix=\"http.cookie.\" + name + \".\";\n      attributes.put(cookiePrefix + \"value\",cookie.getValue());\n      attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n      attributes.put(cookiePrefix + \"path\",cookie.getPath());\n      attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n      attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n      attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n    }\n  }\n  final String queryString=request.getQueryString();\n  if (queryString != null) {\n    final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n    for (    final String keyValueString : params) {\n      final int indexOf=keyValueString.indexOf(\"=\");\n      if (indexOf < 0) {\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n      }\n else {\n        final String key=keyValueString.substring(0,indexOf);\n        final String value;\n        if (indexOf == keyValueString.length() - 1) {\n          value=\"\";\n        }\n else {\n          value=keyValueString.substring(indexOf + 1);\n        }\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 464,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4426,
                        "startLineNumber": 507,
                        "startColumnNumber": 8,
                        "endLineNumber": 579,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n  putAttribute(attributes,\"mime.type\",request.getContentType());\n  putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n  putAttribute(attributes,\"http.context.path\",request.getContextPath());\n  putAttribute(attributes,\"http.method\",request.getMethod());\n  putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n  putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n  if (request.getQueryString() != null) {\n    putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n  }\n  putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n  putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n  putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n  putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n  putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n  putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n  putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n  if (request.getDispatcherType() != null) {\n    putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n  }\n  putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n  putAttribute(attributes,\"http.locale\",request.getLocale());\n  putAttribute(attributes,\"http.server.name\",request.getServerName());\n  putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n  final Enumeration<String> paramEnumeration=request.getParameterNames();\n  while (paramEnumeration.hasMoreElements()) {\n    final String paramName=paramEnumeration.nextElement();\n    final String value=request.getParameter(paramName);\n    attributes.put(\"http.param.\" + paramName,value);\n  }\n  final Cookie[] cookies=request.getCookies();\n  if (cookies != null) {\n    for (    final Cookie cookie : cookies) {\n      final String name=cookie.getName();\n      final String cookiePrefix=\"http.cookie.\" + name + \".\";\n      attributes.put(cookiePrefix + \"value\",cookie.getValue());\n      attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n      attributes.put(cookiePrefix + \"path\",cookie.getPath());\n      attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n      attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n      attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n    }\n  }\n  final String queryString=request.getQueryString();\n  if (queryString != null) {\n    final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n    for (    final String keyValueString : params) {\n      final int indexOf=keyValueString.indexOf(\"=\");\n      if (indexOf < 0) {\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n      }\n else {\n        final String key=keyValueString.substring(0,indexOf);\n        final String value;\n        if (indexOf == keyValueString.length() - 1) {\n          value=\"\";\n        }\n else {\n          value=keyValueString.substring(indexOf + 1);\n        }\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n      }\n    }\n  }\n}\n catch (final UnsupportedEncodingException uee) {\n  throw new ProcessException(\"Invalid character encoding\",uee);\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 478,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8324,
                        "startLineNumber": 476,
                        "startColumnNumber": 110,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 956,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8444,
                        "startLineNumber": 475,
                        "startColumnNumber": 4,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void onTrigger(final ProcessContext context,final ProcessSession session) throws ProcessException {\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 974,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 87,
                    "startLineNumber": 525,
                    "startColumnNumber": 12,
                    "endLineNumber": 525,
                    "endColumnNumber": 99
                },
                "nodeContext": "putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.processors.standard.HttpServletRequest"
        },
        {
            "nodeContext": "request",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 526,
                "startColumnNumber": 16,
                "endLineNumber": 526,
                "endColumnNumber": 23
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 27,
                        "startLineNumber": 526,
                        "startColumnNumber": 16,
                        "endLineNumber": 526,
                        "endColumnNumber": 43
                    },
                    "nodeContext": "request.getDispatcherType()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 35,
                        "startLineNumber": 526,
                        "startColumnNumber": 16,
                        "endLineNumber": 526,
                        "endColumnNumber": 51
                    },
                    "nodeContext": "request.getDispatcherType() != null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 158,
                        "startLineNumber": 526,
                        "startColumnNumber": 12,
                        "endLineNumber": 528,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (request.getDispatcherType() != null) {\n  putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 17,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 4236,
                        "startLineNumber": 507,
                        "startColumnNumber": 12,
                        "endLineNumber": 577,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n  putAttribute(attributes,\"mime.type\",request.getContentType());\n  putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n  putAttribute(attributes,\"http.context.path\",request.getContextPath());\n  putAttribute(attributes,\"http.method\",request.getMethod());\n  putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n  putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n  if (request.getQueryString() != null) {\n    putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n  }\n  putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n  putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n  putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n  putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n  putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n  putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n  putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n  if (request.getDispatcherType() != null) {\n    putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n  }\n  putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n  putAttribute(attributes,\"http.locale\",request.getLocale());\n  putAttribute(attributes,\"http.server.name\",request.getServerName());\n  putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n  final Enumeration<String> paramEnumeration=request.getParameterNames();\n  while (paramEnumeration.hasMoreElements()) {\n    final String paramName=paramEnumeration.nextElement();\n    final String value=request.getParameter(paramName);\n    attributes.put(\"http.param.\" + paramName,value);\n  }\n  final Cookie[] cookies=request.getCookies();\n  if (cookies != null) {\n    for (    final Cookie cookie : cookies) {\n      final String name=cookie.getName();\n      final String cookiePrefix=\"http.cookie.\" + name + \".\";\n      attributes.put(cookiePrefix + \"value\",cookie.getValue());\n      attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n      attributes.put(cookiePrefix + \"path\",cookie.getPath());\n      attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n      attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n      attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n    }\n  }\n  final String queryString=request.getQueryString();\n  if (queryString != null) {\n    final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n    for (    final String keyValueString : params) {\n      final int indexOf=keyValueString.indexOf(\"=\");\n      if (indexOf < 0) {\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n      }\n else {\n        final String key=keyValueString.substring(0,indexOf);\n        final String value;\n        if (indexOf == keyValueString.length() - 1) {\n          value=\"\";\n        }\n else {\n          value=keyValueString.substring(indexOf + 1);\n        }\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 464,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4426,
                        "startLineNumber": 507,
                        "startColumnNumber": 8,
                        "endLineNumber": 579,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n  putAttribute(attributes,\"mime.type\",request.getContentType());\n  putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n  putAttribute(attributes,\"http.context.path\",request.getContextPath());\n  putAttribute(attributes,\"http.method\",request.getMethod());\n  putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n  putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n  if (request.getQueryString() != null) {\n    putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n  }\n  putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n  putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n  putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n  putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n  putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n  putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n  putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n  if (request.getDispatcherType() != null) {\n    putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n  }\n  putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n  putAttribute(attributes,\"http.locale\",request.getLocale());\n  putAttribute(attributes,\"http.server.name\",request.getServerName());\n  putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n  final Enumeration<String> paramEnumeration=request.getParameterNames();\n  while (paramEnumeration.hasMoreElements()) {\n    final String paramName=paramEnumeration.nextElement();\n    final String value=request.getParameter(paramName);\n    attributes.put(\"http.param.\" + paramName,value);\n  }\n  final Cookie[] cookies=request.getCookies();\n  if (cookies != null) {\n    for (    final Cookie cookie : cookies) {\n      final String name=cookie.getName();\n      final String cookiePrefix=\"http.cookie.\" + name + \".\";\n      attributes.put(cookiePrefix + \"value\",cookie.getValue());\n      attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n      attributes.put(cookiePrefix + \"path\",cookie.getPath());\n      attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n      attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n      attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n    }\n  }\n  final String queryString=request.getQueryString();\n  if (queryString != null) {\n    final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n    for (    final String keyValueString : params) {\n      final int indexOf=keyValueString.indexOf(\"=\");\n      if (indexOf < 0) {\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n      }\n else {\n        final String key=keyValueString.substring(0,indexOf);\n        final String value;\n        if (indexOf == keyValueString.length() - 1) {\n          value=\"\";\n        }\n else {\n          value=keyValueString.substring(indexOf + 1);\n        }\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n      }\n    }\n  }\n}\n catch (final UnsupportedEncodingException uee) {\n  throw new ProcessException(\"Invalid character encoding\",uee);\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 478,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8324,
                        "startLineNumber": 476,
                        "startColumnNumber": 110,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 956,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8444,
                        "startLineNumber": 475,
                        "startColumnNumber": 4,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void onTrigger(final ProcessContext context,final ProcessSession session) throws ProcessException {\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 974,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 35,
                    "startLineNumber": 526,
                    "startColumnNumber": 16,
                    "endLineNumber": 526,
                    "endColumnNumber": 51
                },
                "nodeContext": "request.getDispatcherType() != null",
                "nodeType": "InfixExpression",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.processors.standard.HttpServletRequest"
        },
        {
            "nodeContext": "request",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 527,
                "startColumnNumber": 65,
                "endLineNumber": 527,
                "endColumnNumber": 72
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 27,
                        "startLineNumber": 527,
                        "startColumnNumber": 65,
                        "endLineNumber": 527,
                        "endColumnNumber": 92
                    },
                    "nodeContext": "request.getDispatcherType()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 34,
                        "startLineNumber": 527,
                        "startColumnNumber": 65,
                        "endLineNumber": 527,
                        "endColumnNumber": 99
                    },
                    "nodeContext": "request.getDispatcherType().name()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 84,
                        "startLineNumber": 527,
                        "startColumnNumber": 16,
                        "endLineNumber": 527,
                        "endColumnNumber": 100
                    },
                    "nodeContext": "putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 85,
                        "startLineNumber": 527,
                        "startColumnNumber": 16,
                        "endLineNumber": 527,
                        "endColumnNumber": 101
                    },
                    "nodeContext": "putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 10,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 117,
                        "startLineNumber": 526,
                        "startColumnNumber": 53,
                        "endLineNumber": 528,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 11,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 158,
                        "startLineNumber": 526,
                        "startColumnNumber": 12,
                        "endLineNumber": 528,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (request.getDispatcherType() != null) {\n  putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 17,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 4236,
                        "startLineNumber": 507,
                        "startColumnNumber": 12,
                        "endLineNumber": 577,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n  putAttribute(attributes,\"mime.type\",request.getContentType());\n  putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n  putAttribute(attributes,\"http.context.path\",request.getContextPath());\n  putAttribute(attributes,\"http.method\",request.getMethod());\n  putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n  putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n  if (request.getQueryString() != null) {\n    putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n  }\n  putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n  putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n  putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n  putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n  putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n  putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n  putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n  if (request.getDispatcherType() != null) {\n    putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n  }\n  putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n  putAttribute(attributes,\"http.locale\",request.getLocale());\n  putAttribute(attributes,\"http.server.name\",request.getServerName());\n  putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n  final Enumeration<String> paramEnumeration=request.getParameterNames();\n  while (paramEnumeration.hasMoreElements()) {\n    final String paramName=paramEnumeration.nextElement();\n    final String value=request.getParameter(paramName);\n    attributes.put(\"http.param.\" + paramName,value);\n  }\n  final Cookie[] cookies=request.getCookies();\n  if (cookies != null) {\n    for (    final Cookie cookie : cookies) {\n      final String name=cookie.getName();\n      final String cookiePrefix=\"http.cookie.\" + name + \".\";\n      attributes.put(cookiePrefix + \"value\",cookie.getValue());\n      attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n      attributes.put(cookiePrefix + \"path\",cookie.getPath());\n      attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n      attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n      attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n    }\n  }\n  final String queryString=request.getQueryString();\n  if (queryString != null) {\n    final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n    for (    final String keyValueString : params) {\n      final int indexOf=keyValueString.indexOf(\"=\");\n      if (indexOf < 0) {\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n      }\n else {\n        final String key=keyValueString.substring(0,indexOf);\n        final String value;\n        if (indexOf == keyValueString.length() - 1) {\n          value=\"\";\n        }\n else {\n          value=keyValueString.substring(indexOf + 1);\n        }\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 464,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4426,
                        "startLineNumber": 507,
                        "startColumnNumber": 8,
                        "endLineNumber": 579,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n  putAttribute(attributes,\"mime.type\",request.getContentType());\n  putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n  putAttribute(attributes,\"http.context.path\",request.getContextPath());\n  putAttribute(attributes,\"http.method\",request.getMethod());\n  putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n  putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n  if (request.getQueryString() != null) {\n    putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n  }\n  putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n  putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n  putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n  putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n  putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n  putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n  putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n  if (request.getDispatcherType() != null) {\n    putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n  }\n  putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n  putAttribute(attributes,\"http.locale\",request.getLocale());\n  putAttribute(attributes,\"http.server.name\",request.getServerName());\n  putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n  final Enumeration<String> paramEnumeration=request.getParameterNames();\n  while (paramEnumeration.hasMoreElements()) {\n    final String paramName=paramEnumeration.nextElement();\n    final String value=request.getParameter(paramName);\n    attributes.put(\"http.param.\" + paramName,value);\n  }\n  final Cookie[] cookies=request.getCookies();\n  if (cookies != null) {\n    for (    final Cookie cookie : cookies) {\n      final String name=cookie.getName();\n      final String cookiePrefix=\"http.cookie.\" + name + \".\";\n      attributes.put(cookiePrefix + \"value\",cookie.getValue());\n      attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n      attributes.put(cookiePrefix + \"path\",cookie.getPath());\n      attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n      attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n      attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n    }\n  }\n  final String queryString=request.getQueryString();\n  if (queryString != null) {\n    final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n    for (    final String keyValueString : params) {\n      final int indexOf=keyValueString.indexOf(\"=\");\n      if (indexOf < 0) {\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n      }\n else {\n        final String key=keyValueString.substring(0,indexOf);\n        final String value;\n        if (indexOf == keyValueString.length() - 1) {\n          value=\"\";\n        }\n else {\n          value=keyValueString.substring(indexOf + 1);\n        }\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n      }\n    }\n  }\n}\n catch (final UnsupportedEncodingException uee) {\n  throw new ProcessException(\"Invalid character encoding\",uee);\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 478,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8324,
                        "startLineNumber": 476,
                        "startColumnNumber": 110,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 956,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8444,
                        "startLineNumber": 475,
                        "startColumnNumber": 4,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void onTrigger(final ProcessContext context,final ProcessSession session) throws ProcessException {\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 974,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 85,
                    "startLineNumber": 527,
                    "startColumnNumber": 16,
                    "endLineNumber": 527,
                    "endColumnNumber": 101
                },
                "nodeContext": "putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 10,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.processors.standard.HttpServletRequest"
        },
        {
            "nodeContext": "request",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 529,
                "startColumnNumber": 64,
                "endLineNumber": 529,
                "endColumnNumber": 71
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 30,
                        "startLineNumber": 529,
                        "startColumnNumber": 64,
                        "endLineNumber": 529,
                        "endColumnNumber": 94
                    },
                    "nodeContext": "request.getCharacterEncoding()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 83,
                        "startLineNumber": 529,
                        "startColumnNumber": 12,
                        "endLineNumber": 529,
                        "endColumnNumber": 95
                    },
                    "nodeContext": "putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 84,
                        "startLineNumber": 529,
                        "startColumnNumber": 12,
                        "endLineNumber": 529,
                        "endColumnNumber": 96
                    },
                    "nodeContext": "putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 4236,
                        "startLineNumber": 507,
                        "startColumnNumber": 12,
                        "endLineNumber": 577,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n  putAttribute(attributes,\"mime.type\",request.getContentType());\n  putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n  putAttribute(attributes,\"http.context.path\",request.getContextPath());\n  putAttribute(attributes,\"http.method\",request.getMethod());\n  putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n  putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n  if (request.getQueryString() != null) {\n    putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n  }\n  putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n  putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n  putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n  putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n  putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n  putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n  putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n  if (request.getDispatcherType() != null) {\n    putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n  }\n  putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n  putAttribute(attributes,\"http.locale\",request.getLocale());\n  putAttribute(attributes,\"http.server.name\",request.getServerName());\n  putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n  final Enumeration<String> paramEnumeration=request.getParameterNames();\n  while (paramEnumeration.hasMoreElements()) {\n    final String paramName=paramEnumeration.nextElement();\n    final String value=request.getParameter(paramName);\n    attributes.put(\"http.param.\" + paramName,value);\n  }\n  final Cookie[] cookies=request.getCookies();\n  if (cookies != null) {\n    for (    final Cookie cookie : cookies) {\n      final String name=cookie.getName();\n      final String cookiePrefix=\"http.cookie.\" + name + \".\";\n      attributes.put(cookiePrefix + \"value\",cookie.getValue());\n      attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n      attributes.put(cookiePrefix + \"path\",cookie.getPath());\n      attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n      attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n      attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n    }\n  }\n  final String queryString=request.getQueryString();\n  if (queryString != null) {\n    final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n    for (    final String keyValueString : params) {\n      final int indexOf=keyValueString.indexOf(\"=\");\n      if (indexOf < 0) {\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n      }\n else {\n        final String key=keyValueString.substring(0,indexOf);\n        final String value;\n        if (indexOf == keyValueString.length() - 1) {\n          value=\"\";\n        }\n else {\n          value=keyValueString.substring(indexOf + 1);\n        }\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 464,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4426,
                        "startLineNumber": 507,
                        "startColumnNumber": 8,
                        "endLineNumber": 579,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n  putAttribute(attributes,\"mime.type\",request.getContentType());\n  putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n  putAttribute(attributes,\"http.context.path\",request.getContextPath());\n  putAttribute(attributes,\"http.method\",request.getMethod());\n  putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n  putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n  if (request.getQueryString() != null) {\n    putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n  }\n  putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n  putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n  putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n  putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n  putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n  putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n  putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n  if (request.getDispatcherType() != null) {\n    putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n  }\n  putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n  putAttribute(attributes,\"http.locale\",request.getLocale());\n  putAttribute(attributes,\"http.server.name\",request.getServerName());\n  putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n  final Enumeration<String> paramEnumeration=request.getParameterNames();\n  while (paramEnumeration.hasMoreElements()) {\n    final String paramName=paramEnumeration.nextElement();\n    final String value=request.getParameter(paramName);\n    attributes.put(\"http.param.\" + paramName,value);\n  }\n  final Cookie[] cookies=request.getCookies();\n  if (cookies != null) {\n    for (    final Cookie cookie : cookies) {\n      final String name=cookie.getName();\n      final String cookiePrefix=\"http.cookie.\" + name + \".\";\n      attributes.put(cookiePrefix + \"value\",cookie.getValue());\n      attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n      attributes.put(cookiePrefix + \"path\",cookie.getPath());\n      attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n      attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n      attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n    }\n  }\n  final String queryString=request.getQueryString();\n  if (queryString != null) {\n    final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n    for (    final String keyValueString : params) {\n      final int indexOf=keyValueString.indexOf(\"=\");\n      if (indexOf < 0) {\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n      }\n else {\n        final String key=keyValueString.substring(0,indexOf);\n        final String value;\n        if (indexOf == keyValueString.length() - 1) {\n          value=\"\";\n        }\n else {\n          value=keyValueString.substring(indexOf + 1);\n        }\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n      }\n    }\n  }\n}\n catch (final UnsupportedEncodingException uee) {\n  throw new ProcessException(\"Invalid character encoding\",uee);\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 478,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8324,
                        "startLineNumber": 476,
                        "startColumnNumber": 110,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 956,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8444,
                        "startLineNumber": 475,
                        "startColumnNumber": 4,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void onTrigger(final ProcessContext context,final ProcessSession session) throws ProcessException {\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 974,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 84,
                    "startLineNumber": 529,
                    "startColumnNumber": 12,
                    "endLineNumber": 529,
                    "endColumnNumber": 96
                },
                "nodeContext": "putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.processors.standard.HttpServletRequest"
        },
        {
            "nodeContext": "request",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 530,
                "startColumnNumber": 52,
                "endLineNumber": 530,
                "endColumnNumber": 59
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 19,
                        "startLineNumber": 530,
                        "startColumnNumber": 52,
                        "endLineNumber": 530,
                        "endColumnNumber": 71
                    },
                    "nodeContext": "request.getLocale()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 60,
                        "startLineNumber": 530,
                        "startColumnNumber": 12,
                        "endLineNumber": 530,
                        "endColumnNumber": 72
                    },
                    "nodeContext": "putAttribute(attributes,\"http.locale\",request.getLocale())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 61,
                        "startLineNumber": 530,
                        "startColumnNumber": 12,
                        "endLineNumber": 530,
                        "endColumnNumber": 73
                    },
                    "nodeContext": "putAttribute(attributes,\"http.locale\",request.getLocale());\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 4236,
                        "startLineNumber": 507,
                        "startColumnNumber": 12,
                        "endLineNumber": 577,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n  putAttribute(attributes,\"mime.type\",request.getContentType());\n  putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n  putAttribute(attributes,\"http.context.path\",request.getContextPath());\n  putAttribute(attributes,\"http.method\",request.getMethod());\n  putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n  putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n  if (request.getQueryString() != null) {\n    putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n  }\n  putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n  putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n  putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n  putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n  putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n  putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n  putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n  if (request.getDispatcherType() != null) {\n    putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n  }\n  putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n  putAttribute(attributes,\"http.locale\",request.getLocale());\n  putAttribute(attributes,\"http.server.name\",request.getServerName());\n  putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n  final Enumeration<String> paramEnumeration=request.getParameterNames();\n  while (paramEnumeration.hasMoreElements()) {\n    final String paramName=paramEnumeration.nextElement();\n    final String value=request.getParameter(paramName);\n    attributes.put(\"http.param.\" + paramName,value);\n  }\n  final Cookie[] cookies=request.getCookies();\n  if (cookies != null) {\n    for (    final Cookie cookie : cookies) {\n      final String name=cookie.getName();\n      final String cookiePrefix=\"http.cookie.\" + name + \".\";\n      attributes.put(cookiePrefix + \"value\",cookie.getValue());\n      attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n      attributes.put(cookiePrefix + \"path\",cookie.getPath());\n      attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n      attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n      attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n    }\n  }\n  final String queryString=request.getQueryString();\n  if (queryString != null) {\n    final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n    for (    final String keyValueString : params) {\n      final int indexOf=keyValueString.indexOf(\"=\");\n      if (indexOf < 0) {\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n      }\n else {\n        final String key=keyValueString.substring(0,indexOf);\n        final String value;\n        if (indexOf == keyValueString.length() - 1) {\n          value=\"\";\n        }\n else {\n          value=keyValueString.substring(indexOf + 1);\n        }\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 464,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4426,
                        "startLineNumber": 507,
                        "startColumnNumber": 8,
                        "endLineNumber": 579,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n  putAttribute(attributes,\"mime.type\",request.getContentType());\n  putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n  putAttribute(attributes,\"http.context.path\",request.getContextPath());\n  putAttribute(attributes,\"http.method\",request.getMethod());\n  putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n  putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n  if (request.getQueryString() != null) {\n    putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n  }\n  putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n  putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n  putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n  putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n  putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n  putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n  putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n  if (request.getDispatcherType() != null) {\n    putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n  }\n  putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n  putAttribute(attributes,\"http.locale\",request.getLocale());\n  putAttribute(attributes,\"http.server.name\",request.getServerName());\n  putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n  final Enumeration<String> paramEnumeration=request.getParameterNames();\n  while (paramEnumeration.hasMoreElements()) {\n    final String paramName=paramEnumeration.nextElement();\n    final String value=request.getParameter(paramName);\n    attributes.put(\"http.param.\" + paramName,value);\n  }\n  final Cookie[] cookies=request.getCookies();\n  if (cookies != null) {\n    for (    final Cookie cookie : cookies) {\n      final String name=cookie.getName();\n      final String cookiePrefix=\"http.cookie.\" + name + \".\";\n      attributes.put(cookiePrefix + \"value\",cookie.getValue());\n      attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n      attributes.put(cookiePrefix + \"path\",cookie.getPath());\n      attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n      attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n      attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n    }\n  }\n  final String queryString=request.getQueryString();\n  if (queryString != null) {\n    final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n    for (    final String keyValueString : params) {\n      final int indexOf=keyValueString.indexOf(\"=\");\n      if (indexOf < 0) {\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n      }\n else {\n        final String key=keyValueString.substring(0,indexOf);\n        final String value;\n        if (indexOf == keyValueString.length() - 1) {\n          value=\"\";\n        }\n else {\n          value=keyValueString.substring(indexOf + 1);\n        }\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n      }\n    }\n  }\n}\n catch (final UnsupportedEncodingException uee) {\n  throw new ProcessException(\"Invalid character encoding\",uee);\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 478,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8324,
                        "startLineNumber": 476,
                        "startColumnNumber": 110,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 956,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8444,
                        "startLineNumber": 475,
                        "startColumnNumber": 4,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void onTrigger(final ProcessContext context,final ProcessSession session) throws ProcessException {\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 974,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 61,
                    "startLineNumber": 530,
                    "startColumnNumber": 12,
                    "endLineNumber": 530,
                    "endColumnNumber": 73
                },
                "nodeContext": "putAttribute(attributes,\"http.locale\",request.getLocale());\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.processors.standard.HttpServletRequest"
        },
        {
            "nodeContext": "request",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 531,
                "startColumnNumber": 57,
                "endLineNumber": 531,
                "endColumnNumber": 64
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 23,
                        "startLineNumber": 531,
                        "startColumnNumber": 57,
                        "endLineNumber": 531,
                        "endColumnNumber": 80
                    },
                    "nodeContext": "request.getServerName()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 69,
                        "startLineNumber": 531,
                        "startColumnNumber": 12,
                        "endLineNumber": 531,
                        "endColumnNumber": 81
                    },
                    "nodeContext": "putAttribute(attributes,\"http.server.name\",request.getServerName())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 70,
                        "startLineNumber": 531,
                        "startColumnNumber": 12,
                        "endLineNumber": 531,
                        "endColumnNumber": 82
                    },
                    "nodeContext": "putAttribute(attributes,\"http.server.name\",request.getServerName());\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 4236,
                        "startLineNumber": 507,
                        "startColumnNumber": 12,
                        "endLineNumber": 577,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n  putAttribute(attributes,\"mime.type\",request.getContentType());\n  putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n  putAttribute(attributes,\"http.context.path\",request.getContextPath());\n  putAttribute(attributes,\"http.method\",request.getMethod());\n  putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n  putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n  if (request.getQueryString() != null) {\n    putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n  }\n  putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n  putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n  putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n  putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n  putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n  putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n  putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n  if (request.getDispatcherType() != null) {\n    putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n  }\n  putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n  putAttribute(attributes,\"http.locale\",request.getLocale());\n  putAttribute(attributes,\"http.server.name\",request.getServerName());\n  putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n  final Enumeration<String> paramEnumeration=request.getParameterNames();\n  while (paramEnumeration.hasMoreElements()) {\n    final String paramName=paramEnumeration.nextElement();\n    final String value=request.getParameter(paramName);\n    attributes.put(\"http.param.\" + paramName,value);\n  }\n  final Cookie[] cookies=request.getCookies();\n  if (cookies != null) {\n    for (    final Cookie cookie : cookies) {\n      final String name=cookie.getName();\n      final String cookiePrefix=\"http.cookie.\" + name + \".\";\n      attributes.put(cookiePrefix + \"value\",cookie.getValue());\n      attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n      attributes.put(cookiePrefix + \"path\",cookie.getPath());\n      attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n      attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n      attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n    }\n  }\n  final String queryString=request.getQueryString();\n  if (queryString != null) {\n    final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n    for (    final String keyValueString : params) {\n      final int indexOf=keyValueString.indexOf(\"=\");\n      if (indexOf < 0) {\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n      }\n else {\n        final String key=keyValueString.substring(0,indexOf);\n        final String value;\n        if (indexOf == keyValueString.length() - 1) {\n          value=\"\";\n        }\n else {\n          value=keyValueString.substring(indexOf + 1);\n        }\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 464,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4426,
                        "startLineNumber": 507,
                        "startColumnNumber": 8,
                        "endLineNumber": 579,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n  putAttribute(attributes,\"mime.type\",request.getContentType());\n  putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n  putAttribute(attributes,\"http.context.path\",request.getContextPath());\n  putAttribute(attributes,\"http.method\",request.getMethod());\n  putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n  putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n  if (request.getQueryString() != null) {\n    putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n  }\n  putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n  putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n  putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n  putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n  putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n  putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n  putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n  if (request.getDispatcherType() != null) {\n    putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n  }\n  putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n  putAttribute(attributes,\"http.locale\",request.getLocale());\n  putAttribute(attributes,\"http.server.name\",request.getServerName());\n  putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n  final Enumeration<String> paramEnumeration=request.getParameterNames();\n  while (paramEnumeration.hasMoreElements()) {\n    final String paramName=paramEnumeration.nextElement();\n    final String value=request.getParameter(paramName);\n    attributes.put(\"http.param.\" + paramName,value);\n  }\n  final Cookie[] cookies=request.getCookies();\n  if (cookies != null) {\n    for (    final Cookie cookie : cookies) {\n      final String name=cookie.getName();\n      final String cookiePrefix=\"http.cookie.\" + name + \".\";\n      attributes.put(cookiePrefix + \"value\",cookie.getValue());\n      attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n      attributes.put(cookiePrefix + \"path\",cookie.getPath());\n      attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n      attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n      attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n    }\n  }\n  final String queryString=request.getQueryString();\n  if (queryString != null) {\n    final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n    for (    final String keyValueString : params) {\n      final int indexOf=keyValueString.indexOf(\"=\");\n      if (indexOf < 0) {\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n      }\n else {\n        final String key=keyValueString.substring(0,indexOf);\n        final String value;\n        if (indexOf == keyValueString.length() - 1) {\n          value=\"\";\n        }\n else {\n          value=keyValueString.substring(indexOf + 1);\n        }\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n      }\n    }\n  }\n}\n catch (final UnsupportedEncodingException uee) {\n  throw new ProcessException(\"Invalid character encoding\",uee);\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 478,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8324,
                        "startLineNumber": 476,
                        "startColumnNumber": 110,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 956,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8444,
                        "startLineNumber": 475,
                        "startColumnNumber": 4,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void onTrigger(final ProcessContext context,final ProcessSession session) throws ProcessException {\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 974,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 70,
                    "startLineNumber": 531,
                    "startColumnNumber": 12,
                    "endLineNumber": 531,
                    "endColumnNumber": 82
                },
                "nodeContext": "putAttribute(attributes,\"http.server.name\",request.getServerName());\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.processors.standard.HttpServletRequest"
        },
        {
            "nodeContext": "request",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 532,
                "startColumnNumber": 58,
                "endLineNumber": 532,
                "endColumnNumber": 65
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 23,
                        "startLineNumber": 532,
                        "startColumnNumber": 58,
                        "endLineNumber": 532,
                        "endColumnNumber": 81
                    },
                    "nodeContext": "request.getServerPort()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 70,
                        "startLineNumber": 532,
                        "startColumnNumber": 12,
                        "endLineNumber": 532,
                        "endColumnNumber": 82
                    },
                    "nodeContext": "putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 9,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 71,
                        "startLineNumber": 532,
                        "startColumnNumber": 12,
                        "endLineNumber": 532,
                        "endColumnNumber": 83
                    },
                    "nodeContext": "putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 10,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 4236,
                        "startLineNumber": 507,
                        "startColumnNumber": 12,
                        "endLineNumber": 577,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n  putAttribute(attributes,\"mime.type\",request.getContentType());\n  putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n  putAttribute(attributes,\"http.context.path\",request.getContextPath());\n  putAttribute(attributes,\"http.method\",request.getMethod());\n  putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n  putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n  if (request.getQueryString() != null) {\n    putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n  }\n  putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n  putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n  putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n  putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n  putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n  putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n  putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n  if (request.getDispatcherType() != null) {\n    putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n  }\n  putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n  putAttribute(attributes,\"http.locale\",request.getLocale());\n  putAttribute(attributes,\"http.server.name\",request.getServerName());\n  putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n  final Enumeration<String> paramEnumeration=request.getParameterNames();\n  while (paramEnumeration.hasMoreElements()) {\n    final String paramName=paramEnumeration.nextElement();\n    final String value=request.getParameter(paramName);\n    attributes.put(\"http.param.\" + paramName,value);\n  }\n  final Cookie[] cookies=request.getCookies();\n  if (cookies != null) {\n    for (    final Cookie cookie : cookies) {\n      final String name=cookie.getName();\n      final String cookiePrefix=\"http.cookie.\" + name + \".\";\n      attributes.put(cookiePrefix + \"value\",cookie.getValue());\n      attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n      attributes.put(cookiePrefix + \"path\",cookie.getPath());\n      attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n      attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n      attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n    }\n  }\n  final String queryString=request.getQueryString();\n  if (queryString != null) {\n    final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n    for (    final String keyValueString : params) {\n      final int indexOf=keyValueString.indexOf(\"=\");\n      if (indexOf < 0) {\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n      }\n else {\n        final String key=keyValueString.substring(0,indexOf);\n        final String value;\n        if (indexOf == keyValueString.length() - 1) {\n          value=\"\";\n        }\n else {\n          value=keyValueString.substring(indexOf + 1);\n        }\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 464,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4426,
                        "startLineNumber": 507,
                        "startColumnNumber": 8,
                        "endLineNumber": 579,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n  putAttribute(attributes,\"mime.type\",request.getContentType());\n  putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n  putAttribute(attributes,\"http.context.path\",request.getContextPath());\n  putAttribute(attributes,\"http.method\",request.getMethod());\n  putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n  putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n  if (request.getQueryString() != null) {\n    putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n  }\n  putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n  putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n  putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n  putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n  putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n  putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n  putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n  if (request.getDispatcherType() != null) {\n    putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n  }\n  putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n  putAttribute(attributes,\"http.locale\",request.getLocale());\n  putAttribute(attributes,\"http.server.name\",request.getServerName());\n  putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n  final Enumeration<String> paramEnumeration=request.getParameterNames();\n  while (paramEnumeration.hasMoreElements()) {\n    final String paramName=paramEnumeration.nextElement();\n    final String value=request.getParameter(paramName);\n    attributes.put(\"http.param.\" + paramName,value);\n  }\n  final Cookie[] cookies=request.getCookies();\n  if (cookies != null) {\n    for (    final Cookie cookie : cookies) {\n      final String name=cookie.getName();\n      final String cookiePrefix=\"http.cookie.\" + name + \".\";\n      attributes.put(cookiePrefix + \"value\",cookie.getValue());\n      attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n      attributes.put(cookiePrefix + \"path\",cookie.getPath());\n      attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n      attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n      attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n    }\n  }\n  final String queryString=request.getQueryString();\n  if (queryString != null) {\n    final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n    for (    final String keyValueString : params) {\n      final int indexOf=keyValueString.indexOf(\"=\");\n      if (indexOf < 0) {\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n      }\n else {\n        final String key=keyValueString.substring(0,indexOf);\n        final String value;\n        if (indexOf == keyValueString.length() - 1) {\n          value=\"\";\n        }\n else {\n          value=keyValueString.substring(indexOf + 1);\n        }\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n      }\n    }\n  }\n}\n catch (final UnsupportedEncodingException uee) {\n  throw new ProcessException(\"Invalid character encoding\",uee);\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 478,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8324,
                        "startLineNumber": 476,
                        "startColumnNumber": 110,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 956,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8444,
                        "startLineNumber": 475,
                        "startColumnNumber": 4,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void onTrigger(final ProcessContext context,final ProcessSession session) throws ProcessException {\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 974,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 71,
                    "startLineNumber": 532,
                    "startColumnNumber": 12,
                    "endLineNumber": 532,
                    "endColumnNumber": 83
                },
                "nodeContext": "putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 10,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.processors.standard.HttpServletRequest"
        },
        {
            "nodeContext": "request",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 534,
                "startColumnNumber": 57,
                "endLineNumber": 534,
                "endColumnNumber": 64
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 27,
                        "startLineNumber": 534,
                        "startColumnNumber": 57,
                        "endLineNumber": 534,
                        "endColumnNumber": 84
                    },
                    "nodeContext": "request.getParameterNames()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 46,
                        "startLineNumber": 534,
                        "startColumnNumber": 38,
                        "endLineNumber": 534,
                        "endColumnNumber": 84
                    },
                    "nodeContext": "paramEnumeration=request.getParameterNames()",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 73,
                        "startLineNumber": 534,
                        "startColumnNumber": 12,
                        "endLineNumber": 534,
                        "endColumnNumber": 85
                    },
                    "nodeContext": "final Enumeration<String> paramEnumeration=request.getParameterNames();\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 12,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 4236,
                        "startLineNumber": 507,
                        "startColumnNumber": 12,
                        "endLineNumber": 577,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n  putAttribute(attributes,\"mime.type\",request.getContentType());\n  putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n  putAttribute(attributes,\"http.context.path\",request.getContextPath());\n  putAttribute(attributes,\"http.method\",request.getMethod());\n  putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n  putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n  if (request.getQueryString() != null) {\n    putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n  }\n  putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n  putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n  putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n  putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n  putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n  putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n  putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n  if (request.getDispatcherType() != null) {\n    putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n  }\n  putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n  putAttribute(attributes,\"http.locale\",request.getLocale());\n  putAttribute(attributes,\"http.server.name\",request.getServerName());\n  putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n  final Enumeration<String> paramEnumeration=request.getParameterNames();\n  while (paramEnumeration.hasMoreElements()) {\n    final String paramName=paramEnumeration.nextElement();\n    final String value=request.getParameter(paramName);\n    attributes.put(\"http.param.\" + paramName,value);\n  }\n  final Cookie[] cookies=request.getCookies();\n  if (cookies != null) {\n    for (    final Cookie cookie : cookies) {\n      final String name=cookie.getName();\n      final String cookiePrefix=\"http.cookie.\" + name + \".\";\n      attributes.put(cookiePrefix + \"value\",cookie.getValue());\n      attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n      attributes.put(cookiePrefix + \"path\",cookie.getPath());\n      attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n      attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n      attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n    }\n  }\n  final String queryString=request.getQueryString();\n  if (queryString != null) {\n    final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n    for (    final String keyValueString : params) {\n      final int indexOf=keyValueString.indexOf(\"=\");\n      if (indexOf < 0) {\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n      }\n else {\n        final String key=keyValueString.substring(0,indexOf);\n        final String value;\n        if (indexOf == keyValueString.length() - 1) {\n          value=\"\";\n        }\n else {\n          value=keyValueString.substring(indexOf + 1);\n        }\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 464,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4426,
                        "startLineNumber": 507,
                        "startColumnNumber": 8,
                        "endLineNumber": 579,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n  putAttribute(attributes,\"mime.type\",request.getContentType());\n  putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n  putAttribute(attributes,\"http.context.path\",request.getContextPath());\n  putAttribute(attributes,\"http.method\",request.getMethod());\n  putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n  putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n  if (request.getQueryString() != null) {\n    putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n  }\n  putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n  putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n  putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n  putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n  putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n  putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n  putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n  if (request.getDispatcherType() != null) {\n    putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n  }\n  putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n  putAttribute(attributes,\"http.locale\",request.getLocale());\n  putAttribute(attributes,\"http.server.name\",request.getServerName());\n  putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n  final Enumeration<String> paramEnumeration=request.getParameterNames();\n  while (paramEnumeration.hasMoreElements()) {\n    final String paramName=paramEnumeration.nextElement();\n    final String value=request.getParameter(paramName);\n    attributes.put(\"http.param.\" + paramName,value);\n  }\n  final Cookie[] cookies=request.getCookies();\n  if (cookies != null) {\n    for (    final Cookie cookie : cookies) {\n      final String name=cookie.getName();\n      final String cookiePrefix=\"http.cookie.\" + name + \".\";\n      attributes.put(cookiePrefix + \"value\",cookie.getValue());\n      attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n      attributes.put(cookiePrefix + \"path\",cookie.getPath());\n      attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n      attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n      attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n    }\n  }\n  final String queryString=request.getQueryString();\n  if (queryString != null) {\n    final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n    for (    final String keyValueString : params) {\n      final int indexOf=keyValueString.indexOf(\"=\");\n      if (indexOf < 0) {\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n      }\n else {\n        final String key=keyValueString.substring(0,indexOf);\n        final String value;\n        if (indexOf == keyValueString.length() - 1) {\n          value=\"\";\n        }\n else {\n          value=keyValueString.substring(indexOf + 1);\n        }\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n      }\n    }\n  }\n}\n catch (final UnsupportedEncodingException uee) {\n  throw new ProcessException(\"Invalid character encoding\",uee);\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 478,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8324,
                        "startLineNumber": 476,
                        "startColumnNumber": 110,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 956,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8444,
                        "startLineNumber": 475,
                        "startColumnNumber": 4,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void onTrigger(final ProcessContext context,final ProcessSession session) throws ProcessException {\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 974,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 73,
                    "startLineNumber": 534,
                    "startColumnNumber": 12,
                    "endLineNumber": 534,
                    "endColumnNumber": 85
                },
                "nodeContext": "final Enumeration<String> paramEnumeration=request.getParameterNames();\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 12,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.processors.standard.HttpServletRequest"
        },
        {
            "nodeContext": "request",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 537,
                "startColumnNumber": 37,
                "endLineNumber": 537,
                "endColumnNumber": 44
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 31,
                        "startLineNumber": 537,
                        "startColumnNumber": 37,
                        "endLineNumber": 537,
                        "endColumnNumber": 68
                    },
                    "nodeContext": "request.getParameter(paramName)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 39,
                        "startLineNumber": 537,
                        "startColumnNumber": 29,
                        "endLineNumber": 537,
                        "endColumnNumber": 68
                    },
                    "nodeContext": "value=request.getParameter(paramName)",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 53,
                        "startLineNumber": 537,
                        "startColumnNumber": 16,
                        "endLineNumber": 537,
                        "endColumnNumber": 69
                    },
                    "nodeContext": "final String value=request.getParameter(paramName);\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 10,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 224,
                        "startLineNumber": 535,
                        "startColumnNumber": 55,
                        "endLineNumber": 539,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  final String paramName=paramEnumeration.nextElement();\n  final String value=request.getParameter(paramName);\n  attributes.put(\"http.param.\" + paramName,value);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 28,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 267,
                        "startLineNumber": 535,
                        "startColumnNumber": 12,
                        "endLineNumber": 539,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "while (paramEnumeration.hasMoreElements()) {\n  final String paramName=paramEnumeration.nextElement();\n  final String value=request.getParameter(paramName);\n  attributes.put(\"http.param.\" + paramName,value);\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 32,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 4236,
                        "startLineNumber": 507,
                        "startColumnNumber": 12,
                        "endLineNumber": 577,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n  putAttribute(attributes,\"mime.type\",request.getContentType());\n  putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n  putAttribute(attributes,\"http.context.path\",request.getContextPath());\n  putAttribute(attributes,\"http.method\",request.getMethod());\n  putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n  putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n  if (request.getQueryString() != null) {\n    putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n  }\n  putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n  putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n  putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n  putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n  putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n  putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n  putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n  if (request.getDispatcherType() != null) {\n    putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n  }\n  putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n  putAttribute(attributes,\"http.locale\",request.getLocale());\n  putAttribute(attributes,\"http.server.name\",request.getServerName());\n  putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n  final Enumeration<String> paramEnumeration=request.getParameterNames();\n  while (paramEnumeration.hasMoreElements()) {\n    final String paramName=paramEnumeration.nextElement();\n    final String value=request.getParameter(paramName);\n    attributes.put(\"http.param.\" + paramName,value);\n  }\n  final Cookie[] cookies=request.getCookies();\n  if (cookies != null) {\n    for (    final Cookie cookie : cookies) {\n      final String name=cookie.getName();\n      final String cookiePrefix=\"http.cookie.\" + name + \".\";\n      attributes.put(cookiePrefix + \"value\",cookie.getValue());\n      attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n      attributes.put(cookiePrefix + \"path\",cookie.getPath());\n      attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n      attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n      attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n    }\n  }\n  final String queryString=request.getQueryString();\n  if (queryString != null) {\n    final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n    for (    final String keyValueString : params) {\n      final int indexOf=keyValueString.indexOf(\"=\");\n      if (indexOf < 0) {\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n      }\n else {\n        final String key=keyValueString.substring(0,indexOf);\n        final String value;\n        if (indexOf == keyValueString.length() - 1) {\n          value=\"\";\n        }\n else {\n          value=keyValueString.substring(indexOf + 1);\n        }\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 464,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4426,
                        "startLineNumber": 507,
                        "startColumnNumber": 8,
                        "endLineNumber": 579,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n  putAttribute(attributes,\"mime.type\",request.getContentType());\n  putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n  putAttribute(attributes,\"http.context.path\",request.getContextPath());\n  putAttribute(attributes,\"http.method\",request.getMethod());\n  putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n  putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n  if (request.getQueryString() != null) {\n    putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n  }\n  putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n  putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n  putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n  putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n  putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n  putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n  putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n  if (request.getDispatcherType() != null) {\n    putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n  }\n  putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n  putAttribute(attributes,\"http.locale\",request.getLocale());\n  putAttribute(attributes,\"http.server.name\",request.getServerName());\n  putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n  final Enumeration<String> paramEnumeration=request.getParameterNames();\n  while (paramEnumeration.hasMoreElements()) {\n    final String paramName=paramEnumeration.nextElement();\n    final String value=request.getParameter(paramName);\n    attributes.put(\"http.param.\" + paramName,value);\n  }\n  final Cookie[] cookies=request.getCookies();\n  if (cookies != null) {\n    for (    final Cookie cookie : cookies) {\n      final String name=cookie.getName();\n      final String cookiePrefix=\"http.cookie.\" + name + \".\";\n      attributes.put(cookiePrefix + \"value\",cookie.getValue());\n      attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n      attributes.put(cookiePrefix + \"path\",cookie.getPath());\n      attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n      attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n      attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n    }\n  }\n  final String queryString=request.getQueryString();\n  if (queryString != null) {\n    final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n    for (    final String keyValueString : params) {\n      final int indexOf=keyValueString.indexOf(\"=\");\n      if (indexOf < 0) {\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n      }\n else {\n        final String key=keyValueString.substring(0,indexOf);\n        final String value;\n        if (indexOf == keyValueString.length() - 1) {\n          value=\"\";\n        }\n else {\n          value=keyValueString.substring(indexOf + 1);\n        }\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n      }\n    }\n  }\n}\n catch (final UnsupportedEncodingException uee) {\n  throw new ProcessException(\"Invalid character encoding\",uee);\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 478,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8324,
                        "startLineNumber": 476,
                        "startColumnNumber": 110,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 956,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8444,
                        "startLineNumber": 475,
                        "startColumnNumber": 4,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void onTrigger(final ProcessContext context,final ProcessSession session) throws ProcessException {\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 974,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 53,
                    "startLineNumber": 537,
                    "startColumnNumber": 16,
                    "endLineNumber": 537,
                    "endColumnNumber": 69
                },
                "nodeContext": "final String value=request.getParameter(paramName);\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 10,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.processors.standard.HttpServletRequest"
        },
        {
            "nodeContext": "request",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 541,
                "startColumnNumber": 37,
                "endLineNumber": 541,
                "endColumnNumber": 44
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 20,
                        "startLineNumber": 541,
                        "startColumnNumber": 37,
                        "endLineNumber": 541,
                        "endColumnNumber": 57
                    },
                    "nodeContext": "request.getCookies()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 30,
                        "startLineNumber": 541,
                        "startColumnNumber": 27,
                        "endLineNumber": 541,
                        "endColumnNumber": 57
                    },
                    "nodeContext": "cookies=request.getCookies()",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 46,
                        "startLineNumber": 541,
                        "startColumnNumber": 12,
                        "endLineNumber": 541,
                        "endColumnNumber": 58
                    },
                    "nodeContext": "final Cookie[] cookies=request.getCookies();\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 4236,
                        "startLineNumber": 507,
                        "startColumnNumber": 12,
                        "endLineNumber": 577,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n  putAttribute(attributes,\"mime.type\",request.getContentType());\n  putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n  putAttribute(attributes,\"http.context.path\",request.getContextPath());\n  putAttribute(attributes,\"http.method\",request.getMethod());\n  putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n  putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n  if (request.getQueryString() != null) {\n    putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n  }\n  putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n  putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n  putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n  putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n  putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n  putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n  putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n  if (request.getDispatcherType() != null) {\n    putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n  }\n  putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n  putAttribute(attributes,\"http.locale\",request.getLocale());\n  putAttribute(attributes,\"http.server.name\",request.getServerName());\n  putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n  final Enumeration<String> paramEnumeration=request.getParameterNames();\n  while (paramEnumeration.hasMoreElements()) {\n    final String paramName=paramEnumeration.nextElement();\n    final String value=request.getParameter(paramName);\n    attributes.put(\"http.param.\" + paramName,value);\n  }\n  final Cookie[] cookies=request.getCookies();\n  if (cookies != null) {\n    for (    final Cookie cookie : cookies) {\n      final String name=cookie.getName();\n      final String cookiePrefix=\"http.cookie.\" + name + \".\";\n      attributes.put(cookiePrefix + \"value\",cookie.getValue());\n      attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n      attributes.put(cookiePrefix + \"path\",cookie.getPath());\n      attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n      attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n      attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n    }\n  }\n  final String queryString=request.getQueryString();\n  if (queryString != null) {\n    final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n    for (    final String keyValueString : params) {\n      final int indexOf=keyValueString.indexOf(\"=\");\n      if (indexOf < 0) {\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n      }\n else {\n        final String key=keyValueString.substring(0,indexOf);\n        final String value;\n        if (indexOf == keyValueString.length() - 1) {\n          value=\"\";\n        }\n else {\n          value=keyValueString.substring(indexOf + 1);\n        }\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 464,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4426,
                        "startLineNumber": 507,
                        "startColumnNumber": 8,
                        "endLineNumber": 579,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n  putAttribute(attributes,\"mime.type\",request.getContentType());\n  putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n  putAttribute(attributes,\"http.context.path\",request.getContextPath());\n  putAttribute(attributes,\"http.method\",request.getMethod());\n  putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n  putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n  if (request.getQueryString() != null) {\n    putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n  }\n  putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n  putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n  putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n  putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n  putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n  putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n  putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n  if (request.getDispatcherType() != null) {\n    putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n  }\n  putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n  putAttribute(attributes,\"http.locale\",request.getLocale());\n  putAttribute(attributes,\"http.server.name\",request.getServerName());\n  putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n  final Enumeration<String> paramEnumeration=request.getParameterNames();\n  while (paramEnumeration.hasMoreElements()) {\n    final String paramName=paramEnumeration.nextElement();\n    final String value=request.getParameter(paramName);\n    attributes.put(\"http.param.\" + paramName,value);\n  }\n  final Cookie[] cookies=request.getCookies();\n  if (cookies != null) {\n    for (    final Cookie cookie : cookies) {\n      final String name=cookie.getName();\n      final String cookiePrefix=\"http.cookie.\" + name + \".\";\n      attributes.put(cookiePrefix + \"value\",cookie.getValue());\n      attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n      attributes.put(cookiePrefix + \"path\",cookie.getPath());\n      attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n      attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n      attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n    }\n  }\n  final String queryString=request.getQueryString();\n  if (queryString != null) {\n    final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n    for (    final String keyValueString : params) {\n      final int indexOf=keyValueString.indexOf(\"=\");\n      if (indexOf < 0) {\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n      }\n else {\n        final String key=keyValueString.substring(0,indexOf);\n        final String value;\n        if (indexOf == keyValueString.length() - 1) {\n          value=\"\";\n        }\n else {\n          value=keyValueString.substring(indexOf + 1);\n        }\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n      }\n    }\n  }\n}\n catch (final UnsupportedEncodingException uee) {\n  throw new ProcessException(\"Invalid character encoding\",uee);\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 478,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8324,
                        "startLineNumber": 476,
                        "startColumnNumber": 110,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 956,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8444,
                        "startLineNumber": 475,
                        "startColumnNumber": 4,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void onTrigger(final ProcessContext context,final ProcessSession session) throws ProcessException {\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 974,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 46,
                    "startLineNumber": 541,
                    "startColumnNumber": 12,
                    "endLineNumber": 541,
                    "endColumnNumber": 58
                },
                "nodeContext": "final Cookie[] cookies=request.getCookies();\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 11,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.processors.standard.HttpServletRequest"
        },
        {
            "nodeContext": "request",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 555,
                "startColumnNumber": 39,
                "endLineNumber": 555,
                "endColumnNumber": 46
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 24,
                        "startLineNumber": 555,
                        "startColumnNumber": 39,
                        "endLineNumber": 555,
                        "endColumnNumber": 63
                    },
                    "nodeContext": "request.getQueryString()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 38,
                        "startLineNumber": 555,
                        "startColumnNumber": 25,
                        "endLineNumber": 555,
                        "endColumnNumber": 63
                    },
                    "nodeContext": "queryString=request.getQueryString()",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 52,
                        "startLineNumber": 555,
                        "startColumnNumber": 12,
                        "endLineNumber": 555,
                        "endColumnNumber": 64
                    },
                    "nodeContext": "final String queryString=request.getQueryString();\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 4236,
                        "startLineNumber": 507,
                        "startColumnNumber": 12,
                        "endLineNumber": 577,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n  putAttribute(attributes,\"mime.type\",request.getContentType());\n  putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n  putAttribute(attributes,\"http.context.path\",request.getContextPath());\n  putAttribute(attributes,\"http.method\",request.getMethod());\n  putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n  putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n  if (request.getQueryString() != null) {\n    putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n  }\n  putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n  putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n  putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n  putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n  putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n  putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n  putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n  if (request.getDispatcherType() != null) {\n    putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n  }\n  putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n  putAttribute(attributes,\"http.locale\",request.getLocale());\n  putAttribute(attributes,\"http.server.name\",request.getServerName());\n  putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n  final Enumeration<String> paramEnumeration=request.getParameterNames();\n  while (paramEnumeration.hasMoreElements()) {\n    final String paramName=paramEnumeration.nextElement();\n    final String value=request.getParameter(paramName);\n    attributes.put(\"http.param.\" + paramName,value);\n  }\n  final Cookie[] cookies=request.getCookies();\n  if (cookies != null) {\n    for (    final Cookie cookie : cookies) {\n      final String name=cookie.getName();\n      final String cookiePrefix=\"http.cookie.\" + name + \".\";\n      attributes.put(cookiePrefix + \"value\",cookie.getValue());\n      attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n      attributes.put(cookiePrefix + \"path\",cookie.getPath());\n      attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n      attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n      attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n    }\n  }\n  final String queryString=request.getQueryString();\n  if (queryString != null) {\n    final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n    for (    final String keyValueString : params) {\n      final int indexOf=keyValueString.indexOf(\"=\");\n      if (indexOf < 0) {\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n      }\n else {\n        final String key=keyValueString.substring(0,indexOf);\n        final String value;\n        if (indexOf == keyValueString.length() - 1) {\n          value=\"\";\n        }\n else {\n          value=keyValueString.substring(indexOf + 1);\n        }\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 464,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4426,
                        "startLineNumber": 507,
                        "startColumnNumber": 8,
                        "endLineNumber": 579,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n  putAttribute(attributes,\"mime.type\",request.getContentType());\n  putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n  putAttribute(attributes,\"http.context.path\",request.getContextPath());\n  putAttribute(attributes,\"http.method\",request.getMethod());\n  putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n  putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n  if (request.getQueryString() != null) {\n    putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n  }\n  putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n  putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n  putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n  putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n  putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n  putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n  putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n  if (request.getDispatcherType() != null) {\n    putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n  }\n  putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n  putAttribute(attributes,\"http.locale\",request.getLocale());\n  putAttribute(attributes,\"http.server.name\",request.getServerName());\n  putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n  final Enumeration<String> paramEnumeration=request.getParameterNames();\n  while (paramEnumeration.hasMoreElements()) {\n    final String paramName=paramEnumeration.nextElement();\n    final String value=request.getParameter(paramName);\n    attributes.put(\"http.param.\" + paramName,value);\n  }\n  final Cookie[] cookies=request.getCookies();\n  if (cookies != null) {\n    for (    final Cookie cookie : cookies) {\n      final String name=cookie.getName();\n      final String cookiePrefix=\"http.cookie.\" + name + \".\";\n      attributes.put(cookiePrefix + \"value\",cookie.getValue());\n      attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n      attributes.put(cookiePrefix + \"path\",cookie.getPath());\n      attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n      attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n      attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n    }\n  }\n  final String queryString=request.getQueryString();\n  if (queryString != null) {\n    final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n    for (    final String keyValueString : params) {\n      final int indexOf=keyValueString.indexOf(\"=\");\n      if (indexOf < 0) {\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n      }\n else {\n        final String key=keyValueString.substring(0,indexOf);\n        final String value;\n        if (indexOf == keyValueString.length() - 1) {\n          value=\"\";\n        }\n else {\n          value=keyValueString.substring(indexOf + 1);\n        }\n        attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n      }\n    }\n  }\n}\n catch (final UnsupportedEncodingException uee) {\n  throw new ProcessException(\"Invalid character encoding\",uee);\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 478,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8324,
                        "startLineNumber": 476,
                        "startColumnNumber": 110,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 956,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8444,
                        "startLineNumber": 475,
                        "startColumnNumber": 4,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void onTrigger(final ProcessContext context,final ProcessSession session) throws ProcessException {\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 974,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 52,
                    "startLineNumber": 555,
                    "startColumnNumber": 12,
                    "endLineNumber": 555,
                    "endColumnNumber": 64
                },
                "nodeContext": "final String queryString=request.getQueryString();\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 9,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.processors.standard.HttpServletRequest"
        },
        {
            "nodeContext": "request",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 581,
                "startColumnNumber": 48,
                "endLineNumber": 581,
                "endColumnNumber": 55
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 24,
                        "startLineNumber": 581,
                        "startColumnNumber": 48,
                        "endLineNumber": 581,
                        "endColumnNumber": 72
                    },
                    "nodeContext": "request.getHeaderNames()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 38,
                        "startLineNumber": 581,
                        "startColumnNumber": 34,
                        "endLineNumber": 581,
                        "endColumnNumber": 72
                    },
                    "nodeContext": "headerNames=request.getHeaderNames()",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 65,
                        "startLineNumber": 581,
                        "startColumnNumber": 8,
                        "endLineNumber": 581,
                        "endColumnNumber": 73
                    },
                    "nodeContext": "final Enumeration<String> headerNames=request.getHeaderNames();\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 12,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8324,
                        "startLineNumber": 476,
                        "startColumnNumber": 110,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 956,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8444,
                        "startLineNumber": 475,
                        "startColumnNumber": 4,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void onTrigger(final ProcessContext context,final ProcessSession session) throws ProcessException {\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 974,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 65,
                    "startLineNumber": 581,
                    "startColumnNumber": 8,
                    "endLineNumber": 581,
                    "endColumnNumber": 73
                },
                "nodeContext": "final Enumeration<String> headerNames=request.getHeaderNames();\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 12,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.processors.standard.HttpServletRequest"
        },
        {
            "nodeContext": "request",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 584,
                "startColumnNumber": 39,
                "endLineNumber": 584,
                "endColumnNumber": 46
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 29,
                        "startLineNumber": 584,
                        "startColumnNumber": 39,
                        "endLineNumber": 584,
                        "endColumnNumber": 68
                    },
                    "nodeContext": "request.getHeader(headerName)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 43,
                        "startLineNumber": 584,
                        "startColumnNumber": 25,
                        "endLineNumber": 584,
                        "endColumnNumber": 68
                    },
                    "nodeContext": "headerValue=request.getHeader(headerName)",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 57,
                        "startLineNumber": 584,
                        "startColumnNumber": 12,
                        "endLineNumber": 584,
                        "endColumnNumber": 69
                    },
                    "nodeContext": "final String headerValue=request.getHeader(headerName);\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 10,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 227,
                        "startLineNumber": 582,
                        "startColumnNumber": 46,
                        "endLineNumber": 586,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final String headerName=headerNames.nextElement();\n  final String headerValue=request.getHeader(headerName);\n  putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 28,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 265,
                        "startLineNumber": 582,
                        "startColumnNumber": 8,
                        "endLineNumber": 586,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (headerNames.hasMoreElements()) {\n  final String headerName=headerNames.nextElement();\n  final String headerValue=request.getHeader(headerName);\n  putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 32,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8324,
                        "startLineNumber": 476,
                        "startColumnNumber": 110,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 956,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8444,
                        "startLineNumber": 475,
                        "startColumnNumber": 4,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void onTrigger(final ProcessContext context,final ProcessSession session) throws ProcessException {\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 974,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 57,
                    "startLineNumber": 584,
                    "startColumnNumber": 12,
                    "endLineNumber": 584,
                    "endColumnNumber": 69
                },
                "nodeContext": "final String headerValue=request.getHeader(headerName);\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 10,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.processors.standard.HttpServletRequest"
        },
        {
            "nodeContext": "request",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 588,
                "startColumnNumber": 36,
                "endLineNumber": 588,
                "endColumnNumber": 43
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 26,
                        "startLineNumber": 588,
                        "startColumnNumber": 36,
                        "endLineNumber": 588,
                        "endColumnNumber": 62
                    },
                    "nodeContext": "request.getUserPrincipal()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 38,
                        "startLineNumber": 588,
                        "startColumnNumber": 24,
                        "endLineNumber": 588,
                        "endColumnNumber": 62
                    },
                    "nodeContext": "principal=request.getUserPrincipal()",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 55,
                        "startLineNumber": 588,
                        "startColumnNumber": 8,
                        "endLineNumber": 588,
                        "endColumnNumber": 63
                    },
                    "nodeContext": "final Principal principal=request.getUserPrincipal();\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8324,
                        "startLineNumber": 476,
                        "startColumnNumber": 110,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 956,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8444,
                        "startLineNumber": 475,
                        "startColumnNumber": 4,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void onTrigger(final ProcessContext context,final ProcessSession session) throws ProcessException {\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 974,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 55,
                    "startLineNumber": 588,
                    "startColumnNumber": 8,
                    "endLineNumber": 588,
                    "endColumnNumber": 63
                },
                "nodeContext": "final Principal principal=request.getUserPrincipal();\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 9,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.processors.standard.HttpServletRequest"
        },
        {
            "nodeContext": "request",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 593,
                "startColumnNumber": 60,
                "endLineNumber": 593,
                "endColumnNumber": 67
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
                    "nodePosition": {
                        "charLength": 61,
                        "startLineNumber": 593,
                        "startColumnNumber": 60,
                        "endLineNumber": 593,
                        "endColumnNumber": 121
                    },
                    "nodeContext": "request.getAttribute(\"javax.servlet.request.X509Certificate\")",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 81,
                        "startLineNumber": 593,
                        "startColumnNumber": 40,
                        "endLineNumber": 593,
                        "endColumnNumber": 121
                    },
                    "nodeContext": "(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\")",
                    "nodeType": "CastExpression",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 91,
                        "startLineNumber": 593,
                        "startColumnNumber": 30,
                        "endLineNumber": 593,
                        "endColumnNumber": 121
                    },
                    "nodeContext": "certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\")",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 12,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 114,
                        "startLineNumber": 593,
                        "startColumnNumber": 8,
                        "endLineNumber": 593,
                        "endColumnNumber": 122
                    },
                    "nodeContext": "final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 16,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8324,
                        "startLineNumber": 476,
                        "startColumnNumber": 110,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 956,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8444,
                        "startLineNumber": 475,
                        "startColumnNumber": 4,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void onTrigger(final ProcessContext context,final ProcessSession session) throws ProcessException {\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 974,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 114,
                    "startLineNumber": 593,
                    "startColumnNumber": 8,
                    "endLineNumber": 593,
                    "endColumnNumber": 122
                },
                "nodeContext": "final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 16,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.processors.standard.HttpServletRequest"
        },
        {
            "nodeContext": "request",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 609,
                "startColumnNumber": 74,
                "endLineNumber": 609,
                "endColumnNumber": 81
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 96,
                        "startLineNumber": 609,
                        "startColumnNumber": 35,
                        "endLineNumber": 609,
                        "endColumnNumber": 131
                    },
                    "nodeContext": "contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 11,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 109,
                        "startLineNumber": 609,
                        "startColumnNumber": 22,
                        "endLineNumber": 609,
                        "endColumnNumber": 131
                    },
                    "nodeContext": "registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext())",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 13,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 124,
                        "startLineNumber": 609,
                        "startColumnNumber": 8,
                        "endLineNumber": 609,
                        "endColumnNumber": 132
                    },
                    "nodeContext": "final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 16,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8324,
                        "startLineNumber": 476,
                        "startColumnNumber": 110,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 956,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8444,
                        "startLineNumber": 475,
                        "startColumnNumber": 4,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void onTrigger(final ProcessContext context,final ProcessSession session) throws ProcessException {\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 974,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 124,
                    "startLineNumber": 609,
                    "startColumnNumber": 8,
                    "endLineNumber": 609,
                    "endColumnNumber": 132
                },
                "nodeContext": "final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 16,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.processors.standard.HttpServletRequest"
        },
        {
            "nodeContext": "request",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 613,
                "startColumnNumber": 33,
                "endLineNumber": 613,
                "endColumnNumber": 40
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ArrayInitializer,expressions]",
                    "nodePosition": {
                        "charLength": 23,
                        "startLineNumber": 613,
                        "startColumnNumber": 33,
                        "endLineNumber": 613,
                        "endColumnNumber": 56
                    },
                    "nodeContext": "request.getRemoteAddr()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ArrayCreation,initializer]",
                    "nodePosition": {
                        "charLength": 25,
                        "startLineNumber": 613,
                        "startColumnNumber": 32,
                        "endLineNumber": 613,
                        "endColumnNumber": 57
                    },
                    "nodeContext": "{request.getRemoteAddr()}",
                    "nodeType": "ArrayInitializer",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 37,
                        "startLineNumber": 613,
                        "startColumnNumber": 20,
                        "endLineNumber": 613,
                        "endColumnNumber": 57
                    },
                    "nodeContext": "new Object[]{request.getRemoteAddr()}",
                    "nodeType": "ArrayCreation",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 215,
                        "startLineNumber": 612,
                        "startColumnNumber": 12,
                        "endLineNumber": 613,
                        "endColumnNumber": 58
                    },
                    "nodeContext": "getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()})",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 14,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 216,
                        "startLineNumber": 612,
                        "startColumnNumber": 12,
                        "endLineNumber": 613,
                        "endColumnNumber": 59
                    },
                    "nodeContext": "getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 15,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 745,
                        "startLineNumber": 611,
                        "startColumnNumber": 25,
                        "endLineNumber": 626,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n  try {\n    container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n    container.getResponse().flushBuffer();\n    container.getContext().complete();\n  }\n catch (  final Exception e) {\n    getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n  }\n  session.remove(flowFile);\n  return;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 70,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 762,
                        "startLineNumber": 611,
                        "startColumnNumber": 8,
                        "endLineNumber": 626,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (!registered) {\n  getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n  try {\n    container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n    container.getResponse().flushBuffer();\n    container.getContext().complete();\n  }\n catch (  final Exception e) {\n    getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n  }\n  session.remove(flowFile);\n  return;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 73,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8324,
                        "startLineNumber": 476,
                        "startColumnNumber": 110,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 956,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8444,
                        "startLineNumber": 475,
                        "startColumnNumber": 4,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void onTrigger(final ProcessContext context,final ProcessSession session) throws ProcessException {\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 974,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                "nodePosition": {
                    "charLength": 37,
                    "startLineNumber": 613,
                    "startColumnNumber": 20,
                    "endLineNumber": 613,
                    "endColumnNumber": 57
                },
                "nodeContext": "new Object[]{request.getRemoteAddr()}",
                "nodeType": "ArrayCreation",
                "astNodeNumber": 9,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.processors.standard.HttpServletRequest"
        },
        {
            "nodeContext": "request",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 621,
                "startColumnNumber": 37,
                "endLineNumber": 621,
                "endColumnNumber": 44
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ArrayInitializer,expressions]",
                    "nodePosition": {
                        "charLength": 23,
                        "startLineNumber": 621,
                        "startColumnNumber": 37,
                        "endLineNumber": 621,
                        "endColumnNumber": 60
                    },
                    "nodeContext": "request.getRemoteAddr()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ArrayCreation,initializer]",
                    "nodePosition": {
                        "charLength": 28,
                        "startLineNumber": 621,
                        "startColumnNumber": 36,
                        "endLineNumber": 621,
                        "endColumnNumber": 64
                    },
                    "nodeContext": "{request.getRemoteAddr(),e}",
                    "nodeType": "ArrayInitializer",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 40,
                        "startLineNumber": 621,
                        "startColumnNumber": 24,
                        "endLineNumber": 621,
                        "endColumnNumber": 64
                    },
                    "nodeContext": "new Object[]{request.getRemoteAddr(),e}",
                    "nodeType": "ArrayCreation",
                    "astNodeNumber": 10,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 152,
                        "startLineNumber": 620,
                        "startColumnNumber": 16,
                        "endLineNumber": 621,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e})",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 15,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 153,
                        "startLineNumber": 620,
                        "startColumnNumber": 16,
                        "endLineNumber": 621,
                        "endColumnNumber": 66
                    },
                    "nodeContext": "getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 16,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
                    "nodePosition": {
                        "charLength": 185,
                        "startLineNumber": 619,
                        "startColumnNumber": 40,
                        "endLineNumber": 622,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 17,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
                    "nodePosition": {
                        "charLength": 211,
                        "startLineNumber": 619,
                        "startColumnNumber": 14,
                        "endLineNumber": 622,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "catch (final Exception e) {\n  getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n}\n",
                    "nodeType": "CatchClause",
                    "astNodeNumber": 23,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 432,
                        "startLineNumber": 615,
                        "startColumnNumber": 12,
                        "endLineNumber": 622,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "try {\n  container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n  container.getResponse().flushBuffer();\n  container.getContext().complete();\n}\n catch (final Exception e) {\n  getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 48,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 745,
                        "startLineNumber": 611,
                        "startColumnNumber": 25,
                        "endLineNumber": 626,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n  try {\n    container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n    container.getResponse().flushBuffer();\n    container.getContext().complete();\n  }\n catch (  final Exception e) {\n    getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n  }\n  session.remove(flowFile);\n  return;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 70,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 762,
                        "startLineNumber": 611,
                        "startColumnNumber": 8,
                        "endLineNumber": 626,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (!registered) {\n  getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n  try {\n    container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n    container.getResponse().flushBuffer();\n    container.getContext().complete();\n  }\n catch (  final Exception e) {\n    getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n  }\n  session.remove(flowFile);\n  return;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 73,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8324,
                        "startLineNumber": 476,
                        "startColumnNumber": 110,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 956,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8444,
                        "startLineNumber": 475,
                        "startColumnNumber": 4,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void onTrigger(final ProcessContext context,final ProcessSession session) throws ProcessException {\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 974,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                "nodePosition": {
                    "charLength": 40,
                    "startLineNumber": 621,
                    "startColumnNumber": 24,
                    "endLineNumber": 621,
                    "endColumnNumber": 64
                },
                "nodeContext": "new Object[]{request.getRemoteAddr(),e}",
                "nodeType": "ArrayCreation",
                "astNodeNumber": 10,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.processors.standard.HttpServletRequest"
        },
        {
            "nodeContext": "request",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 629,
                "startColumnNumber": 107,
                "endLineNumber": 629,
                "endColumnNumber": 114
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 23,
                        "startLineNumber": 629,
                        "startColumnNumber": 107,
                        "endLineNumber": 629,
                        "endColumnNumber": 130
                    },
                    "nodeContext": "request.getRemoteAddr()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 95,
                        "startLineNumber": 629,
                        "startColumnNumber": 88,
                        "endLineNumber": 629,
                        "endColumnNumber": 183
                    },
                    "nodeContext": "\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn)",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 14,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 191,
                        "startLineNumber": 629,
                        "startColumnNumber": 8,
                        "endLineNumber": 629,
                        "endColumnNumber": 199
                    },
                    "nodeContext": "session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 25,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 192,
                        "startLineNumber": 629,
                        "startColumnNumber": 8,
                        "endLineNumber": 629,
                        "endColumnNumber": 200
                    },
                    "nodeContext": "session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 26,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8324,
                        "startLineNumber": 476,
                        "startColumnNumber": 110,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 956,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8444,
                        "startLineNumber": 475,
                        "startColumnNumber": 4,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void onTrigger(final ProcessContext context,final ProcessSession session) throws ProcessException {\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 974,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 192,
                    "startLineNumber": 629,
                    "startColumnNumber": 8,
                    "endLineNumber": 629,
                    "endColumnNumber": 200
                },
                "nodeContext": "session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 26,
                "astHeight": 7
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.processors.standard.HttpServletRequest"
        },
        {
            "nodeContext": "request",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 631,
                "startColumnNumber": 98,
                "endLineNumber": 631,
                "endColumnNumber": 105
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ArrayInitializer,expressions]",
                    "nodePosition": {
                        "charLength": 23,
                        "startLineNumber": 631,
                        "startColumnNumber": 98,
                        "endLineNumber": 631,
                        "endColumnNumber": 121
                    },
                    "nodeContext": "request.getRemoteAddr()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ArrayCreation,initializer]",
                    "nodePosition": {
                        "charLength": 35,
                        "startLineNumber": 631,
                        "startColumnNumber": 87,
                        "endLineNumber": 631,
                        "endColumnNumber": 122
                    },
                    "nodeContext": "{flowFile,request.getRemoteAddr()}",
                    "nodeType": "ArrayInitializer",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 47,
                        "startLineNumber": 631,
                        "startColumnNumber": 75,
                        "endLineNumber": 631,
                        "endColumnNumber": 122
                    },
                    "nodeContext": "new Object[]{flowFile,request.getRemoteAddr()}",
                    "nodeType": "ArrayCreation",
                    "astNodeNumber": 10,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 115,
                        "startLineNumber": 631,
                        "startColumnNumber": 8,
                        "endLineNumber": 631,
                        "endColumnNumber": 123
                    },
                    "nodeContext": "getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()})",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 15,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 116,
                        "startLineNumber": 631,
                        "startColumnNumber": 8,
                        "endLineNumber": 631,
                        "endColumnNumber": 124
                    },
                    "nodeContext": "getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 16,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8324,
                        "startLineNumber": 476,
                        "startColumnNumber": 110,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 956,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8444,
                        "startLineNumber": 475,
                        "startColumnNumber": 4,
                        "endLineNumber": 632,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void onTrigger(final ProcessContext context,final ProcessSession session) throws ProcessException {\n  try {\n    if (!initialized.get()) {\n      initializeServer(context);\n    }\n  }\n catch (  Exception e) {\n    context.yield();\n    throw new ProcessException(\"Failed to initialize the server\",e);\n  }\n  final HttpRequestContainer container=containerQueue.poll();\n  if (container == null) {\n    return;\n  }\n  final long start=System.nanoTime();\n  final HttpServletRequest request=container.getRequest();\n  FlowFile flowFile=session.create();\n  try {\n    flowFile=session.importFrom(request.getInputStream(),flowFile);\n  }\n catch (  final IOException e) {\n    getLogger().error(\"Failed to receive content from HTTP Request from {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    session.remove(flowFile);\n    return;\n  }\n  final String charset=request.getCharacterEncoding() == null ? context.getProperty(URL_CHARACTER_SET).getValue() : request.getCharacterEncoding();\n  final String contextIdentifier=UUID.randomUUID().toString();\n  final Map<String,String> attributes=new HashMap<>();\n  try {\n    putAttribute(attributes,HTTPUtils.HTTP_CONTEXT_ID,contextIdentifier);\n    putAttribute(attributes,\"mime.type\",request.getContentType());\n    putAttribute(attributes,\"http.servlet.path\",request.getServletPath());\n    putAttribute(attributes,\"http.context.path\",request.getContextPath());\n    putAttribute(attributes,\"http.method\",request.getMethod());\n    putAttribute(attributes,\"http.local.addr\",request.getLocalAddr());\n    putAttribute(attributes,HTTPUtils.HTTP_LOCAL_NAME,request.getLocalName());\n    if (request.getQueryString() != null) {\n      putAttribute(attributes,\"http.query.string\",URLDecoder.decode(request.getQueryString(),charset));\n    }\n    putAttribute(attributes,HTTPUtils.HTTP_REMOTE_HOST,request.getRemoteHost());\n    putAttribute(attributes,\"http.remote.addr\",request.getRemoteAddr());\n    putAttribute(attributes,\"http.remote.user\",request.getRemoteUser());\n    putAttribute(attributes,HTTPUtils.HTTP_REQUEST_URI,request.getRequestURI());\n    putAttribute(attributes,\"http.request.url\",request.getRequestURL().toString());\n    putAttribute(attributes,\"http.auth.type\",request.getAuthType());\n    putAttribute(attributes,\"http.requested.session.id\",request.getRequestedSessionId());\n    if (request.getDispatcherType() != null) {\n      putAttribute(attributes,\"http.dispatcher.type\",request.getDispatcherType().name());\n    }\n    putAttribute(attributes,\"http.character.encoding\",request.getCharacterEncoding());\n    putAttribute(attributes,\"http.locale\",request.getLocale());\n    putAttribute(attributes,\"http.server.name\",request.getServerName());\n    putAttribute(attributes,HTTPUtils.HTTP_PORT,request.getServerPort());\n    final Enumeration<String> paramEnumeration=request.getParameterNames();\n    while (paramEnumeration.hasMoreElements()) {\n      final String paramName=paramEnumeration.nextElement();\n      final String value=request.getParameter(paramName);\n      attributes.put(\"http.param.\" + paramName,value);\n    }\n    final Cookie[] cookies=request.getCookies();\n    if (cookies != null) {\n      for (      final Cookie cookie : cookies) {\n        final String name=cookie.getName();\n        final String cookiePrefix=\"http.cookie.\" + name + \".\";\n        attributes.put(cookiePrefix + \"value\",cookie.getValue());\n        attributes.put(cookiePrefix + \"domain\",cookie.getDomain());\n        attributes.put(cookiePrefix + \"path\",cookie.getPath());\n        attributes.put(cookiePrefix + \"max.age\",String.valueOf(cookie.getMaxAge()));\n        attributes.put(cookiePrefix + \"version\",String.valueOf(cookie.getVersion()));\n        attributes.put(cookiePrefix + \"secure\",String.valueOf(cookie.getSecure()));\n      }\n    }\n    final String queryString=request.getQueryString();\n    if (queryString != null) {\n      final String[] params=URL_QUERY_PARAM_DELIMITER.split(queryString);\n      for (      final String keyValueString : params) {\n        final int indexOf=keyValueString.indexOf(\"=\");\n        if (indexOf < 0) {\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(keyValueString,charset),\"\");\n        }\n else {\n          final String key=keyValueString.substring(0,indexOf);\n          final String value;\n          if (indexOf == keyValueString.length() - 1) {\n            value=\"\";\n          }\n else {\n            value=keyValueString.substring(indexOf + 1);\n          }\n          attributes.put(\"http.query.param.\" + URLDecoder.decode(key,charset),URLDecoder.decode(value,charset));\n        }\n      }\n    }\n  }\n catch (  final UnsupportedEncodingException uee) {\n    throw new ProcessException(\"Invalid character encoding\",uee);\n  }\n  final Enumeration<String> headerNames=request.getHeaderNames();\n  while (headerNames.hasMoreElements()) {\n    final String headerName=headerNames.nextElement();\n    final String headerValue=request.getHeader(headerName);\n    putAttribute(attributes,\"http.headers.\" + headerName,headerValue);\n  }\n  final Principal principal=request.getUserPrincipal();\n  if (principal != null) {\n    putAttribute(attributes,\"http.principal.name\",principal.getName());\n  }\n  final X509Certificate certs[]=(X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");\n  final String subjectDn;\n  if (certs != null && certs.length > 0) {\n    final X509Certificate cert=certs[0];\n    subjectDn=cert.getSubjectDN().getName();\n    final String issuerDn=cert.getIssuerDN().getName();\n    putAttribute(attributes,HTTPUtils.HTTP_SSL_CERT,subjectDn);\n    putAttribute(attributes,\"http.issuer.dn\",issuerDn);\n  }\n else {\n    subjectDn=null;\n  }\n  flowFile=session.putAllAttributes(flowFile,attributes);\n  final HttpContextMap contextMap=context.getProperty(HTTP_CONTEXT_MAP).asControllerService(HttpContextMap.class);\n  final boolean registered=contextMap.register(contextIdentifier,request,container.getResponse(),container.getContext());\n  if (!registered) {\n    getLogger().warn(\"Received request from {} but could not process it because too many requests are already outstanding; responding with SERVICE_UNAVAILABLE\",new Object[]{request.getRemoteAddr()});\n    try {\n      container.getResponse().setStatus(Status.SERVICE_UNAVAILABLE.getStatusCode());\n      container.getResponse().flushBuffer();\n      container.getContext().complete();\n    }\n catch (    final Exception e) {\n      getLogger().warn(\"Failed to respond with SERVICE_UNAVAILABLE message to {} due to {}\",new Object[]{request.getRemoteAddr(),e});\n    }\n    session.remove(flowFile);\n    return;\n  }\n  final long receiveMillis=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  session.getProvenanceReporter().receive(flowFile,HTTPUtils.getURI(attributes),\"Received from \" + request.getRemoteAddr() + (subjectDn == null ? \"\" : \" with DN=\" + subjectDn),receiveMillis);\n  session.transfer(flowFile,REL_SUCCESS);\n  getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 974,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 116,
                    "startLineNumber": 631,
                    "startColumnNumber": 8,
                    "endLineNumber": 631,
                    "endColumnNumber": 124
                },
                "nodeContext": "getLogger().info(\"Transferring {} to 'success'; received from {}\",new Object[]{flowFile,request.getRemoteAddr()});\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 16,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.processors.standard.HttpServletRequest"
        }
    ],
    "positionList": [
        {
            "charLength": 7,
            "startLineNumber": 495,
            "startColumnNumber": 42,
            "endLineNumber": 495,
            "endColumnNumber": 49
        },
        {
            "charLength": 7,
            "startLineNumber": 498,
            "startColumnNumber": 33,
            "endLineNumber": 498,
            "endColumnNumber": 40
        },
        {
            "charLength": 7,
            "startLineNumber": 503,
            "startColumnNumber": 31,
            "endLineNumber": 503,
            "endColumnNumber": 38
        },
        {
            "charLength": 7,
            "startLineNumber": 503,
            "startColumnNumber": 124,
            "endLineNumber": 503,
            "endColumnNumber": 131
        },
        {
            "charLength": 7,
            "startLineNumber": 509,
            "startColumnNumber": 50,
            "endLineNumber": 509,
            "endColumnNumber": 57
        },
        {
            "charLength": 7,
            "startLineNumber": 510,
            "startColumnNumber": 58,
            "endLineNumber": 510,
            "endColumnNumber": 65
        },
        {
            "charLength": 7,
            "startLineNumber": 511,
            "startColumnNumber": 58,
            "endLineNumber": 511,
            "endColumnNumber": 65
        },
        {
            "charLength": 7,
            "startLineNumber": 512,
            "startColumnNumber": 52,
            "endLineNumber": 512,
            "endColumnNumber": 59
        },
        {
            "charLength": 7,
            "startLineNumber": 513,
            "startColumnNumber": 56,
            "endLineNumber": 513,
            "endColumnNumber": 63
        },
        {
            "charLength": 7,
            "startLineNumber": 514,
            "startColumnNumber": 64,
            "endLineNumber": 514,
            "endColumnNumber": 71
        },
        {
            "charLength": 7,
            "startLineNumber": 515,
            "startColumnNumber": 16,
            "endLineNumber": 515,
            "endColumnNumber": 23
        },
        {
            "charLength": 7,
            "startLineNumber": 516,
            "startColumnNumber": 80,
            "endLineNumber": 516,
            "endColumnNumber": 87
        },
        {
            "charLength": 7,
            "startLineNumber": 518,
            "startColumnNumber": 65,
            "endLineNumber": 518,
            "endColumnNumber": 72
        },
        {
            "charLength": 7,
            "startLineNumber": 519,
            "startColumnNumber": 57,
            "endLineNumber": 519,
            "endColumnNumber": 64
        },
        {
            "charLength": 7,
            "startLineNumber": 520,
            "startColumnNumber": 57,
            "endLineNumber": 520,
            "endColumnNumber": 64
        },
        {
            "charLength": 7,
            "startLineNumber": 521,
            "startColumnNumber": 65,
            "endLineNumber": 521,
            "endColumnNumber": 72
        },
        {
            "charLength": 7,
            "startLineNumber": 522,
            "startColumnNumber": 57,
            "endLineNumber": 522,
            "endColumnNumber": 64
        },
        {
            "charLength": 7,
            "startLineNumber": 523,
            "startColumnNumber": 55,
            "endLineNumber": 523,
            "endColumnNumber": 62
        },
        {
            "charLength": 7,
            "startLineNumber": 525,
            "startColumnNumber": 66,
            "endLineNumber": 525,
            "endColumnNumber": 73
        },
        {
            "charLength": 7,
            "startLineNumber": 526,
            "startColumnNumber": 16,
            "endLineNumber": 526,
            "endColumnNumber": 23
        },
        {
            "charLength": 7,
            "startLineNumber": 527,
            "startColumnNumber": 65,
            "endLineNumber": 527,
            "endColumnNumber": 72
        },
        {
            "charLength": 7,
            "startLineNumber": 529,
            "startColumnNumber": 64,
            "endLineNumber": 529,
            "endColumnNumber": 71
        },
        {
            "charLength": 7,
            "startLineNumber": 530,
            "startColumnNumber": 52,
            "endLineNumber": 530,
            "endColumnNumber": 59
        },
        {
            "charLength": 7,
            "startLineNumber": 531,
            "startColumnNumber": 57,
            "endLineNumber": 531,
            "endColumnNumber": 64
        },
        {
            "charLength": 7,
            "startLineNumber": 532,
            "startColumnNumber": 58,
            "endLineNumber": 532,
            "endColumnNumber": 65
        },
        {
            "charLength": 7,
            "startLineNumber": 534,
            "startColumnNumber": 57,
            "endLineNumber": 534,
            "endColumnNumber": 64
        },
        {
            "charLength": 7,
            "startLineNumber": 537,
            "startColumnNumber": 37,
            "endLineNumber": 537,
            "endColumnNumber": 44
        },
        {
            "charLength": 7,
            "startLineNumber": 541,
            "startColumnNumber": 37,
            "endLineNumber": 541,
            "endColumnNumber": 44
        },
        {
            "charLength": 7,
            "startLineNumber": 555,
            "startColumnNumber": 39,
            "endLineNumber": 555,
            "endColumnNumber": 46
        },
        {
            "charLength": 7,
            "startLineNumber": 581,
            "startColumnNumber": 48,
            "endLineNumber": 581,
            "endColumnNumber": 55
        },
        {
            "charLength": 7,
            "startLineNumber": 584,
            "startColumnNumber": 39,
            "endLineNumber": 584,
            "endColumnNumber": 46
        },
        {
            "charLength": 7,
            "startLineNumber": 588,
            "startColumnNumber": 36,
            "endLineNumber": 588,
            "endColumnNumber": 43
        },
        {
            "charLength": 7,
            "startLineNumber": 593,
            "startColumnNumber": 60,
            "endLineNumber": 593,
            "endColumnNumber": 67
        },
        {
            "charLength": 7,
            "startLineNumber": 609,
            "startColumnNumber": 74,
            "endLineNumber": 609,
            "endColumnNumber": 81
        },
        {
            "charLength": 7,
            "startLineNumber": 613,
            "startColumnNumber": 33,
            "endLineNumber": 613,
            "endColumnNumber": 40
        },
        {
            "charLength": 7,
            "startLineNumber": 621,
            "startColumnNumber": 37,
            "endLineNumber": 621,
            "endColumnNumber": 44
        },
        {
            "charLength": 7,
            "startLineNumber": 629,
            "startColumnNumber": 107,
            "endLineNumber": 629,
            "endColumnNumber": 114
        },
        {
            "charLength": 7,
            "startLineNumber": 631,
            "startColumnNumber": 98,
            "endLineNumber": 631,
            "endColumnNumber": 105
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 0,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 0,
            "secondKey": 5,
            "layout": 6
        },
        {
            "firstKey": 0,
            "secondKey": 6,
            "layout": 6
        },
        {
            "firstKey": 0,
            "secondKey": 7,
            "layout": 6
        },
        {
            "firstKey": 0,
            "secondKey": 8,
            "layout": 6
        },
        {
            "firstKey": 0,
            "secondKey": 9,
            "layout": 6
        },
        {
            "firstKey": 0,
            "secondKey": 10,
            "layout": 6
        },
        {
            "firstKey": 0,
            "secondKey": 11,
            "layout": 6
        },
        {
            "firstKey": 0,
            "secondKey": 12,
            "layout": 6
        },
        {
            "firstKey": 0,
            "secondKey": 13,
            "layout": 6
        },
        {
            "firstKey": 0,
            "secondKey": 14,
            "layout": 6
        },
        {
            "firstKey": 0,
            "secondKey": 15,
            "layout": 6
        },
        {
            "firstKey": 0,
            "secondKey": 16,
            "layout": 6
        },
        {
            "firstKey": 0,
            "secondKey": 17,
            "layout": 6
        },
        {
            "firstKey": 0,
            "secondKey": 18,
            "layout": 6
        },
        {
            "firstKey": 0,
            "secondKey": 19,
            "layout": 6
        },
        {
            "firstKey": 0,
            "secondKey": 20,
            "layout": 6
        },
        {
            "firstKey": 0,
            "secondKey": 21,
            "layout": 6
        },
        {
            "firstKey": 0,
            "secondKey": 22,
            "layout": 6
        },
        {
            "firstKey": 0,
            "secondKey": 23,
            "layout": 6
        },
        {
            "firstKey": 0,
            "secondKey": 24,
            "layout": 6
        },
        {
            "firstKey": 0,
            "secondKey": 25,
            "layout": 6
        },
        {
            "firstKey": 0,
            "secondKey": 26,
            "layout": 6
        },
        {
            "firstKey": 0,
            "secondKey": 27,
            "layout": 6
        },
        {
            "firstKey": 0,
            "secondKey": 28,
            "layout": 6
        },
        {
            "firstKey": 0,
            "secondKey": 29,
            "layout": 6
        },
        {
            "firstKey": 0,
            "secondKey": 30,
            "layout": 6
        },
        {
            "firstKey": 0,
            "secondKey": 31,
            "layout": 6
        },
        {
            "firstKey": 0,
            "secondKey": 32,
            "layout": 6
        },
        {
            "firstKey": 0,
            "secondKey": 33,
            "layout": 6
        },
        {
            "firstKey": 0,
            "secondKey": 34,
            "layout": 6
        },
        {
            "firstKey": 0,
            "secondKey": 35,
            "layout": 6
        },
        {
            "firstKey": 0,
            "secondKey": 36,
            "layout": 6
        },
        {
            "firstKey": 0,
            "secondKey": 37,
            "layout": 6
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 8
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 8
        },
        {
            "firstKey": 1,
            "secondKey": 4,
            "layout": 8
        },
        {
            "firstKey": 1,
            "secondKey": 5,
            "layout": 8
        },
        {
            "firstKey": 1,
            "secondKey": 6,
            "layout": 8
        },
        {
            "firstKey": 1,
            "secondKey": 7,
            "layout": 8
        },
        {
            "firstKey": 1,
            "secondKey": 8,
            "layout": 8
        },
        {
            "firstKey": 1,
            "secondKey": 9,
            "layout": 8
        },
        {
            "firstKey": 1,
            "secondKey": 10,
            "layout": 8
        },
        {
            "firstKey": 1,
            "secondKey": 11,
            "layout": 8
        },
        {
            "firstKey": 1,
            "secondKey": 12,
            "layout": 8
        },
        {
            "firstKey": 1,
            "secondKey": 13,
            "layout": 8
        },
        {
            "firstKey": 1,
            "secondKey": 14,
            "layout": 8
        },
        {
            "firstKey": 1,
            "secondKey": 15,
            "layout": 8
        },
        {
            "firstKey": 1,
            "secondKey": 16,
            "layout": 8
        },
        {
            "firstKey": 1,
            "secondKey": 17,
            "layout": 8
        },
        {
            "firstKey": 1,
            "secondKey": 18,
            "layout": 8
        },
        {
            "firstKey": 1,
            "secondKey": 19,
            "layout": 8
        },
        {
            "firstKey": 1,
            "secondKey": 20,
            "layout": 8
        },
        {
            "firstKey": 1,
            "secondKey": 21,
            "layout": 8
        },
        {
            "firstKey": 1,
            "secondKey": 22,
            "layout": 8
        },
        {
            "firstKey": 1,
            "secondKey": 23,
            "layout": 8
        },
        {
            "firstKey": 1,
            "secondKey": 24,
            "layout": 8
        },
        {
            "firstKey": 1,
            "secondKey": 25,
            "layout": 8
        },
        {
            "firstKey": 1,
            "secondKey": 26,
            "layout": 8
        },
        {
            "firstKey": 1,
            "secondKey": 27,
            "layout": 8
        },
        {
            "firstKey": 1,
            "secondKey": 28,
            "layout": 8
        },
        {
            "firstKey": 1,
            "secondKey": 29,
            "layout": 8
        },
        {
            "firstKey": 1,
            "secondKey": 30,
            "layout": 8
        },
        {
            "firstKey": 1,
            "secondKey": 31,
            "layout": 8
        },
        {
            "firstKey": 1,
            "secondKey": 32,
            "layout": 8
        },
        {
            "firstKey": 1,
            "secondKey": 33,
            "layout": 8
        },
        {
            "firstKey": 1,
            "secondKey": 34,
            "layout": 8
        },
        {
            "firstKey": 1,
            "secondKey": 35,
            "layout": 8
        },
        {
            "firstKey": 1,
            "secondKey": 36,
            "layout": 8
        },
        {
            "firstKey": 1,
            "secondKey": 37,
            "layout": 8
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 8,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 9,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 10,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 11,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 12,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 13,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 14,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 15,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 16,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 17,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 18,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 19,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 20,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 21,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 22,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 23,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 24,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 25,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 26,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 27,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 28,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 29,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 30,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 31,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 32,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 33,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 34,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 35,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 36,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 37,
            "layout": 5
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 1
        },
        {
            "firstKey": 3,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 14,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 15,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 16,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 18,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 19,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 20,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 21,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 22,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 23,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 24,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 25,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 26,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 27,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 28,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 29,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 30,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 31,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 32,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 33,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 34,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 35,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 36,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 37,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 18,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 19,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 20,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 21,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 22,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 23,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 24,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 25,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 26,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 27,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 28,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 29,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 30,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 31,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 32,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 33,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 34,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 35,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 36,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 37,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 18,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 19,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 20,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 21,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 22,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 23,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 24,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 25,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 26,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 27,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 28,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 29,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 30,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 31,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 32,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 33,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 34,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 35,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 36,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 37,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 18,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 19,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 20,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 21,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 22,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 23,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 24,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 25,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 26,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 27,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 28,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 29,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 30,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 31,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 32,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 33,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 34,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 35,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 36,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 37,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 18,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 19,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 20,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 21,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 22,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 23,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 24,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 25,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 26,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 27,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 28,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 29,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 30,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 31,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 32,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 33,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 34,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 35,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 36,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 37,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 18,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 19,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 20,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 21,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 22,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 23,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 24,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 25,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 26,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 27,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 28,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 29,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 30,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 31,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 32,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 33,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 34,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 35,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 36,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 37,
            "layout": 5
        },
        {
            "firstKey": 9,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 9,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 9,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 9,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 9,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 18,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 19,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 20,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 21,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 22,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 23,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 24,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 25,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 26,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 27,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 28,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 29,
            "layout": 5
        },
        {
            "firstKey": 9,
            "secondKey": 30,
            "layout": 5
        },
        {
            "firstKey": 9,
            "secondKey": 31,
            "layout": 5
        },
        {
            "firstKey": 9,
            "secondKey": 32,
            "layout": 5
        },
        {
            "firstKey": 9,
            "secondKey": 33,
            "layout": 5
        },
        {
            "firstKey": 9,
            "secondKey": 34,
            "layout": 5
        },
        {
            "firstKey": 9,
            "secondKey": 35,
            "layout": 5
        },
        {
            "firstKey": 9,
            "secondKey": 36,
            "layout": 5
        },
        {
            "firstKey": 9,
            "secondKey": 37,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 18,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 19,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 20,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 21,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 22,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 23,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 24,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 25,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 26,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 27,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 28,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 29,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 30,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 31,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 32,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 33,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 34,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 35,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 36,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 37,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 11,
            "secondKey": 1,
            "layout": 8
        },
        {
            "firstKey": 11,
            "secondKey": 2,
            "layout": 8
        },
        {
            "firstKey": 11,
            "secondKey": 3,
            "layout": 8
        },
        {
            "firstKey": 11,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 11,
            "secondKey": 5,
            "layout": 6
        },
        {
            "firstKey": 11,
            "secondKey": 6,
            "layout": 6
        },
        {
            "firstKey": 11,
            "secondKey": 7,
            "layout": 6
        },
        {
            "firstKey": 11,
            "secondKey": 8,
            "layout": 6
        },
        {
            "firstKey": 11,
            "secondKey": 9,
            "layout": 6
        },
        {
            "firstKey": 11,
            "secondKey": 10,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 12,
            "layout": 6
        },
        {
            "firstKey": 11,
            "secondKey": 13,
            "layout": 6
        },
        {
            "firstKey": 11,
            "secondKey": 14,
            "layout": 6
        },
        {
            "firstKey": 11,
            "secondKey": 15,
            "layout": 6
        },
        {
            "firstKey": 11,
            "secondKey": 16,
            "layout": 6
        },
        {
            "firstKey": 11,
            "secondKey": 17,
            "layout": 6
        },
        {
            "firstKey": 11,
            "secondKey": 18,
            "layout": 6
        },
        {
            "firstKey": 11,
            "secondKey": 19,
            "layout": 6
        },
        {
            "firstKey": 11,
            "secondKey": 20,
            "layout": 6
        },
        {
            "firstKey": 11,
            "secondKey": 21,
            "layout": 6
        },
        {
            "firstKey": 11,
            "secondKey": 22,
            "layout": 6
        },
        {
            "firstKey": 11,
            "secondKey": 23,
            "layout": 6
        },
        {
            "firstKey": 11,
            "secondKey": 24,
            "layout": 6
        },
        {
            "firstKey": 11,
            "secondKey": 25,
            "layout": 6
        },
        {
            "firstKey": 11,
            "secondKey": 26,
            "layout": 6
        },
        {
            "firstKey": 11,
            "secondKey": 27,
            "layout": 6
        },
        {
            "firstKey": 11,
            "secondKey": 28,
            "layout": 6
        },
        {
            "firstKey": 11,
            "secondKey": 29,
            "layout": 8
        },
        {
            "firstKey": 11,
            "secondKey": 30,
            "layout": 8
        },
        {
            "firstKey": 11,
            "secondKey": 31,
            "layout": 8
        },
        {
            "firstKey": 11,
            "secondKey": 32,
            "layout": 8
        },
        {
            "firstKey": 11,
            "secondKey": 33,
            "layout": 8
        },
        {
            "firstKey": 11,
            "secondKey": 34,
            "layout": 8
        },
        {
            "firstKey": 11,
            "secondKey": 35,
            "layout": 8
        },
        {
            "firstKey": 11,
            "secondKey": 36,
            "layout": 8
        },
        {
            "firstKey": 11,
            "secondKey": 37,
            "layout": 8
        },
        {
            "firstKey": 12,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 12,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 12,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 12,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 12,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 12,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 12,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 12,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 12,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 12,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 12,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 12,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 12,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 12,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 12,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 12,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 12,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 12,
            "secondKey": 18,
            "layout": 3
        },
        {
            "firstKey": 12,
            "secondKey": 19,
            "layout": 3
        },
        {
            "firstKey": 12,
            "secondKey": 20,
            "layout": 3
        },
        {
            "firstKey": 12,
            "secondKey": 21,
            "layout": 3
        },
        {
            "firstKey": 12,
            "secondKey": 22,
            "layout": 3
        },
        {
            "firstKey": 12,
            "secondKey": 23,
            "layout": 3
        },
        {
            "firstKey": 12,
            "secondKey": 24,
            "layout": 3
        },
        {
            "firstKey": 12,
            "secondKey": 25,
            "layout": 3
        },
        {
            "firstKey": 12,
            "secondKey": 26,
            "layout": 3
        },
        {
            "firstKey": 12,
            "secondKey": 27,
            "layout": 3
        },
        {
            "firstKey": 12,
            "secondKey": 28,
            "layout": 3
        },
        {
            "firstKey": 12,
            "secondKey": 29,
            "layout": 5
        },
        {
            "firstKey": 12,
            "secondKey": 30,
            "layout": 5
        },
        {
            "firstKey": 12,
            "secondKey": 31,
            "layout": 5
        },
        {
            "firstKey": 12,
            "secondKey": 32,
            "layout": 5
        },
        {
            "firstKey": 12,
            "secondKey": 33,
            "layout": 5
        },
        {
            "firstKey": 12,
            "secondKey": 34,
            "layout": 5
        },
        {
            "firstKey": 12,
            "secondKey": 35,
            "layout": 5
        },
        {
            "firstKey": 12,
            "secondKey": 36,
            "layout": 5
        },
        {
            "firstKey": 12,
            "secondKey": 37,
            "layout": 5
        },
        {
            "firstKey": 13,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 13,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 13,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 13,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 13,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 18,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 19,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 20,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 21,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 22,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 23,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 24,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 25,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 26,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 27,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 28,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 29,
            "layout": 5
        },
        {
            "firstKey": 13,
            "secondKey": 30,
            "layout": 5
        },
        {
            "firstKey": 13,
            "secondKey": 31,
            "layout": 5
        },
        {
            "firstKey": 13,
            "secondKey": 32,
            "layout": 5
        },
        {
            "firstKey": 13,
            "secondKey": 33,
            "layout": 5
        },
        {
            "firstKey": 13,
            "secondKey": 34,
            "layout": 5
        },
        {
            "firstKey": 13,
            "secondKey": 35,
            "layout": 5
        },
        {
            "firstKey": 13,
            "secondKey": 36,
            "layout": 5
        },
        {
            "firstKey": 13,
            "secondKey": 37,
            "layout": 5
        },
        {
            "firstKey": 14,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 14,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 14,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 14,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 14,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 14,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 14,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 14,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 14,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 14,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 14,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 14,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 14,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 14,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 14,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 14,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 14,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 14,
            "secondKey": 18,
            "layout": 3
        },
        {
            "firstKey": 14,
            "secondKey": 19,
            "layout": 3
        },
        {
            "firstKey": 14,
            "secondKey": 20,
            "layout": 3
        },
        {
            "firstKey": 14,
            "secondKey": 21,
            "layout": 3
        },
        {
            "firstKey": 14,
            "secondKey": 22,
            "layout": 3
        },
        {
            "firstKey": 14,
            "secondKey": 23,
            "layout": 3
        },
        {
            "firstKey": 14,
            "secondKey": 24,
            "layout": 3
        },
        {
            "firstKey": 14,
            "secondKey": 25,
            "layout": 3
        },
        {
            "firstKey": 14,
            "secondKey": 26,
            "layout": 3
        },
        {
            "firstKey": 14,
            "secondKey": 27,
            "layout": 3
        },
        {
            "firstKey": 14,
            "secondKey": 28,
            "layout": 3
        },
        {
            "firstKey": 14,
            "secondKey": 29,
            "layout": 5
        },
        {
            "firstKey": 14,
            "secondKey": 30,
            "layout": 5
        },
        {
            "firstKey": 14,
            "secondKey": 31,
            "layout": 5
        },
        {
            "firstKey": 14,
            "secondKey": 32,
            "layout": 5
        },
        {
            "firstKey": 14,
            "secondKey": 33,
            "layout": 5
        },
        {
            "firstKey": 14,
            "secondKey": 34,
            "layout": 5
        },
        {
            "firstKey": 14,
            "secondKey": 35,
            "layout": 5
        },
        {
            "firstKey": 14,
            "secondKey": 36,
            "layout": 5
        },
        {
            "firstKey": 14,
            "secondKey": 37,
            "layout": 5
        },
        {
            "firstKey": 15,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 15,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 15,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 15,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 15,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 15,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 15,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 15,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 15,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 15,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 15,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 15,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 15,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 15,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 15,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 15,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 15,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 15,
            "secondKey": 18,
            "layout": 3
        },
        {
            "firstKey": 15,
            "secondKey": 19,
            "layout": 3
        },
        {
            "firstKey": 15,
            "secondKey": 20,
            "layout": 3
        },
        {
            "firstKey": 15,
            "secondKey": 21,
            "layout": 3
        },
        {
            "firstKey": 15,
            "secondKey": 22,
            "layout": 3
        },
        {
            "firstKey": 15,
            "secondKey": 23,
            "layout": 3
        },
        {
            "firstKey": 15,
            "secondKey": 24,
            "layout": 3
        },
        {
            "firstKey": 15,
            "secondKey": 25,
            "layout": 3
        },
        {
            "firstKey": 15,
            "secondKey": 26,
            "layout": 3
        },
        {
            "firstKey": 15,
            "secondKey": 27,
            "layout": 3
        },
        {
            "firstKey": 15,
            "secondKey": 28,
            "layout": 3
        },
        {
            "firstKey": 15,
            "secondKey": 29,
            "layout": 5
        },
        {
            "firstKey": 15,
            "secondKey": 30,
            "layout": 5
        },
        {
            "firstKey": 15,
            "secondKey": 31,
            "layout": 5
        },
        {
            "firstKey": 15,
            "secondKey": 32,
            "layout": 5
        },
        {
            "firstKey": 15,
            "secondKey": 33,
            "layout": 5
        },
        {
            "firstKey": 15,
            "secondKey": 34,
            "layout": 5
        },
        {
            "firstKey": 15,
            "secondKey": 35,
            "layout": 5
        },
        {
            "firstKey": 15,
            "secondKey": 36,
            "layout": 5
        },
        {
            "firstKey": 15,
            "secondKey": 37,
            "layout": 5
        },
        {
            "firstKey": 16,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 14,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 15,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 18,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 19,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 20,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 21,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 22,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 23,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 24,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 25,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 26,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 27,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 28,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 29,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 30,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 31,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 32,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 33,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 34,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 35,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 36,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 37,
            "layout": 6
        },
        {
            "firstKey": 17,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 17,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 17,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 17,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 17,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 17,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 17,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 17,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 17,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 17,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 17,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 17,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 17,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 17,
            "secondKey": 18,
            "layout": 3
        },
        {
            "firstKey": 17,
            "secondKey": 19,
            "layout": 3
        },
        {
            "firstKey": 17,
            "secondKey": 20,
            "layout": 3
        },
        {
            "firstKey": 17,
            "secondKey": 21,
            "layout": 3
        },
        {
            "firstKey": 17,
            "secondKey": 22,
            "layout": 3
        },
        {
            "firstKey": 17,
            "secondKey": 23,
            "layout": 3
        },
        {
            "firstKey": 17,
            "secondKey": 24,
            "layout": 3
        },
        {
            "firstKey": 17,
            "secondKey": 25,
            "layout": 3
        },
        {
            "firstKey": 17,
            "secondKey": 26,
            "layout": 3
        },
        {
            "firstKey": 17,
            "secondKey": 27,
            "layout": 3
        },
        {
            "firstKey": 17,
            "secondKey": 28,
            "layout": 3
        },
        {
            "firstKey": 17,
            "secondKey": 29,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 30,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 31,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 32,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 33,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 34,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 35,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 36,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 37,
            "layout": 5
        },
        {
            "firstKey": 18,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 18,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 18,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 18,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 18,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 18,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 18,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 18,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 18,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 18,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 18,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 18,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 18,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 18,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 18,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 18,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 18,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 18,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 18,
            "secondKey": 19,
            "layout": 3
        },
        {
            "firstKey": 18,
            "secondKey": 20,
            "layout": 3
        },
        {
            "firstKey": 18,
            "secondKey": 21,
            "layout": 3
        },
        {
            "firstKey": 18,
            "secondKey": 22,
            "layout": 3
        },
        {
            "firstKey": 18,
            "secondKey": 23,
            "layout": 3
        },
        {
            "firstKey": 18,
            "secondKey": 24,
            "layout": 3
        },
        {
            "firstKey": 18,
            "secondKey": 25,
            "layout": 3
        },
        {
            "firstKey": 18,
            "secondKey": 26,
            "layout": 3
        },
        {
            "firstKey": 18,
            "secondKey": 27,
            "layout": 3
        },
        {
            "firstKey": 18,
            "secondKey": 28,
            "layout": 3
        },
        {
            "firstKey": 18,
            "secondKey": 29,
            "layout": 5
        },
        {
            "firstKey": 18,
            "secondKey": 30,
            "layout": 5
        },
        {
            "firstKey": 18,
            "secondKey": 31,
            "layout": 5
        },
        {
            "firstKey": 18,
            "secondKey": 32,
            "layout": 5
        },
        {
            "firstKey": 18,
            "secondKey": 33,
            "layout": 5
        },
        {
            "firstKey": 18,
            "secondKey": 34,
            "layout": 5
        },
        {
            "firstKey": 18,
            "secondKey": 35,
            "layout": 5
        },
        {
            "firstKey": 18,
            "secondKey": 36,
            "layout": 5
        },
        {
            "firstKey": 18,
            "secondKey": 37,
            "layout": 5
        },
        {
            "firstKey": 19,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 19,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 19,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 19,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 19,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 19,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 19,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 19,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 19,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 19,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 19,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 19,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 19,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 19,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 19,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 19,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 19,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 19,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 19,
            "secondKey": 18,
            "layout": 3
        },
        {
            "firstKey": 19,
            "secondKey": 20,
            "layout": 2
        },
        {
            "firstKey": 19,
            "secondKey": 21,
            "layout": 3
        },
        {
            "firstKey": 19,
            "secondKey": 22,
            "layout": 3
        },
        {
            "firstKey": 19,
            "secondKey": 23,
            "layout": 3
        },
        {
            "firstKey": 19,
            "secondKey": 24,
            "layout": 3
        },
        {
            "firstKey": 19,
            "secondKey": 25,
            "layout": 3
        },
        {
            "firstKey": 19,
            "secondKey": 26,
            "layout": 3
        },
        {
            "firstKey": 19,
            "secondKey": 27,
            "layout": 3
        },
        {
            "firstKey": 19,
            "secondKey": 28,
            "layout": 3
        },
        {
            "firstKey": 19,
            "secondKey": 29,
            "layout": 5
        },
        {
            "firstKey": 19,
            "secondKey": 30,
            "layout": 5
        },
        {
            "firstKey": 19,
            "secondKey": 31,
            "layout": 5
        },
        {
            "firstKey": 19,
            "secondKey": 32,
            "layout": 5
        },
        {
            "firstKey": 19,
            "secondKey": 33,
            "layout": 5
        },
        {
            "firstKey": 19,
            "secondKey": 34,
            "layout": 5
        },
        {
            "firstKey": 19,
            "secondKey": 35,
            "layout": 5
        },
        {
            "firstKey": 19,
            "secondKey": 36,
            "layout": 5
        },
        {
            "firstKey": 19,
            "secondKey": 37,
            "layout": 5
        },
        {
            "firstKey": 20,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 20,
            "secondKey": 1,
            "layout": 8
        },
        {
            "firstKey": 20,
            "secondKey": 2,
            "layout": 8
        },
        {
            "firstKey": 20,
            "secondKey": 3,
            "layout": 8
        },
        {
            "firstKey": 20,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 5,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 6,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 7,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 8,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 9,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 10,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 11,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 12,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 13,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 14,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 15,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 16,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 17,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 18,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 19,
            "layout": 5
        },
        {
            "firstKey": 20,
            "secondKey": 21,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 22,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 23,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 24,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 25,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 26,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 27,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 28,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 29,
            "layout": 8
        },
        {
            "firstKey": 20,
            "secondKey": 30,
            "layout": 8
        },
        {
            "firstKey": 20,
            "secondKey": 31,
            "layout": 8
        },
        {
            "firstKey": 20,
            "secondKey": 32,
            "layout": 8
        },
        {
            "firstKey": 20,
            "secondKey": 33,
            "layout": 8
        },
        {
            "firstKey": 20,
            "secondKey": 34,
            "layout": 8
        },
        {
            "firstKey": 20,
            "secondKey": 35,
            "layout": 8
        },
        {
            "firstKey": 20,
            "secondKey": 36,
            "layout": 8
        },
        {
            "firstKey": 20,
            "secondKey": 37,
            "layout": 8
        },
        {
            "firstKey": 21,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 21,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 21,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 21,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 21,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 21,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 21,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 21,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 21,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 21,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 21,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 21,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 21,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 21,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 21,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 21,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 21,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 21,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 21,
            "secondKey": 18,
            "layout": 3
        },
        {
            "firstKey": 21,
            "secondKey": 19,
            "layout": 3
        },
        {
            "firstKey": 21,
            "secondKey": 20,
            "layout": 3
        },
        {
            "firstKey": 21,
            "secondKey": 22,
            "layout": 3
        },
        {
            "firstKey": 21,
            "secondKey": 23,
            "layout": 3
        },
        {
            "firstKey": 21,
            "secondKey": 24,
            "layout": 3
        },
        {
            "firstKey": 21,
            "secondKey": 25,
            "layout": 3
        },
        {
            "firstKey": 21,
            "secondKey": 26,
            "layout": 3
        },
        {
            "firstKey": 21,
            "secondKey": 27,
            "layout": 3
        },
        {
            "firstKey": 21,
            "secondKey": 28,
            "layout": 3
        },
        {
            "firstKey": 21,
            "secondKey": 29,
            "layout": 5
        },
        {
            "firstKey": 21,
            "secondKey": 30,
            "layout": 5
        },
        {
            "firstKey": 21,
            "secondKey": 31,
            "layout": 5
        },
        {
            "firstKey": 21,
            "secondKey": 32,
            "layout": 5
        },
        {
            "firstKey": 21,
            "secondKey": 33,
            "layout": 5
        },
        {
            "firstKey": 21,
            "secondKey": 34,
            "layout": 5
        },
        {
            "firstKey": 21,
            "secondKey": 35,
            "layout": 5
        },
        {
            "firstKey": 21,
            "secondKey": 36,
            "layout": 5
        },
        {
            "firstKey": 21,
            "secondKey": 37,
            "layout": 5
        },
        {
            "firstKey": 22,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 22,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 22,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 22,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 22,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 22,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 22,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 22,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 22,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 22,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 22,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 22,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 22,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 22,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 22,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 22,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 22,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 22,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 22,
            "secondKey": 18,
            "layout": 3
        },
        {
            "firstKey": 22,
            "secondKey": 19,
            "layout": 3
        },
        {
            "firstKey": 22,
            "secondKey": 20,
            "layout": 3
        },
        {
            "firstKey": 22,
            "secondKey": 21,
            "layout": 3
        },
        {
            "firstKey": 22,
            "secondKey": 23,
            "layout": 3
        },
        {
            "firstKey": 22,
            "secondKey": 24,
            "layout": 3
        },
        {
            "firstKey": 22,
            "secondKey": 25,
            "layout": 3
        },
        {
            "firstKey": 22,
            "secondKey": 26,
            "layout": 3
        },
        {
            "firstKey": 22,
            "secondKey": 27,
            "layout": 3
        },
        {
            "firstKey": 22,
            "secondKey": 28,
            "layout": 3
        },
        {
            "firstKey": 22,
            "secondKey": 29,
            "layout": 5
        },
        {
            "firstKey": 22,
            "secondKey": 30,
            "layout": 5
        },
        {
            "firstKey": 22,
            "secondKey": 31,
            "layout": 5
        },
        {
            "firstKey": 22,
            "secondKey": 32,
            "layout": 5
        },
        {
            "firstKey": 22,
            "secondKey": 33,
            "layout": 5
        },
        {
            "firstKey": 22,
            "secondKey": 34,
            "layout": 5
        },
        {
            "firstKey": 22,
            "secondKey": 35,
            "layout": 5
        },
        {
            "firstKey": 22,
            "secondKey": 36,
            "layout": 5
        },
        {
            "firstKey": 22,
            "secondKey": 37,
            "layout": 5
        },
        {
            "firstKey": 23,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 23,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 23,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 23,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 23,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 23,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 23,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 23,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 23,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 23,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 23,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 23,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 23,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 23,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 23,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 23,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 23,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 23,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 23,
            "secondKey": 18,
            "layout": 3
        },
        {
            "firstKey": 23,
            "secondKey": 19,
            "layout": 3
        },
        {
            "firstKey": 23,
            "secondKey": 20,
            "layout": 3
        },
        {
            "firstKey": 23,
            "secondKey": 21,
            "layout": 3
        },
        {
            "firstKey": 23,
            "secondKey": 22,
            "layout": 3
        },
        {
            "firstKey": 23,
            "secondKey": 24,
            "layout": 3
        },
        {
            "firstKey": 23,
            "secondKey": 25,
            "layout": 3
        },
        {
            "firstKey": 23,
            "secondKey": 26,
            "layout": 3
        },
        {
            "firstKey": 23,
            "secondKey": 27,
            "layout": 3
        },
        {
            "firstKey": 23,
            "secondKey": 28,
            "layout": 3
        },
        {
            "firstKey": 23,
            "secondKey": 29,
            "layout": 5
        },
        {
            "firstKey": 23,
            "secondKey": 30,
            "layout": 5
        },
        {
            "firstKey": 23,
            "secondKey": 31,
            "layout": 5
        },
        {
            "firstKey": 23,
            "secondKey": 32,
            "layout": 5
        },
        {
            "firstKey": 23,
            "secondKey": 33,
            "layout": 5
        },
        {
            "firstKey": 23,
            "secondKey": 34,
            "layout": 5
        },
        {
            "firstKey": 23,
            "secondKey": 35,
            "layout": 5
        },
        {
            "firstKey": 23,
            "secondKey": 36,
            "layout": 5
        },
        {
            "firstKey": 23,
            "secondKey": 37,
            "layout": 5
        },
        {
            "firstKey": 24,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 24,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 24,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 24,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 24,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 24,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 24,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 24,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 24,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 24,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 24,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 24,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 24,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 24,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 24,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 24,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 24,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 24,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 24,
            "secondKey": 18,
            "layout": 3
        },
        {
            "firstKey": 24,
            "secondKey": 19,
            "layout": 3
        },
        {
            "firstKey": 24,
            "secondKey": 20,
            "layout": 3
        },
        {
            "firstKey": 24,
            "secondKey": 21,
            "layout": 3
        },
        {
            "firstKey": 24,
            "secondKey": 22,
            "layout": 3
        },
        {
            "firstKey": 24,
            "secondKey": 23,
            "layout": 3
        },
        {
            "firstKey": 24,
            "secondKey": 25,
            "layout": 3
        },
        {
            "firstKey": 24,
            "secondKey": 26,
            "layout": 3
        },
        {
            "firstKey": 24,
            "secondKey": 27,
            "layout": 3
        },
        {
            "firstKey": 24,
            "secondKey": 28,
            "layout": 3
        },
        {
            "firstKey": 24,
            "secondKey": 29,
            "layout": 5
        },
        {
            "firstKey": 24,
            "secondKey": 30,
            "layout": 5
        },
        {
            "firstKey": 24,
            "secondKey": 31,
            "layout": 5
        },
        {
            "firstKey": 24,
            "secondKey": 32,
            "layout": 5
        },
        {
            "firstKey": 24,
            "secondKey": 33,
            "layout": 5
        },
        {
            "firstKey": 24,
            "secondKey": 34,
            "layout": 5
        },
        {
            "firstKey": 24,
            "secondKey": 35,
            "layout": 5
        },
        {
            "firstKey": 24,
            "secondKey": 36,
            "layout": 5
        },
        {
            "firstKey": 24,
            "secondKey": 37,
            "layout": 5
        },
        {
            "firstKey": 25,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 25,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 25,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 25,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 25,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 18,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 19,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 20,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 21,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 22,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 23,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 24,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 26,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 27,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 28,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 29,
            "layout": 5
        },
        {
            "firstKey": 25,
            "secondKey": 30,
            "layout": 5
        },
        {
            "firstKey": 25,
            "secondKey": 31,
            "layout": 5
        },
        {
            "firstKey": 25,
            "secondKey": 32,
            "layout": 5
        },
        {
            "firstKey": 25,
            "secondKey": 33,
            "layout": 5
        },
        {
            "firstKey": 25,
            "secondKey": 34,
            "layout": 5
        },
        {
            "firstKey": 25,
            "secondKey": 35,
            "layout": 5
        },
        {
            "firstKey": 25,
            "secondKey": 36,
            "layout": 5
        },
        {
            "firstKey": 25,
            "secondKey": 37,
            "layout": 5
        },
        {
            "firstKey": 26,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 26,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 26,
            "secondKey": 2,
            "layout": 7
        },
        {
            "firstKey": 26,
            "secondKey": 3,
            "layout": 7
        },
        {
            "firstKey": 26,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 26,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 26,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 26,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 26,
            "secondKey": 8,
            "layout": 5
        },
        {
            "firstKey": 26,
            "secondKey": 9,
            "layout": 5
        },
        {
            "firstKey": 26,
            "secondKey": 10,
            "layout": 5
        },
        {
            "firstKey": 26,
            "secondKey": 11,
            "layout": 5
        },
        {
            "firstKey": 26,
            "secondKey": 12,
            "layout": 5
        },
        {
            "firstKey": 26,
            "secondKey": 13,
            "layout": 5
        },
        {
            "firstKey": 26,
            "secondKey": 14,
            "layout": 5
        },
        {
            "firstKey": 26,
            "secondKey": 15,
            "layout": 5
        },
        {
            "firstKey": 26,
            "secondKey": 16,
            "layout": 5
        },
        {
            "firstKey": 26,
            "secondKey": 17,
            "layout": 5
        },
        {
            "firstKey": 26,
            "secondKey": 18,
            "layout": 5
        },
        {
            "firstKey": 26,
            "secondKey": 19,
            "layout": 5
        },
        {
            "firstKey": 26,
            "secondKey": 20,
            "layout": 5
        },
        {
            "firstKey": 26,
            "secondKey": 21,
            "layout": 5
        },
        {
            "firstKey": 26,
            "secondKey": 22,
            "layout": 5
        },
        {
            "firstKey": 26,
            "secondKey": 23,
            "layout": 5
        },
        {
            "firstKey": 26,
            "secondKey": 24,
            "layout": 5
        },
        {
            "firstKey": 26,
            "secondKey": 25,
            "layout": 5
        },
        {
            "firstKey": 26,
            "secondKey": 27,
            "layout": 5
        },
        {
            "firstKey": 26,
            "secondKey": 28,
            "layout": 5
        },
        {
            "firstKey": 26,
            "secondKey": 29,
            "layout": 7
        },
        {
            "firstKey": 26,
            "secondKey": 30,
            "layout": 7
        },
        {
            "firstKey": 26,
            "secondKey": 31,
            "layout": 7
        },
        {
            "firstKey": 26,
            "secondKey": 32,
            "layout": 7
        },
        {
            "firstKey": 26,
            "secondKey": 33,
            "layout": 7
        },
        {
            "firstKey": 26,
            "secondKey": 34,
            "layout": 7
        },
        {
            "firstKey": 26,
            "secondKey": 35,
            "layout": 7
        },
        {
            "firstKey": 26,
            "secondKey": 36,
            "layout": 7
        },
        {
            "firstKey": 26,
            "secondKey": 37,
            "layout": 7
        },
        {
            "firstKey": 27,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 27,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 27,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 27,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 27,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 27,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 27,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 27,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 27,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 27,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 27,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 27,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 27,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 27,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 27,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 27,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 27,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 27,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 27,
            "secondKey": 18,
            "layout": 3
        },
        {
            "firstKey": 27,
            "secondKey": 19,
            "layout": 3
        },
        {
            "firstKey": 27,
            "secondKey": 20,
            "layout": 3
        },
        {
            "firstKey": 27,
            "secondKey": 21,
            "layout": 3
        },
        {
            "firstKey": 27,
            "secondKey": 22,
            "layout": 3
        },
        {
            "firstKey": 27,
            "secondKey": 23,
            "layout": 3
        },
        {
            "firstKey": 27,
            "secondKey": 24,
            "layout": 3
        },
        {
            "firstKey": 27,
            "secondKey": 25,
            "layout": 3
        },
        {
            "firstKey": 27,
            "secondKey": 26,
            "layout": 3
        },
        {
            "firstKey": 27,
            "secondKey": 28,
            "layout": 3
        },
        {
            "firstKey": 27,
            "secondKey": 29,
            "layout": 5
        },
        {
            "firstKey": 27,
            "secondKey": 30,
            "layout": 5
        },
        {
            "firstKey": 27,
            "secondKey": 31,
            "layout": 5
        },
        {
            "firstKey": 27,
            "secondKey": 32,
            "layout": 5
        },
        {
            "firstKey": 27,
            "secondKey": 33,
            "layout": 5
        },
        {
            "firstKey": 27,
            "secondKey": 34,
            "layout": 5
        },
        {
            "firstKey": 27,
            "secondKey": 35,
            "layout": 5
        },
        {
            "firstKey": 27,
            "secondKey": 36,
            "layout": 5
        },
        {
            "firstKey": 27,
            "secondKey": 37,
            "layout": 5
        },
        {
            "firstKey": 28,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 28,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 28,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 28,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 28,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 28,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 28,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 28,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 28,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 28,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 28,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 28,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 28,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 28,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 28,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 28,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 28,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 28,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 28,
            "secondKey": 18,
            "layout": 3
        },
        {
            "firstKey": 28,
            "secondKey": 19,
            "layout": 3
        },
        {
            "firstKey": 28,
            "secondKey": 20,
            "layout": 3
        },
        {
            "firstKey": 28,
            "secondKey": 21,
            "layout": 3
        },
        {
            "firstKey": 28,
            "secondKey": 22,
            "layout": 3
        },
        {
            "firstKey": 28,
            "secondKey": 23,
            "layout": 3
        },
        {
            "firstKey": 28,
            "secondKey": 24,
            "layout": 3
        },
        {
            "firstKey": 28,
            "secondKey": 25,
            "layout": 3
        },
        {
            "firstKey": 28,
            "secondKey": 26,
            "layout": 3
        },
        {
            "firstKey": 28,
            "secondKey": 27,
            "layout": 3
        },
        {
            "firstKey": 28,
            "secondKey": 29,
            "layout": 5
        },
        {
            "firstKey": 28,
            "secondKey": 30,
            "layout": 5
        },
        {
            "firstKey": 28,
            "secondKey": 31,
            "layout": 5
        },
        {
            "firstKey": 28,
            "secondKey": 32,
            "layout": 5
        },
        {
            "firstKey": 28,
            "secondKey": 33,
            "layout": 5
        },
        {
            "firstKey": 28,
            "secondKey": 34,
            "layout": 5
        },
        {
            "firstKey": 28,
            "secondKey": 35,
            "layout": 5
        },
        {
            "firstKey": 28,
            "secondKey": 36,
            "layout": 5
        },
        {
            "firstKey": 28,
            "secondKey": 37,
            "layout": 5
        },
        {
            "firstKey": 29,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 29,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 29,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 29,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 29,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 29,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 29,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 29,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 29,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 29,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 29,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 29,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 29,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 29,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 29,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 29,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 29,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 29,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 29,
            "secondKey": 18,
            "layout": 3
        },
        {
            "firstKey": 29,
            "secondKey": 19,
            "layout": 3
        },
        {
            "firstKey": 29,
            "secondKey": 20,
            "layout": 3
        },
        {
            "firstKey": 29,
            "secondKey": 21,
            "layout": 3
        },
        {
            "firstKey": 29,
            "secondKey": 22,
            "layout": 3
        },
        {
            "firstKey": 29,
            "secondKey": 23,
            "layout": 3
        },
        {
            "firstKey": 29,
            "secondKey": 24,
            "layout": 3
        },
        {
            "firstKey": 29,
            "secondKey": 25,
            "layout": 3
        },
        {
            "firstKey": 29,
            "secondKey": 26,
            "layout": 3
        },
        {
            "firstKey": 29,
            "secondKey": 27,
            "layout": 3
        },
        {
            "firstKey": 29,
            "secondKey": 28,
            "layout": 3
        },
        {
            "firstKey": 29,
            "secondKey": 30,
            "layout": 3
        },
        {
            "firstKey": 29,
            "secondKey": 31,
            "layout": 3
        },
        {
            "firstKey": 29,
            "secondKey": 32,
            "layout": 3
        },
        {
            "firstKey": 29,
            "secondKey": 33,
            "layout": 3
        },
        {
            "firstKey": 29,
            "secondKey": 34,
            "layout": 3
        },
        {
            "firstKey": 29,
            "secondKey": 35,
            "layout": 3
        },
        {
            "firstKey": 29,
            "secondKey": 36,
            "layout": 3
        },
        {
            "firstKey": 29,
            "secondKey": 37,
            "layout": 3
        },
        {
            "firstKey": 30,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 30,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 30,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 30,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 30,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 30,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 30,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 30,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 30,
            "secondKey": 8,
            "layout": 5
        },
        {
            "firstKey": 30,
            "secondKey": 9,
            "layout": 5
        },
        {
            "firstKey": 30,
            "secondKey": 10,
            "layout": 5
        },
        {
            "firstKey": 30,
            "secondKey": 11,
            "layout": 5
        },
        {
            "firstKey": 30,
            "secondKey": 12,
            "layout": 5
        },
        {
            "firstKey": 30,
            "secondKey": 13,
            "layout": 5
        },
        {
            "firstKey": 30,
            "secondKey": 14,
            "layout": 5
        },
        {
            "firstKey": 30,
            "secondKey": 15,
            "layout": 5
        },
        {
            "firstKey": 30,
            "secondKey": 16,
            "layout": 5
        },
        {
            "firstKey": 30,
            "secondKey": 17,
            "layout": 5
        },
        {
            "firstKey": 30,
            "secondKey": 18,
            "layout": 5
        },
        {
            "firstKey": 30,
            "secondKey": 19,
            "layout": 5
        },
        {
            "firstKey": 30,
            "secondKey": 20,
            "layout": 5
        },
        {
            "firstKey": 30,
            "secondKey": 21,
            "layout": 5
        },
        {
            "firstKey": 30,
            "secondKey": 22,
            "layout": 5
        },
        {
            "firstKey": 30,
            "secondKey": 23,
            "layout": 5
        },
        {
            "firstKey": 30,
            "secondKey": 24,
            "layout": 5
        },
        {
            "firstKey": 30,
            "secondKey": 25,
            "layout": 5
        },
        {
            "firstKey": 30,
            "secondKey": 26,
            "layout": 5
        },
        {
            "firstKey": 30,
            "secondKey": 27,
            "layout": 5
        },
        {
            "firstKey": 30,
            "secondKey": 28,
            "layout": 5
        },
        {
            "firstKey": 30,
            "secondKey": 29,
            "layout": 5
        },
        {
            "firstKey": 30,
            "secondKey": 31,
            "layout": 5
        },
        {
            "firstKey": 30,
            "secondKey": 32,
            "layout": 5
        },
        {
            "firstKey": 30,
            "secondKey": 33,
            "layout": 5
        },
        {
            "firstKey": 30,
            "secondKey": 34,
            "layout": 5
        },
        {
            "firstKey": 30,
            "secondKey": 35,
            "layout": 5
        },
        {
            "firstKey": 30,
            "secondKey": 36,
            "layout": 5
        },
        {
            "firstKey": 30,
            "secondKey": 37,
            "layout": 5
        },
        {
            "firstKey": 31,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 31,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 31,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 31,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 31,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 31,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 31,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 31,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 31,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 31,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 31,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 31,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 31,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 31,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 31,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 31,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 31,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 31,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 31,
            "secondKey": 18,
            "layout": 3
        },
        {
            "firstKey": 31,
            "secondKey": 19,
            "layout": 3
        },
        {
            "firstKey": 31,
            "secondKey": 20,
            "layout": 3
        },
        {
            "firstKey": 31,
            "secondKey": 21,
            "layout": 3
        },
        {
            "firstKey": 31,
            "secondKey": 22,
            "layout": 3
        },
        {
            "firstKey": 31,
            "secondKey": 23,
            "layout": 3
        },
        {
            "firstKey": 31,
            "secondKey": 24,
            "layout": 3
        },
        {
            "firstKey": 31,
            "secondKey": 25,
            "layout": 3
        },
        {
            "firstKey": 31,
            "secondKey": 26,
            "layout": 3
        },
        {
            "firstKey": 31,
            "secondKey": 27,
            "layout": 3
        },
        {
            "firstKey": 31,
            "secondKey": 28,
            "layout": 3
        },
        {
            "firstKey": 31,
            "secondKey": 29,
            "layout": 3
        },
        {
            "firstKey": 31,
            "secondKey": 30,
            "layout": 3
        },
        {
            "firstKey": 31,
            "secondKey": 32,
            "layout": 3
        },
        {
            "firstKey": 31,
            "secondKey": 33,
            "layout": 3
        },
        {
            "firstKey": 31,
            "secondKey": 34,
            "layout": 3
        },
        {
            "firstKey": 31,
            "secondKey": 35,
            "layout": 3
        },
        {
            "firstKey": 31,
            "secondKey": 36,
            "layout": 3
        },
        {
            "firstKey": 31,
            "secondKey": 37,
            "layout": 3
        },
        {
            "firstKey": 32,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 32,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 32,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 32,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 32,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 32,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 32,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 32,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 32,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 32,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 32,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 32,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 32,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 32,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 32,
            "secondKey": 14,
            "layout": 4
        },
        {
            "firstKey": 32,
            "secondKey": 15,
            "layout": 4
        },
        {
            "firstKey": 32,
            "secondKey": 16,
            "layout": 4
        },
        {
            "firstKey": 32,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 32,
            "secondKey": 18,
            "layout": 4
        },
        {
            "firstKey": 32,
            "secondKey": 19,
            "layout": 4
        },
        {
            "firstKey": 32,
            "secondKey": 20,
            "layout": 4
        },
        {
            "firstKey": 32,
            "secondKey": 21,
            "layout": 4
        },
        {
            "firstKey": 32,
            "secondKey": 22,
            "layout": 4
        },
        {
            "firstKey": 32,
            "secondKey": 23,
            "layout": 4
        },
        {
            "firstKey": 32,
            "secondKey": 24,
            "layout": 4
        },
        {
            "firstKey": 32,
            "secondKey": 25,
            "layout": 4
        },
        {
            "firstKey": 32,
            "secondKey": 26,
            "layout": 4
        },
        {
            "firstKey": 32,
            "secondKey": 27,
            "layout": 4
        },
        {
            "firstKey": 32,
            "secondKey": 28,
            "layout": 4
        },
        {
            "firstKey": 32,
            "secondKey": 29,
            "layout": 4
        },
        {
            "firstKey": 32,
            "secondKey": 30,
            "layout": 4
        },
        {
            "firstKey": 32,
            "secondKey": 31,
            "layout": 4
        },
        {
            "firstKey": 32,
            "secondKey": 33,
            "layout": 4
        },
        {
            "firstKey": 32,
            "secondKey": 34,
            "layout": 4
        },
        {
            "firstKey": 32,
            "secondKey": 35,
            "layout": 4
        },
        {
            "firstKey": 32,
            "secondKey": 36,
            "layout": 4
        },
        {
            "firstKey": 32,
            "secondKey": 37,
            "layout": 4
        },
        {
            "firstKey": 33,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 33,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 33,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 33,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 33,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 33,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 33,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 33,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 33,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 33,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 33,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 33,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 33,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 33,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 33,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 33,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 33,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 33,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 33,
            "secondKey": 18,
            "layout": 3
        },
        {
            "firstKey": 33,
            "secondKey": 19,
            "layout": 3
        },
        {
            "firstKey": 33,
            "secondKey": 20,
            "layout": 3
        },
        {
            "firstKey": 33,
            "secondKey": 21,
            "layout": 3
        },
        {
            "firstKey": 33,
            "secondKey": 22,
            "layout": 3
        },
        {
            "firstKey": 33,
            "secondKey": 23,
            "layout": 3
        },
        {
            "firstKey": 33,
            "secondKey": 24,
            "layout": 3
        },
        {
            "firstKey": 33,
            "secondKey": 25,
            "layout": 3
        },
        {
            "firstKey": 33,
            "secondKey": 26,
            "layout": 3
        },
        {
            "firstKey": 33,
            "secondKey": 27,
            "layout": 3
        },
        {
            "firstKey": 33,
            "secondKey": 28,
            "layout": 3
        },
        {
            "firstKey": 33,
            "secondKey": 29,
            "layout": 3
        },
        {
            "firstKey": 33,
            "secondKey": 30,
            "layout": 3
        },
        {
            "firstKey": 33,
            "secondKey": 31,
            "layout": 3
        },
        {
            "firstKey": 33,
            "secondKey": 32,
            "layout": 3
        },
        {
            "firstKey": 33,
            "secondKey": 34,
            "layout": 3
        },
        {
            "firstKey": 33,
            "secondKey": 35,
            "layout": 3
        },
        {
            "firstKey": 33,
            "secondKey": 36,
            "layout": 3
        },
        {
            "firstKey": 33,
            "secondKey": 37,
            "layout": 3
        },
        {
            "firstKey": 34,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 34,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 34,
            "secondKey": 2,
            "layout": 7
        },
        {
            "firstKey": 34,
            "secondKey": 3,
            "layout": 7
        },
        {
            "firstKey": 34,
            "secondKey": 4,
            "layout": 7
        },
        {
            "firstKey": 34,
            "secondKey": 5,
            "layout": 7
        },
        {
            "firstKey": 34,
            "secondKey": 6,
            "layout": 7
        },
        {
            "firstKey": 34,
            "secondKey": 7,
            "layout": 7
        },
        {
            "firstKey": 34,
            "secondKey": 8,
            "layout": 7
        },
        {
            "firstKey": 34,
            "secondKey": 9,
            "layout": 7
        },
        {
            "firstKey": 34,
            "secondKey": 10,
            "layout": 7
        },
        {
            "firstKey": 34,
            "secondKey": 11,
            "layout": 7
        },
        {
            "firstKey": 34,
            "secondKey": 12,
            "layout": 7
        },
        {
            "firstKey": 34,
            "secondKey": 13,
            "layout": 7
        },
        {
            "firstKey": 34,
            "secondKey": 14,
            "layout": 7
        },
        {
            "firstKey": 34,
            "secondKey": 15,
            "layout": 7
        },
        {
            "firstKey": 34,
            "secondKey": 16,
            "layout": 7
        },
        {
            "firstKey": 34,
            "secondKey": 17,
            "layout": 7
        },
        {
            "firstKey": 34,
            "secondKey": 18,
            "layout": 7
        },
        {
            "firstKey": 34,
            "secondKey": 19,
            "layout": 7
        },
        {
            "firstKey": 34,
            "secondKey": 20,
            "layout": 7
        },
        {
            "firstKey": 34,
            "secondKey": 21,
            "layout": 7
        },
        {
            "firstKey": 34,
            "secondKey": 22,
            "layout": 7
        },
        {
            "firstKey": 34,
            "secondKey": 23,
            "layout": 7
        },
        {
            "firstKey": 34,
            "secondKey": 24,
            "layout": 7
        },
        {
            "firstKey": 34,
            "secondKey": 25,
            "layout": 7
        },
        {
            "firstKey": 34,
            "secondKey": 26,
            "layout": 7
        },
        {
            "firstKey": 34,
            "secondKey": 27,
            "layout": 7
        },
        {
            "firstKey": 34,
            "secondKey": 28,
            "layout": 7
        },
        {
            "firstKey": 34,
            "secondKey": 29,
            "layout": 7
        },
        {
            "firstKey": 34,
            "secondKey": 30,
            "layout": 7
        },
        {
            "firstKey": 34,
            "secondKey": 31,
            "layout": 7
        },
        {
            "firstKey": 34,
            "secondKey": 32,
            "layout": 7
        },
        {
            "firstKey": 34,
            "secondKey": 33,
            "layout": 7
        },
        {
            "firstKey": 34,
            "secondKey": 35,
            "layout": 5
        },
        {
            "firstKey": 34,
            "secondKey": 36,
            "layout": 7
        },
        {
            "firstKey": 34,
            "secondKey": 37,
            "layout": 7
        },
        {
            "firstKey": 35,
            "secondKey": 0,
            "layout": 10
        },
        {
            "firstKey": 35,
            "secondKey": 1,
            "layout": 10
        },
        {
            "firstKey": 35,
            "secondKey": 2,
            "layout": 10
        },
        {
            "firstKey": 35,
            "secondKey": 3,
            "layout": 10
        },
        {
            "firstKey": 35,
            "secondKey": 4,
            "layout": 10
        },
        {
            "firstKey": 35,
            "secondKey": 5,
            "layout": 10
        },
        {
            "firstKey": 35,
            "secondKey": 6,
            "layout": 10
        },
        {
            "firstKey": 35,
            "secondKey": 7,
            "layout": 10
        },
        {
            "firstKey": 35,
            "secondKey": 8,
            "layout": 10
        },
        {
            "firstKey": 35,
            "secondKey": 9,
            "layout": 10
        },
        {
            "firstKey": 35,
            "secondKey": 10,
            "layout": 10
        },
        {
            "firstKey": 35,
            "secondKey": 11,
            "layout": 10
        },
        {
            "firstKey": 35,
            "secondKey": 12,
            "layout": 10
        },
        {
            "firstKey": 35,
            "secondKey": 13,
            "layout": 10
        },
        {
            "firstKey": 35,
            "secondKey": 14,
            "layout": 10
        },
        {
            "firstKey": 35,
            "secondKey": 15,
            "layout": 10
        },
        {
            "firstKey": 35,
            "secondKey": 16,
            "layout": 10
        },
        {
            "firstKey": 35,
            "secondKey": 17,
            "layout": 10
        },
        {
            "firstKey": 35,
            "secondKey": 18,
            "layout": 10
        },
        {
            "firstKey": 35,
            "secondKey": 19,
            "layout": 10
        },
        {
            "firstKey": 35,
            "secondKey": 20,
            "layout": 10
        },
        {
            "firstKey": 35,
            "secondKey": 21,
            "layout": 10
        },
        {
            "firstKey": 35,
            "secondKey": 22,
            "layout": 10
        },
        {
            "firstKey": 35,
            "secondKey": 23,
            "layout": 10
        },
        {
            "firstKey": 35,
            "secondKey": 24,
            "layout": 10
        },
        {
            "firstKey": 35,
            "secondKey": 25,
            "layout": 10
        },
        {
            "firstKey": 35,
            "secondKey": 26,
            "layout": 10
        },
        {
            "firstKey": 35,
            "secondKey": 27,
            "layout": 10
        },
        {
            "firstKey": 35,
            "secondKey": 28,
            "layout": 10
        },
        {
            "firstKey": 35,
            "secondKey": 29,
            "layout": 10
        },
        {
            "firstKey": 35,
            "secondKey": 30,
            "layout": 10
        },
        {
            "firstKey": 35,
            "secondKey": 31,
            "layout": 10
        },
        {
            "firstKey": 35,
            "secondKey": 32,
            "layout": 10
        },
        {
            "firstKey": 35,
            "secondKey": 33,
            "layout": 10
        },
        {
            "firstKey": 35,
            "secondKey": 34,
            "layout": 8
        },
        {
            "firstKey": 35,
            "secondKey": 36,
            "layout": 10
        },
        {
            "firstKey": 35,
            "secondKey": 37,
            "layout": 10
        },
        {
            "firstKey": 36,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 36,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 36,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 36,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 36,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 36,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 36,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 36,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 36,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 36,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 36,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 36,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 36,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 36,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 36,
            "secondKey": 14,
            "layout": 4
        },
        {
            "firstKey": 36,
            "secondKey": 15,
            "layout": 4
        },
        {
            "firstKey": 36,
            "secondKey": 16,
            "layout": 4
        },
        {
            "firstKey": 36,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 36,
            "secondKey": 18,
            "layout": 4
        },
        {
            "firstKey": 36,
            "secondKey": 19,
            "layout": 4
        },
        {
            "firstKey": 36,
            "secondKey": 20,
            "layout": 4
        },
        {
            "firstKey": 36,
            "secondKey": 21,
            "layout": 4
        },
        {
            "firstKey": 36,
            "secondKey": 22,
            "layout": 4
        },
        {
            "firstKey": 36,
            "secondKey": 23,
            "layout": 4
        },
        {
            "firstKey": 36,
            "secondKey": 24,
            "layout": 4
        },
        {
            "firstKey": 36,
            "secondKey": 25,
            "layout": 4
        },
        {
            "firstKey": 36,
            "secondKey": 26,
            "layout": 4
        },
        {
            "firstKey": 36,
            "secondKey": 27,
            "layout": 4
        },
        {
            "firstKey": 36,
            "secondKey": 28,
            "layout": 4
        },
        {
            "firstKey": 36,
            "secondKey": 29,
            "layout": 4
        },
        {
            "firstKey": 36,
            "secondKey": 30,
            "layout": 4
        },
        {
            "firstKey": 36,
            "secondKey": 31,
            "layout": 4
        },
        {
            "firstKey": 36,
            "secondKey": 32,
            "layout": 4
        },
        {
            "firstKey": 36,
            "secondKey": 33,
            "layout": 4
        },
        {
            "firstKey": 36,
            "secondKey": 34,
            "layout": 4
        },
        {
            "firstKey": 36,
            "secondKey": 35,
            "layout": 4
        },
        {
            "firstKey": 36,
            "secondKey": 37,
            "layout": 4
        },
        {
            "firstKey": 37,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 37,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 37,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 37,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 37,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 37,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 37,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 37,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 37,
            "secondKey": 8,
            "layout": 5
        },
        {
            "firstKey": 37,
            "secondKey": 9,
            "layout": 5
        },
        {
            "firstKey": 37,
            "secondKey": 10,
            "layout": 5
        },
        {
            "firstKey": 37,
            "secondKey": 11,
            "layout": 5
        },
        {
            "firstKey": 37,
            "secondKey": 12,
            "layout": 5
        },
        {
            "firstKey": 37,
            "secondKey": 13,
            "layout": 5
        },
        {
            "firstKey": 37,
            "secondKey": 14,
            "layout": 5
        },
        {
            "firstKey": 37,
            "secondKey": 15,
            "layout": 5
        },
        {
            "firstKey": 37,
            "secondKey": 16,
            "layout": 5
        },
        {
            "firstKey": 37,
            "secondKey": 17,
            "layout": 5
        },
        {
            "firstKey": 37,
            "secondKey": 18,
            "layout": 5
        },
        {
            "firstKey": 37,
            "secondKey": 19,
            "layout": 5
        },
        {
            "firstKey": 37,
            "secondKey": 20,
            "layout": 5
        },
        {
            "firstKey": 37,
            "secondKey": 21,
            "layout": 5
        },
        {
            "firstKey": 37,
            "secondKey": 22,
            "layout": 5
        },
        {
            "firstKey": 37,
            "secondKey": 23,
            "layout": 5
        },
        {
            "firstKey": 37,
            "secondKey": 24,
            "layout": 5
        },
        {
            "firstKey": 37,
            "secondKey": 25,
            "layout": 5
        },
        {
            "firstKey": 37,
            "secondKey": 26,
            "layout": 5
        },
        {
            "firstKey": 37,
            "secondKey": 27,
            "layout": 5
        },
        {
            "firstKey": 37,
            "secondKey": 28,
            "layout": 5
        },
        {
            "firstKey": 37,
            "secondKey": 29,
            "layout": 5
        },
        {
            "firstKey": 37,
            "secondKey": 30,
            "layout": 5
        },
        {
            "firstKey": 37,
            "secondKey": 31,
            "layout": 5
        },
        {
            "firstKey": 37,
            "secondKey": 32,
            "layout": 5
        },
        {
            "firstKey": 37,
            "secondKey": 33,
            "layout": 5
        },
        {
            "firstKey": 37,
            "secondKey": 34,
            "layout": 5
        },
        {
            "firstKey": 37,
            "secondKey": 35,
            "layout": 5
        },
        {
            "firstKey": 37,
            "secondKey": 36,
            "layout": 5
        }
    ]
}