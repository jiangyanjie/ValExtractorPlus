{
    "id": 1352,
    "expression": "context",
    "projectName": "jackrabbit-oak",
    "commitID": "ee1f53c6b27a4876f5d788bc4562702ea82370df",
    "filePath": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/SegmentNodeStoreService.java",
    "occurrences": 11,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "context",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 138,
                "startColumnNumber": 11,
                "endLineNumber": 138,
                "endColumnNumber": 18
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 15,
                        "startLineNumber": 138,
                        "startColumnNumber": 11,
                        "endLineNumber": 138,
                        "endColumnNumber": 26
                    },
                    "nodeContext": "context == null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 139,
                        "startLineNumber": 138,
                        "startColumnNumber": 8,
                        "endLineNumber": 141,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (context == null) {\n  log.info(\"Component still not activated. Ignoring the initialization call\");\n  return;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 11,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3685,
                        "startLineNumber": 137,
                        "startColumnNumber": 31,
                        "endLineNumber": 222,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (context == null) {\n    log.info(\"Component still not activated. Ignoring the initialization call\");\n    return;\n  }\n  Dictionary<?,?> properties=context.getProperties();\n  name=String.valueOf(properties.get(NAME));\n  String directory=lookup(context,DIRECTORY);\n  if (directory == null) {\n    directory=\"tarmk\";\n  }\n else {\n    directory=FilenameUtils.concat(directory,\"segmentstore\");\n  }\n  String mode=lookup(context,MODE);\n  if (mode == null) {\n    mode=System.getProperty(MODE,System.getProperty(\"sun.arch.data.model\",\"32\"));\n  }\n  String size=lookup(context,SIZE);\n  if (size == null) {\n    size=System.getProperty(SIZE,\"256\");\n  }\n  boolean pauseCompaction=toBoolean(lookup(context,PAUSE_COMPACTION),true);\n  boolean memoryMapping=\"64\".equals(mode);\n  if (customBlobStore) {\n    log.info(\"Initializing SegmentNodeStore with BlobStore [{}]\",blobStore);\n    store=new FileStore(blobStore,new File(directory),Integer.parseInt(size),memoryMapping).setPauseCompaction(pauseCompaction);\n  }\n else {\n    store=new FileStore(new File(directory),Integer.parseInt(size),memoryMapping).setPauseCompaction(pauseCompaction);\n  }\n  delegate=new SegmentNodeStore(store);\n  observerTracker=new ObserverTracker(delegate);\n  observerTracker.start(context.getBundleContext());\n  Dictionary<String,String> props=new Hashtable<String,String>();\n  props.put(Constants.SERVICE_PID,SegmentNodeStore.class.getName());\n  boolean standby=toBoolean(lookup(context,STANDBY),false);\n  providerRegistration=context.getBundleContext().registerService(SegmentStoreProvider.class.getName(),this,props);\n  if (!standby) {\n    storeRegistration=context.getBundleContext().registerService(NodeStore.class.getName(),this,props);\n  }\n  OsgiWhiteboard whiteboard=new OsgiWhiteboard(context.getBundleContext());\n  executor=new WhiteboardExecutor();\n  executor.start(whiteboard);\n  checkpointRegistration=registerMBean(whiteboard,CheckpointMBean.class,new SegmentCheckpointMBean(delegate),CheckpointMBean.TYPE,\"Segment node store checkpoint management\");\n  RevisionGC revisionGC=new RevisionGC(new Runnable(){\n    @Override public void run(){\n      store.gc();\n    }\n  }\n,executor);\n  revisionGCRegistration=registerMBean(whiteboard,RevisionGCMBean.class,revisionGC,RevisionGCMBean.TYPE,\"Segment node store revision garbage collection\");\n  if (store.getBlobStore() instanceof GarbageCollectableBlobStore) {\n    BlobGarbageCollector gc=new BlobGarbageCollector(){\n      @Override public void collectGarbage() throws Exception {\n        MarkSweepGarbageCollector gc=new MarkSweepGarbageCollector(new SegmentBlobReferenceRetriever(store.getTracker()),(GarbageCollectableBlobStore)store.getBlobStore(),executor);\n        gc.collectGarbage();\n      }\n    }\n;\n    blobGCRegistration=registerMBean(whiteboard,BlobGCMBean.class,new BlobGC(gc,executor),BlobGCMBean.TYPE,\"Segment node store blob garbage collection\");\n  }\n  log.info(\"SegmentNodeStore initialized\");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 421,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3761,
                        "startLineNumber": 136,
                        "startColumnNumber": 4,
                        "endLineNumber": 222,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "public synchronized void registerNodeStore() throws IOException {\n  if (context == null) {\n    log.info(\"Component still not activated. Ignoring the initialization call\");\n    return;\n  }\n  Dictionary<?,?> properties=context.getProperties();\n  name=String.valueOf(properties.get(NAME));\n  String directory=lookup(context,DIRECTORY);\n  if (directory == null) {\n    directory=\"tarmk\";\n  }\n else {\n    directory=FilenameUtils.concat(directory,\"segmentstore\");\n  }\n  String mode=lookup(context,MODE);\n  if (mode == null) {\n    mode=System.getProperty(MODE,System.getProperty(\"sun.arch.data.model\",\"32\"));\n  }\n  String size=lookup(context,SIZE);\n  if (size == null) {\n    size=System.getProperty(SIZE,\"256\");\n  }\n  boolean pauseCompaction=toBoolean(lookup(context,PAUSE_COMPACTION),true);\n  boolean memoryMapping=\"64\".equals(mode);\n  if (customBlobStore) {\n    log.info(\"Initializing SegmentNodeStore with BlobStore [{}]\",blobStore);\n    store=new FileStore(blobStore,new File(directory),Integer.parseInt(size),memoryMapping).setPauseCompaction(pauseCompaction);\n  }\n else {\n    store=new FileStore(new File(directory),Integer.parseInt(size),memoryMapping).setPauseCompaction(pauseCompaction);\n  }\n  delegate=new SegmentNodeStore(store);\n  observerTracker=new ObserverTracker(delegate);\n  observerTracker.start(context.getBundleContext());\n  Dictionary<String,String> props=new Hashtable<String,String>();\n  props.put(Constants.SERVICE_PID,SegmentNodeStore.class.getName());\n  boolean standby=toBoolean(lookup(context,STANDBY),false);\n  providerRegistration=context.getBundleContext().registerService(SegmentStoreProvider.class.getName(),this,props);\n  if (!standby) {\n    storeRegistration=context.getBundleContext().registerService(NodeStore.class.getName(),this,props);\n  }\n  OsgiWhiteboard whiteboard=new OsgiWhiteboard(context.getBundleContext());\n  executor=new WhiteboardExecutor();\n  executor.start(whiteboard);\n  checkpointRegistration=registerMBean(whiteboard,CheckpointMBean.class,new SegmentCheckpointMBean(delegate),CheckpointMBean.TYPE,\"Segment node store checkpoint management\");\n  RevisionGC revisionGC=new RevisionGC(new Runnable(){\n    @Override public void run(){\n      store.gc();\n    }\n  }\n,executor);\n  revisionGCRegistration=registerMBean(whiteboard,RevisionGCMBean.class,revisionGC,RevisionGCMBean.TYPE,\"Segment node store revision garbage collection\");\n  if (store.getBlobStore() instanceof GarbageCollectableBlobStore) {\n    BlobGarbageCollector gc=new BlobGarbageCollector(){\n      @Override public void collectGarbage() throws Exception {\n        MarkSweepGarbageCollector gc=new MarkSweepGarbageCollector(new SegmentBlobReferenceRetriever(store.getTracker()),(GarbageCollectableBlobStore)store.getBlobStore(),executor);\n        gc.collectGarbage();\n      }\n    }\n;\n    blobGCRegistration=registerMBean(whiteboard,BlobGCMBean.class,new BlobGC(gc,executor),BlobGCMBean.TYPE,\"Segment node store blob garbage collection\");\n  }\n  log.info(\"SegmentNodeStore initialized\");\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 428,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 15,
                    "startLineNumber": 138,
                    "startColumnNumber": 11,
                    "endLineNumber": 138,
                    "endColumnNumber": 26
                },
                "nodeContext": "context == null",
                "nodeType": "InfixExpression",
                "astNodeNumber": 3,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "org.apache.jackrabbit.oak.plugins.segment.ComponentContext"
        },
        {
            "nodeContext": "context",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 143,
                "startColumnNumber": 38,
                "endLineNumber": 143,
                "endColumnNumber": 45
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 23,
                        "startLineNumber": 143,
                        "startColumnNumber": 38,
                        "endLineNumber": 143,
                        "endColumnNumber": 61
                    },
                    "nodeContext": "context.getProperties()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 36,
                        "startLineNumber": 143,
                        "startColumnNumber": 25,
                        "endLineNumber": 143,
                        "endColumnNumber": 61
                    },
                    "nodeContext": "properties=context.getProperties()",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 54,
                        "startLineNumber": 143,
                        "startColumnNumber": 8,
                        "endLineNumber": 143,
                        "endColumnNumber": 62
                    },
                    "nodeContext": "Dictionary<?,?> properties=context.getProperties();\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3685,
                        "startLineNumber": 137,
                        "startColumnNumber": 31,
                        "endLineNumber": 222,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (context == null) {\n    log.info(\"Component still not activated. Ignoring the initialization call\");\n    return;\n  }\n  Dictionary<?,?> properties=context.getProperties();\n  name=String.valueOf(properties.get(NAME));\n  String directory=lookup(context,DIRECTORY);\n  if (directory == null) {\n    directory=\"tarmk\";\n  }\n else {\n    directory=FilenameUtils.concat(directory,\"segmentstore\");\n  }\n  String mode=lookup(context,MODE);\n  if (mode == null) {\n    mode=System.getProperty(MODE,System.getProperty(\"sun.arch.data.model\",\"32\"));\n  }\n  String size=lookup(context,SIZE);\n  if (size == null) {\n    size=System.getProperty(SIZE,\"256\");\n  }\n  boolean pauseCompaction=toBoolean(lookup(context,PAUSE_COMPACTION),true);\n  boolean memoryMapping=\"64\".equals(mode);\n  if (customBlobStore) {\n    log.info(\"Initializing SegmentNodeStore with BlobStore [{}]\",blobStore);\n    store=new FileStore(blobStore,new File(directory),Integer.parseInt(size),memoryMapping).setPauseCompaction(pauseCompaction);\n  }\n else {\n    store=new FileStore(new File(directory),Integer.parseInt(size),memoryMapping).setPauseCompaction(pauseCompaction);\n  }\n  delegate=new SegmentNodeStore(store);\n  observerTracker=new ObserverTracker(delegate);\n  observerTracker.start(context.getBundleContext());\n  Dictionary<String,String> props=new Hashtable<String,String>();\n  props.put(Constants.SERVICE_PID,SegmentNodeStore.class.getName());\n  boolean standby=toBoolean(lookup(context,STANDBY),false);\n  providerRegistration=context.getBundleContext().registerService(SegmentStoreProvider.class.getName(),this,props);\n  if (!standby) {\n    storeRegistration=context.getBundleContext().registerService(NodeStore.class.getName(),this,props);\n  }\n  OsgiWhiteboard whiteboard=new OsgiWhiteboard(context.getBundleContext());\n  executor=new WhiteboardExecutor();\n  executor.start(whiteboard);\n  checkpointRegistration=registerMBean(whiteboard,CheckpointMBean.class,new SegmentCheckpointMBean(delegate),CheckpointMBean.TYPE,\"Segment node store checkpoint management\");\n  RevisionGC revisionGC=new RevisionGC(new Runnable(){\n    @Override public void run(){\n      store.gc();\n    }\n  }\n,executor);\n  revisionGCRegistration=registerMBean(whiteboard,RevisionGCMBean.class,revisionGC,RevisionGCMBean.TYPE,\"Segment node store revision garbage collection\");\n  if (store.getBlobStore() instanceof GarbageCollectableBlobStore) {\n    BlobGarbageCollector gc=new BlobGarbageCollector(){\n      @Override public void collectGarbage() throws Exception {\n        MarkSweepGarbageCollector gc=new MarkSweepGarbageCollector(new SegmentBlobReferenceRetriever(store.getTracker()),(GarbageCollectableBlobStore)store.getBlobStore(),executor);\n        gc.collectGarbage();\n      }\n    }\n;\n    blobGCRegistration=registerMBean(whiteboard,BlobGCMBean.class,new BlobGC(gc,executor),BlobGCMBean.TYPE,\"Segment node store blob garbage collection\");\n  }\n  log.info(\"SegmentNodeStore initialized\");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 421,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3761,
                        "startLineNumber": 136,
                        "startColumnNumber": 4,
                        "endLineNumber": 222,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "public synchronized void registerNodeStore() throws IOException {\n  if (context == null) {\n    log.info(\"Component still not activated. Ignoring the initialization call\");\n    return;\n  }\n  Dictionary<?,?> properties=context.getProperties();\n  name=String.valueOf(properties.get(NAME));\n  String directory=lookup(context,DIRECTORY);\n  if (directory == null) {\n    directory=\"tarmk\";\n  }\n else {\n    directory=FilenameUtils.concat(directory,\"segmentstore\");\n  }\n  String mode=lookup(context,MODE);\n  if (mode == null) {\n    mode=System.getProperty(MODE,System.getProperty(\"sun.arch.data.model\",\"32\"));\n  }\n  String size=lookup(context,SIZE);\n  if (size == null) {\n    size=System.getProperty(SIZE,\"256\");\n  }\n  boolean pauseCompaction=toBoolean(lookup(context,PAUSE_COMPACTION),true);\n  boolean memoryMapping=\"64\".equals(mode);\n  if (customBlobStore) {\n    log.info(\"Initializing SegmentNodeStore with BlobStore [{}]\",blobStore);\n    store=new FileStore(blobStore,new File(directory),Integer.parseInt(size),memoryMapping).setPauseCompaction(pauseCompaction);\n  }\n else {\n    store=new FileStore(new File(directory),Integer.parseInt(size),memoryMapping).setPauseCompaction(pauseCompaction);\n  }\n  delegate=new SegmentNodeStore(store);\n  observerTracker=new ObserverTracker(delegate);\n  observerTracker.start(context.getBundleContext());\n  Dictionary<String,String> props=new Hashtable<String,String>();\n  props.put(Constants.SERVICE_PID,SegmentNodeStore.class.getName());\n  boolean standby=toBoolean(lookup(context,STANDBY),false);\n  providerRegistration=context.getBundleContext().registerService(SegmentStoreProvider.class.getName(),this,props);\n  if (!standby) {\n    storeRegistration=context.getBundleContext().registerService(NodeStore.class.getName(),this,props);\n  }\n  OsgiWhiteboard whiteboard=new OsgiWhiteboard(context.getBundleContext());\n  executor=new WhiteboardExecutor();\n  executor.start(whiteboard);\n  checkpointRegistration=registerMBean(whiteboard,CheckpointMBean.class,new SegmentCheckpointMBean(delegate),CheckpointMBean.TYPE,\"Segment node store checkpoint management\");\n  RevisionGC revisionGC=new RevisionGC(new Runnable(){\n    @Override public void run(){\n      store.gc();\n    }\n  }\n,executor);\n  revisionGCRegistration=registerMBean(whiteboard,RevisionGCMBean.class,revisionGC,RevisionGCMBean.TYPE,\"Segment node store revision garbage collection\");\n  if (store.getBlobStore() instanceof GarbageCollectableBlobStore) {\n    BlobGarbageCollector gc=new BlobGarbageCollector(){\n      @Override public void collectGarbage() throws Exception {\n        MarkSweepGarbageCollector gc=new MarkSweepGarbageCollector(new SegmentBlobReferenceRetriever(store.getTracker()),(GarbageCollectableBlobStore)store.getBlobStore(),executor);\n        gc.collectGarbage();\n      }\n    }\n;\n    blobGCRegistration=registerMBean(whiteboard,BlobGCMBean.class,new BlobGC(gc,executor),BlobGCMBean.TYPE,\"Segment node store blob garbage collection\");\n  }\n  log.info(\"SegmentNodeStore initialized\");\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 428,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 54,
                    "startLineNumber": 143,
                    "startColumnNumber": 8,
                    "endLineNumber": 143,
                    "endColumnNumber": 62
                },
                "nodeContext": "Dictionary<?,?> properties=context.getProperties();\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 11,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.jackrabbit.oak.plugins.segment.ComponentContext"
        },
        {
            "nodeContext": "context",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 146,
                "startColumnNumber": 34,
                "endLineNumber": 146,
                "endColumnNumber": 41
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 26,
                        "startLineNumber": 146,
                        "startColumnNumber": 27,
                        "endLineNumber": 146,
                        "endColumnNumber": 53
                    },
                    "nodeContext": "lookup(context,DIRECTORY)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 38,
                        "startLineNumber": 146,
                        "startColumnNumber": 15,
                        "endLineNumber": 146,
                        "endColumnNumber": 53
                    },
                    "nodeContext": "directory=lookup(context,DIRECTORY)",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 46,
                        "startLineNumber": 146,
                        "startColumnNumber": 8,
                        "endLineNumber": 146,
                        "endColumnNumber": 54
                    },
                    "nodeContext": "String directory=lookup(context,DIRECTORY);\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3685,
                        "startLineNumber": 137,
                        "startColumnNumber": 31,
                        "endLineNumber": 222,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (context == null) {\n    log.info(\"Component still not activated. Ignoring the initialization call\");\n    return;\n  }\n  Dictionary<?,?> properties=context.getProperties();\n  name=String.valueOf(properties.get(NAME));\n  String directory=lookup(context,DIRECTORY);\n  if (directory == null) {\n    directory=\"tarmk\";\n  }\n else {\n    directory=FilenameUtils.concat(directory,\"segmentstore\");\n  }\n  String mode=lookup(context,MODE);\n  if (mode == null) {\n    mode=System.getProperty(MODE,System.getProperty(\"sun.arch.data.model\",\"32\"));\n  }\n  String size=lookup(context,SIZE);\n  if (size == null) {\n    size=System.getProperty(SIZE,\"256\");\n  }\n  boolean pauseCompaction=toBoolean(lookup(context,PAUSE_COMPACTION),true);\n  boolean memoryMapping=\"64\".equals(mode);\n  if (customBlobStore) {\n    log.info(\"Initializing SegmentNodeStore with BlobStore [{}]\",blobStore);\n    store=new FileStore(blobStore,new File(directory),Integer.parseInt(size),memoryMapping).setPauseCompaction(pauseCompaction);\n  }\n else {\n    store=new FileStore(new File(directory),Integer.parseInt(size),memoryMapping).setPauseCompaction(pauseCompaction);\n  }\n  delegate=new SegmentNodeStore(store);\n  observerTracker=new ObserverTracker(delegate);\n  observerTracker.start(context.getBundleContext());\n  Dictionary<String,String> props=new Hashtable<String,String>();\n  props.put(Constants.SERVICE_PID,SegmentNodeStore.class.getName());\n  boolean standby=toBoolean(lookup(context,STANDBY),false);\n  providerRegistration=context.getBundleContext().registerService(SegmentStoreProvider.class.getName(),this,props);\n  if (!standby) {\n    storeRegistration=context.getBundleContext().registerService(NodeStore.class.getName(),this,props);\n  }\n  OsgiWhiteboard whiteboard=new OsgiWhiteboard(context.getBundleContext());\n  executor=new WhiteboardExecutor();\n  executor.start(whiteboard);\n  checkpointRegistration=registerMBean(whiteboard,CheckpointMBean.class,new SegmentCheckpointMBean(delegate),CheckpointMBean.TYPE,\"Segment node store checkpoint management\");\n  RevisionGC revisionGC=new RevisionGC(new Runnable(){\n    @Override public void run(){\n      store.gc();\n    }\n  }\n,executor);\n  revisionGCRegistration=registerMBean(whiteboard,RevisionGCMBean.class,revisionGC,RevisionGCMBean.TYPE,\"Segment node store revision garbage collection\");\n  if (store.getBlobStore() instanceof GarbageCollectableBlobStore) {\n    BlobGarbageCollector gc=new BlobGarbageCollector(){\n      @Override public void collectGarbage() throws Exception {\n        MarkSweepGarbageCollector gc=new MarkSweepGarbageCollector(new SegmentBlobReferenceRetriever(store.getTracker()),(GarbageCollectableBlobStore)store.getBlobStore(),executor);\n        gc.collectGarbage();\n      }\n    }\n;\n    blobGCRegistration=registerMBean(whiteboard,BlobGCMBean.class,new BlobGC(gc,executor),BlobGCMBean.TYPE,\"Segment node store blob garbage collection\");\n  }\n  log.info(\"SegmentNodeStore initialized\");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 421,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3761,
                        "startLineNumber": 136,
                        "startColumnNumber": 4,
                        "endLineNumber": 222,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "public synchronized void registerNodeStore() throws IOException {\n  if (context == null) {\n    log.info(\"Component still not activated. Ignoring the initialization call\");\n    return;\n  }\n  Dictionary<?,?> properties=context.getProperties();\n  name=String.valueOf(properties.get(NAME));\n  String directory=lookup(context,DIRECTORY);\n  if (directory == null) {\n    directory=\"tarmk\";\n  }\n else {\n    directory=FilenameUtils.concat(directory,\"segmentstore\");\n  }\n  String mode=lookup(context,MODE);\n  if (mode == null) {\n    mode=System.getProperty(MODE,System.getProperty(\"sun.arch.data.model\",\"32\"));\n  }\n  String size=lookup(context,SIZE);\n  if (size == null) {\n    size=System.getProperty(SIZE,\"256\");\n  }\n  boolean pauseCompaction=toBoolean(lookup(context,PAUSE_COMPACTION),true);\n  boolean memoryMapping=\"64\".equals(mode);\n  if (customBlobStore) {\n    log.info(\"Initializing SegmentNodeStore with BlobStore [{}]\",blobStore);\n    store=new FileStore(blobStore,new File(directory),Integer.parseInt(size),memoryMapping).setPauseCompaction(pauseCompaction);\n  }\n else {\n    store=new FileStore(new File(directory),Integer.parseInt(size),memoryMapping).setPauseCompaction(pauseCompaction);\n  }\n  delegate=new SegmentNodeStore(store);\n  observerTracker=new ObserverTracker(delegate);\n  observerTracker.start(context.getBundleContext());\n  Dictionary<String,String> props=new Hashtable<String,String>();\n  props.put(Constants.SERVICE_PID,SegmentNodeStore.class.getName());\n  boolean standby=toBoolean(lookup(context,STANDBY),false);\n  providerRegistration=context.getBundleContext().registerService(SegmentStoreProvider.class.getName(),this,props);\n  if (!standby) {\n    storeRegistration=context.getBundleContext().registerService(NodeStore.class.getName(),this,props);\n  }\n  OsgiWhiteboard whiteboard=new OsgiWhiteboard(context.getBundleContext());\n  executor=new WhiteboardExecutor();\n  executor.start(whiteboard);\n  checkpointRegistration=registerMBean(whiteboard,CheckpointMBean.class,new SegmentCheckpointMBean(delegate),CheckpointMBean.TYPE,\"Segment node store checkpoint management\");\n  RevisionGC revisionGC=new RevisionGC(new Runnable(){\n    @Override public void run(){\n      store.gc();\n    }\n  }\n,executor);\n  revisionGCRegistration=registerMBean(whiteboard,RevisionGCMBean.class,revisionGC,RevisionGCMBean.TYPE,\"Segment node store revision garbage collection\");\n  if (store.getBlobStore() instanceof GarbageCollectableBlobStore) {\n    BlobGarbageCollector gc=new BlobGarbageCollector(){\n      @Override public void collectGarbage() throws Exception {\n        MarkSweepGarbageCollector gc=new MarkSweepGarbageCollector(new SegmentBlobReferenceRetriever(store.getTracker()),(GarbageCollectableBlobStore)store.getBlobStore(),executor);\n        gc.collectGarbage();\n      }\n    }\n;\n    blobGCRegistration=registerMBean(whiteboard,BlobGCMBean.class,new BlobGC(gc,executor),BlobGCMBean.TYPE,\"Segment node store blob garbage collection\");\n  }\n  log.info(\"SegmentNodeStore initialized\");\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 428,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 46,
                    "startLineNumber": 146,
                    "startColumnNumber": 8,
                    "endLineNumber": 146,
                    "endColumnNumber": 54
                },
                "nodeContext": "String directory=lookup(context,DIRECTORY);\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 9,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.jackrabbit.oak.plugins.segment.ComponentContext"
        },
        {
            "nodeContext": "context",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 153,
                "startColumnNumber": 29,
                "endLineNumber": 153,
                "endColumnNumber": 36
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 21,
                        "startLineNumber": 153,
                        "startColumnNumber": 22,
                        "endLineNumber": 153,
                        "endColumnNumber": 43
                    },
                    "nodeContext": "lookup(context,MODE)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 28,
                        "startLineNumber": 153,
                        "startColumnNumber": 15,
                        "endLineNumber": 153,
                        "endColumnNumber": 43
                    },
                    "nodeContext": "mode=lookup(context,MODE)",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 36,
                        "startLineNumber": 153,
                        "startColumnNumber": 8,
                        "endLineNumber": 153,
                        "endColumnNumber": 44
                    },
                    "nodeContext": "String mode=lookup(context,MODE);\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3685,
                        "startLineNumber": 137,
                        "startColumnNumber": 31,
                        "endLineNumber": 222,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (context == null) {\n    log.info(\"Component still not activated. Ignoring the initialization call\");\n    return;\n  }\n  Dictionary<?,?> properties=context.getProperties();\n  name=String.valueOf(properties.get(NAME));\n  String directory=lookup(context,DIRECTORY);\n  if (directory == null) {\n    directory=\"tarmk\";\n  }\n else {\n    directory=FilenameUtils.concat(directory,\"segmentstore\");\n  }\n  String mode=lookup(context,MODE);\n  if (mode == null) {\n    mode=System.getProperty(MODE,System.getProperty(\"sun.arch.data.model\",\"32\"));\n  }\n  String size=lookup(context,SIZE);\n  if (size == null) {\n    size=System.getProperty(SIZE,\"256\");\n  }\n  boolean pauseCompaction=toBoolean(lookup(context,PAUSE_COMPACTION),true);\n  boolean memoryMapping=\"64\".equals(mode);\n  if (customBlobStore) {\n    log.info(\"Initializing SegmentNodeStore with BlobStore [{}]\",blobStore);\n    store=new FileStore(blobStore,new File(directory),Integer.parseInt(size),memoryMapping).setPauseCompaction(pauseCompaction);\n  }\n else {\n    store=new FileStore(new File(directory),Integer.parseInt(size),memoryMapping).setPauseCompaction(pauseCompaction);\n  }\n  delegate=new SegmentNodeStore(store);\n  observerTracker=new ObserverTracker(delegate);\n  observerTracker.start(context.getBundleContext());\n  Dictionary<String,String> props=new Hashtable<String,String>();\n  props.put(Constants.SERVICE_PID,SegmentNodeStore.class.getName());\n  boolean standby=toBoolean(lookup(context,STANDBY),false);\n  providerRegistration=context.getBundleContext().registerService(SegmentStoreProvider.class.getName(),this,props);\n  if (!standby) {\n    storeRegistration=context.getBundleContext().registerService(NodeStore.class.getName(),this,props);\n  }\n  OsgiWhiteboard whiteboard=new OsgiWhiteboard(context.getBundleContext());\n  executor=new WhiteboardExecutor();\n  executor.start(whiteboard);\n  checkpointRegistration=registerMBean(whiteboard,CheckpointMBean.class,new SegmentCheckpointMBean(delegate),CheckpointMBean.TYPE,\"Segment node store checkpoint management\");\n  RevisionGC revisionGC=new RevisionGC(new Runnable(){\n    @Override public void run(){\n      store.gc();\n    }\n  }\n,executor);\n  revisionGCRegistration=registerMBean(whiteboard,RevisionGCMBean.class,revisionGC,RevisionGCMBean.TYPE,\"Segment node store revision garbage collection\");\n  if (store.getBlobStore() instanceof GarbageCollectableBlobStore) {\n    BlobGarbageCollector gc=new BlobGarbageCollector(){\n      @Override public void collectGarbage() throws Exception {\n        MarkSweepGarbageCollector gc=new MarkSweepGarbageCollector(new SegmentBlobReferenceRetriever(store.getTracker()),(GarbageCollectableBlobStore)store.getBlobStore(),executor);\n        gc.collectGarbage();\n      }\n    }\n;\n    blobGCRegistration=registerMBean(whiteboard,BlobGCMBean.class,new BlobGC(gc,executor),BlobGCMBean.TYPE,\"Segment node store blob garbage collection\");\n  }\n  log.info(\"SegmentNodeStore initialized\");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 421,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3761,
                        "startLineNumber": 136,
                        "startColumnNumber": 4,
                        "endLineNumber": 222,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "public synchronized void registerNodeStore() throws IOException {\n  if (context == null) {\n    log.info(\"Component still not activated. Ignoring the initialization call\");\n    return;\n  }\n  Dictionary<?,?> properties=context.getProperties();\n  name=String.valueOf(properties.get(NAME));\n  String directory=lookup(context,DIRECTORY);\n  if (directory == null) {\n    directory=\"tarmk\";\n  }\n else {\n    directory=FilenameUtils.concat(directory,\"segmentstore\");\n  }\n  String mode=lookup(context,MODE);\n  if (mode == null) {\n    mode=System.getProperty(MODE,System.getProperty(\"sun.arch.data.model\",\"32\"));\n  }\n  String size=lookup(context,SIZE);\n  if (size == null) {\n    size=System.getProperty(SIZE,\"256\");\n  }\n  boolean pauseCompaction=toBoolean(lookup(context,PAUSE_COMPACTION),true);\n  boolean memoryMapping=\"64\".equals(mode);\n  if (customBlobStore) {\n    log.info(\"Initializing SegmentNodeStore with BlobStore [{}]\",blobStore);\n    store=new FileStore(blobStore,new File(directory),Integer.parseInt(size),memoryMapping).setPauseCompaction(pauseCompaction);\n  }\n else {\n    store=new FileStore(new File(directory),Integer.parseInt(size),memoryMapping).setPauseCompaction(pauseCompaction);\n  }\n  delegate=new SegmentNodeStore(store);\n  observerTracker=new ObserverTracker(delegate);\n  observerTracker.start(context.getBundleContext());\n  Dictionary<String,String> props=new Hashtable<String,String>();\n  props.put(Constants.SERVICE_PID,SegmentNodeStore.class.getName());\n  boolean standby=toBoolean(lookup(context,STANDBY),false);\n  providerRegistration=context.getBundleContext().registerService(SegmentStoreProvider.class.getName(),this,props);\n  if (!standby) {\n    storeRegistration=context.getBundleContext().registerService(NodeStore.class.getName(),this,props);\n  }\n  OsgiWhiteboard whiteboard=new OsgiWhiteboard(context.getBundleContext());\n  executor=new WhiteboardExecutor();\n  executor.start(whiteboard);\n  checkpointRegistration=registerMBean(whiteboard,CheckpointMBean.class,new SegmentCheckpointMBean(delegate),CheckpointMBean.TYPE,\"Segment node store checkpoint management\");\n  RevisionGC revisionGC=new RevisionGC(new Runnable(){\n    @Override public void run(){\n      store.gc();\n    }\n  }\n,executor);\n  revisionGCRegistration=registerMBean(whiteboard,RevisionGCMBean.class,revisionGC,RevisionGCMBean.TYPE,\"Segment node store revision garbage collection\");\n  if (store.getBlobStore() instanceof GarbageCollectableBlobStore) {\n    BlobGarbageCollector gc=new BlobGarbageCollector(){\n      @Override public void collectGarbage() throws Exception {\n        MarkSweepGarbageCollector gc=new MarkSweepGarbageCollector(new SegmentBlobReferenceRetriever(store.getTracker()),(GarbageCollectableBlobStore)store.getBlobStore(),executor);\n        gc.collectGarbage();\n      }\n    }\n;\n    blobGCRegistration=registerMBean(whiteboard,BlobGCMBean.class,new BlobGC(gc,executor),BlobGCMBean.TYPE,\"Segment node store blob garbage collection\");\n  }\n  log.info(\"SegmentNodeStore initialized\");\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 428,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 36,
                    "startLineNumber": 153,
                    "startColumnNumber": 8,
                    "endLineNumber": 153,
                    "endColumnNumber": 44
                },
                "nodeContext": "String mode=lookup(context,MODE);\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 9,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.jackrabbit.oak.plugins.segment.ComponentContext"
        },
        {
            "nodeContext": "context",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 159,
                "startColumnNumber": 29,
                "endLineNumber": 159,
                "endColumnNumber": 36
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 21,
                        "startLineNumber": 159,
                        "startColumnNumber": 22,
                        "endLineNumber": 159,
                        "endColumnNumber": 43
                    },
                    "nodeContext": "lookup(context,SIZE)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 28,
                        "startLineNumber": 159,
                        "startColumnNumber": 15,
                        "endLineNumber": 159,
                        "endColumnNumber": 43
                    },
                    "nodeContext": "size=lookup(context,SIZE)",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 36,
                        "startLineNumber": 159,
                        "startColumnNumber": 8,
                        "endLineNumber": 159,
                        "endColumnNumber": 44
                    },
                    "nodeContext": "String size=lookup(context,SIZE);\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3685,
                        "startLineNumber": 137,
                        "startColumnNumber": 31,
                        "endLineNumber": 222,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (context == null) {\n    log.info(\"Component still not activated. Ignoring the initialization call\");\n    return;\n  }\n  Dictionary<?,?> properties=context.getProperties();\n  name=String.valueOf(properties.get(NAME));\n  String directory=lookup(context,DIRECTORY);\n  if (directory == null) {\n    directory=\"tarmk\";\n  }\n else {\n    directory=FilenameUtils.concat(directory,\"segmentstore\");\n  }\n  String mode=lookup(context,MODE);\n  if (mode == null) {\n    mode=System.getProperty(MODE,System.getProperty(\"sun.arch.data.model\",\"32\"));\n  }\n  String size=lookup(context,SIZE);\n  if (size == null) {\n    size=System.getProperty(SIZE,\"256\");\n  }\n  boolean pauseCompaction=toBoolean(lookup(context,PAUSE_COMPACTION),true);\n  boolean memoryMapping=\"64\".equals(mode);\n  if (customBlobStore) {\n    log.info(\"Initializing SegmentNodeStore with BlobStore [{}]\",blobStore);\n    store=new FileStore(blobStore,new File(directory),Integer.parseInt(size),memoryMapping).setPauseCompaction(pauseCompaction);\n  }\n else {\n    store=new FileStore(new File(directory),Integer.parseInt(size),memoryMapping).setPauseCompaction(pauseCompaction);\n  }\n  delegate=new SegmentNodeStore(store);\n  observerTracker=new ObserverTracker(delegate);\n  observerTracker.start(context.getBundleContext());\n  Dictionary<String,String> props=new Hashtable<String,String>();\n  props.put(Constants.SERVICE_PID,SegmentNodeStore.class.getName());\n  boolean standby=toBoolean(lookup(context,STANDBY),false);\n  providerRegistration=context.getBundleContext().registerService(SegmentStoreProvider.class.getName(),this,props);\n  if (!standby) {\n    storeRegistration=context.getBundleContext().registerService(NodeStore.class.getName(),this,props);\n  }\n  OsgiWhiteboard whiteboard=new OsgiWhiteboard(context.getBundleContext());\n  executor=new WhiteboardExecutor();\n  executor.start(whiteboard);\n  checkpointRegistration=registerMBean(whiteboard,CheckpointMBean.class,new SegmentCheckpointMBean(delegate),CheckpointMBean.TYPE,\"Segment node store checkpoint management\");\n  RevisionGC revisionGC=new RevisionGC(new Runnable(){\n    @Override public void run(){\n      store.gc();\n    }\n  }\n,executor);\n  revisionGCRegistration=registerMBean(whiteboard,RevisionGCMBean.class,revisionGC,RevisionGCMBean.TYPE,\"Segment node store revision garbage collection\");\n  if (store.getBlobStore() instanceof GarbageCollectableBlobStore) {\n    BlobGarbageCollector gc=new BlobGarbageCollector(){\n      @Override public void collectGarbage() throws Exception {\n        MarkSweepGarbageCollector gc=new MarkSweepGarbageCollector(new SegmentBlobReferenceRetriever(store.getTracker()),(GarbageCollectableBlobStore)store.getBlobStore(),executor);\n        gc.collectGarbage();\n      }\n    }\n;\n    blobGCRegistration=registerMBean(whiteboard,BlobGCMBean.class,new BlobGC(gc,executor),BlobGCMBean.TYPE,\"Segment node store blob garbage collection\");\n  }\n  log.info(\"SegmentNodeStore initialized\");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 421,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3761,
                        "startLineNumber": 136,
                        "startColumnNumber": 4,
                        "endLineNumber": 222,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "public synchronized void registerNodeStore() throws IOException {\n  if (context == null) {\n    log.info(\"Component still not activated. Ignoring the initialization call\");\n    return;\n  }\n  Dictionary<?,?> properties=context.getProperties();\n  name=String.valueOf(properties.get(NAME));\n  String directory=lookup(context,DIRECTORY);\n  if (directory == null) {\n    directory=\"tarmk\";\n  }\n else {\n    directory=FilenameUtils.concat(directory,\"segmentstore\");\n  }\n  String mode=lookup(context,MODE);\n  if (mode == null) {\n    mode=System.getProperty(MODE,System.getProperty(\"sun.arch.data.model\",\"32\"));\n  }\n  String size=lookup(context,SIZE);\n  if (size == null) {\n    size=System.getProperty(SIZE,\"256\");\n  }\n  boolean pauseCompaction=toBoolean(lookup(context,PAUSE_COMPACTION),true);\n  boolean memoryMapping=\"64\".equals(mode);\n  if (customBlobStore) {\n    log.info(\"Initializing SegmentNodeStore with BlobStore [{}]\",blobStore);\n    store=new FileStore(blobStore,new File(directory),Integer.parseInt(size),memoryMapping).setPauseCompaction(pauseCompaction);\n  }\n else {\n    store=new FileStore(new File(directory),Integer.parseInt(size),memoryMapping).setPauseCompaction(pauseCompaction);\n  }\n  delegate=new SegmentNodeStore(store);\n  observerTracker=new ObserverTracker(delegate);\n  observerTracker.start(context.getBundleContext());\n  Dictionary<String,String> props=new Hashtable<String,String>();\n  props.put(Constants.SERVICE_PID,SegmentNodeStore.class.getName());\n  boolean standby=toBoolean(lookup(context,STANDBY),false);\n  providerRegistration=context.getBundleContext().registerService(SegmentStoreProvider.class.getName(),this,props);\n  if (!standby) {\n    storeRegistration=context.getBundleContext().registerService(NodeStore.class.getName(),this,props);\n  }\n  OsgiWhiteboard whiteboard=new OsgiWhiteboard(context.getBundleContext());\n  executor=new WhiteboardExecutor();\n  executor.start(whiteboard);\n  checkpointRegistration=registerMBean(whiteboard,CheckpointMBean.class,new SegmentCheckpointMBean(delegate),CheckpointMBean.TYPE,\"Segment node store checkpoint management\");\n  RevisionGC revisionGC=new RevisionGC(new Runnable(){\n    @Override public void run(){\n      store.gc();\n    }\n  }\n,executor);\n  revisionGCRegistration=registerMBean(whiteboard,RevisionGCMBean.class,revisionGC,RevisionGCMBean.TYPE,\"Segment node store revision garbage collection\");\n  if (store.getBlobStore() instanceof GarbageCollectableBlobStore) {\n    BlobGarbageCollector gc=new BlobGarbageCollector(){\n      @Override public void collectGarbage() throws Exception {\n        MarkSweepGarbageCollector gc=new MarkSweepGarbageCollector(new SegmentBlobReferenceRetriever(store.getTracker()),(GarbageCollectableBlobStore)store.getBlobStore(),executor);\n        gc.collectGarbage();\n      }\n    }\n;\n    blobGCRegistration=registerMBean(whiteboard,BlobGCMBean.class,new BlobGC(gc,executor),BlobGCMBean.TYPE,\"Segment node store blob garbage collection\");\n  }\n  log.info(\"SegmentNodeStore initialized\");\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 428,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 36,
                    "startLineNumber": 159,
                    "startColumnNumber": 8,
                    "endLineNumber": 159,
                    "endColumnNumber": 44
                },
                "nodeContext": "String size=lookup(context,SIZE);\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 9,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.jackrabbit.oak.plugins.segment.ComponentContext"
        },
        {
            "nodeContext": "context",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 164,
                "startColumnNumber": 51,
                "endLineNumber": 164,
                "endColumnNumber": 58
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 33,
                        "startLineNumber": 164,
                        "startColumnNumber": 44,
                        "endLineNumber": 164,
                        "endColumnNumber": 77
                    },
                    "nodeContext": "lookup(context,PAUSE_COMPACTION)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 50,
                        "startLineNumber": 164,
                        "startColumnNumber": 34,
                        "endLineNumber": 164,
                        "endColumnNumber": 84
                    },
                    "nodeContext": "toBoolean(lookup(context,PAUSE_COMPACTION),true)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 68,
                        "startLineNumber": 164,
                        "startColumnNumber": 16,
                        "endLineNumber": 164,
                        "endColumnNumber": 84
                    },
                    "nodeContext": "pauseCompaction=toBoolean(lookup(context,PAUSE_COMPACTION),true)",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 77,
                        "startLineNumber": 164,
                        "startColumnNumber": 8,
                        "endLineNumber": 164,
                        "endColumnNumber": 85
                    },
                    "nodeContext": "boolean pauseCompaction=toBoolean(lookup(context,PAUSE_COMPACTION),true);\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 11,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3685,
                        "startLineNumber": 137,
                        "startColumnNumber": 31,
                        "endLineNumber": 222,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (context == null) {\n    log.info(\"Component still not activated. Ignoring the initialization call\");\n    return;\n  }\n  Dictionary<?,?> properties=context.getProperties();\n  name=String.valueOf(properties.get(NAME));\n  String directory=lookup(context,DIRECTORY);\n  if (directory == null) {\n    directory=\"tarmk\";\n  }\n else {\n    directory=FilenameUtils.concat(directory,\"segmentstore\");\n  }\n  String mode=lookup(context,MODE);\n  if (mode == null) {\n    mode=System.getProperty(MODE,System.getProperty(\"sun.arch.data.model\",\"32\"));\n  }\n  String size=lookup(context,SIZE);\n  if (size == null) {\n    size=System.getProperty(SIZE,\"256\");\n  }\n  boolean pauseCompaction=toBoolean(lookup(context,PAUSE_COMPACTION),true);\n  boolean memoryMapping=\"64\".equals(mode);\n  if (customBlobStore) {\n    log.info(\"Initializing SegmentNodeStore with BlobStore [{}]\",blobStore);\n    store=new FileStore(blobStore,new File(directory),Integer.parseInt(size),memoryMapping).setPauseCompaction(pauseCompaction);\n  }\n else {\n    store=new FileStore(new File(directory),Integer.parseInt(size),memoryMapping).setPauseCompaction(pauseCompaction);\n  }\n  delegate=new SegmentNodeStore(store);\n  observerTracker=new ObserverTracker(delegate);\n  observerTracker.start(context.getBundleContext());\n  Dictionary<String,String> props=new Hashtable<String,String>();\n  props.put(Constants.SERVICE_PID,SegmentNodeStore.class.getName());\n  boolean standby=toBoolean(lookup(context,STANDBY),false);\n  providerRegistration=context.getBundleContext().registerService(SegmentStoreProvider.class.getName(),this,props);\n  if (!standby) {\n    storeRegistration=context.getBundleContext().registerService(NodeStore.class.getName(),this,props);\n  }\n  OsgiWhiteboard whiteboard=new OsgiWhiteboard(context.getBundleContext());\n  executor=new WhiteboardExecutor();\n  executor.start(whiteboard);\n  checkpointRegistration=registerMBean(whiteboard,CheckpointMBean.class,new SegmentCheckpointMBean(delegate),CheckpointMBean.TYPE,\"Segment node store checkpoint management\");\n  RevisionGC revisionGC=new RevisionGC(new Runnable(){\n    @Override public void run(){\n      store.gc();\n    }\n  }\n,executor);\n  revisionGCRegistration=registerMBean(whiteboard,RevisionGCMBean.class,revisionGC,RevisionGCMBean.TYPE,\"Segment node store revision garbage collection\");\n  if (store.getBlobStore() instanceof GarbageCollectableBlobStore) {\n    BlobGarbageCollector gc=new BlobGarbageCollector(){\n      @Override public void collectGarbage() throws Exception {\n        MarkSweepGarbageCollector gc=new MarkSweepGarbageCollector(new SegmentBlobReferenceRetriever(store.getTracker()),(GarbageCollectableBlobStore)store.getBlobStore(),executor);\n        gc.collectGarbage();\n      }\n    }\n;\n    blobGCRegistration=registerMBean(whiteboard,BlobGCMBean.class,new BlobGC(gc,executor),BlobGCMBean.TYPE,\"Segment node store blob garbage collection\");\n  }\n  log.info(\"SegmentNodeStore initialized\");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 421,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3761,
                        "startLineNumber": 136,
                        "startColumnNumber": 4,
                        "endLineNumber": 222,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "public synchronized void registerNodeStore() throws IOException {\n  if (context == null) {\n    log.info(\"Component still not activated. Ignoring the initialization call\");\n    return;\n  }\n  Dictionary<?,?> properties=context.getProperties();\n  name=String.valueOf(properties.get(NAME));\n  String directory=lookup(context,DIRECTORY);\n  if (directory == null) {\n    directory=\"tarmk\";\n  }\n else {\n    directory=FilenameUtils.concat(directory,\"segmentstore\");\n  }\n  String mode=lookup(context,MODE);\n  if (mode == null) {\n    mode=System.getProperty(MODE,System.getProperty(\"sun.arch.data.model\",\"32\"));\n  }\n  String size=lookup(context,SIZE);\n  if (size == null) {\n    size=System.getProperty(SIZE,\"256\");\n  }\n  boolean pauseCompaction=toBoolean(lookup(context,PAUSE_COMPACTION),true);\n  boolean memoryMapping=\"64\".equals(mode);\n  if (customBlobStore) {\n    log.info(\"Initializing SegmentNodeStore with BlobStore [{}]\",blobStore);\n    store=new FileStore(blobStore,new File(directory),Integer.parseInt(size),memoryMapping).setPauseCompaction(pauseCompaction);\n  }\n else {\n    store=new FileStore(new File(directory),Integer.parseInt(size),memoryMapping).setPauseCompaction(pauseCompaction);\n  }\n  delegate=new SegmentNodeStore(store);\n  observerTracker=new ObserverTracker(delegate);\n  observerTracker.start(context.getBundleContext());\n  Dictionary<String,String> props=new Hashtable<String,String>();\n  props.put(Constants.SERVICE_PID,SegmentNodeStore.class.getName());\n  boolean standby=toBoolean(lookup(context,STANDBY),false);\n  providerRegistration=context.getBundleContext().registerService(SegmentStoreProvider.class.getName(),this,props);\n  if (!standby) {\n    storeRegistration=context.getBundleContext().registerService(NodeStore.class.getName(),this,props);\n  }\n  OsgiWhiteboard whiteboard=new OsgiWhiteboard(context.getBundleContext());\n  executor=new WhiteboardExecutor();\n  executor.start(whiteboard);\n  checkpointRegistration=registerMBean(whiteboard,CheckpointMBean.class,new SegmentCheckpointMBean(delegate),CheckpointMBean.TYPE,\"Segment node store checkpoint management\");\n  RevisionGC revisionGC=new RevisionGC(new Runnable(){\n    @Override public void run(){\n      store.gc();\n    }\n  }\n,executor);\n  revisionGCRegistration=registerMBean(whiteboard,RevisionGCMBean.class,revisionGC,RevisionGCMBean.TYPE,\"Segment node store revision garbage collection\");\n  if (store.getBlobStore() instanceof GarbageCollectableBlobStore) {\n    BlobGarbageCollector gc=new BlobGarbageCollector(){\n      @Override public void collectGarbage() throws Exception {\n        MarkSweepGarbageCollector gc=new MarkSweepGarbageCollector(new SegmentBlobReferenceRetriever(store.getTracker()),(GarbageCollectableBlobStore)store.getBlobStore(),executor);\n        gc.collectGarbage();\n      }\n    }\n;\n    blobGCRegistration=registerMBean(whiteboard,BlobGCMBean.class,new BlobGC(gc,executor),BlobGCMBean.TYPE,\"Segment node store blob garbage collection\");\n  }\n  log.info(\"SegmentNodeStore initialized\");\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 428,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 77,
                    "startLineNumber": 164,
                    "startColumnNumber": 8,
                    "endLineNumber": 164,
                    "endColumnNumber": 85
                },
                "nodeContext": "boolean pauseCompaction=toBoolean(lookup(context,PAUSE_COMPACTION),true);\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 11,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "org.apache.jackrabbit.oak.plugins.segment.ComponentContext"
        },
        {
            "nodeContext": "context",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 178,
                "startColumnNumber": 30,
                "endLineNumber": 178,
                "endColumnNumber": 37
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 26,
                        "startLineNumber": 178,
                        "startColumnNumber": 30,
                        "endLineNumber": 178,
                        "endColumnNumber": 56
                    },
                    "nodeContext": "context.getBundleContext()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 49,
                        "startLineNumber": 178,
                        "startColumnNumber": 8,
                        "endLineNumber": 178,
                        "endColumnNumber": 57
                    },
                    "nodeContext": "observerTracker.start(context.getBundleContext())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 50,
                        "startLineNumber": 178,
                        "startColumnNumber": 8,
                        "endLineNumber": 178,
                        "endColumnNumber": 58
                    },
                    "nodeContext": "observerTracker.start(context.getBundleContext());\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3685,
                        "startLineNumber": 137,
                        "startColumnNumber": 31,
                        "endLineNumber": 222,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (context == null) {\n    log.info(\"Component still not activated. Ignoring the initialization call\");\n    return;\n  }\n  Dictionary<?,?> properties=context.getProperties();\n  name=String.valueOf(properties.get(NAME));\n  String directory=lookup(context,DIRECTORY);\n  if (directory == null) {\n    directory=\"tarmk\";\n  }\n else {\n    directory=FilenameUtils.concat(directory,\"segmentstore\");\n  }\n  String mode=lookup(context,MODE);\n  if (mode == null) {\n    mode=System.getProperty(MODE,System.getProperty(\"sun.arch.data.model\",\"32\"));\n  }\n  String size=lookup(context,SIZE);\n  if (size == null) {\n    size=System.getProperty(SIZE,\"256\");\n  }\n  boolean pauseCompaction=toBoolean(lookup(context,PAUSE_COMPACTION),true);\n  boolean memoryMapping=\"64\".equals(mode);\n  if (customBlobStore) {\n    log.info(\"Initializing SegmentNodeStore with BlobStore [{}]\",blobStore);\n    store=new FileStore(blobStore,new File(directory),Integer.parseInt(size),memoryMapping).setPauseCompaction(pauseCompaction);\n  }\n else {\n    store=new FileStore(new File(directory),Integer.parseInt(size),memoryMapping).setPauseCompaction(pauseCompaction);\n  }\n  delegate=new SegmentNodeStore(store);\n  observerTracker=new ObserverTracker(delegate);\n  observerTracker.start(context.getBundleContext());\n  Dictionary<String,String> props=new Hashtable<String,String>();\n  props.put(Constants.SERVICE_PID,SegmentNodeStore.class.getName());\n  boolean standby=toBoolean(lookup(context,STANDBY),false);\n  providerRegistration=context.getBundleContext().registerService(SegmentStoreProvider.class.getName(),this,props);\n  if (!standby) {\n    storeRegistration=context.getBundleContext().registerService(NodeStore.class.getName(),this,props);\n  }\n  OsgiWhiteboard whiteboard=new OsgiWhiteboard(context.getBundleContext());\n  executor=new WhiteboardExecutor();\n  executor.start(whiteboard);\n  checkpointRegistration=registerMBean(whiteboard,CheckpointMBean.class,new SegmentCheckpointMBean(delegate),CheckpointMBean.TYPE,\"Segment node store checkpoint management\");\n  RevisionGC revisionGC=new RevisionGC(new Runnable(){\n    @Override public void run(){\n      store.gc();\n    }\n  }\n,executor);\n  revisionGCRegistration=registerMBean(whiteboard,RevisionGCMBean.class,revisionGC,RevisionGCMBean.TYPE,\"Segment node store revision garbage collection\");\n  if (store.getBlobStore() instanceof GarbageCollectableBlobStore) {\n    BlobGarbageCollector gc=new BlobGarbageCollector(){\n      @Override public void collectGarbage() throws Exception {\n        MarkSweepGarbageCollector gc=new MarkSweepGarbageCollector(new SegmentBlobReferenceRetriever(store.getTracker()),(GarbageCollectableBlobStore)store.getBlobStore(),executor);\n        gc.collectGarbage();\n      }\n    }\n;\n    blobGCRegistration=registerMBean(whiteboard,BlobGCMBean.class,new BlobGC(gc,executor),BlobGCMBean.TYPE,\"Segment node store blob garbage collection\");\n  }\n  log.info(\"SegmentNodeStore initialized\");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 421,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3761,
                        "startLineNumber": 136,
                        "startColumnNumber": 4,
                        "endLineNumber": 222,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "public synchronized void registerNodeStore() throws IOException {\n  if (context == null) {\n    log.info(\"Component still not activated. Ignoring the initialization call\");\n    return;\n  }\n  Dictionary<?,?> properties=context.getProperties();\n  name=String.valueOf(properties.get(NAME));\n  String directory=lookup(context,DIRECTORY);\n  if (directory == null) {\n    directory=\"tarmk\";\n  }\n else {\n    directory=FilenameUtils.concat(directory,\"segmentstore\");\n  }\n  String mode=lookup(context,MODE);\n  if (mode == null) {\n    mode=System.getProperty(MODE,System.getProperty(\"sun.arch.data.model\",\"32\"));\n  }\n  String size=lookup(context,SIZE);\n  if (size == null) {\n    size=System.getProperty(SIZE,\"256\");\n  }\n  boolean pauseCompaction=toBoolean(lookup(context,PAUSE_COMPACTION),true);\n  boolean memoryMapping=\"64\".equals(mode);\n  if (customBlobStore) {\n    log.info(\"Initializing SegmentNodeStore with BlobStore [{}]\",blobStore);\n    store=new FileStore(blobStore,new File(directory),Integer.parseInt(size),memoryMapping).setPauseCompaction(pauseCompaction);\n  }\n else {\n    store=new FileStore(new File(directory),Integer.parseInt(size),memoryMapping).setPauseCompaction(pauseCompaction);\n  }\n  delegate=new SegmentNodeStore(store);\n  observerTracker=new ObserverTracker(delegate);\n  observerTracker.start(context.getBundleContext());\n  Dictionary<String,String> props=new Hashtable<String,String>();\n  props.put(Constants.SERVICE_PID,SegmentNodeStore.class.getName());\n  boolean standby=toBoolean(lookup(context,STANDBY),false);\n  providerRegistration=context.getBundleContext().registerService(SegmentStoreProvider.class.getName(),this,props);\n  if (!standby) {\n    storeRegistration=context.getBundleContext().registerService(NodeStore.class.getName(),this,props);\n  }\n  OsgiWhiteboard whiteboard=new OsgiWhiteboard(context.getBundleContext());\n  executor=new WhiteboardExecutor();\n  executor.start(whiteboard);\n  checkpointRegistration=registerMBean(whiteboard,CheckpointMBean.class,new SegmentCheckpointMBean(delegate),CheckpointMBean.TYPE,\"Segment node store checkpoint management\");\n  RevisionGC revisionGC=new RevisionGC(new Runnable(){\n    @Override public void run(){\n      store.gc();\n    }\n  }\n,executor);\n  revisionGCRegistration=registerMBean(whiteboard,RevisionGCMBean.class,revisionGC,RevisionGCMBean.TYPE,\"Segment node store revision garbage collection\");\n  if (store.getBlobStore() instanceof GarbageCollectableBlobStore) {\n    BlobGarbageCollector gc=new BlobGarbageCollector(){\n      @Override public void collectGarbage() throws Exception {\n        MarkSweepGarbageCollector gc=new MarkSweepGarbageCollector(new SegmentBlobReferenceRetriever(store.getTracker()),(GarbageCollectableBlobStore)store.getBlobStore(),executor);\n        gc.collectGarbage();\n      }\n    }\n;\n    blobGCRegistration=registerMBean(whiteboard,BlobGCMBean.class,new BlobGC(gc,executor),BlobGCMBean.TYPE,\"Segment node store blob garbage collection\");\n  }\n  log.info(\"SegmentNodeStore initialized\");\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 428,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 50,
                    "startLineNumber": 178,
                    "startColumnNumber": 8,
                    "endLineNumber": 178,
                    "endColumnNumber": 58
                },
                "nodeContext": "observerTracker.start(context.getBundleContext());\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 7,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.jackrabbit.oak.plugins.segment.ComponentContext"
        },
        {
            "nodeContext": "context",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 183,
                "startColumnNumber": 43,
                "endLineNumber": 183,
                "endColumnNumber": 50
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 24,
                        "startLineNumber": 183,
                        "startColumnNumber": 36,
                        "endLineNumber": 183,
                        "endColumnNumber": 60
                    },
                    "nodeContext": "lookup(context,STANDBY)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 42,
                        "startLineNumber": 183,
                        "startColumnNumber": 26,
                        "endLineNumber": 183,
                        "endColumnNumber": 68
                    },
                    "nodeContext": "toBoolean(lookup(context,STANDBY),false)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 52,
                        "startLineNumber": 183,
                        "startColumnNumber": 16,
                        "endLineNumber": 183,
                        "endColumnNumber": 68
                    },
                    "nodeContext": "standby=toBoolean(lookup(context,STANDBY),false)",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 61,
                        "startLineNumber": 183,
                        "startColumnNumber": 8,
                        "endLineNumber": 183,
                        "endColumnNumber": 69
                    },
                    "nodeContext": "boolean standby=toBoolean(lookup(context,STANDBY),false);\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 11,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3685,
                        "startLineNumber": 137,
                        "startColumnNumber": 31,
                        "endLineNumber": 222,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (context == null) {\n    log.info(\"Component still not activated. Ignoring the initialization call\");\n    return;\n  }\n  Dictionary<?,?> properties=context.getProperties();\n  name=String.valueOf(properties.get(NAME));\n  String directory=lookup(context,DIRECTORY);\n  if (directory == null) {\n    directory=\"tarmk\";\n  }\n else {\n    directory=FilenameUtils.concat(directory,\"segmentstore\");\n  }\n  String mode=lookup(context,MODE);\n  if (mode == null) {\n    mode=System.getProperty(MODE,System.getProperty(\"sun.arch.data.model\",\"32\"));\n  }\n  String size=lookup(context,SIZE);\n  if (size == null) {\n    size=System.getProperty(SIZE,\"256\");\n  }\n  boolean pauseCompaction=toBoolean(lookup(context,PAUSE_COMPACTION),true);\n  boolean memoryMapping=\"64\".equals(mode);\n  if (customBlobStore) {\n    log.info(\"Initializing SegmentNodeStore with BlobStore [{}]\",blobStore);\n    store=new FileStore(blobStore,new File(directory),Integer.parseInt(size),memoryMapping).setPauseCompaction(pauseCompaction);\n  }\n else {\n    store=new FileStore(new File(directory),Integer.parseInt(size),memoryMapping).setPauseCompaction(pauseCompaction);\n  }\n  delegate=new SegmentNodeStore(store);\n  observerTracker=new ObserverTracker(delegate);\n  observerTracker.start(context.getBundleContext());\n  Dictionary<String,String> props=new Hashtable<String,String>();\n  props.put(Constants.SERVICE_PID,SegmentNodeStore.class.getName());\n  boolean standby=toBoolean(lookup(context,STANDBY),false);\n  providerRegistration=context.getBundleContext().registerService(SegmentStoreProvider.class.getName(),this,props);\n  if (!standby) {\n    storeRegistration=context.getBundleContext().registerService(NodeStore.class.getName(),this,props);\n  }\n  OsgiWhiteboard whiteboard=new OsgiWhiteboard(context.getBundleContext());\n  executor=new WhiteboardExecutor();\n  executor.start(whiteboard);\n  checkpointRegistration=registerMBean(whiteboard,CheckpointMBean.class,new SegmentCheckpointMBean(delegate),CheckpointMBean.TYPE,\"Segment node store checkpoint management\");\n  RevisionGC revisionGC=new RevisionGC(new Runnable(){\n    @Override public void run(){\n      store.gc();\n    }\n  }\n,executor);\n  revisionGCRegistration=registerMBean(whiteboard,RevisionGCMBean.class,revisionGC,RevisionGCMBean.TYPE,\"Segment node store revision garbage collection\");\n  if (store.getBlobStore() instanceof GarbageCollectableBlobStore) {\n    BlobGarbageCollector gc=new BlobGarbageCollector(){\n      @Override public void collectGarbage() throws Exception {\n        MarkSweepGarbageCollector gc=new MarkSweepGarbageCollector(new SegmentBlobReferenceRetriever(store.getTracker()),(GarbageCollectableBlobStore)store.getBlobStore(),executor);\n        gc.collectGarbage();\n      }\n    }\n;\n    blobGCRegistration=registerMBean(whiteboard,BlobGCMBean.class,new BlobGC(gc,executor),BlobGCMBean.TYPE,\"Segment node store blob garbage collection\");\n  }\n  log.info(\"SegmentNodeStore initialized\");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 421,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3761,
                        "startLineNumber": 136,
                        "startColumnNumber": 4,
                        "endLineNumber": 222,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "public synchronized void registerNodeStore() throws IOException {\n  if (context == null) {\n    log.info(\"Component still not activated. Ignoring the initialization call\");\n    return;\n  }\n  Dictionary<?,?> properties=context.getProperties();\n  name=String.valueOf(properties.get(NAME));\n  String directory=lookup(context,DIRECTORY);\n  if (directory == null) {\n    directory=\"tarmk\";\n  }\n else {\n    directory=FilenameUtils.concat(directory,\"segmentstore\");\n  }\n  String mode=lookup(context,MODE);\n  if (mode == null) {\n    mode=System.getProperty(MODE,System.getProperty(\"sun.arch.data.model\",\"32\"));\n  }\n  String size=lookup(context,SIZE);\n  if (size == null) {\n    size=System.getProperty(SIZE,\"256\");\n  }\n  boolean pauseCompaction=toBoolean(lookup(context,PAUSE_COMPACTION),true);\n  boolean memoryMapping=\"64\".equals(mode);\n  if (customBlobStore) {\n    log.info(\"Initializing SegmentNodeStore with BlobStore [{}]\",blobStore);\n    store=new FileStore(blobStore,new File(directory),Integer.parseInt(size),memoryMapping).setPauseCompaction(pauseCompaction);\n  }\n else {\n    store=new FileStore(new File(directory),Integer.parseInt(size),memoryMapping).setPauseCompaction(pauseCompaction);\n  }\n  delegate=new SegmentNodeStore(store);\n  observerTracker=new ObserverTracker(delegate);\n  observerTracker.start(context.getBundleContext());\n  Dictionary<String,String> props=new Hashtable<String,String>();\n  props.put(Constants.SERVICE_PID,SegmentNodeStore.class.getName());\n  boolean standby=toBoolean(lookup(context,STANDBY),false);\n  providerRegistration=context.getBundleContext().registerService(SegmentStoreProvider.class.getName(),this,props);\n  if (!standby) {\n    storeRegistration=context.getBundleContext().registerService(NodeStore.class.getName(),this,props);\n  }\n  OsgiWhiteboard whiteboard=new OsgiWhiteboard(context.getBundleContext());\n  executor=new WhiteboardExecutor();\n  executor.start(whiteboard);\n  checkpointRegistration=registerMBean(whiteboard,CheckpointMBean.class,new SegmentCheckpointMBean(delegate),CheckpointMBean.TYPE,\"Segment node store checkpoint management\");\n  RevisionGC revisionGC=new RevisionGC(new Runnable(){\n    @Override public void run(){\n      store.gc();\n    }\n  }\n,executor);\n  revisionGCRegistration=registerMBean(whiteboard,RevisionGCMBean.class,revisionGC,RevisionGCMBean.TYPE,\"Segment node store revision garbage collection\");\n  if (store.getBlobStore() instanceof GarbageCollectableBlobStore) {\n    BlobGarbageCollector gc=new BlobGarbageCollector(){\n      @Override public void collectGarbage() throws Exception {\n        MarkSweepGarbageCollector gc=new MarkSweepGarbageCollector(new SegmentBlobReferenceRetriever(store.getTracker()),(GarbageCollectableBlobStore)store.getBlobStore(),executor);\n        gc.collectGarbage();\n      }\n    }\n;\n    blobGCRegistration=registerMBean(whiteboard,BlobGCMBean.class,new BlobGC(gc,executor),BlobGCMBean.TYPE,\"Segment node store blob garbage collection\");\n  }\n  log.info(\"SegmentNodeStore initialized\");\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 428,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 61,
                    "startLineNumber": 183,
                    "startColumnNumber": 8,
                    "endLineNumber": 183,
                    "endColumnNumber": 69
                },
                "nodeContext": "boolean standby=toBoolean(lookup(context,STANDBY),false);\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 11,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "org.apache.jackrabbit.oak.plugins.segment.ComponentContext"
        },
        {
            "nodeContext": "context",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 184,
                "startColumnNumber": 31,
                "endLineNumber": 184,
                "endColumnNumber": 38
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 26,
                        "startLineNumber": 184,
                        "startColumnNumber": 31,
                        "endLineNumber": 184,
                        "endColumnNumber": 57
                    },
                    "nodeContext": "context.getBundleContext()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 93,
                        "startLineNumber": 184,
                        "startColumnNumber": 31,
                        "endLineNumber": 184,
                        "endColumnNumber": 124
                    },
                    "nodeContext": "context.getBundleContext().registerService(SegmentStoreProvider.class.getName(),this,props)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 12,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 116,
                        "startLineNumber": 184,
                        "startColumnNumber": 8,
                        "endLineNumber": 184,
                        "endColumnNumber": 124
                    },
                    "nodeContext": "providerRegistration=context.getBundleContext().registerService(SegmentStoreProvider.class.getName(),this,props)",
                    "nodeType": "Assignment",
                    "astNodeNumber": 14,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 117,
                        "startLineNumber": 184,
                        "startColumnNumber": 8,
                        "endLineNumber": 184,
                        "endColumnNumber": 125
                    },
                    "nodeContext": "providerRegistration=context.getBundleContext().registerService(SegmentStoreProvider.class.getName(),this,props);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 15,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3685,
                        "startLineNumber": 137,
                        "startColumnNumber": 31,
                        "endLineNumber": 222,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (context == null) {\n    log.info(\"Component still not activated. Ignoring the initialization call\");\n    return;\n  }\n  Dictionary<?,?> properties=context.getProperties();\n  name=String.valueOf(properties.get(NAME));\n  String directory=lookup(context,DIRECTORY);\n  if (directory == null) {\n    directory=\"tarmk\";\n  }\n else {\n    directory=FilenameUtils.concat(directory,\"segmentstore\");\n  }\n  String mode=lookup(context,MODE);\n  if (mode == null) {\n    mode=System.getProperty(MODE,System.getProperty(\"sun.arch.data.model\",\"32\"));\n  }\n  String size=lookup(context,SIZE);\n  if (size == null) {\n    size=System.getProperty(SIZE,\"256\");\n  }\n  boolean pauseCompaction=toBoolean(lookup(context,PAUSE_COMPACTION),true);\n  boolean memoryMapping=\"64\".equals(mode);\n  if (customBlobStore) {\n    log.info(\"Initializing SegmentNodeStore with BlobStore [{}]\",blobStore);\n    store=new FileStore(blobStore,new File(directory),Integer.parseInt(size),memoryMapping).setPauseCompaction(pauseCompaction);\n  }\n else {\n    store=new FileStore(new File(directory),Integer.parseInt(size),memoryMapping).setPauseCompaction(pauseCompaction);\n  }\n  delegate=new SegmentNodeStore(store);\n  observerTracker=new ObserverTracker(delegate);\n  observerTracker.start(context.getBundleContext());\n  Dictionary<String,String> props=new Hashtable<String,String>();\n  props.put(Constants.SERVICE_PID,SegmentNodeStore.class.getName());\n  boolean standby=toBoolean(lookup(context,STANDBY),false);\n  providerRegistration=context.getBundleContext().registerService(SegmentStoreProvider.class.getName(),this,props);\n  if (!standby) {\n    storeRegistration=context.getBundleContext().registerService(NodeStore.class.getName(),this,props);\n  }\n  OsgiWhiteboard whiteboard=new OsgiWhiteboard(context.getBundleContext());\n  executor=new WhiteboardExecutor();\n  executor.start(whiteboard);\n  checkpointRegistration=registerMBean(whiteboard,CheckpointMBean.class,new SegmentCheckpointMBean(delegate),CheckpointMBean.TYPE,\"Segment node store checkpoint management\");\n  RevisionGC revisionGC=new RevisionGC(new Runnable(){\n    @Override public void run(){\n      store.gc();\n    }\n  }\n,executor);\n  revisionGCRegistration=registerMBean(whiteboard,RevisionGCMBean.class,revisionGC,RevisionGCMBean.TYPE,\"Segment node store revision garbage collection\");\n  if (store.getBlobStore() instanceof GarbageCollectableBlobStore) {\n    BlobGarbageCollector gc=new BlobGarbageCollector(){\n      @Override public void collectGarbage() throws Exception {\n        MarkSweepGarbageCollector gc=new MarkSweepGarbageCollector(new SegmentBlobReferenceRetriever(store.getTracker()),(GarbageCollectableBlobStore)store.getBlobStore(),executor);\n        gc.collectGarbage();\n      }\n    }\n;\n    blobGCRegistration=registerMBean(whiteboard,BlobGCMBean.class,new BlobGC(gc,executor),BlobGCMBean.TYPE,\"Segment node store blob garbage collection\");\n  }\n  log.info(\"SegmentNodeStore initialized\");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 421,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3761,
                        "startLineNumber": 136,
                        "startColumnNumber": 4,
                        "endLineNumber": 222,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "public synchronized void registerNodeStore() throws IOException {\n  if (context == null) {\n    log.info(\"Component still not activated. Ignoring the initialization call\");\n    return;\n  }\n  Dictionary<?,?> properties=context.getProperties();\n  name=String.valueOf(properties.get(NAME));\n  String directory=lookup(context,DIRECTORY);\n  if (directory == null) {\n    directory=\"tarmk\";\n  }\n else {\n    directory=FilenameUtils.concat(directory,\"segmentstore\");\n  }\n  String mode=lookup(context,MODE);\n  if (mode == null) {\n    mode=System.getProperty(MODE,System.getProperty(\"sun.arch.data.model\",\"32\"));\n  }\n  String size=lookup(context,SIZE);\n  if (size == null) {\n    size=System.getProperty(SIZE,\"256\");\n  }\n  boolean pauseCompaction=toBoolean(lookup(context,PAUSE_COMPACTION),true);\n  boolean memoryMapping=\"64\".equals(mode);\n  if (customBlobStore) {\n    log.info(\"Initializing SegmentNodeStore with BlobStore [{}]\",blobStore);\n    store=new FileStore(blobStore,new File(directory),Integer.parseInt(size),memoryMapping).setPauseCompaction(pauseCompaction);\n  }\n else {\n    store=new FileStore(new File(directory),Integer.parseInt(size),memoryMapping).setPauseCompaction(pauseCompaction);\n  }\n  delegate=new SegmentNodeStore(store);\n  observerTracker=new ObserverTracker(delegate);\n  observerTracker.start(context.getBundleContext());\n  Dictionary<String,String> props=new Hashtable<String,String>();\n  props.put(Constants.SERVICE_PID,SegmentNodeStore.class.getName());\n  boolean standby=toBoolean(lookup(context,STANDBY),false);\n  providerRegistration=context.getBundleContext().registerService(SegmentStoreProvider.class.getName(),this,props);\n  if (!standby) {\n    storeRegistration=context.getBundleContext().registerService(NodeStore.class.getName(),this,props);\n  }\n  OsgiWhiteboard whiteboard=new OsgiWhiteboard(context.getBundleContext());\n  executor=new WhiteboardExecutor();\n  executor.start(whiteboard);\n  checkpointRegistration=registerMBean(whiteboard,CheckpointMBean.class,new SegmentCheckpointMBean(delegate),CheckpointMBean.TYPE,\"Segment node store checkpoint management\");\n  RevisionGC revisionGC=new RevisionGC(new Runnable(){\n    @Override public void run(){\n      store.gc();\n    }\n  }\n,executor);\n  revisionGCRegistration=registerMBean(whiteboard,RevisionGCMBean.class,revisionGC,RevisionGCMBean.TYPE,\"Segment node store revision garbage collection\");\n  if (store.getBlobStore() instanceof GarbageCollectableBlobStore) {\n    BlobGarbageCollector gc=new BlobGarbageCollector(){\n      @Override public void collectGarbage() throws Exception {\n        MarkSweepGarbageCollector gc=new MarkSweepGarbageCollector(new SegmentBlobReferenceRetriever(store.getTracker()),(GarbageCollectableBlobStore)store.getBlobStore(),executor);\n        gc.collectGarbage();\n      }\n    }\n;\n    blobGCRegistration=registerMBean(whiteboard,BlobGCMBean.class,new BlobGC(gc,executor),BlobGCMBean.TYPE,\"Segment node store blob garbage collection\");\n  }\n  log.info(\"SegmentNodeStore initialized\");\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 428,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 117,
                    "startLineNumber": 184,
                    "startColumnNumber": 8,
                    "endLineNumber": 184,
                    "endColumnNumber": 125
                },
                "nodeContext": "providerRegistration=context.getBundleContext().registerService(SegmentStoreProvider.class.getName(),this,props);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 15,
                "astHeight": 7
            },
            "tokenLength": 1,
            "type": "org.apache.jackrabbit.oak.plugins.segment.ComponentContext"
        },
        {
            "nodeContext": "context",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 186,
                "startColumnNumber": 32,
                "endLineNumber": 186,
                "endColumnNumber": 39
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 26,
                        "startLineNumber": 186,
                        "startColumnNumber": 32,
                        "endLineNumber": 186,
                        "endColumnNumber": 58
                    },
                    "nodeContext": "context.getBundleContext()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 82,
                        "startLineNumber": 186,
                        "startColumnNumber": 32,
                        "endLineNumber": 186,
                        "endColumnNumber": 114
                    },
                    "nodeContext": "context.getBundleContext().registerService(NodeStore.class.getName(),this,props)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 12,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 102,
                        "startLineNumber": 186,
                        "startColumnNumber": 12,
                        "endLineNumber": 186,
                        "endColumnNumber": 114
                    },
                    "nodeContext": "storeRegistration=context.getBundleContext().registerService(NodeStore.class.getName(),this,props)",
                    "nodeType": "Assignment",
                    "astNodeNumber": 14,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 103,
                        "startLineNumber": 186,
                        "startColumnNumber": 12,
                        "endLineNumber": 186,
                        "endColumnNumber": 115
                    },
                    "nodeContext": "storeRegistration=context.getBundleContext().registerService(NodeStore.class.getName(),this,props);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 15,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 127,
                        "startLineNumber": 185,
                        "startColumnNumber": 22,
                        "endLineNumber": 187,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  storeRegistration=context.getBundleContext().registerService(NodeStore.class.getName(),this,props);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 16,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 141,
                        "startLineNumber": 185,
                        "startColumnNumber": 8,
                        "endLineNumber": 187,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (!standby) {\n  storeRegistration=context.getBundleContext().registerService(NodeStore.class.getName(),this,props);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 19,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3685,
                        "startLineNumber": 137,
                        "startColumnNumber": 31,
                        "endLineNumber": 222,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (context == null) {\n    log.info(\"Component still not activated. Ignoring the initialization call\");\n    return;\n  }\n  Dictionary<?,?> properties=context.getProperties();\n  name=String.valueOf(properties.get(NAME));\n  String directory=lookup(context,DIRECTORY);\n  if (directory == null) {\n    directory=\"tarmk\";\n  }\n else {\n    directory=FilenameUtils.concat(directory,\"segmentstore\");\n  }\n  String mode=lookup(context,MODE);\n  if (mode == null) {\n    mode=System.getProperty(MODE,System.getProperty(\"sun.arch.data.model\",\"32\"));\n  }\n  String size=lookup(context,SIZE);\n  if (size == null) {\n    size=System.getProperty(SIZE,\"256\");\n  }\n  boolean pauseCompaction=toBoolean(lookup(context,PAUSE_COMPACTION),true);\n  boolean memoryMapping=\"64\".equals(mode);\n  if (customBlobStore) {\n    log.info(\"Initializing SegmentNodeStore with BlobStore [{}]\",blobStore);\n    store=new FileStore(blobStore,new File(directory),Integer.parseInt(size),memoryMapping).setPauseCompaction(pauseCompaction);\n  }\n else {\n    store=new FileStore(new File(directory),Integer.parseInt(size),memoryMapping).setPauseCompaction(pauseCompaction);\n  }\n  delegate=new SegmentNodeStore(store);\n  observerTracker=new ObserverTracker(delegate);\n  observerTracker.start(context.getBundleContext());\n  Dictionary<String,String> props=new Hashtable<String,String>();\n  props.put(Constants.SERVICE_PID,SegmentNodeStore.class.getName());\n  boolean standby=toBoolean(lookup(context,STANDBY),false);\n  providerRegistration=context.getBundleContext().registerService(SegmentStoreProvider.class.getName(),this,props);\n  if (!standby) {\n    storeRegistration=context.getBundleContext().registerService(NodeStore.class.getName(),this,props);\n  }\n  OsgiWhiteboard whiteboard=new OsgiWhiteboard(context.getBundleContext());\n  executor=new WhiteboardExecutor();\n  executor.start(whiteboard);\n  checkpointRegistration=registerMBean(whiteboard,CheckpointMBean.class,new SegmentCheckpointMBean(delegate),CheckpointMBean.TYPE,\"Segment node store checkpoint management\");\n  RevisionGC revisionGC=new RevisionGC(new Runnable(){\n    @Override public void run(){\n      store.gc();\n    }\n  }\n,executor);\n  revisionGCRegistration=registerMBean(whiteboard,RevisionGCMBean.class,revisionGC,RevisionGCMBean.TYPE,\"Segment node store revision garbage collection\");\n  if (store.getBlobStore() instanceof GarbageCollectableBlobStore) {\n    BlobGarbageCollector gc=new BlobGarbageCollector(){\n      @Override public void collectGarbage() throws Exception {\n        MarkSweepGarbageCollector gc=new MarkSweepGarbageCollector(new SegmentBlobReferenceRetriever(store.getTracker()),(GarbageCollectableBlobStore)store.getBlobStore(),executor);\n        gc.collectGarbage();\n      }\n    }\n;\n    blobGCRegistration=registerMBean(whiteboard,BlobGCMBean.class,new BlobGC(gc,executor),BlobGCMBean.TYPE,\"Segment node store blob garbage collection\");\n  }\n  log.info(\"SegmentNodeStore initialized\");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 421,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3761,
                        "startLineNumber": 136,
                        "startColumnNumber": 4,
                        "endLineNumber": 222,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "public synchronized void registerNodeStore() throws IOException {\n  if (context == null) {\n    log.info(\"Component still not activated. Ignoring the initialization call\");\n    return;\n  }\n  Dictionary<?,?> properties=context.getProperties();\n  name=String.valueOf(properties.get(NAME));\n  String directory=lookup(context,DIRECTORY);\n  if (directory == null) {\n    directory=\"tarmk\";\n  }\n else {\n    directory=FilenameUtils.concat(directory,\"segmentstore\");\n  }\n  String mode=lookup(context,MODE);\n  if (mode == null) {\n    mode=System.getProperty(MODE,System.getProperty(\"sun.arch.data.model\",\"32\"));\n  }\n  String size=lookup(context,SIZE);\n  if (size == null) {\n    size=System.getProperty(SIZE,\"256\");\n  }\n  boolean pauseCompaction=toBoolean(lookup(context,PAUSE_COMPACTION),true);\n  boolean memoryMapping=\"64\".equals(mode);\n  if (customBlobStore) {\n    log.info(\"Initializing SegmentNodeStore with BlobStore [{}]\",blobStore);\n    store=new FileStore(blobStore,new File(directory),Integer.parseInt(size),memoryMapping).setPauseCompaction(pauseCompaction);\n  }\n else {\n    store=new FileStore(new File(directory),Integer.parseInt(size),memoryMapping).setPauseCompaction(pauseCompaction);\n  }\n  delegate=new SegmentNodeStore(store);\n  observerTracker=new ObserverTracker(delegate);\n  observerTracker.start(context.getBundleContext());\n  Dictionary<String,String> props=new Hashtable<String,String>();\n  props.put(Constants.SERVICE_PID,SegmentNodeStore.class.getName());\n  boolean standby=toBoolean(lookup(context,STANDBY),false);\n  providerRegistration=context.getBundleContext().registerService(SegmentStoreProvider.class.getName(),this,props);\n  if (!standby) {\n    storeRegistration=context.getBundleContext().registerService(NodeStore.class.getName(),this,props);\n  }\n  OsgiWhiteboard whiteboard=new OsgiWhiteboard(context.getBundleContext());\n  executor=new WhiteboardExecutor();\n  executor.start(whiteboard);\n  checkpointRegistration=registerMBean(whiteboard,CheckpointMBean.class,new SegmentCheckpointMBean(delegate),CheckpointMBean.TYPE,\"Segment node store checkpoint management\");\n  RevisionGC revisionGC=new RevisionGC(new Runnable(){\n    @Override public void run(){\n      store.gc();\n    }\n  }\n,executor);\n  revisionGCRegistration=registerMBean(whiteboard,RevisionGCMBean.class,revisionGC,RevisionGCMBean.TYPE,\"Segment node store revision garbage collection\");\n  if (store.getBlobStore() instanceof GarbageCollectableBlobStore) {\n    BlobGarbageCollector gc=new BlobGarbageCollector(){\n      @Override public void collectGarbage() throws Exception {\n        MarkSweepGarbageCollector gc=new MarkSweepGarbageCollector(new SegmentBlobReferenceRetriever(store.getTracker()),(GarbageCollectableBlobStore)store.getBlobStore(),executor);\n        gc.collectGarbage();\n      }\n    }\n;\n    blobGCRegistration=registerMBean(whiteboard,BlobGCMBean.class,new BlobGC(gc,executor),BlobGCMBean.TYPE,\"Segment node store blob garbage collection\");\n  }\n  log.info(\"SegmentNodeStore initialized\");\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 428,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 103,
                    "startLineNumber": 186,
                    "startColumnNumber": 12,
                    "endLineNumber": 186,
                    "endColumnNumber": 115
                },
                "nodeContext": "storeRegistration=context.getBundleContext().registerService(NodeStore.class.getName(),this,props);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 15,
                "astHeight": 7
            },
            "tokenLength": 1,
            "type": "org.apache.jackrabbit.oak.plugins.segment.ComponentContext"
        },
        {
            "nodeContext": "context",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 189,
                "startColumnNumber": 55,
                "endLineNumber": 189,
                "endColumnNumber": 62
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
                    "nodePosition": {
                        "charLength": 26,
                        "startLineNumber": 189,
                        "startColumnNumber": 55,
                        "endLineNumber": 189,
                        "endColumnNumber": 81
                    },
                    "nodeContext": "context.getBundleContext()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 46,
                        "startLineNumber": 189,
                        "startColumnNumber": 36,
                        "endLineNumber": 189,
                        "endColumnNumber": 82
                    },
                    "nodeContext": "new OsgiWhiteboard(context.getBundleContext())",
                    "nodeType": "ClassInstanceCreation",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 59,
                        "startLineNumber": 189,
                        "startColumnNumber": 23,
                        "endLineNumber": 189,
                        "endColumnNumber": 82
                    },
                    "nodeContext": "whiteboard=new OsgiWhiteboard(context.getBundleContext())",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 75,
                        "startLineNumber": 189,
                        "startColumnNumber": 8,
                        "endLineNumber": 189,
                        "endColumnNumber": 83
                    },
                    "nodeContext": "OsgiWhiteboard whiteboard=new OsgiWhiteboard(context.getBundleContext());\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 11,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3685,
                        "startLineNumber": 137,
                        "startColumnNumber": 31,
                        "endLineNumber": 222,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (context == null) {\n    log.info(\"Component still not activated. Ignoring the initialization call\");\n    return;\n  }\n  Dictionary<?,?> properties=context.getProperties();\n  name=String.valueOf(properties.get(NAME));\n  String directory=lookup(context,DIRECTORY);\n  if (directory == null) {\n    directory=\"tarmk\";\n  }\n else {\n    directory=FilenameUtils.concat(directory,\"segmentstore\");\n  }\n  String mode=lookup(context,MODE);\n  if (mode == null) {\n    mode=System.getProperty(MODE,System.getProperty(\"sun.arch.data.model\",\"32\"));\n  }\n  String size=lookup(context,SIZE);\n  if (size == null) {\n    size=System.getProperty(SIZE,\"256\");\n  }\n  boolean pauseCompaction=toBoolean(lookup(context,PAUSE_COMPACTION),true);\n  boolean memoryMapping=\"64\".equals(mode);\n  if (customBlobStore) {\n    log.info(\"Initializing SegmentNodeStore with BlobStore [{}]\",blobStore);\n    store=new FileStore(blobStore,new File(directory),Integer.parseInt(size),memoryMapping).setPauseCompaction(pauseCompaction);\n  }\n else {\n    store=new FileStore(new File(directory),Integer.parseInt(size),memoryMapping).setPauseCompaction(pauseCompaction);\n  }\n  delegate=new SegmentNodeStore(store);\n  observerTracker=new ObserverTracker(delegate);\n  observerTracker.start(context.getBundleContext());\n  Dictionary<String,String> props=new Hashtable<String,String>();\n  props.put(Constants.SERVICE_PID,SegmentNodeStore.class.getName());\n  boolean standby=toBoolean(lookup(context,STANDBY),false);\n  providerRegistration=context.getBundleContext().registerService(SegmentStoreProvider.class.getName(),this,props);\n  if (!standby) {\n    storeRegistration=context.getBundleContext().registerService(NodeStore.class.getName(),this,props);\n  }\n  OsgiWhiteboard whiteboard=new OsgiWhiteboard(context.getBundleContext());\n  executor=new WhiteboardExecutor();\n  executor.start(whiteboard);\n  checkpointRegistration=registerMBean(whiteboard,CheckpointMBean.class,new SegmentCheckpointMBean(delegate),CheckpointMBean.TYPE,\"Segment node store checkpoint management\");\n  RevisionGC revisionGC=new RevisionGC(new Runnable(){\n    @Override public void run(){\n      store.gc();\n    }\n  }\n,executor);\n  revisionGCRegistration=registerMBean(whiteboard,RevisionGCMBean.class,revisionGC,RevisionGCMBean.TYPE,\"Segment node store revision garbage collection\");\n  if (store.getBlobStore() instanceof GarbageCollectableBlobStore) {\n    BlobGarbageCollector gc=new BlobGarbageCollector(){\n      @Override public void collectGarbage() throws Exception {\n        MarkSweepGarbageCollector gc=new MarkSweepGarbageCollector(new SegmentBlobReferenceRetriever(store.getTracker()),(GarbageCollectableBlobStore)store.getBlobStore(),executor);\n        gc.collectGarbage();\n      }\n    }\n;\n    blobGCRegistration=registerMBean(whiteboard,BlobGCMBean.class,new BlobGC(gc,executor),BlobGCMBean.TYPE,\"Segment node store blob garbage collection\");\n  }\n  log.info(\"SegmentNodeStore initialized\");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 421,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3761,
                        "startLineNumber": 136,
                        "startColumnNumber": 4,
                        "endLineNumber": 222,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "public synchronized void registerNodeStore() throws IOException {\n  if (context == null) {\n    log.info(\"Component still not activated. Ignoring the initialization call\");\n    return;\n  }\n  Dictionary<?,?> properties=context.getProperties();\n  name=String.valueOf(properties.get(NAME));\n  String directory=lookup(context,DIRECTORY);\n  if (directory == null) {\n    directory=\"tarmk\";\n  }\n else {\n    directory=FilenameUtils.concat(directory,\"segmentstore\");\n  }\n  String mode=lookup(context,MODE);\n  if (mode == null) {\n    mode=System.getProperty(MODE,System.getProperty(\"sun.arch.data.model\",\"32\"));\n  }\n  String size=lookup(context,SIZE);\n  if (size == null) {\n    size=System.getProperty(SIZE,\"256\");\n  }\n  boolean pauseCompaction=toBoolean(lookup(context,PAUSE_COMPACTION),true);\n  boolean memoryMapping=\"64\".equals(mode);\n  if (customBlobStore) {\n    log.info(\"Initializing SegmentNodeStore with BlobStore [{}]\",blobStore);\n    store=new FileStore(blobStore,new File(directory),Integer.parseInt(size),memoryMapping).setPauseCompaction(pauseCompaction);\n  }\n else {\n    store=new FileStore(new File(directory),Integer.parseInt(size),memoryMapping).setPauseCompaction(pauseCompaction);\n  }\n  delegate=new SegmentNodeStore(store);\n  observerTracker=new ObserverTracker(delegate);\n  observerTracker.start(context.getBundleContext());\n  Dictionary<String,String> props=new Hashtable<String,String>();\n  props.put(Constants.SERVICE_PID,SegmentNodeStore.class.getName());\n  boolean standby=toBoolean(lookup(context,STANDBY),false);\n  providerRegistration=context.getBundleContext().registerService(SegmentStoreProvider.class.getName(),this,props);\n  if (!standby) {\n    storeRegistration=context.getBundleContext().registerService(NodeStore.class.getName(),this,props);\n  }\n  OsgiWhiteboard whiteboard=new OsgiWhiteboard(context.getBundleContext());\n  executor=new WhiteboardExecutor();\n  executor.start(whiteboard);\n  checkpointRegistration=registerMBean(whiteboard,CheckpointMBean.class,new SegmentCheckpointMBean(delegate),CheckpointMBean.TYPE,\"Segment node store checkpoint management\");\n  RevisionGC revisionGC=new RevisionGC(new Runnable(){\n    @Override public void run(){\n      store.gc();\n    }\n  }\n,executor);\n  revisionGCRegistration=registerMBean(whiteboard,RevisionGCMBean.class,revisionGC,RevisionGCMBean.TYPE,\"Segment node store revision garbage collection\");\n  if (store.getBlobStore() instanceof GarbageCollectableBlobStore) {\n    BlobGarbageCollector gc=new BlobGarbageCollector(){\n      @Override public void collectGarbage() throws Exception {\n        MarkSweepGarbageCollector gc=new MarkSweepGarbageCollector(new SegmentBlobReferenceRetriever(store.getTracker()),(GarbageCollectableBlobStore)store.getBlobStore(),executor);\n        gc.collectGarbage();\n      }\n    }\n;\n    blobGCRegistration=registerMBean(whiteboard,BlobGCMBean.class,new BlobGC(gc,executor),BlobGCMBean.TYPE,\"Segment node store blob garbage collection\");\n  }\n  log.info(\"SegmentNodeStore initialized\");\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 428,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 75,
                    "startLineNumber": 189,
                    "startColumnNumber": 8,
                    "endLineNumber": 189,
                    "endColumnNumber": 83
                },
                "nodeContext": "OsgiWhiteboard whiteboard=new OsgiWhiteboard(context.getBundleContext());\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 11,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "org.apache.jackrabbit.oak.plugins.segment.ComponentContext"
        }
    ],
    "positionList": [
        {
            "charLength": 7,
            "startLineNumber": 138,
            "startColumnNumber": 11,
            "endLineNumber": 138,
            "endColumnNumber": 18
        },
        {
            "charLength": 7,
            "startLineNumber": 143,
            "startColumnNumber": 38,
            "endLineNumber": 143,
            "endColumnNumber": 45
        },
        {
            "charLength": 7,
            "startLineNumber": 146,
            "startColumnNumber": 34,
            "endLineNumber": 146,
            "endColumnNumber": 41
        },
        {
            "charLength": 7,
            "startLineNumber": 153,
            "startColumnNumber": 29,
            "endLineNumber": 153,
            "endColumnNumber": 36
        },
        {
            "charLength": 7,
            "startLineNumber": 159,
            "startColumnNumber": 29,
            "endLineNumber": 159,
            "endColumnNumber": 36
        },
        {
            "charLength": 7,
            "startLineNumber": 164,
            "startColumnNumber": 51,
            "endLineNumber": 164,
            "endColumnNumber": 58
        },
        {
            "charLength": 7,
            "startLineNumber": 178,
            "startColumnNumber": 30,
            "endLineNumber": 178,
            "endColumnNumber": 37
        },
        {
            "charLength": 7,
            "startLineNumber": 183,
            "startColumnNumber": 43,
            "endLineNumber": 183,
            "endColumnNumber": 50
        },
        {
            "charLength": 7,
            "startLineNumber": 184,
            "startColumnNumber": 31,
            "endLineNumber": 184,
            "endColumnNumber": 38
        },
        {
            "charLength": 7,
            "startLineNumber": 186,
            "startColumnNumber": 32,
            "endLineNumber": 186,
            "endColumnNumber": 39
        },
        {
            "charLength": 7,
            "startLineNumber": 189,
            "startColumnNumber": 55,
            "endLineNumber": 189,
            "endColumnNumber": 62
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 9,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 9,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 9,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 9,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 9,
            "secondKey": 5,
            "layout": 6
        },
        {
            "firstKey": 9,
            "secondKey": 6,
            "layout": 6
        },
        {
            "firstKey": 9,
            "secondKey": 7,
            "layout": 6
        },
        {
            "firstKey": 9,
            "secondKey": 8,
            "layout": 6
        },
        {
            "firstKey": 9,
            "secondKey": 10,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 9,
            "layout": 4
        }
    ]
}