{
    "id": 331,
    "expression": "ps",
    "projectName": "java-decompiler@jd-gui",
    "commitID": "3fe11bf2c97823cbaba60b305338bc44a993daa5",
    "filePath": "services/src/main/java/org/jd/gui/service/sourcesaver/ClassFileSourceSaverProvider.java",
    "occurrences": 14,
    "isArithmeticExpression": 0,
    "isGetTypeMethod": 0,
    "expressionList": [
        {
            "nodeContext": "ps",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 104,
                "startColumnNumber": 35,
                "endLineNumber": 104,
                "endColumnNumber": 37
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 26,
                        "startLineNumber": 104,
                        "startColumnNumber": 12,
                        "endLineNumber": 104,
                        "endColumnNumber": 38
                    },
                    "nodeContext": "printer.setPrintStream(ps)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 27,
                        "startLineNumber": 104,
                        "startColumnNumber": 12,
                        "endLineNumber": 104,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "printer.setPrintStream(ps);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 2681,
                        "startLineNumber": 85,
                        "startColumnNumber": 12,
                        "endLineNumber": 147,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> p=api.getPreferences();\n  preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n  preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n  preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n  preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n  preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n  loader.setEntry(entry);\n  baos.reset();\n  PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n  printer.setPrintStream(ps);\n  printer.setPreferences(preferences);\n  DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n  if (getPreferenceValue(p,WRITE_METADATA,true)) {\n    String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    ps.print(\"\\n\\n/* Location:              \");\n    ps.print(location);\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      ps.print(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        ps.print(majorVersion - (49 - 5));\n      }\n else {\n        ps.print(majorVersion - (45 - 1));\n      }\n      ps.print(\" (\");\n      ps.print(majorVersion);\n      ps.print('.');\n      ps.print(printer.getMinorVersion());\n      ps.print(')');\n    }\n    ps.print(\"\\n * JD-Core Version:       \");\n    ps.print(CoreConstants.JD_CORE_VERSION);\n    ps.print(\"\\n */\");\n  }\n  try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n    baos.writeTo(os);\n  }\n catch (  IOException ignore) {\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 262,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2943,
                        "startLineNumber": 85,
                        "startColumnNumber": 8,
                        "endLineNumber": 152,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> p=api.getPreferences();\n  preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n  preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n  preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n  preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n  preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n  loader.setEntry(entry);\n  baos.reset();\n  PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n  printer.setPrintStream(ps);\n  printer.setPreferences(preferences);\n  DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n  if (getPreferenceValue(p,WRITE_METADATA,true)) {\n    String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    ps.print(\"\\n\\n/* Location:              \");\n    ps.print(location);\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      ps.print(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        ps.print(majorVersion - (49 - 5));\n      }\n else {\n        ps.print(majorVersion - (45 - 1));\n      }\n      ps.print(\" (\");\n      ps.print(majorVersion);\n      ps.print('.');\n      ps.print(printer.getMinorVersion());\n      ps.print(')');\n    }\n    ps.print(\"\\n * JD-Core Version:       \");\n    ps.print(CoreConstants.JD_CORE_VERSION);\n    ps.print(\"\\n */\");\n  }\n  try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n    baos.writeTo(os);\n  }\n catch (  IOException ignore) {\n  }\n}\n catch (Exception ignore) {\n  try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n    writer.write(\"// INTERNAL ERROR //\");\n  }\n catch (  IOException ignoreAgain) {\n  }\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 294,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2961,
                        "startLineNumber": 84,
                        "startColumnNumber": 128,
                        "endLineNumber": 153,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> p=api.getPreferences();\n    preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n    preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n    preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n    preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n    preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n    loader.setEntry(entry);\n    baos.reset();\n    PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n    printer.setPrintStream(ps);\n    printer.setPreferences(preferences);\n    DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n    if (getPreferenceValue(p,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      ps.print(\"\\n\\n/* Location:              \");\n      ps.print(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        ps.print(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          ps.print(majorVersion - (49 - 5));\n        }\n else {\n          ps.print(majorVersion - (45 - 1));\n        }\n        ps.print(\" (\");\n        ps.print(majorVersion);\n        ps.print('.');\n        ps.print(printer.getMinorVersion());\n        ps.print(')');\n      }\n      ps.print(\"\\n * JD-Core Version:       \");\n      ps.print(CoreConstants.JD_CORE_VERSION);\n      ps.print(\"\\n */\");\n    }\n    try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n      baos.writeTo(os);\n    }\n catch (    IOException ignore) {\n    }\n  }\n catch (  Exception ignore) {\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ignoreAgain) {\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 295,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3100,
                        "startLineNumber": 83,
                        "startColumnNumber": 4,
                        "endLineNumber": 153,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void saveContent(API api,Controller controller,Listener listener,Path rootPath,Path path,Container.Entry entry){\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> p=api.getPreferences();\n    preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n    preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n    preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n    preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n    preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n    loader.setEntry(entry);\n    baos.reset();\n    PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n    printer.setPrintStream(ps);\n    printer.setPreferences(preferences);\n    DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n    if (getPreferenceValue(p,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      ps.print(\"\\n\\n/* Location:              \");\n      ps.print(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        ps.print(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          ps.print(majorVersion - (49 - 5));\n        }\n else {\n          ps.print(majorVersion - (45 - 1));\n        }\n        ps.print(\" (\");\n        ps.print(majorVersion);\n        ps.print('.');\n        ps.print(printer.getMinorVersion());\n        ps.print(')');\n      }\n      ps.print(\"\\n * JD-Core Version:       \");\n      ps.print(CoreConstants.JD_CORE_VERSION);\n      ps.print(\"\\n */\");\n    }\n    try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n      baos.writeTo(os);\n    }\n catch (    IOException ignore) {\n    }\n  }\n catch (  Exception ignore) {\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ignoreAgain) {\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 327,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 27,
                    "startLineNumber": 104,
                    "startColumnNumber": 12,
                    "endLineNumber": 104,
                    "endColumnNumber": 39
                },
                "nodeContext": "printer.setPrintStream(ps);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.io.PrintStream"
        },
        {
            "nodeContext": "ps",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 117,
                "startColumnNumber": 16,
                "endLineNumber": 117,
                "endColumnNumber": 18
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 42,
                        "startLineNumber": 117,
                        "startColumnNumber": 16,
                        "endLineNumber": 117,
                        "endColumnNumber": 58
                    },
                    "nodeContext": "ps.print(\"\\n\\n/* Location:              \")",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 43,
                        "startLineNumber": 117,
                        "startColumnNumber": 16,
                        "endLineNumber": 117,
                        "endColumnNumber": 59
                    },
                    "nodeContext": "ps.print(\"\\n\\n/* Location:              \");\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1252,
                        "startLineNumber": 111,
                        "startColumnNumber": 61,
                        "endLineNumber": 141,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n  ps.print(\"\\n\\n/* Location:              \");\n  ps.print(location);\n  int majorVersion=printer.getMajorVersion();\n  if (majorVersion >= 45) {\n    ps.print(\"\\n * Java compiler version: \");\n    if (majorVersion >= 49) {\n      ps.print(majorVersion - (49 - 5));\n    }\n else {\n      ps.print(majorVersion - (45 - 1));\n    }\n    ps.print(\" (\");\n    ps.print(majorVersion);\n    ps.print('.');\n    ps.print(printer.getMinorVersion());\n    ps.print(')');\n  }\n  ps.print(\"\\n * JD-Core Version:       \");\n  ps.print(CoreConstants.JD_CORE_VERSION);\n  ps.print(\"\\n */\");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 115,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1301,
                        "startLineNumber": 111,
                        "startColumnNumber": 12,
                        "endLineNumber": 141,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (getPreferenceValue(p,WRITE_METADATA,true)) {\n  String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n  ps.print(\"\\n\\n/* Location:              \");\n  ps.print(location);\n  int majorVersion=printer.getMajorVersion();\n  if (majorVersion >= 45) {\n    ps.print(\"\\n * Java compiler version: \");\n    if (majorVersion >= 49) {\n      ps.print(majorVersion - (49 - 5));\n    }\n else {\n      ps.print(majorVersion - (45 - 1));\n    }\n    ps.print(\" (\");\n    ps.print(majorVersion);\n    ps.print('.');\n    ps.print(printer.getMinorVersion());\n    ps.print(')');\n  }\n  ps.print(\"\\n * JD-Core Version:       \");\n  ps.print(CoreConstants.JD_CORE_VERSION);\n  ps.print(\"\\n */\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 121,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 2681,
                        "startLineNumber": 85,
                        "startColumnNumber": 12,
                        "endLineNumber": 147,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> p=api.getPreferences();\n  preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n  preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n  preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n  preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n  preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n  loader.setEntry(entry);\n  baos.reset();\n  PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n  printer.setPrintStream(ps);\n  printer.setPreferences(preferences);\n  DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n  if (getPreferenceValue(p,WRITE_METADATA,true)) {\n    String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    ps.print(\"\\n\\n/* Location:              \");\n    ps.print(location);\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      ps.print(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        ps.print(majorVersion - (49 - 5));\n      }\n else {\n        ps.print(majorVersion - (45 - 1));\n      }\n      ps.print(\" (\");\n      ps.print(majorVersion);\n      ps.print('.');\n      ps.print(printer.getMinorVersion());\n      ps.print(')');\n    }\n    ps.print(\"\\n * JD-Core Version:       \");\n    ps.print(CoreConstants.JD_CORE_VERSION);\n    ps.print(\"\\n */\");\n  }\n  try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n    baos.writeTo(os);\n  }\n catch (  IOException ignore) {\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 262,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2943,
                        "startLineNumber": 85,
                        "startColumnNumber": 8,
                        "endLineNumber": 152,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> p=api.getPreferences();\n  preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n  preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n  preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n  preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n  preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n  loader.setEntry(entry);\n  baos.reset();\n  PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n  printer.setPrintStream(ps);\n  printer.setPreferences(preferences);\n  DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n  if (getPreferenceValue(p,WRITE_METADATA,true)) {\n    String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    ps.print(\"\\n\\n/* Location:              \");\n    ps.print(location);\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      ps.print(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        ps.print(majorVersion - (49 - 5));\n      }\n else {\n        ps.print(majorVersion - (45 - 1));\n      }\n      ps.print(\" (\");\n      ps.print(majorVersion);\n      ps.print('.');\n      ps.print(printer.getMinorVersion());\n      ps.print(')');\n    }\n    ps.print(\"\\n * JD-Core Version:       \");\n    ps.print(CoreConstants.JD_CORE_VERSION);\n    ps.print(\"\\n */\");\n  }\n  try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n    baos.writeTo(os);\n  }\n catch (  IOException ignore) {\n  }\n}\n catch (Exception ignore) {\n  try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n    writer.write(\"// INTERNAL ERROR //\");\n  }\n catch (  IOException ignoreAgain) {\n  }\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 294,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2961,
                        "startLineNumber": 84,
                        "startColumnNumber": 128,
                        "endLineNumber": 153,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> p=api.getPreferences();\n    preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n    preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n    preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n    preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n    preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n    loader.setEntry(entry);\n    baos.reset();\n    PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n    printer.setPrintStream(ps);\n    printer.setPreferences(preferences);\n    DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n    if (getPreferenceValue(p,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      ps.print(\"\\n\\n/* Location:              \");\n      ps.print(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        ps.print(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          ps.print(majorVersion - (49 - 5));\n        }\n else {\n          ps.print(majorVersion - (45 - 1));\n        }\n        ps.print(\" (\");\n        ps.print(majorVersion);\n        ps.print('.');\n        ps.print(printer.getMinorVersion());\n        ps.print(')');\n      }\n      ps.print(\"\\n * JD-Core Version:       \");\n      ps.print(CoreConstants.JD_CORE_VERSION);\n      ps.print(\"\\n */\");\n    }\n    try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n      baos.writeTo(os);\n    }\n catch (    IOException ignore) {\n    }\n  }\n catch (  Exception ignore) {\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ignoreAgain) {\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 295,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3100,
                        "startLineNumber": 83,
                        "startColumnNumber": 4,
                        "endLineNumber": 153,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void saveContent(API api,Controller controller,Listener listener,Path rootPath,Path path,Container.Entry entry){\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> p=api.getPreferences();\n    preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n    preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n    preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n    preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n    preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n    loader.setEntry(entry);\n    baos.reset();\n    PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n    printer.setPrintStream(ps);\n    printer.setPreferences(preferences);\n    DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n    if (getPreferenceValue(p,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      ps.print(\"\\n\\n/* Location:              \");\n      ps.print(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        ps.print(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          ps.print(majorVersion - (49 - 5));\n        }\n else {\n          ps.print(majorVersion - (45 - 1));\n        }\n        ps.print(\" (\");\n        ps.print(majorVersion);\n        ps.print('.');\n        ps.print(printer.getMinorVersion());\n        ps.print(')');\n      }\n      ps.print(\"\\n * JD-Core Version:       \");\n      ps.print(CoreConstants.JD_CORE_VERSION);\n      ps.print(\"\\n */\");\n    }\n    try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n      baos.writeTo(os);\n    }\n catch (    IOException ignore) {\n    }\n  }\n catch (  Exception ignore) {\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ignoreAgain) {\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 327,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 43,
                    "startLineNumber": 117,
                    "startColumnNumber": 16,
                    "endLineNumber": 117,
                    "endColumnNumber": 59
                },
                "nodeContext": "ps.print(\"\\n\\n/* Location:              \");\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.io.PrintStream"
        },
        {
            "nodeContext": "ps",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 118,
                "startColumnNumber": 16,
                "endLineNumber": 118,
                "endColumnNumber": 18
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 18,
                        "startLineNumber": 118,
                        "startColumnNumber": 16,
                        "endLineNumber": 118,
                        "endColumnNumber": 34
                    },
                    "nodeContext": "ps.print(location)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 19,
                        "startLineNumber": 118,
                        "startColumnNumber": 16,
                        "endLineNumber": 118,
                        "endColumnNumber": 35
                    },
                    "nodeContext": "ps.print(location);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1252,
                        "startLineNumber": 111,
                        "startColumnNumber": 61,
                        "endLineNumber": 141,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n  ps.print(\"\\n\\n/* Location:              \");\n  ps.print(location);\n  int majorVersion=printer.getMajorVersion();\n  if (majorVersion >= 45) {\n    ps.print(\"\\n * Java compiler version: \");\n    if (majorVersion >= 49) {\n      ps.print(majorVersion - (49 - 5));\n    }\n else {\n      ps.print(majorVersion - (45 - 1));\n    }\n    ps.print(\" (\");\n    ps.print(majorVersion);\n    ps.print('.');\n    ps.print(printer.getMinorVersion());\n    ps.print(')');\n  }\n  ps.print(\"\\n * JD-Core Version:       \");\n  ps.print(CoreConstants.JD_CORE_VERSION);\n  ps.print(\"\\n */\");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 115,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1301,
                        "startLineNumber": 111,
                        "startColumnNumber": 12,
                        "endLineNumber": 141,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (getPreferenceValue(p,WRITE_METADATA,true)) {\n  String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n  ps.print(\"\\n\\n/* Location:              \");\n  ps.print(location);\n  int majorVersion=printer.getMajorVersion();\n  if (majorVersion >= 45) {\n    ps.print(\"\\n * Java compiler version: \");\n    if (majorVersion >= 49) {\n      ps.print(majorVersion - (49 - 5));\n    }\n else {\n      ps.print(majorVersion - (45 - 1));\n    }\n    ps.print(\" (\");\n    ps.print(majorVersion);\n    ps.print('.');\n    ps.print(printer.getMinorVersion());\n    ps.print(')');\n  }\n  ps.print(\"\\n * JD-Core Version:       \");\n  ps.print(CoreConstants.JD_CORE_VERSION);\n  ps.print(\"\\n */\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 121,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 2681,
                        "startLineNumber": 85,
                        "startColumnNumber": 12,
                        "endLineNumber": 147,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> p=api.getPreferences();\n  preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n  preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n  preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n  preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n  preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n  loader.setEntry(entry);\n  baos.reset();\n  PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n  printer.setPrintStream(ps);\n  printer.setPreferences(preferences);\n  DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n  if (getPreferenceValue(p,WRITE_METADATA,true)) {\n    String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    ps.print(\"\\n\\n/* Location:              \");\n    ps.print(location);\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      ps.print(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        ps.print(majorVersion - (49 - 5));\n      }\n else {\n        ps.print(majorVersion - (45 - 1));\n      }\n      ps.print(\" (\");\n      ps.print(majorVersion);\n      ps.print('.');\n      ps.print(printer.getMinorVersion());\n      ps.print(')');\n    }\n    ps.print(\"\\n * JD-Core Version:       \");\n    ps.print(CoreConstants.JD_CORE_VERSION);\n    ps.print(\"\\n */\");\n  }\n  try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n    baos.writeTo(os);\n  }\n catch (  IOException ignore) {\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 262,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2943,
                        "startLineNumber": 85,
                        "startColumnNumber": 8,
                        "endLineNumber": 152,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> p=api.getPreferences();\n  preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n  preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n  preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n  preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n  preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n  loader.setEntry(entry);\n  baos.reset();\n  PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n  printer.setPrintStream(ps);\n  printer.setPreferences(preferences);\n  DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n  if (getPreferenceValue(p,WRITE_METADATA,true)) {\n    String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    ps.print(\"\\n\\n/* Location:              \");\n    ps.print(location);\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      ps.print(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        ps.print(majorVersion - (49 - 5));\n      }\n else {\n        ps.print(majorVersion - (45 - 1));\n      }\n      ps.print(\" (\");\n      ps.print(majorVersion);\n      ps.print('.');\n      ps.print(printer.getMinorVersion());\n      ps.print(')');\n    }\n    ps.print(\"\\n * JD-Core Version:       \");\n    ps.print(CoreConstants.JD_CORE_VERSION);\n    ps.print(\"\\n */\");\n  }\n  try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n    baos.writeTo(os);\n  }\n catch (  IOException ignore) {\n  }\n}\n catch (Exception ignore) {\n  try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n    writer.write(\"// INTERNAL ERROR //\");\n  }\n catch (  IOException ignoreAgain) {\n  }\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 294,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2961,
                        "startLineNumber": 84,
                        "startColumnNumber": 128,
                        "endLineNumber": 153,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> p=api.getPreferences();\n    preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n    preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n    preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n    preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n    preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n    loader.setEntry(entry);\n    baos.reset();\n    PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n    printer.setPrintStream(ps);\n    printer.setPreferences(preferences);\n    DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n    if (getPreferenceValue(p,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      ps.print(\"\\n\\n/* Location:              \");\n      ps.print(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        ps.print(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          ps.print(majorVersion - (49 - 5));\n        }\n else {\n          ps.print(majorVersion - (45 - 1));\n        }\n        ps.print(\" (\");\n        ps.print(majorVersion);\n        ps.print('.');\n        ps.print(printer.getMinorVersion());\n        ps.print(')');\n      }\n      ps.print(\"\\n * JD-Core Version:       \");\n      ps.print(CoreConstants.JD_CORE_VERSION);\n      ps.print(\"\\n */\");\n    }\n    try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n      baos.writeTo(os);\n    }\n catch (    IOException ignore) {\n    }\n  }\n catch (  Exception ignore) {\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ignoreAgain) {\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 295,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3100,
                        "startLineNumber": 83,
                        "startColumnNumber": 4,
                        "endLineNumber": 153,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void saveContent(API api,Controller controller,Listener listener,Path rootPath,Path path,Container.Entry entry){\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> p=api.getPreferences();\n    preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n    preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n    preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n    preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n    preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n    loader.setEntry(entry);\n    baos.reset();\n    PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n    printer.setPrintStream(ps);\n    printer.setPreferences(preferences);\n    DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n    if (getPreferenceValue(p,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      ps.print(\"\\n\\n/* Location:              \");\n      ps.print(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        ps.print(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          ps.print(majorVersion - (49 - 5));\n        }\n else {\n          ps.print(majorVersion - (45 - 1));\n        }\n        ps.print(\" (\");\n        ps.print(majorVersion);\n        ps.print('.');\n        ps.print(printer.getMinorVersion());\n        ps.print(')');\n      }\n      ps.print(\"\\n * JD-Core Version:       \");\n      ps.print(CoreConstants.JD_CORE_VERSION);\n      ps.print(\"\\n */\");\n    }\n    try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n      baos.writeTo(os);\n    }\n catch (    IOException ignore) {\n    }\n  }\n catch (  Exception ignore) {\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ignoreAgain) {\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 327,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 19,
                    "startLineNumber": 118,
                    "startColumnNumber": 16,
                    "endLineNumber": 118,
                    "endColumnNumber": 35
                },
                "nodeContext": "ps.print(location);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.io.PrintStream"
        },
        {
            "nodeContext": "ps",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 123,
                "startColumnNumber": 20,
                "endLineNumber": 123,
                "endColumnNumber": 22
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 40,
                        "startLineNumber": 123,
                        "startColumnNumber": 20,
                        "endLineNumber": 123,
                        "endColumnNumber": 60
                    },
                    "nodeContext": "ps.print(\"\\n * Java compiler version: \")",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 41,
                        "startLineNumber": 123,
                        "startColumnNumber": 20,
                        "endLineNumber": 123,
                        "endColumnNumber": 61
                    },
                    "nodeContext": "ps.print(\"\\n * Java compiler version: \");\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 519,
                        "startLineNumber": 122,
                        "startColumnNumber": 40,
                        "endLineNumber": 136,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  ps.print(\"\\n * Java compiler version: \");\n  if (majorVersion >= 49) {\n    ps.print(majorVersion - (49 - 5));\n  }\n else {\n    ps.print(majorVersion - (45 - 1));\n  }\n  ps.print(\" (\");\n  ps.print(majorVersion);\n  ps.print('.');\n  ps.print(printer.getMinorVersion());\n  ps.print(')');\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 59,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 543,
                        "startLineNumber": 122,
                        "startColumnNumber": 16,
                        "endLineNumber": 136,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (majorVersion >= 45) {\n  ps.print(\"\\n * Java compiler version: \");\n  if (majorVersion >= 49) {\n    ps.print(majorVersion - (49 - 5));\n  }\n else {\n    ps.print(majorVersion - (45 - 1));\n  }\n  ps.print(\" (\");\n  ps.print(majorVersion);\n  ps.print('.');\n  ps.print(printer.getMinorVersion());\n  ps.print(')');\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 63,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1252,
                        "startLineNumber": 111,
                        "startColumnNumber": 61,
                        "endLineNumber": 141,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n  ps.print(\"\\n\\n/* Location:              \");\n  ps.print(location);\n  int majorVersion=printer.getMajorVersion();\n  if (majorVersion >= 45) {\n    ps.print(\"\\n * Java compiler version: \");\n    if (majorVersion >= 49) {\n      ps.print(majorVersion - (49 - 5));\n    }\n else {\n      ps.print(majorVersion - (45 - 1));\n    }\n    ps.print(\" (\");\n    ps.print(majorVersion);\n    ps.print('.');\n    ps.print(printer.getMinorVersion());\n    ps.print(')');\n  }\n  ps.print(\"\\n * JD-Core Version:       \");\n  ps.print(CoreConstants.JD_CORE_VERSION);\n  ps.print(\"\\n */\");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 115,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1301,
                        "startLineNumber": 111,
                        "startColumnNumber": 12,
                        "endLineNumber": 141,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (getPreferenceValue(p,WRITE_METADATA,true)) {\n  String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n  ps.print(\"\\n\\n/* Location:              \");\n  ps.print(location);\n  int majorVersion=printer.getMajorVersion();\n  if (majorVersion >= 45) {\n    ps.print(\"\\n * Java compiler version: \");\n    if (majorVersion >= 49) {\n      ps.print(majorVersion - (49 - 5));\n    }\n else {\n      ps.print(majorVersion - (45 - 1));\n    }\n    ps.print(\" (\");\n    ps.print(majorVersion);\n    ps.print('.');\n    ps.print(printer.getMinorVersion());\n    ps.print(')');\n  }\n  ps.print(\"\\n * JD-Core Version:       \");\n  ps.print(CoreConstants.JD_CORE_VERSION);\n  ps.print(\"\\n */\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 121,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 2681,
                        "startLineNumber": 85,
                        "startColumnNumber": 12,
                        "endLineNumber": 147,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> p=api.getPreferences();\n  preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n  preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n  preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n  preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n  preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n  loader.setEntry(entry);\n  baos.reset();\n  PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n  printer.setPrintStream(ps);\n  printer.setPreferences(preferences);\n  DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n  if (getPreferenceValue(p,WRITE_METADATA,true)) {\n    String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    ps.print(\"\\n\\n/* Location:              \");\n    ps.print(location);\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      ps.print(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        ps.print(majorVersion - (49 - 5));\n      }\n else {\n        ps.print(majorVersion - (45 - 1));\n      }\n      ps.print(\" (\");\n      ps.print(majorVersion);\n      ps.print('.');\n      ps.print(printer.getMinorVersion());\n      ps.print(')');\n    }\n    ps.print(\"\\n * JD-Core Version:       \");\n    ps.print(CoreConstants.JD_CORE_VERSION);\n    ps.print(\"\\n */\");\n  }\n  try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n    baos.writeTo(os);\n  }\n catch (  IOException ignore) {\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 262,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2943,
                        "startLineNumber": 85,
                        "startColumnNumber": 8,
                        "endLineNumber": 152,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> p=api.getPreferences();\n  preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n  preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n  preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n  preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n  preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n  loader.setEntry(entry);\n  baos.reset();\n  PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n  printer.setPrintStream(ps);\n  printer.setPreferences(preferences);\n  DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n  if (getPreferenceValue(p,WRITE_METADATA,true)) {\n    String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    ps.print(\"\\n\\n/* Location:              \");\n    ps.print(location);\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      ps.print(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        ps.print(majorVersion - (49 - 5));\n      }\n else {\n        ps.print(majorVersion - (45 - 1));\n      }\n      ps.print(\" (\");\n      ps.print(majorVersion);\n      ps.print('.');\n      ps.print(printer.getMinorVersion());\n      ps.print(')');\n    }\n    ps.print(\"\\n * JD-Core Version:       \");\n    ps.print(CoreConstants.JD_CORE_VERSION);\n    ps.print(\"\\n */\");\n  }\n  try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n    baos.writeTo(os);\n  }\n catch (  IOException ignore) {\n  }\n}\n catch (Exception ignore) {\n  try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n    writer.write(\"// INTERNAL ERROR //\");\n  }\n catch (  IOException ignoreAgain) {\n  }\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 294,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2961,
                        "startLineNumber": 84,
                        "startColumnNumber": 128,
                        "endLineNumber": 153,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> p=api.getPreferences();\n    preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n    preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n    preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n    preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n    preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n    loader.setEntry(entry);\n    baos.reset();\n    PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n    printer.setPrintStream(ps);\n    printer.setPreferences(preferences);\n    DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n    if (getPreferenceValue(p,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      ps.print(\"\\n\\n/* Location:              \");\n      ps.print(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        ps.print(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          ps.print(majorVersion - (49 - 5));\n        }\n else {\n          ps.print(majorVersion - (45 - 1));\n        }\n        ps.print(\" (\");\n        ps.print(majorVersion);\n        ps.print('.');\n        ps.print(printer.getMinorVersion());\n        ps.print(')');\n      }\n      ps.print(\"\\n * JD-Core Version:       \");\n      ps.print(CoreConstants.JD_CORE_VERSION);\n      ps.print(\"\\n */\");\n    }\n    try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n      baos.writeTo(os);\n    }\n catch (    IOException ignore) {\n    }\n  }\n catch (  Exception ignore) {\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ignoreAgain) {\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 295,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3100,
                        "startLineNumber": 83,
                        "startColumnNumber": 4,
                        "endLineNumber": 153,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void saveContent(API api,Controller controller,Listener listener,Path rootPath,Path path,Container.Entry entry){\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> p=api.getPreferences();\n    preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n    preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n    preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n    preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n    preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n    loader.setEntry(entry);\n    baos.reset();\n    PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n    printer.setPrintStream(ps);\n    printer.setPreferences(preferences);\n    DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n    if (getPreferenceValue(p,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      ps.print(\"\\n\\n/* Location:              \");\n      ps.print(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        ps.print(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          ps.print(majorVersion - (49 - 5));\n        }\n else {\n          ps.print(majorVersion - (45 - 1));\n        }\n        ps.print(\" (\");\n        ps.print(majorVersion);\n        ps.print('.');\n        ps.print(printer.getMinorVersion());\n        ps.print(')');\n      }\n      ps.print(\"\\n * JD-Core Version:       \");\n      ps.print(CoreConstants.JD_CORE_VERSION);\n      ps.print(\"\\n */\");\n    }\n    try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n      baos.writeTo(os);\n    }\n catch (    IOException ignore) {\n    }\n  }\n catch (  Exception ignore) {\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ignoreAgain) {\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 327,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 41,
                    "startLineNumber": 123,
                    "startColumnNumber": 20,
                    "endLineNumber": 123,
                    "endColumnNumber": 61
                },
                "nodeContext": "ps.print(\"\\n * Java compiler version: \");\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.io.PrintStream"
        },
        {
            "nodeContext": "ps",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 126,
                "startColumnNumber": 24,
                "endLineNumber": 126,
                "endColumnNumber": 26
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 33,
                        "startLineNumber": 126,
                        "startColumnNumber": 24,
                        "endLineNumber": 126,
                        "endColumnNumber": 57
                    },
                    "nodeContext": "ps.print(majorVersion - (49 - 5))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 9,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 34,
                        "startLineNumber": 126,
                        "startColumnNumber": 24,
                        "endLineNumber": 126,
                        "endColumnNumber": 58
                    },
                    "nodeContext": "ps.print(majorVersion - (49 - 5));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 10,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 84,
                        "startLineNumber": 125,
                        "startColumnNumber": 44,
                        "endLineNumber": 127,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  ps.print(majorVersion - (49 - 5));\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 11,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 198,
                        "startLineNumber": 125,
                        "startColumnNumber": 20,
                        "endLineNumber": 129,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (majorVersion >= 49) {\n  ps.print(majorVersion - (49 - 5));\n}\n else {\n  ps.print(majorVersion - (45 - 1));\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 26,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 519,
                        "startLineNumber": 122,
                        "startColumnNumber": 40,
                        "endLineNumber": 136,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  ps.print(\"\\n * Java compiler version: \");\n  if (majorVersion >= 49) {\n    ps.print(majorVersion - (49 - 5));\n  }\n else {\n    ps.print(majorVersion - (45 - 1));\n  }\n  ps.print(\" (\");\n  ps.print(majorVersion);\n  ps.print('.');\n  ps.print(printer.getMinorVersion());\n  ps.print(')');\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 59,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 543,
                        "startLineNumber": 122,
                        "startColumnNumber": 16,
                        "endLineNumber": 136,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (majorVersion >= 45) {\n  ps.print(\"\\n * Java compiler version: \");\n  if (majorVersion >= 49) {\n    ps.print(majorVersion - (49 - 5));\n  }\n else {\n    ps.print(majorVersion - (45 - 1));\n  }\n  ps.print(\" (\");\n  ps.print(majorVersion);\n  ps.print('.');\n  ps.print(printer.getMinorVersion());\n  ps.print(')');\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 63,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1252,
                        "startLineNumber": 111,
                        "startColumnNumber": 61,
                        "endLineNumber": 141,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n  ps.print(\"\\n\\n/* Location:              \");\n  ps.print(location);\n  int majorVersion=printer.getMajorVersion();\n  if (majorVersion >= 45) {\n    ps.print(\"\\n * Java compiler version: \");\n    if (majorVersion >= 49) {\n      ps.print(majorVersion - (49 - 5));\n    }\n else {\n      ps.print(majorVersion - (45 - 1));\n    }\n    ps.print(\" (\");\n    ps.print(majorVersion);\n    ps.print('.');\n    ps.print(printer.getMinorVersion());\n    ps.print(')');\n  }\n  ps.print(\"\\n * JD-Core Version:       \");\n  ps.print(CoreConstants.JD_CORE_VERSION);\n  ps.print(\"\\n */\");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 115,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1301,
                        "startLineNumber": 111,
                        "startColumnNumber": 12,
                        "endLineNumber": 141,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (getPreferenceValue(p,WRITE_METADATA,true)) {\n  String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n  ps.print(\"\\n\\n/* Location:              \");\n  ps.print(location);\n  int majorVersion=printer.getMajorVersion();\n  if (majorVersion >= 45) {\n    ps.print(\"\\n * Java compiler version: \");\n    if (majorVersion >= 49) {\n      ps.print(majorVersion - (49 - 5));\n    }\n else {\n      ps.print(majorVersion - (45 - 1));\n    }\n    ps.print(\" (\");\n    ps.print(majorVersion);\n    ps.print('.');\n    ps.print(printer.getMinorVersion());\n    ps.print(')');\n  }\n  ps.print(\"\\n * JD-Core Version:       \");\n  ps.print(CoreConstants.JD_CORE_VERSION);\n  ps.print(\"\\n */\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 121,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 2681,
                        "startLineNumber": 85,
                        "startColumnNumber": 12,
                        "endLineNumber": 147,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> p=api.getPreferences();\n  preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n  preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n  preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n  preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n  preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n  loader.setEntry(entry);\n  baos.reset();\n  PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n  printer.setPrintStream(ps);\n  printer.setPreferences(preferences);\n  DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n  if (getPreferenceValue(p,WRITE_METADATA,true)) {\n    String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    ps.print(\"\\n\\n/* Location:              \");\n    ps.print(location);\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      ps.print(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        ps.print(majorVersion - (49 - 5));\n      }\n else {\n        ps.print(majorVersion - (45 - 1));\n      }\n      ps.print(\" (\");\n      ps.print(majorVersion);\n      ps.print('.');\n      ps.print(printer.getMinorVersion());\n      ps.print(')');\n    }\n    ps.print(\"\\n * JD-Core Version:       \");\n    ps.print(CoreConstants.JD_CORE_VERSION);\n    ps.print(\"\\n */\");\n  }\n  try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n    baos.writeTo(os);\n  }\n catch (  IOException ignore) {\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 262,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2943,
                        "startLineNumber": 85,
                        "startColumnNumber": 8,
                        "endLineNumber": 152,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> p=api.getPreferences();\n  preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n  preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n  preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n  preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n  preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n  loader.setEntry(entry);\n  baos.reset();\n  PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n  printer.setPrintStream(ps);\n  printer.setPreferences(preferences);\n  DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n  if (getPreferenceValue(p,WRITE_METADATA,true)) {\n    String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    ps.print(\"\\n\\n/* Location:              \");\n    ps.print(location);\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      ps.print(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        ps.print(majorVersion - (49 - 5));\n      }\n else {\n        ps.print(majorVersion - (45 - 1));\n      }\n      ps.print(\" (\");\n      ps.print(majorVersion);\n      ps.print('.');\n      ps.print(printer.getMinorVersion());\n      ps.print(')');\n    }\n    ps.print(\"\\n * JD-Core Version:       \");\n    ps.print(CoreConstants.JD_CORE_VERSION);\n    ps.print(\"\\n */\");\n  }\n  try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n    baos.writeTo(os);\n  }\n catch (  IOException ignore) {\n  }\n}\n catch (Exception ignore) {\n  try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n    writer.write(\"// INTERNAL ERROR //\");\n  }\n catch (  IOException ignoreAgain) {\n  }\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 294,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2961,
                        "startLineNumber": 84,
                        "startColumnNumber": 128,
                        "endLineNumber": 153,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> p=api.getPreferences();\n    preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n    preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n    preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n    preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n    preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n    loader.setEntry(entry);\n    baos.reset();\n    PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n    printer.setPrintStream(ps);\n    printer.setPreferences(preferences);\n    DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n    if (getPreferenceValue(p,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      ps.print(\"\\n\\n/* Location:              \");\n      ps.print(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        ps.print(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          ps.print(majorVersion - (49 - 5));\n        }\n else {\n          ps.print(majorVersion - (45 - 1));\n        }\n        ps.print(\" (\");\n        ps.print(majorVersion);\n        ps.print('.');\n        ps.print(printer.getMinorVersion());\n        ps.print(')');\n      }\n      ps.print(\"\\n * JD-Core Version:       \");\n      ps.print(CoreConstants.JD_CORE_VERSION);\n      ps.print(\"\\n */\");\n    }\n    try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n      baos.writeTo(os);\n    }\n catch (    IOException ignore) {\n    }\n  }\n catch (  Exception ignore) {\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ignoreAgain) {\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 295,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3100,
                        "startLineNumber": 83,
                        "startColumnNumber": 4,
                        "endLineNumber": 153,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void saveContent(API api,Controller controller,Listener listener,Path rootPath,Path path,Container.Entry entry){\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> p=api.getPreferences();\n    preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n    preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n    preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n    preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n    preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n    loader.setEntry(entry);\n    baos.reset();\n    PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n    printer.setPrintStream(ps);\n    printer.setPreferences(preferences);\n    DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n    if (getPreferenceValue(p,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      ps.print(\"\\n\\n/* Location:              \");\n      ps.print(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        ps.print(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          ps.print(majorVersion - (49 - 5));\n        }\n else {\n          ps.print(majorVersion - (45 - 1));\n        }\n        ps.print(\" (\");\n        ps.print(majorVersion);\n        ps.print('.');\n        ps.print(printer.getMinorVersion());\n        ps.print(')');\n      }\n      ps.print(\"\\n * JD-Core Version:       \");\n      ps.print(CoreConstants.JD_CORE_VERSION);\n      ps.print(\"\\n */\");\n    }\n    try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n      baos.writeTo(os);\n    }\n catch (    IOException ignore) {\n    }\n  }\n catch (  Exception ignore) {\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ignoreAgain) {\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 327,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 34,
                    "startLineNumber": 126,
                    "startColumnNumber": 24,
                    "endLineNumber": 126,
                    "endColumnNumber": 58
                },
                "nodeContext": "ps.print(majorVersion - (49 - 5));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 10,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "java.io.PrintStream"
        },
        {
            "nodeContext": "ps",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 128,
                "startColumnNumber": 24,
                "endLineNumber": 128,
                "endColumnNumber": 26
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 33,
                        "startLineNumber": 128,
                        "startColumnNumber": 24,
                        "endLineNumber": 128,
                        "endColumnNumber": 57
                    },
                    "nodeContext": "ps.print(majorVersion - (45 - 1))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 9,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 34,
                        "startLineNumber": 128,
                        "startColumnNumber": 24,
                        "endLineNumber": 128,
                        "endColumnNumber": 58
                    },
                    "nodeContext": "ps.print(majorVersion - (45 - 1));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 10,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 84,
                        "startLineNumber": 127,
                        "startColumnNumber": 27,
                        "endLineNumber": 129,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  ps.print(majorVersion - (45 - 1));\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 11,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 198,
                        "startLineNumber": 125,
                        "startColumnNumber": 20,
                        "endLineNumber": 129,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (majorVersion >= 49) {\n  ps.print(majorVersion - (49 - 5));\n}\n else {\n  ps.print(majorVersion - (45 - 1));\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 26,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 519,
                        "startLineNumber": 122,
                        "startColumnNumber": 40,
                        "endLineNumber": 136,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  ps.print(\"\\n * Java compiler version: \");\n  if (majorVersion >= 49) {\n    ps.print(majorVersion - (49 - 5));\n  }\n else {\n    ps.print(majorVersion - (45 - 1));\n  }\n  ps.print(\" (\");\n  ps.print(majorVersion);\n  ps.print('.');\n  ps.print(printer.getMinorVersion());\n  ps.print(')');\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 59,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 543,
                        "startLineNumber": 122,
                        "startColumnNumber": 16,
                        "endLineNumber": 136,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (majorVersion >= 45) {\n  ps.print(\"\\n * Java compiler version: \");\n  if (majorVersion >= 49) {\n    ps.print(majorVersion - (49 - 5));\n  }\n else {\n    ps.print(majorVersion - (45 - 1));\n  }\n  ps.print(\" (\");\n  ps.print(majorVersion);\n  ps.print('.');\n  ps.print(printer.getMinorVersion());\n  ps.print(')');\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 63,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1252,
                        "startLineNumber": 111,
                        "startColumnNumber": 61,
                        "endLineNumber": 141,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n  ps.print(\"\\n\\n/* Location:              \");\n  ps.print(location);\n  int majorVersion=printer.getMajorVersion();\n  if (majorVersion >= 45) {\n    ps.print(\"\\n * Java compiler version: \");\n    if (majorVersion >= 49) {\n      ps.print(majorVersion - (49 - 5));\n    }\n else {\n      ps.print(majorVersion - (45 - 1));\n    }\n    ps.print(\" (\");\n    ps.print(majorVersion);\n    ps.print('.');\n    ps.print(printer.getMinorVersion());\n    ps.print(')');\n  }\n  ps.print(\"\\n * JD-Core Version:       \");\n  ps.print(CoreConstants.JD_CORE_VERSION);\n  ps.print(\"\\n */\");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 115,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1301,
                        "startLineNumber": 111,
                        "startColumnNumber": 12,
                        "endLineNumber": 141,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (getPreferenceValue(p,WRITE_METADATA,true)) {\n  String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n  ps.print(\"\\n\\n/* Location:              \");\n  ps.print(location);\n  int majorVersion=printer.getMajorVersion();\n  if (majorVersion >= 45) {\n    ps.print(\"\\n * Java compiler version: \");\n    if (majorVersion >= 49) {\n      ps.print(majorVersion - (49 - 5));\n    }\n else {\n      ps.print(majorVersion - (45 - 1));\n    }\n    ps.print(\" (\");\n    ps.print(majorVersion);\n    ps.print('.');\n    ps.print(printer.getMinorVersion());\n    ps.print(')');\n  }\n  ps.print(\"\\n * JD-Core Version:       \");\n  ps.print(CoreConstants.JD_CORE_VERSION);\n  ps.print(\"\\n */\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 121,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 2681,
                        "startLineNumber": 85,
                        "startColumnNumber": 12,
                        "endLineNumber": 147,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> p=api.getPreferences();\n  preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n  preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n  preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n  preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n  preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n  loader.setEntry(entry);\n  baos.reset();\n  PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n  printer.setPrintStream(ps);\n  printer.setPreferences(preferences);\n  DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n  if (getPreferenceValue(p,WRITE_METADATA,true)) {\n    String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    ps.print(\"\\n\\n/* Location:              \");\n    ps.print(location);\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      ps.print(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        ps.print(majorVersion - (49 - 5));\n      }\n else {\n        ps.print(majorVersion - (45 - 1));\n      }\n      ps.print(\" (\");\n      ps.print(majorVersion);\n      ps.print('.');\n      ps.print(printer.getMinorVersion());\n      ps.print(')');\n    }\n    ps.print(\"\\n * JD-Core Version:       \");\n    ps.print(CoreConstants.JD_CORE_VERSION);\n    ps.print(\"\\n */\");\n  }\n  try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n    baos.writeTo(os);\n  }\n catch (  IOException ignore) {\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 262,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2943,
                        "startLineNumber": 85,
                        "startColumnNumber": 8,
                        "endLineNumber": 152,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> p=api.getPreferences();\n  preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n  preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n  preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n  preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n  preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n  loader.setEntry(entry);\n  baos.reset();\n  PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n  printer.setPrintStream(ps);\n  printer.setPreferences(preferences);\n  DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n  if (getPreferenceValue(p,WRITE_METADATA,true)) {\n    String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    ps.print(\"\\n\\n/* Location:              \");\n    ps.print(location);\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      ps.print(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        ps.print(majorVersion - (49 - 5));\n      }\n else {\n        ps.print(majorVersion - (45 - 1));\n      }\n      ps.print(\" (\");\n      ps.print(majorVersion);\n      ps.print('.');\n      ps.print(printer.getMinorVersion());\n      ps.print(')');\n    }\n    ps.print(\"\\n * JD-Core Version:       \");\n    ps.print(CoreConstants.JD_CORE_VERSION);\n    ps.print(\"\\n */\");\n  }\n  try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n    baos.writeTo(os);\n  }\n catch (  IOException ignore) {\n  }\n}\n catch (Exception ignore) {\n  try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n    writer.write(\"// INTERNAL ERROR //\");\n  }\n catch (  IOException ignoreAgain) {\n  }\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 294,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2961,
                        "startLineNumber": 84,
                        "startColumnNumber": 128,
                        "endLineNumber": 153,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> p=api.getPreferences();\n    preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n    preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n    preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n    preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n    preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n    loader.setEntry(entry);\n    baos.reset();\n    PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n    printer.setPrintStream(ps);\n    printer.setPreferences(preferences);\n    DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n    if (getPreferenceValue(p,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      ps.print(\"\\n\\n/* Location:              \");\n      ps.print(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        ps.print(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          ps.print(majorVersion - (49 - 5));\n        }\n else {\n          ps.print(majorVersion - (45 - 1));\n        }\n        ps.print(\" (\");\n        ps.print(majorVersion);\n        ps.print('.');\n        ps.print(printer.getMinorVersion());\n        ps.print(')');\n      }\n      ps.print(\"\\n * JD-Core Version:       \");\n      ps.print(CoreConstants.JD_CORE_VERSION);\n      ps.print(\"\\n */\");\n    }\n    try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n      baos.writeTo(os);\n    }\n catch (    IOException ignore) {\n    }\n  }\n catch (  Exception ignore) {\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ignoreAgain) {\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 295,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3100,
                        "startLineNumber": 83,
                        "startColumnNumber": 4,
                        "endLineNumber": 153,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void saveContent(API api,Controller controller,Listener listener,Path rootPath,Path path,Container.Entry entry){\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> p=api.getPreferences();\n    preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n    preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n    preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n    preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n    preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n    loader.setEntry(entry);\n    baos.reset();\n    PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n    printer.setPrintStream(ps);\n    printer.setPreferences(preferences);\n    DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n    if (getPreferenceValue(p,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      ps.print(\"\\n\\n/* Location:              \");\n      ps.print(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        ps.print(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          ps.print(majorVersion - (49 - 5));\n        }\n else {\n          ps.print(majorVersion - (45 - 1));\n        }\n        ps.print(\" (\");\n        ps.print(majorVersion);\n        ps.print('.');\n        ps.print(printer.getMinorVersion());\n        ps.print(')');\n      }\n      ps.print(\"\\n * JD-Core Version:       \");\n      ps.print(CoreConstants.JD_CORE_VERSION);\n      ps.print(\"\\n */\");\n    }\n    try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n      baos.writeTo(os);\n    }\n catch (    IOException ignore) {\n    }\n  }\n catch (  Exception ignore) {\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ignoreAgain) {\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 327,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 34,
                    "startLineNumber": 128,
                    "startColumnNumber": 24,
                    "endLineNumber": 128,
                    "endColumnNumber": 58
                },
                "nodeContext": "ps.print(majorVersion - (45 - 1));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 10,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "java.io.PrintStream"
        },
        {
            "nodeContext": "ps",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 131,
                "startColumnNumber": 20,
                "endLineNumber": 131,
                "endColumnNumber": 22
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 14,
                        "startLineNumber": 131,
                        "startColumnNumber": 20,
                        "endLineNumber": 131,
                        "endColumnNumber": 34
                    },
                    "nodeContext": "ps.print(\" (\")",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 15,
                        "startLineNumber": 131,
                        "startColumnNumber": 20,
                        "endLineNumber": 131,
                        "endColumnNumber": 35
                    },
                    "nodeContext": "ps.print(\" (\");\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 519,
                        "startLineNumber": 122,
                        "startColumnNumber": 40,
                        "endLineNumber": 136,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  ps.print(\"\\n * Java compiler version: \");\n  if (majorVersion >= 49) {\n    ps.print(majorVersion - (49 - 5));\n  }\n else {\n    ps.print(majorVersion - (45 - 1));\n  }\n  ps.print(\" (\");\n  ps.print(majorVersion);\n  ps.print('.');\n  ps.print(printer.getMinorVersion());\n  ps.print(')');\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 59,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 543,
                        "startLineNumber": 122,
                        "startColumnNumber": 16,
                        "endLineNumber": 136,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (majorVersion >= 45) {\n  ps.print(\"\\n * Java compiler version: \");\n  if (majorVersion >= 49) {\n    ps.print(majorVersion - (49 - 5));\n  }\n else {\n    ps.print(majorVersion - (45 - 1));\n  }\n  ps.print(\" (\");\n  ps.print(majorVersion);\n  ps.print('.');\n  ps.print(printer.getMinorVersion());\n  ps.print(')');\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 63,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1252,
                        "startLineNumber": 111,
                        "startColumnNumber": 61,
                        "endLineNumber": 141,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n  ps.print(\"\\n\\n/* Location:              \");\n  ps.print(location);\n  int majorVersion=printer.getMajorVersion();\n  if (majorVersion >= 45) {\n    ps.print(\"\\n * Java compiler version: \");\n    if (majorVersion >= 49) {\n      ps.print(majorVersion - (49 - 5));\n    }\n else {\n      ps.print(majorVersion - (45 - 1));\n    }\n    ps.print(\" (\");\n    ps.print(majorVersion);\n    ps.print('.');\n    ps.print(printer.getMinorVersion());\n    ps.print(')');\n  }\n  ps.print(\"\\n * JD-Core Version:       \");\n  ps.print(CoreConstants.JD_CORE_VERSION);\n  ps.print(\"\\n */\");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 115,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1301,
                        "startLineNumber": 111,
                        "startColumnNumber": 12,
                        "endLineNumber": 141,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (getPreferenceValue(p,WRITE_METADATA,true)) {\n  String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n  ps.print(\"\\n\\n/* Location:              \");\n  ps.print(location);\n  int majorVersion=printer.getMajorVersion();\n  if (majorVersion >= 45) {\n    ps.print(\"\\n * Java compiler version: \");\n    if (majorVersion >= 49) {\n      ps.print(majorVersion - (49 - 5));\n    }\n else {\n      ps.print(majorVersion - (45 - 1));\n    }\n    ps.print(\" (\");\n    ps.print(majorVersion);\n    ps.print('.');\n    ps.print(printer.getMinorVersion());\n    ps.print(')');\n  }\n  ps.print(\"\\n * JD-Core Version:       \");\n  ps.print(CoreConstants.JD_CORE_VERSION);\n  ps.print(\"\\n */\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 121,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 2681,
                        "startLineNumber": 85,
                        "startColumnNumber": 12,
                        "endLineNumber": 147,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> p=api.getPreferences();\n  preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n  preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n  preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n  preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n  preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n  loader.setEntry(entry);\n  baos.reset();\n  PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n  printer.setPrintStream(ps);\n  printer.setPreferences(preferences);\n  DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n  if (getPreferenceValue(p,WRITE_METADATA,true)) {\n    String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    ps.print(\"\\n\\n/* Location:              \");\n    ps.print(location);\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      ps.print(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        ps.print(majorVersion - (49 - 5));\n      }\n else {\n        ps.print(majorVersion - (45 - 1));\n      }\n      ps.print(\" (\");\n      ps.print(majorVersion);\n      ps.print('.');\n      ps.print(printer.getMinorVersion());\n      ps.print(')');\n    }\n    ps.print(\"\\n * JD-Core Version:       \");\n    ps.print(CoreConstants.JD_CORE_VERSION);\n    ps.print(\"\\n */\");\n  }\n  try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n    baos.writeTo(os);\n  }\n catch (  IOException ignore) {\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 262,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2943,
                        "startLineNumber": 85,
                        "startColumnNumber": 8,
                        "endLineNumber": 152,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> p=api.getPreferences();\n  preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n  preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n  preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n  preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n  preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n  loader.setEntry(entry);\n  baos.reset();\n  PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n  printer.setPrintStream(ps);\n  printer.setPreferences(preferences);\n  DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n  if (getPreferenceValue(p,WRITE_METADATA,true)) {\n    String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    ps.print(\"\\n\\n/* Location:              \");\n    ps.print(location);\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      ps.print(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        ps.print(majorVersion - (49 - 5));\n      }\n else {\n        ps.print(majorVersion - (45 - 1));\n      }\n      ps.print(\" (\");\n      ps.print(majorVersion);\n      ps.print('.');\n      ps.print(printer.getMinorVersion());\n      ps.print(')');\n    }\n    ps.print(\"\\n * JD-Core Version:       \");\n    ps.print(CoreConstants.JD_CORE_VERSION);\n    ps.print(\"\\n */\");\n  }\n  try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n    baos.writeTo(os);\n  }\n catch (  IOException ignore) {\n  }\n}\n catch (Exception ignore) {\n  try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n    writer.write(\"// INTERNAL ERROR //\");\n  }\n catch (  IOException ignoreAgain) {\n  }\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 294,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2961,
                        "startLineNumber": 84,
                        "startColumnNumber": 128,
                        "endLineNumber": 153,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> p=api.getPreferences();\n    preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n    preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n    preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n    preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n    preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n    loader.setEntry(entry);\n    baos.reset();\n    PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n    printer.setPrintStream(ps);\n    printer.setPreferences(preferences);\n    DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n    if (getPreferenceValue(p,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      ps.print(\"\\n\\n/* Location:              \");\n      ps.print(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        ps.print(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          ps.print(majorVersion - (49 - 5));\n        }\n else {\n          ps.print(majorVersion - (45 - 1));\n        }\n        ps.print(\" (\");\n        ps.print(majorVersion);\n        ps.print('.');\n        ps.print(printer.getMinorVersion());\n        ps.print(')');\n      }\n      ps.print(\"\\n * JD-Core Version:       \");\n      ps.print(CoreConstants.JD_CORE_VERSION);\n      ps.print(\"\\n */\");\n    }\n    try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n      baos.writeTo(os);\n    }\n catch (    IOException ignore) {\n    }\n  }\n catch (  Exception ignore) {\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ignoreAgain) {\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 295,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3100,
                        "startLineNumber": 83,
                        "startColumnNumber": 4,
                        "endLineNumber": 153,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void saveContent(API api,Controller controller,Listener listener,Path rootPath,Path path,Container.Entry entry){\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> p=api.getPreferences();\n    preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n    preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n    preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n    preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n    preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n    loader.setEntry(entry);\n    baos.reset();\n    PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n    printer.setPrintStream(ps);\n    printer.setPreferences(preferences);\n    DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n    if (getPreferenceValue(p,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      ps.print(\"\\n\\n/* Location:              \");\n      ps.print(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        ps.print(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          ps.print(majorVersion - (49 - 5));\n        }\n else {\n          ps.print(majorVersion - (45 - 1));\n        }\n        ps.print(\" (\");\n        ps.print(majorVersion);\n        ps.print('.');\n        ps.print(printer.getMinorVersion());\n        ps.print(')');\n      }\n      ps.print(\"\\n * JD-Core Version:       \");\n      ps.print(CoreConstants.JD_CORE_VERSION);\n      ps.print(\"\\n */\");\n    }\n    try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n      baos.writeTo(os);\n    }\n catch (    IOException ignore) {\n    }\n  }\n catch (  Exception ignore) {\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ignoreAgain) {\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 327,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 15,
                    "startLineNumber": 131,
                    "startColumnNumber": 20,
                    "endLineNumber": 131,
                    "endColumnNumber": 35
                },
                "nodeContext": "ps.print(\" (\");\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.io.PrintStream"
        },
        {
            "nodeContext": "ps",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 132,
                "startColumnNumber": 20,
                "endLineNumber": 132,
                "endColumnNumber": 22
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 22,
                        "startLineNumber": 132,
                        "startColumnNumber": 20,
                        "endLineNumber": 132,
                        "endColumnNumber": 42
                    },
                    "nodeContext": "ps.print(majorVersion)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 23,
                        "startLineNumber": 132,
                        "startColumnNumber": 20,
                        "endLineNumber": 132,
                        "endColumnNumber": 43
                    },
                    "nodeContext": "ps.print(majorVersion);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 519,
                        "startLineNumber": 122,
                        "startColumnNumber": 40,
                        "endLineNumber": 136,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  ps.print(\"\\n * Java compiler version: \");\n  if (majorVersion >= 49) {\n    ps.print(majorVersion - (49 - 5));\n  }\n else {\n    ps.print(majorVersion - (45 - 1));\n  }\n  ps.print(\" (\");\n  ps.print(majorVersion);\n  ps.print('.');\n  ps.print(printer.getMinorVersion());\n  ps.print(')');\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 59,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 543,
                        "startLineNumber": 122,
                        "startColumnNumber": 16,
                        "endLineNumber": 136,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (majorVersion >= 45) {\n  ps.print(\"\\n * Java compiler version: \");\n  if (majorVersion >= 49) {\n    ps.print(majorVersion - (49 - 5));\n  }\n else {\n    ps.print(majorVersion - (45 - 1));\n  }\n  ps.print(\" (\");\n  ps.print(majorVersion);\n  ps.print('.');\n  ps.print(printer.getMinorVersion());\n  ps.print(')');\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 63,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1252,
                        "startLineNumber": 111,
                        "startColumnNumber": 61,
                        "endLineNumber": 141,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n  ps.print(\"\\n\\n/* Location:              \");\n  ps.print(location);\n  int majorVersion=printer.getMajorVersion();\n  if (majorVersion >= 45) {\n    ps.print(\"\\n * Java compiler version: \");\n    if (majorVersion >= 49) {\n      ps.print(majorVersion - (49 - 5));\n    }\n else {\n      ps.print(majorVersion - (45 - 1));\n    }\n    ps.print(\" (\");\n    ps.print(majorVersion);\n    ps.print('.');\n    ps.print(printer.getMinorVersion());\n    ps.print(')');\n  }\n  ps.print(\"\\n * JD-Core Version:       \");\n  ps.print(CoreConstants.JD_CORE_VERSION);\n  ps.print(\"\\n */\");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 115,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1301,
                        "startLineNumber": 111,
                        "startColumnNumber": 12,
                        "endLineNumber": 141,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (getPreferenceValue(p,WRITE_METADATA,true)) {\n  String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n  ps.print(\"\\n\\n/* Location:              \");\n  ps.print(location);\n  int majorVersion=printer.getMajorVersion();\n  if (majorVersion >= 45) {\n    ps.print(\"\\n * Java compiler version: \");\n    if (majorVersion >= 49) {\n      ps.print(majorVersion - (49 - 5));\n    }\n else {\n      ps.print(majorVersion - (45 - 1));\n    }\n    ps.print(\" (\");\n    ps.print(majorVersion);\n    ps.print('.');\n    ps.print(printer.getMinorVersion());\n    ps.print(')');\n  }\n  ps.print(\"\\n * JD-Core Version:       \");\n  ps.print(CoreConstants.JD_CORE_VERSION);\n  ps.print(\"\\n */\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 121,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 2681,
                        "startLineNumber": 85,
                        "startColumnNumber": 12,
                        "endLineNumber": 147,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> p=api.getPreferences();\n  preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n  preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n  preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n  preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n  preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n  loader.setEntry(entry);\n  baos.reset();\n  PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n  printer.setPrintStream(ps);\n  printer.setPreferences(preferences);\n  DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n  if (getPreferenceValue(p,WRITE_METADATA,true)) {\n    String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    ps.print(\"\\n\\n/* Location:              \");\n    ps.print(location);\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      ps.print(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        ps.print(majorVersion - (49 - 5));\n      }\n else {\n        ps.print(majorVersion - (45 - 1));\n      }\n      ps.print(\" (\");\n      ps.print(majorVersion);\n      ps.print('.');\n      ps.print(printer.getMinorVersion());\n      ps.print(')');\n    }\n    ps.print(\"\\n * JD-Core Version:       \");\n    ps.print(CoreConstants.JD_CORE_VERSION);\n    ps.print(\"\\n */\");\n  }\n  try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n    baos.writeTo(os);\n  }\n catch (  IOException ignore) {\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 262,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2943,
                        "startLineNumber": 85,
                        "startColumnNumber": 8,
                        "endLineNumber": 152,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> p=api.getPreferences();\n  preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n  preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n  preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n  preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n  preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n  loader.setEntry(entry);\n  baos.reset();\n  PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n  printer.setPrintStream(ps);\n  printer.setPreferences(preferences);\n  DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n  if (getPreferenceValue(p,WRITE_METADATA,true)) {\n    String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    ps.print(\"\\n\\n/* Location:              \");\n    ps.print(location);\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      ps.print(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        ps.print(majorVersion - (49 - 5));\n      }\n else {\n        ps.print(majorVersion - (45 - 1));\n      }\n      ps.print(\" (\");\n      ps.print(majorVersion);\n      ps.print('.');\n      ps.print(printer.getMinorVersion());\n      ps.print(')');\n    }\n    ps.print(\"\\n * JD-Core Version:       \");\n    ps.print(CoreConstants.JD_CORE_VERSION);\n    ps.print(\"\\n */\");\n  }\n  try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n    baos.writeTo(os);\n  }\n catch (  IOException ignore) {\n  }\n}\n catch (Exception ignore) {\n  try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n    writer.write(\"// INTERNAL ERROR //\");\n  }\n catch (  IOException ignoreAgain) {\n  }\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 294,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2961,
                        "startLineNumber": 84,
                        "startColumnNumber": 128,
                        "endLineNumber": 153,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> p=api.getPreferences();\n    preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n    preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n    preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n    preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n    preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n    loader.setEntry(entry);\n    baos.reset();\n    PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n    printer.setPrintStream(ps);\n    printer.setPreferences(preferences);\n    DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n    if (getPreferenceValue(p,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      ps.print(\"\\n\\n/* Location:              \");\n      ps.print(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        ps.print(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          ps.print(majorVersion - (49 - 5));\n        }\n else {\n          ps.print(majorVersion - (45 - 1));\n        }\n        ps.print(\" (\");\n        ps.print(majorVersion);\n        ps.print('.');\n        ps.print(printer.getMinorVersion());\n        ps.print(')');\n      }\n      ps.print(\"\\n * JD-Core Version:       \");\n      ps.print(CoreConstants.JD_CORE_VERSION);\n      ps.print(\"\\n */\");\n    }\n    try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n      baos.writeTo(os);\n    }\n catch (    IOException ignore) {\n    }\n  }\n catch (  Exception ignore) {\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ignoreAgain) {\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 295,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3100,
                        "startLineNumber": 83,
                        "startColumnNumber": 4,
                        "endLineNumber": 153,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void saveContent(API api,Controller controller,Listener listener,Path rootPath,Path path,Container.Entry entry){\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> p=api.getPreferences();\n    preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n    preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n    preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n    preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n    preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n    loader.setEntry(entry);\n    baos.reset();\n    PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n    printer.setPrintStream(ps);\n    printer.setPreferences(preferences);\n    DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n    if (getPreferenceValue(p,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      ps.print(\"\\n\\n/* Location:              \");\n      ps.print(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        ps.print(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          ps.print(majorVersion - (49 - 5));\n        }\n else {\n          ps.print(majorVersion - (45 - 1));\n        }\n        ps.print(\" (\");\n        ps.print(majorVersion);\n        ps.print('.');\n        ps.print(printer.getMinorVersion());\n        ps.print(')');\n      }\n      ps.print(\"\\n * JD-Core Version:       \");\n      ps.print(CoreConstants.JD_CORE_VERSION);\n      ps.print(\"\\n */\");\n    }\n    try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n      baos.writeTo(os);\n    }\n catch (    IOException ignore) {\n    }\n  }\n catch (  Exception ignore) {\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ignoreAgain) {\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 327,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 23,
                    "startLineNumber": 132,
                    "startColumnNumber": 20,
                    "endLineNumber": 132,
                    "endColumnNumber": 43
                },
                "nodeContext": "ps.print(majorVersion);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.io.PrintStream"
        },
        {
            "nodeContext": "ps",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 133,
                "startColumnNumber": 20,
                "endLineNumber": 133,
                "endColumnNumber": 22
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 13,
                        "startLineNumber": 133,
                        "startColumnNumber": 20,
                        "endLineNumber": 133,
                        "endColumnNumber": 33
                    },
                    "nodeContext": "ps.print('.')",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 14,
                        "startLineNumber": 133,
                        "startColumnNumber": 20,
                        "endLineNumber": 133,
                        "endColumnNumber": 34
                    },
                    "nodeContext": "ps.print('.');\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 519,
                        "startLineNumber": 122,
                        "startColumnNumber": 40,
                        "endLineNumber": 136,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  ps.print(\"\\n * Java compiler version: \");\n  if (majorVersion >= 49) {\n    ps.print(majorVersion - (49 - 5));\n  }\n else {\n    ps.print(majorVersion - (45 - 1));\n  }\n  ps.print(\" (\");\n  ps.print(majorVersion);\n  ps.print('.');\n  ps.print(printer.getMinorVersion());\n  ps.print(')');\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 59,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 543,
                        "startLineNumber": 122,
                        "startColumnNumber": 16,
                        "endLineNumber": 136,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (majorVersion >= 45) {\n  ps.print(\"\\n * Java compiler version: \");\n  if (majorVersion >= 49) {\n    ps.print(majorVersion - (49 - 5));\n  }\n else {\n    ps.print(majorVersion - (45 - 1));\n  }\n  ps.print(\" (\");\n  ps.print(majorVersion);\n  ps.print('.');\n  ps.print(printer.getMinorVersion());\n  ps.print(')');\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 63,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1252,
                        "startLineNumber": 111,
                        "startColumnNumber": 61,
                        "endLineNumber": 141,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n  ps.print(\"\\n\\n/* Location:              \");\n  ps.print(location);\n  int majorVersion=printer.getMajorVersion();\n  if (majorVersion >= 45) {\n    ps.print(\"\\n * Java compiler version: \");\n    if (majorVersion >= 49) {\n      ps.print(majorVersion - (49 - 5));\n    }\n else {\n      ps.print(majorVersion - (45 - 1));\n    }\n    ps.print(\" (\");\n    ps.print(majorVersion);\n    ps.print('.');\n    ps.print(printer.getMinorVersion());\n    ps.print(')');\n  }\n  ps.print(\"\\n * JD-Core Version:       \");\n  ps.print(CoreConstants.JD_CORE_VERSION);\n  ps.print(\"\\n */\");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 115,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1301,
                        "startLineNumber": 111,
                        "startColumnNumber": 12,
                        "endLineNumber": 141,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (getPreferenceValue(p,WRITE_METADATA,true)) {\n  String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n  ps.print(\"\\n\\n/* Location:              \");\n  ps.print(location);\n  int majorVersion=printer.getMajorVersion();\n  if (majorVersion >= 45) {\n    ps.print(\"\\n * Java compiler version: \");\n    if (majorVersion >= 49) {\n      ps.print(majorVersion - (49 - 5));\n    }\n else {\n      ps.print(majorVersion - (45 - 1));\n    }\n    ps.print(\" (\");\n    ps.print(majorVersion);\n    ps.print('.');\n    ps.print(printer.getMinorVersion());\n    ps.print(')');\n  }\n  ps.print(\"\\n * JD-Core Version:       \");\n  ps.print(CoreConstants.JD_CORE_VERSION);\n  ps.print(\"\\n */\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 121,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 2681,
                        "startLineNumber": 85,
                        "startColumnNumber": 12,
                        "endLineNumber": 147,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> p=api.getPreferences();\n  preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n  preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n  preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n  preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n  preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n  loader.setEntry(entry);\n  baos.reset();\n  PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n  printer.setPrintStream(ps);\n  printer.setPreferences(preferences);\n  DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n  if (getPreferenceValue(p,WRITE_METADATA,true)) {\n    String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    ps.print(\"\\n\\n/* Location:              \");\n    ps.print(location);\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      ps.print(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        ps.print(majorVersion - (49 - 5));\n      }\n else {\n        ps.print(majorVersion - (45 - 1));\n      }\n      ps.print(\" (\");\n      ps.print(majorVersion);\n      ps.print('.');\n      ps.print(printer.getMinorVersion());\n      ps.print(')');\n    }\n    ps.print(\"\\n * JD-Core Version:       \");\n    ps.print(CoreConstants.JD_CORE_VERSION);\n    ps.print(\"\\n */\");\n  }\n  try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n    baos.writeTo(os);\n  }\n catch (  IOException ignore) {\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 262,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2943,
                        "startLineNumber": 85,
                        "startColumnNumber": 8,
                        "endLineNumber": 152,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> p=api.getPreferences();\n  preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n  preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n  preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n  preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n  preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n  loader.setEntry(entry);\n  baos.reset();\n  PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n  printer.setPrintStream(ps);\n  printer.setPreferences(preferences);\n  DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n  if (getPreferenceValue(p,WRITE_METADATA,true)) {\n    String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    ps.print(\"\\n\\n/* Location:              \");\n    ps.print(location);\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      ps.print(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        ps.print(majorVersion - (49 - 5));\n      }\n else {\n        ps.print(majorVersion - (45 - 1));\n      }\n      ps.print(\" (\");\n      ps.print(majorVersion);\n      ps.print('.');\n      ps.print(printer.getMinorVersion());\n      ps.print(')');\n    }\n    ps.print(\"\\n * JD-Core Version:       \");\n    ps.print(CoreConstants.JD_CORE_VERSION);\n    ps.print(\"\\n */\");\n  }\n  try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n    baos.writeTo(os);\n  }\n catch (  IOException ignore) {\n  }\n}\n catch (Exception ignore) {\n  try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n    writer.write(\"// INTERNAL ERROR //\");\n  }\n catch (  IOException ignoreAgain) {\n  }\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 294,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2961,
                        "startLineNumber": 84,
                        "startColumnNumber": 128,
                        "endLineNumber": 153,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> p=api.getPreferences();\n    preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n    preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n    preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n    preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n    preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n    loader.setEntry(entry);\n    baos.reset();\n    PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n    printer.setPrintStream(ps);\n    printer.setPreferences(preferences);\n    DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n    if (getPreferenceValue(p,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      ps.print(\"\\n\\n/* Location:              \");\n      ps.print(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        ps.print(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          ps.print(majorVersion - (49 - 5));\n        }\n else {\n          ps.print(majorVersion - (45 - 1));\n        }\n        ps.print(\" (\");\n        ps.print(majorVersion);\n        ps.print('.');\n        ps.print(printer.getMinorVersion());\n        ps.print(')');\n      }\n      ps.print(\"\\n * JD-Core Version:       \");\n      ps.print(CoreConstants.JD_CORE_VERSION);\n      ps.print(\"\\n */\");\n    }\n    try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n      baos.writeTo(os);\n    }\n catch (    IOException ignore) {\n    }\n  }\n catch (  Exception ignore) {\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ignoreAgain) {\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 295,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3100,
                        "startLineNumber": 83,
                        "startColumnNumber": 4,
                        "endLineNumber": 153,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void saveContent(API api,Controller controller,Listener listener,Path rootPath,Path path,Container.Entry entry){\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> p=api.getPreferences();\n    preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n    preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n    preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n    preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n    preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n    loader.setEntry(entry);\n    baos.reset();\n    PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n    printer.setPrintStream(ps);\n    printer.setPreferences(preferences);\n    DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n    if (getPreferenceValue(p,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      ps.print(\"\\n\\n/* Location:              \");\n      ps.print(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        ps.print(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          ps.print(majorVersion - (49 - 5));\n        }\n else {\n          ps.print(majorVersion - (45 - 1));\n        }\n        ps.print(\" (\");\n        ps.print(majorVersion);\n        ps.print('.');\n        ps.print(printer.getMinorVersion());\n        ps.print(')');\n      }\n      ps.print(\"\\n * JD-Core Version:       \");\n      ps.print(CoreConstants.JD_CORE_VERSION);\n      ps.print(\"\\n */\");\n    }\n    try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n      baos.writeTo(os);\n    }\n catch (    IOException ignore) {\n    }\n  }\n catch (  Exception ignore) {\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ignoreAgain) {\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 327,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 14,
                    "startLineNumber": 133,
                    "startColumnNumber": 20,
                    "endLineNumber": 133,
                    "endColumnNumber": 34
                },
                "nodeContext": "ps.print('.');\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.io.PrintStream"
        },
        {
            "nodeContext": "ps",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 134,
                "startColumnNumber": 20,
                "endLineNumber": 134,
                "endColumnNumber": 22
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 35,
                        "startLineNumber": 134,
                        "startColumnNumber": 20,
                        "endLineNumber": 134,
                        "endColumnNumber": 55
                    },
                    "nodeContext": "ps.print(printer.getMinorVersion())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 36,
                        "startLineNumber": 134,
                        "startColumnNumber": 20,
                        "endLineNumber": 134,
                        "endColumnNumber": 56
                    },
                    "nodeContext": "ps.print(printer.getMinorVersion());\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 519,
                        "startLineNumber": 122,
                        "startColumnNumber": 40,
                        "endLineNumber": 136,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  ps.print(\"\\n * Java compiler version: \");\n  if (majorVersion >= 49) {\n    ps.print(majorVersion - (49 - 5));\n  }\n else {\n    ps.print(majorVersion - (45 - 1));\n  }\n  ps.print(\" (\");\n  ps.print(majorVersion);\n  ps.print('.');\n  ps.print(printer.getMinorVersion());\n  ps.print(')');\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 59,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 543,
                        "startLineNumber": 122,
                        "startColumnNumber": 16,
                        "endLineNumber": 136,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (majorVersion >= 45) {\n  ps.print(\"\\n * Java compiler version: \");\n  if (majorVersion >= 49) {\n    ps.print(majorVersion - (49 - 5));\n  }\n else {\n    ps.print(majorVersion - (45 - 1));\n  }\n  ps.print(\" (\");\n  ps.print(majorVersion);\n  ps.print('.');\n  ps.print(printer.getMinorVersion());\n  ps.print(')');\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 63,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1252,
                        "startLineNumber": 111,
                        "startColumnNumber": 61,
                        "endLineNumber": 141,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n  ps.print(\"\\n\\n/* Location:              \");\n  ps.print(location);\n  int majorVersion=printer.getMajorVersion();\n  if (majorVersion >= 45) {\n    ps.print(\"\\n * Java compiler version: \");\n    if (majorVersion >= 49) {\n      ps.print(majorVersion - (49 - 5));\n    }\n else {\n      ps.print(majorVersion - (45 - 1));\n    }\n    ps.print(\" (\");\n    ps.print(majorVersion);\n    ps.print('.');\n    ps.print(printer.getMinorVersion());\n    ps.print(')');\n  }\n  ps.print(\"\\n * JD-Core Version:       \");\n  ps.print(CoreConstants.JD_CORE_VERSION);\n  ps.print(\"\\n */\");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 115,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1301,
                        "startLineNumber": 111,
                        "startColumnNumber": 12,
                        "endLineNumber": 141,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (getPreferenceValue(p,WRITE_METADATA,true)) {\n  String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n  ps.print(\"\\n\\n/* Location:              \");\n  ps.print(location);\n  int majorVersion=printer.getMajorVersion();\n  if (majorVersion >= 45) {\n    ps.print(\"\\n * Java compiler version: \");\n    if (majorVersion >= 49) {\n      ps.print(majorVersion - (49 - 5));\n    }\n else {\n      ps.print(majorVersion - (45 - 1));\n    }\n    ps.print(\" (\");\n    ps.print(majorVersion);\n    ps.print('.');\n    ps.print(printer.getMinorVersion());\n    ps.print(')');\n  }\n  ps.print(\"\\n * JD-Core Version:       \");\n  ps.print(CoreConstants.JD_CORE_VERSION);\n  ps.print(\"\\n */\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 121,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 2681,
                        "startLineNumber": 85,
                        "startColumnNumber": 12,
                        "endLineNumber": 147,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> p=api.getPreferences();\n  preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n  preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n  preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n  preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n  preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n  loader.setEntry(entry);\n  baos.reset();\n  PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n  printer.setPrintStream(ps);\n  printer.setPreferences(preferences);\n  DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n  if (getPreferenceValue(p,WRITE_METADATA,true)) {\n    String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    ps.print(\"\\n\\n/* Location:              \");\n    ps.print(location);\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      ps.print(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        ps.print(majorVersion - (49 - 5));\n      }\n else {\n        ps.print(majorVersion - (45 - 1));\n      }\n      ps.print(\" (\");\n      ps.print(majorVersion);\n      ps.print('.');\n      ps.print(printer.getMinorVersion());\n      ps.print(')');\n    }\n    ps.print(\"\\n * JD-Core Version:       \");\n    ps.print(CoreConstants.JD_CORE_VERSION);\n    ps.print(\"\\n */\");\n  }\n  try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n    baos.writeTo(os);\n  }\n catch (  IOException ignore) {\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 262,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2943,
                        "startLineNumber": 85,
                        "startColumnNumber": 8,
                        "endLineNumber": 152,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> p=api.getPreferences();\n  preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n  preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n  preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n  preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n  preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n  loader.setEntry(entry);\n  baos.reset();\n  PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n  printer.setPrintStream(ps);\n  printer.setPreferences(preferences);\n  DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n  if (getPreferenceValue(p,WRITE_METADATA,true)) {\n    String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    ps.print(\"\\n\\n/* Location:              \");\n    ps.print(location);\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      ps.print(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        ps.print(majorVersion - (49 - 5));\n      }\n else {\n        ps.print(majorVersion - (45 - 1));\n      }\n      ps.print(\" (\");\n      ps.print(majorVersion);\n      ps.print('.');\n      ps.print(printer.getMinorVersion());\n      ps.print(')');\n    }\n    ps.print(\"\\n * JD-Core Version:       \");\n    ps.print(CoreConstants.JD_CORE_VERSION);\n    ps.print(\"\\n */\");\n  }\n  try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n    baos.writeTo(os);\n  }\n catch (  IOException ignore) {\n  }\n}\n catch (Exception ignore) {\n  try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n    writer.write(\"// INTERNAL ERROR //\");\n  }\n catch (  IOException ignoreAgain) {\n  }\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 294,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2961,
                        "startLineNumber": 84,
                        "startColumnNumber": 128,
                        "endLineNumber": 153,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> p=api.getPreferences();\n    preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n    preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n    preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n    preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n    preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n    loader.setEntry(entry);\n    baos.reset();\n    PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n    printer.setPrintStream(ps);\n    printer.setPreferences(preferences);\n    DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n    if (getPreferenceValue(p,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      ps.print(\"\\n\\n/* Location:              \");\n      ps.print(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        ps.print(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          ps.print(majorVersion - (49 - 5));\n        }\n else {\n          ps.print(majorVersion - (45 - 1));\n        }\n        ps.print(\" (\");\n        ps.print(majorVersion);\n        ps.print('.');\n        ps.print(printer.getMinorVersion());\n        ps.print(')');\n      }\n      ps.print(\"\\n * JD-Core Version:       \");\n      ps.print(CoreConstants.JD_CORE_VERSION);\n      ps.print(\"\\n */\");\n    }\n    try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n      baos.writeTo(os);\n    }\n catch (    IOException ignore) {\n    }\n  }\n catch (  Exception ignore) {\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ignoreAgain) {\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 295,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3100,
                        "startLineNumber": 83,
                        "startColumnNumber": 4,
                        "endLineNumber": 153,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void saveContent(API api,Controller controller,Listener listener,Path rootPath,Path path,Container.Entry entry){\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> p=api.getPreferences();\n    preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n    preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n    preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n    preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n    preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n    loader.setEntry(entry);\n    baos.reset();\n    PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n    printer.setPrintStream(ps);\n    printer.setPreferences(preferences);\n    DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n    if (getPreferenceValue(p,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      ps.print(\"\\n\\n/* Location:              \");\n      ps.print(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        ps.print(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          ps.print(majorVersion - (49 - 5));\n        }\n else {\n          ps.print(majorVersion - (45 - 1));\n        }\n        ps.print(\" (\");\n        ps.print(majorVersion);\n        ps.print('.');\n        ps.print(printer.getMinorVersion());\n        ps.print(')');\n      }\n      ps.print(\"\\n * JD-Core Version:       \");\n      ps.print(CoreConstants.JD_CORE_VERSION);\n      ps.print(\"\\n */\");\n    }\n    try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n      baos.writeTo(os);\n    }\n catch (    IOException ignore) {\n    }\n  }\n catch (  Exception ignore) {\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ignoreAgain) {\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 327,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 36,
                    "startLineNumber": 134,
                    "startColumnNumber": 20,
                    "endLineNumber": 134,
                    "endColumnNumber": 56
                },
                "nodeContext": "ps.print(printer.getMinorVersion());\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 7,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "java.io.PrintStream"
        },
        {
            "nodeContext": "ps",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 135,
                "startColumnNumber": 20,
                "endLineNumber": 135,
                "endColumnNumber": 22
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 13,
                        "startLineNumber": 135,
                        "startColumnNumber": 20,
                        "endLineNumber": 135,
                        "endColumnNumber": 33
                    },
                    "nodeContext": "ps.print(')')",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 14,
                        "startLineNumber": 135,
                        "startColumnNumber": 20,
                        "endLineNumber": 135,
                        "endColumnNumber": 34
                    },
                    "nodeContext": "ps.print(')');\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 519,
                        "startLineNumber": 122,
                        "startColumnNumber": 40,
                        "endLineNumber": 136,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  ps.print(\"\\n * Java compiler version: \");\n  if (majorVersion >= 49) {\n    ps.print(majorVersion - (49 - 5));\n  }\n else {\n    ps.print(majorVersion - (45 - 1));\n  }\n  ps.print(\" (\");\n  ps.print(majorVersion);\n  ps.print('.');\n  ps.print(printer.getMinorVersion());\n  ps.print(')');\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 59,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 543,
                        "startLineNumber": 122,
                        "startColumnNumber": 16,
                        "endLineNumber": 136,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (majorVersion >= 45) {\n  ps.print(\"\\n * Java compiler version: \");\n  if (majorVersion >= 49) {\n    ps.print(majorVersion - (49 - 5));\n  }\n else {\n    ps.print(majorVersion - (45 - 1));\n  }\n  ps.print(\" (\");\n  ps.print(majorVersion);\n  ps.print('.');\n  ps.print(printer.getMinorVersion());\n  ps.print(')');\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 63,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1252,
                        "startLineNumber": 111,
                        "startColumnNumber": 61,
                        "endLineNumber": 141,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n  ps.print(\"\\n\\n/* Location:              \");\n  ps.print(location);\n  int majorVersion=printer.getMajorVersion();\n  if (majorVersion >= 45) {\n    ps.print(\"\\n * Java compiler version: \");\n    if (majorVersion >= 49) {\n      ps.print(majorVersion - (49 - 5));\n    }\n else {\n      ps.print(majorVersion - (45 - 1));\n    }\n    ps.print(\" (\");\n    ps.print(majorVersion);\n    ps.print('.');\n    ps.print(printer.getMinorVersion());\n    ps.print(')');\n  }\n  ps.print(\"\\n * JD-Core Version:       \");\n  ps.print(CoreConstants.JD_CORE_VERSION);\n  ps.print(\"\\n */\");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 115,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1301,
                        "startLineNumber": 111,
                        "startColumnNumber": 12,
                        "endLineNumber": 141,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (getPreferenceValue(p,WRITE_METADATA,true)) {\n  String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n  ps.print(\"\\n\\n/* Location:              \");\n  ps.print(location);\n  int majorVersion=printer.getMajorVersion();\n  if (majorVersion >= 45) {\n    ps.print(\"\\n * Java compiler version: \");\n    if (majorVersion >= 49) {\n      ps.print(majorVersion - (49 - 5));\n    }\n else {\n      ps.print(majorVersion - (45 - 1));\n    }\n    ps.print(\" (\");\n    ps.print(majorVersion);\n    ps.print('.');\n    ps.print(printer.getMinorVersion());\n    ps.print(')');\n  }\n  ps.print(\"\\n * JD-Core Version:       \");\n  ps.print(CoreConstants.JD_CORE_VERSION);\n  ps.print(\"\\n */\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 121,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 2681,
                        "startLineNumber": 85,
                        "startColumnNumber": 12,
                        "endLineNumber": 147,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> p=api.getPreferences();\n  preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n  preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n  preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n  preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n  preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n  loader.setEntry(entry);\n  baos.reset();\n  PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n  printer.setPrintStream(ps);\n  printer.setPreferences(preferences);\n  DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n  if (getPreferenceValue(p,WRITE_METADATA,true)) {\n    String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    ps.print(\"\\n\\n/* Location:              \");\n    ps.print(location);\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      ps.print(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        ps.print(majorVersion - (49 - 5));\n      }\n else {\n        ps.print(majorVersion - (45 - 1));\n      }\n      ps.print(\" (\");\n      ps.print(majorVersion);\n      ps.print('.');\n      ps.print(printer.getMinorVersion());\n      ps.print(')');\n    }\n    ps.print(\"\\n * JD-Core Version:       \");\n    ps.print(CoreConstants.JD_CORE_VERSION);\n    ps.print(\"\\n */\");\n  }\n  try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n    baos.writeTo(os);\n  }\n catch (  IOException ignore) {\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 262,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2943,
                        "startLineNumber": 85,
                        "startColumnNumber": 8,
                        "endLineNumber": 152,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> p=api.getPreferences();\n  preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n  preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n  preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n  preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n  preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n  loader.setEntry(entry);\n  baos.reset();\n  PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n  printer.setPrintStream(ps);\n  printer.setPreferences(preferences);\n  DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n  if (getPreferenceValue(p,WRITE_METADATA,true)) {\n    String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    ps.print(\"\\n\\n/* Location:              \");\n    ps.print(location);\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      ps.print(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        ps.print(majorVersion - (49 - 5));\n      }\n else {\n        ps.print(majorVersion - (45 - 1));\n      }\n      ps.print(\" (\");\n      ps.print(majorVersion);\n      ps.print('.');\n      ps.print(printer.getMinorVersion());\n      ps.print(')');\n    }\n    ps.print(\"\\n * JD-Core Version:       \");\n    ps.print(CoreConstants.JD_CORE_VERSION);\n    ps.print(\"\\n */\");\n  }\n  try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n    baos.writeTo(os);\n  }\n catch (  IOException ignore) {\n  }\n}\n catch (Exception ignore) {\n  try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n    writer.write(\"// INTERNAL ERROR //\");\n  }\n catch (  IOException ignoreAgain) {\n  }\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 294,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2961,
                        "startLineNumber": 84,
                        "startColumnNumber": 128,
                        "endLineNumber": 153,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> p=api.getPreferences();\n    preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n    preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n    preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n    preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n    preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n    loader.setEntry(entry);\n    baos.reset();\n    PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n    printer.setPrintStream(ps);\n    printer.setPreferences(preferences);\n    DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n    if (getPreferenceValue(p,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      ps.print(\"\\n\\n/* Location:              \");\n      ps.print(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        ps.print(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          ps.print(majorVersion - (49 - 5));\n        }\n else {\n          ps.print(majorVersion - (45 - 1));\n        }\n        ps.print(\" (\");\n        ps.print(majorVersion);\n        ps.print('.');\n        ps.print(printer.getMinorVersion());\n        ps.print(')');\n      }\n      ps.print(\"\\n * JD-Core Version:       \");\n      ps.print(CoreConstants.JD_CORE_VERSION);\n      ps.print(\"\\n */\");\n    }\n    try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n      baos.writeTo(os);\n    }\n catch (    IOException ignore) {\n    }\n  }\n catch (  Exception ignore) {\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ignoreAgain) {\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 295,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3100,
                        "startLineNumber": 83,
                        "startColumnNumber": 4,
                        "endLineNumber": 153,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void saveContent(API api,Controller controller,Listener listener,Path rootPath,Path path,Container.Entry entry){\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> p=api.getPreferences();\n    preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n    preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n    preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n    preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n    preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n    loader.setEntry(entry);\n    baos.reset();\n    PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n    printer.setPrintStream(ps);\n    printer.setPreferences(preferences);\n    DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n    if (getPreferenceValue(p,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      ps.print(\"\\n\\n/* Location:              \");\n      ps.print(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        ps.print(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          ps.print(majorVersion - (49 - 5));\n        }\n else {\n          ps.print(majorVersion - (45 - 1));\n        }\n        ps.print(\" (\");\n        ps.print(majorVersion);\n        ps.print('.');\n        ps.print(printer.getMinorVersion());\n        ps.print(')');\n      }\n      ps.print(\"\\n * JD-Core Version:       \");\n      ps.print(CoreConstants.JD_CORE_VERSION);\n      ps.print(\"\\n */\");\n    }\n    try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n      baos.writeTo(os);\n    }\n catch (    IOException ignore) {\n    }\n  }\n catch (  Exception ignore) {\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ignoreAgain) {\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 327,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 14,
                    "startLineNumber": 135,
                    "startColumnNumber": 20,
                    "endLineNumber": 135,
                    "endColumnNumber": 34
                },
                "nodeContext": "ps.print(')');\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.io.PrintStream"
        },
        {
            "nodeContext": "ps",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 138,
                "startColumnNumber": 16,
                "endLineNumber": 138,
                "endColumnNumber": 18
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 40,
                        "startLineNumber": 138,
                        "startColumnNumber": 16,
                        "endLineNumber": 138,
                        "endColumnNumber": 56
                    },
                    "nodeContext": "ps.print(\"\\n * JD-Core Version:       \")",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 41,
                        "startLineNumber": 138,
                        "startColumnNumber": 16,
                        "endLineNumber": 138,
                        "endColumnNumber": 57
                    },
                    "nodeContext": "ps.print(\"\\n * JD-Core Version:       \");\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1252,
                        "startLineNumber": 111,
                        "startColumnNumber": 61,
                        "endLineNumber": 141,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n  ps.print(\"\\n\\n/* Location:              \");\n  ps.print(location);\n  int majorVersion=printer.getMajorVersion();\n  if (majorVersion >= 45) {\n    ps.print(\"\\n * Java compiler version: \");\n    if (majorVersion >= 49) {\n      ps.print(majorVersion - (49 - 5));\n    }\n else {\n      ps.print(majorVersion - (45 - 1));\n    }\n    ps.print(\" (\");\n    ps.print(majorVersion);\n    ps.print('.');\n    ps.print(printer.getMinorVersion());\n    ps.print(')');\n  }\n  ps.print(\"\\n * JD-Core Version:       \");\n  ps.print(CoreConstants.JD_CORE_VERSION);\n  ps.print(\"\\n */\");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 115,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1301,
                        "startLineNumber": 111,
                        "startColumnNumber": 12,
                        "endLineNumber": 141,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (getPreferenceValue(p,WRITE_METADATA,true)) {\n  String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n  ps.print(\"\\n\\n/* Location:              \");\n  ps.print(location);\n  int majorVersion=printer.getMajorVersion();\n  if (majorVersion >= 45) {\n    ps.print(\"\\n * Java compiler version: \");\n    if (majorVersion >= 49) {\n      ps.print(majorVersion - (49 - 5));\n    }\n else {\n      ps.print(majorVersion - (45 - 1));\n    }\n    ps.print(\" (\");\n    ps.print(majorVersion);\n    ps.print('.');\n    ps.print(printer.getMinorVersion());\n    ps.print(')');\n  }\n  ps.print(\"\\n * JD-Core Version:       \");\n  ps.print(CoreConstants.JD_CORE_VERSION);\n  ps.print(\"\\n */\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 121,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 2681,
                        "startLineNumber": 85,
                        "startColumnNumber": 12,
                        "endLineNumber": 147,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> p=api.getPreferences();\n  preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n  preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n  preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n  preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n  preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n  loader.setEntry(entry);\n  baos.reset();\n  PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n  printer.setPrintStream(ps);\n  printer.setPreferences(preferences);\n  DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n  if (getPreferenceValue(p,WRITE_METADATA,true)) {\n    String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    ps.print(\"\\n\\n/* Location:              \");\n    ps.print(location);\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      ps.print(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        ps.print(majorVersion - (49 - 5));\n      }\n else {\n        ps.print(majorVersion - (45 - 1));\n      }\n      ps.print(\" (\");\n      ps.print(majorVersion);\n      ps.print('.');\n      ps.print(printer.getMinorVersion());\n      ps.print(')');\n    }\n    ps.print(\"\\n * JD-Core Version:       \");\n    ps.print(CoreConstants.JD_CORE_VERSION);\n    ps.print(\"\\n */\");\n  }\n  try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n    baos.writeTo(os);\n  }\n catch (  IOException ignore) {\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 262,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2943,
                        "startLineNumber": 85,
                        "startColumnNumber": 8,
                        "endLineNumber": 152,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> p=api.getPreferences();\n  preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n  preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n  preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n  preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n  preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n  loader.setEntry(entry);\n  baos.reset();\n  PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n  printer.setPrintStream(ps);\n  printer.setPreferences(preferences);\n  DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n  if (getPreferenceValue(p,WRITE_METADATA,true)) {\n    String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    ps.print(\"\\n\\n/* Location:              \");\n    ps.print(location);\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      ps.print(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        ps.print(majorVersion - (49 - 5));\n      }\n else {\n        ps.print(majorVersion - (45 - 1));\n      }\n      ps.print(\" (\");\n      ps.print(majorVersion);\n      ps.print('.');\n      ps.print(printer.getMinorVersion());\n      ps.print(')');\n    }\n    ps.print(\"\\n * JD-Core Version:       \");\n    ps.print(CoreConstants.JD_CORE_VERSION);\n    ps.print(\"\\n */\");\n  }\n  try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n    baos.writeTo(os);\n  }\n catch (  IOException ignore) {\n  }\n}\n catch (Exception ignore) {\n  try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n    writer.write(\"// INTERNAL ERROR //\");\n  }\n catch (  IOException ignoreAgain) {\n  }\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 294,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2961,
                        "startLineNumber": 84,
                        "startColumnNumber": 128,
                        "endLineNumber": 153,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> p=api.getPreferences();\n    preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n    preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n    preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n    preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n    preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n    loader.setEntry(entry);\n    baos.reset();\n    PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n    printer.setPrintStream(ps);\n    printer.setPreferences(preferences);\n    DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n    if (getPreferenceValue(p,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      ps.print(\"\\n\\n/* Location:              \");\n      ps.print(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        ps.print(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          ps.print(majorVersion - (49 - 5));\n        }\n else {\n          ps.print(majorVersion - (45 - 1));\n        }\n        ps.print(\" (\");\n        ps.print(majorVersion);\n        ps.print('.');\n        ps.print(printer.getMinorVersion());\n        ps.print(')');\n      }\n      ps.print(\"\\n * JD-Core Version:       \");\n      ps.print(CoreConstants.JD_CORE_VERSION);\n      ps.print(\"\\n */\");\n    }\n    try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n      baos.writeTo(os);\n    }\n catch (    IOException ignore) {\n    }\n  }\n catch (  Exception ignore) {\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ignoreAgain) {\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 295,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3100,
                        "startLineNumber": 83,
                        "startColumnNumber": 4,
                        "endLineNumber": 153,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void saveContent(API api,Controller controller,Listener listener,Path rootPath,Path path,Container.Entry entry){\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> p=api.getPreferences();\n    preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n    preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n    preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n    preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n    preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n    loader.setEntry(entry);\n    baos.reset();\n    PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n    printer.setPrintStream(ps);\n    printer.setPreferences(preferences);\n    DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n    if (getPreferenceValue(p,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      ps.print(\"\\n\\n/* Location:              \");\n      ps.print(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        ps.print(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          ps.print(majorVersion - (49 - 5));\n        }\n else {\n          ps.print(majorVersion - (45 - 1));\n        }\n        ps.print(\" (\");\n        ps.print(majorVersion);\n        ps.print('.');\n        ps.print(printer.getMinorVersion());\n        ps.print(')');\n      }\n      ps.print(\"\\n * JD-Core Version:       \");\n      ps.print(CoreConstants.JD_CORE_VERSION);\n      ps.print(\"\\n */\");\n    }\n    try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n      baos.writeTo(os);\n    }\n catch (    IOException ignore) {\n    }\n  }\n catch (  Exception ignore) {\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ignoreAgain) {\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 327,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 41,
                    "startLineNumber": 138,
                    "startColumnNumber": 16,
                    "endLineNumber": 138,
                    "endColumnNumber": 57
                },
                "nodeContext": "ps.print(\"\\n * JD-Core Version:       \");\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.io.PrintStream"
        },
        {
            "nodeContext": "ps",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 139,
                "startColumnNumber": 16,
                "endLineNumber": 139,
                "endColumnNumber": 18
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 39,
                        "startLineNumber": 139,
                        "startColumnNumber": 16,
                        "endLineNumber": 139,
                        "endColumnNumber": 55
                    },
                    "nodeContext": "ps.print(CoreConstants.JD_CORE_VERSION)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 40,
                        "startLineNumber": 139,
                        "startColumnNumber": 16,
                        "endLineNumber": 139,
                        "endColumnNumber": 56
                    },
                    "nodeContext": "ps.print(CoreConstants.JD_CORE_VERSION);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1252,
                        "startLineNumber": 111,
                        "startColumnNumber": 61,
                        "endLineNumber": 141,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n  ps.print(\"\\n\\n/* Location:              \");\n  ps.print(location);\n  int majorVersion=printer.getMajorVersion();\n  if (majorVersion >= 45) {\n    ps.print(\"\\n * Java compiler version: \");\n    if (majorVersion >= 49) {\n      ps.print(majorVersion - (49 - 5));\n    }\n else {\n      ps.print(majorVersion - (45 - 1));\n    }\n    ps.print(\" (\");\n    ps.print(majorVersion);\n    ps.print('.');\n    ps.print(printer.getMinorVersion());\n    ps.print(')');\n  }\n  ps.print(\"\\n * JD-Core Version:       \");\n  ps.print(CoreConstants.JD_CORE_VERSION);\n  ps.print(\"\\n */\");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 115,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1301,
                        "startLineNumber": 111,
                        "startColumnNumber": 12,
                        "endLineNumber": 141,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (getPreferenceValue(p,WRITE_METADATA,true)) {\n  String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n  ps.print(\"\\n\\n/* Location:              \");\n  ps.print(location);\n  int majorVersion=printer.getMajorVersion();\n  if (majorVersion >= 45) {\n    ps.print(\"\\n * Java compiler version: \");\n    if (majorVersion >= 49) {\n      ps.print(majorVersion - (49 - 5));\n    }\n else {\n      ps.print(majorVersion - (45 - 1));\n    }\n    ps.print(\" (\");\n    ps.print(majorVersion);\n    ps.print('.');\n    ps.print(printer.getMinorVersion());\n    ps.print(')');\n  }\n  ps.print(\"\\n * JD-Core Version:       \");\n  ps.print(CoreConstants.JD_CORE_VERSION);\n  ps.print(\"\\n */\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 121,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 2681,
                        "startLineNumber": 85,
                        "startColumnNumber": 12,
                        "endLineNumber": 147,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> p=api.getPreferences();\n  preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n  preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n  preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n  preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n  preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n  loader.setEntry(entry);\n  baos.reset();\n  PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n  printer.setPrintStream(ps);\n  printer.setPreferences(preferences);\n  DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n  if (getPreferenceValue(p,WRITE_METADATA,true)) {\n    String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    ps.print(\"\\n\\n/* Location:              \");\n    ps.print(location);\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      ps.print(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        ps.print(majorVersion - (49 - 5));\n      }\n else {\n        ps.print(majorVersion - (45 - 1));\n      }\n      ps.print(\" (\");\n      ps.print(majorVersion);\n      ps.print('.');\n      ps.print(printer.getMinorVersion());\n      ps.print(')');\n    }\n    ps.print(\"\\n * JD-Core Version:       \");\n    ps.print(CoreConstants.JD_CORE_VERSION);\n    ps.print(\"\\n */\");\n  }\n  try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n    baos.writeTo(os);\n  }\n catch (  IOException ignore) {\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 262,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2943,
                        "startLineNumber": 85,
                        "startColumnNumber": 8,
                        "endLineNumber": 152,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> p=api.getPreferences();\n  preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n  preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n  preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n  preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n  preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n  loader.setEntry(entry);\n  baos.reset();\n  PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n  printer.setPrintStream(ps);\n  printer.setPreferences(preferences);\n  DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n  if (getPreferenceValue(p,WRITE_METADATA,true)) {\n    String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    ps.print(\"\\n\\n/* Location:              \");\n    ps.print(location);\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      ps.print(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        ps.print(majorVersion - (49 - 5));\n      }\n else {\n        ps.print(majorVersion - (45 - 1));\n      }\n      ps.print(\" (\");\n      ps.print(majorVersion);\n      ps.print('.');\n      ps.print(printer.getMinorVersion());\n      ps.print(')');\n    }\n    ps.print(\"\\n * JD-Core Version:       \");\n    ps.print(CoreConstants.JD_CORE_VERSION);\n    ps.print(\"\\n */\");\n  }\n  try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n    baos.writeTo(os);\n  }\n catch (  IOException ignore) {\n  }\n}\n catch (Exception ignore) {\n  try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n    writer.write(\"// INTERNAL ERROR //\");\n  }\n catch (  IOException ignoreAgain) {\n  }\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 294,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2961,
                        "startLineNumber": 84,
                        "startColumnNumber": 128,
                        "endLineNumber": 153,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> p=api.getPreferences();\n    preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n    preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n    preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n    preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n    preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n    loader.setEntry(entry);\n    baos.reset();\n    PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n    printer.setPrintStream(ps);\n    printer.setPreferences(preferences);\n    DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n    if (getPreferenceValue(p,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      ps.print(\"\\n\\n/* Location:              \");\n      ps.print(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        ps.print(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          ps.print(majorVersion - (49 - 5));\n        }\n else {\n          ps.print(majorVersion - (45 - 1));\n        }\n        ps.print(\" (\");\n        ps.print(majorVersion);\n        ps.print('.');\n        ps.print(printer.getMinorVersion());\n        ps.print(')');\n      }\n      ps.print(\"\\n * JD-Core Version:       \");\n      ps.print(CoreConstants.JD_CORE_VERSION);\n      ps.print(\"\\n */\");\n    }\n    try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n      baos.writeTo(os);\n    }\n catch (    IOException ignore) {\n    }\n  }\n catch (  Exception ignore) {\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ignoreAgain) {\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 295,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3100,
                        "startLineNumber": 83,
                        "startColumnNumber": 4,
                        "endLineNumber": 153,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void saveContent(API api,Controller controller,Listener listener,Path rootPath,Path path,Container.Entry entry){\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> p=api.getPreferences();\n    preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n    preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n    preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n    preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n    preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n    loader.setEntry(entry);\n    baos.reset();\n    PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n    printer.setPrintStream(ps);\n    printer.setPreferences(preferences);\n    DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n    if (getPreferenceValue(p,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      ps.print(\"\\n\\n/* Location:              \");\n      ps.print(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        ps.print(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          ps.print(majorVersion - (49 - 5));\n        }\n else {\n          ps.print(majorVersion - (45 - 1));\n        }\n        ps.print(\" (\");\n        ps.print(majorVersion);\n        ps.print('.');\n        ps.print(printer.getMinorVersion());\n        ps.print(')');\n      }\n      ps.print(\"\\n * JD-Core Version:       \");\n      ps.print(CoreConstants.JD_CORE_VERSION);\n      ps.print(\"\\n */\");\n    }\n    try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n      baos.writeTo(os);\n    }\n catch (    IOException ignore) {\n    }\n  }\n catch (  Exception ignore) {\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ignoreAgain) {\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 327,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 40,
                    "startLineNumber": 139,
                    "startColumnNumber": 16,
                    "endLineNumber": 139,
                    "endColumnNumber": 56
                },
                "nodeContext": "ps.print(CoreConstants.JD_CORE_VERSION);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 7,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "java.io.PrintStream"
        },
        {
            "nodeContext": "ps",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 140,
                "startColumnNumber": 16,
                "endLineNumber": 140,
                "endColumnNumber": 18
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 17,
                        "startLineNumber": 140,
                        "startColumnNumber": 16,
                        "endLineNumber": 140,
                        "endColumnNumber": 33
                    },
                    "nodeContext": "ps.print(\"\\n */\")",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 18,
                        "startLineNumber": 140,
                        "startColumnNumber": 16,
                        "endLineNumber": 140,
                        "endColumnNumber": 34
                    },
                    "nodeContext": "ps.print(\"\\n */\");\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1252,
                        "startLineNumber": 111,
                        "startColumnNumber": 61,
                        "endLineNumber": 141,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n  ps.print(\"\\n\\n/* Location:              \");\n  ps.print(location);\n  int majorVersion=printer.getMajorVersion();\n  if (majorVersion >= 45) {\n    ps.print(\"\\n * Java compiler version: \");\n    if (majorVersion >= 49) {\n      ps.print(majorVersion - (49 - 5));\n    }\n else {\n      ps.print(majorVersion - (45 - 1));\n    }\n    ps.print(\" (\");\n    ps.print(majorVersion);\n    ps.print('.');\n    ps.print(printer.getMinorVersion());\n    ps.print(')');\n  }\n  ps.print(\"\\n * JD-Core Version:       \");\n  ps.print(CoreConstants.JD_CORE_VERSION);\n  ps.print(\"\\n */\");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 115,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1301,
                        "startLineNumber": 111,
                        "startColumnNumber": 12,
                        "endLineNumber": 141,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (getPreferenceValue(p,WRITE_METADATA,true)) {\n  String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n  ps.print(\"\\n\\n/* Location:              \");\n  ps.print(location);\n  int majorVersion=printer.getMajorVersion();\n  if (majorVersion >= 45) {\n    ps.print(\"\\n * Java compiler version: \");\n    if (majorVersion >= 49) {\n      ps.print(majorVersion - (49 - 5));\n    }\n else {\n      ps.print(majorVersion - (45 - 1));\n    }\n    ps.print(\" (\");\n    ps.print(majorVersion);\n    ps.print('.');\n    ps.print(printer.getMinorVersion());\n    ps.print(')');\n  }\n  ps.print(\"\\n * JD-Core Version:       \");\n  ps.print(CoreConstants.JD_CORE_VERSION);\n  ps.print(\"\\n */\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 121,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 2681,
                        "startLineNumber": 85,
                        "startColumnNumber": 12,
                        "endLineNumber": 147,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> p=api.getPreferences();\n  preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n  preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n  preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n  preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n  preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n  loader.setEntry(entry);\n  baos.reset();\n  PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n  printer.setPrintStream(ps);\n  printer.setPreferences(preferences);\n  DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n  if (getPreferenceValue(p,WRITE_METADATA,true)) {\n    String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    ps.print(\"\\n\\n/* Location:              \");\n    ps.print(location);\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      ps.print(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        ps.print(majorVersion - (49 - 5));\n      }\n else {\n        ps.print(majorVersion - (45 - 1));\n      }\n      ps.print(\" (\");\n      ps.print(majorVersion);\n      ps.print('.');\n      ps.print(printer.getMinorVersion());\n      ps.print(')');\n    }\n    ps.print(\"\\n * JD-Core Version:       \");\n    ps.print(CoreConstants.JD_CORE_VERSION);\n    ps.print(\"\\n */\");\n  }\n  try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n    baos.writeTo(os);\n  }\n catch (  IOException ignore) {\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 262,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2943,
                        "startLineNumber": 85,
                        "startColumnNumber": 8,
                        "endLineNumber": 152,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> p=api.getPreferences();\n  preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n  preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n  preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n  preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n  preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n  loader.setEntry(entry);\n  baos.reset();\n  PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n  printer.setPrintStream(ps);\n  printer.setPreferences(preferences);\n  DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n  if (getPreferenceValue(p,WRITE_METADATA,true)) {\n    String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    ps.print(\"\\n\\n/* Location:              \");\n    ps.print(location);\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      ps.print(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        ps.print(majorVersion - (49 - 5));\n      }\n else {\n        ps.print(majorVersion - (45 - 1));\n      }\n      ps.print(\" (\");\n      ps.print(majorVersion);\n      ps.print('.');\n      ps.print(printer.getMinorVersion());\n      ps.print(')');\n    }\n    ps.print(\"\\n * JD-Core Version:       \");\n    ps.print(CoreConstants.JD_CORE_VERSION);\n    ps.print(\"\\n */\");\n  }\n  try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n    baos.writeTo(os);\n  }\n catch (  IOException ignore) {\n  }\n}\n catch (Exception ignore) {\n  try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n    writer.write(\"// INTERNAL ERROR //\");\n  }\n catch (  IOException ignoreAgain) {\n  }\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 294,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2961,
                        "startLineNumber": 84,
                        "startColumnNumber": 128,
                        "endLineNumber": 153,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> p=api.getPreferences();\n    preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n    preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n    preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n    preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n    preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n    loader.setEntry(entry);\n    baos.reset();\n    PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n    printer.setPrintStream(ps);\n    printer.setPreferences(preferences);\n    DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n    if (getPreferenceValue(p,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      ps.print(\"\\n\\n/* Location:              \");\n      ps.print(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        ps.print(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          ps.print(majorVersion - (49 - 5));\n        }\n else {\n          ps.print(majorVersion - (45 - 1));\n        }\n        ps.print(\" (\");\n        ps.print(majorVersion);\n        ps.print('.');\n        ps.print(printer.getMinorVersion());\n        ps.print(')');\n      }\n      ps.print(\"\\n * JD-Core Version:       \");\n      ps.print(CoreConstants.JD_CORE_VERSION);\n      ps.print(\"\\n */\");\n    }\n    try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n      baos.writeTo(os);\n    }\n catch (    IOException ignore) {\n    }\n  }\n catch (  Exception ignore) {\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ignoreAgain) {\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 295,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3100,
                        "startLineNumber": 83,
                        "startColumnNumber": 4,
                        "endLineNumber": 153,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void saveContent(API api,Controller controller,Listener listener,Path rootPath,Path path,Container.Entry entry){\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> p=api.getPreferences();\n    preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n    preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n    preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n    preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n    preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n    loader.setEntry(entry);\n    baos.reset();\n    PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n    printer.setPrintStream(ps);\n    printer.setPreferences(preferences);\n    DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n    if (getPreferenceValue(p,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      ps.print(\"\\n\\n/* Location:              \");\n      ps.print(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        ps.print(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          ps.print(majorVersion - (49 - 5));\n        }\n else {\n          ps.print(majorVersion - (45 - 1));\n        }\n        ps.print(\" (\");\n        ps.print(majorVersion);\n        ps.print('.');\n        ps.print(printer.getMinorVersion());\n        ps.print(')');\n      }\n      ps.print(\"\\n * JD-Core Version:       \");\n      ps.print(CoreConstants.JD_CORE_VERSION);\n      ps.print(\"\\n */\");\n    }\n    try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n      baos.writeTo(os);\n    }\n catch (    IOException ignore) {\n    }\n  }\n catch (  Exception ignore) {\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ignoreAgain) {\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 327,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 18,
                    "startLineNumber": 140,
                    "startColumnNumber": 16,
                    "endLineNumber": 140,
                    "endColumnNumber": 34
                },
                "nodeContext": "ps.print(\"\\n */\");\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.io.PrintStream"
        }
    ],
    "positionList": [
        {
            "charLength": 2,
            "startLineNumber": 104,
            "startColumnNumber": 35,
            "endLineNumber": 104,
            "endColumnNumber": 37
        },
        {
            "charLength": 2,
            "startLineNumber": 117,
            "startColumnNumber": 16,
            "endLineNumber": 117,
            "endColumnNumber": 18
        },
        {
            "charLength": 2,
            "startLineNumber": 118,
            "startColumnNumber": 16,
            "endLineNumber": 118,
            "endColumnNumber": 18
        },
        {
            "charLength": 2,
            "startLineNumber": 123,
            "startColumnNumber": 20,
            "endLineNumber": 123,
            "endColumnNumber": 22
        },
        {
            "charLength": 2,
            "startLineNumber": 126,
            "startColumnNumber": 24,
            "endLineNumber": 126,
            "endColumnNumber": 26
        },
        {
            "charLength": 2,
            "startLineNumber": 128,
            "startColumnNumber": 24,
            "endLineNumber": 128,
            "endColumnNumber": 26
        },
        {
            "charLength": 2,
            "startLineNumber": 131,
            "startColumnNumber": 20,
            "endLineNumber": 131,
            "endColumnNumber": 22
        },
        {
            "charLength": 2,
            "startLineNumber": 132,
            "startColumnNumber": 20,
            "endLineNumber": 132,
            "endColumnNumber": 22
        },
        {
            "charLength": 2,
            "startLineNumber": 133,
            "startColumnNumber": 20,
            "endLineNumber": 133,
            "endColumnNumber": 22
        },
        {
            "charLength": 2,
            "startLineNumber": 134,
            "startColumnNumber": 20,
            "endLineNumber": 134,
            "endColumnNumber": 22
        },
        {
            "charLength": 2,
            "startLineNumber": 135,
            "startColumnNumber": 20,
            "endLineNumber": 135,
            "endColumnNumber": 22
        },
        {
            "charLength": 2,
            "startLineNumber": 138,
            "startColumnNumber": 16,
            "endLineNumber": 138,
            "endColumnNumber": 18
        },
        {
            "charLength": 2,
            "startLineNumber": 139,
            "startColumnNumber": 16,
            "endLineNumber": 139,
            "endColumnNumber": 18
        },
        {
            "charLength": 2,
            "startLineNumber": 140,
            "startColumnNumber": 16,
            "endLineNumber": 140,
            "endColumnNumber": 18
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 4,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 4,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 4,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 11,
            "layout": 6
        },
        {
            "firstKey": 4,
            "secondKey": 12,
            "layout": 6
        },
        {
            "firstKey": 4,
            "secondKey": 13,
            "layout": 6
        },
        {
            "firstKey": 5,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 5,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 5,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 5,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 11,
            "layout": 6
        },
        {
            "firstKey": 5,
            "secondKey": 12,
            "layout": 6
        },
        {
            "firstKey": 5,
            "secondKey": 13,
            "layout": 6
        },
        {
            "firstKey": 6,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 6,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 7,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 7,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 7,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 7,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 7,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 7,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 7,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 7,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 8,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 8,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 8,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 8,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 8,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 8,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 8,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 9,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 9,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 9,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 9,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 9,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 9,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 9,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 9,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 10,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 11,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 11,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 12,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 13,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 12,
            "layout": 2
        }
    ]
}