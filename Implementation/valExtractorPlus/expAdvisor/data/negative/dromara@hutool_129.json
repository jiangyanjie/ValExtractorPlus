{
    "id": 129,
    "expression": "value",
    "projectName": "dromara@hutool",
    "commitID": "6e9879c82126aefae42fb02af9e25be1347b365a",
    "filePath": "hutool-core/src/main/java/cn/hutool/core/collection/CollUtil.java",
    "occurrences": 12,
    "isArithmeticExpression": 0,
    "isGetTypeMethod": 0,
    "expressionList": [
        {
            "nodeContext": "value",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 5,
                "startLineNumber": 1757,
                "startColumnNumber": 36,
                "endLineNumber": 1757,
                "endColumnNumber": 41
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 13,
                        "startLineNumber": 1757,
                        "startColumnNumber": 28,
                        "endLineNumber": 1757,
                        "endColumnNumber": 41
                    },
                    "nodeContext": "null == value",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 35,
                        "startLineNumber": 1757,
                        "startColumnNumber": 6,
                        "endLineNumber": 1757,
                        "endColumnNumber": 41
                    },
                    "nodeContext": "null == collection || null == value",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 70,
                        "startLineNumber": 1757,
                        "startColumnNumber": 2,
                        "endLineNumber": 1759,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (null == collection || null == value) {\n  return collection;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1034,
                        "startLineNumber": 1756,
                        "startColumnNumber": 98,
                        "endLineNumber": 1789,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "{\n  if (null == collection || null == value) {\n    return collection;\n  }\n  if (TypeUtil.isUnknow(elementType)) {\n    elementType=Object.class;\n  }\n  Iterator iter;\n  if (value instanceof Iterator) {\n    iter=(Iterator)value;\n  }\n else   if (value instanceof Iterable) {\n    iter=((Iterable)value).iterator();\n  }\n else   if (value instanceof Enumeration) {\n    iter=new EnumerationIter<>((Enumeration)value);\n  }\n else   if (ArrayUtil.isArray(value)) {\n    iter=new ArrayIter<>(value);\n  }\n else   if (value instanceof CharSequence) {\n    final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n    iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n  }\n else {\n    iter=CollUtil.newArrayList(value).iterator();\n  }\n  final ConverterRegistry convert=ConverterRegistry.getInstance();\n  while (iter.hasNext()) {\n    collection.add(convert.convert(elementType,iter.next()));\n  }\n  return collection;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 159,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1507,
                        "startLineNumber": 1744,
                        "startColumnNumber": 1,
                        "endLineNumber": 1789,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "/** \n * 将指定对象全部加入到集合中<br> 提供的对象如果为集合类型，会自动转换为目标元素类型<br> 如果为String，支持类似于[1,2,3,4] 或者 1,2,3,4 这种格式\n * @param < T >         元素类型\n * @param collection  被加入的集合\n * @param value       对象，可能为Iterator、Iterable、Enumeration、Array，或者与集合元素类型一致\n * @param elementType 元素类型，为空时，使用Object类型来接纳所有类型\n * @return 被加入集合\n */\n@SuppressWarnings({\"unchecked\",\"rawtypes\"}) public static <T>Collection<T> addAll(Collection<T> collection,Object value,Type elementType){\n  if (null == collection || null == value) {\n    return collection;\n  }\n  if (TypeUtil.isUnknow(elementType)) {\n    elementType=Object.class;\n  }\n  Iterator iter;\n  if (value instanceof Iterator) {\n    iter=(Iterator)value;\n  }\n else   if (value instanceof Iterable) {\n    iter=((Iterable)value).iterator();\n  }\n else   if (value instanceof Enumeration) {\n    iter=new EnumerationIter<>((Enumeration)value);\n  }\n else   if (ArrayUtil.isArray(value)) {\n    iter=new ArrayIter<>(value);\n  }\n else   if (value instanceof CharSequence) {\n    final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n    iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n  }\n else {\n    iter=CollUtil.newArrayList(value).iterator();\n  }\n  final ConverterRegistry convert=ConverterRegistry.getInstance();\n  while (iter.hasNext()) {\n    collection.add(convert.convert(elementType,iter.next()));\n  }\n  return collection;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 191,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 35,
                    "startLineNumber": 1757,
                    "startColumnNumber": 6,
                    "endLineNumber": 1757,
                    "endColumnNumber": 41
                },
                "nodeContext": "null == collection || null == value",
                "nodeType": "InfixExpression",
                "astNodeNumber": 7,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.lang.Object"
        },
        {
            "nodeContext": "value",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 5,
                "startLineNumber": 1766,
                "startColumnNumber": 6,
                "endLineNumber": 1766,
                "endColumnNumber": 11
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 25,
                        "startLineNumber": 1766,
                        "startColumnNumber": 6,
                        "endLineNumber": 1766,
                        "endColumnNumber": 31
                    },
                    "nodeContext": "value instanceof Iterator",
                    "nodeType": "InstanceofExpression",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 628,
                        "startLineNumber": 1766,
                        "startColumnNumber": 2,
                        "endLineNumber": 1781,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (value instanceof Iterator) {\n  iter=(Iterator)value;\n}\n else if (value instanceof Iterable) {\n  iter=((Iterable)value).iterator();\n}\n else if (value instanceof Enumeration) {\n  iter=new EnumerationIter<>((Enumeration)value);\n}\n else if (ArrayUtil.isArray(value)) {\n  iter=new ArrayIter<>(value);\n}\n else if (value instanceof CharSequence) {\n  final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n  iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n}\n else {\n  iter=CollUtil.newArrayList(value).iterator();\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 103,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1034,
                        "startLineNumber": 1756,
                        "startColumnNumber": 98,
                        "endLineNumber": 1789,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "{\n  if (null == collection || null == value) {\n    return collection;\n  }\n  if (TypeUtil.isUnknow(elementType)) {\n    elementType=Object.class;\n  }\n  Iterator iter;\n  if (value instanceof Iterator) {\n    iter=(Iterator)value;\n  }\n else   if (value instanceof Iterable) {\n    iter=((Iterable)value).iterator();\n  }\n else   if (value instanceof Enumeration) {\n    iter=new EnumerationIter<>((Enumeration)value);\n  }\n else   if (ArrayUtil.isArray(value)) {\n    iter=new ArrayIter<>(value);\n  }\n else   if (value instanceof CharSequence) {\n    final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n    iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n  }\n else {\n    iter=CollUtil.newArrayList(value).iterator();\n  }\n  final ConverterRegistry convert=ConverterRegistry.getInstance();\n  while (iter.hasNext()) {\n    collection.add(convert.convert(elementType,iter.next()));\n  }\n  return collection;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 159,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1507,
                        "startLineNumber": 1744,
                        "startColumnNumber": 1,
                        "endLineNumber": 1789,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "/** \n * 将指定对象全部加入到集合中<br> 提供的对象如果为集合类型，会自动转换为目标元素类型<br> 如果为String，支持类似于[1,2,3,4] 或者 1,2,3,4 这种格式\n * @param < T >         元素类型\n * @param collection  被加入的集合\n * @param value       对象，可能为Iterator、Iterable、Enumeration、Array，或者与集合元素类型一致\n * @param elementType 元素类型，为空时，使用Object类型来接纳所有类型\n * @return 被加入集合\n */\n@SuppressWarnings({\"unchecked\",\"rawtypes\"}) public static <T>Collection<T> addAll(Collection<T> collection,Object value,Type elementType){\n  if (null == collection || null == value) {\n    return collection;\n  }\n  if (TypeUtil.isUnknow(elementType)) {\n    elementType=Object.class;\n  }\n  Iterator iter;\n  if (value instanceof Iterator) {\n    iter=(Iterator)value;\n  }\n else   if (value instanceof Iterable) {\n    iter=((Iterable)value).iterator();\n  }\n else   if (value instanceof Enumeration) {\n    iter=new EnumerationIter<>((Enumeration)value);\n  }\n else   if (ArrayUtil.isArray(value)) {\n    iter=new ArrayIter<>(value);\n  }\n else   if (value instanceof CharSequence) {\n    final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n    iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n  }\n else {\n    iter=CollUtil.newArrayList(value).iterator();\n  }\n  final ConverterRegistry convert=ConverterRegistry.getInstance();\n  while (iter.hasNext()) {\n    collection.add(convert.convert(elementType,iter.next()));\n  }\n  return collection;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 191,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 25,
                    "startLineNumber": 1766,
                    "startColumnNumber": 6,
                    "endLineNumber": 1766,
                    "endColumnNumber": 31
                },
                "nodeContext": "value instanceof Iterator",
                "nodeType": "InstanceofExpression",
                "astNodeNumber": 4,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.lang.Object"
        },
        {
            "nodeContext": "value",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 5,
                "startLineNumber": 1767,
                "startColumnNumber": 21,
                "endLineNumber": 1767,
                "endColumnNumber": 26
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 16,
                        "startLineNumber": 1767,
                        "startColumnNumber": 10,
                        "endLineNumber": 1767,
                        "endColumnNumber": 26
                    },
                    "nodeContext": "(Iterator)value",
                    "nodeType": "CastExpression",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 23,
                        "startLineNumber": 1767,
                        "startColumnNumber": 3,
                        "endLineNumber": 1767,
                        "endColumnNumber": 26
                    },
                    "nodeContext": "iter=(Iterator)value",
                    "nodeType": "Assignment",
                    "astNodeNumber": 6,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 24,
                        "startLineNumber": 1767,
                        "startColumnNumber": 3,
                        "endLineNumber": 1767,
                        "endColumnNumber": 27
                    },
                    "nodeContext": "iter=(Iterator)value;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 7,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 35,
                        "startLineNumber": 1766,
                        "startColumnNumber": 33,
                        "endLineNumber": 1768,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  iter=(Iterator)value;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 8,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 628,
                        "startLineNumber": 1766,
                        "startColumnNumber": 2,
                        "endLineNumber": 1781,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (value instanceof Iterator) {\n  iter=(Iterator)value;\n}\n else if (value instanceof Iterable) {\n  iter=((Iterable)value).iterator();\n}\n else if (value instanceof Enumeration) {\n  iter=new EnumerationIter<>((Enumeration)value);\n}\n else if (ArrayUtil.isArray(value)) {\n  iter=new ArrayIter<>(value);\n}\n else if (value instanceof CharSequence) {\n  final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n  iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n}\n else {\n  iter=CollUtil.newArrayList(value).iterator();\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 103,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1034,
                        "startLineNumber": 1756,
                        "startColumnNumber": 98,
                        "endLineNumber": 1789,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "{\n  if (null == collection || null == value) {\n    return collection;\n  }\n  if (TypeUtil.isUnknow(elementType)) {\n    elementType=Object.class;\n  }\n  Iterator iter;\n  if (value instanceof Iterator) {\n    iter=(Iterator)value;\n  }\n else   if (value instanceof Iterable) {\n    iter=((Iterable)value).iterator();\n  }\n else   if (value instanceof Enumeration) {\n    iter=new EnumerationIter<>((Enumeration)value);\n  }\n else   if (ArrayUtil.isArray(value)) {\n    iter=new ArrayIter<>(value);\n  }\n else   if (value instanceof CharSequence) {\n    final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n    iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n  }\n else {\n    iter=CollUtil.newArrayList(value).iterator();\n  }\n  final ConverterRegistry convert=ConverterRegistry.getInstance();\n  while (iter.hasNext()) {\n    collection.add(convert.convert(elementType,iter.next()));\n  }\n  return collection;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 159,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1507,
                        "startLineNumber": 1744,
                        "startColumnNumber": 1,
                        "endLineNumber": 1789,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "/** \n * 将指定对象全部加入到集合中<br> 提供的对象如果为集合类型，会自动转换为目标元素类型<br> 如果为String，支持类似于[1,2,3,4] 或者 1,2,3,4 这种格式\n * @param < T >         元素类型\n * @param collection  被加入的集合\n * @param value       对象，可能为Iterator、Iterable、Enumeration、Array，或者与集合元素类型一致\n * @param elementType 元素类型，为空时，使用Object类型来接纳所有类型\n * @return 被加入集合\n */\n@SuppressWarnings({\"unchecked\",\"rawtypes\"}) public static <T>Collection<T> addAll(Collection<T> collection,Object value,Type elementType){\n  if (null == collection || null == value) {\n    return collection;\n  }\n  if (TypeUtil.isUnknow(elementType)) {\n    elementType=Object.class;\n  }\n  Iterator iter;\n  if (value instanceof Iterator) {\n    iter=(Iterator)value;\n  }\n else   if (value instanceof Iterable) {\n    iter=((Iterable)value).iterator();\n  }\n else   if (value instanceof Enumeration) {\n    iter=new EnumerationIter<>((Enumeration)value);\n  }\n else   if (ArrayUtil.isArray(value)) {\n    iter=new ArrayIter<>(value);\n  }\n else   if (value instanceof CharSequence) {\n    final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n    iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n  }\n else {\n    iter=CollUtil.newArrayList(value).iterator();\n  }\n  final ConverterRegistry convert=ConverterRegistry.getInstance();\n  while (iter.hasNext()) {\n    collection.add(convert.convert(elementType,iter.next()));\n  }\n  return collection;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 191,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 24,
                    "startLineNumber": 1767,
                    "startColumnNumber": 3,
                    "endLineNumber": 1767,
                    "endColumnNumber": 27
                },
                "nodeContext": "iter=(Iterator)value;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 7,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "java.lang.Object"
        },
        {
            "nodeContext": "value",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 5,
                "startLineNumber": 1768,
                "startColumnNumber": 13,
                "endLineNumber": 1768,
                "endColumnNumber": 18
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 25,
                        "startLineNumber": 1768,
                        "startColumnNumber": 13,
                        "endLineNumber": 1768,
                        "endColumnNumber": 38
                    },
                    "nodeContext": "value instanceof Iterable",
                    "nodeType": "InstanceofExpression",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 556,
                        "startLineNumber": 1768,
                        "startColumnNumber": 9,
                        "endLineNumber": 1781,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (value instanceof Iterable) {\n  iter=((Iterable)value).iterator();\n}\n else if (value instanceof Enumeration) {\n  iter=new EnumerationIter<>((Enumeration)value);\n}\n else if (ArrayUtil.isArray(value)) {\n  iter=new ArrayIter<>(value);\n}\n else if (value instanceof CharSequence) {\n  final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n  iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n}\n else {\n  iter=CollUtil.newArrayList(value).iterator();\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 90,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 628,
                        "startLineNumber": 1766,
                        "startColumnNumber": 2,
                        "endLineNumber": 1781,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (value instanceof Iterator) {\n  iter=(Iterator)value;\n}\n else if (value instanceof Iterable) {\n  iter=((Iterable)value).iterator();\n}\n else if (value instanceof Enumeration) {\n  iter=new EnumerationIter<>((Enumeration)value);\n}\n else if (ArrayUtil.isArray(value)) {\n  iter=new ArrayIter<>(value);\n}\n else if (value instanceof CharSequence) {\n  final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n  iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n}\n else {\n  iter=CollUtil.newArrayList(value).iterator();\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 103,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1034,
                        "startLineNumber": 1756,
                        "startColumnNumber": 98,
                        "endLineNumber": 1789,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "{\n  if (null == collection || null == value) {\n    return collection;\n  }\n  if (TypeUtil.isUnknow(elementType)) {\n    elementType=Object.class;\n  }\n  Iterator iter;\n  if (value instanceof Iterator) {\n    iter=(Iterator)value;\n  }\n else   if (value instanceof Iterable) {\n    iter=((Iterable)value).iterator();\n  }\n else   if (value instanceof Enumeration) {\n    iter=new EnumerationIter<>((Enumeration)value);\n  }\n else   if (ArrayUtil.isArray(value)) {\n    iter=new ArrayIter<>(value);\n  }\n else   if (value instanceof CharSequence) {\n    final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n    iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n  }\n else {\n    iter=CollUtil.newArrayList(value).iterator();\n  }\n  final ConverterRegistry convert=ConverterRegistry.getInstance();\n  while (iter.hasNext()) {\n    collection.add(convert.convert(elementType,iter.next()));\n  }\n  return collection;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 159,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1507,
                        "startLineNumber": 1744,
                        "startColumnNumber": 1,
                        "endLineNumber": 1789,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "/** \n * 将指定对象全部加入到集合中<br> 提供的对象如果为集合类型，会自动转换为目标元素类型<br> 如果为String，支持类似于[1,2,3,4] 或者 1,2,3,4 这种格式\n * @param < T >         元素类型\n * @param collection  被加入的集合\n * @param value       对象，可能为Iterator、Iterable、Enumeration、Array，或者与集合元素类型一致\n * @param elementType 元素类型，为空时，使用Object类型来接纳所有类型\n * @return 被加入集合\n */\n@SuppressWarnings({\"unchecked\",\"rawtypes\"}) public static <T>Collection<T> addAll(Collection<T> collection,Object value,Type elementType){\n  if (null == collection || null == value) {\n    return collection;\n  }\n  if (TypeUtil.isUnknow(elementType)) {\n    elementType=Object.class;\n  }\n  Iterator iter;\n  if (value instanceof Iterator) {\n    iter=(Iterator)value;\n  }\n else   if (value instanceof Iterable) {\n    iter=((Iterable)value).iterator();\n  }\n else   if (value instanceof Enumeration) {\n    iter=new EnumerationIter<>((Enumeration)value);\n  }\n else   if (ArrayUtil.isArray(value)) {\n    iter=new ArrayIter<>(value);\n  }\n else   if (value instanceof CharSequence) {\n    final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n    iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n  }\n else {\n    iter=CollUtil.newArrayList(value).iterator();\n  }\n  final ConverterRegistry convert=ConverterRegistry.getInstance();\n  while (iter.hasNext()) {\n    collection.add(convert.convert(elementType,iter.next()));\n  }\n  return collection;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 191,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 25,
                    "startLineNumber": 1768,
                    "startColumnNumber": 13,
                    "endLineNumber": 1768,
                    "endColumnNumber": 38
                },
                "nodeContext": "value instanceof Iterable",
                "nodeType": "InstanceofExpression",
                "astNodeNumber": 4,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.lang.Object"
        },
        {
            "nodeContext": "value",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 5,
                "startLineNumber": 1769,
                "startColumnNumber": 22,
                "endLineNumber": 1769,
                "endColumnNumber": 27
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
                    "nodePosition": {
                        "charLength": 16,
                        "startLineNumber": 1769,
                        "startColumnNumber": 11,
                        "endLineNumber": 1769,
                        "endColumnNumber": 27
                    },
                    "nodeContext": "(Iterable)value",
                    "nodeType": "CastExpression",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 18,
                        "startLineNumber": 1769,
                        "startColumnNumber": 10,
                        "endLineNumber": 1769,
                        "endColumnNumber": 28
                    },
                    "nodeContext": "((Iterable)value)",
                    "nodeType": "ParenthesizedExpression",
                    "astNodeNumber": 5,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 29,
                        "startLineNumber": 1769,
                        "startColumnNumber": 10,
                        "endLineNumber": 1769,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "((Iterable)value).iterator()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 36,
                        "startLineNumber": 1769,
                        "startColumnNumber": 3,
                        "endLineNumber": 1769,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "iter=((Iterable)value).iterator()",
                    "nodeType": "Assignment",
                    "astNodeNumber": 9,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 37,
                        "startLineNumber": 1769,
                        "startColumnNumber": 3,
                        "endLineNumber": 1769,
                        "endColumnNumber": 40
                    },
                    "nodeContext": "iter=((Iterable)value).iterator();\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 10,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 48,
                        "startLineNumber": 1768,
                        "startColumnNumber": 40,
                        "endLineNumber": 1770,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  iter=((Iterable)value).iterator();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 11,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 556,
                        "startLineNumber": 1768,
                        "startColumnNumber": 9,
                        "endLineNumber": 1781,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (value instanceof Iterable) {\n  iter=((Iterable)value).iterator();\n}\n else if (value instanceof Enumeration) {\n  iter=new EnumerationIter<>((Enumeration)value);\n}\n else if (ArrayUtil.isArray(value)) {\n  iter=new ArrayIter<>(value);\n}\n else if (value instanceof CharSequence) {\n  final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n  iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n}\n else {\n  iter=CollUtil.newArrayList(value).iterator();\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 90,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 628,
                        "startLineNumber": 1766,
                        "startColumnNumber": 2,
                        "endLineNumber": 1781,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (value instanceof Iterator) {\n  iter=(Iterator)value;\n}\n else if (value instanceof Iterable) {\n  iter=((Iterable)value).iterator();\n}\n else if (value instanceof Enumeration) {\n  iter=new EnumerationIter<>((Enumeration)value);\n}\n else if (ArrayUtil.isArray(value)) {\n  iter=new ArrayIter<>(value);\n}\n else if (value instanceof CharSequence) {\n  final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n  iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n}\n else {\n  iter=CollUtil.newArrayList(value).iterator();\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 103,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1034,
                        "startLineNumber": 1756,
                        "startColumnNumber": 98,
                        "endLineNumber": 1789,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "{\n  if (null == collection || null == value) {\n    return collection;\n  }\n  if (TypeUtil.isUnknow(elementType)) {\n    elementType=Object.class;\n  }\n  Iterator iter;\n  if (value instanceof Iterator) {\n    iter=(Iterator)value;\n  }\n else   if (value instanceof Iterable) {\n    iter=((Iterable)value).iterator();\n  }\n else   if (value instanceof Enumeration) {\n    iter=new EnumerationIter<>((Enumeration)value);\n  }\n else   if (ArrayUtil.isArray(value)) {\n    iter=new ArrayIter<>(value);\n  }\n else   if (value instanceof CharSequence) {\n    final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n    iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n  }\n else {\n    iter=CollUtil.newArrayList(value).iterator();\n  }\n  final ConverterRegistry convert=ConverterRegistry.getInstance();\n  while (iter.hasNext()) {\n    collection.add(convert.convert(elementType,iter.next()));\n  }\n  return collection;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 159,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1507,
                        "startLineNumber": 1744,
                        "startColumnNumber": 1,
                        "endLineNumber": 1789,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "/** \n * 将指定对象全部加入到集合中<br> 提供的对象如果为集合类型，会自动转换为目标元素类型<br> 如果为String，支持类似于[1,2,3,4] 或者 1,2,3,4 这种格式\n * @param < T >         元素类型\n * @param collection  被加入的集合\n * @param value       对象，可能为Iterator、Iterable、Enumeration、Array，或者与集合元素类型一致\n * @param elementType 元素类型，为空时，使用Object类型来接纳所有类型\n * @return 被加入集合\n */\n@SuppressWarnings({\"unchecked\",\"rawtypes\"}) public static <T>Collection<T> addAll(Collection<T> collection,Object value,Type elementType){\n  if (null == collection || null == value) {\n    return collection;\n  }\n  if (TypeUtil.isUnknow(elementType)) {\n    elementType=Object.class;\n  }\n  Iterator iter;\n  if (value instanceof Iterator) {\n    iter=(Iterator)value;\n  }\n else   if (value instanceof Iterable) {\n    iter=((Iterable)value).iterator();\n  }\n else   if (value instanceof Enumeration) {\n    iter=new EnumerationIter<>((Enumeration)value);\n  }\n else   if (ArrayUtil.isArray(value)) {\n    iter=new ArrayIter<>(value);\n  }\n else   if (value instanceof CharSequence) {\n    final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n    iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n  }\n else {\n    iter=CollUtil.newArrayList(value).iterator();\n  }\n  final ConverterRegistry convert=ConverterRegistry.getInstance();\n  while (iter.hasNext()) {\n    collection.add(convert.convert(elementType,iter.next()));\n  }\n  return collection;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 191,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 37,
                    "startLineNumber": 1769,
                    "startColumnNumber": 3,
                    "endLineNumber": 1769,
                    "endColumnNumber": 40
                },
                "nodeContext": "iter=((Iterable)value).iterator();\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 10,
                "astHeight": 7
            },
            "tokenLength": 1,
            "type": "java.lang.Object"
        },
        {
            "nodeContext": "value",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 5,
                "startLineNumber": 1770,
                "startColumnNumber": 13,
                "endLineNumber": 1770,
                "endColumnNumber": 18
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 28,
                        "startLineNumber": 1770,
                        "startColumnNumber": 13,
                        "endLineNumber": 1770,
                        "endColumnNumber": 41
                    },
                    "nodeContext": "value instanceof Enumeration",
                    "nodeType": "InstanceofExpression",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 471,
                        "startLineNumber": 1770,
                        "startColumnNumber": 9,
                        "endLineNumber": 1781,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (value instanceof Enumeration) {\n  iter=new EnumerationIter<>((Enumeration)value);\n}\n else if (ArrayUtil.isArray(value)) {\n  iter=new ArrayIter<>(value);\n}\n else if (value instanceof CharSequence) {\n  final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n  iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n}\n else {\n  iter=CollUtil.newArrayList(value).iterator();\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 74,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 556,
                        "startLineNumber": 1768,
                        "startColumnNumber": 9,
                        "endLineNumber": 1781,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (value instanceof Iterable) {\n  iter=((Iterable)value).iterator();\n}\n else if (value instanceof Enumeration) {\n  iter=new EnumerationIter<>((Enumeration)value);\n}\n else if (ArrayUtil.isArray(value)) {\n  iter=new ArrayIter<>(value);\n}\n else if (value instanceof CharSequence) {\n  final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n  iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n}\n else {\n  iter=CollUtil.newArrayList(value).iterator();\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 90,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 628,
                        "startLineNumber": 1766,
                        "startColumnNumber": 2,
                        "endLineNumber": 1781,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (value instanceof Iterator) {\n  iter=(Iterator)value;\n}\n else if (value instanceof Iterable) {\n  iter=((Iterable)value).iterator();\n}\n else if (value instanceof Enumeration) {\n  iter=new EnumerationIter<>((Enumeration)value);\n}\n else if (ArrayUtil.isArray(value)) {\n  iter=new ArrayIter<>(value);\n}\n else if (value instanceof CharSequence) {\n  final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n  iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n}\n else {\n  iter=CollUtil.newArrayList(value).iterator();\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 103,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1034,
                        "startLineNumber": 1756,
                        "startColumnNumber": 98,
                        "endLineNumber": 1789,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "{\n  if (null == collection || null == value) {\n    return collection;\n  }\n  if (TypeUtil.isUnknow(elementType)) {\n    elementType=Object.class;\n  }\n  Iterator iter;\n  if (value instanceof Iterator) {\n    iter=(Iterator)value;\n  }\n else   if (value instanceof Iterable) {\n    iter=((Iterable)value).iterator();\n  }\n else   if (value instanceof Enumeration) {\n    iter=new EnumerationIter<>((Enumeration)value);\n  }\n else   if (ArrayUtil.isArray(value)) {\n    iter=new ArrayIter<>(value);\n  }\n else   if (value instanceof CharSequence) {\n    final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n    iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n  }\n else {\n    iter=CollUtil.newArrayList(value).iterator();\n  }\n  final ConverterRegistry convert=ConverterRegistry.getInstance();\n  while (iter.hasNext()) {\n    collection.add(convert.convert(elementType,iter.next()));\n  }\n  return collection;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 159,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1507,
                        "startLineNumber": 1744,
                        "startColumnNumber": 1,
                        "endLineNumber": 1789,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "/** \n * 将指定对象全部加入到集合中<br> 提供的对象如果为集合类型，会自动转换为目标元素类型<br> 如果为String，支持类似于[1,2,3,4] 或者 1,2,3,4 这种格式\n * @param < T >         元素类型\n * @param collection  被加入的集合\n * @param value       对象，可能为Iterator、Iterable、Enumeration、Array，或者与集合元素类型一致\n * @param elementType 元素类型，为空时，使用Object类型来接纳所有类型\n * @return 被加入集合\n */\n@SuppressWarnings({\"unchecked\",\"rawtypes\"}) public static <T>Collection<T> addAll(Collection<T> collection,Object value,Type elementType){\n  if (null == collection || null == value) {\n    return collection;\n  }\n  if (TypeUtil.isUnknow(elementType)) {\n    elementType=Object.class;\n  }\n  Iterator iter;\n  if (value instanceof Iterator) {\n    iter=(Iterator)value;\n  }\n else   if (value instanceof Iterable) {\n    iter=((Iterable)value).iterator();\n  }\n else   if (value instanceof Enumeration) {\n    iter=new EnumerationIter<>((Enumeration)value);\n  }\n else   if (ArrayUtil.isArray(value)) {\n    iter=new ArrayIter<>(value);\n  }\n else   if (value instanceof CharSequence) {\n    final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n    iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n  }\n else {\n    iter=CollUtil.newArrayList(value).iterator();\n  }\n  final ConverterRegistry convert=ConverterRegistry.getInstance();\n  while (iter.hasNext()) {\n    collection.add(convert.convert(elementType,iter.next()));\n  }\n  return collection;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 191,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 28,
                    "startLineNumber": 1770,
                    "startColumnNumber": 13,
                    "endLineNumber": 1770,
                    "endColumnNumber": 41
                },
                "nodeContext": "value instanceof Enumeration",
                "nodeType": "InstanceofExpression",
                "astNodeNumber": 4,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.lang.Object"
        },
        {
            "nodeContext": "value",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 5,
                "startLineNumber": 1771,
                "startColumnNumber": 46,
                "endLineNumber": 1771,
                "endColumnNumber": 51
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
                    "nodePosition": {
                        "charLength": 19,
                        "startLineNumber": 1771,
                        "startColumnNumber": 32,
                        "endLineNumber": 1771,
                        "endColumnNumber": 51
                    },
                    "nodeContext": "(Enumeration)value",
                    "nodeType": "CastExpression",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 42,
                        "startLineNumber": 1771,
                        "startColumnNumber": 10,
                        "endLineNumber": 1771,
                        "endColumnNumber": 52
                    },
                    "nodeContext": "new EnumerationIter<>((Enumeration)value)",
                    "nodeType": "ClassInstanceCreation",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 49,
                        "startLineNumber": 1771,
                        "startColumnNumber": 3,
                        "endLineNumber": 1771,
                        "endColumnNumber": 52
                    },
                    "nodeContext": "iter=new EnumerationIter<>((Enumeration)value)",
                    "nodeType": "Assignment",
                    "astNodeNumber": 10,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 50,
                        "startLineNumber": 1771,
                        "startColumnNumber": 3,
                        "endLineNumber": 1771,
                        "endColumnNumber": 53
                    },
                    "nodeContext": "iter=new EnumerationIter<>((Enumeration)value);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 11,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 61,
                        "startLineNumber": 1770,
                        "startColumnNumber": 43,
                        "endLineNumber": 1772,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  iter=new EnumerationIter<>((Enumeration)value);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 12,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 471,
                        "startLineNumber": 1770,
                        "startColumnNumber": 9,
                        "endLineNumber": 1781,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (value instanceof Enumeration) {\n  iter=new EnumerationIter<>((Enumeration)value);\n}\n else if (ArrayUtil.isArray(value)) {\n  iter=new ArrayIter<>(value);\n}\n else if (value instanceof CharSequence) {\n  final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n  iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n}\n else {\n  iter=CollUtil.newArrayList(value).iterator();\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 74,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 556,
                        "startLineNumber": 1768,
                        "startColumnNumber": 9,
                        "endLineNumber": 1781,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (value instanceof Iterable) {\n  iter=((Iterable)value).iterator();\n}\n else if (value instanceof Enumeration) {\n  iter=new EnumerationIter<>((Enumeration)value);\n}\n else if (ArrayUtil.isArray(value)) {\n  iter=new ArrayIter<>(value);\n}\n else if (value instanceof CharSequence) {\n  final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n  iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n}\n else {\n  iter=CollUtil.newArrayList(value).iterator();\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 90,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 628,
                        "startLineNumber": 1766,
                        "startColumnNumber": 2,
                        "endLineNumber": 1781,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (value instanceof Iterator) {\n  iter=(Iterator)value;\n}\n else if (value instanceof Iterable) {\n  iter=((Iterable)value).iterator();\n}\n else if (value instanceof Enumeration) {\n  iter=new EnumerationIter<>((Enumeration)value);\n}\n else if (ArrayUtil.isArray(value)) {\n  iter=new ArrayIter<>(value);\n}\n else if (value instanceof CharSequence) {\n  final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n  iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n}\n else {\n  iter=CollUtil.newArrayList(value).iterator();\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 103,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1034,
                        "startLineNumber": 1756,
                        "startColumnNumber": 98,
                        "endLineNumber": 1789,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "{\n  if (null == collection || null == value) {\n    return collection;\n  }\n  if (TypeUtil.isUnknow(elementType)) {\n    elementType=Object.class;\n  }\n  Iterator iter;\n  if (value instanceof Iterator) {\n    iter=(Iterator)value;\n  }\n else   if (value instanceof Iterable) {\n    iter=((Iterable)value).iterator();\n  }\n else   if (value instanceof Enumeration) {\n    iter=new EnumerationIter<>((Enumeration)value);\n  }\n else   if (ArrayUtil.isArray(value)) {\n    iter=new ArrayIter<>(value);\n  }\n else   if (value instanceof CharSequence) {\n    final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n    iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n  }\n else {\n    iter=CollUtil.newArrayList(value).iterator();\n  }\n  final ConverterRegistry convert=ConverterRegistry.getInstance();\n  while (iter.hasNext()) {\n    collection.add(convert.convert(elementType,iter.next()));\n  }\n  return collection;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 159,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1507,
                        "startLineNumber": 1744,
                        "startColumnNumber": 1,
                        "endLineNumber": 1789,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "/** \n * 将指定对象全部加入到集合中<br> 提供的对象如果为集合类型，会自动转换为目标元素类型<br> 如果为String，支持类似于[1,2,3,4] 或者 1,2,3,4 这种格式\n * @param < T >         元素类型\n * @param collection  被加入的集合\n * @param value       对象，可能为Iterator、Iterable、Enumeration、Array，或者与集合元素类型一致\n * @param elementType 元素类型，为空时，使用Object类型来接纳所有类型\n * @return 被加入集合\n */\n@SuppressWarnings({\"unchecked\",\"rawtypes\"}) public static <T>Collection<T> addAll(Collection<T> collection,Object value,Type elementType){\n  if (null == collection || null == value) {\n    return collection;\n  }\n  if (TypeUtil.isUnknow(elementType)) {\n    elementType=Object.class;\n  }\n  Iterator iter;\n  if (value instanceof Iterator) {\n    iter=(Iterator)value;\n  }\n else   if (value instanceof Iterable) {\n    iter=((Iterable)value).iterator();\n  }\n else   if (value instanceof Enumeration) {\n    iter=new EnumerationIter<>((Enumeration)value);\n  }\n else   if (ArrayUtil.isArray(value)) {\n    iter=new ArrayIter<>(value);\n  }\n else   if (value instanceof CharSequence) {\n    final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n    iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n  }\n else {\n    iter=CollUtil.newArrayList(value).iterator();\n  }\n  final ConverterRegistry convert=ConverterRegistry.getInstance();\n  while (iter.hasNext()) {\n    collection.add(convert.convert(elementType,iter.next()));\n  }\n  return collection;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 191,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 50,
                    "startLineNumber": 1771,
                    "startColumnNumber": 3,
                    "endLineNumber": 1771,
                    "endColumnNumber": 53
                },
                "nodeContext": "iter=new EnumerationIter<>((Enumeration)value);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 11,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "java.lang.Object"
        },
        {
            "nodeContext": "value",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 5,
                "startLineNumber": 1772,
                "startColumnNumber": 31,
                "endLineNumber": 1772,
                "endColumnNumber": 36
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 24,
                        "startLineNumber": 1772,
                        "startColumnNumber": 13,
                        "endLineNumber": 1772,
                        "endColumnNumber": 37
                    },
                    "nodeContext": "ArrayUtil.isArray(value)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 370,
                        "startLineNumber": 1772,
                        "startColumnNumber": 9,
                        "endLineNumber": 1781,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (ArrayUtil.isArray(value)) {\n  iter=new ArrayIter<>(value);\n}\n else if (value instanceof CharSequence) {\n  final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n  iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n}\n else {\n  iter=CollUtil.newArrayList(value).iterator();\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 57,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 471,
                        "startLineNumber": 1770,
                        "startColumnNumber": 9,
                        "endLineNumber": 1781,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (value instanceof Enumeration) {\n  iter=new EnumerationIter<>((Enumeration)value);\n}\n else if (ArrayUtil.isArray(value)) {\n  iter=new ArrayIter<>(value);\n}\n else if (value instanceof CharSequence) {\n  final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n  iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n}\n else {\n  iter=CollUtil.newArrayList(value).iterator();\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 74,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 556,
                        "startLineNumber": 1768,
                        "startColumnNumber": 9,
                        "endLineNumber": 1781,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (value instanceof Iterable) {\n  iter=((Iterable)value).iterator();\n}\n else if (value instanceof Enumeration) {\n  iter=new EnumerationIter<>((Enumeration)value);\n}\n else if (ArrayUtil.isArray(value)) {\n  iter=new ArrayIter<>(value);\n}\n else if (value instanceof CharSequence) {\n  final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n  iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n}\n else {\n  iter=CollUtil.newArrayList(value).iterator();\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 90,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 628,
                        "startLineNumber": 1766,
                        "startColumnNumber": 2,
                        "endLineNumber": 1781,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (value instanceof Iterator) {\n  iter=(Iterator)value;\n}\n else if (value instanceof Iterable) {\n  iter=((Iterable)value).iterator();\n}\n else if (value instanceof Enumeration) {\n  iter=new EnumerationIter<>((Enumeration)value);\n}\n else if (ArrayUtil.isArray(value)) {\n  iter=new ArrayIter<>(value);\n}\n else if (value instanceof CharSequence) {\n  final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n  iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n}\n else {\n  iter=CollUtil.newArrayList(value).iterator();\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 103,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1034,
                        "startLineNumber": 1756,
                        "startColumnNumber": 98,
                        "endLineNumber": 1789,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "{\n  if (null == collection || null == value) {\n    return collection;\n  }\n  if (TypeUtil.isUnknow(elementType)) {\n    elementType=Object.class;\n  }\n  Iterator iter;\n  if (value instanceof Iterator) {\n    iter=(Iterator)value;\n  }\n else   if (value instanceof Iterable) {\n    iter=((Iterable)value).iterator();\n  }\n else   if (value instanceof Enumeration) {\n    iter=new EnumerationIter<>((Enumeration)value);\n  }\n else   if (ArrayUtil.isArray(value)) {\n    iter=new ArrayIter<>(value);\n  }\n else   if (value instanceof CharSequence) {\n    final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n    iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n  }\n else {\n    iter=CollUtil.newArrayList(value).iterator();\n  }\n  final ConverterRegistry convert=ConverterRegistry.getInstance();\n  while (iter.hasNext()) {\n    collection.add(convert.convert(elementType,iter.next()));\n  }\n  return collection;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 159,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1507,
                        "startLineNumber": 1744,
                        "startColumnNumber": 1,
                        "endLineNumber": 1789,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "/** \n * 将指定对象全部加入到集合中<br> 提供的对象如果为集合类型，会自动转换为目标元素类型<br> 如果为String，支持类似于[1,2,3,4] 或者 1,2,3,4 这种格式\n * @param < T >         元素类型\n * @param collection  被加入的集合\n * @param value       对象，可能为Iterator、Iterable、Enumeration、Array，或者与集合元素类型一致\n * @param elementType 元素类型，为空时，使用Object类型来接纳所有类型\n * @return 被加入集合\n */\n@SuppressWarnings({\"unchecked\",\"rawtypes\"}) public static <T>Collection<T> addAll(Collection<T> collection,Object value,Type elementType){\n  if (null == collection || null == value) {\n    return collection;\n  }\n  if (TypeUtil.isUnknow(elementType)) {\n    elementType=Object.class;\n  }\n  Iterator iter;\n  if (value instanceof Iterator) {\n    iter=(Iterator)value;\n  }\n else   if (value instanceof Iterable) {\n    iter=((Iterable)value).iterator();\n  }\n else   if (value instanceof Enumeration) {\n    iter=new EnumerationIter<>((Enumeration)value);\n  }\n else   if (ArrayUtil.isArray(value)) {\n    iter=new ArrayIter<>(value);\n  }\n else   if (value instanceof CharSequence) {\n    final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n    iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n  }\n else {\n    iter=CollUtil.newArrayList(value).iterator();\n  }\n  final ConverterRegistry convert=ConverterRegistry.getInstance();\n  while (iter.hasNext()) {\n    collection.add(convert.convert(elementType,iter.next()));\n  }\n  return collection;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 191,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 24,
                    "startLineNumber": 1772,
                    "startColumnNumber": 13,
                    "endLineNumber": 1772,
                    "endColumnNumber": 37
                },
                "nodeContext": "ArrayUtil.isArray(value)",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 4,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "java.lang.Object"
        },
        {
            "nodeContext": "value",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 5,
                "startLineNumber": 1773,
                "startColumnNumber": 26,
                "endLineNumber": 1773,
                "endColumnNumber": 31
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 22,
                        "startLineNumber": 1773,
                        "startColumnNumber": 10,
                        "endLineNumber": 1773,
                        "endColumnNumber": 32
                    },
                    "nodeContext": "new ArrayIter<>(value)",
                    "nodeType": "ClassInstanceCreation",
                    "astNodeNumber": 5,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 29,
                        "startLineNumber": 1773,
                        "startColumnNumber": 3,
                        "endLineNumber": 1773,
                        "endColumnNumber": 32
                    },
                    "nodeContext": "iter=new ArrayIter<>(value)",
                    "nodeType": "Assignment",
                    "astNodeNumber": 7,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 30,
                        "startLineNumber": 1773,
                        "startColumnNumber": 3,
                        "endLineNumber": 1773,
                        "endColumnNumber": 33
                    },
                    "nodeContext": "iter=new ArrayIter<>(value);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 41,
                        "startLineNumber": 1772,
                        "startColumnNumber": 39,
                        "endLineNumber": 1774,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  iter=new ArrayIter<>(value);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 9,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 370,
                        "startLineNumber": 1772,
                        "startColumnNumber": 9,
                        "endLineNumber": 1781,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (ArrayUtil.isArray(value)) {\n  iter=new ArrayIter<>(value);\n}\n else if (value instanceof CharSequence) {\n  final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n  iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n}\n else {\n  iter=CollUtil.newArrayList(value).iterator();\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 57,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 471,
                        "startLineNumber": 1770,
                        "startColumnNumber": 9,
                        "endLineNumber": 1781,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (value instanceof Enumeration) {\n  iter=new EnumerationIter<>((Enumeration)value);\n}\n else if (ArrayUtil.isArray(value)) {\n  iter=new ArrayIter<>(value);\n}\n else if (value instanceof CharSequence) {\n  final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n  iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n}\n else {\n  iter=CollUtil.newArrayList(value).iterator();\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 74,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 556,
                        "startLineNumber": 1768,
                        "startColumnNumber": 9,
                        "endLineNumber": 1781,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (value instanceof Iterable) {\n  iter=((Iterable)value).iterator();\n}\n else if (value instanceof Enumeration) {\n  iter=new EnumerationIter<>((Enumeration)value);\n}\n else if (ArrayUtil.isArray(value)) {\n  iter=new ArrayIter<>(value);\n}\n else if (value instanceof CharSequence) {\n  final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n  iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n}\n else {\n  iter=CollUtil.newArrayList(value).iterator();\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 90,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 628,
                        "startLineNumber": 1766,
                        "startColumnNumber": 2,
                        "endLineNumber": 1781,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (value instanceof Iterator) {\n  iter=(Iterator)value;\n}\n else if (value instanceof Iterable) {\n  iter=((Iterable)value).iterator();\n}\n else if (value instanceof Enumeration) {\n  iter=new EnumerationIter<>((Enumeration)value);\n}\n else if (ArrayUtil.isArray(value)) {\n  iter=new ArrayIter<>(value);\n}\n else if (value instanceof CharSequence) {\n  final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n  iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n}\n else {\n  iter=CollUtil.newArrayList(value).iterator();\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 103,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1034,
                        "startLineNumber": 1756,
                        "startColumnNumber": 98,
                        "endLineNumber": 1789,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "{\n  if (null == collection || null == value) {\n    return collection;\n  }\n  if (TypeUtil.isUnknow(elementType)) {\n    elementType=Object.class;\n  }\n  Iterator iter;\n  if (value instanceof Iterator) {\n    iter=(Iterator)value;\n  }\n else   if (value instanceof Iterable) {\n    iter=((Iterable)value).iterator();\n  }\n else   if (value instanceof Enumeration) {\n    iter=new EnumerationIter<>((Enumeration)value);\n  }\n else   if (ArrayUtil.isArray(value)) {\n    iter=new ArrayIter<>(value);\n  }\n else   if (value instanceof CharSequence) {\n    final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n    iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n  }\n else {\n    iter=CollUtil.newArrayList(value).iterator();\n  }\n  final ConverterRegistry convert=ConverterRegistry.getInstance();\n  while (iter.hasNext()) {\n    collection.add(convert.convert(elementType,iter.next()));\n  }\n  return collection;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 159,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1507,
                        "startLineNumber": 1744,
                        "startColumnNumber": 1,
                        "endLineNumber": 1789,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "/** \n * 将指定对象全部加入到集合中<br> 提供的对象如果为集合类型，会自动转换为目标元素类型<br> 如果为String，支持类似于[1,2,3,4] 或者 1,2,3,4 这种格式\n * @param < T >         元素类型\n * @param collection  被加入的集合\n * @param value       对象，可能为Iterator、Iterable、Enumeration、Array，或者与集合元素类型一致\n * @param elementType 元素类型，为空时，使用Object类型来接纳所有类型\n * @return 被加入集合\n */\n@SuppressWarnings({\"unchecked\",\"rawtypes\"}) public static <T>Collection<T> addAll(Collection<T> collection,Object value,Type elementType){\n  if (null == collection || null == value) {\n    return collection;\n  }\n  if (TypeUtil.isUnknow(elementType)) {\n    elementType=Object.class;\n  }\n  Iterator iter;\n  if (value instanceof Iterator) {\n    iter=(Iterator)value;\n  }\n else   if (value instanceof Iterable) {\n    iter=((Iterable)value).iterator();\n  }\n else   if (value instanceof Enumeration) {\n    iter=new EnumerationIter<>((Enumeration)value);\n  }\n else   if (ArrayUtil.isArray(value)) {\n    iter=new ArrayIter<>(value);\n  }\n else   if (value instanceof CharSequence) {\n    final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n    iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n  }\n else {\n    iter=CollUtil.newArrayList(value).iterator();\n  }\n  final ConverterRegistry convert=ConverterRegistry.getInstance();\n  while (iter.hasNext()) {\n    collection.add(convert.convert(elementType,iter.next()));\n  }\n  return collection;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 191,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 30,
                    "startLineNumber": 1773,
                    "startColumnNumber": 3,
                    "endLineNumber": 1773,
                    "endColumnNumber": 33
                },
                "nodeContext": "iter=new ArrayIter<>(value);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "java.lang.Object"
        },
        {
            "nodeContext": "value",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 5,
                "startLineNumber": 1774,
                "startColumnNumber": 13,
                "endLineNumber": 1774,
                "endColumnNumber": 18
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 29,
                        "startLineNumber": 1774,
                        "startColumnNumber": 13,
                        "endLineNumber": 1774,
                        "endColumnNumber": 42
                    },
                    "nodeContext": "value instanceof CharSequence",
                    "nodeType": "InstanceofExpression",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 293,
                        "startLineNumber": 1774,
                        "startColumnNumber": 9,
                        "endLineNumber": 1781,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (value instanceof CharSequence) {\n  final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n  iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n}\n else {\n  iter=CollUtil.newArrayList(value).iterator();\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 43,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 370,
                        "startLineNumber": 1772,
                        "startColumnNumber": 9,
                        "endLineNumber": 1781,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (ArrayUtil.isArray(value)) {\n  iter=new ArrayIter<>(value);\n}\n else if (value instanceof CharSequence) {\n  final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n  iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n}\n else {\n  iter=CollUtil.newArrayList(value).iterator();\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 57,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 471,
                        "startLineNumber": 1770,
                        "startColumnNumber": 9,
                        "endLineNumber": 1781,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (value instanceof Enumeration) {\n  iter=new EnumerationIter<>((Enumeration)value);\n}\n else if (ArrayUtil.isArray(value)) {\n  iter=new ArrayIter<>(value);\n}\n else if (value instanceof CharSequence) {\n  final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n  iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n}\n else {\n  iter=CollUtil.newArrayList(value).iterator();\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 74,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 556,
                        "startLineNumber": 1768,
                        "startColumnNumber": 9,
                        "endLineNumber": 1781,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (value instanceof Iterable) {\n  iter=((Iterable)value).iterator();\n}\n else if (value instanceof Enumeration) {\n  iter=new EnumerationIter<>((Enumeration)value);\n}\n else if (ArrayUtil.isArray(value)) {\n  iter=new ArrayIter<>(value);\n}\n else if (value instanceof CharSequence) {\n  final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n  iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n}\n else {\n  iter=CollUtil.newArrayList(value).iterator();\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 90,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 628,
                        "startLineNumber": 1766,
                        "startColumnNumber": 2,
                        "endLineNumber": 1781,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (value instanceof Iterator) {\n  iter=(Iterator)value;\n}\n else if (value instanceof Iterable) {\n  iter=((Iterable)value).iterator();\n}\n else if (value instanceof Enumeration) {\n  iter=new EnumerationIter<>((Enumeration)value);\n}\n else if (ArrayUtil.isArray(value)) {\n  iter=new ArrayIter<>(value);\n}\n else if (value instanceof CharSequence) {\n  final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n  iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n}\n else {\n  iter=CollUtil.newArrayList(value).iterator();\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 103,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1034,
                        "startLineNumber": 1756,
                        "startColumnNumber": 98,
                        "endLineNumber": 1789,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "{\n  if (null == collection || null == value) {\n    return collection;\n  }\n  if (TypeUtil.isUnknow(elementType)) {\n    elementType=Object.class;\n  }\n  Iterator iter;\n  if (value instanceof Iterator) {\n    iter=(Iterator)value;\n  }\n else   if (value instanceof Iterable) {\n    iter=((Iterable)value).iterator();\n  }\n else   if (value instanceof Enumeration) {\n    iter=new EnumerationIter<>((Enumeration)value);\n  }\n else   if (ArrayUtil.isArray(value)) {\n    iter=new ArrayIter<>(value);\n  }\n else   if (value instanceof CharSequence) {\n    final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n    iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n  }\n else {\n    iter=CollUtil.newArrayList(value).iterator();\n  }\n  final ConverterRegistry convert=ConverterRegistry.getInstance();\n  while (iter.hasNext()) {\n    collection.add(convert.convert(elementType,iter.next()));\n  }\n  return collection;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 159,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1507,
                        "startLineNumber": 1744,
                        "startColumnNumber": 1,
                        "endLineNumber": 1789,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "/** \n * 将指定对象全部加入到集合中<br> 提供的对象如果为集合类型，会自动转换为目标元素类型<br> 如果为String，支持类似于[1,2,3,4] 或者 1,2,3,4 这种格式\n * @param < T >         元素类型\n * @param collection  被加入的集合\n * @param value       对象，可能为Iterator、Iterable、Enumeration、Array，或者与集合元素类型一致\n * @param elementType 元素类型，为空时，使用Object类型来接纳所有类型\n * @return 被加入集合\n */\n@SuppressWarnings({\"unchecked\",\"rawtypes\"}) public static <T>Collection<T> addAll(Collection<T> collection,Object value,Type elementType){\n  if (null == collection || null == value) {\n    return collection;\n  }\n  if (TypeUtil.isUnknow(elementType)) {\n    elementType=Object.class;\n  }\n  Iterator iter;\n  if (value instanceof Iterator) {\n    iter=(Iterator)value;\n  }\n else   if (value instanceof Iterable) {\n    iter=((Iterable)value).iterator();\n  }\n else   if (value instanceof Enumeration) {\n    iter=new EnumerationIter<>((Enumeration)value);\n  }\n else   if (ArrayUtil.isArray(value)) {\n    iter=new ArrayIter<>(value);\n  }\n else   if (value instanceof CharSequence) {\n    final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n    iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n  }\n else {\n    iter=CollUtil.newArrayList(value).iterator();\n  }\n  final ConverterRegistry convert=ConverterRegistry.getInstance();\n  while (iter.hasNext()) {\n    collection.add(convert.convert(elementType,iter.next()));\n  }\n  return collection;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 191,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 29,
                    "startLineNumber": 1774,
                    "startColumnNumber": 13,
                    "endLineNumber": 1774,
                    "endColumnNumber": 42
                },
                "nodeContext": "value instanceof CharSequence",
                "nodeType": "InstanceofExpression",
                "astNodeNumber": 4,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.lang.Object"
        },
        {
            "nodeContext": "value",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 5,
                "startLineNumber": 1776,
                "startColumnNumber": 57,
                "endLineNumber": 1776,
                "endColumnNumber": 62
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 20,
                        "startLineNumber": 1776,
                        "startColumnNumber": 42,
                        "endLineNumber": 1776,
                        "endColumnNumber": 62
                    },
                    "nodeContext": "(CharSequence)value",
                    "nodeType": "CastExpression",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 46,
                        "startLineNumber": 1776,
                        "startColumnNumber": 27,
                        "endLineNumber": 1776,
                        "endColumnNumber": 73
                    },
                    "nodeContext": "StrUtil.unWrap((CharSequence)value,'[',']')",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 57,
                        "startLineNumber": 1776,
                        "startColumnNumber": 16,
                        "endLineNumber": 1776,
                        "endColumnNumber": 73
                    },
                    "nodeContext": "ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']')",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 11,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 71,
                        "startLineNumber": 1776,
                        "startColumnNumber": 3,
                        "endLineNumber": 1776,
                        "endColumnNumber": 74
                    },
                    "nodeContext": "final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 15,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 174,
                        "startLineNumber": 1774,
                        "startColumnNumber": 44,
                        "endLineNumber": 1778,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n  iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 28,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 293,
                        "startLineNumber": 1774,
                        "startColumnNumber": 9,
                        "endLineNumber": 1781,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (value instanceof CharSequence) {\n  final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n  iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n}\n else {\n  iter=CollUtil.newArrayList(value).iterator();\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 43,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 370,
                        "startLineNumber": 1772,
                        "startColumnNumber": 9,
                        "endLineNumber": 1781,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (ArrayUtil.isArray(value)) {\n  iter=new ArrayIter<>(value);\n}\n else if (value instanceof CharSequence) {\n  final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n  iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n}\n else {\n  iter=CollUtil.newArrayList(value).iterator();\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 57,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 471,
                        "startLineNumber": 1770,
                        "startColumnNumber": 9,
                        "endLineNumber": 1781,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (value instanceof Enumeration) {\n  iter=new EnumerationIter<>((Enumeration)value);\n}\n else if (ArrayUtil.isArray(value)) {\n  iter=new ArrayIter<>(value);\n}\n else if (value instanceof CharSequence) {\n  final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n  iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n}\n else {\n  iter=CollUtil.newArrayList(value).iterator();\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 74,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 556,
                        "startLineNumber": 1768,
                        "startColumnNumber": 9,
                        "endLineNumber": 1781,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (value instanceof Iterable) {\n  iter=((Iterable)value).iterator();\n}\n else if (value instanceof Enumeration) {\n  iter=new EnumerationIter<>((Enumeration)value);\n}\n else if (ArrayUtil.isArray(value)) {\n  iter=new ArrayIter<>(value);\n}\n else if (value instanceof CharSequence) {\n  final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n  iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n}\n else {\n  iter=CollUtil.newArrayList(value).iterator();\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 90,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 628,
                        "startLineNumber": 1766,
                        "startColumnNumber": 2,
                        "endLineNumber": 1781,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (value instanceof Iterator) {\n  iter=(Iterator)value;\n}\n else if (value instanceof Iterable) {\n  iter=((Iterable)value).iterator();\n}\n else if (value instanceof Enumeration) {\n  iter=new EnumerationIter<>((Enumeration)value);\n}\n else if (ArrayUtil.isArray(value)) {\n  iter=new ArrayIter<>(value);\n}\n else if (value instanceof CharSequence) {\n  final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n  iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n}\n else {\n  iter=CollUtil.newArrayList(value).iterator();\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 103,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1034,
                        "startLineNumber": 1756,
                        "startColumnNumber": 98,
                        "endLineNumber": 1789,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "{\n  if (null == collection || null == value) {\n    return collection;\n  }\n  if (TypeUtil.isUnknow(elementType)) {\n    elementType=Object.class;\n  }\n  Iterator iter;\n  if (value instanceof Iterator) {\n    iter=(Iterator)value;\n  }\n else   if (value instanceof Iterable) {\n    iter=((Iterable)value).iterator();\n  }\n else   if (value instanceof Enumeration) {\n    iter=new EnumerationIter<>((Enumeration)value);\n  }\n else   if (ArrayUtil.isArray(value)) {\n    iter=new ArrayIter<>(value);\n  }\n else   if (value instanceof CharSequence) {\n    final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n    iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n  }\n else {\n    iter=CollUtil.newArrayList(value).iterator();\n  }\n  final ConverterRegistry convert=ConverterRegistry.getInstance();\n  while (iter.hasNext()) {\n    collection.add(convert.convert(elementType,iter.next()));\n  }\n  return collection;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 159,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1507,
                        "startLineNumber": 1744,
                        "startColumnNumber": 1,
                        "endLineNumber": 1789,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "/** \n * 将指定对象全部加入到集合中<br> 提供的对象如果为集合类型，会自动转换为目标元素类型<br> 如果为String，支持类似于[1,2,3,4] 或者 1,2,3,4 这种格式\n * @param < T >         元素类型\n * @param collection  被加入的集合\n * @param value       对象，可能为Iterator、Iterable、Enumeration、Array，或者与集合元素类型一致\n * @param elementType 元素类型，为空时，使用Object类型来接纳所有类型\n * @return 被加入集合\n */\n@SuppressWarnings({\"unchecked\",\"rawtypes\"}) public static <T>Collection<T> addAll(Collection<T> collection,Object value,Type elementType){\n  if (null == collection || null == value) {\n    return collection;\n  }\n  if (TypeUtil.isUnknow(elementType)) {\n    elementType=Object.class;\n  }\n  Iterator iter;\n  if (value instanceof Iterator) {\n    iter=(Iterator)value;\n  }\n else   if (value instanceof Iterable) {\n    iter=((Iterable)value).iterator();\n  }\n else   if (value instanceof Enumeration) {\n    iter=new EnumerationIter<>((Enumeration)value);\n  }\n else   if (ArrayUtil.isArray(value)) {\n    iter=new ArrayIter<>(value);\n  }\n else   if (value instanceof CharSequence) {\n    final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n    iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n  }\n else {\n    iter=CollUtil.newArrayList(value).iterator();\n  }\n  final ConverterRegistry convert=ConverterRegistry.getInstance();\n  while (iter.hasNext()) {\n    collection.add(convert.convert(elementType,iter.next()));\n  }\n  return collection;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 191,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 71,
                    "startLineNumber": 1776,
                    "startColumnNumber": 3,
                    "endLineNumber": 1776,
                    "endColumnNumber": 74
                },
                "nodeContext": "final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 15,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "java.lang.Object"
        },
        {
            "nodeContext": "value",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 5,
                "startLineNumber": 1780,
                "startColumnNumber": 32,
                "endLineNumber": 1780,
                "endColumnNumber": 37
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 28,
                        "startLineNumber": 1780,
                        "startColumnNumber": 10,
                        "endLineNumber": 1780,
                        "endColumnNumber": 38
                    },
                    "nodeContext": "CollUtil.newArrayList(value)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 39,
                        "startLineNumber": 1780,
                        "startColumnNumber": 10,
                        "endLineNumber": 1780,
                        "endColumnNumber": 49
                    },
                    "nodeContext": "CollUtil.newArrayList(value).iterator()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 46,
                        "startLineNumber": 1780,
                        "startColumnNumber": 3,
                        "endLineNumber": 1780,
                        "endColumnNumber": 49
                    },
                    "nodeContext": "iter=CollUtil.newArrayList(value).iterator()",
                    "nodeType": "Assignment",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 47,
                        "startLineNumber": 1780,
                        "startColumnNumber": 3,
                        "endLineNumber": 1780,
                        "endColumnNumber": 50
                    },
                    "nodeContext": "iter=CollUtil.newArrayList(value).iterator();\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 9,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 78,
                        "startLineNumber": 1778,
                        "startColumnNumber": 9,
                        "endLineNumber": 1781,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  iter=CollUtil.newArrayList(value).iterator();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 10,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 293,
                        "startLineNumber": 1774,
                        "startColumnNumber": 9,
                        "endLineNumber": 1781,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (value instanceof CharSequence) {\n  final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n  iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n}\n else {\n  iter=CollUtil.newArrayList(value).iterator();\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 43,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 370,
                        "startLineNumber": 1772,
                        "startColumnNumber": 9,
                        "endLineNumber": 1781,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (ArrayUtil.isArray(value)) {\n  iter=new ArrayIter<>(value);\n}\n else if (value instanceof CharSequence) {\n  final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n  iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n}\n else {\n  iter=CollUtil.newArrayList(value).iterator();\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 57,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 471,
                        "startLineNumber": 1770,
                        "startColumnNumber": 9,
                        "endLineNumber": 1781,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (value instanceof Enumeration) {\n  iter=new EnumerationIter<>((Enumeration)value);\n}\n else if (ArrayUtil.isArray(value)) {\n  iter=new ArrayIter<>(value);\n}\n else if (value instanceof CharSequence) {\n  final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n  iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n}\n else {\n  iter=CollUtil.newArrayList(value).iterator();\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 74,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 556,
                        "startLineNumber": 1768,
                        "startColumnNumber": 9,
                        "endLineNumber": 1781,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (value instanceof Iterable) {\n  iter=((Iterable)value).iterator();\n}\n else if (value instanceof Enumeration) {\n  iter=new EnumerationIter<>((Enumeration)value);\n}\n else if (ArrayUtil.isArray(value)) {\n  iter=new ArrayIter<>(value);\n}\n else if (value instanceof CharSequence) {\n  final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n  iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n}\n else {\n  iter=CollUtil.newArrayList(value).iterator();\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 90,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 628,
                        "startLineNumber": 1766,
                        "startColumnNumber": 2,
                        "endLineNumber": 1781,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (value instanceof Iterator) {\n  iter=(Iterator)value;\n}\n else if (value instanceof Iterable) {\n  iter=((Iterable)value).iterator();\n}\n else if (value instanceof Enumeration) {\n  iter=new EnumerationIter<>((Enumeration)value);\n}\n else if (ArrayUtil.isArray(value)) {\n  iter=new ArrayIter<>(value);\n}\n else if (value instanceof CharSequence) {\n  final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n  iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n}\n else {\n  iter=CollUtil.newArrayList(value).iterator();\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 103,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1034,
                        "startLineNumber": 1756,
                        "startColumnNumber": 98,
                        "endLineNumber": 1789,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "{\n  if (null == collection || null == value) {\n    return collection;\n  }\n  if (TypeUtil.isUnknow(elementType)) {\n    elementType=Object.class;\n  }\n  Iterator iter;\n  if (value instanceof Iterator) {\n    iter=(Iterator)value;\n  }\n else   if (value instanceof Iterable) {\n    iter=((Iterable)value).iterator();\n  }\n else   if (value instanceof Enumeration) {\n    iter=new EnumerationIter<>((Enumeration)value);\n  }\n else   if (ArrayUtil.isArray(value)) {\n    iter=new ArrayIter<>(value);\n  }\n else   if (value instanceof CharSequence) {\n    final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n    iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n  }\n else {\n    iter=CollUtil.newArrayList(value).iterator();\n  }\n  final ConverterRegistry convert=ConverterRegistry.getInstance();\n  while (iter.hasNext()) {\n    collection.add(convert.convert(elementType,iter.next()));\n  }\n  return collection;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 159,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1507,
                        "startLineNumber": 1744,
                        "startColumnNumber": 1,
                        "endLineNumber": 1789,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "/** \n * 将指定对象全部加入到集合中<br> 提供的对象如果为集合类型，会自动转换为目标元素类型<br> 如果为String，支持类似于[1,2,3,4] 或者 1,2,3,4 这种格式\n * @param < T >         元素类型\n * @param collection  被加入的集合\n * @param value       对象，可能为Iterator、Iterable、Enumeration、Array，或者与集合元素类型一致\n * @param elementType 元素类型，为空时，使用Object类型来接纳所有类型\n * @return 被加入集合\n */\n@SuppressWarnings({\"unchecked\",\"rawtypes\"}) public static <T>Collection<T> addAll(Collection<T> collection,Object value,Type elementType){\n  if (null == collection || null == value) {\n    return collection;\n  }\n  if (TypeUtil.isUnknow(elementType)) {\n    elementType=Object.class;\n  }\n  Iterator iter;\n  if (value instanceof Iterator) {\n    iter=(Iterator)value;\n  }\n else   if (value instanceof Iterable) {\n    iter=((Iterable)value).iterator();\n  }\n else   if (value instanceof Enumeration) {\n    iter=new EnumerationIter<>((Enumeration)value);\n  }\n else   if (ArrayUtil.isArray(value)) {\n    iter=new ArrayIter<>(value);\n  }\n else   if (value instanceof CharSequence) {\n    final String ArrayStr=StrUtil.unWrap((CharSequence)value,'[',']');\n    iter=StrUtil.splitTrim(ArrayStr,CharUtil.COMMA).iterator();\n  }\n else {\n    iter=CollUtil.newArrayList(value).iterator();\n  }\n  final ConverterRegistry convert=ConverterRegistry.getInstance();\n  while (iter.hasNext()) {\n    collection.add(convert.convert(elementType,iter.next()));\n  }\n  return collection;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 191,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 47,
                    "startLineNumber": 1780,
                    "startColumnNumber": 3,
                    "endLineNumber": 1780,
                    "endColumnNumber": 50
                },
                "nodeContext": "iter=CollUtil.newArrayList(value).iterator();\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 9,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "java.lang.Object"
        }
    ],
    "positionList": [
        {
            "charLength": 5,
            "startLineNumber": 1757,
            "startColumnNumber": 36,
            "endLineNumber": 1757,
            "endColumnNumber": 41
        },
        {
            "charLength": 5,
            "startLineNumber": 1766,
            "startColumnNumber": 6,
            "endLineNumber": 1766,
            "endColumnNumber": 11
        },
        {
            "charLength": 5,
            "startLineNumber": 1767,
            "startColumnNumber": 21,
            "endLineNumber": 1767,
            "endColumnNumber": 26
        },
        {
            "charLength": 5,
            "startLineNumber": 1768,
            "startColumnNumber": 13,
            "endLineNumber": 1768,
            "endColumnNumber": 18
        },
        {
            "charLength": 5,
            "startLineNumber": 1769,
            "startColumnNumber": 22,
            "endLineNumber": 1769,
            "endColumnNumber": 27
        },
        {
            "charLength": 5,
            "startLineNumber": 1770,
            "startColumnNumber": 13,
            "endLineNumber": 1770,
            "endColumnNumber": 18
        },
        {
            "charLength": 5,
            "startLineNumber": 1771,
            "startColumnNumber": 46,
            "endLineNumber": 1771,
            "endColumnNumber": 51
        },
        {
            "charLength": 5,
            "startLineNumber": 1772,
            "startColumnNumber": 31,
            "endLineNumber": 1772,
            "endColumnNumber": 36
        },
        {
            "charLength": 5,
            "startLineNumber": 1773,
            "startColumnNumber": 26,
            "endLineNumber": 1773,
            "endColumnNumber": 31
        },
        {
            "charLength": 5,
            "startLineNumber": 1774,
            "startColumnNumber": 13,
            "endLineNumber": 1774,
            "endColumnNumber": 18
        },
        {
            "charLength": 5,
            "startLineNumber": 1776,
            "startColumnNumber": 57,
            "endLineNumber": 1776,
            "endColumnNumber": 62
        },
        {
            "charLength": 5,
            "startLineNumber": 1780,
            "startColumnNumber": 32,
            "endLineNumber": 1780,
            "endColumnNumber": 37
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 1
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 1
        },
        {
            "firstKey": 1,
            "secondKey": 4,
            "layout": 1
        },
        {
            "firstKey": 1,
            "secondKey": 5,
            "layout": 1
        },
        {
            "firstKey": 1,
            "secondKey": 6,
            "layout": 1
        },
        {
            "firstKey": 1,
            "secondKey": 7,
            "layout": 1
        },
        {
            "firstKey": 1,
            "secondKey": 8,
            "layout": 1
        },
        {
            "firstKey": 1,
            "secondKey": 9,
            "layout": 1
        },
        {
            "firstKey": 1,
            "secondKey": 10,
            "layout": 1
        },
        {
            "firstKey": 1,
            "secondKey": 11,
            "layout": 1
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 4,
            "layout": 1
        },
        {
            "firstKey": 3,
            "secondKey": 5,
            "layout": 1
        },
        {
            "firstKey": 3,
            "secondKey": 6,
            "layout": 1
        },
        {
            "firstKey": 3,
            "secondKey": 7,
            "layout": 1
        },
        {
            "firstKey": 3,
            "secondKey": 8,
            "layout": 1
        },
        {
            "firstKey": 3,
            "secondKey": 9,
            "layout": 1
        },
        {
            "firstKey": 3,
            "secondKey": 10,
            "layout": 1
        },
        {
            "firstKey": 3,
            "secondKey": 11,
            "layout": 1
        },
        {
            "firstKey": 4,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 4,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 4,
            "secondKey": 2,
            "layout": 7
        },
        {
            "firstKey": 4,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 4,
            "secondKey": 5,
            "layout": 6
        },
        {
            "firstKey": 4,
            "secondKey": 6,
            "layout": 6
        },
        {
            "firstKey": 4,
            "secondKey": 7,
            "layout": 6
        },
        {
            "firstKey": 4,
            "secondKey": 8,
            "layout": 6
        },
        {
            "firstKey": 4,
            "secondKey": 9,
            "layout": 6
        },
        {
            "firstKey": 4,
            "secondKey": 10,
            "layout": 6
        },
        {
            "firstKey": 4,
            "secondKey": 11,
            "layout": 6
        },
        {
            "firstKey": 5,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 6,
            "layout": 1
        },
        {
            "firstKey": 5,
            "secondKey": 7,
            "layout": 1
        },
        {
            "firstKey": 5,
            "secondKey": 8,
            "layout": 1
        },
        {
            "firstKey": 5,
            "secondKey": 9,
            "layout": 1
        },
        {
            "firstKey": 5,
            "secondKey": 10,
            "layout": 1
        },
        {
            "firstKey": 5,
            "secondKey": 11,
            "layout": 1
        },
        {
            "firstKey": 6,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 6,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 6,
            "secondKey": 2,
            "layout": 7
        },
        {
            "firstKey": 6,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 6,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 6,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 8,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 9,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 10,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 11,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 7,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 7,
            "secondKey": 8,
            "layout": 1
        },
        {
            "firstKey": 7,
            "secondKey": 9,
            "layout": 1
        },
        {
            "firstKey": 7,
            "secondKey": 10,
            "layout": 1
        },
        {
            "firstKey": 7,
            "secondKey": 11,
            "layout": 1
        },
        {
            "firstKey": 8,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 8,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 8,
            "secondKey": 2,
            "layout": 7
        },
        {
            "firstKey": 8,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 9,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 9,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 9,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 9,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 9,
            "secondKey": 10,
            "layout": 1
        },
        {
            "firstKey": 9,
            "secondKey": 11,
            "layout": 1
        },
        {
            "firstKey": 10,
            "secondKey": 0,
            "layout": 10
        },
        {
            "firstKey": 10,
            "secondKey": 1,
            "layout": 9
        },
        {
            "firstKey": 10,
            "secondKey": 2,
            "layout": 9
        },
        {
            "firstKey": 10,
            "secondKey": 3,
            "layout": 8
        },
        {
            "firstKey": 10,
            "secondKey": 4,
            "layout": 8
        },
        {
            "firstKey": 10,
            "secondKey": 5,
            "layout": 7
        },
        {
            "firstKey": 10,
            "secondKey": 6,
            "layout": 7
        },
        {
            "firstKey": 10,
            "secondKey": 7,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 8,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 9,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 11,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 0,
            "layout": 10
        },
        {
            "firstKey": 11,
            "secondKey": 1,
            "layout": 9
        },
        {
            "firstKey": 11,
            "secondKey": 2,
            "layout": 9
        },
        {
            "firstKey": 11,
            "secondKey": 3,
            "layout": 8
        },
        {
            "firstKey": 11,
            "secondKey": 4,
            "layout": 8
        },
        {
            "firstKey": 11,
            "secondKey": 5,
            "layout": 7
        },
        {
            "firstKey": 11,
            "secondKey": 6,
            "layout": 7
        },
        {
            "firstKey": 11,
            "secondKey": 7,
            "layout": 6
        },
        {
            "firstKey": 11,
            "secondKey": 8,
            "layout": 6
        },
        {
            "firstKey": 11,
            "secondKey": 9,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 10,
            "layout": 5
        }
    ]
}