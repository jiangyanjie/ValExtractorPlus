{
    "id": 780,
    "expression": "indexNode.getDefinition()",
    "projectName": "jackrabbit-oak",
    "commitID": "58a0f096dee5f13a5591d924728f226bd2caa204",
    "filePath": "oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/LucenePropertyIndex.java",
    "occurrences": 4,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "indexNode.getDefinition()",
            "nodeType": "MethodInvocation",
            "nodePosition": {
                "charLength": 25,
                "startLineNumber": 408,
                "startColumnNumber": 47,
                "endLineNumber": 408,
                "endColumnNumber": 72
            },
            "astNodeNumber": 3,
            "astHeight": 2,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,expression]",
                    "nodePosition": {
                        "charLength": 45,
                        "startLineNumber": 408,
                        "startColumnNumber": 47,
                        "endLineNumber": 408,
                        "endColumnNumber": 92
                    },
                    "nodeContext": "indexNode.getDefinition().isFullTextEnabled()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 91,
                        "startLineNumber": 408,
                        "startColumnNumber": 47,
                        "endLineNumber": 408,
                        "endColumnNumber": 138
                    },
                    "nodeContext": "indexNode.getDefinition().isFullTextEnabled() ? FieldNames.FULLTEXT : FieldNames.SPELLCHECK",
                    "nodeType": "ConditionalExpression",
                    "astNodeNumber": 12,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 107,
                        "startLineNumber": 408,
                        "startColumnNumber": 31,
                        "endLineNumber": 408,
                        "endColumnNumber": 138
                    },
                    "nodeContext": "aclCheckField=indexNode.getDefinition().isFullTextEnabled() ? FieldNames.FULLTEXT : FieldNames.SPELLCHECK",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 14,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 115,
                        "startLineNumber": 408,
                        "startColumnNumber": 24,
                        "endLineNumber": 408,
                        "endColumnNumber": 139
                    },
                    "nodeContext": "String aclCheckField=indexNode.getDefinition().isFullTextEnabled() ? FieldNames.FULLTEXT : FieldNames.SPELLCHECK;\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 17,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1459,
                        "startLineNumber": 407,
                        "startColumnNumber": 115,
                        "endLineNumber": 429,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  String aclCheckField=indexNode.getDefinition().isFullTextEnabled() ? FieldNames.FULLTEXT : FieldNames.SPELLCHECK;\n  SpellcheckHelper.SpellcheckQuery spellcheckQuery=(SpellcheckHelper.SpellcheckQuery)luceneRequestFacade.getLuceneRequest();\n  SuggestWord[] suggestWords=SpellcheckHelper.getSpellcheck(spellcheckQuery);\n  QueryParser qp=new QueryParser(Version.LUCENE_47,aclCheckField,indexNode.getDefinition().getAnalyzer());\n  for (  SuggestWord suggestion : suggestWords) {\n    Query query=qp.createPhraseQuery(aclCheckField,suggestion.string);\n    TopDocs topDocs=searcher.search(query,100);\n    if (topDocs.totalHits > 0) {\n      for (      ScoreDoc doc : topDocs.scoreDocs) {\n        Document retrievedDoc=searcher.doc(doc.doc);\n        if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n          queue.add(new LuceneResultRow(suggestion.string));\n          break;\n        }\n      }\n    }\n  }\n  noDocs=true;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 143,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 3150,
                        "startLineNumber": 407,
                        "startColumnNumber": 27,
                        "endLineNumber": 454,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (luceneRequestFacade.getLuceneRequest() instanceof SpellcheckHelper.SpellcheckQuery) {\n  String aclCheckField=indexNode.getDefinition().isFullTextEnabled() ? FieldNames.FULLTEXT : FieldNames.SPELLCHECK;\n  SpellcheckHelper.SpellcheckQuery spellcheckQuery=(SpellcheckHelper.SpellcheckQuery)luceneRequestFacade.getLuceneRequest();\n  SuggestWord[] suggestWords=SpellcheckHelper.getSpellcheck(spellcheckQuery);\n  QueryParser qp=new QueryParser(Version.LUCENE_47,aclCheckField,indexNode.getDefinition().getAnalyzer());\n  for (  SuggestWord suggestion : suggestWords) {\n    Query query=qp.createPhraseQuery(aclCheckField,suggestion.string);\n    TopDocs topDocs=searcher.search(query,100);\n    if (topDocs.totalHits > 0) {\n      for (      ScoreDoc doc : topDocs.scoreDocs) {\n        Document retrievedDoc=searcher.doc(doc.doc);\n        if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n          queue.add(new LuceneResultRow(suggestion.string));\n          break;\n        }\n      }\n    }\n  }\n  noDocs=true;\n}\n else if (luceneRequestFacade.getLuceneRequest() instanceof SuggestHelper.SuggestQuery) {\n  SuggestHelper.SuggestQuery suggestQuery=(SuggestHelper.SuggestQuery)luceneRequestFacade.getLuceneRequest();\n  List<Lookup.LookupResult> lookupResults=SuggestHelper.getSuggestions(indexNode.getLookup(),suggestQuery);\n  QueryParser qp=new QueryParser(Version.LUCENE_47,FieldNames.SUGGEST,indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer());\n  for (  Lookup.LookupResult suggestion : lookupResults) {\n    Query query=qp.parse(\"\\\"\" + suggestion.key.toString() + \"\\\"\");\n    TopDocs topDocs=searcher.search(query,100);\n    if (topDocs.totalHits > 0) {\n      for (      ScoreDoc doc : topDocs.scoreDocs) {\n        Document retrievedDoc=searcher.doc(doc.doc);\n        if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n          queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n          break;\n        }\n      }\n    }\n  }\n  noDocs=true;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 315,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6075,
                        "startLineNumber": 353,
                        "startColumnNumber": 20,
                        "endLineNumber": 454,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (luceneRequestFacade.getLuceneRequest() instanceof Query) {\n  Query query=(Query)luceneRequestFacade.getLuceneRequest();\n  CustomScoreQuery customScoreQuery=getCustomScoreQuery(plan,query);\n  if (customScoreQuery != null) {\n    query=customScoreQuery;\n  }\n  checkForIndexVersionChange(searcher);\n  TopDocs docs;\n  long start=PERF_LOGGER.start();\n  while (true) {\n    if (lastDoc != null) {\n      LOG.debug(\"loading the next {} entries for query {}\",nextBatchSize,query);\n      if (sort == null) {\n        docs=searcher.searchAfter(lastDoc,query,nextBatchSize);\n      }\n else {\n        docs=searcher.searchAfter(lastDoc,query,nextBatchSize,sort);\n      }\n    }\n else {\n      LOG.debug(\"loading the first {} entries for query {}\",nextBatchSize,query);\n      if (sort == null) {\n        docs=searcher.search(query,nextBatchSize);\n      }\n else {\n        docs=searcher.search(query,nextBatchSize,sort);\n      }\n    }\n    PERF_LOGGER.end(start,-1,\"{} ...\",docs.scoreDocs.length);\n    nextBatchSize=(int)Math.min(nextBatchSize * 2L,100000);\n    boolean addExcerpt=filter.getQueryStatement() != null && filter.getQueryStatement().contains(QueryImpl.REP_EXCERPT);\n    for (    ScoreDoc doc : docs.scoreDocs) {\n      String excerpt=null;\n      if (addExcerpt) {\n        excerpt=getExcerpt(indexNode,searcher,query,doc);\n      }\n      LuceneResultRow row=convertToRow(doc,searcher,excerpt);\n      if (row != null) {\n        queue.add(row);\n      }\n      lastDocToRecord=doc;\n    }\n    if (queue.isEmpty() && docs.scoreDocs.length > 0) {\n      lastDoc=lastDocToRecord;\n    }\n else {\n      break;\n    }\n  }\n}\n else if (luceneRequestFacade.getLuceneRequest() instanceof SpellcheckHelper.SpellcheckQuery) {\n  String aclCheckField=indexNode.getDefinition().isFullTextEnabled() ? FieldNames.FULLTEXT : FieldNames.SPELLCHECK;\n  SpellcheckHelper.SpellcheckQuery spellcheckQuery=(SpellcheckHelper.SpellcheckQuery)luceneRequestFacade.getLuceneRequest();\n  SuggestWord[] suggestWords=SpellcheckHelper.getSpellcheck(spellcheckQuery);\n  QueryParser qp=new QueryParser(Version.LUCENE_47,aclCheckField,indexNode.getDefinition().getAnalyzer());\n  for (  SuggestWord suggestion : suggestWords) {\n    Query query=qp.createPhraseQuery(aclCheckField,suggestion.string);\n    TopDocs topDocs=searcher.search(query,100);\n    if (topDocs.totalHits > 0) {\n      for (      ScoreDoc doc : topDocs.scoreDocs) {\n        Document retrievedDoc=searcher.doc(doc.doc);\n        if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n          queue.add(new LuceneResultRow(suggestion.string));\n          break;\n        }\n      }\n    }\n  }\n  noDocs=true;\n}\n else if (luceneRequestFacade.getLuceneRequest() instanceof SuggestHelper.SuggestQuery) {\n  SuggestHelper.SuggestQuery suggestQuery=(SuggestHelper.SuggestQuery)luceneRequestFacade.getLuceneRequest();\n  List<Lookup.LookupResult> lookupResults=SuggestHelper.getSuggestions(indexNode.getLookup(),suggestQuery);\n  QueryParser qp=new QueryParser(Version.LUCENE_47,FieldNames.SUGGEST,indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer());\n  for (  Lookup.LookupResult suggestion : lookupResults) {\n    Query query=qp.parse(\"\\\"\" + suggestion.key.toString() + \"\\\"\");\n    TopDocs topDocs=searcher.search(query,100);\n    if (topDocs.totalHits > 0) {\n      for (      ScoreDoc doc : topDocs.scoreDocs) {\n        Document retrievedDoc=searcher.doc(doc.doc);\n        if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n          queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n          break;\n        }\n      }\n    }\n  }\n  noDocs=true;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 552,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 6298,
                        "startLineNumber": 350,
                        "startColumnNumber": 20,
                        "endLineNumber": 455,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  IndexSearcher searcher=indexNode.getSearcher();\n  LuceneRequestFacade luceneRequestFacade=getLuceneRequest(plan,searcher.getIndexReader());\n  if (luceneRequestFacade.getLuceneRequest() instanceof Query) {\n    Query query=(Query)luceneRequestFacade.getLuceneRequest();\n    CustomScoreQuery customScoreQuery=getCustomScoreQuery(plan,query);\n    if (customScoreQuery != null) {\n      query=customScoreQuery;\n    }\n    checkForIndexVersionChange(searcher);\n    TopDocs docs;\n    long start=PERF_LOGGER.start();\n    while (true) {\n      if (lastDoc != null) {\n        LOG.debug(\"loading the next {} entries for query {}\",nextBatchSize,query);\n        if (sort == null) {\n          docs=searcher.searchAfter(lastDoc,query,nextBatchSize);\n        }\n else {\n          docs=searcher.searchAfter(lastDoc,query,nextBatchSize,sort);\n        }\n      }\n else {\n        LOG.debug(\"loading the first {} entries for query {}\",nextBatchSize,query);\n        if (sort == null) {\n          docs=searcher.search(query,nextBatchSize);\n        }\n else {\n          docs=searcher.search(query,nextBatchSize,sort);\n        }\n      }\n      PERF_LOGGER.end(start,-1,\"{} ...\",docs.scoreDocs.length);\n      nextBatchSize=(int)Math.min(nextBatchSize * 2L,100000);\n      boolean addExcerpt=filter.getQueryStatement() != null && filter.getQueryStatement().contains(QueryImpl.REP_EXCERPT);\n      for (      ScoreDoc doc : docs.scoreDocs) {\n        String excerpt=null;\n        if (addExcerpt) {\n          excerpt=getExcerpt(indexNode,searcher,query,doc);\n        }\n        LuceneResultRow row=convertToRow(doc,searcher,excerpt);\n        if (row != null) {\n          queue.add(row);\n        }\n        lastDocToRecord=doc;\n      }\n      if (queue.isEmpty() && docs.scoreDocs.length > 0) {\n        lastDoc=lastDocToRecord;\n      }\n else {\n        break;\n      }\n    }\n  }\n else   if (luceneRequestFacade.getLuceneRequest() instanceof SpellcheckHelper.SpellcheckQuery) {\n    String aclCheckField=indexNode.getDefinition().isFullTextEnabled() ? FieldNames.FULLTEXT : FieldNames.SPELLCHECK;\n    SpellcheckHelper.SpellcheckQuery spellcheckQuery=(SpellcheckHelper.SpellcheckQuery)luceneRequestFacade.getLuceneRequest();\n    SuggestWord[] suggestWords=SpellcheckHelper.getSpellcheck(spellcheckQuery);\n    QueryParser qp=new QueryParser(Version.LUCENE_47,aclCheckField,indexNode.getDefinition().getAnalyzer());\n    for (    SuggestWord suggestion : suggestWords) {\n      Query query=qp.createPhraseQuery(aclCheckField,suggestion.string);\n      TopDocs topDocs=searcher.search(query,100);\n      if (topDocs.totalHits > 0) {\n        for (        ScoreDoc doc : topDocs.scoreDocs) {\n          Document retrievedDoc=searcher.doc(doc.doc);\n          if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n            queue.add(new LuceneResultRow(suggestion.string));\n            break;\n          }\n        }\n      }\n    }\n    noDocs=true;\n  }\n else   if (luceneRequestFacade.getLuceneRequest() instanceof SuggestHelper.SuggestQuery) {\n    SuggestHelper.SuggestQuery suggestQuery=(SuggestHelper.SuggestQuery)luceneRequestFacade.getLuceneRequest();\n    List<Lookup.LookupResult> lookupResults=SuggestHelper.getSuggestions(indexNode.getLookup(),suggestQuery);\n    QueryParser qp=new QueryParser(Version.LUCENE_47,FieldNames.SUGGEST,indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer());\n    for (    Lookup.LookupResult suggestion : lookupResults) {\n      Query query=qp.parse(\"\\\"\" + suggestion.key.toString() + \"\\\"\");\n      TopDocs topDocs=searcher.search(query,100);\n      if (topDocs.totalHits > 0) {\n        for (        ScoreDoc doc : topDocs.scoreDocs) {\n          Document retrievedDoc=searcher.doc(doc.doc);\n          if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n            queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n            break;\n          }\n        }\n      }\n    }\n    noDocs=true;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 572,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6494,
                        "startLineNumber": 350,
                        "startColumnNumber": 16,
                        "endLineNumber": 459,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "try {\n  IndexSearcher searcher=indexNode.getSearcher();\n  LuceneRequestFacade luceneRequestFacade=getLuceneRequest(plan,searcher.getIndexReader());\n  if (luceneRequestFacade.getLuceneRequest() instanceof Query) {\n    Query query=(Query)luceneRequestFacade.getLuceneRequest();\n    CustomScoreQuery customScoreQuery=getCustomScoreQuery(plan,query);\n    if (customScoreQuery != null) {\n      query=customScoreQuery;\n    }\n    checkForIndexVersionChange(searcher);\n    TopDocs docs;\n    long start=PERF_LOGGER.start();\n    while (true) {\n      if (lastDoc != null) {\n        LOG.debug(\"loading the next {} entries for query {}\",nextBatchSize,query);\n        if (sort == null) {\n          docs=searcher.searchAfter(lastDoc,query,nextBatchSize);\n        }\n else {\n          docs=searcher.searchAfter(lastDoc,query,nextBatchSize,sort);\n        }\n      }\n else {\n        LOG.debug(\"loading the first {} entries for query {}\",nextBatchSize,query);\n        if (sort == null) {\n          docs=searcher.search(query,nextBatchSize);\n        }\n else {\n          docs=searcher.search(query,nextBatchSize,sort);\n        }\n      }\n      PERF_LOGGER.end(start,-1,\"{} ...\",docs.scoreDocs.length);\n      nextBatchSize=(int)Math.min(nextBatchSize * 2L,100000);\n      boolean addExcerpt=filter.getQueryStatement() != null && filter.getQueryStatement().contains(QueryImpl.REP_EXCERPT);\n      for (      ScoreDoc doc : docs.scoreDocs) {\n        String excerpt=null;\n        if (addExcerpt) {\n          excerpt=getExcerpt(indexNode,searcher,query,doc);\n        }\n        LuceneResultRow row=convertToRow(doc,searcher,excerpt);\n        if (row != null) {\n          queue.add(row);\n        }\n        lastDocToRecord=doc;\n      }\n      if (queue.isEmpty() && docs.scoreDocs.length > 0) {\n        lastDoc=lastDocToRecord;\n      }\n else {\n        break;\n      }\n    }\n  }\n else   if (luceneRequestFacade.getLuceneRequest() instanceof SpellcheckHelper.SpellcheckQuery) {\n    String aclCheckField=indexNode.getDefinition().isFullTextEnabled() ? FieldNames.FULLTEXT : FieldNames.SPELLCHECK;\n    SpellcheckHelper.SpellcheckQuery spellcheckQuery=(SpellcheckHelper.SpellcheckQuery)luceneRequestFacade.getLuceneRequest();\n    SuggestWord[] suggestWords=SpellcheckHelper.getSpellcheck(spellcheckQuery);\n    QueryParser qp=new QueryParser(Version.LUCENE_47,aclCheckField,indexNode.getDefinition().getAnalyzer());\n    for (    SuggestWord suggestion : suggestWords) {\n      Query query=qp.createPhraseQuery(aclCheckField,suggestion.string);\n      TopDocs topDocs=searcher.search(query,100);\n      if (topDocs.totalHits > 0) {\n        for (        ScoreDoc doc : topDocs.scoreDocs) {\n          Document retrievedDoc=searcher.doc(doc.doc);\n          if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n            queue.add(new LuceneResultRow(suggestion.string));\n            break;\n          }\n        }\n      }\n    }\n    noDocs=true;\n  }\n else   if (luceneRequestFacade.getLuceneRequest() instanceof SuggestHelper.SuggestQuery) {\n    SuggestHelper.SuggestQuery suggestQuery=(SuggestHelper.SuggestQuery)luceneRequestFacade.getLuceneRequest();\n    List<Lookup.LookupResult> lookupResults=SuggestHelper.getSuggestions(indexNode.getLookup(),suggestQuery);\n    QueryParser qp=new QueryParser(Version.LUCENE_47,FieldNames.SUGGEST,indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer());\n    for (    Lookup.LookupResult suggestion : lookupResults) {\n      Query query=qp.parse(\"\\\"\" + suggestion.key.toString() + \"\\\"\");\n      TopDocs topDocs=searcher.search(query,100);\n      if (topDocs.totalHits > 0) {\n        for (        ScoreDoc doc : topDocs.scoreDocs) {\n          Document retrievedDoc=searcher.doc(doc.doc);\n          if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n            queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n            break;\n          }\n        }\n      }\n    }\n    noDocs=true;\n  }\n}\n catch (Exception e) {\n  LOG.warn(\"query via {} failed.\",LucenePropertyIndex.this,e);\n}\n finally {\n  indexNode.release();\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 592,
                    "astHeight": 20
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 6935,
                        "startLineNumber": 340,
                        "startColumnNumber": 39,
                        "endLineNumber": 466,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  if (noDocs) {\n    return false;\n  }\n  ScoreDoc lastDocToRecord=null;\n  final IndexNode indexNode=acquireIndexNode(plan);\n  checkState(indexNode != null);\n  try {\n    IndexSearcher searcher=indexNode.getSearcher();\n    LuceneRequestFacade luceneRequestFacade=getLuceneRequest(plan,searcher.getIndexReader());\n    if (luceneRequestFacade.getLuceneRequest() instanceof Query) {\n      Query query=(Query)luceneRequestFacade.getLuceneRequest();\n      CustomScoreQuery customScoreQuery=getCustomScoreQuery(plan,query);\n      if (customScoreQuery != null) {\n        query=customScoreQuery;\n      }\n      checkForIndexVersionChange(searcher);\n      TopDocs docs;\n      long start=PERF_LOGGER.start();\n      while (true) {\n        if (lastDoc != null) {\n          LOG.debug(\"loading the next {} entries for query {}\",nextBatchSize,query);\n          if (sort == null) {\n            docs=searcher.searchAfter(lastDoc,query,nextBatchSize);\n          }\n else {\n            docs=searcher.searchAfter(lastDoc,query,nextBatchSize,sort);\n          }\n        }\n else {\n          LOG.debug(\"loading the first {} entries for query {}\",nextBatchSize,query);\n          if (sort == null) {\n            docs=searcher.search(query,nextBatchSize);\n          }\n else {\n            docs=searcher.search(query,nextBatchSize,sort);\n          }\n        }\n        PERF_LOGGER.end(start,-1,\"{} ...\",docs.scoreDocs.length);\n        nextBatchSize=(int)Math.min(nextBatchSize * 2L,100000);\n        boolean addExcerpt=filter.getQueryStatement() != null && filter.getQueryStatement().contains(QueryImpl.REP_EXCERPT);\n        for (        ScoreDoc doc : docs.scoreDocs) {\n          String excerpt=null;\n          if (addExcerpt) {\n            excerpt=getExcerpt(indexNode,searcher,query,doc);\n          }\n          LuceneResultRow row=convertToRow(doc,searcher,excerpt);\n          if (row != null) {\n            queue.add(row);\n          }\n          lastDocToRecord=doc;\n        }\n        if (queue.isEmpty() && docs.scoreDocs.length > 0) {\n          lastDoc=lastDocToRecord;\n        }\n else {\n          break;\n        }\n      }\n    }\n else     if (luceneRequestFacade.getLuceneRequest() instanceof SpellcheckHelper.SpellcheckQuery) {\n      String aclCheckField=indexNode.getDefinition().isFullTextEnabled() ? FieldNames.FULLTEXT : FieldNames.SPELLCHECK;\n      SpellcheckHelper.SpellcheckQuery spellcheckQuery=(SpellcheckHelper.SpellcheckQuery)luceneRequestFacade.getLuceneRequest();\n      SuggestWord[] suggestWords=SpellcheckHelper.getSpellcheck(spellcheckQuery);\n      QueryParser qp=new QueryParser(Version.LUCENE_47,aclCheckField,indexNode.getDefinition().getAnalyzer());\n      for (      SuggestWord suggestion : suggestWords) {\n        Query query=qp.createPhraseQuery(aclCheckField,suggestion.string);\n        TopDocs topDocs=searcher.search(query,100);\n        if (topDocs.totalHits > 0) {\n          for (          ScoreDoc doc : topDocs.scoreDocs) {\n            Document retrievedDoc=searcher.doc(doc.doc);\n            if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n              queue.add(new LuceneResultRow(suggestion.string));\n              break;\n            }\n          }\n        }\n      }\n      noDocs=true;\n    }\n else     if (luceneRequestFacade.getLuceneRequest() instanceof SuggestHelper.SuggestQuery) {\n      SuggestHelper.SuggestQuery suggestQuery=(SuggestHelper.SuggestQuery)luceneRequestFacade.getLuceneRequest();\n      List<Lookup.LookupResult> lookupResults=SuggestHelper.getSuggestions(indexNode.getLookup(),suggestQuery);\n      QueryParser qp=new QueryParser(Version.LUCENE_47,FieldNames.SUGGEST,indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer());\n      for (      Lookup.LookupResult suggestion : lookupResults) {\n        Query query=qp.parse(\"\\\"\" + suggestion.key.toString() + \"\\\"\");\n        TopDocs topDocs=searcher.search(query,100);\n        if (topDocs.totalHits > 0) {\n          for (          ScoreDoc doc : topDocs.scoreDocs) {\n            Document retrievedDoc=searcher.doc(doc.doc);\n            if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n              queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n              break;\n            }\n          }\n        }\n      }\n      noDocs=true;\n    }\n  }\n catch (  Exception e) {\n    LOG.warn(\"query via {} failed.\",LucenePropertyIndex.this,e);\n  }\n finally {\n    indexNode.release();\n  }\n  if (lastDocToRecord != null) {\n    this.lastDoc=lastDocToRecord;\n  }\n  return !queue.isEmpty();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 635,
                    "astHeight": 21
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.AnonymousClassDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7101,
                        "startLineNumber": 336,
                        "startColumnNumber": 12,
                        "endLineNumber": 466,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "/** \n * Loads the lucene documents in batches\n * @return true if any document is loaded\n */\nprivate boolean loadDocs(){\n  if (noDocs) {\n    return false;\n  }\n  ScoreDoc lastDocToRecord=null;\n  final IndexNode indexNode=acquireIndexNode(plan);\n  checkState(indexNode != null);\n  try {\n    IndexSearcher searcher=indexNode.getSearcher();\n    LuceneRequestFacade luceneRequestFacade=getLuceneRequest(plan,searcher.getIndexReader());\n    if (luceneRequestFacade.getLuceneRequest() instanceof Query) {\n      Query query=(Query)luceneRequestFacade.getLuceneRequest();\n      CustomScoreQuery customScoreQuery=getCustomScoreQuery(plan,query);\n      if (customScoreQuery != null) {\n        query=customScoreQuery;\n      }\n      checkForIndexVersionChange(searcher);\n      TopDocs docs;\n      long start=PERF_LOGGER.start();\n      while (true) {\n        if (lastDoc != null) {\n          LOG.debug(\"loading the next {} entries for query {}\",nextBatchSize,query);\n          if (sort == null) {\n            docs=searcher.searchAfter(lastDoc,query,nextBatchSize);\n          }\n else {\n            docs=searcher.searchAfter(lastDoc,query,nextBatchSize,sort);\n          }\n        }\n else {\n          LOG.debug(\"loading the first {} entries for query {}\",nextBatchSize,query);\n          if (sort == null) {\n            docs=searcher.search(query,nextBatchSize);\n          }\n else {\n            docs=searcher.search(query,nextBatchSize,sort);\n          }\n        }\n        PERF_LOGGER.end(start,-1,\"{} ...\",docs.scoreDocs.length);\n        nextBatchSize=(int)Math.min(nextBatchSize * 2L,100000);\n        boolean addExcerpt=filter.getQueryStatement() != null && filter.getQueryStatement().contains(QueryImpl.REP_EXCERPT);\n        for (        ScoreDoc doc : docs.scoreDocs) {\n          String excerpt=null;\n          if (addExcerpt) {\n            excerpt=getExcerpt(indexNode,searcher,query,doc);\n          }\n          LuceneResultRow row=convertToRow(doc,searcher,excerpt);\n          if (row != null) {\n            queue.add(row);\n          }\n          lastDocToRecord=doc;\n        }\n        if (queue.isEmpty() && docs.scoreDocs.length > 0) {\n          lastDoc=lastDocToRecord;\n        }\n else {\n          break;\n        }\n      }\n    }\n else     if (luceneRequestFacade.getLuceneRequest() instanceof SpellcheckHelper.SpellcheckQuery) {\n      String aclCheckField=indexNode.getDefinition().isFullTextEnabled() ? FieldNames.FULLTEXT : FieldNames.SPELLCHECK;\n      SpellcheckHelper.SpellcheckQuery spellcheckQuery=(SpellcheckHelper.SpellcheckQuery)luceneRequestFacade.getLuceneRequest();\n      SuggestWord[] suggestWords=SpellcheckHelper.getSpellcheck(spellcheckQuery);\n      QueryParser qp=new QueryParser(Version.LUCENE_47,aclCheckField,indexNode.getDefinition().getAnalyzer());\n      for (      SuggestWord suggestion : suggestWords) {\n        Query query=qp.createPhraseQuery(aclCheckField,suggestion.string);\n        TopDocs topDocs=searcher.search(query,100);\n        if (topDocs.totalHits > 0) {\n          for (          ScoreDoc doc : topDocs.scoreDocs) {\n            Document retrievedDoc=searcher.doc(doc.doc);\n            if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n              queue.add(new LuceneResultRow(suggestion.string));\n              break;\n            }\n          }\n        }\n      }\n      noDocs=true;\n    }\n else     if (luceneRequestFacade.getLuceneRequest() instanceof SuggestHelper.SuggestQuery) {\n      SuggestHelper.SuggestQuery suggestQuery=(SuggestHelper.SuggestQuery)luceneRequestFacade.getLuceneRequest();\n      List<Lookup.LookupResult> lookupResults=SuggestHelper.getSuggestions(indexNode.getLookup(),suggestQuery);\n      QueryParser qp=new QueryParser(Version.LUCENE_47,FieldNames.SUGGEST,indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer());\n      for (      Lookup.LookupResult suggestion : lookupResults) {\n        Query query=qp.parse(\"\\\"\" + suggestion.key.toString() + \"\\\"\");\n        TopDocs topDocs=searcher.search(query,100);\n        if (topDocs.totalHits > 0) {\n          for (          ScoreDoc doc : topDocs.scoreDocs) {\n            Document retrievedDoc=searcher.doc(doc.doc);\n            if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n              queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n              break;\n            }\n          }\n        }\n      }\n      noDocs=true;\n    }\n  }\n catch (  Exception e) {\n    LOG.warn(\"query via {} failed.\",LucenePropertyIndex.this,e);\n  }\n finally {\n    indexNode.release();\n  }\n  if (lastDocToRecord != null) {\n    this.lastDoc=lastDocToRecord;\n  }\n  return !queue.isEmpty();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 640,
                    "astHeight": 22
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 115,
                    "startLineNumber": 408,
                    "startColumnNumber": 24,
                    "endLineNumber": 408,
                    "endColumnNumber": 139
                },
                "nodeContext": "String aclCheckField=indexNode.getDefinition().isFullTextEnabled() ? FieldNames.FULLTEXT : FieldNames.SPELLCHECK;\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 17,
                "astHeight": 6
            },
            "tokenLength": 2,
            "type": "org.apache.jackrabbit.oak.plugins.index.lucene.IndexDefinition"
        },
        {
            "nodeContext": "indexNode.getDefinition()",
            "nodeType": "MethodInvocation",
            "nodePosition": {
                "charLength": 25,
                "startLineNumber": 413,
                "startColumnNumber": 91,
                "endLineNumber": 413,
                "endColumnNumber": 116
            },
            "astNodeNumber": 3,
            "astHeight": 2,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
                    "nodePosition": {
                        "charLength": 39,
                        "startLineNumber": 413,
                        "startColumnNumber": 91,
                        "endLineNumber": 413,
                        "endColumnNumber": 130
                    },
                    "nodeContext": "indexNode.getDefinition().getAnalyzer()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 90,
                        "startLineNumber": 413,
                        "startColumnNumber": 41,
                        "endLineNumber": 413,
                        "endColumnNumber": 131
                    },
                    "nodeContext": "new QueryParser(Version.LUCENE_47,aclCheckField,indexNode.getDefinition().getAnalyzer())",
                    "nodeType": "ClassInstanceCreation",
                    "astNodeNumber": 12,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 95,
                        "startLineNumber": 413,
                        "startColumnNumber": 36,
                        "endLineNumber": 413,
                        "endColumnNumber": 131
                    },
                    "nodeContext": "qp=new QueryParser(Version.LUCENE_47,aclCheckField,indexNode.getDefinition().getAnalyzer())",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 14,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 108,
                        "startLineNumber": 413,
                        "startColumnNumber": 24,
                        "endLineNumber": 413,
                        "endColumnNumber": 132
                    },
                    "nodeContext": "QueryParser qp=new QueryParser(Version.LUCENE_47,aclCheckField,indexNode.getDefinition().getAnalyzer());\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 17,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1459,
                        "startLineNumber": 407,
                        "startColumnNumber": 115,
                        "endLineNumber": 429,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  String aclCheckField=indexNode.getDefinition().isFullTextEnabled() ? FieldNames.FULLTEXT : FieldNames.SPELLCHECK;\n  SpellcheckHelper.SpellcheckQuery spellcheckQuery=(SpellcheckHelper.SpellcheckQuery)luceneRequestFacade.getLuceneRequest();\n  SuggestWord[] suggestWords=SpellcheckHelper.getSpellcheck(spellcheckQuery);\n  QueryParser qp=new QueryParser(Version.LUCENE_47,aclCheckField,indexNode.getDefinition().getAnalyzer());\n  for (  SuggestWord suggestion : suggestWords) {\n    Query query=qp.createPhraseQuery(aclCheckField,suggestion.string);\n    TopDocs topDocs=searcher.search(query,100);\n    if (topDocs.totalHits > 0) {\n      for (      ScoreDoc doc : topDocs.scoreDocs) {\n        Document retrievedDoc=searcher.doc(doc.doc);\n        if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n          queue.add(new LuceneResultRow(suggestion.string));\n          break;\n        }\n      }\n    }\n  }\n  noDocs=true;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 143,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 3150,
                        "startLineNumber": 407,
                        "startColumnNumber": 27,
                        "endLineNumber": 454,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (luceneRequestFacade.getLuceneRequest() instanceof SpellcheckHelper.SpellcheckQuery) {\n  String aclCheckField=indexNode.getDefinition().isFullTextEnabled() ? FieldNames.FULLTEXT : FieldNames.SPELLCHECK;\n  SpellcheckHelper.SpellcheckQuery spellcheckQuery=(SpellcheckHelper.SpellcheckQuery)luceneRequestFacade.getLuceneRequest();\n  SuggestWord[] suggestWords=SpellcheckHelper.getSpellcheck(spellcheckQuery);\n  QueryParser qp=new QueryParser(Version.LUCENE_47,aclCheckField,indexNode.getDefinition().getAnalyzer());\n  for (  SuggestWord suggestion : suggestWords) {\n    Query query=qp.createPhraseQuery(aclCheckField,suggestion.string);\n    TopDocs topDocs=searcher.search(query,100);\n    if (topDocs.totalHits > 0) {\n      for (      ScoreDoc doc : topDocs.scoreDocs) {\n        Document retrievedDoc=searcher.doc(doc.doc);\n        if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n          queue.add(new LuceneResultRow(suggestion.string));\n          break;\n        }\n      }\n    }\n  }\n  noDocs=true;\n}\n else if (luceneRequestFacade.getLuceneRequest() instanceof SuggestHelper.SuggestQuery) {\n  SuggestHelper.SuggestQuery suggestQuery=(SuggestHelper.SuggestQuery)luceneRequestFacade.getLuceneRequest();\n  List<Lookup.LookupResult> lookupResults=SuggestHelper.getSuggestions(indexNode.getLookup(),suggestQuery);\n  QueryParser qp=new QueryParser(Version.LUCENE_47,FieldNames.SUGGEST,indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer());\n  for (  Lookup.LookupResult suggestion : lookupResults) {\n    Query query=qp.parse(\"\\\"\" + suggestion.key.toString() + \"\\\"\");\n    TopDocs topDocs=searcher.search(query,100);\n    if (topDocs.totalHits > 0) {\n      for (      ScoreDoc doc : topDocs.scoreDocs) {\n        Document retrievedDoc=searcher.doc(doc.doc);\n        if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n          queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n          break;\n        }\n      }\n    }\n  }\n  noDocs=true;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 315,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6075,
                        "startLineNumber": 353,
                        "startColumnNumber": 20,
                        "endLineNumber": 454,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (luceneRequestFacade.getLuceneRequest() instanceof Query) {\n  Query query=(Query)luceneRequestFacade.getLuceneRequest();\n  CustomScoreQuery customScoreQuery=getCustomScoreQuery(plan,query);\n  if (customScoreQuery != null) {\n    query=customScoreQuery;\n  }\n  checkForIndexVersionChange(searcher);\n  TopDocs docs;\n  long start=PERF_LOGGER.start();\n  while (true) {\n    if (lastDoc != null) {\n      LOG.debug(\"loading the next {} entries for query {}\",nextBatchSize,query);\n      if (sort == null) {\n        docs=searcher.searchAfter(lastDoc,query,nextBatchSize);\n      }\n else {\n        docs=searcher.searchAfter(lastDoc,query,nextBatchSize,sort);\n      }\n    }\n else {\n      LOG.debug(\"loading the first {} entries for query {}\",nextBatchSize,query);\n      if (sort == null) {\n        docs=searcher.search(query,nextBatchSize);\n      }\n else {\n        docs=searcher.search(query,nextBatchSize,sort);\n      }\n    }\n    PERF_LOGGER.end(start,-1,\"{} ...\",docs.scoreDocs.length);\n    nextBatchSize=(int)Math.min(nextBatchSize * 2L,100000);\n    boolean addExcerpt=filter.getQueryStatement() != null && filter.getQueryStatement().contains(QueryImpl.REP_EXCERPT);\n    for (    ScoreDoc doc : docs.scoreDocs) {\n      String excerpt=null;\n      if (addExcerpt) {\n        excerpt=getExcerpt(indexNode,searcher,query,doc);\n      }\n      LuceneResultRow row=convertToRow(doc,searcher,excerpt);\n      if (row != null) {\n        queue.add(row);\n      }\n      lastDocToRecord=doc;\n    }\n    if (queue.isEmpty() && docs.scoreDocs.length > 0) {\n      lastDoc=lastDocToRecord;\n    }\n else {\n      break;\n    }\n  }\n}\n else if (luceneRequestFacade.getLuceneRequest() instanceof SpellcheckHelper.SpellcheckQuery) {\n  String aclCheckField=indexNode.getDefinition().isFullTextEnabled() ? FieldNames.FULLTEXT : FieldNames.SPELLCHECK;\n  SpellcheckHelper.SpellcheckQuery spellcheckQuery=(SpellcheckHelper.SpellcheckQuery)luceneRequestFacade.getLuceneRequest();\n  SuggestWord[] suggestWords=SpellcheckHelper.getSpellcheck(spellcheckQuery);\n  QueryParser qp=new QueryParser(Version.LUCENE_47,aclCheckField,indexNode.getDefinition().getAnalyzer());\n  for (  SuggestWord suggestion : suggestWords) {\n    Query query=qp.createPhraseQuery(aclCheckField,suggestion.string);\n    TopDocs topDocs=searcher.search(query,100);\n    if (topDocs.totalHits > 0) {\n      for (      ScoreDoc doc : topDocs.scoreDocs) {\n        Document retrievedDoc=searcher.doc(doc.doc);\n        if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n          queue.add(new LuceneResultRow(suggestion.string));\n          break;\n        }\n      }\n    }\n  }\n  noDocs=true;\n}\n else if (luceneRequestFacade.getLuceneRequest() instanceof SuggestHelper.SuggestQuery) {\n  SuggestHelper.SuggestQuery suggestQuery=(SuggestHelper.SuggestQuery)luceneRequestFacade.getLuceneRequest();\n  List<Lookup.LookupResult> lookupResults=SuggestHelper.getSuggestions(indexNode.getLookup(),suggestQuery);\n  QueryParser qp=new QueryParser(Version.LUCENE_47,FieldNames.SUGGEST,indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer());\n  for (  Lookup.LookupResult suggestion : lookupResults) {\n    Query query=qp.parse(\"\\\"\" + suggestion.key.toString() + \"\\\"\");\n    TopDocs topDocs=searcher.search(query,100);\n    if (topDocs.totalHits > 0) {\n      for (      ScoreDoc doc : topDocs.scoreDocs) {\n        Document retrievedDoc=searcher.doc(doc.doc);\n        if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n          queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n          break;\n        }\n      }\n    }\n  }\n  noDocs=true;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 552,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 6298,
                        "startLineNumber": 350,
                        "startColumnNumber": 20,
                        "endLineNumber": 455,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  IndexSearcher searcher=indexNode.getSearcher();\n  LuceneRequestFacade luceneRequestFacade=getLuceneRequest(plan,searcher.getIndexReader());\n  if (luceneRequestFacade.getLuceneRequest() instanceof Query) {\n    Query query=(Query)luceneRequestFacade.getLuceneRequest();\n    CustomScoreQuery customScoreQuery=getCustomScoreQuery(plan,query);\n    if (customScoreQuery != null) {\n      query=customScoreQuery;\n    }\n    checkForIndexVersionChange(searcher);\n    TopDocs docs;\n    long start=PERF_LOGGER.start();\n    while (true) {\n      if (lastDoc != null) {\n        LOG.debug(\"loading the next {} entries for query {}\",nextBatchSize,query);\n        if (sort == null) {\n          docs=searcher.searchAfter(lastDoc,query,nextBatchSize);\n        }\n else {\n          docs=searcher.searchAfter(lastDoc,query,nextBatchSize,sort);\n        }\n      }\n else {\n        LOG.debug(\"loading the first {} entries for query {}\",nextBatchSize,query);\n        if (sort == null) {\n          docs=searcher.search(query,nextBatchSize);\n        }\n else {\n          docs=searcher.search(query,nextBatchSize,sort);\n        }\n      }\n      PERF_LOGGER.end(start,-1,\"{} ...\",docs.scoreDocs.length);\n      nextBatchSize=(int)Math.min(nextBatchSize * 2L,100000);\n      boolean addExcerpt=filter.getQueryStatement() != null && filter.getQueryStatement().contains(QueryImpl.REP_EXCERPT);\n      for (      ScoreDoc doc : docs.scoreDocs) {\n        String excerpt=null;\n        if (addExcerpt) {\n          excerpt=getExcerpt(indexNode,searcher,query,doc);\n        }\n        LuceneResultRow row=convertToRow(doc,searcher,excerpt);\n        if (row != null) {\n          queue.add(row);\n        }\n        lastDocToRecord=doc;\n      }\n      if (queue.isEmpty() && docs.scoreDocs.length > 0) {\n        lastDoc=lastDocToRecord;\n      }\n else {\n        break;\n      }\n    }\n  }\n else   if (luceneRequestFacade.getLuceneRequest() instanceof SpellcheckHelper.SpellcheckQuery) {\n    String aclCheckField=indexNode.getDefinition().isFullTextEnabled() ? FieldNames.FULLTEXT : FieldNames.SPELLCHECK;\n    SpellcheckHelper.SpellcheckQuery spellcheckQuery=(SpellcheckHelper.SpellcheckQuery)luceneRequestFacade.getLuceneRequest();\n    SuggestWord[] suggestWords=SpellcheckHelper.getSpellcheck(spellcheckQuery);\n    QueryParser qp=new QueryParser(Version.LUCENE_47,aclCheckField,indexNode.getDefinition().getAnalyzer());\n    for (    SuggestWord suggestion : suggestWords) {\n      Query query=qp.createPhraseQuery(aclCheckField,suggestion.string);\n      TopDocs topDocs=searcher.search(query,100);\n      if (topDocs.totalHits > 0) {\n        for (        ScoreDoc doc : topDocs.scoreDocs) {\n          Document retrievedDoc=searcher.doc(doc.doc);\n          if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n            queue.add(new LuceneResultRow(suggestion.string));\n            break;\n          }\n        }\n      }\n    }\n    noDocs=true;\n  }\n else   if (luceneRequestFacade.getLuceneRequest() instanceof SuggestHelper.SuggestQuery) {\n    SuggestHelper.SuggestQuery suggestQuery=(SuggestHelper.SuggestQuery)luceneRequestFacade.getLuceneRequest();\n    List<Lookup.LookupResult> lookupResults=SuggestHelper.getSuggestions(indexNode.getLookup(),suggestQuery);\n    QueryParser qp=new QueryParser(Version.LUCENE_47,FieldNames.SUGGEST,indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer());\n    for (    Lookup.LookupResult suggestion : lookupResults) {\n      Query query=qp.parse(\"\\\"\" + suggestion.key.toString() + \"\\\"\");\n      TopDocs topDocs=searcher.search(query,100);\n      if (topDocs.totalHits > 0) {\n        for (        ScoreDoc doc : topDocs.scoreDocs) {\n          Document retrievedDoc=searcher.doc(doc.doc);\n          if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n            queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n            break;\n          }\n        }\n      }\n    }\n    noDocs=true;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 572,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6494,
                        "startLineNumber": 350,
                        "startColumnNumber": 16,
                        "endLineNumber": 459,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "try {\n  IndexSearcher searcher=indexNode.getSearcher();\n  LuceneRequestFacade luceneRequestFacade=getLuceneRequest(plan,searcher.getIndexReader());\n  if (luceneRequestFacade.getLuceneRequest() instanceof Query) {\n    Query query=(Query)luceneRequestFacade.getLuceneRequest();\n    CustomScoreQuery customScoreQuery=getCustomScoreQuery(plan,query);\n    if (customScoreQuery != null) {\n      query=customScoreQuery;\n    }\n    checkForIndexVersionChange(searcher);\n    TopDocs docs;\n    long start=PERF_LOGGER.start();\n    while (true) {\n      if (lastDoc != null) {\n        LOG.debug(\"loading the next {} entries for query {}\",nextBatchSize,query);\n        if (sort == null) {\n          docs=searcher.searchAfter(lastDoc,query,nextBatchSize);\n        }\n else {\n          docs=searcher.searchAfter(lastDoc,query,nextBatchSize,sort);\n        }\n      }\n else {\n        LOG.debug(\"loading the first {} entries for query {}\",nextBatchSize,query);\n        if (sort == null) {\n          docs=searcher.search(query,nextBatchSize);\n        }\n else {\n          docs=searcher.search(query,nextBatchSize,sort);\n        }\n      }\n      PERF_LOGGER.end(start,-1,\"{} ...\",docs.scoreDocs.length);\n      nextBatchSize=(int)Math.min(nextBatchSize * 2L,100000);\n      boolean addExcerpt=filter.getQueryStatement() != null && filter.getQueryStatement().contains(QueryImpl.REP_EXCERPT);\n      for (      ScoreDoc doc : docs.scoreDocs) {\n        String excerpt=null;\n        if (addExcerpt) {\n          excerpt=getExcerpt(indexNode,searcher,query,doc);\n        }\n        LuceneResultRow row=convertToRow(doc,searcher,excerpt);\n        if (row != null) {\n          queue.add(row);\n        }\n        lastDocToRecord=doc;\n      }\n      if (queue.isEmpty() && docs.scoreDocs.length > 0) {\n        lastDoc=lastDocToRecord;\n      }\n else {\n        break;\n      }\n    }\n  }\n else   if (luceneRequestFacade.getLuceneRequest() instanceof SpellcheckHelper.SpellcheckQuery) {\n    String aclCheckField=indexNode.getDefinition().isFullTextEnabled() ? FieldNames.FULLTEXT : FieldNames.SPELLCHECK;\n    SpellcheckHelper.SpellcheckQuery spellcheckQuery=(SpellcheckHelper.SpellcheckQuery)luceneRequestFacade.getLuceneRequest();\n    SuggestWord[] suggestWords=SpellcheckHelper.getSpellcheck(spellcheckQuery);\n    QueryParser qp=new QueryParser(Version.LUCENE_47,aclCheckField,indexNode.getDefinition().getAnalyzer());\n    for (    SuggestWord suggestion : suggestWords) {\n      Query query=qp.createPhraseQuery(aclCheckField,suggestion.string);\n      TopDocs topDocs=searcher.search(query,100);\n      if (topDocs.totalHits > 0) {\n        for (        ScoreDoc doc : topDocs.scoreDocs) {\n          Document retrievedDoc=searcher.doc(doc.doc);\n          if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n            queue.add(new LuceneResultRow(suggestion.string));\n            break;\n          }\n        }\n      }\n    }\n    noDocs=true;\n  }\n else   if (luceneRequestFacade.getLuceneRequest() instanceof SuggestHelper.SuggestQuery) {\n    SuggestHelper.SuggestQuery suggestQuery=(SuggestHelper.SuggestQuery)luceneRequestFacade.getLuceneRequest();\n    List<Lookup.LookupResult> lookupResults=SuggestHelper.getSuggestions(indexNode.getLookup(),suggestQuery);\n    QueryParser qp=new QueryParser(Version.LUCENE_47,FieldNames.SUGGEST,indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer());\n    for (    Lookup.LookupResult suggestion : lookupResults) {\n      Query query=qp.parse(\"\\\"\" + suggestion.key.toString() + \"\\\"\");\n      TopDocs topDocs=searcher.search(query,100);\n      if (topDocs.totalHits > 0) {\n        for (        ScoreDoc doc : topDocs.scoreDocs) {\n          Document retrievedDoc=searcher.doc(doc.doc);\n          if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n            queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n            break;\n          }\n        }\n      }\n    }\n    noDocs=true;\n  }\n}\n catch (Exception e) {\n  LOG.warn(\"query via {} failed.\",LucenePropertyIndex.this,e);\n}\n finally {\n  indexNode.release();\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 592,
                    "astHeight": 20
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 6935,
                        "startLineNumber": 340,
                        "startColumnNumber": 39,
                        "endLineNumber": 466,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  if (noDocs) {\n    return false;\n  }\n  ScoreDoc lastDocToRecord=null;\n  final IndexNode indexNode=acquireIndexNode(plan);\n  checkState(indexNode != null);\n  try {\n    IndexSearcher searcher=indexNode.getSearcher();\n    LuceneRequestFacade luceneRequestFacade=getLuceneRequest(plan,searcher.getIndexReader());\n    if (luceneRequestFacade.getLuceneRequest() instanceof Query) {\n      Query query=(Query)luceneRequestFacade.getLuceneRequest();\n      CustomScoreQuery customScoreQuery=getCustomScoreQuery(plan,query);\n      if (customScoreQuery != null) {\n        query=customScoreQuery;\n      }\n      checkForIndexVersionChange(searcher);\n      TopDocs docs;\n      long start=PERF_LOGGER.start();\n      while (true) {\n        if (lastDoc != null) {\n          LOG.debug(\"loading the next {} entries for query {}\",nextBatchSize,query);\n          if (sort == null) {\n            docs=searcher.searchAfter(lastDoc,query,nextBatchSize);\n          }\n else {\n            docs=searcher.searchAfter(lastDoc,query,nextBatchSize,sort);\n          }\n        }\n else {\n          LOG.debug(\"loading the first {} entries for query {}\",nextBatchSize,query);\n          if (sort == null) {\n            docs=searcher.search(query,nextBatchSize);\n          }\n else {\n            docs=searcher.search(query,nextBatchSize,sort);\n          }\n        }\n        PERF_LOGGER.end(start,-1,\"{} ...\",docs.scoreDocs.length);\n        nextBatchSize=(int)Math.min(nextBatchSize * 2L,100000);\n        boolean addExcerpt=filter.getQueryStatement() != null && filter.getQueryStatement().contains(QueryImpl.REP_EXCERPT);\n        for (        ScoreDoc doc : docs.scoreDocs) {\n          String excerpt=null;\n          if (addExcerpt) {\n            excerpt=getExcerpt(indexNode,searcher,query,doc);\n          }\n          LuceneResultRow row=convertToRow(doc,searcher,excerpt);\n          if (row != null) {\n            queue.add(row);\n          }\n          lastDocToRecord=doc;\n        }\n        if (queue.isEmpty() && docs.scoreDocs.length > 0) {\n          lastDoc=lastDocToRecord;\n        }\n else {\n          break;\n        }\n      }\n    }\n else     if (luceneRequestFacade.getLuceneRequest() instanceof SpellcheckHelper.SpellcheckQuery) {\n      String aclCheckField=indexNode.getDefinition().isFullTextEnabled() ? FieldNames.FULLTEXT : FieldNames.SPELLCHECK;\n      SpellcheckHelper.SpellcheckQuery spellcheckQuery=(SpellcheckHelper.SpellcheckQuery)luceneRequestFacade.getLuceneRequest();\n      SuggestWord[] suggestWords=SpellcheckHelper.getSpellcheck(spellcheckQuery);\n      QueryParser qp=new QueryParser(Version.LUCENE_47,aclCheckField,indexNode.getDefinition().getAnalyzer());\n      for (      SuggestWord suggestion : suggestWords) {\n        Query query=qp.createPhraseQuery(aclCheckField,suggestion.string);\n        TopDocs topDocs=searcher.search(query,100);\n        if (topDocs.totalHits > 0) {\n          for (          ScoreDoc doc : topDocs.scoreDocs) {\n            Document retrievedDoc=searcher.doc(doc.doc);\n            if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n              queue.add(new LuceneResultRow(suggestion.string));\n              break;\n            }\n          }\n        }\n      }\n      noDocs=true;\n    }\n else     if (luceneRequestFacade.getLuceneRequest() instanceof SuggestHelper.SuggestQuery) {\n      SuggestHelper.SuggestQuery suggestQuery=(SuggestHelper.SuggestQuery)luceneRequestFacade.getLuceneRequest();\n      List<Lookup.LookupResult> lookupResults=SuggestHelper.getSuggestions(indexNode.getLookup(),suggestQuery);\n      QueryParser qp=new QueryParser(Version.LUCENE_47,FieldNames.SUGGEST,indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer());\n      for (      Lookup.LookupResult suggestion : lookupResults) {\n        Query query=qp.parse(\"\\\"\" + suggestion.key.toString() + \"\\\"\");\n        TopDocs topDocs=searcher.search(query,100);\n        if (topDocs.totalHits > 0) {\n          for (          ScoreDoc doc : topDocs.scoreDocs) {\n            Document retrievedDoc=searcher.doc(doc.doc);\n            if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n              queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n              break;\n            }\n          }\n        }\n      }\n      noDocs=true;\n    }\n  }\n catch (  Exception e) {\n    LOG.warn(\"query via {} failed.\",LucenePropertyIndex.this,e);\n  }\n finally {\n    indexNode.release();\n  }\n  if (lastDocToRecord != null) {\n    this.lastDoc=lastDocToRecord;\n  }\n  return !queue.isEmpty();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 635,
                    "astHeight": 21
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.AnonymousClassDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7101,
                        "startLineNumber": 336,
                        "startColumnNumber": 12,
                        "endLineNumber": 466,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "/** \n * Loads the lucene documents in batches\n * @return true if any document is loaded\n */\nprivate boolean loadDocs(){\n  if (noDocs) {\n    return false;\n  }\n  ScoreDoc lastDocToRecord=null;\n  final IndexNode indexNode=acquireIndexNode(plan);\n  checkState(indexNode != null);\n  try {\n    IndexSearcher searcher=indexNode.getSearcher();\n    LuceneRequestFacade luceneRequestFacade=getLuceneRequest(plan,searcher.getIndexReader());\n    if (luceneRequestFacade.getLuceneRequest() instanceof Query) {\n      Query query=(Query)luceneRequestFacade.getLuceneRequest();\n      CustomScoreQuery customScoreQuery=getCustomScoreQuery(plan,query);\n      if (customScoreQuery != null) {\n        query=customScoreQuery;\n      }\n      checkForIndexVersionChange(searcher);\n      TopDocs docs;\n      long start=PERF_LOGGER.start();\n      while (true) {\n        if (lastDoc != null) {\n          LOG.debug(\"loading the next {} entries for query {}\",nextBatchSize,query);\n          if (sort == null) {\n            docs=searcher.searchAfter(lastDoc,query,nextBatchSize);\n          }\n else {\n            docs=searcher.searchAfter(lastDoc,query,nextBatchSize,sort);\n          }\n        }\n else {\n          LOG.debug(\"loading the first {} entries for query {}\",nextBatchSize,query);\n          if (sort == null) {\n            docs=searcher.search(query,nextBatchSize);\n          }\n else {\n            docs=searcher.search(query,nextBatchSize,sort);\n          }\n        }\n        PERF_LOGGER.end(start,-1,\"{} ...\",docs.scoreDocs.length);\n        nextBatchSize=(int)Math.min(nextBatchSize * 2L,100000);\n        boolean addExcerpt=filter.getQueryStatement() != null && filter.getQueryStatement().contains(QueryImpl.REP_EXCERPT);\n        for (        ScoreDoc doc : docs.scoreDocs) {\n          String excerpt=null;\n          if (addExcerpt) {\n            excerpt=getExcerpt(indexNode,searcher,query,doc);\n          }\n          LuceneResultRow row=convertToRow(doc,searcher,excerpt);\n          if (row != null) {\n            queue.add(row);\n          }\n          lastDocToRecord=doc;\n        }\n        if (queue.isEmpty() && docs.scoreDocs.length > 0) {\n          lastDoc=lastDocToRecord;\n        }\n else {\n          break;\n        }\n      }\n    }\n else     if (luceneRequestFacade.getLuceneRequest() instanceof SpellcheckHelper.SpellcheckQuery) {\n      String aclCheckField=indexNode.getDefinition().isFullTextEnabled() ? FieldNames.FULLTEXT : FieldNames.SPELLCHECK;\n      SpellcheckHelper.SpellcheckQuery spellcheckQuery=(SpellcheckHelper.SpellcheckQuery)luceneRequestFacade.getLuceneRequest();\n      SuggestWord[] suggestWords=SpellcheckHelper.getSpellcheck(spellcheckQuery);\n      QueryParser qp=new QueryParser(Version.LUCENE_47,aclCheckField,indexNode.getDefinition().getAnalyzer());\n      for (      SuggestWord suggestion : suggestWords) {\n        Query query=qp.createPhraseQuery(aclCheckField,suggestion.string);\n        TopDocs topDocs=searcher.search(query,100);\n        if (topDocs.totalHits > 0) {\n          for (          ScoreDoc doc : topDocs.scoreDocs) {\n            Document retrievedDoc=searcher.doc(doc.doc);\n            if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n              queue.add(new LuceneResultRow(suggestion.string));\n              break;\n            }\n          }\n        }\n      }\n      noDocs=true;\n    }\n else     if (luceneRequestFacade.getLuceneRequest() instanceof SuggestHelper.SuggestQuery) {\n      SuggestHelper.SuggestQuery suggestQuery=(SuggestHelper.SuggestQuery)luceneRequestFacade.getLuceneRequest();\n      List<Lookup.LookupResult> lookupResults=SuggestHelper.getSuggestions(indexNode.getLookup(),suggestQuery);\n      QueryParser qp=new QueryParser(Version.LUCENE_47,FieldNames.SUGGEST,indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer());\n      for (      Lookup.LookupResult suggestion : lookupResults) {\n        Query query=qp.parse(\"\\\"\" + suggestion.key.toString() + \"\\\"\");\n        TopDocs topDocs=searcher.search(query,100);\n        if (topDocs.totalHits > 0) {\n          for (          ScoreDoc doc : topDocs.scoreDocs) {\n            Document retrievedDoc=searcher.doc(doc.doc);\n            if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n              queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n              break;\n            }\n          }\n        }\n      }\n      noDocs=true;\n    }\n  }\n catch (  Exception e) {\n    LOG.warn(\"query via {} failed.\",LucenePropertyIndex.this,e);\n  }\n finally {\n    indexNode.release();\n  }\n  if (lastDocToRecord != null) {\n    this.lastDoc=lastDocToRecord;\n  }\n  return !queue.isEmpty();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 640,
                    "astHeight": 22
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 108,
                    "startLineNumber": 413,
                    "startColumnNumber": 24,
                    "endLineNumber": 413,
                    "endColumnNumber": 132
                },
                "nodeContext": "QueryParser qp=new QueryParser(Version.LUCENE_47,aclCheckField,indexNode.getDefinition().getAnalyzer());\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 17,
                "astHeight": 6
            },
            "tokenLength": 2,
            "type": "org.apache.jackrabbit.oak.plugins.index.lucene.IndexDefinition"
        },
        {
            "nodeContext": "indexNode.getDefinition()",
            "nodeType": "MethodInvocation",
            "nodePosition": {
                "charLength": 25,
                "startLineNumber": 435,
                "startColumnNumber": 32,
                "endLineNumber": 435,
                "endColumnNumber": 57
            },
            "astNodeNumber": 3,
            "astHeight": 2,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,expression]",
                    "nodePosition": {
                        "charLength": 45,
                        "startLineNumber": 435,
                        "startColumnNumber": 32,
                        "endLineNumber": 435,
                        "endColumnNumber": 77
                    },
                    "nodeContext": "indexNode.getDefinition().isSuggestAnalyzed()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
                    "nodePosition": {
                        "charLength": 149,
                        "startLineNumber": 435,
                        "startColumnNumber": 32,
                        "endLineNumber": 436,
                        "endColumnNumber": 59
                    },
                    "nodeContext": "indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer()",
                    "nodeType": "ConditionalExpression",
                    "astNodeNumber": 14,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 237,
                        "startLineNumber": 434,
                        "startColumnNumber": 42,
                        "endLineNumber": 436,
                        "endColumnNumber": 60
                    },
                    "nodeContext": "new QueryParser(Version.LUCENE_47,FieldNames.SUGGEST,indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer())",
                    "nodeType": "ClassInstanceCreation",
                    "astNodeNumber": 23,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 243,
                        "startLineNumber": 434,
                        "startColumnNumber": 36,
                        "endLineNumber": 436,
                        "endColumnNumber": 60
                    },
                    "nodeContext": "qp=new QueryParser(Version.LUCENE_47,FieldNames.SUGGEST,indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer())",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 25,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 256,
                        "startLineNumber": 434,
                        "startColumnNumber": 24,
                        "endLineNumber": 436,
                        "endColumnNumber": 61
                    },
                    "nodeContext": "QueryParser qp=new QueryParser(Version.LUCENE_47,FieldNames.SUGGEST,indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer());\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 28,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1515,
                        "startLineNumber": 429,
                        "startColumnNumber": 109,
                        "endLineNumber": 454,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  SuggestHelper.SuggestQuery suggestQuery=(SuggestHelper.SuggestQuery)luceneRequestFacade.getLuceneRequest();\n  List<Lookup.LookupResult> lookupResults=SuggestHelper.getSuggestions(indexNode.getLookup(),suggestQuery);\n  QueryParser qp=new QueryParser(Version.LUCENE_47,FieldNames.SUGGEST,indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer());\n  for (  Lookup.LookupResult suggestion : lookupResults) {\n    Query query=qp.parse(\"\\\"\" + suggestion.key.toString() + \"\\\"\");\n    TopDocs topDocs=searcher.search(query,100);\n    if (topDocs.totalHits > 0) {\n      for (      ScoreDoc doc : topDocs.scoreDocs) {\n        Document retrievedDoc=searcher.doc(doc.doc);\n        if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n          queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n          break;\n        }\n      }\n    }\n  }\n  noDocs=true;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 154,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1597,
                        "startLineNumber": 429,
                        "startColumnNumber": 27,
                        "endLineNumber": 454,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (luceneRequestFacade.getLuceneRequest() instanceof SuggestHelper.SuggestQuery) {\n  SuggestHelper.SuggestQuery suggestQuery=(SuggestHelper.SuggestQuery)luceneRequestFacade.getLuceneRequest();\n  List<Lookup.LookupResult> lookupResults=SuggestHelper.getSuggestions(indexNode.getLookup(),suggestQuery);\n  QueryParser qp=new QueryParser(Version.LUCENE_47,FieldNames.SUGGEST,indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer());\n  for (  Lookup.LookupResult suggestion : lookupResults) {\n    Query query=qp.parse(\"\\\"\" + suggestion.key.toString() + \"\\\"\");\n    TopDocs topDocs=searcher.search(query,100);\n    if (topDocs.totalHits > 0) {\n      for (      ScoreDoc doc : topDocs.scoreDocs) {\n        Document retrievedDoc=searcher.doc(doc.doc);\n        if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n          queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n          break;\n        }\n      }\n    }\n  }\n  noDocs=true;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 163,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 3150,
                        "startLineNumber": 407,
                        "startColumnNumber": 27,
                        "endLineNumber": 454,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (luceneRequestFacade.getLuceneRequest() instanceof SpellcheckHelper.SpellcheckQuery) {\n  String aclCheckField=indexNode.getDefinition().isFullTextEnabled() ? FieldNames.FULLTEXT : FieldNames.SPELLCHECK;\n  SpellcheckHelper.SpellcheckQuery spellcheckQuery=(SpellcheckHelper.SpellcheckQuery)luceneRequestFacade.getLuceneRequest();\n  SuggestWord[] suggestWords=SpellcheckHelper.getSpellcheck(spellcheckQuery);\n  QueryParser qp=new QueryParser(Version.LUCENE_47,aclCheckField,indexNode.getDefinition().getAnalyzer());\n  for (  SuggestWord suggestion : suggestWords) {\n    Query query=qp.createPhraseQuery(aclCheckField,suggestion.string);\n    TopDocs topDocs=searcher.search(query,100);\n    if (topDocs.totalHits > 0) {\n      for (      ScoreDoc doc : topDocs.scoreDocs) {\n        Document retrievedDoc=searcher.doc(doc.doc);\n        if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n          queue.add(new LuceneResultRow(suggestion.string));\n          break;\n        }\n      }\n    }\n  }\n  noDocs=true;\n}\n else if (luceneRequestFacade.getLuceneRequest() instanceof SuggestHelper.SuggestQuery) {\n  SuggestHelper.SuggestQuery suggestQuery=(SuggestHelper.SuggestQuery)luceneRequestFacade.getLuceneRequest();\n  List<Lookup.LookupResult> lookupResults=SuggestHelper.getSuggestions(indexNode.getLookup(),suggestQuery);\n  QueryParser qp=new QueryParser(Version.LUCENE_47,FieldNames.SUGGEST,indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer());\n  for (  Lookup.LookupResult suggestion : lookupResults) {\n    Query query=qp.parse(\"\\\"\" + suggestion.key.toString() + \"\\\"\");\n    TopDocs topDocs=searcher.search(query,100);\n    if (topDocs.totalHits > 0) {\n      for (      ScoreDoc doc : topDocs.scoreDocs) {\n        Document retrievedDoc=searcher.doc(doc.doc);\n        if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n          queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n          break;\n        }\n      }\n    }\n  }\n  noDocs=true;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 315,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6075,
                        "startLineNumber": 353,
                        "startColumnNumber": 20,
                        "endLineNumber": 454,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (luceneRequestFacade.getLuceneRequest() instanceof Query) {\n  Query query=(Query)luceneRequestFacade.getLuceneRequest();\n  CustomScoreQuery customScoreQuery=getCustomScoreQuery(plan,query);\n  if (customScoreQuery != null) {\n    query=customScoreQuery;\n  }\n  checkForIndexVersionChange(searcher);\n  TopDocs docs;\n  long start=PERF_LOGGER.start();\n  while (true) {\n    if (lastDoc != null) {\n      LOG.debug(\"loading the next {} entries for query {}\",nextBatchSize,query);\n      if (sort == null) {\n        docs=searcher.searchAfter(lastDoc,query,nextBatchSize);\n      }\n else {\n        docs=searcher.searchAfter(lastDoc,query,nextBatchSize,sort);\n      }\n    }\n else {\n      LOG.debug(\"loading the first {} entries for query {}\",nextBatchSize,query);\n      if (sort == null) {\n        docs=searcher.search(query,nextBatchSize);\n      }\n else {\n        docs=searcher.search(query,nextBatchSize,sort);\n      }\n    }\n    PERF_LOGGER.end(start,-1,\"{} ...\",docs.scoreDocs.length);\n    nextBatchSize=(int)Math.min(nextBatchSize * 2L,100000);\n    boolean addExcerpt=filter.getQueryStatement() != null && filter.getQueryStatement().contains(QueryImpl.REP_EXCERPT);\n    for (    ScoreDoc doc : docs.scoreDocs) {\n      String excerpt=null;\n      if (addExcerpt) {\n        excerpt=getExcerpt(indexNode,searcher,query,doc);\n      }\n      LuceneResultRow row=convertToRow(doc,searcher,excerpt);\n      if (row != null) {\n        queue.add(row);\n      }\n      lastDocToRecord=doc;\n    }\n    if (queue.isEmpty() && docs.scoreDocs.length > 0) {\n      lastDoc=lastDocToRecord;\n    }\n else {\n      break;\n    }\n  }\n}\n else if (luceneRequestFacade.getLuceneRequest() instanceof SpellcheckHelper.SpellcheckQuery) {\n  String aclCheckField=indexNode.getDefinition().isFullTextEnabled() ? FieldNames.FULLTEXT : FieldNames.SPELLCHECK;\n  SpellcheckHelper.SpellcheckQuery spellcheckQuery=(SpellcheckHelper.SpellcheckQuery)luceneRequestFacade.getLuceneRequest();\n  SuggestWord[] suggestWords=SpellcheckHelper.getSpellcheck(spellcheckQuery);\n  QueryParser qp=new QueryParser(Version.LUCENE_47,aclCheckField,indexNode.getDefinition().getAnalyzer());\n  for (  SuggestWord suggestion : suggestWords) {\n    Query query=qp.createPhraseQuery(aclCheckField,suggestion.string);\n    TopDocs topDocs=searcher.search(query,100);\n    if (topDocs.totalHits > 0) {\n      for (      ScoreDoc doc : topDocs.scoreDocs) {\n        Document retrievedDoc=searcher.doc(doc.doc);\n        if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n          queue.add(new LuceneResultRow(suggestion.string));\n          break;\n        }\n      }\n    }\n  }\n  noDocs=true;\n}\n else if (luceneRequestFacade.getLuceneRequest() instanceof SuggestHelper.SuggestQuery) {\n  SuggestHelper.SuggestQuery suggestQuery=(SuggestHelper.SuggestQuery)luceneRequestFacade.getLuceneRequest();\n  List<Lookup.LookupResult> lookupResults=SuggestHelper.getSuggestions(indexNode.getLookup(),suggestQuery);\n  QueryParser qp=new QueryParser(Version.LUCENE_47,FieldNames.SUGGEST,indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer());\n  for (  Lookup.LookupResult suggestion : lookupResults) {\n    Query query=qp.parse(\"\\\"\" + suggestion.key.toString() + \"\\\"\");\n    TopDocs topDocs=searcher.search(query,100);\n    if (topDocs.totalHits > 0) {\n      for (      ScoreDoc doc : topDocs.scoreDocs) {\n        Document retrievedDoc=searcher.doc(doc.doc);\n        if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n          queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n          break;\n        }\n      }\n    }\n  }\n  noDocs=true;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 552,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 6298,
                        "startLineNumber": 350,
                        "startColumnNumber": 20,
                        "endLineNumber": 455,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  IndexSearcher searcher=indexNode.getSearcher();\n  LuceneRequestFacade luceneRequestFacade=getLuceneRequest(plan,searcher.getIndexReader());\n  if (luceneRequestFacade.getLuceneRequest() instanceof Query) {\n    Query query=(Query)luceneRequestFacade.getLuceneRequest();\n    CustomScoreQuery customScoreQuery=getCustomScoreQuery(plan,query);\n    if (customScoreQuery != null) {\n      query=customScoreQuery;\n    }\n    checkForIndexVersionChange(searcher);\n    TopDocs docs;\n    long start=PERF_LOGGER.start();\n    while (true) {\n      if (lastDoc != null) {\n        LOG.debug(\"loading the next {} entries for query {}\",nextBatchSize,query);\n        if (sort == null) {\n          docs=searcher.searchAfter(lastDoc,query,nextBatchSize);\n        }\n else {\n          docs=searcher.searchAfter(lastDoc,query,nextBatchSize,sort);\n        }\n      }\n else {\n        LOG.debug(\"loading the first {} entries for query {}\",nextBatchSize,query);\n        if (sort == null) {\n          docs=searcher.search(query,nextBatchSize);\n        }\n else {\n          docs=searcher.search(query,nextBatchSize,sort);\n        }\n      }\n      PERF_LOGGER.end(start,-1,\"{} ...\",docs.scoreDocs.length);\n      nextBatchSize=(int)Math.min(nextBatchSize * 2L,100000);\n      boolean addExcerpt=filter.getQueryStatement() != null && filter.getQueryStatement().contains(QueryImpl.REP_EXCERPT);\n      for (      ScoreDoc doc : docs.scoreDocs) {\n        String excerpt=null;\n        if (addExcerpt) {\n          excerpt=getExcerpt(indexNode,searcher,query,doc);\n        }\n        LuceneResultRow row=convertToRow(doc,searcher,excerpt);\n        if (row != null) {\n          queue.add(row);\n        }\n        lastDocToRecord=doc;\n      }\n      if (queue.isEmpty() && docs.scoreDocs.length > 0) {\n        lastDoc=lastDocToRecord;\n      }\n else {\n        break;\n      }\n    }\n  }\n else   if (luceneRequestFacade.getLuceneRequest() instanceof SpellcheckHelper.SpellcheckQuery) {\n    String aclCheckField=indexNode.getDefinition().isFullTextEnabled() ? FieldNames.FULLTEXT : FieldNames.SPELLCHECK;\n    SpellcheckHelper.SpellcheckQuery spellcheckQuery=(SpellcheckHelper.SpellcheckQuery)luceneRequestFacade.getLuceneRequest();\n    SuggestWord[] suggestWords=SpellcheckHelper.getSpellcheck(spellcheckQuery);\n    QueryParser qp=new QueryParser(Version.LUCENE_47,aclCheckField,indexNode.getDefinition().getAnalyzer());\n    for (    SuggestWord suggestion : suggestWords) {\n      Query query=qp.createPhraseQuery(aclCheckField,suggestion.string);\n      TopDocs topDocs=searcher.search(query,100);\n      if (topDocs.totalHits > 0) {\n        for (        ScoreDoc doc : topDocs.scoreDocs) {\n          Document retrievedDoc=searcher.doc(doc.doc);\n          if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n            queue.add(new LuceneResultRow(suggestion.string));\n            break;\n          }\n        }\n      }\n    }\n    noDocs=true;\n  }\n else   if (luceneRequestFacade.getLuceneRequest() instanceof SuggestHelper.SuggestQuery) {\n    SuggestHelper.SuggestQuery suggestQuery=(SuggestHelper.SuggestQuery)luceneRequestFacade.getLuceneRequest();\n    List<Lookup.LookupResult> lookupResults=SuggestHelper.getSuggestions(indexNode.getLookup(),suggestQuery);\n    QueryParser qp=new QueryParser(Version.LUCENE_47,FieldNames.SUGGEST,indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer());\n    for (    Lookup.LookupResult suggestion : lookupResults) {\n      Query query=qp.parse(\"\\\"\" + suggestion.key.toString() + \"\\\"\");\n      TopDocs topDocs=searcher.search(query,100);\n      if (topDocs.totalHits > 0) {\n        for (        ScoreDoc doc : topDocs.scoreDocs) {\n          Document retrievedDoc=searcher.doc(doc.doc);\n          if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n            queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n            break;\n          }\n        }\n      }\n    }\n    noDocs=true;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 572,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6494,
                        "startLineNumber": 350,
                        "startColumnNumber": 16,
                        "endLineNumber": 459,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "try {\n  IndexSearcher searcher=indexNode.getSearcher();\n  LuceneRequestFacade luceneRequestFacade=getLuceneRequest(plan,searcher.getIndexReader());\n  if (luceneRequestFacade.getLuceneRequest() instanceof Query) {\n    Query query=(Query)luceneRequestFacade.getLuceneRequest();\n    CustomScoreQuery customScoreQuery=getCustomScoreQuery(plan,query);\n    if (customScoreQuery != null) {\n      query=customScoreQuery;\n    }\n    checkForIndexVersionChange(searcher);\n    TopDocs docs;\n    long start=PERF_LOGGER.start();\n    while (true) {\n      if (lastDoc != null) {\n        LOG.debug(\"loading the next {} entries for query {}\",nextBatchSize,query);\n        if (sort == null) {\n          docs=searcher.searchAfter(lastDoc,query,nextBatchSize);\n        }\n else {\n          docs=searcher.searchAfter(lastDoc,query,nextBatchSize,sort);\n        }\n      }\n else {\n        LOG.debug(\"loading the first {} entries for query {}\",nextBatchSize,query);\n        if (sort == null) {\n          docs=searcher.search(query,nextBatchSize);\n        }\n else {\n          docs=searcher.search(query,nextBatchSize,sort);\n        }\n      }\n      PERF_LOGGER.end(start,-1,\"{} ...\",docs.scoreDocs.length);\n      nextBatchSize=(int)Math.min(nextBatchSize * 2L,100000);\n      boolean addExcerpt=filter.getQueryStatement() != null && filter.getQueryStatement().contains(QueryImpl.REP_EXCERPT);\n      for (      ScoreDoc doc : docs.scoreDocs) {\n        String excerpt=null;\n        if (addExcerpt) {\n          excerpt=getExcerpt(indexNode,searcher,query,doc);\n        }\n        LuceneResultRow row=convertToRow(doc,searcher,excerpt);\n        if (row != null) {\n          queue.add(row);\n        }\n        lastDocToRecord=doc;\n      }\n      if (queue.isEmpty() && docs.scoreDocs.length > 0) {\n        lastDoc=lastDocToRecord;\n      }\n else {\n        break;\n      }\n    }\n  }\n else   if (luceneRequestFacade.getLuceneRequest() instanceof SpellcheckHelper.SpellcheckQuery) {\n    String aclCheckField=indexNode.getDefinition().isFullTextEnabled() ? FieldNames.FULLTEXT : FieldNames.SPELLCHECK;\n    SpellcheckHelper.SpellcheckQuery spellcheckQuery=(SpellcheckHelper.SpellcheckQuery)luceneRequestFacade.getLuceneRequest();\n    SuggestWord[] suggestWords=SpellcheckHelper.getSpellcheck(spellcheckQuery);\n    QueryParser qp=new QueryParser(Version.LUCENE_47,aclCheckField,indexNode.getDefinition().getAnalyzer());\n    for (    SuggestWord suggestion : suggestWords) {\n      Query query=qp.createPhraseQuery(aclCheckField,suggestion.string);\n      TopDocs topDocs=searcher.search(query,100);\n      if (topDocs.totalHits > 0) {\n        for (        ScoreDoc doc : topDocs.scoreDocs) {\n          Document retrievedDoc=searcher.doc(doc.doc);\n          if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n            queue.add(new LuceneResultRow(suggestion.string));\n            break;\n          }\n        }\n      }\n    }\n    noDocs=true;\n  }\n else   if (luceneRequestFacade.getLuceneRequest() instanceof SuggestHelper.SuggestQuery) {\n    SuggestHelper.SuggestQuery suggestQuery=(SuggestHelper.SuggestQuery)luceneRequestFacade.getLuceneRequest();\n    List<Lookup.LookupResult> lookupResults=SuggestHelper.getSuggestions(indexNode.getLookup(),suggestQuery);\n    QueryParser qp=new QueryParser(Version.LUCENE_47,FieldNames.SUGGEST,indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer());\n    for (    Lookup.LookupResult suggestion : lookupResults) {\n      Query query=qp.parse(\"\\\"\" + suggestion.key.toString() + \"\\\"\");\n      TopDocs topDocs=searcher.search(query,100);\n      if (topDocs.totalHits > 0) {\n        for (        ScoreDoc doc : topDocs.scoreDocs) {\n          Document retrievedDoc=searcher.doc(doc.doc);\n          if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n            queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n            break;\n          }\n        }\n      }\n    }\n    noDocs=true;\n  }\n}\n catch (Exception e) {\n  LOG.warn(\"query via {} failed.\",LucenePropertyIndex.this,e);\n}\n finally {\n  indexNode.release();\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 592,
                    "astHeight": 20
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 6935,
                        "startLineNumber": 340,
                        "startColumnNumber": 39,
                        "endLineNumber": 466,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  if (noDocs) {\n    return false;\n  }\n  ScoreDoc lastDocToRecord=null;\n  final IndexNode indexNode=acquireIndexNode(plan);\n  checkState(indexNode != null);\n  try {\n    IndexSearcher searcher=indexNode.getSearcher();\n    LuceneRequestFacade luceneRequestFacade=getLuceneRequest(plan,searcher.getIndexReader());\n    if (luceneRequestFacade.getLuceneRequest() instanceof Query) {\n      Query query=(Query)luceneRequestFacade.getLuceneRequest();\n      CustomScoreQuery customScoreQuery=getCustomScoreQuery(plan,query);\n      if (customScoreQuery != null) {\n        query=customScoreQuery;\n      }\n      checkForIndexVersionChange(searcher);\n      TopDocs docs;\n      long start=PERF_LOGGER.start();\n      while (true) {\n        if (lastDoc != null) {\n          LOG.debug(\"loading the next {} entries for query {}\",nextBatchSize,query);\n          if (sort == null) {\n            docs=searcher.searchAfter(lastDoc,query,nextBatchSize);\n          }\n else {\n            docs=searcher.searchAfter(lastDoc,query,nextBatchSize,sort);\n          }\n        }\n else {\n          LOG.debug(\"loading the first {} entries for query {}\",nextBatchSize,query);\n          if (sort == null) {\n            docs=searcher.search(query,nextBatchSize);\n          }\n else {\n            docs=searcher.search(query,nextBatchSize,sort);\n          }\n        }\n        PERF_LOGGER.end(start,-1,\"{} ...\",docs.scoreDocs.length);\n        nextBatchSize=(int)Math.min(nextBatchSize * 2L,100000);\n        boolean addExcerpt=filter.getQueryStatement() != null && filter.getQueryStatement().contains(QueryImpl.REP_EXCERPT);\n        for (        ScoreDoc doc : docs.scoreDocs) {\n          String excerpt=null;\n          if (addExcerpt) {\n            excerpt=getExcerpt(indexNode,searcher,query,doc);\n          }\n          LuceneResultRow row=convertToRow(doc,searcher,excerpt);\n          if (row != null) {\n            queue.add(row);\n          }\n          lastDocToRecord=doc;\n        }\n        if (queue.isEmpty() && docs.scoreDocs.length > 0) {\n          lastDoc=lastDocToRecord;\n        }\n else {\n          break;\n        }\n      }\n    }\n else     if (luceneRequestFacade.getLuceneRequest() instanceof SpellcheckHelper.SpellcheckQuery) {\n      String aclCheckField=indexNode.getDefinition().isFullTextEnabled() ? FieldNames.FULLTEXT : FieldNames.SPELLCHECK;\n      SpellcheckHelper.SpellcheckQuery spellcheckQuery=(SpellcheckHelper.SpellcheckQuery)luceneRequestFacade.getLuceneRequest();\n      SuggestWord[] suggestWords=SpellcheckHelper.getSpellcheck(spellcheckQuery);\n      QueryParser qp=new QueryParser(Version.LUCENE_47,aclCheckField,indexNode.getDefinition().getAnalyzer());\n      for (      SuggestWord suggestion : suggestWords) {\n        Query query=qp.createPhraseQuery(aclCheckField,suggestion.string);\n        TopDocs topDocs=searcher.search(query,100);\n        if (topDocs.totalHits > 0) {\n          for (          ScoreDoc doc : topDocs.scoreDocs) {\n            Document retrievedDoc=searcher.doc(doc.doc);\n            if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n              queue.add(new LuceneResultRow(suggestion.string));\n              break;\n            }\n          }\n        }\n      }\n      noDocs=true;\n    }\n else     if (luceneRequestFacade.getLuceneRequest() instanceof SuggestHelper.SuggestQuery) {\n      SuggestHelper.SuggestQuery suggestQuery=(SuggestHelper.SuggestQuery)luceneRequestFacade.getLuceneRequest();\n      List<Lookup.LookupResult> lookupResults=SuggestHelper.getSuggestions(indexNode.getLookup(),suggestQuery);\n      QueryParser qp=new QueryParser(Version.LUCENE_47,FieldNames.SUGGEST,indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer());\n      for (      Lookup.LookupResult suggestion : lookupResults) {\n        Query query=qp.parse(\"\\\"\" + suggestion.key.toString() + \"\\\"\");\n        TopDocs topDocs=searcher.search(query,100);\n        if (topDocs.totalHits > 0) {\n          for (          ScoreDoc doc : topDocs.scoreDocs) {\n            Document retrievedDoc=searcher.doc(doc.doc);\n            if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n              queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n              break;\n            }\n          }\n        }\n      }\n      noDocs=true;\n    }\n  }\n catch (  Exception e) {\n    LOG.warn(\"query via {} failed.\",LucenePropertyIndex.this,e);\n  }\n finally {\n    indexNode.release();\n  }\n  if (lastDocToRecord != null) {\n    this.lastDoc=lastDocToRecord;\n  }\n  return !queue.isEmpty();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 635,
                    "astHeight": 21
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.AnonymousClassDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7101,
                        "startLineNumber": 336,
                        "startColumnNumber": 12,
                        "endLineNumber": 466,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "/** \n * Loads the lucene documents in batches\n * @return true if any document is loaded\n */\nprivate boolean loadDocs(){\n  if (noDocs) {\n    return false;\n  }\n  ScoreDoc lastDocToRecord=null;\n  final IndexNode indexNode=acquireIndexNode(plan);\n  checkState(indexNode != null);\n  try {\n    IndexSearcher searcher=indexNode.getSearcher();\n    LuceneRequestFacade luceneRequestFacade=getLuceneRequest(plan,searcher.getIndexReader());\n    if (luceneRequestFacade.getLuceneRequest() instanceof Query) {\n      Query query=(Query)luceneRequestFacade.getLuceneRequest();\n      CustomScoreQuery customScoreQuery=getCustomScoreQuery(plan,query);\n      if (customScoreQuery != null) {\n        query=customScoreQuery;\n      }\n      checkForIndexVersionChange(searcher);\n      TopDocs docs;\n      long start=PERF_LOGGER.start();\n      while (true) {\n        if (lastDoc != null) {\n          LOG.debug(\"loading the next {} entries for query {}\",nextBatchSize,query);\n          if (sort == null) {\n            docs=searcher.searchAfter(lastDoc,query,nextBatchSize);\n          }\n else {\n            docs=searcher.searchAfter(lastDoc,query,nextBatchSize,sort);\n          }\n        }\n else {\n          LOG.debug(\"loading the first {} entries for query {}\",nextBatchSize,query);\n          if (sort == null) {\n            docs=searcher.search(query,nextBatchSize);\n          }\n else {\n            docs=searcher.search(query,nextBatchSize,sort);\n          }\n        }\n        PERF_LOGGER.end(start,-1,\"{} ...\",docs.scoreDocs.length);\n        nextBatchSize=(int)Math.min(nextBatchSize * 2L,100000);\n        boolean addExcerpt=filter.getQueryStatement() != null && filter.getQueryStatement().contains(QueryImpl.REP_EXCERPT);\n        for (        ScoreDoc doc : docs.scoreDocs) {\n          String excerpt=null;\n          if (addExcerpt) {\n            excerpt=getExcerpt(indexNode,searcher,query,doc);\n          }\n          LuceneResultRow row=convertToRow(doc,searcher,excerpt);\n          if (row != null) {\n            queue.add(row);\n          }\n          lastDocToRecord=doc;\n        }\n        if (queue.isEmpty() && docs.scoreDocs.length > 0) {\n          lastDoc=lastDocToRecord;\n        }\n else {\n          break;\n        }\n      }\n    }\n else     if (luceneRequestFacade.getLuceneRequest() instanceof SpellcheckHelper.SpellcheckQuery) {\n      String aclCheckField=indexNode.getDefinition().isFullTextEnabled() ? FieldNames.FULLTEXT : FieldNames.SPELLCHECK;\n      SpellcheckHelper.SpellcheckQuery spellcheckQuery=(SpellcheckHelper.SpellcheckQuery)luceneRequestFacade.getLuceneRequest();\n      SuggestWord[] suggestWords=SpellcheckHelper.getSpellcheck(spellcheckQuery);\n      QueryParser qp=new QueryParser(Version.LUCENE_47,aclCheckField,indexNode.getDefinition().getAnalyzer());\n      for (      SuggestWord suggestion : suggestWords) {\n        Query query=qp.createPhraseQuery(aclCheckField,suggestion.string);\n        TopDocs topDocs=searcher.search(query,100);\n        if (topDocs.totalHits > 0) {\n          for (          ScoreDoc doc : topDocs.scoreDocs) {\n            Document retrievedDoc=searcher.doc(doc.doc);\n            if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n              queue.add(new LuceneResultRow(suggestion.string));\n              break;\n            }\n          }\n        }\n      }\n      noDocs=true;\n    }\n else     if (luceneRequestFacade.getLuceneRequest() instanceof SuggestHelper.SuggestQuery) {\n      SuggestHelper.SuggestQuery suggestQuery=(SuggestHelper.SuggestQuery)luceneRequestFacade.getLuceneRequest();\n      List<Lookup.LookupResult> lookupResults=SuggestHelper.getSuggestions(indexNode.getLookup(),suggestQuery);\n      QueryParser qp=new QueryParser(Version.LUCENE_47,FieldNames.SUGGEST,indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer());\n      for (      Lookup.LookupResult suggestion : lookupResults) {\n        Query query=qp.parse(\"\\\"\" + suggestion.key.toString() + \"\\\"\");\n        TopDocs topDocs=searcher.search(query,100);\n        if (topDocs.totalHits > 0) {\n          for (          ScoreDoc doc : topDocs.scoreDocs) {\n            Document retrievedDoc=searcher.doc(doc.doc);\n            if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n              queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n              break;\n            }\n          }\n        }\n      }\n      noDocs=true;\n    }\n  }\n catch (  Exception e) {\n    LOG.warn(\"query via {} failed.\",LucenePropertyIndex.this,e);\n  }\n finally {\n    indexNode.release();\n  }\n  if (lastDocToRecord != null) {\n    this.lastDoc=lastDocToRecord;\n  }\n  return !queue.isEmpty();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 640,
                    "astHeight": 22
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,expression]",
                "nodePosition": {
                    "charLength": 45,
                    "startLineNumber": 435,
                    "startColumnNumber": 32,
                    "endLineNumber": 435,
                    "endColumnNumber": 77
                },
                "nodeContext": "indexNode.getDefinition().isSuggestAnalyzed()",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 2,
            "type": "org.apache.jackrabbit.oak.plugins.index.lucene.IndexDefinition"
        },
        {
            "nodeContext": "indexNode.getDefinition()",
            "nodeType": "MethodInvocation",
            "nodePosition": {
                "charLength": 25,
                "startLineNumber": 435,
                "startColumnNumber": 80,
                "endLineNumber": 435,
                "endColumnNumber": 105
            },
            "astNodeNumber": 3,
            "astHeight": 2,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,thenExpression]",
                    "nodePosition": {
                        "charLength": 39,
                        "startLineNumber": 435,
                        "startColumnNumber": 80,
                        "endLineNumber": 435,
                        "endColumnNumber": 119
                    },
                    "nodeContext": "indexNode.getDefinition().getAnalyzer()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
                    "nodePosition": {
                        "charLength": 149,
                        "startLineNumber": 435,
                        "startColumnNumber": 32,
                        "endLineNumber": 436,
                        "endColumnNumber": 59
                    },
                    "nodeContext": "indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer()",
                    "nodeType": "ConditionalExpression",
                    "astNodeNumber": 14,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 237,
                        "startLineNumber": 434,
                        "startColumnNumber": 42,
                        "endLineNumber": 436,
                        "endColumnNumber": 60
                    },
                    "nodeContext": "new QueryParser(Version.LUCENE_47,FieldNames.SUGGEST,indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer())",
                    "nodeType": "ClassInstanceCreation",
                    "astNodeNumber": 23,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 243,
                        "startLineNumber": 434,
                        "startColumnNumber": 36,
                        "endLineNumber": 436,
                        "endColumnNumber": 60
                    },
                    "nodeContext": "qp=new QueryParser(Version.LUCENE_47,FieldNames.SUGGEST,indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer())",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 25,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 256,
                        "startLineNumber": 434,
                        "startColumnNumber": 24,
                        "endLineNumber": 436,
                        "endColumnNumber": 61
                    },
                    "nodeContext": "QueryParser qp=new QueryParser(Version.LUCENE_47,FieldNames.SUGGEST,indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer());\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 28,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1515,
                        "startLineNumber": 429,
                        "startColumnNumber": 109,
                        "endLineNumber": 454,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  SuggestHelper.SuggestQuery suggestQuery=(SuggestHelper.SuggestQuery)luceneRequestFacade.getLuceneRequest();\n  List<Lookup.LookupResult> lookupResults=SuggestHelper.getSuggestions(indexNode.getLookup(),suggestQuery);\n  QueryParser qp=new QueryParser(Version.LUCENE_47,FieldNames.SUGGEST,indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer());\n  for (  Lookup.LookupResult suggestion : lookupResults) {\n    Query query=qp.parse(\"\\\"\" + suggestion.key.toString() + \"\\\"\");\n    TopDocs topDocs=searcher.search(query,100);\n    if (topDocs.totalHits > 0) {\n      for (      ScoreDoc doc : topDocs.scoreDocs) {\n        Document retrievedDoc=searcher.doc(doc.doc);\n        if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n          queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n          break;\n        }\n      }\n    }\n  }\n  noDocs=true;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 154,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1597,
                        "startLineNumber": 429,
                        "startColumnNumber": 27,
                        "endLineNumber": 454,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (luceneRequestFacade.getLuceneRequest() instanceof SuggestHelper.SuggestQuery) {\n  SuggestHelper.SuggestQuery suggestQuery=(SuggestHelper.SuggestQuery)luceneRequestFacade.getLuceneRequest();\n  List<Lookup.LookupResult> lookupResults=SuggestHelper.getSuggestions(indexNode.getLookup(),suggestQuery);\n  QueryParser qp=new QueryParser(Version.LUCENE_47,FieldNames.SUGGEST,indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer());\n  for (  Lookup.LookupResult suggestion : lookupResults) {\n    Query query=qp.parse(\"\\\"\" + suggestion.key.toString() + \"\\\"\");\n    TopDocs topDocs=searcher.search(query,100);\n    if (topDocs.totalHits > 0) {\n      for (      ScoreDoc doc : topDocs.scoreDocs) {\n        Document retrievedDoc=searcher.doc(doc.doc);\n        if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n          queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n          break;\n        }\n      }\n    }\n  }\n  noDocs=true;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 163,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 3150,
                        "startLineNumber": 407,
                        "startColumnNumber": 27,
                        "endLineNumber": 454,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (luceneRequestFacade.getLuceneRequest() instanceof SpellcheckHelper.SpellcheckQuery) {\n  String aclCheckField=indexNode.getDefinition().isFullTextEnabled() ? FieldNames.FULLTEXT : FieldNames.SPELLCHECK;\n  SpellcheckHelper.SpellcheckQuery spellcheckQuery=(SpellcheckHelper.SpellcheckQuery)luceneRequestFacade.getLuceneRequest();\n  SuggestWord[] suggestWords=SpellcheckHelper.getSpellcheck(spellcheckQuery);\n  QueryParser qp=new QueryParser(Version.LUCENE_47,aclCheckField,indexNode.getDefinition().getAnalyzer());\n  for (  SuggestWord suggestion : suggestWords) {\n    Query query=qp.createPhraseQuery(aclCheckField,suggestion.string);\n    TopDocs topDocs=searcher.search(query,100);\n    if (topDocs.totalHits > 0) {\n      for (      ScoreDoc doc : topDocs.scoreDocs) {\n        Document retrievedDoc=searcher.doc(doc.doc);\n        if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n          queue.add(new LuceneResultRow(suggestion.string));\n          break;\n        }\n      }\n    }\n  }\n  noDocs=true;\n}\n else if (luceneRequestFacade.getLuceneRequest() instanceof SuggestHelper.SuggestQuery) {\n  SuggestHelper.SuggestQuery suggestQuery=(SuggestHelper.SuggestQuery)luceneRequestFacade.getLuceneRequest();\n  List<Lookup.LookupResult> lookupResults=SuggestHelper.getSuggestions(indexNode.getLookup(),suggestQuery);\n  QueryParser qp=new QueryParser(Version.LUCENE_47,FieldNames.SUGGEST,indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer());\n  for (  Lookup.LookupResult suggestion : lookupResults) {\n    Query query=qp.parse(\"\\\"\" + suggestion.key.toString() + \"\\\"\");\n    TopDocs topDocs=searcher.search(query,100);\n    if (topDocs.totalHits > 0) {\n      for (      ScoreDoc doc : topDocs.scoreDocs) {\n        Document retrievedDoc=searcher.doc(doc.doc);\n        if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n          queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n          break;\n        }\n      }\n    }\n  }\n  noDocs=true;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 315,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6075,
                        "startLineNumber": 353,
                        "startColumnNumber": 20,
                        "endLineNumber": 454,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (luceneRequestFacade.getLuceneRequest() instanceof Query) {\n  Query query=(Query)luceneRequestFacade.getLuceneRequest();\n  CustomScoreQuery customScoreQuery=getCustomScoreQuery(plan,query);\n  if (customScoreQuery != null) {\n    query=customScoreQuery;\n  }\n  checkForIndexVersionChange(searcher);\n  TopDocs docs;\n  long start=PERF_LOGGER.start();\n  while (true) {\n    if (lastDoc != null) {\n      LOG.debug(\"loading the next {} entries for query {}\",nextBatchSize,query);\n      if (sort == null) {\n        docs=searcher.searchAfter(lastDoc,query,nextBatchSize);\n      }\n else {\n        docs=searcher.searchAfter(lastDoc,query,nextBatchSize,sort);\n      }\n    }\n else {\n      LOG.debug(\"loading the first {} entries for query {}\",nextBatchSize,query);\n      if (sort == null) {\n        docs=searcher.search(query,nextBatchSize);\n      }\n else {\n        docs=searcher.search(query,nextBatchSize,sort);\n      }\n    }\n    PERF_LOGGER.end(start,-1,\"{} ...\",docs.scoreDocs.length);\n    nextBatchSize=(int)Math.min(nextBatchSize * 2L,100000);\n    boolean addExcerpt=filter.getQueryStatement() != null && filter.getQueryStatement().contains(QueryImpl.REP_EXCERPT);\n    for (    ScoreDoc doc : docs.scoreDocs) {\n      String excerpt=null;\n      if (addExcerpt) {\n        excerpt=getExcerpt(indexNode,searcher,query,doc);\n      }\n      LuceneResultRow row=convertToRow(doc,searcher,excerpt);\n      if (row != null) {\n        queue.add(row);\n      }\n      lastDocToRecord=doc;\n    }\n    if (queue.isEmpty() && docs.scoreDocs.length > 0) {\n      lastDoc=lastDocToRecord;\n    }\n else {\n      break;\n    }\n  }\n}\n else if (luceneRequestFacade.getLuceneRequest() instanceof SpellcheckHelper.SpellcheckQuery) {\n  String aclCheckField=indexNode.getDefinition().isFullTextEnabled() ? FieldNames.FULLTEXT : FieldNames.SPELLCHECK;\n  SpellcheckHelper.SpellcheckQuery spellcheckQuery=(SpellcheckHelper.SpellcheckQuery)luceneRequestFacade.getLuceneRequest();\n  SuggestWord[] suggestWords=SpellcheckHelper.getSpellcheck(spellcheckQuery);\n  QueryParser qp=new QueryParser(Version.LUCENE_47,aclCheckField,indexNode.getDefinition().getAnalyzer());\n  for (  SuggestWord suggestion : suggestWords) {\n    Query query=qp.createPhraseQuery(aclCheckField,suggestion.string);\n    TopDocs topDocs=searcher.search(query,100);\n    if (topDocs.totalHits > 0) {\n      for (      ScoreDoc doc : topDocs.scoreDocs) {\n        Document retrievedDoc=searcher.doc(doc.doc);\n        if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n          queue.add(new LuceneResultRow(suggestion.string));\n          break;\n        }\n      }\n    }\n  }\n  noDocs=true;\n}\n else if (luceneRequestFacade.getLuceneRequest() instanceof SuggestHelper.SuggestQuery) {\n  SuggestHelper.SuggestQuery suggestQuery=(SuggestHelper.SuggestQuery)luceneRequestFacade.getLuceneRequest();\n  List<Lookup.LookupResult> lookupResults=SuggestHelper.getSuggestions(indexNode.getLookup(),suggestQuery);\n  QueryParser qp=new QueryParser(Version.LUCENE_47,FieldNames.SUGGEST,indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer());\n  for (  Lookup.LookupResult suggestion : lookupResults) {\n    Query query=qp.parse(\"\\\"\" + suggestion.key.toString() + \"\\\"\");\n    TopDocs topDocs=searcher.search(query,100);\n    if (topDocs.totalHits > 0) {\n      for (      ScoreDoc doc : topDocs.scoreDocs) {\n        Document retrievedDoc=searcher.doc(doc.doc);\n        if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n          queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n          break;\n        }\n      }\n    }\n  }\n  noDocs=true;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 552,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 6298,
                        "startLineNumber": 350,
                        "startColumnNumber": 20,
                        "endLineNumber": 455,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  IndexSearcher searcher=indexNode.getSearcher();\n  LuceneRequestFacade luceneRequestFacade=getLuceneRequest(plan,searcher.getIndexReader());\n  if (luceneRequestFacade.getLuceneRequest() instanceof Query) {\n    Query query=(Query)luceneRequestFacade.getLuceneRequest();\n    CustomScoreQuery customScoreQuery=getCustomScoreQuery(plan,query);\n    if (customScoreQuery != null) {\n      query=customScoreQuery;\n    }\n    checkForIndexVersionChange(searcher);\n    TopDocs docs;\n    long start=PERF_LOGGER.start();\n    while (true) {\n      if (lastDoc != null) {\n        LOG.debug(\"loading the next {} entries for query {}\",nextBatchSize,query);\n        if (sort == null) {\n          docs=searcher.searchAfter(lastDoc,query,nextBatchSize);\n        }\n else {\n          docs=searcher.searchAfter(lastDoc,query,nextBatchSize,sort);\n        }\n      }\n else {\n        LOG.debug(\"loading the first {} entries for query {}\",nextBatchSize,query);\n        if (sort == null) {\n          docs=searcher.search(query,nextBatchSize);\n        }\n else {\n          docs=searcher.search(query,nextBatchSize,sort);\n        }\n      }\n      PERF_LOGGER.end(start,-1,\"{} ...\",docs.scoreDocs.length);\n      nextBatchSize=(int)Math.min(nextBatchSize * 2L,100000);\n      boolean addExcerpt=filter.getQueryStatement() != null && filter.getQueryStatement().contains(QueryImpl.REP_EXCERPT);\n      for (      ScoreDoc doc : docs.scoreDocs) {\n        String excerpt=null;\n        if (addExcerpt) {\n          excerpt=getExcerpt(indexNode,searcher,query,doc);\n        }\n        LuceneResultRow row=convertToRow(doc,searcher,excerpt);\n        if (row != null) {\n          queue.add(row);\n        }\n        lastDocToRecord=doc;\n      }\n      if (queue.isEmpty() && docs.scoreDocs.length > 0) {\n        lastDoc=lastDocToRecord;\n      }\n else {\n        break;\n      }\n    }\n  }\n else   if (luceneRequestFacade.getLuceneRequest() instanceof SpellcheckHelper.SpellcheckQuery) {\n    String aclCheckField=indexNode.getDefinition().isFullTextEnabled() ? FieldNames.FULLTEXT : FieldNames.SPELLCHECK;\n    SpellcheckHelper.SpellcheckQuery spellcheckQuery=(SpellcheckHelper.SpellcheckQuery)luceneRequestFacade.getLuceneRequest();\n    SuggestWord[] suggestWords=SpellcheckHelper.getSpellcheck(spellcheckQuery);\n    QueryParser qp=new QueryParser(Version.LUCENE_47,aclCheckField,indexNode.getDefinition().getAnalyzer());\n    for (    SuggestWord suggestion : suggestWords) {\n      Query query=qp.createPhraseQuery(aclCheckField,suggestion.string);\n      TopDocs topDocs=searcher.search(query,100);\n      if (topDocs.totalHits > 0) {\n        for (        ScoreDoc doc : topDocs.scoreDocs) {\n          Document retrievedDoc=searcher.doc(doc.doc);\n          if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n            queue.add(new LuceneResultRow(suggestion.string));\n            break;\n          }\n        }\n      }\n    }\n    noDocs=true;\n  }\n else   if (luceneRequestFacade.getLuceneRequest() instanceof SuggestHelper.SuggestQuery) {\n    SuggestHelper.SuggestQuery suggestQuery=(SuggestHelper.SuggestQuery)luceneRequestFacade.getLuceneRequest();\n    List<Lookup.LookupResult> lookupResults=SuggestHelper.getSuggestions(indexNode.getLookup(),suggestQuery);\n    QueryParser qp=new QueryParser(Version.LUCENE_47,FieldNames.SUGGEST,indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer());\n    for (    Lookup.LookupResult suggestion : lookupResults) {\n      Query query=qp.parse(\"\\\"\" + suggestion.key.toString() + \"\\\"\");\n      TopDocs topDocs=searcher.search(query,100);\n      if (topDocs.totalHits > 0) {\n        for (        ScoreDoc doc : topDocs.scoreDocs) {\n          Document retrievedDoc=searcher.doc(doc.doc);\n          if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n            queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n            break;\n          }\n        }\n      }\n    }\n    noDocs=true;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 572,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6494,
                        "startLineNumber": 350,
                        "startColumnNumber": 16,
                        "endLineNumber": 459,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "try {\n  IndexSearcher searcher=indexNode.getSearcher();\n  LuceneRequestFacade luceneRequestFacade=getLuceneRequest(plan,searcher.getIndexReader());\n  if (luceneRequestFacade.getLuceneRequest() instanceof Query) {\n    Query query=(Query)luceneRequestFacade.getLuceneRequest();\n    CustomScoreQuery customScoreQuery=getCustomScoreQuery(plan,query);\n    if (customScoreQuery != null) {\n      query=customScoreQuery;\n    }\n    checkForIndexVersionChange(searcher);\n    TopDocs docs;\n    long start=PERF_LOGGER.start();\n    while (true) {\n      if (lastDoc != null) {\n        LOG.debug(\"loading the next {} entries for query {}\",nextBatchSize,query);\n        if (sort == null) {\n          docs=searcher.searchAfter(lastDoc,query,nextBatchSize);\n        }\n else {\n          docs=searcher.searchAfter(lastDoc,query,nextBatchSize,sort);\n        }\n      }\n else {\n        LOG.debug(\"loading the first {} entries for query {}\",nextBatchSize,query);\n        if (sort == null) {\n          docs=searcher.search(query,nextBatchSize);\n        }\n else {\n          docs=searcher.search(query,nextBatchSize,sort);\n        }\n      }\n      PERF_LOGGER.end(start,-1,\"{} ...\",docs.scoreDocs.length);\n      nextBatchSize=(int)Math.min(nextBatchSize * 2L,100000);\n      boolean addExcerpt=filter.getQueryStatement() != null && filter.getQueryStatement().contains(QueryImpl.REP_EXCERPT);\n      for (      ScoreDoc doc : docs.scoreDocs) {\n        String excerpt=null;\n        if (addExcerpt) {\n          excerpt=getExcerpt(indexNode,searcher,query,doc);\n        }\n        LuceneResultRow row=convertToRow(doc,searcher,excerpt);\n        if (row != null) {\n          queue.add(row);\n        }\n        lastDocToRecord=doc;\n      }\n      if (queue.isEmpty() && docs.scoreDocs.length > 0) {\n        lastDoc=lastDocToRecord;\n      }\n else {\n        break;\n      }\n    }\n  }\n else   if (luceneRequestFacade.getLuceneRequest() instanceof SpellcheckHelper.SpellcheckQuery) {\n    String aclCheckField=indexNode.getDefinition().isFullTextEnabled() ? FieldNames.FULLTEXT : FieldNames.SPELLCHECK;\n    SpellcheckHelper.SpellcheckQuery spellcheckQuery=(SpellcheckHelper.SpellcheckQuery)luceneRequestFacade.getLuceneRequest();\n    SuggestWord[] suggestWords=SpellcheckHelper.getSpellcheck(spellcheckQuery);\n    QueryParser qp=new QueryParser(Version.LUCENE_47,aclCheckField,indexNode.getDefinition().getAnalyzer());\n    for (    SuggestWord suggestion : suggestWords) {\n      Query query=qp.createPhraseQuery(aclCheckField,suggestion.string);\n      TopDocs topDocs=searcher.search(query,100);\n      if (topDocs.totalHits > 0) {\n        for (        ScoreDoc doc : topDocs.scoreDocs) {\n          Document retrievedDoc=searcher.doc(doc.doc);\n          if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n            queue.add(new LuceneResultRow(suggestion.string));\n            break;\n          }\n        }\n      }\n    }\n    noDocs=true;\n  }\n else   if (luceneRequestFacade.getLuceneRequest() instanceof SuggestHelper.SuggestQuery) {\n    SuggestHelper.SuggestQuery suggestQuery=(SuggestHelper.SuggestQuery)luceneRequestFacade.getLuceneRequest();\n    List<Lookup.LookupResult> lookupResults=SuggestHelper.getSuggestions(indexNode.getLookup(),suggestQuery);\n    QueryParser qp=new QueryParser(Version.LUCENE_47,FieldNames.SUGGEST,indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer());\n    for (    Lookup.LookupResult suggestion : lookupResults) {\n      Query query=qp.parse(\"\\\"\" + suggestion.key.toString() + \"\\\"\");\n      TopDocs topDocs=searcher.search(query,100);\n      if (topDocs.totalHits > 0) {\n        for (        ScoreDoc doc : topDocs.scoreDocs) {\n          Document retrievedDoc=searcher.doc(doc.doc);\n          if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n            queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n            break;\n          }\n        }\n      }\n    }\n    noDocs=true;\n  }\n}\n catch (Exception e) {\n  LOG.warn(\"query via {} failed.\",LucenePropertyIndex.this,e);\n}\n finally {\n  indexNode.release();\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 592,
                    "astHeight": 20
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 6935,
                        "startLineNumber": 340,
                        "startColumnNumber": 39,
                        "endLineNumber": 466,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  if (noDocs) {\n    return false;\n  }\n  ScoreDoc lastDocToRecord=null;\n  final IndexNode indexNode=acquireIndexNode(plan);\n  checkState(indexNode != null);\n  try {\n    IndexSearcher searcher=indexNode.getSearcher();\n    LuceneRequestFacade luceneRequestFacade=getLuceneRequest(plan,searcher.getIndexReader());\n    if (luceneRequestFacade.getLuceneRequest() instanceof Query) {\n      Query query=(Query)luceneRequestFacade.getLuceneRequest();\n      CustomScoreQuery customScoreQuery=getCustomScoreQuery(plan,query);\n      if (customScoreQuery != null) {\n        query=customScoreQuery;\n      }\n      checkForIndexVersionChange(searcher);\n      TopDocs docs;\n      long start=PERF_LOGGER.start();\n      while (true) {\n        if (lastDoc != null) {\n          LOG.debug(\"loading the next {} entries for query {}\",nextBatchSize,query);\n          if (sort == null) {\n            docs=searcher.searchAfter(lastDoc,query,nextBatchSize);\n          }\n else {\n            docs=searcher.searchAfter(lastDoc,query,nextBatchSize,sort);\n          }\n        }\n else {\n          LOG.debug(\"loading the first {} entries for query {}\",nextBatchSize,query);\n          if (sort == null) {\n            docs=searcher.search(query,nextBatchSize);\n          }\n else {\n            docs=searcher.search(query,nextBatchSize,sort);\n          }\n        }\n        PERF_LOGGER.end(start,-1,\"{} ...\",docs.scoreDocs.length);\n        nextBatchSize=(int)Math.min(nextBatchSize * 2L,100000);\n        boolean addExcerpt=filter.getQueryStatement() != null && filter.getQueryStatement().contains(QueryImpl.REP_EXCERPT);\n        for (        ScoreDoc doc : docs.scoreDocs) {\n          String excerpt=null;\n          if (addExcerpt) {\n            excerpt=getExcerpt(indexNode,searcher,query,doc);\n          }\n          LuceneResultRow row=convertToRow(doc,searcher,excerpt);\n          if (row != null) {\n            queue.add(row);\n          }\n          lastDocToRecord=doc;\n        }\n        if (queue.isEmpty() && docs.scoreDocs.length > 0) {\n          lastDoc=lastDocToRecord;\n        }\n else {\n          break;\n        }\n      }\n    }\n else     if (luceneRequestFacade.getLuceneRequest() instanceof SpellcheckHelper.SpellcheckQuery) {\n      String aclCheckField=indexNode.getDefinition().isFullTextEnabled() ? FieldNames.FULLTEXT : FieldNames.SPELLCHECK;\n      SpellcheckHelper.SpellcheckQuery spellcheckQuery=(SpellcheckHelper.SpellcheckQuery)luceneRequestFacade.getLuceneRequest();\n      SuggestWord[] suggestWords=SpellcheckHelper.getSpellcheck(spellcheckQuery);\n      QueryParser qp=new QueryParser(Version.LUCENE_47,aclCheckField,indexNode.getDefinition().getAnalyzer());\n      for (      SuggestWord suggestion : suggestWords) {\n        Query query=qp.createPhraseQuery(aclCheckField,suggestion.string);\n        TopDocs topDocs=searcher.search(query,100);\n        if (topDocs.totalHits > 0) {\n          for (          ScoreDoc doc : topDocs.scoreDocs) {\n            Document retrievedDoc=searcher.doc(doc.doc);\n            if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n              queue.add(new LuceneResultRow(suggestion.string));\n              break;\n            }\n          }\n        }\n      }\n      noDocs=true;\n    }\n else     if (luceneRequestFacade.getLuceneRequest() instanceof SuggestHelper.SuggestQuery) {\n      SuggestHelper.SuggestQuery suggestQuery=(SuggestHelper.SuggestQuery)luceneRequestFacade.getLuceneRequest();\n      List<Lookup.LookupResult> lookupResults=SuggestHelper.getSuggestions(indexNode.getLookup(),suggestQuery);\n      QueryParser qp=new QueryParser(Version.LUCENE_47,FieldNames.SUGGEST,indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer());\n      for (      Lookup.LookupResult suggestion : lookupResults) {\n        Query query=qp.parse(\"\\\"\" + suggestion.key.toString() + \"\\\"\");\n        TopDocs topDocs=searcher.search(query,100);\n        if (topDocs.totalHits > 0) {\n          for (          ScoreDoc doc : topDocs.scoreDocs) {\n            Document retrievedDoc=searcher.doc(doc.doc);\n            if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n              queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n              break;\n            }\n          }\n        }\n      }\n      noDocs=true;\n    }\n  }\n catch (  Exception e) {\n    LOG.warn(\"query via {} failed.\",LucenePropertyIndex.this,e);\n  }\n finally {\n    indexNode.release();\n  }\n  if (lastDocToRecord != null) {\n    this.lastDoc=lastDocToRecord;\n  }\n  return !queue.isEmpty();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 635,
                    "astHeight": 21
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.AnonymousClassDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7101,
                        "startLineNumber": 336,
                        "startColumnNumber": 12,
                        "endLineNumber": 466,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "/** \n * Loads the lucene documents in batches\n * @return true if any document is loaded\n */\nprivate boolean loadDocs(){\n  if (noDocs) {\n    return false;\n  }\n  ScoreDoc lastDocToRecord=null;\n  final IndexNode indexNode=acquireIndexNode(plan);\n  checkState(indexNode != null);\n  try {\n    IndexSearcher searcher=indexNode.getSearcher();\n    LuceneRequestFacade luceneRequestFacade=getLuceneRequest(plan,searcher.getIndexReader());\n    if (luceneRequestFacade.getLuceneRequest() instanceof Query) {\n      Query query=(Query)luceneRequestFacade.getLuceneRequest();\n      CustomScoreQuery customScoreQuery=getCustomScoreQuery(plan,query);\n      if (customScoreQuery != null) {\n        query=customScoreQuery;\n      }\n      checkForIndexVersionChange(searcher);\n      TopDocs docs;\n      long start=PERF_LOGGER.start();\n      while (true) {\n        if (lastDoc != null) {\n          LOG.debug(\"loading the next {} entries for query {}\",nextBatchSize,query);\n          if (sort == null) {\n            docs=searcher.searchAfter(lastDoc,query,nextBatchSize);\n          }\n else {\n            docs=searcher.searchAfter(lastDoc,query,nextBatchSize,sort);\n          }\n        }\n else {\n          LOG.debug(\"loading the first {} entries for query {}\",nextBatchSize,query);\n          if (sort == null) {\n            docs=searcher.search(query,nextBatchSize);\n          }\n else {\n            docs=searcher.search(query,nextBatchSize,sort);\n          }\n        }\n        PERF_LOGGER.end(start,-1,\"{} ...\",docs.scoreDocs.length);\n        nextBatchSize=(int)Math.min(nextBatchSize * 2L,100000);\n        boolean addExcerpt=filter.getQueryStatement() != null && filter.getQueryStatement().contains(QueryImpl.REP_EXCERPT);\n        for (        ScoreDoc doc : docs.scoreDocs) {\n          String excerpt=null;\n          if (addExcerpt) {\n            excerpt=getExcerpt(indexNode,searcher,query,doc);\n          }\n          LuceneResultRow row=convertToRow(doc,searcher,excerpt);\n          if (row != null) {\n            queue.add(row);\n          }\n          lastDocToRecord=doc;\n        }\n        if (queue.isEmpty() && docs.scoreDocs.length > 0) {\n          lastDoc=lastDocToRecord;\n        }\n else {\n          break;\n        }\n      }\n    }\n else     if (luceneRequestFacade.getLuceneRequest() instanceof SpellcheckHelper.SpellcheckQuery) {\n      String aclCheckField=indexNode.getDefinition().isFullTextEnabled() ? FieldNames.FULLTEXT : FieldNames.SPELLCHECK;\n      SpellcheckHelper.SpellcheckQuery spellcheckQuery=(SpellcheckHelper.SpellcheckQuery)luceneRequestFacade.getLuceneRequest();\n      SuggestWord[] suggestWords=SpellcheckHelper.getSpellcheck(spellcheckQuery);\n      QueryParser qp=new QueryParser(Version.LUCENE_47,aclCheckField,indexNode.getDefinition().getAnalyzer());\n      for (      SuggestWord suggestion : suggestWords) {\n        Query query=qp.createPhraseQuery(aclCheckField,suggestion.string);\n        TopDocs topDocs=searcher.search(query,100);\n        if (topDocs.totalHits > 0) {\n          for (          ScoreDoc doc : topDocs.scoreDocs) {\n            Document retrievedDoc=searcher.doc(doc.doc);\n            if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n              queue.add(new LuceneResultRow(suggestion.string));\n              break;\n            }\n          }\n        }\n      }\n      noDocs=true;\n    }\n else     if (luceneRequestFacade.getLuceneRequest() instanceof SuggestHelper.SuggestQuery) {\n      SuggestHelper.SuggestQuery suggestQuery=(SuggestHelper.SuggestQuery)luceneRequestFacade.getLuceneRequest();\n      List<Lookup.LookupResult> lookupResults=SuggestHelper.getSuggestions(indexNode.getLookup(),suggestQuery);\n      QueryParser qp=new QueryParser(Version.LUCENE_47,FieldNames.SUGGEST,indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer());\n      for (      Lookup.LookupResult suggestion : lookupResults) {\n        Query query=qp.parse(\"\\\"\" + suggestion.key.toString() + \"\\\"\");\n        TopDocs topDocs=searcher.search(query,100);\n        if (topDocs.totalHits > 0) {\n          for (          ScoreDoc doc : topDocs.scoreDocs) {\n            Document retrievedDoc=searcher.doc(doc.doc);\n            if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n              queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n              break;\n            }\n          }\n        }\n      }\n      noDocs=true;\n    }\n  }\n catch (  Exception e) {\n    LOG.warn(\"query via {} failed.\",LucenePropertyIndex.this,e);\n  }\n finally {\n    indexNode.release();\n  }\n  if (lastDocToRecord != null) {\n    this.lastDoc=lastDocToRecord;\n  }\n  return !queue.isEmpty();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 640,
                    "astHeight": 22
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,thenExpression]",
                "nodePosition": {
                    "charLength": 39,
                    "startLineNumber": 435,
                    "startColumnNumber": 80,
                    "endLineNumber": 435,
                    "endColumnNumber": 119
                },
                "nodeContext": "indexNode.getDefinition().getAnalyzer()",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 2,
            "type": "org.apache.jackrabbit.oak.plugins.index.lucene.IndexDefinition"
        }
    ],
    "positionList": [
        {
            "charLength": 25,
            "startLineNumber": 408,
            "startColumnNumber": 47,
            "endLineNumber": 408,
            "endColumnNumber": 72
        },
        {
            "charLength": 25,
            "startLineNumber": 413,
            "startColumnNumber": 91,
            "endLineNumber": 413,
            "endColumnNumber": 116
        },
        {
            "charLength": 25,
            "startLineNumber": 435,
            "startColumnNumber": 32,
            "endLineNumber": 435,
            "endColumnNumber": 57
        },
        {
            "charLength": 25,
            "startLineNumber": 435,
            "startColumnNumber": 80,
            "endLineNumber": 435,
            "endColumnNumber": 105
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 1
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 1
        }
    ]
}