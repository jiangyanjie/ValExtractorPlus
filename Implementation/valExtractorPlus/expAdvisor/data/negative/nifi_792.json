{
    "id": 792,
    "expression": "new IllegalArgumentException(\"The flow snippet contains a Connection that references a component that is not included.\")",
    "projectName": "nifi",
    "commitID": "c70a86eac00c149f8d9036db02525d9483bfd809",
    "filePath": "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/util/SnippetUtils.java",
    "occurrences": 1,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "new IllegalArgumentException(\"The flow snippet contains a Connection that references a component that is not included.\")",
            "nodeType": "ClassInstanceCreation",
            "nodePosition": {
                "charLength": 120,
                "startLineNumber": 693,
                "startColumnNumber": 30,
                "endLineNumber": 693,
                "endColumnNumber": 150
            },
            "astNodeNumber": 4,
            "astHeight": 3,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 127,
                        "startLineNumber": 693,
                        "startColumnNumber": 24,
                        "endLineNumber": 693,
                        "endColumnNumber": 151
                    },
                    "nodeContext": "throw new IllegalArgumentException(\"The flow snippet contains a Connection that references a component that is not included.\");\n",
                    "nodeType": "ThrowStatement",
                    "astNodeNumber": 5,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 175,
                        "startLineNumber": 692,
                        "startColumnNumber": 63,
                        "endLineNumber": 694,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  throw new IllegalArgumentException(\"The flow snippet contains a Connection that references a component that is not included.\");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 6,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 218,
                        "startLineNumber": 692,
                        "startColumnNumber": 20,
                        "endLineNumber": 694,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (source == null || destination == null) {\n  throw new IllegalArgumentException(\"The flow snippet contains a Connection that references a component that is not included.\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 14,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 1098,
                        "startLineNumber": 685,
                        "startColumnNumber": 91,
                        "endLineNumber": 703,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  final ConnectionDTO cp=dtoFactory.copy(connectionDTO);\n  final ConnectableDTO source=connectableMap.get(cp.getSource().getGroupId() + \"-\" + cp.getSource().getId());\n  final ConnectableDTO destination=connectableMap.get(cp.getDestination().getGroupId() + \"-\" + cp.getDestination().getId());\n  if (source == null || destination == null) {\n    throw new IllegalArgumentException(\"The flow snippet contains a Connection that references a component that is not included.\");\n  }\n  cp.setId(generateId(connectionDTO.getId(),idGenerationSeed,isCopy));\n  cp.setSource(source);\n  cp.setDestination(destination);\n  cp.setParentGroupId(groupId);\n  connections.add(cp);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 98,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1173,
                        "startLineNumber": 685,
                        "startColumnNumber": 16,
                        "endLineNumber": 703,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "for (final ConnectionDTO connectionDTO : snippetContents.getConnections()) {\n  final ConnectionDTO cp=dtoFactory.copy(connectionDTO);\n  final ConnectableDTO source=connectableMap.get(cp.getSource().getGroupId() + \"-\" + cp.getSource().getId());\n  final ConnectableDTO destination=connectableMap.get(cp.getDestination().getGroupId() + \"-\" + cp.getDestination().getId());\n  if (source == null || destination == null) {\n    throw new IllegalArgumentException(\"The flow snippet contains a Connection that references a component that is not included.\");\n  }\n  cp.setId(generateId(connectionDTO.getId(),idGenerationSeed,isCopy));\n  cp.setSource(source);\n  cp.setDestination(destination);\n  cp.setParentGroupId(groupId);\n  connections.add(cp);\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 107,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1205,
                        "startLineNumber": 684,
                        "startColumnNumber": 58,
                        "endLineNumber": 704,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  for (  final ConnectionDTO connectionDTO : snippetContents.getConnections()) {\n    final ConnectionDTO cp=dtoFactory.copy(connectionDTO);\n    final ConnectableDTO source=connectableMap.get(cp.getSource().getGroupId() + \"-\" + cp.getSource().getId());\n    final ConnectableDTO destination=connectableMap.get(cp.getDestination().getGroupId() + \"-\" + cp.getDestination().getId());\n    if (source == null || destination == null) {\n      throw new IllegalArgumentException(\"The flow snippet contains a Connection that references a component that is not included.\");\n    }\n    cp.setId(generateId(connectionDTO.getId(),idGenerationSeed,isCopy));\n    cp.setSource(source);\n    cp.setDestination(destination);\n    cp.setParentGroupId(groupId);\n    connections.add(cp);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 108,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1251,
                        "startLineNumber": 684,
                        "startColumnNumber": 12,
                        "endLineNumber": 704,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (snippetContents.getConnections() != null) {\n  for (  final ConnectionDTO connectionDTO : snippetContents.getConnections()) {\n    final ConnectionDTO cp=dtoFactory.copy(connectionDTO);\n    final ConnectableDTO source=connectableMap.get(cp.getSource().getGroupId() + \"-\" + cp.getSource().getId());\n    final ConnectableDTO destination=connectableMap.get(cp.getDestination().getGroupId() + \"-\" + cp.getDestination().getId());\n    if (source == null || destination == null) {\n      throw new IllegalArgumentException(\"The flow snippet contains a Connection that references a component that is not included.\");\n    }\n    cp.setId(generateId(connectionDTO.getId(),idGenerationSeed,isCopy));\n    cp.setSource(source);\n    cp.setDestination(destination);\n    cp.setParentGroupId(groupId);\n    connections.add(cp);\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 114,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 14702,
                        "startLineNumber": 445,
                        "startColumnNumber": 12,
                        "endLineNumber": 708,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (serviceIdMap == null) {\n    serviceIdMap=new HashMap<>();\n  }\n  final Set<ControllerServiceDTO> services=new HashSet<>();\n  if (snippetContents.getControllerServices() != null) {\n    for (    final ControllerServiceDTO serviceDTO : snippetContents.getControllerServices()) {\n      final ControllerServiceDTO service=dtoFactory.copy(serviceDTO);\n      service.setId(generateId(serviceDTO.getId(),idGenerationSeed,isCopy));\n      service.setState(ControllerServiceState.DISABLED.name());\n      services.add(service);\n      serviceIdMap.put(serviceDTO.getId(),service.getId());\n      if (isCopy) {\n        cloneComponentSpecificPolicies(ResourceFactory.getComponentResource(ResourceType.ControllerService,serviceDTO.getId(),serviceDTO.getName()),ResourceFactory.getComponentResource(ResourceType.ControllerService,service.getId(),service.getName()),idGenerationSeed);\n      }\n    }\n  }\n  for (  final ControllerServiceDTO serviceDTO : services) {\n    final Map<String,String> properties=serviceDTO.getProperties();\n    final Map<String,PropertyDescriptorDTO> descriptors=serviceDTO.getDescriptors();\n    if (properties != null && descriptors != null) {\n      for (      final PropertyDescriptorDTO descriptor : descriptors.values()) {\n        if (descriptor.getIdentifiesControllerService() != null) {\n          final String currentServiceId=properties.get(descriptor.getName());\n          if (currentServiceId == null) {\n            continue;\n          }\n          final String newServiceId=serviceIdMap.get(currentServiceId);\n          properties.put(descriptor.getName(),newServiceId);\n        }\n      }\n    }\n  }\n  snippetContentsCopy.setControllerServices(services);\n  final Set<LabelDTO> labels=new HashSet<>();\n  if (snippetContents.getLabels() != null) {\n    for (    final LabelDTO labelDTO : snippetContents.getLabels()) {\n      final LabelDTO label=dtoFactory.copy(labelDTO);\n      label.setId(generateId(labelDTO.getId(),idGenerationSeed,isCopy));\n      label.setParentGroupId(groupId);\n      labels.add(label);\n      if (isCopy) {\n        cloneComponentSpecificPolicies(ResourceFactory.getComponentResource(ResourceType.Label,labelDTO.getId(),labelDTO.getLabel()),ResourceFactory.getComponentResource(ResourceType.Label,label.getId(),label.getLabel()),idGenerationSeed);\n      }\n    }\n  }\n  snippetContentsCopy.setLabels(labels);\n  final Map<String,ConnectableDTO> connectableMap=new HashMap<>();\n  final Set<FunnelDTO> funnels=new HashSet<>();\n  if (snippetContents.getFunnels() != null) {\n    for (    final FunnelDTO funnelDTO : snippetContents.getFunnels()) {\n      final FunnelDTO cp=dtoFactory.copy(funnelDTO);\n      cp.setId(generateId(funnelDTO.getId(),idGenerationSeed,isCopy));\n      cp.setParentGroupId(groupId);\n      funnels.add(cp);\n      connectableMap.put(funnelDTO.getParentGroupId() + \"-\" + funnelDTO.getId(),dtoFactory.createConnectableDto(cp));\n      if (isCopy) {\n        cloneComponentSpecificPolicies(ResourceFactory.getComponentResource(ResourceType.Funnel,funnelDTO.getId(),funnelDTO.getId()),ResourceFactory.getComponentResource(ResourceType.Funnel,cp.getId(),cp.getId()),idGenerationSeed);\n      }\n    }\n  }\n  snippetContentsCopy.setFunnels(funnels);\n  final Set<PortDTO> inputPorts=new HashSet<>();\n  if (snippetContents.getInputPorts() != null) {\n    for (    final PortDTO portDTO : snippetContents.getInputPorts()) {\n      final PortDTO cp=dtoFactory.copy(portDTO);\n      cp.setId(generateId(portDTO.getId(),idGenerationSeed,isCopy));\n      cp.setParentGroupId(groupId);\n      cp.setState(ScheduledState.STOPPED.toString());\n      inputPorts.add(cp);\n      final ConnectableDTO portConnectable=dtoFactory.createConnectableDto(cp,ConnectableType.INPUT_PORT);\n      connectableMap.put(portDTO.getParentGroupId() + \"-\" + portDTO.getId(),portConnectable);\n      if (parentConnectableMap != null) {\n        parentConnectableMap.put(portDTO.getParentGroupId() + \"-\" + portDTO.getId(),portConnectable);\n      }\n      if (isCopy) {\n        cloneComponentSpecificPolicies(ResourceFactory.getComponentResource(ResourceType.InputPort,portDTO.getId(),portDTO.getName()),ResourceFactory.getComponentResource(ResourceType.InputPort,cp.getId(),cp.getName()),idGenerationSeed);\n      }\n    }\n  }\n  snippetContentsCopy.setInputPorts(inputPorts);\n  final Set<PortDTO> outputPorts=new HashSet<>();\n  if (snippetContents.getOutputPorts() != null) {\n    for (    final PortDTO portDTO : snippetContents.getOutputPorts()) {\n      final PortDTO cp=dtoFactory.copy(portDTO);\n      cp.setId(generateId(portDTO.getId(),idGenerationSeed,isCopy));\n      cp.setParentGroupId(groupId);\n      cp.setState(ScheduledState.STOPPED.toString());\n      outputPorts.add(cp);\n      final ConnectableDTO portConnectable=dtoFactory.createConnectableDto(cp,ConnectableType.OUTPUT_PORT);\n      connectableMap.put(portDTO.getParentGroupId() + \"-\" + portDTO.getId(),portConnectable);\n      if (parentConnectableMap != null) {\n        parentConnectableMap.put(portDTO.getParentGroupId() + \"-\" + portDTO.getId(),portConnectable);\n      }\n      if (isCopy) {\n        cloneComponentSpecificPolicies(ResourceFactory.getComponentResource(ResourceType.OutputPort,portDTO.getId(),portDTO.getName()),ResourceFactory.getComponentResource(ResourceType.OutputPort,cp.getId(),cp.getName()),idGenerationSeed);\n      }\n    }\n  }\n  snippetContentsCopy.setOutputPorts(outputPorts);\n  final Set<ProcessorDTO> processors=new HashSet<>();\n  if (snippetContents.getProcessors() != null) {\n    for (    final ProcessorDTO processorDTO : snippetContents.getProcessors()) {\n      final ProcessorDTO cp=dtoFactory.copy(processorDTO);\n      cp.setId(generateId(processorDTO.getId(),idGenerationSeed,isCopy));\n      cp.setParentGroupId(groupId);\n      if (processorDTO.getState() != null && processorDTO.getState().equals(ScheduledState.DISABLED.toString())) {\n        cp.setState(ScheduledState.DISABLED.toString());\n      }\n else {\n        cp.setState(ScheduledState.STOPPED.toString());\n      }\n      processors.add(cp);\n      connectableMap.put(processorDTO.getParentGroupId() + \"-\" + processorDTO.getId(),dtoFactory.createConnectableDto(cp));\n      if (isCopy) {\n        cloneComponentSpecificPolicies(ResourceFactory.getComponentResource(ResourceType.Processor,processorDTO.getId(),processorDTO.getName()),ResourceFactory.getComponentResource(ResourceType.Processor,cp.getId(),cp.getName()),idGenerationSeed);\n      }\n    }\n  }\n  snippetContentsCopy.setProcessors(processors);\n  updateControllerServiceIdentifiers(snippetContentsCopy,serviceIdMap);\n  final Set<ProcessGroupDTO> groups=new HashSet<>();\n  if (snippetContents.getProcessGroups() != null) {\n    for (    final ProcessGroupDTO groupDTO : snippetContents.getProcessGroups()) {\n      final ProcessGroupDTO cp=dtoFactory.copy(groupDTO,false);\n      cp.setId(generateId(groupDTO.getId(),idGenerationSeed,isCopy));\n      cp.setParentGroupId(groupId);\n      final FlowSnippetDTO contentsCopy=copyContentsForGroup(groupDTO.getContents(),cp.getId(),connectableMap,serviceIdMap,idGenerationSeed,isCopy);\n      cp.setContents(contentsCopy);\n      groups.add(cp);\n      if (isCopy) {\n        cloneComponentSpecificPolicies(ResourceFactory.getComponentResource(ResourceType.ProcessGroup,groupDTO.getId(),groupDTO.getName()),ResourceFactory.getComponentResource(ResourceType.ProcessGroup,cp.getId(),cp.getName()),idGenerationSeed);\n      }\n    }\n  }\n  snippetContentsCopy.setProcessGroups(groups);\n  final Set<RemoteProcessGroupDTO> remoteGroups=new HashSet<>();\n  if (snippetContents.getRemoteProcessGroups() != null) {\n    for (    final RemoteProcessGroupDTO remoteGroupDTO : snippetContents.getRemoteProcessGroups()) {\n      final RemoteProcessGroupDTO cp=dtoFactory.copy(remoteGroupDTO);\n      cp.setId(generateId(remoteGroupDTO.getId(),idGenerationSeed,isCopy));\n      cp.setParentGroupId(groupId);\n      final RemoteProcessGroupContentsDTO contents=cp.getContents();\n      if (contents != null && contents.getInputPorts() != null) {\n        for (        final RemoteProcessGroupPortDTO remotePort : contents.getInputPorts()) {\n          remotePort.setGroupId(cp.getId());\n          connectableMap.put(remoteGroupDTO.getId() + \"-\" + remotePort.getId(),dtoFactory.createConnectableDto(remotePort,ConnectableType.REMOTE_INPUT_PORT));\n        }\n      }\n      if (contents != null && contents.getOutputPorts() != null) {\n        for (        final RemoteProcessGroupPortDTO remotePort : contents.getOutputPorts()) {\n          remotePort.setGroupId(cp.getId());\n          connectableMap.put(remoteGroupDTO.getId() + \"-\" + remotePort.getId(),dtoFactory.createConnectableDto(remotePort,ConnectableType.REMOTE_OUTPUT_PORT));\n        }\n      }\n      remoteGroups.add(cp);\n      if (isCopy) {\n        cloneComponentSpecificPolicies(ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,remoteGroupDTO.getId(),remoteGroupDTO.getName()),ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,cp.getId(),cp.getName()),idGenerationSeed);\n      }\n    }\n  }\n  snippetContentsCopy.setRemoteProcessGroups(remoteGroups);\n  final Set<ConnectionDTO> connections=new HashSet<>();\n  if (snippetContents.getConnections() != null) {\n    for (    final ConnectionDTO connectionDTO : snippetContents.getConnections()) {\n      final ConnectionDTO cp=dtoFactory.copy(connectionDTO);\n      final ConnectableDTO source=connectableMap.get(cp.getSource().getGroupId() + \"-\" + cp.getSource().getId());\n      final ConnectableDTO destination=connectableMap.get(cp.getDestination().getGroupId() + \"-\" + cp.getDestination().getId());\n      if (source == null || destination == null) {\n        throw new IllegalArgumentException(\"The flow snippet contains a Connection that references a component that is not included.\");\n      }\n      cp.setId(generateId(connectionDTO.getId(),idGenerationSeed,isCopy));\n      cp.setSource(source);\n      cp.setDestination(destination);\n      cp.setParentGroupId(groupId);\n      connections.add(cp);\n    }\n  }\n  snippetContentsCopy.setConnections(connections);\n  return snippetContentsCopy;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 1357,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 14973,
                        "startLineNumber": 445,
                        "startColumnNumber": 8,
                        "endLineNumber": 714,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  if (serviceIdMap == null) {\n    serviceIdMap=new HashMap<>();\n  }\n  final Set<ControllerServiceDTO> services=new HashSet<>();\n  if (snippetContents.getControllerServices() != null) {\n    for (    final ControllerServiceDTO serviceDTO : snippetContents.getControllerServices()) {\n      final ControllerServiceDTO service=dtoFactory.copy(serviceDTO);\n      service.setId(generateId(serviceDTO.getId(),idGenerationSeed,isCopy));\n      service.setState(ControllerServiceState.DISABLED.name());\n      services.add(service);\n      serviceIdMap.put(serviceDTO.getId(),service.getId());\n      if (isCopy) {\n        cloneComponentSpecificPolicies(ResourceFactory.getComponentResource(ResourceType.ControllerService,serviceDTO.getId(),serviceDTO.getName()),ResourceFactory.getComponentResource(ResourceType.ControllerService,service.getId(),service.getName()),idGenerationSeed);\n      }\n    }\n  }\n  for (  final ControllerServiceDTO serviceDTO : services) {\n    final Map<String,String> properties=serviceDTO.getProperties();\n    final Map<String,PropertyDescriptorDTO> descriptors=serviceDTO.getDescriptors();\n    if (properties != null && descriptors != null) {\n      for (      final PropertyDescriptorDTO descriptor : descriptors.values()) {\n        if (descriptor.getIdentifiesControllerService() != null) {\n          final String currentServiceId=properties.get(descriptor.getName());\n          if (currentServiceId == null) {\n            continue;\n          }\n          final String newServiceId=serviceIdMap.get(currentServiceId);\n          properties.put(descriptor.getName(),newServiceId);\n        }\n      }\n    }\n  }\n  snippetContentsCopy.setControllerServices(services);\n  final Set<LabelDTO> labels=new HashSet<>();\n  if (snippetContents.getLabels() != null) {\n    for (    final LabelDTO labelDTO : snippetContents.getLabels()) {\n      final LabelDTO label=dtoFactory.copy(labelDTO);\n      label.setId(generateId(labelDTO.getId(),idGenerationSeed,isCopy));\n      label.setParentGroupId(groupId);\n      labels.add(label);\n      if (isCopy) {\n        cloneComponentSpecificPolicies(ResourceFactory.getComponentResource(ResourceType.Label,labelDTO.getId(),labelDTO.getLabel()),ResourceFactory.getComponentResource(ResourceType.Label,label.getId(),label.getLabel()),idGenerationSeed);\n      }\n    }\n  }\n  snippetContentsCopy.setLabels(labels);\n  final Map<String,ConnectableDTO> connectableMap=new HashMap<>();\n  final Set<FunnelDTO> funnels=new HashSet<>();\n  if (snippetContents.getFunnels() != null) {\n    for (    final FunnelDTO funnelDTO : snippetContents.getFunnels()) {\n      final FunnelDTO cp=dtoFactory.copy(funnelDTO);\n      cp.setId(generateId(funnelDTO.getId(),idGenerationSeed,isCopy));\n      cp.setParentGroupId(groupId);\n      funnels.add(cp);\n      connectableMap.put(funnelDTO.getParentGroupId() + \"-\" + funnelDTO.getId(),dtoFactory.createConnectableDto(cp));\n      if (isCopy) {\n        cloneComponentSpecificPolicies(ResourceFactory.getComponentResource(ResourceType.Funnel,funnelDTO.getId(),funnelDTO.getId()),ResourceFactory.getComponentResource(ResourceType.Funnel,cp.getId(),cp.getId()),idGenerationSeed);\n      }\n    }\n  }\n  snippetContentsCopy.setFunnels(funnels);\n  final Set<PortDTO> inputPorts=new HashSet<>();\n  if (snippetContents.getInputPorts() != null) {\n    for (    final PortDTO portDTO : snippetContents.getInputPorts()) {\n      final PortDTO cp=dtoFactory.copy(portDTO);\n      cp.setId(generateId(portDTO.getId(),idGenerationSeed,isCopy));\n      cp.setParentGroupId(groupId);\n      cp.setState(ScheduledState.STOPPED.toString());\n      inputPorts.add(cp);\n      final ConnectableDTO portConnectable=dtoFactory.createConnectableDto(cp,ConnectableType.INPUT_PORT);\n      connectableMap.put(portDTO.getParentGroupId() + \"-\" + portDTO.getId(),portConnectable);\n      if (parentConnectableMap != null) {\n        parentConnectableMap.put(portDTO.getParentGroupId() + \"-\" + portDTO.getId(),portConnectable);\n      }\n      if (isCopy) {\n        cloneComponentSpecificPolicies(ResourceFactory.getComponentResource(ResourceType.InputPort,portDTO.getId(),portDTO.getName()),ResourceFactory.getComponentResource(ResourceType.InputPort,cp.getId(),cp.getName()),idGenerationSeed);\n      }\n    }\n  }\n  snippetContentsCopy.setInputPorts(inputPorts);\n  final Set<PortDTO> outputPorts=new HashSet<>();\n  if (snippetContents.getOutputPorts() != null) {\n    for (    final PortDTO portDTO : snippetContents.getOutputPorts()) {\n      final PortDTO cp=dtoFactory.copy(portDTO);\n      cp.setId(generateId(portDTO.getId(),idGenerationSeed,isCopy));\n      cp.setParentGroupId(groupId);\n      cp.setState(ScheduledState.STOPPED.toString());\n      outputPorts.add(cp);\n      final ConnectableDTO portConnectable=dtoFactory.createConnectableDto(cp,ConnectableType.OUTPUT_PORT);\n      connectableMap.put(portDTO.getParentGroupId() + \"-\" + portDTO.getId(),portConnectable);\n      if (parentConnectableMap != null) {\n        parentConnectableMap.put(portDTO.getParentGroupId() + \"-\" + portDTO.getId(),portConnectable);\n      }\n      if (isCopy) {\n        cloneComponentSpecificPolicies(ResourceFactory.getComponentResource(ResourceType.OutputPort,portDTO.getId(),portDTO.getName()),ResourceFactory.getComponentResource(ResourceType.OutputPort,cp.getId(),cp.getName()),idGenerationSeed);\n      }\n    }\n  }\n  snippetContentsCopy.setOutputPorts(outputPorts);\n  final Set<ProcessorDTO> processors=new HashSet<>();\n  if (snippetContents.getProcessors() != null) {\n    for (    final ProcessorDTO processorDTO : snippetContents.getProcessors()) {\n      final ProcessorDTO cp=dtoFactory.copy(processorDTO);\n      cp.setId(generateId(processorDTO.getId(),idGenerationSeed,isCopy));\n      cp.setParentGroupId(groupId);\n      if (processorDTO.getState() != null && processorDTO.getState().equals(ScheduledState.DISABLED.toString())) {\n        cp.setState(ScheduledState.DISABLED.toString());\n      }\n else {\n        cp.setState(ScheduledState.STOPPED.toString());\n      }\n      processors.add(cp);\n      connectableMap.put(processorDTO.getParentGroupId() + \"-\" + processorDTO.getId(),dtoFactory.createConnectableDto(cp));\n      if (isCopy) {\n        cloneComponentSpecificPolicies(ResourceFactory.getComponentResource(ResourceType.Processor,processorDTO.getId(),processorDTO.getName()),ResourceFactory.getComponentResource(ResourceType.Processor,cp.getId(),cp.getName()),idGenerationSeed);\n      }\n    }\n  }\n  snippetContentsCopy.setProcessors(processors);\n  updateControllerServiceIdentifiers(snippetContentsCopy,serviceIdMap);\n  final Set<ProcessGroupDTO> groups=new HashSet<>();\n  if (snippetContents.getProcessGroups() != null) {\n    for (    final ProcessGroupDTO groupDTO : snippetContents.getProcessGroups()) {\n      final ProcessGroupDTO cp=dtoFactory.copy(groupDTO,false);\n      cp.setId(generateId(groupDTO.getId(),idGenerationSeed,isCopy));\n      cp.setParentGroupId(groupId);\n      final FlowSnippetDTO contentsCopy=copyContentsForGroup(groupDTO.getContents(),cp.getId(),connectableMap,serviceIdMap,idGenerationSeed,isCopy);\n      cp.setContents(contentsCopy);\n      groups.add(cp);\n      if (isCopy) {\n        cloneComponentSpecificPolicies(ResourceFactory.getComponentResource(ResourceType.ProcessGroup,groupDTO.getId(),groupDTO.getName()),ResourceFactory.getComponentResource(ResourceType.ProcessGroup,cp.getId(),cp.getName()),idGenerationSeed);\n      }\n    }\n  }\n  snippetContentsCopy.setProcessGroups(groups);\n  final Set<RemoteProcessGroupDTO> remoteGroups=new HashSet<>();\n  if (snippetContents.getRemoteProcessGroups() != null) {\n    for (    final RemoteProcessGroupDTO remoteGroupDTO : snippetContents.getRemoteProcessGroups()) {\n      final RemoteProcessGroupDTO cp=dtoFactory.copy(remoteGroupDTO);\n      cp.setId(generateId(remoteGroupDTO.getId(),idGenerationSeed,isCopy));\n      cp.setParentGroupId(groupId);\n      final RemoteProcessGroupContentsDTO contents=cp.getContents();\n      if (contents != null && contents.getInputPorts() != null) {\n        for (        final RemoteProcessGroupPortDTO remotePort : contents.getInputPorts()) {\n          remotePort.setGroupId(cp.getId());\n          connectableMap.put(remoteGroupDTO.getId() + \"-\" + remotePort.getId(),dtoFactory.createConnectableDto(remotePort,ConnectableType.REMOTE_INPUT_PORT));\n        }\n      }\n      if (contents != null && contents.getOutputPorts() != null) {\n        for (        final RemoteProcessGroupPortDTO remotePort : contents.getOutputPorts()) {\n          remotePort.setGroupId(cp.getId());\n          connectableMap.put(remoteGroupDTO.getId() + \"-\" + remotePort.getId(),dtoFactory.createConnectableDto(remotePort,ConnectableType.REMOTE_OUTPUT_PORT));\n        }\n      }\n      remoteGroups.add(cp);\n      if (isCopy) {\n        cloneComponentSpecificPolicies(ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,remoteGroupDTO.getId(),remoteGroupDTO.getName()),ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,cp.getId(),cp.getName()),idGenerationSeed);\n      }\n    }\n  }\n  snippetContentsCopy.setRemoteProcessGroups(remoteGroups);\n  final Set<ConnectionDTO> connections=new HashSet<>();\n  if (snippetContents.getConnections() != null) {\n    for (    final ConnectionDTO connectionDTO : snippetContents.getConnections()) {\n      final ConnectionDTO cp=dtoFactory.copy(connectionDTO);\n      final ConnectableDTO source=connectableMap.get(cp.getSource().getGroupId() + \"-\" + cp.getSource().getId());\n      final ConnectableDTO destination=connectableMap.get(cp.getDestination().getGroupId() + \"-\" + cp.getDestination().getId());\n      if (source == null || destination == null) {\n        throw new IllegalArgumentException(\"The flow snippet contains a Connection that references a component that is not included.\");\n      }\n      cp.setId(generateId(connectionDTO.getId(),idGenerationSeed,isCopy));\n      cp.setSource(source);\n      cp.setDestination(destination);\n      cp.setParentGroupId(groupId);\n      connections.add(cp);\n    }\n  }\n  snippetContentsCopy.setConnections(connections);\n  return snippetContentsCopy;\n}\n catch (Exception e) {\n  rollbackClonedPolicies(snippetContentsCopy);\n  throw e;\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 1370,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 15063,
                        "startLineNumber": 442,
                        "startColumnNumber": 129,
                        "endLineNumber": 715,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final FlowSnippetDTO snippetContentsCopy=new FlowSnippetDTO();\n  try {\n    if (serviceIdMap == null) {\n      serviceIdMap=new HashMap<>();\n    }\n    final Set<ControllerServiceDTO> services=new HashSet<>();\n    if (snippetContents.getControllerServices() != null) {\n      for (      final ControllerServiceDTO serviceDTO : snippetContents.getControllerServices()) {\n        final ControllerServiceDTO service=dtoFactory.copy(serviceDTO);\n        service.setId(generateId(serviceDTO.getId(),idGenerationSeed,isCopy));\n        service.setState(ControllerServiceState.DISABLED.name());\n        services.add(service);\n        serviceIdMap.put(serviceDTO.getId(),service.getId());\n        if (isCopy) {\n          cloneComponentSpecificPolicies(ResourceFactory.getComponentResource(ResourceType.ControllerService,serviceDTO.getId(),serviceDTO.getName()),ResourceFactory.getComponentResource(ResourceType.ControllerService,service.getId(),service.getName()),idGenerationSeed);\n        }\n      }\n    }\n    for (    final ControllerServiceDTO serviceDTO : services) {\n      final Map<String,String> properties=serviceDTO.getProperties();\n      final Map<String,PropertyDescriptorDTO> descriptors=serviceDTO.getDescriptors();\n      if (properties != null && descriptors != null) {\n        for (        final PropertyDescriptorDTO descriptor : descriptors.values()) {\n          if (descriptor.getIdentifiesControllerService() != null) {\n            final String currentServiceId=properties.get(descriptor.getName());\n            if (currentServiceId == null) {\n              continue;\n            }\n            final String newServiceId=serviceIdMap.get(currentServiceId);\n            properties.put(descriptor.getName(),newServiceId);\n          }\n        }\n      }\n    }\n    snippetContentsCopy.setControllerServices(services);\n    final Set<LabelDTO> labels=new HashSet<>();\n    if (snippetContents.getLabels() != null) {\n      for (      final LabelDTO labelDTO : snippetContents.getLabels()) {\n        final LabelDTO label=dtoFactory.copy(labelDTO);\n        label.setId(generateId(labelDTO.getId(),idGenerationSeed,isCopy));\n        label.setParentGroupId(groupId);\n        labels.add(label);\n        if (isCopy) {\n          cloneComponentSpecificPolicies(ResourceFactory.getComponentResource(ResourceType.Label,labelDTO.getId(),labelDTO.getLabel()),ResourceFactory.getComponentResource(ResourceType.Label,label.getId(),label.getLabel()),idGenerationSeed);\n        }\n      }\n    }\n    snippetContentsCopy.setLabels(labels);\n    final Map<String,ConnectableDTO> connectableMap=new HashMap<>();\n    final Set<FunnelDTO> funnels=new HashSet<>();\n    if (snippetContents.getFunnels() != null) {\n      for (      final FunnelDTO funnelDTO : snippetContents.getFunnels()) {\n        final FunnelDTO cp=dtoFactory.copy(funnelDTO);\n        cp.setId(generateId(funnelDTO.getId(),idGenerationSeed,isCopy));\n        cp.setParentGroupId(groupId);\n        funnels.add(cp);\n        connectableMap.put(funnelDTO.getParentGroupId() + \"-\" + funnelDTO.getId(),dtoFactory.createConnectableDto(cp));\n        if (isCopy) {\n          cloneComponentSpecificPolicies(ResourceFactory.getComponentResource(ResourceType.Funnel,funnelDTO.getId(),funnelDTO.getId()),ResourceFactory.getComponentResource(ResourceType.Funnel,cp.getId(),cp.getId()),idGenerationSeed);\n        }\n      }\n    }\n    snippetContentsCopy.setFunnels(funnels);\n    final Set<PortDTO> inputPorts=new HashSet<>();\n    if (snippetContents.getInputPorts() != null) {\n      for (      final PortDTO portDTO : snippetContents.getInputPorts()) {\n        final PortDTO cp=dtoFactory.copy(portDTO);\n        cp.setId(generateId(portDTO.getId(),idGenerationSeed,isCopy));\n        cp.setParentGroupId(groupId);\n        cp.setState(ScheduledState.STOPPED.toString());\n        inputPorts.add(cp);\n        final ConnectableDTO portConnectable=dtoFactory.createConnectableDto(cp,ConnectableType.INPUT_PORT);\n        connectableMap.put(portDTO.getParentGroupId() + \"-\" + portDTO.getId(),portConnectable);\n        if (parentConnectableMap != null) {\n          parentConnectableMap.put(portDTO.getParentGroupId() + \"-\" + portDTO.getId(),portConnectable);\n        }\n        if (isCopy) {\n          cloneComponentSpecificPolicies(ResourceFactory.getComponentResource(ResourceType.InputPort,portDTO.getId(),portDTO.getName()),ResourceFactory.getComponentResource(ResourceType.InputPort,cp.getId(),cp.getName()),idGenerationSeed);\n        }\n      }\n    }\n    snippetContentsCopy.setInputPorts(inputPorts);\n    final Set<PortDTO> outputPorts=new HashSet<>();\n    if (snippetContents.getOutputPorts() != null) {\n      for (      final PortDTO portDTO : snippetContents.getOutputPorts()) {\n        final PortDTO cp=dtoFactory.copy(portDTO);\n        cp.setId(generateId(portDTO.getId(),idGenerationSeed,isCopy));\n        cp.setParentGroupId(groupId);\n        cp.setState(ScheduledState.STOPPED.toString());\n        outputPorts.add(cp);\n        final ConnectableDTO portConnectable=dtoFactory.createConnectableDto(cp,ConnectableType.OUTPUT_PORT);\n        connectableMap.put(portDTO.getParentGroupId() + \"-\" + portDTO.getId(),portConnectable);\n        if (parentConnectableMap != null) {\n          parentConnectableMap.put(portDTO.getParentGroupId() + \"-\" + portDTO.getId(),portConnectable);\n        }\n        if (isCopy) {\n          cloneComponentSpecificPolicies(ResourceFactory.getComponentResource(ResourceType.OutputPort,portDTO.getId(),portDTO.getName()),ResourceFactory.getComponentResource(ResourceType.OutputPort,cp.getId(),cp.getName()),idGenerationSeed);\n        }\n      }\n    }\n    snippetContentsCopy.setOutputPorts(outputPorts);\n    final Set<ProcessorDTO> processors=new HashSet<>();\n    if (snippetContents.getProcessors() != null) {\n      for (      final ProcessorDTO processorDTO : snippetContents.getProcessors()) {\n        final ProcessorDTO cp=dtoFactory.copy(processorDTO);\n        cp.setId(generateId(processorDTO.getId(),idGenerationSeed,isCopy));\n        cp.setParentGroupId(groupId);\n        if (processorDTO.getState() != null && processorDTO.getState().equals(ScheduledState.DISABLED.toString())) {\n          cp.setState(ScheduledState.DISABLED.toString());\n        }\n else {\n          cp.setState(ScheduledState.STOPPED.toString());\n        }\n        processors.add(cp);\n        connectableMap.put(processorDTO.getParentGroupId() + \"-\" + processorDTO.getId(),dtoFactory.createConnectableDto(cp));\n        if (isCopy) {\n          cloneComponentSpecificPolicies(ResourceFactory.getComponentResource(ResourceType.Processor,processorDTO.getId(),processorDTO.getName()),ResourceFactory.getComponentResource(ResourceType.Processor,cp.getId(),cp.getName()),idGenerationSeed);\n        }\n      }\n    }\n    snippetContentsCopy.setProcessors(processors);\n    updateControllerServiceIdentifiers(snippetContentsCopy,serviceIdMap);\n    final Set<ProcessGroupDTO> groups=new HashSet<>();\n    if (snippetContents.getProcessGroups() != null) {\n      for (      final ProcessGroupDTO groupDTO : snippetContents.getProcessGroups()) {\n        final ProcessGroupDTO cp=dtoFactory.copy(groupDTO,false);\n        cp.setId(generateId(groupDTO.getId(),idGenerationSeed,isCopy));\n        cp.setParentGroupId(groupId);\n        final FlowSnippetDTO contentsCopy=copyContentsForGroup(groupDTO.getContents(),cp.getId(),connectableMap,serviceIdMap,idGenerationSeed,isCopy);\n        cp.setContents(contentsCopy);\n        groups.add(cp);\n        if (isCopy) {\n          cloneComponentSpecificPolicies(ResourceFactory.getComponentResource(ResourceType.ProcessGroup,groupDTO.getId(),groupDTO.getName()),ResourceFactory.getComponentResource(ResourceType.ProcessGroup,cp.getId(),cp.getName()),idGenerationSeed);\n        }\n      }\n    }\n    snippetContentsCopy.setProcessGroups(groups);\n    final Set<RemoteProcessGroupDTO> remoteGroups=new HashSet<>();\n    if (snippetContents.getRemoteProcessGroups() != null) {\n      for (      final RemoteProcessGroupDTO remoteGroupDTO : snippetContents.getRemoteProcessGroups()) {\n        final RemoteProcessGroupDTO cp=dtoFactory.copy(remoteGroupDTO);\n        cp.setId(generateId(remoteGroupDTO.getId(),idGenerationSeed,isCopy));\n        cp.setParentGroupId(groupId);\n        final RemoteProcessGroupContentsDTO contents=cp.getContents();\n        if (contents != null && contents.getInputPorts() != null) {\n          for (          final RemoteProcessGroupPortDTO remotePort : contents.getInputPorts()) {\n            remotePort.setGroupId(cp.getId());\n            connectableMap.put(remoteGroupDTO.getId() + \"-\" + remotePort.getId(),dtoFactory.createConnectableDto(remotePort,ConnectableType.REMOTE_INPUT_PORT));\n          }\n        }\n        if (contents != null && contents.getOutputPorts() != null) {\n          for (          final RemoteProcessGroupPortDTO remotePort : contents.getOutputPorts()) {\n            remotePort.setGroupId(cp.getId());\n            connectableMap.put(remoteGroupDTO.getId() + \"-\" + remotePort.getId(),dtoFactory.createConnectableDto(remotePort,ConnectableType.REMOTE_OUTPUT_PORT));\n          }\n        }\n        remoteGroups.add(cp);\n        if (isCopy) {\n          cloneComponentSpecificPolicies(ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,remoteGroupDTO.getId(),remoteGroupDTO.getName()),ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,cp.getId(),cp.getName()),idGenerationSeed);\n        }\n      }\n    }\n    snippetContentsCopy.setRemoteProcessGroups(remoteGroups);\n    final Set<ConnectionDTO> connections=new HashSet<>();\n    if (snippetContents.getConnections() != null) {\n      for (      final ConnectionDTO connectionDTO : snippetContents.getConnections()) {\n        final ConnectionDTO cp=dtoFactory.copy(connectionDTO);\n        final ConnectableDTO source=connectableMap.get(cp.getSource().getGroupId() + \"-\" + cp.getSource().getId());\n        final ConnectableDTO destination=connectableMap.get(cp.getDestination().getGroupId() + \"-\" + cp.getDestination().getId());\n        if (source == null || destination == null) {\n          throw new IllegalArgumentException(\"The flow snippet contains a Connection that references a component that is not included.\");\n        }\n        cp.setId(generateId(connectionDTO.getId(),idGenerationSeed,isCopy));\n        cp.setSource(source);\n        cp.setDestination(destination);\n        cp.setParentGroupId(groupId);\n        connections.add(cp);\n      }\n    }\n    snippetContentsCopy.setConnections(connections);\n    return snippetContentsCopy;\n  }\n catch (  Exception e) {\n    rollbackClonedPolicies(snippetContentsCopy);\n    throw e;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 1380,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 15352,
                        "startLineNumber": 441,
                        "startColumnNumber": 4,
                        "endLineNumber": 715,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private FlowSnippetDTO copyContentsForGroup(final FlowSnippetDTO snippetContents,final String groupId,final Map<String,ConnectableDTO> parentConnectableMap,Map<String,String> serviceIdMap,final String idGenerationSeed,boolean isCopy){\n  final FlowSnippetDTO snippetContentsCopy=new FlowSnippetDTO();\n  try {\n    if (serviceIdMap == null) {\n      serviceIdMap=new HashMap<>();\n    }\n    final Set<ControllerServiceDTO> services=new HashSet<>();\n    if (snippetContents.getControllerServices() != null) {\n      for (      final ControllerServiceDTO serviceDTO : snippetContents.getControllerServices()) {\n        final ControllerServiceDTO service=dtoFactory.copy(serviceDTO);\n        service.setId(generateId(serviceDTO.getId(),idGenerationSeed,isCopy));\n        service.setState(ControllerServiceState.DISABLED.name());\n        services.add(service);\n        serviceIdMap.put(serviceDTO.getId(),service.getId());\n        if (isCopy) {\n          cloneComponentSpecificPolicies(ResourceFactory.getComponentResource(ResourceType.ControllerService,serviceDTO.getId(),serviceDTO.getName()),ResourceFactory.getComponentResource(ResourceType.ControllerService,service.getId(),service.getName()),idGenerationSeed);\n        }\n      }\n    }\n    for (    final ControllerServiceDTO serviceDTO : services) {\n      final Map<String,String> properties=serviceDTO.getProperties();\n      final Map<String,PropertyDescriptorDTO> descriptors=serviceDTO.getDescriptors();\n      if (properties != null && descriptors != null) {\n        for (        final PropertyDescriptorDTO descriptor : descriptors.values()) {\n          if (descriptor.getIdentifiesControllerService() != null) {\n            final String currentServiceId=properties.get(descriptor.getName());\n            if (currentServiceId == null) {\n              continue;\n            }\n            final String newServiceId=serviceIdMap.get(currentServiceId);\n            properties.put(descriptor.getName(),newServiceId);\n          }\n        }\n      }\n    }\n    snippetContentsCopy.setControllerServices(services);\n    final Set<LabelDTO> labels=new HashSet<>();\n    if (snippetContents.getLabels() != null) {\n      for (      final LabelDTO labelDTO : snippetContents.getLabels()) {\n        final LabelDTO label=dtoFactory.copy(labelDTO);\n        label.setId(generateId(labelDTO.getId(),idGenerationSeed,isCopy));\n        label.setParentGroupId(groupId);\n        labels.add(label);\n        if (isCopy) {\n          cloneComponentSpecificPolicies(ResourceFactory.getComponentResource(ResourceType.Label,labelDTO.getId(),labelDTO.getLabel()),ResourceFactory.getComponentResource(ResourceType.Label,label.getId(),label.getLabel()),idGenerationSeed);\n        }\n      }\n    }\n    snippetContentsCopy.setLabels(labels);\n    final Map<String,ConnectableDTO> connectableMap=new HashMap<>();\n    final Set<FunnelDTO> funnels=new HashSet<>();\n    if (snippetContents.getFunnels() != null) {\n      for (      final FunnelDTO funnelDTO : snippetContents.getFunnels()) {\n        final FunnelDTO cp=dtoFactory.copy(funnelDTO);\n        cp.setId(generateId(funnelDTO.getId(),idGenerationSeed,isCopy));\n        cp.setParentGroupId(groupId);\n        funnels.add(cp);\n        connectableMap.put(funnelDTO.getParentGroupId() + \"-\" + funnelDTO.getId(),dtoFactory.createConnectableDto(cp));\n        if (isCopy) {\n          cloneComponentSpecificPolicies(ResourceFactory.getComponentResource(ResourceType.Funnel,funnelDTO.getId(),funnelDTO.getId()),ResourceFactory.getComponentResource(ResourceType.Funnel,cp.getId(),cp.getId()),idGenerationSeed);\n        }\n      }\n    }\n    snippetContentsCopy.setFunnels(funnels);\n    final Set<PortDTO> inputPorts=new HashSet<>();\n    if (snippetContents.getInputPorts() != null) {\n      for (      final PortDTO portDTO : snippetContents.getInputPorts()) {\n        final PortDTO cp=dtoFactory.copy(portDTO);\n        cp.setId(generateId(portDTO.getId(),idGenerationSeed,isCopy));\n        cp.setParentGroupId(groupId);\n        cp.setState(ScheduledState.STOPPED.toString());\n        inputPorts.add(cp);\n        final ConnectableDTO portConnectable=dtoFactory.createConnectableDto(cp,ConnectableType.INPUT_PORT);\n        connectableMap.put(portDTO.getParentGroupId() + \"-\" + portDTO.getId(),portConnectable);\n        if (parentConnectableMap != null) {\n          parentConnectableMap.put(portDTO.getParentGroupId() + \"-\" + portDTO.getId(),portConnectable);\n        }\n        if (isCopy) {\n          cloneComponentSpecificPolicies(ResourceFactory.getComponentResource(ResourceType.InputPort,portDTO.getId(),portDTO.getName()),ResourceFactory.getComponentResource(ResourceType.InputPort,cp.getId(),cp.getName()),idGenerationSeed);\n        }\n      }\n    }\n    snippetContentsCopy.setInputPorts(inputPorts);\n    final Set<PortDTO> outputPorts=new HashSet<>();\n    if (snippetContents.getOutputPorts() != null) {\n      for (      final PortDTO portDTO : snippetContents.getOutputPorts()) {\n        final PortDTO cp=dtoFactory.copy(portDTO);\n        cp.setId(generateId(portDTO.getId(),idGenerationSeed,isCopy));\n        cp.setParentGroupId(groupId);\n        cp.setState(ScheduledState.STOPPED.toString());\n        outputPorts.add(cp);\n        final ConnectableDTO portConnectable=dtoFactory.createConnectableDto(cp,ConnectableType.OUTPUT_PORT);\n        connectableMap.put(portDTO.getParentGroupId() + \"-\" + portDTO.getId(),portConnectable);\n        if (parentConnectableMap != null) {\n          parentConnectableMap.put(portDTO.getParentGroupId() + \"-\" + portDTO.getId(),portConnectable);\n        }\n        if (isCopy) {\n          cloneComponentSpecificPolicies(ResourceFactory.getComponentResource(ResourceType.OutputPort,portDTO.getId(),portDTO.getName()),ResourceFactory.getComponentResource(ResourceType.OutputPort,cp.getId(),cp.getName()),idGenerationSeed);\n        }\n      }\n    }\n    snippetContentsCopy.setOutputPorts(outputPorts);\n    final Set<ProcessorDTO> processors=new HashSet<>();\n    if (snippetContents.getProcessors() != null) {\n      for (      final ProcessorDTO processorDTO : snippetContents.getProcessors()) {\n        final ProcessorDTO cp=dtoFactory.copy(processorDTO);\n        cp.setId(generateId(processorDTO.getId(),idGenerationSeed,isCopy));\n        cp.setParentGroupId(groupId);\n        if (processorDTO.getState() != null && processorDTO.getState().equals(ScheduledState.DISABLED.toString())) {\n          cp.setState(ScheduledState.DISABLED.toString());\n        }\n else {\n          cp.setState(ScheduledState.STOPPED.toString());\n        }\n        processors.add(cp);\n        connectableMap.put(processorDTO.getParentGroupId() + \"-\" + processorDTO.getId(),dtoFactory.createConnectableDto(cp));\n        if (isCopy) {\n          cloneComponentSpecificPolicies(ResourceFactory.getComponentResource(ResourceType.Processor,processorDTO.getId(),processorDTO.getName()),ResourceFactory.getComponentResource(ResourceType.Processor,cp.getId(),cp.getName()),idGenerationSeed);\n        }\n      }\n    }\n    snippetContentsCopy.setProcessors(processors);\n    updateControllerServiceIdentifiers(snippetContentsCopy,serviceIdMap);\n    final Set<ProcessGroupDTO> groups=new HashSet<>();\n    if (snippetContents.getProcessGroups() != null) {\n      for (      final ProcessGroupDTO groupDTO : snippetContents.getProcessGroups()) {\n        final ProcessGroupDTO cp=dtoFactory.copy(groupDTO,false);\n        cp.setId(generateId(groupDTO.getId(),idGenerationSeed,isCopy));\n        cp.setParentGroupId(groupId);\n        final FlowSnippetDTO contentsCopy=copyContentsForGroup(groupDTO.getContents(),cp.getId(),connectableMap,serviceIdMap,idGenerationSeed,isCopy);\n        cp.setContents(contentsCopy);\n        groups.add(cp);\n        if (isCopy) {\n          cloneComponentSpecificPolicies(ResourceFactory.getComponentResource(ResourceType.ProcessGroup,groupDTO.getId(),groupDTO.getName()),ResourceFactory.getComponentResource(ResourceType.ProcessGroup,cp.getId(),cp.getName()),idGenerationSeed);\n        }\n      }\n    }\n    snippetContentsCopy.setProcessGroups(groups);\n    final Set<RemoteProcessGroupDTO> remoteGroups=new HashSet<>();\n    if (snippetContents.getRemoteProcessGroups() != null) {\n      for (      final RemoteProcessGroupDTO remoteGroupDTO : snippetContents.getRemoteProcessGroups()) {\n        final RemoteProcessGroupDTO cp=dtoFactory.copy(remoteGroupDTO);\n        cp.setId(generateId(remoteGroupDTO.getId(),idGenerationSeed,isCopy));\n        cp.setParentGroupId(groupId);\n        final RemoteProcessGroupContentsDTO contents=cp.getContents();\n        if (contents != null && contents.getInputPorts() != null) {\n          for (          final RemoteProcessGroupPortDTO remotePort : contents.getInputPorts()) {\n            remotePort.setGroupId(cp.getId());\n            connectableMap.put(remoteGroupDTO.getId() + \"-\" + remotePort.getId(),dtoFactory.createConnectableDto(remotePort,ConnectableType.REMOTE_INPUT_PORT));\n          }\n        }\n        if (contents != null && contents.getOutputPorts() != null) {\n          for (          final RemoteProcessGroupPortDTO remotePort : contents.getOutputPorts()) {\n            remotePort.setGroupId(cp.getId());\n            connectableMap.put(remoteGroupDTO.getId() + \"-\" + remotePort.getId(),dtoFactory.createConnectableDto(remotePort,ConnectableType.REMOTE_OUTPUT_PORT));\n          }\n        }\n        remoteGroups.add(cp);\n        if (isCopy) {\n          cloneComponentSpecificPolicies(ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,remoteGroupDTO.getId(),remoteGroupDTO.getName()),ResourceFactory.getComponentResource(ResourceType.RemoteProcessGroup,cp.getId(),cp.getName()),idGenerationSeed);\n        }\n      }\n    }\n    snippetContentsCopy.setRemoteProcessGroups(remoteGroups);\n    final Set<ConnectionDTO> connections=new HashSet<>();\n    if (snippetContents.getConnections() != null) {\n      for (      final ConnectionDTO connectionDTO : snippetContents.getConnections()) {\n        final ConnectionDTO cp=dtoFactory.copy(connectionDTO);\n        final ConnectableDTO source=connectableMap.get(cp.getSource().getGroupId() + \"-\" + cp.getSource().getId());\n        final ConnectableDTO destination=connectableMap.get(cp.getDestination().getGroupId() + \"-\" + cp.getDestination().getId());\n        if (source == null || destination == null) {\n          throw new IllegalArgumentException(\"The flow snippet contains a Connection that references a component that is not included.\");\n        }\n        cp.setId(generateId(connectionDTO.getId(),idGenerationSeed,isCopy));\n        cp.setSource(source);\n        cp.setDestination(destination);\n        cp.setParentGroupId(groupId);\n        connections.add(cp);\n      }\n    }\n    snippetContentsCopy.setConnections(connections);\n    return snippetContentsCopy;\n  }\n catch (  Exception e) {\n    rollbackClonedPolicies(snippetContentsCopy);\n    throw e;\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 1422,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 127,
                    "startLineNumber": 693,
                    "startColumnNumber": 24,
                    "endLineNumber": 693,
                    "endColumnNumber": 151
                },
                "nodeContext": "throw new IllegalArgumentException(\"The flow snippet contains a Connection that references a component that is not included.\");\n",
                "nodeType": "ThrowStatement",
                "astNodeNumber": 5,
                "astHeight": 4
            },
            "tokenLength": 15,
            "type": "java.lang.IllegalArgumentException"
        }
    ],
    "positionList": [
        {
            "charLength": 120,
            "startLineNumber": 693,
            "startColumnNumber": 30,
            "endLineNumber": 693,
            "endColumnNumber": 150
        }
    ],
    "layoutRelationDataList": []
}