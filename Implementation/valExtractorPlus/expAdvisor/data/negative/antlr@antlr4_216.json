{
    "id": 216,
    "expression": "new STErrorListener(){\n  @Override public void compileTimeError(  STMessage msg){\n    reportError(msg);\n  }\n  @Override public void runTimeError(  STMessage msg){\n    reportError(msg);\n  }\n  @Override public void IOError(  STMessage msg){\n    reportError(msg);\n  }\n  @Override public void internalError(  STMessage msg){\n    reportError(msg);\n  }\n  private void reportError(  STMessage msg){\n    getCodeGenerator().tool.errMgr.toolError(ErrorType.STRING_TEMPLATE_WARNING,msg.cause,msg.toString());\n  }\n}\n",
    "projectName": "antlr@antlr4",
    "commitID": "1672bc073983b7f4281ea7e2fab19406a3b29a2d",
    "filePath": "tool/src/org/antlr/v4/codegen/Target.java",
    "occurrences": 1,
    "isArithmeticExpression": 0,
    "isGetTypeMethod": 0,
    "expressionList": [
        {
            "nodeContext": "new STErrorListener(){\n  @Override public void compileTimeError(  STMessage msg){\n    reportError(msg);\n  }\n  @Override public void runTimeError(  STMessage msg){\n    reportError(msg);\n  }\n  @Override public void IOError(  STMessage msg){\n    reportError(msg);\n  }\n  @Override public void internalError(  STMessage msg){\n    reportError(msg);\n  }\n  private void reportError(  STMessage msg){\n    getCodeGenerator().tool.errMgr.toolError(ErrorType.STRING_TEMPLATE_WARNING,msg.cause,msg.toString());\n  }\n}\n",
            "nodeType": "ClassInstanceCreation",
            "nodePosition": {
                "charLength": 529,
                "startLineNumber": 464,
                "startColumnNumber": 21,
                "endLineNumber": 488,
                "endColumnNumber": 3
            },
            "astNodeNumber": 91,
            "astHeight": 10,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 549,
                        "startLineNumber": 464,
                        "startColumnNumber": 2,
                        "endLineNumber": 488,
                        "endColumnNumber": 4
                    },
                    "nodeContext": "result.setListener(new STErrorListener(){\n  @Override public void compileTimeError(  STMessage msg){\n    reportError(msg);\n  }\n  @Override public void runTimeError(  STMessage msg){\n    reportError(msg);\n  }\n  @Override public void IOError(  STMessage msg){\n    reportError(msg);\n  }\n  @Override public void internalError(  STMessage msg){\n    reportError(msg);\n  }\n  private void reportError(  STMessage msg){\n    getCodeGenerator().tool.errMgr.toolError(ErrorType.STRING_TEMPLATE_WARNING,msg.cause,msg.toString());\n  }\n}\n)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 94,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 550,
                        "startLineNumber": 464,
                        "startColumnNumber": 2,
                        "endLineNumber": 488,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "result.setListener(new STErrorListener(){\n  @Override public void compileTimeError(  STMessage msg){\n    reportError(msg);\n  }\n  @Override public void runTimeError(  STMessage msg){\n    reportError(msg);\n  }\n  @Override public void IOError(  STMessage msg){\n    reportError(msg);\n  }\n  @Override public void internalError(  STMessage msg){\n    reportError(msg);\n  }\n  private void reportError(  STMessage msg){\n    getCodeGenerator().tool.errMgr.toolError(ErrorType.STRING_TEMPLATE_WARNING,msg.cause,msg.toString());\n  }\n}\n);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 95,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1089,
                        "startLineNumber": 450,
                        "startColumnNumber": 35,
                        "endLineNumber": 491,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "{\n  String groupFileName=CodeGenerator.TEMPLATE_ROOT + \"/\" + getLanguage()+ \"/\"+ getLanguage()+ STGroup.GROUP_FILE_EXTENSION;\n  STGroup result=null;\n  try {\n    result=new STGroupFile(groupFileName);\n  }\n catch (  IllegalArgumentException iae) {\n    gen.tool.errMgr.toolError(ErrorType.MISSING_CODE_GEN_TEMPLATES,iae,language);\n  }\n  if (result == null)   return null;\n  result.registerRenderer(Integer.class,new NumberRenderer());\n  result.registerRenderer(String.class,new StringRenderer());\n  result.setListener(new STErrorListener(){\n    @Override public void compileTimeError(    STMessage msg){\n      reportError(msg);\n    }\n    @Override public void runTimeError(    STMessage msg){\n      reportError(msg);\n    }\n    @Override public void IOError(    STMessage msg){\n      reportError(msg);\n    }\n    @Override public void internalError(    STMessage msg){\n      reportError(msg);\n    }\n    private void reportError(    STMessage msg){\n      getCodeGenerator().tool.errMgr.toolError(ErrorType.STRING_TEMPLATE_WARNING,msg.cause,msg.toString());\n    }\n  }\n);\n  return result;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 176,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1123,
                        "startLineNumber": 450,
                        "startColumnNumber": 1,
                        "endLineNumber": 491,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "protected STGroup loadTemplates(){\n  String groupFileName=CodeGenerator.TEMPLATE_ROOT + \"/\" + getLanguage()+ \"/\"+ getLanguage()+ STGroup.GROUP_FILE_EXTENSION;\n  STGroup result=null;\n  try {\n    result=new STGroupFile(groupFileName);\n  }\n catch (  IllegalArgumentException iae) {\n    gen.tool.errMgr.toolError(ErrorType.MISSING_CODE_GEN_TEMPLATES,iae,language);\n  }\n  if (result == null)   return null;\n  result.registerRenderer(Integer.class,new NumberRenderer());\n  result.registerRenderer(String.class,new StringRenderer());\n  result.setListener(new STErrorListener(){\n    @Override public void compileTimeError(    STMessage msg){\n      reportError(msg);\n    }\n    @Override public void runTimeError(    STMessage msg){\n      reportError(msg);\n    }\n    @Override public void IOError(    STMessage msg){\n      reportError(msg);\n    }\n    @Override public void internalError(    STMessage msg){\n      reportError(msg);\n    }\n    private void reportError(    STMessage msg){\n      getCodeGenerator().tool.errMgr.toolError(ErrorType.STRING_TEMPLATE_WARNING,msg.cause,msg.toString());\n    }\n  }\n);\n  return result;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 181,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 550,
                    "startLineNumber": 464,
                    "startColumnNumber": 2,
                    "endLineNumber": 488,
                    "endColumnNumber": 5
                },
                "nodeContext": "result.setListener(new STErrorListener(){\n  @Override public void compileTimeError(  STMessage msg){\n    reportError(msg);\n  }\n  @Override public void runTimeError(  STMessage msg){\n    reportError(msg);\n  }\n  @Override public void IOError(  STMessage msg){\n    reportError(msg);\n  }\n  @Override public void internalError(  STMessage msg){\n    reportError(msg);\n  }\n  private void reportError(  STMessage msg){\n    getCodeGenerator().tool.errMgr.toolError(ErrorType.STRING_TEMPLATE_WARNING,msg.cause,msg.toString());\n  }\n}\n);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 95,
                "astHeight": 12
            },
            "tokenLength": 40,
            "type": ""
        }
    ],
    "positionList": [
        {
            "charLength": 529,
            "startLineNumber": 464,
            "startColumnNumber": 21,
            "endLineNumber": 488,
            "endColumnNumber": 3
        }
    ],
    "layoutRelationDataList": []
}