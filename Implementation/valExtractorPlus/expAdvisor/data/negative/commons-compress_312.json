{
    "id": 312,
    "expression": "0",
    "projectName": "commons-compress",
    "commitID": "e3ea7b6607e7c96b9e2b6813c05bfba887c8e226",
    "filePath": "src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java",
    "occurrences": 16,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 0,
    "expressionList": [
        {
            "nodeContext": "0",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 117,
                "startColumnNumber": 34,
                "endLineNumber": 117,
                "endColumnNumber": 35
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 23,
                        "startLineNumber": 117,
                        "startColumnNumber": 12,
                        "endLineNumber": 117,
                        "endColumnNumber": 35
                    },
                    "nodeContext": "totalNumberOfValues < 0",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 179,
                        "startLineNumber": 117,
                        "startColumnNumber": 8,
                        "endLineNumber": 120,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (totalNumberOfValues < 0) {\n  throw new IllegalArgumentException(\"totalNumberOfValues must be bigger than 0, is \" + totalNumberOfValues);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 12,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3358,
                        "startLineNumber": 116,
                        "startColumnNumber": 110,
                        "endLineNumber": 204,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (totalNumberOfValues < 0) {\n    throw new IllegalArgumentException(\"totalNumberOfValues must be bigger than 0, is \" + totalNumberOfValues);\n  }\n  final int size=inputStream.read() + 1;\n  if (size == 0) {\n    throw new IOException(\"Cannot read the size of the encoded tree, unexpected end of stream\");\n  }\n  final byte[] encodedTree=new byte[size];\n  final int read=IOUtils.readFully(inputStream,encodedTree);\n  if (read != size) {\n    throw new EOFException();\n  }\n  int maxLength=0;\n  final int[] originalBitLengths=new int[totalNumberOfValues];\n  int pos=0;\n  for (  final byte b : encodedTree) {\n    final int numberOfValues=((b & 0xF0) >> 4) + 1;\n    if (pos + numberOfValues > totalNumberOfValues) {\n      throw new IOException(\"Number of values exceeds given total number of values\");\n    }\n    final int bitLength=(b & 0x0F) + 1;\n    for (int j=0; j < numberOfValues; j++) {\n      originalBitLengths[pos++]=bitLength;\n    }\n    maxLength=Math.max(maxLength,bitLength);\n  }\n  final int[] permutation=new int[originalBitLengths.length];\n  for (int k=0; k < permutation.length; k++) {\n    permutation[k]=k;\n  }\n  int c=0;\n  final int[] sortedBitLengths=new int[originalBitLengths.length];\n  for (int k=0; k < originalBitLengths.length; k++) {\n    for (int l=0; l < originalBitLengths.length; l++) {\n      if (originalBitLengths[l] == k) {\n        sortedBitLengths[c]=k;\n        permutation[c]=l;\n        c++;\n      }\n    }\n  }\n  int code=0;\n  int codeIncrement=0;\n  int lastBitLength=0;\n  final int[] codes=new int[totalNumberOfValues];\n  for (int i=totalNumberOfValues - 1; i >= 0; i--) {\n    code=code + codeIncrement;\n    if (sortedBitLengths[i] != lastBitLength) {\n      lastBitLength=sortedBitLengths[i];\n      codeIncrement=1 << (16 - lastBitLength);\n    }\n    codes[permutation[i]]=code;\n  }\n  final BinaryTree tree=new BinaryTree(maxLength);\n  for (int k=0; k < codes.length; k++) {\n    final int bitLength=originalBitLengths[k];\n    if (bitLength > 0) {\n      tree.addLeaf(0,Integer.reverse(codes[k] << 16),bitLength,k);\n    }\n  }\n  return tree;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 391,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3548,
                        "startLineNumber": 113,
                        "startColumnNumber": 4,
                        "endLineNumber": 204,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Decodes the packed binary tree from the specified stream.\n */\nstatic BinaryTree decode(final InputStream inputStream,final int totalNumberOfValues) throws IOException {\n  if (totalNumberOfValues < 0) {\n    throw new IllegalArgumentException(\"totalNumberOfValues must be bigger than 0, is \" + totalNumberOfValues);\n  }\n  final int size=inputStream.read() + 1;\n  if (size == 0) {\n    throw new IOException(\"Cannot read the size of the encoded tree, unexpected end of stream\");\n  }\n  final byte[] encodedTree=new byte[size];\n  final int read=IOUtils.readFully(inputStream,encodedTree);\n  if (read != size) {\n    throw new EOFException();\n  }\n  int maxLength=0;\n  final int[] originalBitLengths=new int[totalNumberOfValues];\n  int pos=0;\n  for (  final byte b : encodedTree) {\n    final int numberOfValues=((b & 0xF0) >> 4) + 1;\n    if (pos + numberOfValues > totalNumberOfValues) {\n      throw new IOException(\"Number of values exceeds given total number of values\");\n    }\n    final int bitLength=(b & 0x0F) + 1;\n    for (int j=0; j < numberOfValues; j++) {\n      originalBitLengths[pos++]=bitLength;\n    }\n    maxLength=Math.max(maxLength,bitLength);\n  }\n  final int[] permutation=new int[originalBitLengths.length];\n  for (int k=0; k < permutation.length; k++) {\n    permutation[k]=k;\n  }\n  int c=0;\n  final int[] sortedBitLengths=new int[originalBitLengths.length];\n  for (int k=0; k < originalBitLengths.length; k++) {\n    for (int l=0; l < originalBitLengths.length; l++) {\n      if (originalBitLengths[l] == k) {\n        sortedBitLengths[c]=k;\n        permutation[c]=l;\n        c++;\n      }\n    }\n  }\n  int code=0;\n  int codeIncrement=0;\n  int lastBitLength=0;\n  final int[] codes=new int[totalNumberOfValues];\n  for (int i=totalNumberOfValues - 1; i >= 0; i--) {\n    code=code + codeIncrement;\n    if (sortedBitLengths[i] != lastBitLength) {\n      lastBitLength=sortedBitLengths[i];\n      codeIncrement=1 << (16 - lastBitLength);\n    }\n    codes[permutation[i]]=code;\n  }\n  final BinaryTree tree=new BinaryTree(maxLength);\n  for (int k=0; k < codes.length; k++) {\n    final int bitLength=originalBitLengths[k];\n    if (bitLength > 0) {\n      tree.addLeaf(0,Integer.reverse(codes[k] << 16),bitLength,k);\n    }\n  }\n  return tree;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 408,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 23,
                    "startLineNumber": 117,
                    "startColumnNumber": 12,
                    "endLineNumber": 117,
                    "endColumnNumber": 35
                },
                "nodeContext": "totalNumberOfValues < 0",
                "nodeType": "InfixExpression",
                "astNodeNumber": 3,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "0",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 123,
                "startColumnNumber": 20,
                "endLineNumber": 123,
                "endColumnNumber": 21
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 9,
                        "startLineNumber": 123,
                        "startColumnNumber": 12,
                        "endLineNumber": 123,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "size == 0",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 133,
                        "startLineNumber": 123,
                        "startColumnNumber": 8,
                        "endLineNumber": 125,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (size == 0) {\n  throw new IOException(\"Cannot read the size of the encoded tree, unexpected end of stream\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 10,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3358,
                        "startLineNumber": 116,
                        "startColumnNumber": 110,
                        "endLineNumber": 204,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (totalNumberOfValues < 0) {\n    throw new IllegalArgumentException(\"totalNumberOfValues must be bigger than 0, is \" + totalNumberOfValues);\n  }\n  final int size=inputStream.read() + 1;\n  if (size == 0) {\n    throw new IOException(\"Cannot read the size of the encoded tree, unexpected end of stream\");\n  }\n  final byte[] encodedTree=new byte[size];\n  final int read=IOUtils.readFully(inputStream,encodedTree);\n  if (read != size) {\n    throw new EOFException();\n  }\n  int maxLength=0;\n  final int[] originalBitLengths=new int[totalNumberOfValues];\n  int pos=0;\n  for (  final byte b : encodedTree) {\n    final int numberOfValues=((b & 0xF0) >> 4) + 1;\n    if (pos + numberOfValues > totalNumberOfValues) {\n      throw new IOException(\"Number of values exceeds given total number of values\");\n    }\n    final int bitLength=(b & 0x0F) + 1;\n    for (int j=0; j < numberOfValues; j++) {\n      originalBitLengths[pos++]=bitLength;\n    }\n    maxLength=Math.max(maxLength,bitLength);\n  }\n  final int[] permutation=new int[originalBitLengths.length];\n  for (int k=0; k < permutation.length; k++) {\n    permutation[k]=k;\n  }\n  int c=0;\n  final int[] sortedBitLengths=new int[originalBitLengths.length];\n  for (int k=0; k < originalBitLengths.length; k++) {\n    for (int l=0; l < originalBitLengths.length; l++) {\n      if (originalBitLengths[l] == k) {\n        sortedBitLengths[c]=k;\n        permutation[c]=l;\n        c++;\n      }\n    }\n  }\n  int code=0;\n  int codeIncrement=0;\n  int lastBitLength=0;\n  final int[] codes=new int[totalNumberOfValues];\n  for (int i=totalNumberOfValues - 1; i >= 0; i--) {\n    code=code + codeIncrement;\n    if (sortedBitLengths[i] != lastBitLength) {\n      lastBitLength=sortedBitLengths[i];\n      codeIncrement=1 << (16 - lastBitLength);\n    }\n    codes[permutation[i]]=code;\n  }\n  final BinaryTree tree=new BinaryTree(maxLength);\n  for (int k=0; k < codes.length; k++) {\n    final int bitLength=originalBitLengths[k];\n    if (bitLength > 0) {\n      tree.addLeaf(0,Integer.reverse(codes[k] << 16),bitLength,k);\n    }\n  }\n  return tree;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 391,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3548,
                        "startLineNumber": 113,
                        "startColumnNumber": 4,
                        "endLineNumber": 204,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Decodes the packed binary tree from the specified stream.\n */\nstatic BinaryTree decode(final InputStream inputStream,final int totalNumberOfValues) throws IOException {\n  if (totalNumberOfValues < 0) {\n    throw new IllegalArgumentException(\"totalNumberOfValues must be bigger than 0, is \" + totalNumberOfValues);\n  }\n  final int size=inputStream.read() + 1;\n  if (size == 0) {\n    throw new IOException(\"Cannot read the size of the encoded tree, unexpected end of stream\");\n  }\n  final byte[] encodedTree=new byte[size];\n  final int read=IOUtils.readFully(inputStream,encodedTree);\n  if (read != size) {\n    throw new EOFException();\n  }\n  int maxLength=0;\n  final int[] originalBitLengths=new int[totalNumberOfValues];\n  int pos=0;\n  for (  final byte b : encodedTree) {\n    final int numberOfValues=((b & 0xF0) >> 4) + 1;\n    if (pos + numberOfValues > totalNumberOfValues) {\n      throw new IOException(\"Number of values exceeds given total number of values\");\n    }\n    final int bitLength=(b & 0x0F) + 1;\n    for (int j=0; j < numberOfValues; j++) {\n      originalBitLengths[pos++]=bitLength;\n    }\n    maxLength=Math.max(maxLength,bitLength);\n  }\n  final int[] permutation=new int[originalBitLengths.length];\n  for (int k=0; k < permutation.length; k++) {\n    permutation[k]=k;\n  }\n  int c=0;\n  final int[] sortedBitLengths=new int[originalBitLengths.length];\n  for (int k=0; k < originalBitLengths.length; k++) {\n    for (int l=0; l < originalBitLengths.length; l++) {\n      if (originalBitLengths[l] == k) {\n        sortedBitLengths[c]=k;\n        permutation[c]=l;\n        c++;\n      }\n    }\n  }\n  int code=0;\n  int codeIncrement=0;\n  int lastBitLength=0;\n  final int[] codes=new int[totalNumberOfValues];\n  for (int i=totalNumberOfValues - 1; i >= 0; i--) {\n    code=code + codeIncrement;\n    if (sortedBitLengths[i] != lastBitLength) {\n      lastBitLength=sortedBitLengths[i];\n      codeIncrement=1 << (16 - lastBitLength);\n    }\n    codes[permutation[i]]=code;\n  }\n  final BinaryTree tree=new BinaryTree(maxLength);\n  for (int k=0; k < codes.length; k++) {\n    final int bitLength=originalBitLengths[k];\n    if (bitLength > 0) {\n      tree.addLeaf(0,Integer.reverse(codes[k] << 16),bitLength,k);\n    }\n  }\n  return tree;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 408,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 9,
                    "startLineNumber": 123,
                    "startColumnNumber": 12,
                    "endLineNumber": 123,
                    "endColumnNumber": 21
                },
                "nodeContext": "size == 0",
                "nodeType": "InfixExpression",
                "astNodeNumber": 3,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "0",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 134,
                "startColumnNumber": 24,
                "endLineNumber": 134,
                "endColumnNumber": 25
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 13,
                        "startLineNumber": 134,
                        "startColumnNumber": 12,
                        "endLineNumber": 134,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "maxLength=0",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 18,
                        "startLineNumber": 134,
                        "startColumnNumber": 8,
                        "endLineNumber": 134,
                        "endColumnNumber": 26
                    },
                    "nodeContext": "int maxLength=0;\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3358,
                        "startLineNumber": 116,
                        "startColumnNumber": 110,
                        "endLineNumber": 204,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (totalNumberOfValues < 0) {\n    throw new IllegalArgumentException(\"totalNumberOfValues must be bigger than 0, is \" + totalNumberOfValues);\n  }\n  final int size=inputStream.read() + 1;\n  if (size == 0) {\n    throw new IOException(\"Cannot read the size of the encoded tree, unexpected end of stream\");\n  }\n  final byte[] encodedTree=new byte[size];\n  final int read=IOUtils.readFully(inputStream,encodedTree);\n  if (read != size) {\n    throw new EOFException();\n  }\n  int maxLength=0;\n  final int[] originalBitLengths=new int[totalNumberOfValues];\n  int pos=0;\n  for (  final byte b : encodedTree) {\n    final int numberOfValues=((b & 0xF0) >> 4) + 1;\n    if (pos + numberOfValues > totalNumberOfValues) {\n      throw new IOException(\"Number of values exceeds given total number of values\");\n    }\n    final int bitLength=(b & 0x0F) + 1;\n    for (int j=0; j < numberOfValues; j++) {\n      originalBitLengths[pos++]=bitLength;\n    }\n    maxLength=Math.max(maxLength,bitLength);\n  }\n  final int[] permutation=new int[originalBitLengths.length];\n  for (int k=0; k < permutation.length; k++) {\n    permutation[k]=k;\n  }\n  int c=0;\n  final int[] sortedBitLengths=new int[originalBitLengths.length];\n  for (int k=0; k < originalBitLengths.length; k++) {\n    for (int l=0; l < originalBitLengths.length; l++) {\n      if (originalBitLengths[l] == k) {\n        sortedBitLengths[c]=k;\n        permutation[c]=l;\n        c++;\n      }\n    }\n  }\n  int code=0;\n  int codeIncrement=0;\n  int lastBitLength=0;\n  final int[] codes=new int[totalNumberOfValues];\n  for (int i=totalNumberOfValues - 1; i >= 0; i--) {\n    code=code + codeIncrement;\n    if (sortedBitLengths[i] != lastBitLength) {\n      lastBitLength=sortedBitLengths[i];\n      codeIncrement=1 << (16 - lastBitLength);\n    }\n    codes[permutation[i]]=code;\n  }\n  final BinaryTree tree=new BinaryTree(maxLength);\n  for (int k=0; k < codes.length; k++) {\n    final int bitLength=originalBitLengths[k];\n    if (bitLength > 0) {\n      tree.addLeaf(0,Integer.reverse(codes[k] << 16),bitLength,k);\n    }\n  }\n  return tree;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 391,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3548,
                        "startLineNumber": 113,
                        "startColumnNumber": 4,
                        "endLineNumber": 204,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Decodes the packed binary tree from the specified stream.\n */\nstatic BinaryTree decode(final InputStream inputStream,final int totalNumberOfValues) throws IOException {\n  if (totalNumberOfValues < 0) {\n    throw new IllegalArgumentException(\"totalNumberOfValues must be bigger than 0, is \" + totalNumberOfValues);\n  }\n  final int size=inputStream.read() + 1;\n  if (size == 0) {\n    throw new IOException(\"Cannot read the size of the encoded tree, unexpected end of stream\");\n  }\n  final byte[] encodedTree=new byte[size];\n  final int read=IOUtils.readFully(inputStream,encodedTree);\n  if (read != size) {\n    throw new EOFException();\n  }\n  int maxLength=0;\n  final int[] originalBitLengths=new int[totalNumberOfValues];\n  int pos=0;\n  for (  final byte b : encodedTree) {\n    final int numberOfValues=((b & 0xF0) >> 4) + 1;\n    if (pos + numberOfValues > totalNumberOfValues) {\n      throw new IOException(\"Number of values exceeds given total number of values\");\n    }\n    final int bitLength=(b & 0x0F) + 1;\n    for (int j=0; j < numberOfValues; j++) {\n      originalBitLengths[pos++]=bitLength;\n    }\n    maxLength=Math.max(maxLength,bitLength);\n  }\n  final int[] permutation=new int[originalBitLengths.length];\n  for (int k=0; k < permutation.length; k++) {\n    permutation[k]=k;\n  }\n  int c=0;\n  final int[] sortedBitLengths=new int[originalBitLengths.length];\n  for (int k=0; k < originalBitLengths.length; k++) {\n    for (int l=0; l < originalBitLengths.length; l++) {\n      if (originalBitLengths[l] == k) {\n        sortedBitLengths[c]=k;\n        permutation[c]=l;\n        c++;\n      }\n    }\n  }\n  int code=0;\n  int codeIncrement=0;\n  int lastBitLength=0;\n  final int[] codes=new int[totalNumberOfValues];\n  for (int i=totalNumberOfValues - 1; i >= 0; i--) {\n    code=code + codeIncrement;\n    if (sortedBitLengths[i] != lastBitLength) {\n      lastBitLength=sortedBitLengths[i];\n      codeIncrement=1 << (16 - lastBitLength);\n    }\n    codes[permutation[i]]=code;\n  }\n  final BinaryTree tree=new BinaryTree(maxLength);\n  for (int k=0; k < codes.length; k++) {\n    final int bitLength=originalBitLengths[k];\n    if (bitLength > 0) {\n      tree.addLeaf(0,Integer.reverse(codes[k] << 16),bitLength,k);\n    }\n  }\n  return tree;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 408,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 18,
                    "startLineNumber": 134,
                    "startColumnNumber": 8,
                    "endLineNumber": 134,
                    "endColumnNumber": 26
                },
                "nodeContext": "int maxLength=0;\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "0",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 137,
                "startColumnNumber": 18,
                "endLineNumber": 137,
                "endColumnNumber": 19
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 137,
                        "startColumnNumber": 12,
                        "endLineNumber": 137,
                        "endColumnNumber": 19
                    },
                    "nodeContext": "pos=0",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 12,
                        "startLineNumber": 137,
                        "startColumnNumber": 8,
                        "endLineNumber": 137,
                        "endColumnNumber": 20
                    },
                    "nodeContext": "int pos=0;\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3358,
                        "startLineNumber": 116,
                        "startColumnNumber": 110,
                        "endLineNumber": 204,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (totalNumberOfValues < 0) {\n    throw new IllegalArgumentException(\"totalNumberOfValues must be bigger than 0, is \" + totalNumberOfValues);\n  }\n  final int size=inputStream.read() + 1;\n  if (size == 0) {\n    throw new IOException(\"Cannot read the size of the encoded tree, unexpected end of stream\");\n  }\n  final byte[] encodedTree=new byte[size];\n  final int read=IOUtils.readFully(inputStream,encodedTree);\n  if (read != size) {\n    throw new EOFException();\n  }\n  int maxLength=0;\n  final int[] originalBitLengths=new int[totalNumberOfValues];\n  int pos=0;\n  for (  final byte b : encodedTree) {\n    final int numberOfValues=((b & 0xF0) >> 4) + 1;\n    if (pos + numberOfValues > totalNumberOfValues) {\n      throw new IOException(\"Number of values exceeds given total number of values\");\n    }\n    final int bitLength=(b & 0x0F) + 1;\n    for (int j=0; j < numberOfValues; j++) {\n      originalBitLengths[pos++]=bitLength;\n    }\n    maxLength=Math.max(maxLength,bitLength);\n  }\n  final int[] permutation=new int[originalBitLengths.length];\n  for (int k=0; k < permutation.length; k++) {\n    permutation[k]=k;\n  }\n  int c=0;\n  final int[] sortedBitLengths=new int[originalBitLengths.length];\n  for (int k=0; k < originalBitLengths.length; k++) {\n    for (int l=0; l < originalBitLengths.length; l++) {\n      if (originalBitLengths[l] == k) {\n        sortedBitLengths[c]=k;\n        permutation[c]=l;\n        c++;\n      }\n    }\n  }\n  int code=0;\n  int codeIncrement=0;\n  int lastBitLength=0;\n  final int[] codes=new int[totalNumberOfValues];\n  for (int i=totalNumberOfValues - 1; i >= 0; i--) {\n    code=code + codeIncrement;\n    if (sortedBitLengths[i] != lastBitLength) {\n      lastBitLength=sortedBitLengths[i];\n      codeIncrement=1 << (16 - lastBitLength);\n    }\n    codes[permutation[i]]=code;\n  }\n  final BinaryTree tree=new BinaryTree(maxLength);\n  for (int k=0; k < codes.length; k++) {\n    final int bitLength=originalBitLengths[k];\n    if (bitLength > 0) {\n      tree.addLeaf(0,Integer.reverse(codes[k] << 16),bitLength,k);\n    }\n  }\n  return tree;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 391,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3548,
                        "startLineNumber": 113,
                        "startColumnNumber": 4,
                        "endLineNumber": 204,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Decodes the packed binary tree from the specified stream.\n */\nstatic BinaryTree decode(final InputStream inputStream,final int totalNumberOfValues) throws IOException {\n  if (totalNumberOfValues < 0) {\n    throw new IllegalArgumentException(\"totalNumberOfValues must be bigger than 0, is \" + totalNumberOfValues);\n  }\n  final int size=inputStream.read() + 1;\n  if (size == 0) {\n    throw new IOException(\"Cannot read the size of the encoded tree, unexpected end of stream\");\n  }\n  final byte[] encodedTree=new byte[size];\n  final int read=IOUtils.readFully(inputStream,encodedTree);\n  if (read != size) {\n    throw new EOFException();\n  }\n  int maxLength=0;\n  final int[] originalBitLengths=new int[totalNumberOfValues];\n  int pos=0;\n  for (  final byte b : encodedTree) {\n    final int numberOfValues=((b & 0xF0) >> 4) + 1;\n    if (pos + numberOfValues > totalNumberOfValues) {\n      throw new IOException(\"Number of values exceeds given total number of values\");\n    }\n    final int bitLength=(b & 0x0F) + 1;\n    for (int j=0; j < numberOfValues; j++) {\n      originalBitLengths[pos++]=bitLength;\n    }\n    maxLength=Math.max(maxLength,bitLength);\n  }\n  final int[] permutation=new int[originalBitLengths.length];\n  for (int k=0; k < permutation.length; k++) {\n    permutation[k]=k;\n  }\n  int c=0;\n  final int[] sortedBitLengths=new int[originalBitLengths.length];\n  for (int k=0; k < originalBitLengths.length; k++) {\n    for (int l=0; l < originalBitLengths.length; l++) {\n      if (originalBitLengths[l] == k) {\n        sortedBitLengths[c]=k;\n        permutation[c]=l;\n        c++;\n      }\n    }\n  }\n  int code=0;\n  int codeIncrement=0;\n  int lastBitLength=0;\n  final int[] codes=new int[totalNumberOfValues];\n  for (int i=totalNumberOfValues - 1; i >= 0; i--) {\n    code=code + codeIncrement;\n    if (sortedBitLengths[i] != lastBitLength) {\n      lastBitLength=sortedBitLengths[i];\n      codeIncrement=1 << (16 - lastBitLength);\n    }\n    codes[permutation[i]]=code;\n  }\n  final BinaryTree tree=new BinaryTree(maxLength);\n  for (int k=0; k < codes.length; k++) {\n    final int bitLength=originalBitLengths[k];\n    if (bitLength > 0) {\n      tree.addLeaf(0,Integer.reverse(codes[k] << 16),bitLength,k);\n    }\n  }\n  return tree;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 408,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 12,
                    "startLineNumber": 137,
                    "startColumnNumber": 8,
                    "endLineNumber": 137,
                    "endColumnNumber": 20
                },
                "nodeContext": "int pos=0;\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "0",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 146,
                "startColumnNumber": 25,
                "endLineNumber": 146,
                "endColumnNumber": 26
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationExpression,fragments]",
                    "nodePosition": {
                        "charLength": 5,
                        "startLineNumber": 146,
                        "startColumnNumber": 21,
                        "endLineNumber": 146,
                        "endColumnNumber": 26
                    },
                    "nodeContext": "j=0",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
                    "nodePosition": {
                        "charLength": 9,
                        "startLineNumber": 146,
                        "startColumnNumber": 17,
                        "endLineNumber": 146,
                        "endColumnNumber": 26
                    },
                    "nodeContext": "int j=0",
                    "nodeType": "VariableDeclarationExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 113,
                        "startLineNumber": 146,
                        "startColumnNumber": 12,
                        "endLineNumber": 148,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (int j=0; j < numberOfValues; j++) {\n  originalBitLengths[pos++]=bitLength;\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 19,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 591,
                        "startLineNumber": 138,
                        "startColumnNumber": 41,
                        "endLineNumber": 151,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final int numberOfValues=((b & 0xF0) >> 4) + 1;\n  if (pos + numberOfValues > totalNumberOfValues) {\n    throw new IOException(\"Number of values exceeds given total number of values\");\n  }\n  final int bitLength=(b & 0x0F) + 1;\n  for (int j=0; j < numberOfValues; j++) {\n    originalBitLengths[pos++]=bitLength;\n  }\n  maxLength=Math.max(maxLength,bitLength);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 65,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 624,
                        "startLineNumber": 138,
                        "startColumnNumber": 8,
                        "endLineNumber": 151,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (final byte b : encodedTree) {\n  final int numberOfValues=((b & 0xF0) >> 4) + 1;\n  if (pos + numberOfValues > totalNumberOfValues) {\n    throw new IOException(\"Number of values exceeds given total number of values\");\n  }\n  final int bitLength=(b & 0x0F) + 1;\n  for (int j=0; j < numberOfValues; j++) {\n    originalBitLengths[pos++]=bitLength;\n  }\n  maxLength=Math.max(maxLength,bitLength);\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 71,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3358,
                        "startLineNumber": 116,
                        "startColumnNumber": 110,
                        "endLineNumber": 204,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (totalNumberOfValues < 0) {\n    throw new IllegalArgumentException(\"totalNumberOfValues must be bigger than 0, is \" + totalNumberOfValues);\n  }\n  final int size=inputStream.read() + 1;\n  if (size == 0) {\n    throw new IOException(\"Cannot read the size of the encoded tree, unexpected end of stream\");\n  }\n  final byte[] encodedTree=new byte[size];\n  final int read=IOUtils.readFully(inputStream,encodedTree);\n  if (read != size) {\n    throw new EOFException();\n  }\n  int maxLength=0;\n  final int[] originalBitLengths=new int[totalNumberOfValues];\n  int pos=0;\n  for (  final byte b : encodedTree) {\n    final int numberOfValues=((b & 0xF0) >> 4) + 1;\n    if (pos + numberOfValues > totalNumberOfValues) {\n      throw new IOException(\"Number of values exceeds given total number of values\");\n    }\n    final int bitLength=(b & 0x0F) + 1;\n    for (int j=0; j < numberOfValues; j++) {\n      originalBitLengths[pos++]=bitLength;\n    }\n    maxLength=Math.max(maxLength,bitLength);\n  }\n  final int[] permutation=new int[originalBitLengths.length];\n  for (int k=0; k < permutation.length; k++) {\n    permutation[k]=k;\n  }\n  int c=0;\n  final int[] sortedBitLengths=new int[originalBitLengths.length];\n  for (int k=0; k < originalBitLengths.length; k++) {\n    for (int l=0; l < originalBitLengths.length; l++) {\n      if (originalBitLengths[l] == k) {\n        sortedBitLengths[c]=k;\n        permutation[c]=l;\n        c++;\n      }\n    }\n  }\n  int code=0;\n  int codeIncrement=0;\n  int lastBitLength=0;\n  final int[] codes=new int[totalNumberOfValues];\n  for (int i=totalNumberOfValues - 1; i >= 0; i--) {\n    code=code + codeIncrement;\n    if (sortedBitLengths[i] != lastBitLength) {\n      lastBitLength=sortedBitLengths[i];\n      codeIncrement=1 << (16 - lastBitLength);\n    }\n    codes[permutation[i]]=code;\n  }\n  final BinaryTree tree=new BinaryTree(maxLength);\n  for (int k=0; k < codes.length; k++) {\n    final int bitLength=originalBitLengths[k];\n    if (bitLength > 0) {\n      tree.addLeaf(0,Integer.reverse(codes[k] << 16),bitLength,k);\n    }\n  }\n  return tree;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 391,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3548,
                        "startLineNumber": 113,
                        "startColumnNumber": 4,
                        "endLineNumber": 204,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Decodes the packed binary tree from the specified stream.\n */\nstatic BinaryTree decode(final InputStream inputStream,final int totalNumberOfValues) throws IOException {\n  if (totalNumberOfValues < 0) {\n    throw new IllegalArgumentException(\"totalNumberOfValues must be bigger than 0, is \" + totalNumberOfValues);\n  }\n  final int size=inputStream.read() + 1;\n  if (size == 0) {\n    throw new IOException(\"Cannot read the size of the encoded tree, unexpected end of stream\");\n  }\n  final byte[] encodedTree=new byte[size];\n  final int read=IOUtils.readFully(inputStream,encodedTree);\n  if (read != size) {\n    throw new EOFException();\n  }\n  int maxLength=0;\n  final int[] originalBitLengths=new int[totalNumberOfValues];\n  int pos=0;\n  for (  final byte b : encodedTree) {\n    final int numberOfValues=((b & 0xF0) >> 4) + 1;\n    if (pos + numberOfValues > totalNumberOfValues) {\n      throw new IOException(\"Number of values exceeds given total number of values\");\n    }\n    final int bitLength=(b & 0x0F) + 1;\n    for (int j=0; j < numberOfValues; j++) {\n      originalBitLengths[pos++]=bitLength;\n    }\n    maxLength=Math.max(maxLength,bitLength);\n  }\n  final int[] permutation=new int[originalBitLengths.length];\n  for (int k=0; k < permutation.length; k++) {\n    permutation[k]=k;\n  }\n  int c=0;\n  final int[] sortedBitLengths=new int[originalBitLengths.length];\n  for (int k=0; k < originalBitLengths.length; k++) {\n    for (int l=0; l < originalBitLengths.length; l++) {\n      if (originalBitLengths[l] == k) {\n        sortedBitLengths[c]=k;\n        permutation[c]=l;\n        c++;\n      }\n    }\n  }\n  int code=0;\n  int codeIncrement=0;\n  int lastBitLength=0;\n  final int[] codes=new int[totalNumberOfValues];\n  for (int i=totalNumberOfValues - 1; i >= 0; i--) {\n    code=code + codeIncrement;\n    if (sortedBitLengths[i] != lastBitLength) {\n      lastBitLength=sortedBitLengths[i];\n      codeIncrement=1 << (16 - lastBitLength);\n    }\n    codes[permutation[i]]=code;\n  }\n  final BinaryTree tree=new BinaryTree(maxLength);\n  for (int k=0; k < codes.length; k++) {\n    final int bitLength=originalBitLengths[k];\n    if (bitLength > 0) {\n      tree.addLeaf(0,Integer.reverse(codes[k] << 16),bitLength,k);\n    }\n  }\n  return tree;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 408,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
                "nodePosition": {
                    "charLength": 9,
                    "startLineNumber": 146,
                    "startColumnNumber": 17,
                    "endLineNumber": 146,
                    "endColumnNumber": 26
                },
                "nodeContext": "int j=0",
                "nodeType": "VariableDeclarationExpression",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "0",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 155,
                "startColumnNumber": 21,
                "endLineNumber": 155,
                "endColumnNumber": 22
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationExpression,fragments]",
                    "nodePosition": {
                        "charLength": 5,
                        "startLineNumber": 155,
                        "startColumnNumber": 17,
                        "endLineNumber": 155,
                        "endColumnNumber": 22
                    },
                    "nodeContext": "k=0",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
                    "nodePosition": {
                        "charLength": 9,
                        "startLineNumber": 155,
                        "startColumnNumber": 13,
                        "endLineNumber": 155,
                        "endColumnNumber": 22
                    },
                    "nodeContext": "int k=0",
                    "nodeType": "VariableDeclarationExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 90,
                        "startLineNumber": 155,
                        "startColumnNumber": 8,
                        "endLineNumber": 157,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int k=0; k < permutation.length; k++) {\n  permutation[k]=k;\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 20,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3358,
                        "startLineNumber": 116,
                        "startColumnNumber": 110,
                        "endLineNumber": 204,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (totalNumberOfValues < 0) {\n    throw new IllegalArgumentException(\"totalNumberOfValues must be bigger than 0, is \" + totalNumberOfValues);\n  }\n  final int size=inputStream.read() + 1;\n  if (size == 0) {\n    throw new IOException(\"Cannot read the size of the encoded tree, unexpected end of stream\");\n  }\n  final byte[] encodedTree=new byte[size];\n  final int read=IOUtils.readFully(inputStream,encodedTree);\n  if (read != size) {\n    throw new EOFException();\n  }\n  int maxLength=0;\n  final int[] originalBitLengths=new int[totalNumberOfValues];\n  int pos=0;\n  for (  final byte b : encodedTree) {\n    final int numberOfValues=((b & 0xF0) >> 4) + 1;\n    if (pos + numberOfValues > totalNumberOfValues) {\n      throw new IOException(\"Number of values exceeds given total number of values\");\n    }\n    final int bitLength=(b & 0x0F) + 1;\n    for (int j=0; j < numberOfValues; j++) {\n      originalBitLengths[pos++]=bitLength;\n    }\n    maxLength=Math.max(maxLength,bitLength);\n  }\n  final int[] permutation=new int[originalBitLengths.length];\n  for (int k=0; k < permutation.length; k++) {\n    permutation[k]=k;\n  }\n  int c=0;\n  final int[] sortedBitLengths=new int[originalBitLengths.length];\n  for (int k=0; k < originalBitLengths.length; k++) {\n    for (int l=0; l < originalBitLengths.length; l++) {\n      if (originalBitLengths[l] == k) {\n        sortedBitLengths[c]=k;\n        permutation[c]=l;\n        c++;\n      }\n    }\n  }\n  int code=0;\n  int codeIncrement=0;\n  int lastBitLength=0;\n  final int[] codes=new int[totalNumberOfValues];\n  for (int i=totalNumberOfValues - 1; i >= 0; i--) {\n    code=code + codeIncrement;\n    if (sortedBitLengths[i] != lastBitLength) {\n      lastBitLength=sortedBitLengths[i];\n      codeIncrement=1 << (16 - lastBitLength);\n    }\n    codes[permutation[i]]=code;\n  }\n  final BinaryTree tree=new BinaryTree(maxLength);\n  for (int k=0; k < codes.length; k++) {\n    final int bitLength=originalBitLengths[k];\n    if (bitLength > 0) {\n      tree.addLeaf(0,Integer.reverse(codes[k] << 16),bitLength,k);\n    }\n  }\n  return tree;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 391,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3548,
                        "startLineNumber": 113,
                        "startColumnNumber": 4,
                        "endLineNumber": 204,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Decodes the packed binary tree from the specified stream.\n */\nstatic BinaryTree decode(final InputStream inputStream,final int totalNumberOfValues) throws IOException {\n  if (totalNumberOfValues < 0) {\n    throw new IllegalArgumentException(\"totalNumberOfValues must be bigger than 0, is \" + totalNumberOfValues);\n  }\n  final int size=inputStream.read() + 1;\n  if (size == 0) {\n    throw new IOException(\"Cannot read the size of the encoded tree, unexpected end of stream\");\n  }\n  final byte[] encodedTree=new byte[size];\n  final int read=IOUtils.readFully(inputStream,encodedTree);\n  if (read != size) {\n    throw new EOFException();\n  }\n  int maxLength=0;\n  final int[] originalBitLengths=new int[totalNumberOfValues];\n  int pos=0;\n  for (  final byte b : encodedTree) {\n    final int numberOfValues=((b & 0xF0) >> 4) + 1;\n    if (pos + numberOfValues > totalNumberOfValues) {\n      throw new IOException(\"Number of values exceeds given total number of values\");\n    }\n    final int bitLength=(b & 0x0F) + 1;\n    for (int j=0; j < numberOfValues; j++) {\n      originalBitLengths[pos++]=bitLength;\n    }\n    maxLength=Math.max(maxLength,bitLength);\n  }\n  final int[] permutation=new int[originalBitLengths.length];\n  for (int k=0; k < permutation.length; k++) {\n    permutation[k]=k;\n  }\n  int c=0;\n  final int[] sortedBitLengths=new int[originalBitLengths.length];\n  for (int k=0; k < originalBitLengths.length; k++) {\n    for (int l=0; l < originalBitLengths.length; l++) {\n      if (originalBitLengths[l] == k) {\n        sortedBitLengths[c]=k;\n        permutation[c]=l;\n        c++;\n      }\n    }\n  }\n  int code=0;\n  int codeIncrement=0;\n  int lastBitLength=0;\n  final int[] codes=new int[totalNumberOfValues];\n  for (int i=totalNumberOfValues - 1; i >= 0; i--) {\n    code=code + codeIncrement;\n    if (sortedBitLengths[i] != lastBitLength) {\n      lastBitLength=sortedBitLengths[i];\n      codeIncrement=1 << (16 - lastBitLength);\n    }\n    codes[permutation[i]]=code;\n  }\n  final BinaryTree tree=new BinaryTree(maxLength);\n  for (int k=0; k < codes.length; k++) {\n    final int bitLength=originalBitLengths[k];\n    if (bitLength > 0) {\n      tree.addLeaf(0,Integer.reverse(codes[k] << 16),bitLength,k);\n    }\n  }\n  return tree;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 408,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
                "nodePosition": {
                    "charLength": 9,
                    "startLineNumber": 155,
                    "startColumnNumber": 13,
                    "endLineNumber": 155,
                    "endColumnNumber": 22
                },
                "nodeContext": "int k=0",
                "nodeType": "VariableDeclarationExpression",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "0",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 159,
                "startColumnNumber": 16,
                "endLineNumber": 159,
                "endColumnNumber": 17
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 5,
                        "startLineNumber": 159,
                        "startColumnNumber": 12,
                        "endLineNumber": 159,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "c=0",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 10,
                        "startLineNumber": 159,
                        "startColumnNumber": 8,
                        "endLineNumber": 159,
                        "endColumnNumber": 18
                    },
                    "nodeContext": "int c=0;\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3358,
                        "startLineNumber": 116,
                        "startColumnNumber": 110,
                        "endLineNumber": 204,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (totalNumberOfValues < 0) {\n    throw new IllegalArgumentException(\"totalNumberOfValues must be bigger than 0, is \" + totalNumberOfValues);\n  }\n  final int size=inputStream.read() + 1;\n  if (size == 0) {\n    throw new IOException(\"Cannot read the size of the encoded tree, unexpected end of stream\");\n  }\n  final byte[] encodedTree=new byte[size];\n  final int read=IOUtils.readFully(inputStream,encodedTree);\n  if (read != size) {\n    throw new EOFException();\n  }\n  int maxLength=0;\n  final int[] originalBitLengths=new int[totalNumberOfValues];\n  int pos=0;\n  for (  final byte b : encodedTree) {\n    final int numberOfValues=((b & 0xF0) >> 4) + 1;\n    if (pos + numberOfValues > totalNumberOfValues) {\n      throw new IOException(\"Number of values exceeds given total number of values\");\n    }\n    final int bitLength=(b & 0x0F) + 1;\n    for (int j=0; j < numberOfValues; j++) {\n      originalBitLengths[pos++]=bitLength;\n    }\n    maxLength=Math.max(maxLength,bitLength);\n  }\n  final int[] permutation=new int[originalBitLengths.length];\n  for (int k=0; k < permutation.length; k++) {\n    permutation[k]=k;\n  }\n  int c=0;\n  final int[] sortedBitLengths=new int[originalBitLengths.length];\n  for (int k=0; k < originalBitLengths.length; k++) {\n    for (int l=0; l < originalBitLengths.length; l++) {\n      if (originalBitLengths[l] == k) {\n        sortedBitLengths[c]=k;\n        permutation[c]=l;\n        c++;\n      }\n    }\n  }\n  int code=0;\n  int codeIncrement=0;\n  int lastBitLength=0;\n  final int[] codes=new int[totalNumberOfValues];\n  for (int i=totalNumberOfValues - 1; i >= 0; i--) {\n    code=code + codeIncrement;\n    if (sortedBitLengths[i] != lastBitLength) {\n      lastBitLength=sortedBitLengths[i];\n      codeIncrement=1 << (16 - lastBitLength);\n    }\n    codes[permutation[i]]=code;\n  }\n  final BinaryTree tree=new BinaryTree(maxLength);\n  for (int k=0; k < codes.length; k++) {\n    final int bitLength=originalBitLengths[k];\n    if (bitLength > 0) {\n      tree.addLeaf(0,Integer.reverse(codes[k] << 16),bitLength,k);\n    }\n  }\n  return tree;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 391,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3548,
                        "startLineNumber": 113,
                        "startColumnNumber": 4,
                        "endLineNumber": 204,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Decodes the packed binary tree from the specified stream.\n */\nstatic BinaryTree decode(final InputStream inputStream,final int totalNumberOfValues) throws IOException {\n  if (totalNumberOfValues < 0) {\n    throw new IllegalArgumentException(\"totalNumberOfValues must be bigger than 0, is \" + totalNumberOfValues);\n  }\n  final int size=inputStream.read() + 1;\n  if (size == 0) {\n    throw new IOException(\"Cannot read the size of the encoded tree, unexpected end of stream\");\n  }\n  final byte[] encodedTree=new byte[size];\n  final int read=IOUtils.readFully(inputStream,encodedTree);\n  if (read != size) {\n    throw new EOFException();\n  }\n  int maxLength=0;\n  final int[] originalBitLengths=new int[totalNumberOfValues];\n  int pos=0;\n  for (  final byte b : encodedTree) {\n    final int numberOfValues=((b & 0xF0) >> 4) + 1;\n    if (pos + numberOfValues > totalNumberOfValues) {\n      throw new IOException(\"Number of values exceeds given total number of values\");\n    }\n    final int bitLength=(b & 0x0F) + 1;\n    for (int j=0; j < numberOfValues; j++) {\n      originalBitLengths[pos++]=bitLength;\n    }\n    maxLength=Math.max(maxLength,bitLength);\n  }\n  final int[] permutation=new int[originalBitLengths.length];\n  for (int k=0; k < permutation.length; k++) {\n    permutation[k]=k;\n  }\n  int c=0;\n  final int[] sortedBitLengths=new int[originalBitLengths.length];\n  for (int k=0; k < originalBitLengths.length; k++) {\n    for (int l=0; l < originalBitLengths.length; l++) {\n      if (originalBitLengths[l] == k) {\n        sortedBitLengths[c]=k;\n        permutation[c]=l;\n        c++;\n      }\n    }\n  }\n  int code=0;\n  int codeIncrement=0;\n  int lastBitLength=0;\n  final int[] codes=new int[totalNumberOfValues];\n  for (int i=totalNumberOfValues - 1; i >= 0; i--) {\n    code=code + codeIncrement;\n    if (sortedBitLengths[i] != lastBitLength) {\n      lastBitLength=sortedBitLengths[i];\n      codeIncrement=1 << (16 - lastBitLength);\n    }\n    codes[permutation[i]]=code;\n  }\n  final BinaryTree tree=new BinaryTree(maxLength);\n  for (int k=0; k < codes.length; k++) {\n    final int bitLength=originalBitLengths[k];\n    if (bitLength > 0) {\n      tree.addLeaf(0,Integer.reverse(codes[k] << 16),bitLength,k);\n    }\n  }\n  return tree;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 408,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 10,
                    "startLineNumber": 159,
                    "startColumnNumber": 8,
                    "endLineNumber": 159,
                    "endColumnNumber": 18
                },
                "nodeContext": "int c=0;\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "0",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 161,
                "startColumnNumber": 21,
                "endLineNumber": 161,
                "endColumnNumber": 22
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationExpression,fragments]",
                    "nodePosition": {
                        "charLength": 5,
                        "startLineNumber": 161,
                        "startColumnNumber": 17,
                        "endLineNumber": 161,
                        "endColumnNumber": 22
                    },
                    "nodeContext": "k=0",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
                    "nodePosition": {
                        "charLength": 9,
                        "startLineNumber": 161,
                        "startColumnNumber": 13,
                        "endLineNumber": 161,
                        "endColumnNumber": 22
                    },
                    "nodeContext": "int k=0",
                    "nodeType": "VariableDeclarationExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 575,
                        "startLineNumber": 161,
                        "startColumnNumber": 8,
                        "endLineNumber": 175,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int k=0; k < originalBitLengths.length; k++) {\n  for (int l=0; l < originalBitLengths.length; l++) {\n    if (originalBitLengths[l] == k) {\n      sortedBitLengths[c]=k;\n      permutation[c]=l;\n      c++;\n    }\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 50,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3358,
                        "startLineNumber": 116,
                        "startColumnNumber": 110,
                        "endLineNumber": 204,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (totalNumberOfValues < 0) {\n    throw new IllegalArgumentException(\"totalNumberOfValues must be bigger than 0, is \" + totalNumberOfValues);\n  }\n  final int size=inputStream.read() + 1;\n  if (size == 0) {\n    throw new IOException(\"Cannot read the size of the encoded tree, unexpected end of stream\");\n  }\n  final byte[] encodedTree=new byte[size];\n  final int read=IOUtils.readFully(inputStream,encodedTree);\n  if (read != size) {\n    throw new EOFException();\n  }\n  int maxLength=0;\n  final int[] originalBitLengths=new int[totalNumberOfValues];\n  int pos=0;\n  for (  final byte b : encodedTree) {\n    final int numberOfValues=((b & 0xF0) >> 4) + 1;\n    if (pos + numberOfValues > totalNumberOfValues) {\n      throw new IOException(\"Number of values exceeds given total number of values\");\n    }\n    final int bitLength=(b & 0x0F) + 1;\n    for (int j=0; j < numberOfValues; j++) {\n      originalBitLengths[pos++]=bitLength;\n    }\n    maxLength=Math.max(maxLength,bitLength);\n  }\n  final int[] permutation=new int[originalBitLengths.length];\n  for (int k=0; k < permutation.length; k++) {\n    permutation[k]=k;\n  }\n  int c=0;\n  final int[] sortedBitLengths=new int[originalBitLengths.length];\n  for (int k=0; k < originalBitLengths.length; k++) {\n    for (int l=0; l < originalBitLengths.length; l++) {\n      if (originalBitLengths[l] == k) {\n        sortedBitLengths[c]=k;\n        permutation[c]=l;\n        c++;\n      }\n    }\n  }\n  int code=0;\n  int codeIncrement=0;\n  int lastBitLength=0;\n  final int[] codes=new int[totalNumberOfValues];\n  for (int i=totalNumberOfValues - 1; i >= 0; i--) {\n    code=code + codeIncrement;\n    if (sortedBitLengths[i] != lastBitLength) {\n      lastBitLength=sortedBitLengths[i];\n      codeIncrement=1 << (16 - lastBitLength);\n    }\n    codes[permutation[i]]=code;\n  }\n  final BinaryTree tree=new BinaryTree(maxLength);\n  for (int k=0; k < codes.length; k++) {\n    final int bitLength=originalBitLengths[k];\n    if (bitLength > 0) {\n      tree.addLeaf(0,Integer.reverse(codes[k] << 16),bitLength,k);\n    }\n  }\n  return tree;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 391,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3548,
                        "startLineNumber": 113,
                        "startColumnNumber": 4,
                        "endLineNumber": 204,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Decodes the packed binary tree from the specified stream.\n */\nstatic BinaryTree decode(final InputStream inputStream,final int totalNumberOfValues) throws IOException {\n  if (totalNumberOfValues < 0) {\n    throw new IllegalArgumentException(\"totalNumberOfValues must be bigger than 0, is \" + totalNumberOfValues);\n  }\n  final int size=inputStream.read() + 1;\n  if (size == 0) {\n    throw new IOException(\"Cannot read the size of the encoded tree, unexpected end of stream\");\n  }\n  final byte[] encodedTree=new byte[size];\n  final int read=IOUtils.readFully(inputStream,encodedTree);\n  if (read != size) {\n    throw new EOFException();\n  }\n  int maxLength=0;\n  final int[] originalBitLengths=new int[totalNumberOfValues];\n  int pos=0;\n  for (  final byte b : encodedTree) {\n    final int numberOfValues=((b & 0xF0) >> 4) + 1;\n    if (pos + numberOfValues > totalNumberOfValues) {\n      throw new IOException(\"Number of values exceeds given total number of values\");\n    }\n    final int bitLength=(b & 0x0F) + 1;\n    for (int j=0; j < numberOfValues; j++) {\n      originalBitLengths[pos++]=bitLength;\n    }\n    maxLength=Math.max(maxLength,bitLength);\n  }\n  final int[] permutation=new int[originalBitLengths.length];\n  for (int k=0; k < permutation.length; k++) {\n    permutation[k]=k;\n  }\n  int c=0;\n  final int[] sortedBitLengths=new int[originalBitLengths.length];\n  for (int k=0; k < originalBitLengths.length; k++) {\n    for (int l=0; l < originalBitLengths.length; l++) {\n      if (originalBitLengths[l] == k) {\n        sortedBitLengths[c]=k;\n        permutation[c]=l;\n        c++;\n      }\n    }\n  }\n  int code=0;\n  int codeIncrement=0;\n  int lastBitLength=0;\n  final int[] codes=new int[totalNumberOfValues];\n  for (int i=totalNumberOfValues - 1; i >= 0; i--) {\n    code=code + codeIncrement;\n    if (sortedBitLengths[i] != lastBitLength) {\n      lastBitLength=sortedBitLengths[i];\n      codeIncrement=1 << (16 - lastBitLength);\n    }\n    codes[permutation[i]]=code;\n  }\n  final BinaryTree tree=new BinaryTree(maxLength);\n  for (int k=0; k < codes.length; k++) {\n    final int bitLength=originalBitLengths[k];\n    if (bitLength > 0) {\n      tree.addLeaf(0,Integer.reverse(codes[k] << 16),bitLength,k);\n    }\n  }\n  return tree;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 408,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
                "nodePosition": {
                    "charLength": 9,
                    "startLineNumber": 161,
                    "startColumnNumber": 13,
                    "endLineNumber": 161,
                    "endColumnNumber": 22
                },
                "nodeContext": "int k=0",
                "nodeType": "VariableDeclarationExpression",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "0",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 163,
                "startColumnNumber": 25,
                "endLineNumber": 163,
                "endColumnNumber": 26
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationExpression,fragments]",
                    "nodePosition": {
                        "charLength": 5,
                        "startLineNumber": 163,
                        "startColumnNumber": 21,
                        "endLineNumber": 163,
                        "endColumnNumber": 26
                    },
                    "nodeContext": "l=0",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
                    "nodePosition": {
                        "charLength": 9,
                        "startLineNumber": 163,
                        "startColumnNumber": 17,
                        "endLineNumber": 163,
                        "endColumnNumber": 26
                    },
                    "nodeContext": "int l=0",
                    "nodeType": "VariableDeclarationExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 457,
                        "startLineNumber": 163,
                        "startColumnNumber": 12,
                        "endLineNumber": 174,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (int l=0; l < originalBitLengths.length; l++) {\n  if (originalBitLengths[l] == k) {\n    sortedBitLengths[c]=k;\n    permutation[c]=l;\n    c++;\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 36,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 523,
                        "startLineNumber": 161,
                        "startColumnNumber": 60,
                        "endLineNumber": 175,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  for (int l=0; l < originalBitLengths.length; l++) {\n    if (originalBitLengths[l] == k) {\n      sortedBitLengths[c]=k;\n      permutation[c]=l;\n      c++;\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 37,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 575,
                        "startLineNumber": 161,
                        "startColumnNumber": 8,
                        "endLineNumber": 175,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int k=0; k < originalBitLengths.length; k++) {\n  for (int l=0; l < originalBitLengths.length; l++) {\n    if (originalBitLengths[l] == k) {\n      sortedBitLengths[c]=k;\n      permutation[c]=l;\n      c++;\n    }\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 50,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3358,
                        "startLineNumber": 116,
                        "startColumnNumber": 110,
                        "endLineNumber": 204,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (totalNumberOfValues < 0) {\n    throw new IllegalArgumentException(\"totalNumberOfValues must be bigger than 0, is \" + totalNumberOfValues);\n  }\n  final int size=inputStream.read() + 1;\n  if (size == 0) {\n    throw new IOException(\"Cannot read the size of the encoded tree, unexpected end of stream\");\n  }\n  final byte[] encodedTree=new byte[size];\n  final int read=IOUtils.readFully(inputStream,encodedTree);\n  if (read != size) {\n    throw new EOFException();\n  }\n  int maxLength=0;\n  final int[] originalBitLengths=new int[totalNumberOfValues];\n  int pos=0;\n  for (  final byte b : encodedTree) {\n    final int numberOfValues=((b & 0xF0) >> 4) + 1;\n    if (pos + numberOfValues > totalNumberOfValues) {\n      throw new IOException(\"Number of values exceeds given total number of values\");\n    }\n    final int bitLength=(b & 0x0F) + 1;\n    for (int j=0; j < numberOfValues; j++) {\n      originalBitLengths[pos++]=bitLength;\n    }\n    maxLength=Math.max(maxLength,bitLength);\n  }\n  final int[] permutation=new int[originalBitLengths.length];\n  for (int k=0; k < permutation.length; k++) {\n    permutation[k]=k;\n  }\n  int c=0;\n  final int[] sortedBitLengths=new int[originalBitLengths.length];\n  for (int k=0; k < originalBitLengths.length; k++) {\n    for (int l=0; l < originalBitLengths.length; l++) {\n      if (originalBitLengths[l] == k) {\n        sortedBitLengths[c]=k;\n        permutation[c]=l;\n        c++;\n      }\n    }\n  }\n  int code=0;\n  int codeIncrement=0;\n  int lastBitLength=0;\n  final int[] codes=new int[totalNumberOfValues];\n  for (int i=totalNumberOfValues - 1; i >= 0; i--) {\n    code=code + codeIncrement;\n    if (sortedBitLengths[i] != lastBitLength) {\n      lastBitLength=sortedBitLengths[i];\n      codeIncrement=1 << (16 - lastBitLength);\n    }\n    codes[permutation[i]]=code;\n  }\n  final BinaryTree tree=new BinaryTree(maxLength);\n  for (int k=0; k < codes.length; k++) {\n    final int bitLength=originalBitLengths[k];\n    if (bitLength > 0) {\n      tree.addLeaf(0,Integer.reverse(codes[k] << 16),bitLength,k);\n    }\n  }\n  return tree;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 391,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3548,
                        "startLineNumber": 113,
                        "startColumnNumber": 4,
                        "endLineNumber": 204,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Decodes the packed binary tree from the specified stream.\n */\nstatic BinaryTree decode(final InputStream inputStream,final int totalNumberOfValues) throws IOException {\n  if (totalNumberOfValues < 0) {\n    throw new IllegalArgumentException(\"totalNumberOfValues must be bigger than 0, is \" + totalNumberOfValues);\n  }\n  final int size=inputStream.read() + 1;\n  if (size == 0) {\n    throw new IOException(\"Cannot read the size of the encoded tree, unexpected end of stream\");\n  }\n  final byte[] encodedTree=new byte[size];\n  final int read=IOUtils.readFully(inputStream,encodedTree);\n  if (read != size) {\n    throw new EOFException();\n  }\n  int maxLength=0;\n  final int[] originalBitLengths=new int[totalNumberOfValues];\n  int pos=0;\n  for (  final byte b : encodedTree) {\n    final int numberOfValues=((b & 0xF0) >> 4) + 1;\n    if (pos + numberOfValues > totalNumberOfValues) {\n      throw new IOException(\"Number of values exceeds given total number of values\");\n    }\n    final int bitLength=(b & 0x0F) + 1;\n    for (int j=0; j < numberOfValues; j++) {\n      originalBitLengths[pos++]=bitLength;\n    }\n    maxLength=Math.max(maxLength,bitLength);\n  }\n  final int[] permutation=new int[originalBitLengths.length];\n  for (int k=0; k < permutation.length; k++) {\n    permutation[k]=k;\n  }\n  int c=0;\n  final int[] sortedBitLengths=new int[originalBitLengths.length];\n  for (int k=0; k < originalBitLengths.length; k++) {\n    for (int l=0; l < originalBitLengths.length; l++) {\n      if (originalBitLengths[l] == k) {\n        sortedBitLengths[c]=k;\n        permutation[c]=l;\n        c++;\n      }\n    }\n  }\n  int code=0;\n  int codeIncrement=0;\n  int lastBitLength=0;\n  final int[] codes=new int[totalNumberOfValues];\n  for (int i=totalNumberOfValues - 1; i >= 0; i--) {\n    code=code + codeIncrement;\n    if (sortedBitLengths[i] != lastBitLength) {\n      lastBitLength=sortedBitLengths[i];\n      codeIncrement=1 << (16 - lastBitLength);\n    }\n    codes[permutation[i]]=code;\n  }\n  final BinaryTree tree=new BinaryTree(maxLength);\n  for (int k=0; k < codes.length; k++) {\n    final int bitLength=originalBitLengths[k];\n    if (bitLength > 0) {\n      tree.addLeaf(0,Integer.reverse(codes[k] << 16),bitLength,k);\n    }\n  }\n  return tree;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 408,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
                "nodePosition": {
                    "charLength": 9,
                    "startLineNumber": 163,
                    "startColumnNumber": 17,
                    "endLineNumber": 163,
                    "endColumnNumber": 26
                },
                "nodeContext": "int l=0",
                "nodeType": "VariableDeclarationExpression",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "0",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 178,
                "startColumnNumber": 19,
                "endLineNumber": 178,
                "endColumnNumber": 20
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 8,
                        "startLineNumber": 178,
                        "startColumnNumber": 12,
                        "endLineNumber": 178,
                        "endColumnNumber": 20
                    },
                    "nodeContext": "code=0",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 13,
                        "startLineNumber": 178,
                        "startColumnNumber": 8,
                        "endLineNumber": 178,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "int code=0;\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3358,
                        "startLineNumber": 116,
                        "startColumnNumber": 110,
                        "endLineNumber": 204,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (totalNumberOfValues < 0) {\n    throw new IllegalArgumentException(\"totalNumberOfValues must be bigger than 0, is \" + totalNumberOfValues);\n  }\n  final int size=inputStream.read() + 1;\n  if (size == 0) {\n    throw new IOException(\"Cannot read the size of the encoded tree, unexpected end of stream\");\n  }\n  final byte[] encodedTree=new byte[size];\n  final int read=IOUtils.readFully(inputStream,encodedTree);\n  if (read != size) {\n    throw new EOFException();\n  }\n  int maxLength=0;\n  final int[] originalBitLengths=new int[totalNumberOfValues];\n  int pos=0;\n  for (  final byte b : encodedTree) {\n    final int numberOfValues=((b & 0xF0) >> 4) + 1;\n    if (pos + numberOfValues > totalNumberOfValues) {\n      throw new IOException(\"Number of values exceeds given total number of values\");\n    }\n    final int bitLength=(b & 0x0F) + 1;\n    for (int j=0; j < numberOfValues; j++) {\n      originalBitLengths[pos++]=bitLength;\n    }\n    maxLength=Math.max(maxLength,bitLength);\n  }\n  final int[] permutation=new int[originalBitLengths.length];\n  for (int k=0; k < permutation.length; k++) {\n    permutation[k]=k;\n  }\n  int c=0;\n  final int[] sortedBitLengths=new int[originalBitLengths.length];\n  for (int k=0; k < originalBitLengths.length; k++) {\n    for (int l=0; l < originalBitLengths.length; l++) {\n      if (originalBitLengths[l] == k) {\n        sortedBitLengths[c]=k;\n        permutation[c]=l;\n        c++;\n      }\n    }\n  }\n  int code=0;\n  int codeIncrement=0;\n  int lastBitLength=0;\n  final int[] codes=new int[totalNumberOfValues];\n  for (int i=totalNumberOfValues - 1; i >= 0; i--) {\n    code=code + codeIncrement;\n    if (sortedBitLengths[i] != lastBitLength) {\n      lastBitLength=sortedBitLengths[i];\n      codeIncrement=1 << (16 - lastBitLength);\n    }\n    codes[permutation[i]]=code;\n  }\n  final BinaryTree tree=new BinaryTree(maxLength);\n  for (int k=0; k < codes.length; k++) {\n    final int bitLength=originalBitLengths[k];\n    if (bitLength > 0) {\n      tree.addLeaf(0,Integer.reverse(codes[k] << 16),bitLength,k);\n    }\n  }\n  return tree;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 391,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3548,
                        "startLineNumber": 113,
                        "startColumnNumber": 4,
                        "endLineNumber": 204,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Decodes the packed binary tree from the specified stream.\n */\nstatic BinaryTree decode(final InputStream inputStream,final int totalNumberOfValues) throws IOException {\n  if (totalNumberOfValues < 0) {\n    throw new IllegalArgumentException(\"totalNumberOfValues must be bigger than 0, is \" + totalNumberOfValues);\n  }\n  final int size=inputStream.read() + 1;\n  if (size == 0) {\n    throw new IOException(\"Cannot read the size of the encoded tree, unexpected end of stream\");\n  }\n  final byte[] encodedTree=new byte[size];\n  final int read=IOUtils.readFully(inputStream,encodedTree);\n  if (read != size) {\n    throw new EOFException();\n  }\n  int maxLength=0;\n  final int[] originalBitLengths=new int[totalNumberOfValues];\n  int pos=0;\n  for (  final byte b : encodedTree) {\n    final int numberOfValues=((b & 0xF0) >> 4) + 1;\n    if (pos + numberOfValues > totalNumberOfValues) {\n      throw new IOException(\"Number of values exceeds given total number of values\");\n    }\n    final int bitLength=(b & 0x0F) + 1;\n    for (int j=0; j < numberOfValues; j++) {\n      originalBitLengths[pos++]=bitLength;\n    }\n    maxLength=Math.max(maxLength,bitLength);\n  }\n  final int[] permutation=new int[originalBitLengths.length];\n  for (int k=0; k < permutation.length; k++) {\n    permutation[k]=k;\n  }\n  int c=0;\n  final int[] sortedBitLengths=new int[originalBitLengths.length];\n  for (int k=0; k < originalBitLengths.length; k++) {\n    for (int l=0; l < originalBitLengths.length; l++) {\n      if (originalBitLengths[l] == k) {\n        sortedBitLengths[c]=k;\n        permutation[c]=l;\n        c++;\n      }\n    }\n  }\n  int code=0;\n  int codeIncrement=0;\n  int lastBitLength=0;\n  final int[] codes=new int[totalNumberOfValues];\n  for (int i=totalNumberOfValues - 1; i >= 0; i--) {\n    code=code + codeIncrement;\n    if (sortedBitLengths[i] != lastBitLength) {\n      lastBitLength=sortedBitLengths[i];\n      codeIncrement=1 << (16 - lastBitLength);\n    }\n    codes[permutation[i]]=code;\n  }\n  final BinaryTree tree=new BinaryTree(maxLength);\n  for (int k=0; k < codes.length; k++) {\n    final int bitLength=originalBitLengths[k];\n    if (bitLength > 0) {\n      tree.addLeaf(0,Integer.reverse(codes[k] << 16),bitLength,k);\n    }\n  }\n  return tree;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 408,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 13,
                    "startLineNumber": 178,
                    "startColumnNumber": 8,
                    "endLineNumber": 178,
                    "endColumnNumber": 21
                },
                "nodeContext": "int code=0;\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "0",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 179,
                "startColumnNumber": 28,
                "endLineNumber": 179,
                "endColumnNumber": 29
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 17,
                        "startLineNumber": 179,
                        "startColumnNumber": 12,
                        "endLineNumber": 179,
                        "endColumnNumber": 29
                    },
                    "nodeContext": "codeIncrement=0",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 22,
                        "startLineNumber": 179,
                        "startColumnNumber": 8,
                        "endLineNumber": 179,
                        "endColumnNumber": 30
                    },
                    "nodeContext": "int codeIncrement=0;\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3358,
                        "startLineNumber": 116,
                        "startColumnNumber": 110,
                        "endLineNumber": 204,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (totalNumberOfValues < 0) {\n    throw new IllegalArgumentException(\"totalNumberOfValues must be bigger than 0, is \" + totalNumberOfValues);\n  }\n  final int size=inputStream.read() + 1;\n  if (size == 0) {\n    throw new IOException(\"Cannot read the size of the encoded tree, unexpected end of stream\");\n  }\n  final byte[] encodedTree=new byte[size];\n  final int read=IOUtils.readFully(inputStream,encodedTree);\n  if (read != size) {\n    throw new EOFException();\n  }\n  int maxLength=0;\n  final int[] originalBitLengths=new int[totalNumberOfValues];\n  int pos=0;\n  for (  final byte b : encodedTree) {\n    final int numberOfValues=((b & 0xF0) >> 4) + 1;\n    if (pos + numberOfValues > totalNumberOfValues) {\n      throw new IOException(\"Number of values exceeds given total number of values\");\n    }\n    final int bitLength=(b & 0x0F) + 1;\n    for (int j=0; j < numberOfValues; j++) {\n      originalBitLengths[pos++]=bitLength;\n    }\n    maxLength=Math.max(maxLength,bitLength);\n  }\n  final int[] permutation=new int[originalBitLengths.length];\n  for (int k=0; k < permutation.length; k++) {\n    permutation[k]=k;\n  }\n  int c=0;\n  final int[] sortedBitLengths=new int[originalBitLengths.length];\n  for (int k=0; k < originalBitLengths.length; k++) {\n    for (int l=0; l < originalBitLengths.length; l++) {\n      if (originalBitLengths[l] == k) {\n        sortedBitLengths[c]=k;\n        permutation[c]=l;\n        c++;\n      }\n    }\n  }\n  int code=0;\n  int codeIncrement=0;\n  int lastBitLength=0;\n  final int[] codes=new int[totalNumberOfValues];\n  for (int i=totalNumberOfValues - 1; i >= 0; i--) {\n    code=code + codeIncrement;\n    if (sortedBitLengths[i] != lastBitLength) {\n      lastBitLength=sortedBitLengths[i];\n      codeIncrement=1 << (16 - lastBitLength);\n    }\n    codes[permutation[i]]=code;\n  }\n  final BinaryTree tree=new BinaryTree(maxLength);\n  for (int k=0; k < codes.length; k++) {\n    final int bitLength=originalBitLengths[k];\n    if (bitLength > 0) {\n      tree.addLeaf(0,Integer.reverse(codes[k] << 16),bitLength,k);\n    }\n  }\n  return tree;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 391,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3548,
                        "startLineNumber": 113,
                        "startColumnNumber": 4,
                        "endLineNumber": 204,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Decodes the packed binary tree from the specified stream.\n */\nstatic BinaryTree decode(final InputStream inputStream,final int totalNumberOfValues) throws IOException {\n  if (totalNumberOfValues < 0) {\n    throw new IllegalArgumentException(\"totalNumberOfValues must be bigger than 0, is \" + totalNumberOfValues);\n  }\n  final int size=inputStream.read() + 1;\n  if (size == 0) {\n    throw new IOException(\"Cannot read the size of the encoded tree, unexpected end of stream\");\n  }\n  final byte[] encodedTree=new byte[size];\n  final int read=IOUtils.readFully(inputStream,encodedTree);\n  if (read != size) {\n    throw new EOFException();\n  }\n  int maxLength=0;\n  final int[] originalBitLengths=new int[totalNumberOfValues];\n  int pos=0;\n  for (  final byte b : encodedTree) {\n    final int numberOfValues=((b & 0xF0) >> 4) + 1;\n    if (pos + numberOfValues > totalNumberOfValues) {\n      throw new IOException(\"Number of values exceeds given total number of values\");\n    }\n    final int bitLength=(b & 0x0F) + 1;\n    for (int j=0; j < numberOfValues; j++) {\n      originalBitLengths[pos++]=bitLength;\n    }\n    maxLength=Math.max(maxLength,bitLength);\n  }\n  final int[] permutation=new int[originalBitLengths.length];\n  for (int k=0; k < permutation.length; k++) {\n    permutation[k]=k;\n  }\n  int c=0;\n  final int[] sortedBitLengths=new int[originalBitLengths.length];\n  for (int k=0; k < originalBitLengths.length; k++) {\n    for (int l=0; l < originalBitLengths.length; l++) {\n      if (originalBitLengths[l] == k) {\n        sortedBitLengths[c]=k;\n        permutation[c]=l;\n        c++;\n      }\n    }\n  }\n  int code=0;\n  int codeIncrement=0;\n  int lastBitLength=0;\n  final int[] codes=new int[totalNumberOfValues];\n  for (int i=totalNumberOfValues - 1; i >= 0; i--) {\n    code=code + codeIncrement;\n    if (sortedBitLengths[i] != lastBitLength) {\n      lastBitLength=sortedBitLengths[i];\n      codeIncrement=1 << (16 - lastBitLength);\n    }\n    codes[permutation[i]]=code;\n  }\n  final BinaryTree tree=new BinaryTree(maxLength);\n  for (int k=0; k < codes.length; k++) {\n    final int bitLength=originalBitLengths[k];\n    if (bitLength > 0) {\n      tree.addLeaf(0,Integer.reverse(codes[k] << 16),bitLength,k);\n    }\n  }\n  return tree;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 408,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 22,
                    "startLineNumber": 179,
                    "startColumnNumber": 8,
                    "endLineNumber": 179,
                    "endColumnNumber": 30
                },
                "nodeContext": "int codeIncrement=0;\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "0",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 180,
                "startColumnNumber": 28,
                "endLineNumber": 180,
                "endColumnNumber": 29
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 17,
                        "startLineNumber": 180,
                        "startColumnNumber": 12,
                        "endLineNumber": 180,
                        "endColumnNumber": 29
                    },
                    "nodeContext": "lastBitLength=0",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 22,
                        "startLineNumber": 180,
                        "startColumnNumber": 8,
                        "endLineNumber": 180,
                        "endColumnNumber": 30
                    },
                    "nodeContext": "int lastBitLength=0;\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3358,
                        "startLineNumber": 116,
                        "startColumnNumber": 110,
                        "endLineNumber": 204,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (totalNumberOfValues < 0) {\n    throw new IllegalArgumentException(\"totalNumberOfValues must be bigger than 0, is \" + totalNumberOfValues);\n  }\n  final int size=inputStream.read() + 1;\n  if (size == 0) {\n    throw new IOException(\"Cannot read the size of the encoded tree, unexpected end of stream\");\n  }\n  final byte[] encodedTree=new byte[size];\n  final int read=IOUtils.readFully(inputStream,encodedTree);\n  if (read != size) {\n    throw new EOFException();\n  }\n  int maxLength=0;\n  final int[] originalBitLengths=new int[totalNumberOfValues];\n  int pos=0;\n  for (  final byte b : encodedTree) {\n    final int numberOfValues=((b & 0xF0) >> 4) + 1;\n    if (pos + numberOfValues > totalNumberOfValues) {\n      throw new IOException(\"Number of values exceeds given total number of values\");\n    }\n    final int bitLength=(b & 0x0F) + 1;\n    for (int j=0; j < numberOfValues; j++) {\n      originalBitLengths[pos++]=bitLength;\n    }\n    maxLength=Math.max(maxLength,bitLength);\n  }\n  final int[] permutation=new int[originalBitLengths.length];\n  for (int k=0; k < permutation.length; k++) {\n    permutation[k]=k;\n  }\n  int c=0;\n  final int[] sortedBitLengths=new int[originalBitLengths.length];\n  for (int k=0; k < originalBitLengths.length; k++) {\n    for (int l=0; l < originalBitLengths.length; l++) {\n      if (originalBitLengths[l] == k) {\n        sortedBitLengths[c]=k;\n        permutation[c]=l;\n        c++;\n      }\n    }\n  }\n  int code=0;\n  int codeIncrement=0;\n  int lastBitLength=0;\n  final int[] codes=new int[totalNumberOfValues];\n  for (int i=totalNumberOfValues - 1; i >= 0; i--) {\n    code=code + codeIncrement;\n    if (sortedBitLengths[i] != lastBitLength) {\n      lastBitLength=sortedBitLengths[i];\n      codeIncrement=1 << (16 - lastBitLength);\n    }\n    codes[permutation[i]]=code;\n  }\n  final BinaryTree tree=new BinaryTree(maxLength);\n  for (int k=0; k < codes.length; k++) {\n    final int bitLength=originalBitLengths[k];\n    if (bitLength > 0) {\n      tree.addLeaf(0,Integer.reverse(codes[k] << 16),bitLength,k);\n    }\n  }\n  return tree;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 391,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3548,
                        "startLineNumber": 113,
                        "startColumnNumber": 4,
                        "endLineNumber": 204,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Decodes the packed binary tree from the specified stream.\n */\nstatic BinaryTree decode(final InputStream inputStream,final int totalNumberOfValues) throws IOException {\n  if (totalNumberOfValues < 0) {\n    throw new IllegalArgumentException(\"totalNumberOfValues must be bigger than 0, is \" + totalNumberOfValues);\n  }\n  final int size=inputStream.read() + 1;\n  if (size == 0) {\n    throw new IOException(\"Cannot read the size of the encoded tree, unexpected end of stream\");\n  }\n  final byte[] encodedTree=new byte[size];\n  final int read=IOUtils.readFully(inputStream,encodedTree);\n  if (read != size) {\n    throw new EOFException();\n  }\n  int maxLength=0;\n  final int[] originalBitLengths=new int[totalNumberOfValues];\n  int pos=0;\n  for (  final byte b : encodedTree) {\n    final int numberOfValues=((b & 0xF0) >> 4) + 1;\n    if (pos + numberOfValues > totalNumberOfValues) {\n      throw new IOException(\"Number of values exceeds given total number of values\");\n    }\n    final int bitLength=(b & 0x0F) + 1;\n    for (int j=0; j < numberOfValues; j++) {\n      originalBitLengths[pos++]=bitLength;\n    }\n    maxLength=Math.max(maxLength,bitLength);\n  }\n  final int[] permutation=new int[originalBitLengths.length];\n  for (int k=0; k < permutation.length; k++) {\n    permutation[k]=k;\n  }\n  int c=0;\n  final int[] sortedBitLengths=new int[originalBitLengths.length];\n  for (int k=0; k < originalBitLengths.length; k++) {\n    for (int l=0; l < originalBitLengths.length; l++) {\n      if (originalBitLengths[l] == k) {\n        sortedBitLengths[c]=k;\n        permutation[c]=l;\n        c++;\n      }\n    }\n  }\n  int code=0;\n  int codeIncrement=0;\n  int lastBitLength=0;\n  final int[] codes=new int[totalNumberOfValues];\n  for (int i=totalNumberOfValues - 1; i >= 0; i--) {\n    code=code + codeIncrement;\n    if (sortedBitLengths[i] != lastBitLength) {\n      lastBitLength=sortedBitLengths[i];\n      codeIncrement=1 << (16 - lastBitLength);\n    }\n    codes[permutation[i]]=code;\n  }\n  final BinaryTree tree=new BinaryTree(maxLength);\n  for (int k=0; k < codes.length; k++) {\n    final int bitLength=originalBitLengths[k];\n    if (bitLength > 0) {\n      tree.addLeaf(0,Integer.reverse(codes[k] << 16),bitLength,k);\n    }\n  }\n  return tree;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 408,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 22,
                    "startLineNumber": 180,
                    "startColumnNumber": 8,
                    "endLineNumber": 180,
                    "endColumnNumber": 30
                },
                "nodeContext": "int lastBitLength=0;\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "0",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 184,
                "startColumnNumber": 51,
                "endLineNumber": 184,
                "endColumnNumber": 52
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
                    "nodePosition": {
                        "charLength": 6,
                        "startLineNumber": 184,
                        "startColumnNumber": 46,
                        "endLineNumber": 184,
                        "endColumnNumber": 52
                    },
                    "nodeContext": "i >= 0",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 334,
                        "startLineNumber": 184,
                        "startColumnNumber": 8,
                        "endLineNumber": 191,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int i=totalNumberOfValues - 1; i >= 0; i--) {\n  code=code + codeIncrement;\n  if (sortedBitLengths[i] != lastBitLength) {\n    lastBitLength=sortedBitLengths[i];\n    codeIncrement=1 << (16 - lastBitLength);\n  }\n  codes[permutation[i]]=code;\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 50,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3358,
                        "startLineNumber": 116,
                        "startColumnNumber": 110,
                        "endLineNumber": 204,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (totalNumberOfValues < 0) {\n    throw new IllegalArgumentException(\"totalNumberOfValues must be bigger than 0, is \" + totalNumberOfValues);\n  }\n  final int size=inputStream.read() + 1;\n  if (size == 0) {\n    throw new IOException(\"Cannot read the size of the encoded tree, unexpected end of stream\");\n  }\n  final byte[] encodedTree=new byte[size];\n  final int read=IOUtils.readFully(inputStream,encodedTree);\n  if (read != size) {\n    throw new EOFException();\n  }\n  int maxLength=0;\n  final int[] originalBitLengths=new int[totalNumberOfValues];\n  int pos=0;\n  for (  final byte b : encodedTree) {\n    final int numberOfValues=((b & 0xF0) >> 4) + 1;\n    if (pos + numberOfValues > totalNumberOfValues) {\n      throw new IOException(\"Number of values exceeds given total number of values\");\n    }\n    final int bitLength=(b & 0x0F) + 1;\n    for (int j=0; j < numberOfValues; j++) {\n      originalBitLengths[pos++]=bitLength;\n    }\n    maxLength=Math.max(maxLength,bitLength);\n  }\n  final int[] permutation=new int[originalBitLengths.length];\n  for (int k=0; k < permutation.length; k++) {\n    permutation[k]=k;\n  }\n  int c=0;\n  final int[] sortedBitLengths=new int[originalBitLengths.length];\n  for (int k=0; k < originalBitLengths.length; k++) {\n    for (int l=0; l < originalBitLengths.length; l++) {\n      if (originalBitLengths[l] == k) {\n        sortedBitLengths[c]=k;\n        permutation[c]=l;\n        c++;\n      }\n    }\n  }\n  int code=0;\n  int codeIncrement=0;\n  int lastBitLength=0;\n  final int[] codes=new int[totalNumberOfValues];\n  for (int i=totalNumberOfValues - 1; i >= 0; i--) {\n    code=code + codeIncrement;\n    if (sortedBitLengths[i] != lastBitLength) {\n      lastBitLength=sortedBitLengths[i];\n      codeIncrement=1 << (16 - lastBitLength);\n    }\n    codes[permutation[i]]=code;\n  }\n  final BinaryTree tree=new BinaryTree(maxLength);\n  for (int k=0; k < codes.length; k++) {\n    final int bitLength=originalBitLengths[k];\n    if (bitLength > 0) {\n      tree.addLeaf(0,Integer.reverse(codes[k] << 16),bitLength,k);\n    }\n  }\n  return tree;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 391,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3548,
                        "startLineNumber": 113,
                        "startColumnNumber": 4,
                        "endLineNumber": 204,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Decodes the packed binary tree from the specified stream.\n */\nstatic BinaryTree decode(final InputStream inputStream,final int totalNumberOfValues) throws IOException {\n  if (totalNumberOfValues < 0) {\n    throw new IllegalArgumentException(\"totalNumberOfValues must be bigger than 0, is \" + totalNumberOfValues);\n  }\n  final int size=inputStream.read() + 1;\n  if (size == 0) {\n    throw new IOException(\"Cannot read the size of the encoded tree, unexpected end of stream\");\n  }\n  final byte[] encodedTree=new byte[size];\n  final int read=IOUtils.readFully(inputStream,encodedTree);\n  if (read != size) {\n    throw new EOFException();\n  }\n  int maxLength=0;\n  final int[] originalBitLengths=new int[totalNumberOfValues];\n  int pos=0;\n  for (  final byte b : encodedTree) {\n    final int numberOfValues=((b & 0xF0) >> 4) + 1;\n    if (pos + numberOfValues > totalNumberOfValues) {\n      throw new IOException(\"Number of values exceeds given total number of values\");\n    }\n    final int bitLength=(b & 0x0F) + 1;\n    for (int j=0; j < numberOfValues; j++) {\n      originalBitLengths[pos++]=bitLength;\n    }\n    maxLength=Math.max(maxLength,bitLength);\n  }\n  final int[] permutation=new int[originalBitLengths.length];\n  for (int k=0; k < permutation.length; k++) {\n    permutation[k]=k;\n  }\n  int c=0;\n  final int[] sortedBitLengths=new int[originalBitLengths.length];\n  for (int k=0; k < originalBitLengths.length; k++) {\n    for (int l=0; l < originalBitLengths.length; l++) {\n      if (originalBitLengths[l] == k) {\n        sortedBitLengths[c]=k;\n        permutation[c]=l;\n        c++;\n      }\n    }\n  }\n  int code=0;\n  int codeIncrement=0;\n  int lastBitLength=0;\n  final int[] codes=new int[totalNumberOfValues];\n  for (int i=totalNumberOfValues - 1; i >= 0; i--) {\n    code=code + codeIncrement;\n    if (sortedBitLengths[i] != lastBitLength) {\n      lastBitLength=sortedBitLengths[i];\n      codeIncrement=1 << (16 - lastBitLength);\n    }\n    codes[permutation[i]]=code;\n  }\n  final BinaryTree tree=new BinaryTree(maxLength);\n  for (int k=0; k < codes.length; k++) {\n    final int bitLength=originalBitLengths[k];\n    if (bitLength > 0) {\n      tree.addLeaf(0,Integer.reverse(codes[k] << 16),bitLength,k);\n    }\n  }\n  return tree;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 408,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
                "nodePosition": {
                    "charLength": 6,
                    "startLineNumber": 184,
                    "startColumnNumber": 46,
                    "endLineNumber": 184,
                    "endColumnNumber": 52
                },
                "nodeContext": "i >= 0",
                "nodeType": "InfixExpression",
                "astNodeNumber": 3,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "0",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 196,
                "startColumnNumber": 21,
                "endLineNumber": 196,
                "endColumnNumber": 22
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationExpression,fragments]",
                    "nodePosition": {
                        "charLength": 5,
                        "startLineNumber": 196,
                        "startColumnNumber": 17,
                        "endLineNumber": 196,
                        "endColumnNumber": 22
                    },
                    "nodeContext": "k=0",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
                    "nodePosition": {
                        "charLength": 9,
                        "startLineNumber": 196,
                        "startColumnNumber": 13,
                        "endLineNumber": 196,
                        "endColumnNumber": 22
                    },
                    "nodeContext": "int k=0",
                    "nodeType": "VariableDeclarationExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 239,
                        "startLineNumber": 196,
                        "startColumnNumber": 8,
                        "endLineNumber": 201,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int k=0; k < codes.length; k++) {\n  final int bitLength=originalBitLengths[k];\n  if (bitLength > 0) {\n    tree.addLeaf(0,Integer.reverse(codes[k] << 16),bitLength,k);\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 42,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3358,
                        "startLineNumber": 116,
                        "startColumnNumber": 110,
                        "endLineNumber": 204,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (totalNumberOfValues < 0) {\n    throw new IllegalArgumentException(\"totalNumberOfValues must be bigger than 0, is \" + totalNumberOfValues);\n  }\n  final int size=inputStream.read() + 1;\n  if (size == 0) {\n    throw new IOException(\"Cannot read the size of the encoded tree, unexpected end of stream\");\n  }\n  final byte[] encodedTree=new byte[size];\n  final int read=IOUtils.readFully(inputStream,encodedTree);\n  if (read != size) {\n    throw new EOFException();\n  }\n  int maxLength=0;\n  final int[] originalBitLengths=new int[totalNumberOfValues];\n  int pos=0;\n  for (  final byte b : encodedTree) {\n    final int numberOfValues=((b & 0xF0) >> 4) + 1;\n    if (pos + numberOfValues > totalNumberOfValues) {\n      throw new IOException(\"Number of values exceeds given total number of values\");\n    }\n    final int bitLength=(b & 0x0F) + 1;\n    for (int j=0; j < numberOfValues; j++) {\n      originalBitLengths[pos++]=bitLength;\n    }\n    maxLength=Math.max(maxLength,bitLength);\n  }\n  final int[] permutation=new int[originalBitLengths.length];\n  for (int k=0; k < permutation.length; k++) {\n    permutation[k]=k;\n  }\n  int c=0;\n  final int[] sortedBitLengths=new int[originalBitLengths.length];\n  for (int k=0; k < originalBitLengths.length; k++) {\n    for (int l=0; l < originalBitLengths.length; l++) {\n      if (originalBitLengths[l] == k) {\n        sortedBitLengths[c]=k;\n        permutation[c]=l;\n        c++;\n      }\n    }\n  }\n  int code=0;\n  int codeIncrement=0;\n  int lastBitLength=0;\n  final int[] codes=new int[totalNumberOfValues];\n  for (int i=totalNumberOfValues - 1; i >= 0; i--) {\n    code=code + codeIncrement;\n    if (sortedBitLengths[i] != lastBitLength) {\n      lastBitLength=sortedBitLengths[i];\n      codeIncrement=1 << (16 - lastBitLength);\n    }\n    codes[permutation[i]]=code;\n  }\n  final BinaryTree tree=new BinaryTree(maxLength);\n  for (int k=0; k < codes.length; k++) {\n    final int bitLength=originalBitLengths[k];\n    if (bitLength > 0) {\n      tree.addLeaf(0,Integer.reverse(codes[k] << 16),bitLength,k);\n    }\n  }\n  return tree;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 391,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3548,
                        "startLineNumber": 113,
                        "startColumnNumber": 4,
                        "endLineNumber": 204,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Decodes the packed binary tree from the specified stream.\n */\nstatic BinaryTree decode(final InputStream inputStream,final int totalNumberOfValues) throws IOException {\n  if (totalNumberOfValues < 0) {\n    throw new IllegalArgumentException(\"totalNumberOfValues must be bigger than 0, is \" + totalNumberOfValues);\n  }\n  final int size=inputStream.read() + 1;\n  if (size == 0) {\n    throw new IOException(\"Cannot read the size of the encoded tree, unexpected end of stream\");\n  }\n  final byte[] encodedTree=new byte[size];\n  final int read=IOUtils.readFully(inputStream,encodedTree);\n  if (read != size) {\n    throw new EOFException();\n  }\n  int maxLength=0;\n  final int[] originalBitLengths=new int[totalNumberOfValues];\n  int pos=0;\n  for (  final byte b : encodedTree) {\n    final int numberOfValues=((b & 0xF0) >> 4) + 1;\n    if (pos + numberOfValues > totalNumberOfValues) {\n      throw new IOException(\"Number of values exceeds given total number of values\");\n    }\n    final int bitLength=(b & 0x0F) + 1;\n    for (int j=0; j < numberOfValues; j++) {\n      originalBitLengths[pos++]=bitLength;\n    }\n    maxLength=Math.max(maxLength,bitLength);\n  }\n  final int[] permutation=new int[originalBitLengths.length];\n  for (int k=0; k < permutation.length; k++) {\n    permutation[k]=k;\n  }\n  int c=0;\n  final int[] sortedBitLengths=new int[originalBitLengths.length];\n  for (int k=0; k < originalBitLengths.length; k++) {\n    for (int l=0; l < originalBitLengths.length; l++) {\n      if (originalBitLengths[l] == k) {\n        sortedBitLengths[c]=k;\n        permutation[c]=l;\n        c++;\n      }\n    }\n  }\n  int code=0;\n  int codeIncrement=0;\n  int lastBitLength=0;\n  final int[] codes=new int[totalNumberOfValues];\n  for (int i=totalNumberOfValues - 1; i >= 0; i--) {\n    code=code + codeIncrement;\n    if (sortedBitLengths[i] != lastBitLength) {\n      lastBitLength=sortedBitLengths[i];\n      codeIncrement=1 << (16 - lastBitLength);\n    }\n    codes[permutation[i]]=code;\n  }\n  final BinaryTree tree=new BinaryTree(maxLength);\n  for (int k=0; k < codes.length; k++) {\n    final int bitLength=originalBitLengths[k];\n    if (bitLength > 0) {\n      tree.addLeaf(0,Integer.reverse(codes[k] << 16),bitLength,k);\n    }\n  }\n  return tree;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 408,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
                "nodePosition": {
                    "charLength": 9,
                    "startLineNumber": 196,
                    "startColumnNumber": 13,
                    "endLineNumber": 196,
                    "endColumnNumber": 22
                },
                "nodeContext": "int k=0",
                "nodeType": "VariableDeclarationExpression",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "0",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 198,
                "startColumnNumber": 28,
                "endLineNumber": 198,
                "endColumnNumber": 29
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 13,
                        "startLineNumber": 198,
                        "startColumnNumber": 16,
                        "endLineNumber": 198,
                        "endColumnNumber": 29
                    },
                    "nodeContext": "bitLength > 0",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 116,
                        "startLineNumber": 198,
                        "startColumnNumber": 12,
                        "endLineNumber": 200,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (bitLength > 0) {\n  tree.addLeaf(0,Integer.reverse(codes[k] << 16),bitLength,k);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 20,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 200,
                        "startLineNumber": 196,
                        "startColumnNumber": 47,
                        "endLineNumber": 201,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final int bitLength=originalBitLengths[k];\n  if (bitLength > 0) {\n    tree.addLeaf(0,Integer.reverse(codes[k] << 16),bitLength,k);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 29,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 239,
                        "startLineNumber": 196,
                        "startColumnNumber": 8,
                        "endLineNumber": 201,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int k=0; k < codes.length; k++) {\n  final int bitLength=originalBitLengths[k];\n  if (bitLength > 0) {\n    tree.addLeaf(0,Integer.reverse(codes[k] << 16),bitLength,k);\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 42,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3358,
                        "startLineNumber": 116,
                        "startColumnNumber": 110,
                        "endLineNumber": 204,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (totalNumberOfValues < 0) {\n    throw new IllegalArgumentException(\"totalNumberOfValues must be bigger than 0, is \" + totalNumberOfValues);\n  }\n  final int size=inputStream.read() + 1;\n  if (size == 0) {\n    throw new IOException(\"Cannot read the size of the encoded tree, unexpected end of stream\");\n  }\n  final byte[] encodedTree=new byte[size];\n  final int read=IOUtils.readFully(inputStream,encodedTree);\n  if (read != size) {\n    throw new EOFException();\n  }\n  int maxLength=0;\n  final int[] originalBitLengths=new int[totalNumberOfValues];\n  int pos=0;\n  for (  final byte b : encodedTree) {\n    final int numberOfValues=((b & 0xF0) >> 4) + 1;\n    if (pos + numberOfValues > totalNumberOfValues) {\n      throw new IOException(\"Number of values exceeds given total number of values\");\n    }\n    final int bitLength=(b & 0x0F) + 1;\n    for (int j=0; j < numberOfValues; j++) {\n      originalBitLengths[pos++]=bitLength;\n    }\n    maxLength=Math.max(maxLength,bitLength);\n  }\n  final int[] permutation=new int[originalBitLengths.length];\n  for (int k=0; k < permutation.length; k++) {\n    permutation[k]=k;\n  }\n  int c=0;\n  final int[] sortedBitLengths=new int[originalBitLengths.length];\n  for (int k=0; k < originalBitLengths.length; k++) {\n    for (int l=0; l < originalBitLengths.length; l++) {\n      if (originalBitLengths[l] == k) {\n        sortedBitLengths[c]=k;\n        permutation[c]=l;\n        c++;\n      }\n    }\n  }\n  int code=0;\n  int codeIncrement=0;\n  int lastBitLength=0;\n  final int[] codes=new int[totalNumberOfValues];\n  for (int i=totalNumberOfValues - 1; i >= 0; i--) {\n    code=code + codeIncrement;\n    if (sortedBitLengths[i] != lastBitLength) {\n      lastBitLength=sortedBitLengths[i];\n      codeIncrement=1 << (16 - lastBitLength);\n    }\n    codes[permutation[i]]=code;\n  }\n  final BinaryTree tree=new BinaryTree(maxLength);\n  for (int k=0; k < codes.length; k++) {\n    final int bitLength=originalBitLengths[k];\n    if (bitLength > 0) {\n      tree.addLeaf(0,Integer.reverse(codes[k] << 16),bitLength,k);\n    }\n  }\n  return tree;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 391,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3548,
                        "startLineNumber": 113,
                        "startColumnNumber": 4,
                        "endLineNumber": 204,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Decodes the packed binary tree from the specified stream.\n */\nstatic BinaryTree decode(final InputStream inputStream,final int totalNumberOfValues) throws IOException {\n  if (totalNumberOfValues < 0) {\n    throw new IllegalArgumentException(\"totalNumberOfValues must be bigger than 0, is \" + totalNumberOfValues);\n  }\n  final int size=inputStream.read() + 1;\n  if (size == 0) {\n    throw new IOException(\"Cannot read the size of the encoded tree, unexpected end of stream\");\n  }\n  final byte[] encodedTree=new byte[size];\n  final int read=IOUtils.readFully(inputStream,encodedTree);\n  if (read != size) {\n    throw new EOFException();\n  }\n  int maxLength=0;\n  final int[] originalBitLengths=new int[totalNumberOfValues];\n  int pos=0;\n  for (  final byte b : encodedTree) {\n    final int numberOfValues=((b & 0xF0) >> 4) + 1;\n    if (pos + numberOfValues > totalNumberOfValues) {\n      throw new IOException(\"Number of values exceeds given total number of values\");\n    }\n    final int bitLength=(b & 0x0F) + 1;\n    for (int j=0; j < numberOfValues; j++) {\n      originalBitLengths[pos++]=bitLength;\n    }\n    maxLength=Math.max(maxLength,bitLength);\n  }\n  final int[] permutation=new int[originalBitLengths.length];\n  for (int k=0; k < permutation.length; k++) {\n    permutation[k]=k;\n  }\n  int c=0;\n  final int[] sortedBitLengths=new int[originalBitLengths.length];\n  for (int k=0; k < originalBitLengths.length; k++) {\n    for (int l=0; l < originalBitLengths.length; l++) {\n      if (originalBitLengths[l] == k) {\n        sortedBitLengths[c]=k;\n        permutation[c]=l;\n        c++;\n      }\n    }\n  }\n  int code=0;\n  int codeIncrement=0;\n  int lastBitLength=0;\n  final int[] codes=new int[totalNumberOfValues];\n  for (int i=totalNumberOfValues - 1; i >= 0; i--) {\n    code=code + codeIncrement;\n    if (sortedBitLengths[i] != lastBitLength) {\n      lastBitLength=sortedBitLengths[i];\n      codeIncrement=1 << (16 - lastBitLength);\n    }\n    codes[permutation[i]]=code;\n  }\n  final BinaryTree tree=new BinaryTree(maxLength);\n  for (int k=0; k < codes.length; k++) {\n    final int bitLength=originalBitLengths[k];\n    if (bitLength > 0) {\n      tree.addLeaf(0,Integer.reverse(codes[k] << 16),bitLength,k);\n    }\n  }\n  return tree;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 408,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 13,
                    "startLineNumber": 198,
                    "startColumnNumber": 16,
                    "endLineNumber": 198,
                    "endColumnNumber": 29
                },
                "nodeContext": "bitLength > 0",
                "nodeType": "InfixExpression",
                "astNodeNumber": 3,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "0",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 199,
                "startColumnNumber": 29,
                "endLineNumber": 199,
                "endColumnNumber": 30
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 62,
                        "startLineNumber": 199,
                        "startColumnNumber": 16,
                        "endLineNumber": 199,
                        "endColumnNumber": 78
                    },
                    "nodeContext": "tree.addLeaf(0,Integer.reverse(codes[k] << 16),bitLength,k)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 14,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 63,
                        "startLineNumber": 199,
                        "startColumnNumber": 16,
                        "endLineNumber": 199,
                        "endColumnNumber": 79
                    },
                    "nodeContext": "tree.addLeaf(0,Integer.reverse(codes[k] << 16),bitLength,k);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 15,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 97,
                        "startLineNumber": 198,
                        "startColumnNumber": 31,
                        "endLineNumber": 200,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  tree.addLeaf(0,Integer.reverse(codes[k] << 16),bitLength,k);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 16,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 116,
                        "startLineNumber": 198,
                        "startColumnNumber": 12,
                        "endLineNumber": 200,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (bitLength > 0) {\n  tree.addLeaf(0,Integer.reverse(codes[k] << 16),bitLength,k);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 20,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 200,
                        "startLineNumber": 196,
                        "startColumnNumber": 47,
                        "endLineNumber": 201,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final int bitLength=originalBitLengths[k];\n  if (bitLength > 0) {\n    tree.addLeaf(0,Integer.reverse(codes[k] << 16),bitLength,k);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 29,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 239,
                        "startLineNumber": 196,
                        "startColumnNumber": 8,
                        "endLineNumber": 201,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int k=0; k < codes.length; k++) {\n  final int bitLength=originalBitLengths[k];\n  if (bitLength > 0) {\n    tree.addLeaf(0,Integer.reverse(codes[k] << 16),bitLength,k);\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 42,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3358,
                        "startLineNumber": 116,
                        "startColumnNumber": 110,
                        "endLineNumber": 204,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (totalNumberOfValues < 0) {\n    throw new IllegalArgumentException(\"totalNumberOfValues must be bigger than 0, is \" + totalNumberOfValues);\n  }\n  final int size=inputStream.read() + 1;\n  if (size == 0) {\n    throw new IOException(\"Cannot read the size of the encoded tree, unexpected end of stream\");\n  }\n  final byte[] encodedTree=new byte[size];\n  final int read=IOUtils.readFully(inputStream,encodedTree);\n  if (read != size) {\n    throw new EOFException();\n  }\n  int maxLength=0;\n  final int[] originalBitLengths=new int[totalNumberOfValues];\n  int pos=0;\n  for (  final byte b : encodedTree) {\n    final int numberOfValues=((b & 0xF0) >> 4) + 1;\n    if (pos + numberOfValues > totalNumberOfValues) {\n      throw new IOException(\"Number of values exceeds given total number of values\");\n    }\n    final int bitLength=(b & 0x0F) + 1;\n    for (int j=0; j < numberOfValues; j++) {\n      originalBitLengths[pos++]=bitLength;\n    }\n    maxLength=Math.max(maxLength,bitLength);\n  }\n  final int[] permutation=new int[originalBitLengths.length];\n  for (int k=0; k < permutation.length; k++) {\n    permutation[k]=k;\n  }\n  int c=0;\n  final int[] sortedBitLengths=new int[originalBitLengths.length];\n  for (int k=0; k < originalBitLengths.length; k++) {\n    for (int l=0; l < originalBitLengths.length; l++) {\n      if (originalBitLengths[l] == k) {\n        sortedBitLengths[c]=k;\n        permutation[c]=l;\n        c++;\n      }\n    }\n  }\n  int code=0;\n  int codeIncrement=0;\n  int lastBitLength=0;\n  final int[] codes=new int[totalNumberOfValues];\n  for (int i=totalNumberOfValues - 1; i >= 0; i--) {\n    code=code + codeIncrement;\n    if (sortedBitLengths[i] != lastBitLength) {\n      lastBitLength=sortedBitLengths[i];\n      codeIncrement=1 << (16 - lastBitLength);\n    }\n    codes[permutation[i]]=code;\n  }\n  final BinaryTree tree=new BinaryTree(maxLength);\n  for (int k=0; k < codes.length; k++) {\n    final int bitLength=originalBitLengths[k];\n    if (bitLength > 0) {\n      tree.addLeaf(0,Integer.reverse(codes[k] << 16),bitLength,k);\n    }\n  }\n  return tree;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 391,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3548,
                        "startLineNumber": 113,
                        "startColumnNumber": 4,
                        "endLineNumber": 204,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Decodes the packed binary tree from the specified stream.\n */\nstatic BinaryTree decode(final InputStream inputStream,final int totalNumberOfValues) throws IOException {\n  if (totalNumberOfValues < 0) {\n    throw new IllegalArgumentException(\"totalNumberOfValues must be bigger than 0, is \" + totalNumberOfValues);\n  }\n  final int size=inputStream.read() + 1;\n  if (size == 0) {\n    throw new IOException(\"Cannot read the size of the encoded tree, unexpected end of stream\");\n  }\n  final byte[] encodedTree=new byte[size];\n  final int read=IOUtils.readFully(inputStream,encodedTree);\n  if (read != size) {\n    throw new EOFException();\n  }\n  int maxLength=0;\n  final int[] originalBitLengths=new int[totalNumberOfValues];\n  int pos=0;\n  for (  final byte b : encodedTree) {\n    final int numberOfValues=((b & 0xF0) >> 4) + 1;\n    if (pos + numberOfValues > totalNumberOfValues) {\n      throw new IOException(\"Number of values exceeds given total number of values\");\n    }\n    final int bitLength=(b & 0x0F) + 1;\n    for (int j=0; j < numberOfValues; j++) {\n      originalBitLengths[pos++]=bitLength;\n    }\n    maxLength=Math.max(maxLength,bitLength);\n  }\n  final int[] permutation=new int[originalBitLengths.length];\n  for (int k=0; k < permutation.length; k++) {\n    permutation[k]=k;\n  }\n  int c=0;\n  final int[] sortedBitLengths=new int[originalBitLengths.length];\n  for (int k=0; k < originalBitLengths.length; k++) {\n    for (int l=0; l < originalBitLengths.length; l++) {\n      if (originalBitLengths[l] == k) {\n        sortedBitLengths[c]=k;\n        permutation[c]=l;\n        c++;\n      }\n    }\n  }\n  int code=0;\n  int codeIncrement=0;\n  int lastBitLength=0;\n  final int[] codes=new int[totalNumberOfValues];\n  for (int i=totalNumberOfValues - 1; i >= 0; i--) {\n    code=code + codeIncrement;\n    if (sortedBitLengths[i] != lastBitLength) {\n      lastBitLength=sortedBitLengths[i];\n      codeIncrement=1 << (16 - lastBitLength);\n    }\n    codes[permutation[i]]=code;\n  }\n  final BinaryTree tree=new BinaryTree(maxLength);\n  for (int k=0; k < codes.length; k++) {\n    final int bitLength=originalBitLengths[k];\n    if (bitLength > 0) {\n      tree.addLeaf(0,Integer.reverse(codes[k] << 16),bitLength,k);\n    }\n  }\n  return tree;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 408,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 63,
                    "startLineNumber": 199,
                    "startColumnNumber": 16,
                    "endLineNumber": 199,
                    "endColumnNumber": 79
                },
                "nodeContext": "tree.addLeaf(0,Integer.reverse(codes[k] << 16),bitLength,k);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 15,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "int"
        }
    ],
    "positionList": [
        {
            "charLength": 1,
            "startLineNumber": 117,
            "startColumnNumber": 34,
            "endLineNumber": 117,
            "endColumnNumber": 35
        },
        {
            "charLength": 1,
            "startLineNumber": 123,
            "startColumnNumber": 20,
            "endLineNumber": 123,
            "endColumnNumber": 21
        },
        {
            "charLength": 1,
            "startLineNumber": 134,
            "startColumnNumber": 24,
            "endLineNumber": 134,
            "endColumnNumber": 25
        },
        {
            "charLength": 1,
            "startLineNumber": 137,
            "startColumnNumber": 18,
            "endLineNumber": 137,
            "endColumnNumber": 19
        },
        {
            "charLength": 1,
            "startLineNumber": 146,
            "startColumnNumber": 25,
            "endLineNumber": 146,
            "endColumnNumber": 26
        },
        {
            "charLength": 1,
            "startLineNumber": 155,
            "startColumnNumber": 21,
            "endLineNumber": 155,
            "endColumnNumber": 22
        },
        {
            "charLength": 1,
            "startLineNumber": 159,
            "startColumnNumber": 16,
            "endLineNumber": 159,
            "endColumnNumber": 17
        },
        {
            "charLength": 1,
            "startLineNumber": 161,
            "startColumnNumber": 21,
            "endLineNumber": 161,
            "endColumnNumber": 22
        },
        {
            "charLength": 1,
            "startLineNumber": 163,
            "startColumnNumber": 25,
            "endLineNumber": 163,
            "endColumnNumber": 26
        },
        {
            "charLength": 1,
            "startLineNumber": 178,
            "startColumnNumber": 19,
            "endLineNumber": 178,
            "endColumnNumber": 20
        },
        {
            "charLength": 1,
            "startLineNumber": 179,
            "startColumnNumber": 28,
            "endLineNumber": 179,
            "endColumnNumber": 29
        },
        {
            "charLength": 1,
            "startLineNumber": 180,
            "startColumnNumber": 28,
            "endLineNumber": 180,
            "endColumnNumber": 29
        },
        {
            "charLength": 1,
            "startLineNumber": 184,
            "startColumnNumber": 51,
            "endLineNumber": 184,
            "endColumnNumber": 52
        },
        {
            "charLength": 1,
            "startLineNumber": 196,
            "startColumnNumber": 21,
            "endLineNumber": 196,
            "endColumnNumber": 22
        },
        {
            "charLength": 1,
            "startLineNumber": 198,
            "startColumnNumber": 28,
            "endLineNumber": 198,
            "endColumnNumber": 29
        },
        {
            "charLength": 1,
            "startLineNumber": 199,
            "startColumnNumber": 29,
            "endLineNumber": 199,
            "endColumnNumber": 30
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 8,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 9,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 10,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 11,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 12,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 13,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 14,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 15,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 7,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 7,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 9,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 10,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 11,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 12,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 13,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 14,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 15,
            "layout": 5
        },
        {
            "firstKey": 9,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 9,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 9,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 9,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 9,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 9,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 9,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 9,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 9,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 9,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 9,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 9,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 9,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 9,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 9,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 14,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 14,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 14,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 14,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 14,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 14,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 14,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 14,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 14,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 14,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 14,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 14,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 14,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 14,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 14,
            "secondKey": 15,
            "layout": 1
        },
        {
            "firstKey": 15,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 5,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 6,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 7,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 8,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 9,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 10,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 11,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 12,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 13,
            "layout": 5
        },
        {
            "firstKey": 15,
            "secondKey": 14,
            "layout": 3
        }
    ]
}