{
    "id": 887,
    "expression": "yb",
    "projectName": "commons-math",
    "commitID": "5c70086611bca0da6879b569f97d116b666b890e",
    "filePath": "src/main/java/org/apache/commons/math3/util/FastMath.java",
    "occurrences": 12,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 0,
    "expressionList": [
        {
            "nodeContext": "yb",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 2478,
                "startColumnNumber": 14,
                "endLineNumber": 2478,
                "endColumnNumber": 16
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 8,
                        "startLineNumber": 2478,
                        "startColumnNumber": 8,
                        "endLineNumber": 2478,
                        "endColumnNumber": 16
                    },
                    "nodeContext": "xb+=yb",
                    "nodeType": "Assignment",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 9,
                        "startLineNumber": 2478,
                        "startColumnNumber": 8,
                        "endLineNumber": 2478,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "xb+=yb;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4272,
                        "startLineNumber": 2434,
                        "startColumnNumber": 72,
                        "endLineNumber": 2577,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (xa == 0.0) {\n    return leftPlane ? copySign(Math.PI,xa) : xa;\n  }\n  final boolean negate;\n  if (xa < 0) {\n    xa=-xa;\n    xb=-xb;\n    negate=true;\n  }\n else {\n    negate=false;\n  }\n  if (xa > 1.633123935319537E16) {\n    return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);\n  }\n  final int idx;\n  if (xa < 1) {\n    idx=(int)(((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);\n  }\n else {\n    final double oneOverXa=1 / xa;\n    idx=(int)(-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);\n  }\n  final double ttA=TANGENT_TABLE_A[idx];\n  final double ttB=TANGENT_TABLE_B[idx];\n  double epsA=xa - ttA;\n  double epsB=-(epsA - xa + ttA);\n  epsB+=xb - ttB;\n  double temp=epsA + epsB;\n  epsB=-(temp - epsA - epsB);\n  epsA=temp;\n  temp=xa * HEX_40000000;\n  double ya=xa + temp - temp;\n  double yb=xb + xa - ya;\n  xa=ya;\n  xb+=yb;\n  if (idx == 0) {\n    final double denom=1d / (1d + (xa + xb) * (ttA + ttB));\n    ya=epsA * denom;\n    yb=epsB * denom;\n  }\n else {\n    double temp2=xa * ttA;\n    double za=1d + temp2;\n    double zb=-(za - 1d - temp2);\n    temp2=xb * ttA + xa * ttB;\n    temp=za + temp2;\n    zb+=-(temp - za - temp2);\n    za=temp;\n    zb+=xb * ttB;\n    ya=epsA / za;\n    temp=ya * HEX_40000000;\n    final double yaa=(ya + temp) - temp;\n    final double yab=ya - yaa;\n    temp=za * HEX_40000000;\n    final double zaa=(za + temp) - temp;\n    final double zab=za - zaa;\n    yb=(epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;\n    yb+=-epsA * zb / za / za;\n    yb+=epsB / za;\n  }\n  epsA=ya;\n  epsB=yb;\n  final double epsA2=epsA * epsA;\n  yb=0.07490822288864472;\n  yb=yb * epsA2 + -0.09088450866185192;\n  yb=yb * epsA2 + 0.11111095942313305;\n  yb=yb * epsA2 + -0.1428571423679182;\n  yb=yb * epsA2 + 0.19999999999923582;\n  yb=yb * epsA2 + -0.33333333333333287;\n  yb=yb * epsA2 * epsA;\n  ya=epsA;\n  temp=ya + yb;\n  yb=-(temp - ya - yb);\n  ya=temp;\n  yb+=epsB / (1d + epsA * epsA);\n  double za=EIGHTHS[idx] + ya;\n  double zb=-(za - EIGHTHS[idx] - ya);\n  temp=za + yb;\n  zb+=-(temp - za - yb);\n  za=temp;\n  double result=za + zb;\n  if (leftPlane) {\n    final double resultb=-(result - za - zb);\n    final double pia=1.5707963267948966 * 2;\n    final double pib=6.123233995736766E-17 * 2;\n    za=pia - result;\n    zb=-(za - pia + result);\n    zb+=pib - resultb;\n    result=za + zb;\n  }\n  if (negate ^ leftPlane) {\n    result=-result;\n  }\n  return result;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 632,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4674,
                        "startLineNumber": 2428,
                        "startColumnNumber": 4,
                        "endLineNumber": 2577,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Internal helper function to compute arctangent.\n * @param xa number from which arctangent is requested\n * @param xb extra bits for x (may be 0.0)\n * @param leftPlane if true, result angle must be put in the left half plane\n * @return atan(xa + xb) (or angle shifted by {@code PI} if leftPlane is true)\n */\nprivate static double atan(double xa,double xb,boolean leftPlane){\n  if (xa == 0.0) {\n    return leftPlane ? copySign(Math.PI,xa) : xa;\n  }\n  final boolean negate;\n  if (xa < 0) {\n    xa=-xa;\n    xb=-xb;\n    negate=true;\n  }\n else {\n    negate=false;\n  }\n  if (xa > 1.633123935319537E16) {\n    return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);\n  }\n  final int idx;\n  if (xa < 1) {\n    idx=(int)(((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);\n  }\n else {\n    final double oneOverXa=1 / xa;\n    idx=(int)(-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);\n  }\n  final double ttA=TANGENT_TABLE_A[idx];\n  final double ttB=TANGENT_TABLE_B[idx];\n  double epsA=xa - ttA;\n  double epsB=-(epsA - xa + ttA);\n  epsB+=xb - ttB;\n  double temp=epsA + epsB;\n  epsB=-(temp - epsA - epsB);\n  epsA=temp;\n  temp=xa * HEX_40000000;\n  double ya=xa + temp - temp;\n  double yb=xb + xa - ya;\n  xa=ya;\n  xb+=yb;\n  if (idx == 0) {\n    final double denom=1d / (1d + (xa + xb) * (ttA + ttB));\n    ya=epsA * denom;\n    yb=epsB * denom;\n  }\n else {\n    double temp2=xa * ttA;\n    double za=1d + temp2;\n    double zb=-(za - 1d - temp2);\n    temp2=xb * ttA + xa * ttB;\n    temp=za + temp2;\n    zb+=-(temp - za - temp2);\n    za=temp;\n    zb+=xb * ttB;\n    ya=epsA / za;\n    temp=ya * HEX_40000000;\n    final double yaa=(ya + temp) - temp;\n    final double yab=ya - yaa;\n    temp=za * HEX_40000000;\n    final double zaa=(za + temp) - temp;\n    final double zab=za - zaa;\n    yb=(epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;\n    yb+=-epsA * zb / za / za;\n    yb+=epsB / za;\n  }\n  epsA=ya;\n  epsB=yb;\n  final double epsA2=epsA * epsA;\n  yb=0.07490822288864472;\n  yb=yb * epsA2 + -0.09088450866185192;\n  yb=yb * epsA2 + 0.11111095942313305;\n  yb=yb * epsA2 + -0.1428571423679182;\n  yb=yb * epsA2 + 0.19999999999923582;\n  yb=yb * epsA2 + -0.33333333333333287;\n  yb=yb * epsA2 * epsA;\n  ya=epsA;\n  temp=ya + yb;\n  yb=-(temp - ya - yb);\n  ya=temp;\n  yb+=epsB / (1d + epsA * epsA);\n  double za=EIGHTHS[idx] + ya;\n  double zb=-(za - EIGHTHS[idx] - ya);\n  temp=za + yb;\n  zb+=-(temp - za - yb);\n  za=temp;\n  double result=za + zb;\n  if (leftPlane) {\n    final double resultb=-(result - za - zb);\n    final double pia=1.5707963267948966 * 2;\n    final double pib=6.123233995736766E-17 * 2;\n    za=pia - result;\n    zb=-(za - pia + result);\n    zb+=pib - resultb;\n    result=za + zb;\n  }\n  if (negate ^ leftPlane) {\n    result=-result;\n  }\n  return result;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 647,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 9,
                    "startLineNumber": 2478,
                    "startColumnNumber": 8,
                    "endLineNumber": 2478,
                    "endColumnNumber": 17
                },
                "nodeContext": "xb+=yb;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 4,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "double"
        },
        {
            "nodeContext": "yb",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 2517,
                "startColumnNumber": 15,
                "endLineNumber": 2517,
                "endColumnNumber": 17
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 9,
                        "startLineNumber": 2517,
                        "startColumnNumber": 8,
                        "endLineNumber": 2517,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "epsB=yb",
                    "nodeType": "Assignment",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 10,
                        "startLineNumber": 2517,
                        "startColumnNumber": 8,
                        "endLineNumber": 2517,
                        "endColumnNumber": 18
                    },
                    "nodeContext": "epsB=yb;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4272,
                        "startLineNumber": 2434,
                        "startColumnNumber": 72,
                        "endLineNumber": 2577,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (xa == 0.0) {\n    return leftPlane ? copySign(Math.PI,xa) : xa;\n  }\n  final boolean negate;\n  if (xa < 0) {\n    xa=-xa;\n    xb=-xb;\n    negate=true;\n  }\n else {\n    negate=false;\n  }\n  if (xa > 1.633123935319537E16) {\n    return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);\n  }\n  final int idx;\n  if (xa < 1) {\n    idx=(int)(((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);\n  }\n else {\n    final double oneOverXa=1 / xa;\n    idx=(int)(-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);\n  }\n  final double ttA=TANGENT_TABLE_A[idx];\n  final double ttB=TANGENT_TABLE_B[idx];\n  double epsA=xa - ttA;\n  double epsB=-(epsA - xa + ttA);\n  epsB+=xb - ttB;\n  double temp=epsA + epsB;\n  epsB=-(temp - epsA - epsB);\n  epsA=temp;\n  temp=xa * HEX_40000000;\n  double ya=xa + temp - temp;\n  double yb=xb + xa - ya;\n  xa=ya;\n  xb+=yb;\n  if (idx == 0) {\n    final double denom=1d / (1d + (xa + xb) * (ttA + ttB));\n    ya=epsA * denom;\n    yb=epsB * denom;\n  }\n else {\n    double temp2=xa * ttA;\n    double za=1d + temp2;\n    double zb=-(za - 1d - temp2);\n    temp2=xb * ttA + xa * ttB;\n    temp=za + temp2;\n    zb+=-(temp - za - temp2);\n    za=temp;\n    zb+=xb * ttB;\n    ya=epsA / za;\n    temp=ya * HEX_40000000;\n    final double yaa=(ya + temp) - temp;\n    final double yab=ya - yaa;\n    temp=za * HEX_40000000;\n    final double zaa=(za + temp) - temp;\n    final double zab=za - zaa;\n    yb=(epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;\n    yb+=-epsA * zb / za / za;\n    yb+=epsB / za;\n  }\n  epsA=ya;\n  epsB=yb;\n  final double epsA2=epsA * epsA;\n  yb=0.07490822288864472;\n  yb=yb * epsA2 + -0.09088450866185192;\n  yb=yb * epsA2 + 0.11111095942313305;\n  yb=yb * epsA2 + -0.1428571423679182;\n  yb=yb * epsA2 + 0.19999999999923582;\n  yb=yb * epsA2 + -0.33333333333333287;\n  yb=yb * epsA2 * epsA;\n  ya=epsA;\n  temp=ya + yb;\n  yb=-(temp - ya - yb);\n  ya=temp;\n  yb+=epsB / (1d + epsA * epsA);\n  double za=EIGHTHS[idx] + ya;\n  double zb=-(za - EIGHTHS[idx] - ya);\n  temp=za + yb;\n  zb+=-(temp - za - yb);\n  za=temp;\n  double result=za + zb;\n  if (leftPlane) {\n    final double resultb=-(result - za - zb);\n    final double pia=1.5707963267948966 * 2;\n    final double pib=6.123233995736766E-17 * 2;\n    za=pia - result;\n    zb=-(za - pia + result);\n    zb+=pib - resultb;\n    result=za + zb;\n  }\n  if (negate ^ leftPlane) {\n    result=-result;\n  }\n  return result;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 632,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4674,
                        "startLineNumber": 2428,
                        "startColumnNumber": 4,
                        "endLineNumber": 2577,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Internal helper function to compute arctangent.\n * @param xa number from which arctangent is requested\n * @param xb extra bits for x (may be 0.0)\n * @param leftPlane if true, result angle must be put in the left half plane\n * @return atan(xa + xb) (or angle shifted by {@code PI} if leftPlane is true)\n */\nprivate static double atan(double xa,double xb,boolean leftPlane){\n  if (xa == 0.0) {\n    return leftPlane ? copySign(Math.PI,xa) : xa;\n  }\n  final boolean negate;\n  if (xa < 0) {\n    xa=-xa;\n    xb=-xb;\n    negate=true;\n  }\n else {\n    negate=false;\n  }\n  if (xa > 1.633123935319537E16) {\n    return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);\n  }\n  final int idx;\n  if (xa < 1) {\n    idx=(int)(((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);\n  }\n else {\n    final double oneOverXa=1 / xa;\n    idx=(int)(-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);\n  }\n  final double ttA=TANGENT_TABLE_A[idx];\n  final double ttB=TANGENT_TABLE_B[idx];\n  double epsA=xa - ttA;\n  double epsB=-(epsA - xa + ttA);\n  epsB+=xb - ttB;\n  double temp=epsA + epsB;\n  epsB=-(temp - epsA - epsB);\n  epsA=temp;\n  temp=xa * HEX_40000000;\n  double ya=xa + temp - temp;\n  double yb=xb + xa - ya;\n  xa=ya;\n  xb+=yb;\n  if (idx == 0) {\n    final double denom=1d / (1d + (xa + xb) * (ttA + ttB));\n    ya=epsA * denom;\n    yb=epsB * denom;\n  }\n else {\n    double temp2=xa * ttA;\n    double za=1d + temp2;\n    double zb=-(za - 1d - temp2);\n    temp2=xb * ttA + xa * ttB;\n    temp=za + temp2;\n    zb+=-(temp - za - temp2);\n    za=temp;\n    zb+=xb * ttB;\n    ya=epsA / za;\n    temp=ya * HEX_40000000;\n    final double yaa=(ya + temp) - temp;\n    final double yab=ya - yaa;\n    temp=za * HEX_40000000;\n    final double zaa=(za + temp) - temp;\n    final double zab=za - zaa;\n    yb=(epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;\n    yb+=-epsA * zb / za / za;\n    yb+=epsB / za;\n  }\n  epsA=ya;\n  epsB=yb;\n  final double epsA2=epsA * epsA;\n  yb=0.07490822288864472;\n  yb=yb * epsA2 + -0.09088450866185192;\n  yb=yb * epsA2 + 0.11111095942313305;\n  yb=yb * epsA2 + -0.1428571423679182;\n  yb=yb * epsA2 + 0.19999999999923582;\n  yb=yb * epsA2 + -0.33333333333333287;\n  yb=yb * epsA2 * epsA;\n  ya=epsA;\n  temp=ya + yb;\n  yb=-(temp - ya - yb);\n  ya=temp;\n  yb+=epsB / (1d + epsA * epsA);\n  double za=EIGHTHS[idx] + ya;\n  double zb=-(za - EIGHTHS[idx] - ya);\n  temp=za + yb;\n  zb+=-(temp - za - yb);\n  za=temp;\n  double result=za + zb;\n  if (leftPlane) {\n    final double resultb=-(result - za - zb);\n    final double pia=1.5707963267948966 * 2;\n    final double pib=6.123233995736766E-17 * 2;\n    za=pia - result;\n    zb=-(za - pia + result);\n    zb+=pib - resultb;\n    result=za + zb;\n  }\n  if (negate ^ leftPlane) {\n    result=-result;\n  }\n  return result;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 647,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 10,
                    "startLineNumber": 2517,
                    "startColumnNumber": 8,
                    "endLineNumber": 2517,
                    "endColumnNumber": 18
                },
                "nodeContext": "epsB=yb;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 4,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "double"
        },
        {
            "nodeContext": "yb",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 2532,
                "startColumnNumber": 13,
                "endLineNumber": 2532,
                "endColumnNumber": 15
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 10,
                        "startLineNumber": 2532,
                        "startColumnNumber": 13,
                        "endLineNumber": 2532,
                        "endColumnNumber": 23
                    },
                    "nodeContext": "yb * epsA2",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 33,
                        "startLineNumber": 2532,
                        "startColumnNumber": 13,
                        "endLineNumber": 2532,
                        "endColumnNumber": 46
                    },
                    "nodeContext": "yb * epsA2 + -0.09088450866185192",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 38,
                        "startLineNumber": 2532,
                        "startColumnNumber": 8,
                        "endLineNumber": 2532,
                        "endColumnNumber": 46
                    },
                    "nodeContext": "yb=yb * epsA2 + -0.09088450866185192",
                    "nodeType": "Assignment",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 39,
                        "startLineNumber": 2532,
                        "startColumnNumber": 8,
                        "endLineNumber": 2532,
                        "endColumnNumber": 47
                    },
                    "nodeContext": "yb=yb * epsA2 + -0.09088450866185192;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 9,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4272,
                        "startLineNumber": 2434,
                        "startColumnNumber": 72,
                        "endLineNumber": 2577,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (xa == 0.0) {\n    return leftPlane ? copySign(Math.PI,xa) : xa;\n  }\n  final boolean negate;\n  if (xa < 0) {\n    xa=-xa;\n    xb=-xb;\n    negate=true;\n  }\n else {\n    negate=false;\n  }\n  if (xa > 1.633123935319537E16) {\n    return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);\n  }\n  final int idx;\n  if (xa < 1) {\n    idx=(int)(((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);\n  }\n else {\n    final double oneOverXa=1 / xa;\n    idx=(int)(-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);\n  }\n  final double ttA=TANGENT_TABLE_A[idx];\n  final double ttB=TANGENT_TABLE_B[idx];\n  double epsA=xa - ttA;\n  double epsB=-(epsA - xa + ttA);\n  epsB+=xb - ttB;\n  double temp=epsA + epsB;\n  epsB=-(temp - epsA - epsB);\n  epsA=temp;\n  temp=xa * HEX_40000000;\n  double ya=xa + temp - temp;\n  double yb=xb + xa - ya;\n  xa=ya;\n  xb+=yb;\n  if (idx == 0) {\n    final double denom=1d / (1d + (xa + xb) * (ttA + ttB));\n    ya=epsA * denom;\n    yb=epsB * denom;\n  }\n else {\n    double temp2=xa * ttA;\n    double za=1d + temp2;\n    double zb=-(za - 1d - temp2);\n    temp2=xb * ttA + xa * ttB;\n    temp=za + temp2;\n    zb+=-(temp - za - temp2);\n    za=temp;\n    zb+=xb * ttB;\n    ya=epsA / za;\n    temp=ya * HEX_40000000;\n    final double yaa=(ya + temp) - temp;\n    final double yab=ya - yaa;\n    temp=za * HEX_40000000;\n    final double zaa=(za + temp) - temp;\n    final double zab=za - zaa;\n    yb=(epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;\n    yb+=-epsA * zb / za / za;\n    yb+=epsB / za;\n  }\n  epsA=ya;\n  epsB=yb;\n  final double epsA2=epsA * epsA;\n  yb=0.07490822288864472;\n  yb=yb * epsA2 + -0.09088450866185192;\n  yb=yb * epsA2 + 0.11111095942313305;\n  yb=yb * epsA2 + -0.1428571423679182;\n  yb=yb * epsA2 + 0.19999999999923582;\n  yb=yb * epsA2 + -0.33333333333333287;\n  yb=yb * epsA2 * epsA;\n  ya=epsA;\n  temp=ya + yb;\n  yb=-(temp - ya - yb);\n  ya=temp;\n  yb+=epsB / (1d + epsA * epsA);\n  double za=EIGHTHS[idx] + ya;\n  double zb=-(za - EIGHTHS[idx] - ya);\n  temp=za + yb;\n  zb+=-(temp - za - yb);\n  za=temp;\n  double result=za + zb;\n  if (leftPlane) {\n    final double resultb=-(result - za - zb);\n    final double pia=1.5707963267948966 * 2;\n    final double pib=6.123233995736766E-17 * 2;\n    za=pia - result;\n    zb=-(za - pia + result);\n    zb+=pib - resultb;\n    result=za + zb;\n  }\n  if (negate ^ leftPlane) {\n    result=-result;\n  }\n  return result;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 632,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4674,
                        "startLineNumber": 2428,
                        "startColumnNumber": 4,
                        "endLineNumber": 2577,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Internal helper function to compute arctangent.\n * @param xa number from which arctangent is requested\n * @param xb extra bits for x (may be 0.0)\n * @param leftPlane if true, result angle must be put in the left half plane\n * @return atan(xa + xb) (or angle shifted by {@code PI} if leftPlane is true)\n */\nprivate static double atan(double xa,double xb,boolean leftPlane){\n  if (xa == 0.0) {\n    return leftPlane ? copySign(Math.PI,xa) : xa;\n  }\n  final boolean negate;\n  if (xa < 0) {\n    xa=-xa;\n    xb=-xb;\n    negate=true;\n  }\n else {\n    negate=false;\n  }\n  if (xa > 1.633123935319537E16) {\n    return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);\n  }\n  final int idx;\n  if (xa < 1) {\n    idx=(int)(((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);\n  }\n else {\n    final double oneOverXa=1 / xa;\n    idx=(int)(-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);\n  }\n  final double ttA=TANGENT_TABLE_A[idx];\n  final double ttB=TANGENT_TABLE_B[idx];\n  double epsA=xa - ttA;\n  double epsB=-(epsA - xa + ttA);\n  epsB+=xb - ttB;\n  double temp=epsA + epsB;\n  epsB=-(temp - epsA - epsB);\n  epsA=temp;\n  temp=xa * HEX_40000000;\n  double ya=xa + temp - temp;\n  double yb=xb + xa - ya;\n  xa=ya;\n  xb+=yb;\n  if (idx == 0) {\n    final double denom=1d / (1d + (xa + xb) * (ttA + ttB));\n    ya=epsA * denom;\n    yb=epsB * denom;\n  }\n else {\n    double temp2=xa * ttA;\n    double za=1d + temp2;\n    double zb=-(za - 1d - temp2);\n    temp2=xb * ttA + xa * ttB;\n    temp=za + temp2;\n    zb+=-(temp - za - temp2);\n    za=temp;\n    zb+=xb * ttB;\n    ya=epsA / za;\n    temp=ya * HEX_40000000;\n    final double yaa=(ya + temp) - temp;\n    final double yab=ya - yaa;\n    temp=za * HEX_40000000;\n    final double zaa=(za + temp) - temp;\n    final double zab=za - zaa;\n    yb=(epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;\n    yb+=-epsA * zb / za / za;\n    yb+=epsB / za;\n  }\n  epsA=ya;\n  epsB=yb;\n  final double epsA2=epsA * epsA;\n  yb=0.07490822288864472;\n  yb=yb * epsA2 + -0.09088450866185192;\n  yb=yb * epsA2 + 0.11111095942313305;\n  yb=yb * epsA2 + -0.1428571423679182;\n  yb=yb * epsA2 + 0.19999999999923582;\n  yb=yb * epsA2 + -0.33333333333333287;\n  yb=yb * epsA2 * epsA;\n  ya=epsA;\n  temp=ya + yb;\n  yb=-(temp - ya - yb);\n  ya=temp;\n  yb+=epsB / (1d + epsA * epsA);\n  double za=EIGHTHS[idx] + ya;\n  double zb=-(za - EIGHTHS[idx] - ya);\n  temp=za + yb;\n  zb+=-(temp - za - yb);\n  za=temp;\n  double result=za + zb;\n  if (leftPlane) {\n    final double resultb=-(result - za - zb);\n    final double pia=1.5707963267948966 * 2;\n    final double pib=6.123233995736766E-17 * 2;\n    za=pia - result;\n    zb=-(za - pia + result);\n    zb+=pib - resultb;\n    result=za + zb;\n  }\n  if (negate ^ leftPlane) {\n    result=-result;\n  }\n  return result;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 647,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 39,
                    "startLineNumber": 2532,
                    "startColumnNumber": 8,
                    "endLineNumber": 2532,
                    "endColumnNumber": 47
                },
                "nodeContext": "yb=yb * epsA2 + -0.09088450866185192;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 9,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "double"
        },
        {
            "nodeContext": "yb",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 2533,
                "startColumnNumber": 13,
                "endLineNumber": 2533,
                "endColumnNumber": 15
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 10,
                        "startLineNumber": 2533,
                        "startColumnNumber": 13,
                        "endLineNumber": 2533,
                        "endColumnNumber": 23
                    },
                    "nodeContext": "yb * epsA2",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 32,
                        "startLineNumber": 2533,
                        "startColumnNumber": 13,
                        "endLineNumber": 2533,
                        "endColumnNumber": 45
                    },
                    "nodeContext": "yb * epsA2 + 0.11111095942313305",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 37,
                        "startLineNumber": 2533,
                        "startColumnNumber": 8,
                        "endLineNumber": 2533,
                        "endColumnNumber": 45
                    },
                    "nodeContext": "yb=yb * epsA2 + 0.11111095942313305",
                    "nodeType": "Assignment",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 38,
                        "startLineNumber": 2533,
                        "startColumnNumber": 8,
                        "endLineNumber": 2533,
                        "endColumnNumber": 46
                    },
                    "nodeContext": "yb=yb * epsA2 + 0.11111095942313305;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4272,
                        "startLineNumber": 2434,
                        "startColumnNumber": 72,
                        "endLineNumber": 2577,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (xa == 0.0) {\n    return leftPlane ? copySign(Math.PI,xa) : xa;\n  }\n  final boolean negate;\n  if (xa < 0) {\n    xa=-xa;\n    xb=-xb;\n    negate=true;\n  }\n else {\n    negate=false;\n  }\n  if (xa > 1.633123935319537E16) {\n    return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);\n  }\n  final int idx;\n  if (xa < 1) {\n    idx=(int)(((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);\n  }\n else {\n    final double oneOverXa=1 / xa;\n    idx=(int)(-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);\n  }\n  final double ttA=TANGENT_TABLE_A[idx];\n  final double ttB=TANGENT_TABLE_B[idx];\n  double epsA=xa - ttA;\n  double epsB=-(epsA - xa + ttA);\n  epsB+=xb - ttB;\n  double temp=epsA + epsB;\n  epsB=-(temp - epsA - epsB);\n  epsA=temp;\n  temp=xa * HEX_40000000;\n  double ya=xa + temp - temp;\n  double yb=xb + xa - ya;\n  xa=ya;\n  xb+=yb;\n  if (idx == 0) {\n    final double denom=1d / (1d + (xa + xb) * (ttA + ttB));\n    ya=epsA * denom;\n    yb=epsB * denom;\n  }\n else {\n    double temp2=xa * ttA;\n    double za=1d + temp2;\n    double zb=-(za - 1d - temp2);\n    temp2=xb * ttA + xa * ttB;\n    temp=za + temp2;\n    zb+=-(temp - za - temp2);\n    za=temp;\n    zb+=xb * ttB;\n    ya=epsA / za;\n    temp=ya * HEX_40000000;\n    final double yaa=(ya + temp) - temp;\n    final double yab=ya - yaa;\n    temp=za * HEX_40000000;\n    final double zaa=(za + temp) - temp;\n    final double zab=za - zaa;\n    yb=(epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;\n    yb+=-epsA * zb / za / za;\n    yb+=epsB / za;\n  }\n  epsA=ya;\n  epsB=yb;\n  final double epsA2=epsA * epsA;\n  yb=0.07490822288864472;\n  yb=yb * epsA2 + -0.09088450866185192;\n  yb=yb * epsA2 + 0.11111095942313305;\n  yb=yb * epsA2 + -0.1428571423679182;\n  yb=yb * epsA2 + 0.19999999999923582;\n  yb=yb * epsA2 + -0.33333333333333287;\n  yb=yb * epsA2 * epsA;\n  ya=epsA;\n  temp=ya + yb;\n  yb=-(temp - ya - yb);\n  ya=temp;\n  yb+=epsB / (1d + epsA * epsA);\n  double za=EIGHTHS[idx] + ya;\n  double zb=-(za - EIGHTHS[idx] - ya);\n  temp=za + yb;\n  zb+=-(temp - za - yb);\n  za=temp;\n  double result=za + zb;\n  if (leftPlane) {\n    final double resultb=-(result - za - zb);\n    final double pia=1.5707963267948966 * 2;\n    final double pib=6.123233995736766E-17 * 2;\n    za=pia - result;\n    zb=-(za - pia + result);\n    zb+=pib - resultb;\n    result=za + zb;\n  }\n  if (negate ^ leftPlane) {\n    result=-result;\n  }\n  return result;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 632,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4674,
                        "startLineNumber": 2428,
                        "startColumnNumber": 4,
                        "endLineNumber": 2577,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Internal helper function to compute arctangent.\n * @param xa number from which arctangent is requested\n * @param xb extra bits for x (may be 0.0)\n * @param leftPlane if true, result angle must be put in the left half plane\n * @return atan(xa + xb) (or angle shifted by {@code PI} if leftPlane is true)\n */\nprivate static double atan(double xa,double xb,boolean leftPlane){\n  if (xa == 0.0) {\n    return leftPlane ? copySign(Math.PI,xa) : xa;\n  }\n  final boolean negate;\n  if (xa < 0) {\n    xa=-xa;\n    xb=-xb;\n    negate=true;\n  }\n else {\n    negate=false;\n  }\n  if (xa > 1.633123935319537E16) {\n    return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);\n  }\n  final int idx;\n  if (xa < 1) {\n    idx=(int)(((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);\n  }\n else {\n    final double oneOverXa=1 / xa;\n    idx=(int)(-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);\n  }\n  final double ttA=TANGENT_TABLE_A[idx];\n  final double ttB=TANGENT_TABLE_B[idx];\n  double epsA=xa - ttA;\n  double epsB=-(epsA - xa + ttA);\n  epsB+=xb - ttB;\n  double temp=epsA + epsB;\n  epsB=-(temp - epsA - epsB);\n  epsA=temp;\n  temp=xa * HEX_40000000;\n  double ya=xa + temp - temp;\n  double yb=xb + xa - ya;\n  xa=ya;\n  xb+=yb;\n  if (idx == 0) {\n    final double denom=1d / (1d + (xa + xb) * (ttA + ttB));\n    ya=epsA * denom;\n    yb=epsB * denom;\n  }\n else {\n    double temp2=xa * ttA;\n    double za=1d + temp2;\n    double zb=-(za - 1d - temp2);\n    temp2=xb * ttA + xa * ttB;\n    temp=za + temp2;\n    zb+=-(temp - za - temp2);\n    za=temp;\n    zb+=xb * ttB;\n    ya=epsA / za;\n    temp=ya * HEX_40000000;\n    final double yaa=(ya + temp) - temp;\n    final double yab=ya - yaa;\n    temp=za * HEX_40000000;\n    final double zaa=(za + temp) - temp;\n    final double zab=za - zaa;\n    yb=(epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;\n    yb+=-epsA * zb / za / za;\n    yb+=epsB / za;\n  }\n  epsA=ya;\n  epsB=yb;\n  final double epsA2=epsA * epsA;\n  yb=0.07490822288864472;\n  yb=yb * epsA2 + -0.09088450866185192;\n  yb=yb * epsA2 + 0.11111095942313305;\n  yb=yb * epsA2 + -0.1428571423679182;\n  yb=yb * epsA2 + 0.19999999999923582;\n  yb=yb * epsA2 + -0.33333333333333287;\n  yb=yb * epsA2 * epsA;\n  ya=epsA;\n  temp=ya + yb;\n  yb=-(temp - ya - yb);\n  ya=temp;\n  yb+=epsB / (1d + epsA * epsA);\n  double za=EIGHTHS[idx] + ya;\n  double zb=-(za - EIGHTHS[idx] - ya);\n  temp=za + yb;\n  zb+=-(temp - za - yb);\n  za=temp;\n  double result=za + zb;\n  if (leftPlane) {\n    final double resultb=-(result - za - zb);\n    final double pia=1.5707963267948966 * 2;\n    final double pib=6.123233995736766E-17 * 2;\n    za=pia - result;\n    zb=-(za - pia + result);\n    zb+=pib - resultb;\n    result=za + zb;\n  }\n  if (negate ^ leftPlane) {\n    result=-result;\n  }\n  return result;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 647,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 38,
                    "startLineNumber": 2533,
                    "startColumnNumber": 8,
                    "endLineNumber": 2533,
                    "endColumnNumber": 46
                },
                "nodeContext": "yb=yb * epsA2 + 0.11111095942313305;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "double"
        },
        {
            "nodeContext": "yb",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 2534,
                "startColumnNumber": 13,
                "endLineNumber": 2534,
                "endColumnNumber": 15
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 10,
                        "startLineNumber": 2534,
                        "startColumnNumber": 13,
                        "endLineNumber": 2534,
                        "endColumnNumber": 23
                    },
                    "nodeContext": "yb * epsA2",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 32,
                        "startLineNumber": 2534,
                        "startColumnNumber": 13,
                        "endLineNumber": 2534,
                        "endColumnNumber": 45
                    },
                    "nodeContext": "yb * epsA2 + -0.1428571423679182",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 37,
                        "startLineNumber": 2534,
                        "startColumnNumber": 8,
                        "endLineNumber": 2534,
                        "endColumnNumber": 45
                    },
                    "nodeContext": "yb=yb * epsA2 + -0.1428571423679182",
                    "nodeType": "Assignment",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 38,
                        "startLineNumber": 2534,
                        "startColumnNumber": 8,
                        "endLineNumber": 2534,
                        "endColumnNumber": 46
                    },
                    "nodeContext": "yb=yb * epsA2 + -0.1428571423679182;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 9,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4272,
                        "startLineNumber": 2434,
                        "startColumnNumber": 72,
                        "endLineNumber": 2577,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (xa == 0.0) {\n    return leftPlane ? copySign(Math.PI,xa) : xa;\n  }\n  final boolean negate;\n  if (xa < 0) {\n    xa=-xa;\n    xb=-xb;\n    negate=true;\n  }\n else {\n    negate=false;\n  }\n  if (xa > 1.633123935319537E16) {\n    return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);\n  }\n  final int idx;\n  if (xa < 1) {\n    idx=(int)(((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);\n  }\n else {\n    final double oneOverXa=1 / xa;\n    idx=(int)(-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);\n  }\n  final double ttA=TANGENT_TABLE_A[idx];\n  final double ttB=TANGENT_TABLE_B[idx];\n  double epsA=xa - ttA;\n  double epsB=-(epsA - xa + ttA);\n  epsB+=xb - ttB;\n  double temp=epsA + epsB;\n  epsB=-(temp - epsA - epsB);\n  epsA=temp;\n  temp=xa * HEX_40000000;\n  double ya=xa + temp - temp;\n  double yb=xb + xa - ya;\n  xa=ya;\n  xb+=yb;\n  if (idx == 0) {\n    final double denom=1d / (1d + (xa + xb) * (ttA + ttB));\n    ya=epsA * denom;\n    yb=epsB * denom;\n  }\n else {\n    double temp2=xa * ttA;\n    double za=1d + temp2;\n    double zb=-(za - 1d - temp2);\n    temp2=xb * ttA + xa * ttB;\n    temp=za + temp2;\n    zb+=-(temp - za - temp2);\n    za=temp;\n    zb+=xb * ttB;\n    ya=epsA / za;\n    temp=ya * HEX_40000000;\n    final double yaa=(ya + temp) - temp;\n    final double yab=ya - yaa;\n    temp=za * HEX_40000000;\n    final double zaa=(za + temp) - temp;\n    final double zab=za - zaa;\n    yb=(epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;\n    yb+=-epsA * zb / za / za;\n    yb+=epsB / za;\n  }\n  epsA=ya;\n  epsB=yb;\n  final double epsA2=epsA * epsA;\n  yb=0.07490822288864472;\n  yb=yb * epsA2 + -0.09088450866185192;\n  yb=yb * epsA2 + 0.11111095942313305;\n  yb=yb * epsA2 + -0.1428571423679182;\n  yb=yb * epsA2 + 0.19999999999923582;\n  yb=yb * epsA2 + -0.33333333333333287;\n  yb=yb * epsA2 * epsA;\n  ya=epsA;\n  temp=ya + yb;\n  yb=-(temp - ya - yb);\n  ya=temp;\n  yb+=epsB / (1d + epsA * epsA);\n  double za=EIGHTHS[idx] + ya;\n  double zb=-(za - EIGHTHS[idx] - ya);\n  temp=za + yb;\n  zb+=-(temp - za - yb);\n  za=temp;\n  double result=za + zb;\n  if (leftPlane) {\n    final double resultb=-(result - za - zb);\n    final double pia=1.5707963267948966 * 2;\n    final double pib=6.123233995736766E-17 * 2;\n    za=pia - result;\n    zb=-(za - pia + result);\n    zb+=pib - resultb;\n    result=za + zb;\n  }\n  if (negate ^ leftPlane) {\n    result=-result;\n  }\n  return result;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 632,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4674,
                        "startLineNumber": 2428,
                        "startColumnNumber": 4,
                        "endLineNumber": 2577,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Internal helper function to compute arctangent.\n * @param xa number from which arctangent is requested\n * @param xb extra bits for x (may be 0.0)\n * @param leftPlane if true, result angle must be put in the left half plane\n * @return atan(xa + xb) (or angle shifted by {@code PI} if leftPlane is true)\n */\nprivate static double atan(double xa,double xb,boolean leftPlane){\n  if (xa == 0.0) {\n    return leftPlane ? copySign(Math.PI,xa) : xa;\n  }\n  final boolean negate;\n  if (xa < 0) {\n    xa=-xa;\n    xb=-xb;\n    negate=true;\n  }\n else {\n    negate=false;\n  }\n  if (xa > 1.633123935319537E16) {\n    return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);\n  }\n  final int idx;\n  if (xa < 1) {\n    idx=(int)(((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);\n  }\n else {\n    final double oneOverXa=1 / xa;\n    idx=(int)(-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);\n  }\n  final double ttA=TANGENT_TABLE_A[idx];\n  final double ttB=TANGENT_TABLE_B[idx];\n  double epsA=xa - ttA;\n  double epsB=-(epsA - xa + ttA);\n  epsB+=xb - ttB;\n  double temp=epsA + epsB;\n  epsB=-(temp - epsA - epsB);\n  epsA=temp;\n  temp=xa * HEX_40000000;\n  double ya=xa + temp - temp;\n  double yb=xb + xa - ya;\n  xa=ya;\n  xb+=yb;\n  if (idx == 0) {\n    final double denom=1d / (1d + (xa + xb) * (ttA + ttB));\n    ya=epsA * denom;\n    yb=epsB * denom;\n  }\n else {\n    double temp2=xa * ttA;\n    double za=1d + temp2;\n    double zb=-(za - 1d - temp2);\n    temp2=xb * ttA + xa * ttB;\n    temp=za + temp2;\n    zb+=-(temp - za - temp2);\n    za=temp;\n    zb+=xb * ttB;\n    ya=epsA / za;\n    temp=ya * HEX_40000000;\n    final double yaa=(ya + temp) - temp;\n    final double yab=ya - yaa;\n    temp=za * HEX_40000000;\n    final double zaa=(za + temp) - temp;\n    final double zab=za - zaa;\n    yb=(epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;\n    yb+=-epsA * zb / za / za;\n    yb+=epsB / za;\n  }\n  epsA=ya;\n  epsB=yb;\n  final double epsA2=epsA * epsA;\n  yb=0.07490822288864472;\n  yb=yb * epsA2 + -0.09088450866185192;\n  yb=yb * epsA2 + 0.11111095942313305;\n  yb=yb * epsA2 + -0.1428571423679182;\n  yb=yb * epsA2 + 0.19999999999923582;\n  yb=yb * epsA2 + -0.33333333333333287;\n  yb=yb * epsA2 * epsA;\n  ya=epsA;\n  temp=ya + yb;\n  yb=-(temp - ya - yb);\n  ya=temp;\n  yb+=epsB / (1d + epsA * epsA);\n  double za=EIGHTHS[idx] + ya;\n  double zb=-(za - EIGHTHS[idx] - ya);\n  temp=za + yb;\n  zb+=-(temp - za - yb);\n  za=temp;\n  double result=za + zb;\n  if (leftPlane) {\n    final double resultb=-(result - za - zb);\n    final double pia=1.5707963267948966 * 2;\n    final double pib=6.123233995736766E-17 * 2;\n    za=pia - result;\n    zb=-(za - pia + result);\n    zb+=pib - resultb;\n    result=za + zb;\n  }\n  if (negate ^ leftPlane) {\n    result=-result;\n  }\n  return result;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 647,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 38,
                    "startLineNumber": 2534,
                    "startColumnNumber": 8,
                    "endLineNumber": 2534,
                    "endColumnNumber": 46
                },
                "nodeContext": "yb=yb * epsA2 + -0.1428571423679182;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 9,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "double"
        },
        {
            "nodeContext": "yb",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 2535,
                "startColumnNumber": 13,
                "endLineNumber": 2535,
                "endColumnNumber": 15
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 10,
                        "startLineNumber": 2535,
                        "startColumnNumber": 13,
                        "endLineNumber": 2535,
                        "endColumnNumber": 23
                    },
                    "nodeContext": "yb * epsA2",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 32,
                        "startLineNumber": 2535,
                        "startColumnNumber": 13,
                        "endLineNumber": 2535,
                        "endColumnNumber": 45
                    },
                    "nodeContext": "yb * epsA2 + 0.19999999999923582",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 37,
                        "startLineNumber": 2535,
                        "startColumnNumber": 8,
                        "endLineNumber": 2535,
                        "endColumnNumber": 45
                    },
                    "nodeContext": "yb=yb * epsA2 + 0.19999999999923582",
                    "nodeType": "Assignment",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 38,
                        "startLineNumber": 2535,
                        "startColumnNumber": 8,
                        "endLineNumber": 2535,
                        "endColumnNumber": 46
                    },
                    "nodeContext": "yb=yb * epsA2 + 0.19999999999923582;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4272,
                        "startLineNumber": 2434,
                        "startColumnNumber": 72,
                        "endLineNumber": 2577,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (xa == 0.0) {\n    return leftPlane ? copySign(Math.PI,xa) : xa;\n  }\n  final boolean negate;\n  if (xa < 0) {\n    xa=-xa;\n    xb=-xb;\n    negate=true;\n  }\n else {\n    negate=false;\n  }\n  if (xa > 1.633123935319537E16) {\n    return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);\n  }\n  final int idx;\n  if (xa < 1) {\n    idx=(int)(((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);\n  }\n else {\n    final double oneOverXa=1 / xa;\n    idx=(int)(-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);\n  }\n  final double ttA=TANGENT_TABLE_A[idx];\n  final double ttB=TANGENT_TABLE_B[idx];\n  double epsA=xa - ttA;\n  double epsB=-(epsA - xa + ttA);\n  epsB+=xb - ttB;\n  double temp=epsA + epsB;\n  epsB=-(temp - epsA - epsB);\n  epsA=temp;\n  temp=xa * HEX_40000000;\n  double ya=xa + temp - temp;\n  double yb=xb + xa - ya;\n  xa=ya;\n  xb+=yb;\n  if (idx == 0) {\n    final double denom=1d / (1d + (xa + xb) * (ttA + ttB));\n    ya=epsA * denom;\n    yb=epsB * denom;\n  }\n else {\n    double temp2=xa * ttA;\n    double za=1d + temp2;\n    double zb=-(za - 1d - temp2);\n    temp2=xb * ttA + xa * ttB;\n    temp=za + temp2;\n    zb+=-(temp - za - temp2);\n    za=temp;\n    zb+=xb * ttB;\n    ya=epsA / za;\n    temp=ya * HEX_40000000;\n    final double yaa=(ya + temp) - temp;\n    final double yab=ya - yaa;\n    temp=za * HEX_40000000;\n    final double zaa=(za + temp) - temp;\n    final double zab=za - zaa;\n    yb=(epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;\n    yb+=-epsA * zb / za / za;\n    yb+=epsB / za;\n  }\n  epsA=ya;\n  epsB=yb;\n  final double epsA2=epsA * epsA;\n  yb=0.07490822288864472;\n  yb=yb * epsA2 + -0.09088450866185192;\n  yb=yb * epsA2 + 0.11111095942313305;\n  yb=yb * epsA2 + -0.1428571423679182;\n  yb=yb * epsA2 + 0.19999999999923582;\n  yb=yb * epsA2 + -0.33333333333333287;\n  yb=yb * epsA2 * epsA;\n  ya=epsA;\n  temp=ya + yb;\n  yb=-(temp - ya - yb);\n  ya=temp;\n  yb+=epsB / (1d + epsA * epsA);\n  double za=EIGHTHS[idx] + ya;\n  double zb=-(za - EIGHTHS[idx] - ya);\n  temp=za + yb;\n  zb+=-(temp - za - yb);\n  za=temp;\n  double result=za + zb;\n  if (leftPlane) {\n    final double resultb=-(result - za - zb);\n    final double pia=1.5707963267948966 * 2;\n    final double pib=6.123233995736766E-17 * 2;\n    za=pia - result;\n    zb=-(za - pia + result);\n    zb+=pib - resultb;\n    result=za + zb;\n  }\n  if (negate ^ leftPlane) {\n    result=-result;\n  }\n  return result;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 632,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4674,
                        "startLineNumber": 2428,
                        "startColumnNumber": 4,
                        "endLineNumber": 2577,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Internal helper function to compute arctangent.\n * @param xa number from which arctangent is requested\n * @param xb extra bits for x (may be 0.0)\n * @param leftPlane if true, result angle must be put in the left half plane\n * @return atan(xa + xb) (or angle shifted by {@code PI} if leftPlane is true)\n */\nprivate static double atan(double xa,double xb,boolean leftPlane){\n  if (xa == 0.0) {\n    return leftPlane ? copySign(Math.PI,xa) : xa;\n  }\n  final boolean negate;\n  if (xa < 0) {\n    xa=-xa;\n    xb=-xb;\n    negate=true;\n  }\n else {\n    negate=false;\n  }\n  if (xa > 1.633123935319537E16) {\n    return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);\n  }\n  final int idx;\n  if (xa < 1) {\n    idx=(int)(((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);\n  }\n else {\n    final double oneOverXa=1 / xa;\n    idx=(int)(-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);\n  }\n  final double ttA=TANGENT_TABLE_A[idx];\n  final double ttB=TANGENT_TABLE_B[idx];\n  double epsA=xa - ttA;\n  double epsB=-(epsA - xa + ttA);\n  epsB+=xb - ttB;\n  double temp=epsA + epsB;\n  epsB=-(temp - epsA - epsB);\n  epsA=temp;\n  temp=xa * HEX_40000000;\n  double ya=xa + temp - temp;\n  double yb=xb + xa - ya;\n  xa=ya;\n  xb+=yb;\n  if (idx == 0) {\n    final double denom=1d / (1d + (xa + xb) * (ttA + ttB));\n    ya=epsA * denom;\n    yb=epsB * denom;\n  }\n else {\n    double temp2=xa * ttA;\n    double za=1d + temp2;\n    double zb=-(za - 1d - temp2);\n    temp2=xb * ttA + xa * ttB;\n    temp=za + temp2;\n    zb+=-(temp - za - temp2);\n    za=temp;\n    zb+=xb * ttB;\n    ya=epsA / za;\n    temp=ya * HEX_40000000;\n    final double yaa=(ya + temp) - temp;\n    final double yab=ya - yaa;\n    temp=za * HEX_40000000;\n    final double zaa=(za + temp) - temp;\n    final double zab=za - zaa;\n    yb=(epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;\n    yb+=-epsA * zb / za / za;\n    yb+=epsB / za;\n  }\n  epsA=ya;\n  epsB=yb;\n  final double epsA2=epsA * epsA;\n  yb=0.07490822288864472;\n  yb=yb * epsA2 + -0.09088450866185192;\n  yb=yb * epsA2 + 0.11111095942313305;\n  yb=yb * epsA2 + -0.1428571423679182;\n  yb=yb * epsA2 + 0.19999999999923582;\n  yb=yb * epsA2 + -0.33333333333333287;\n  yb=yb * epsA2 * epsA;\n  ya=epsA;\n  temp=ya + yb;\n  yb=-(temp - ya - yb);\n  ya=temp;\n  yb+=epsB / (1d + epsA * epsA);\n  double za=EIGHTHS[idx] + ya;\n  double zb=-(za - EIGHTHS[idx] - ya);\n  temp=za + yb;\n  zb+=-(temp - za - yb);\n  za=temp;\n  double result=za + zb;\n  if (leftPlane) {\n    final double resultb=-(result - za - zb);\n    final double pia=1.5707963267948966 * 2;\n    final double pib=6.123233995736766E-17 * 2;\n    za=pia - result;\n    zb=-(za - pia + result);\n    zb+=pib - resultb;\n    result=za + zb;\n  }\n  if (negate ^ leftPlane) {\n    result=-result;\n  }\n  return result;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 647,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 38,
                    "startLineNumber": 2535,
                    "startColumnNumber": 8,
                    "endLineNumber": 2535,
                    "endColumnNumber": 46
                },
                "nodeContext": "yb=yb * epsA2 + 0.19999999999923582;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "double"
        },
        {
            "nodeContext": "yb",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 2536,
                "startColumnNumber": 13,
                "endLineNumber": 2536,
                "endColumnNumber": 15
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 10,
                        "startLineNumber": 2536,
                        "startColumnNumber": 13,
                        "endLineNumber": 2536,
                        "endColumnNumber": 23
                    },
                    "nodeContext": "yb * epsA2",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 33,
                        "startLineNumber": 2536,
                        "startColumnNumber": 13,
                        "endLineNumber": 2536,
                        "endColumnNumber": 46
                    },
                    "nodeContext": "yb * epsA2 + -0.33333333333333287",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 38,
                        "startLineNumber": 2536,
                        "startColumnNumber": 8,
                        "endLineNumber": 2536,
                        "endColumnNumber": 46
                    },
                    "nodeContext": "yb=yb * epsA2 + -0.33333333333333287",
                    "nodeType": "Assignment",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 39,
                        "startLineNumber": 2536,
                        "startColumnNumber": 8,
                        "endLineNumber": 2536,
                        "endColumnNumber": 47
                    },
                    "nodeContext": "yb=yb * epsA2 + -0.33333333333333287;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 9,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4272,
                        "startLineNumber": 2434,
                        "startColumnNumber": 72,
                        "endLineNumber": 2577,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (xa == 0.0) {\n    return leftPlane ? copySign(Math.PI,xa) : xa;\n  }\n  final boolean negate;\n  if (xa < 0) {\n    xa=-xa;\n    xb=-xb;\n    negate=true;\n  }\n else {\n    negate=false;\n  }\n  if (xa > 1.633123935319537E16) {\n    return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);\n  }\n  final int idx;\n  if (xa < 1) {\n    idx=(int)(((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);\n  }\n else {\n    final double oneOverXa=1 / xa;\n    idx=(int)(-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);\n  }\n  final double ttA=TANGENT_TABLE_A[idx];\n  final double ttB=TANGENT_TABLE_B[idx];\n  double epsA=xa - ttA;\n  double epsB=-(epsA - xa + ttA);\n  epsB+=xb - ttB;\n  double temp=epsA + epsB;\n  epsB=-(temp - epsA - epsB);\n  epsA=temp;\n  temp=xa * HEX_40000000;\n  double ya=xa + temp - temp;\n  double yb=xb + xa - ya;\n  xa=ya;\n  xb+=yb;\n  if (idx == 0) {\n    final double denom=1d / (1d + (xa + xb) * (ttA + ttB));\n    ya=epsA * denom;\n    yb=epsB * denom;\n  }\n else {\n    double temp2=xa * ttA;\n    double za=1d + temp2;\n    double zb=-(za - 1d - temp2);\n    temp2=xb * ttA + xa * ttB;\n    temp=za + temp2;\n    zb+=-(temp - za - temp2);\n    za=temp;\n    zb+=xb * ttB;\n    ya=epsA / za;\n    temp=ya * HEX_40000000;\n    final double yaa=(ya + temp) - temp;\n    final double yab=ya - yaa;\n    temp=za * HEX_40000000;\n    final double zaa=(za + temp) - temp;\n    final double zab=za - zaa;\n    yb=(epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;\n    yb+=-epsA * zb / za / za;\n    yb+=epsB / za;\n  }\n  epsA=ya;\n  epsB=yb;\n  final double epsA2=epsA * epsA;\n  yb=0.07490822288864472;\n  yb=yb * epsA2 + -0.09088450866185192;\n  yb=yb * epsA2 + 0.11111095942313305;\n  yb=yb * epsA2 + -0.1428571423679182;\n  yb=yb * epsA2 + 0.19999999999923582;\n  yb=yb * epsA2 + -0.33333333333333287;\n  yb=yb * epsA2 * epsA;\n  ya=epsA;\n  temp=ya + yb;\n  yb=-(temp - ya - yb);\n  ya=temp;\n  yb+=epsB / (1d + epsA * epsA);\n  double za=EIGHTHS[idx] + ya;\n  double zb=-(za - EIGHTHS[idx] - ya);\n  temp=za + yb;\n  zb+=-(temp - za - yb);\n  za=temp;\n  double result=za + zb;\n  if (leftPlane) {\n    final double resultb=-(result - za - zb);\n    final double pia=1.5707963267948966 * 2;\n    final double pib=6.123233995736766E-17 * 2;\n    za=pia - result;\n    zb=-(za - pia + result);\n    zb+=pib - resultb;\n    result=za + zb;\n  }\n  if (negate ^ leftPlane) {\n    result=-result;\n  }\n  return result;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 632,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4674,
                        "startLineNumber": 2428,
                        "startColumnNumber": 4,
                        "endLineNumber": 2577,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Internal helper function to compute arctangent.\n * @param xa number from which arctangent is requested\n * @param xb extra bits for x (may be 0.0)\n * @param leftPlane if true, result angle must be put in the left half plane\n * @return atan(xa + xb) (or angle shifted by {@code PI} if leftPlane is true)\n */\nprivate static double atan(double xa,double xb,boolean leftPlane){\n  if (xa == 0.0) {\n    return leftPlane ? copySign(Math.PI,xa) : xa;\n  }\n  final boolean negate;\n  if (xa < 0) {\n    xa=-xa;\n    xb=-xb;\n    negate=true;\n  }\n else {\n    negate=false;\n  }\n  if (xa > 1.633123935319537E16) {\n    return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);\n  }\n  final int idx;\n  if (xa < 1) {\n    idx=(int)(((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);\n  }\n else {\n    final double oneOverXa=1 / xa;\n    idx=(int)(-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);\n  }\n  final double ttA=TANGENT_TABLE_A[idx];\n  final double ttB=TANGENT_TABLE_B[idx];\n  double epsA=xa - ttA;\n  double epsB=-(epsA - xa + ttA);\n  epsB+=xb - ttB;\n  double temp=epsA + epsB;\n  epsB=-(temp - epsA - epsB);\n  epsA=temp;\n  temp=xa * HEX_40000000;\n  double ya=xa + temp - temp;\n  double yb=xb + xa - ya;\n  xa=ya;\n  xb+=yb;\n  if (idx == 0) {\n    final double denom=1d / (1d + (xa + xb) * (ttA + ttB));\n    ya=epsA * denom;\n    yb=epsB * denom;\n  }\n else {\n    double temp2=xa * ttA;\n    double za=1d + temp2;\n    double zb=-(za - 1d - temp2);\n    temp2=xb * ttA + xa * ttB;\n    temp=za + temp2;\n    zb+=-(temp - za - temp2);\n    za=temp;\n    zb+=xb * ttB;\n    ya=epsA / za;\n    temp=ya * HEX_40000000;\n    final double yaa=(ya + temp) - temp;\n    final double yab=ya - yaa;\n    temp=za * HEX_40000000;\n    final double zaa=(za + temp) - temp;\n    final double zab=za - zaa;\n    yb=(epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;\n    yb+=-epsA * zb / za / za;\n    yb+=epsB / za;\n  }\n  epsA=ya;\n  epsB=yb;\n  final double epsA2=epsA * epsA;\n  yb=0.07490822288864472;\n  yb=yb * epsA2 + -0.09088450866185192;\n  yb=yb * epsA2 + 0.11111095942313305;\n  yb=yb * epsA2 + -0.1428571423679182;\n  yb=yb * epsA2 + 0.19999999999923582;\n  yb=yb * epsA2 + -0.33333333333333287;\n  yb=yb * epsA2 * epsA;\n  ya=epsA;\n  temp=ya + yb;\n  yb=-(temp - ya - yb);\n  ya=temp;\n  yb+=epsB / (1d + epsA * epsA);\n  double za=EIGHTHS[idx] + ya;\n  double zb=-(za - EIGHTHS[idx] - ya);\n  temp=za + yb;\n  zb+=-(temp - za - yb);\n  za=temp;\n  double result=za + zb;\n  if (leftPlane) {\n    final double resultb=-(result - za - zb);\n    final double pia=1.5707963267948966 * 2;\n    final double pib=6.123233995736766E-17 * 2;\n    za=pia - result;\n    zb=-(za - pia + result);\n    zb+=pib - resultb;\n    result=za + zb;\n  }\n  if (negate ^ leftPlane) {\n    result=-result;\n  }\n  return result;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 647,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 39,
                    "startLineNumber": 2536,
                    "startColumnNumber": 8,
                    "endLineNumber": 2536,
                    "endColumnNumber": 47
                },
                "nodeContext": "yb=yb * epsA2 + -0.33333333333333287;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 9,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "double"
        },
        {
            "nodeContext": "yb",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 2537,
                "startColumnNumber": 13,
                "endLineNumber": 2537,
                "endColumnNumber": 15
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 17,
                        "startLineNumber": 2537,
                        "startColumnNumber": 13,
                        "endLineNumber": 2537,
                        "endColumnNumber": 30
                    },
                    "nodeContext": "yb * epsA2 * epsA",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 22,
                        "startLineNumber": 2537,
                        "startColumnNumber": 8,
                        "endLineNumber": 2537,
                        "endColumnNumber": 30
                    },
                    "nodeContext": "yb=yb * epsA2 * epsA",
                    "nodeType": "Assignment",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 23,
                        "startLineNumber": 2537,
                        "startColumnNumber": 8,
                        "endLineNumber": 2537,
                        "endColumnNumber": 31
                    },
                    "nodeContext": "yb=yb * epsA2 * epsA;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4272,
                        "startLineNumber": 2434,
                        "startColumnNumber": 72,
                        "endLineNumber": 2577,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (xa == 0.0) {\n    return leftPlane ? copySign(Math.PI,xa) : xa;\n  }\n  final boolean negate;\n  if (xa < 0) {\n    xa=-xa;\n    xb=-xb;\n    negate=true;\n  }\n else {\n    negate=false;\n  }\n  if (xa > 1.633123935319537E16) {\n    return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);\n  }\n  final int idx;\n  if (xa < 1) {\n    idx=(int)(((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);\n  }\n else {\n    final double oneOverXa=1 / xa;\n    idx=(int)(-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);\n  }\n  final double ttA=TANGENT_TABLE_A[idx];\n  final double ttB=TANGENT_TABLE_B[idx];\n  double epsA=xa - ttA;\n  double epsB=-(epsA - xa + ttA);\n  epsB+=xb - ttB;\n  double temp=epsA + epsB;\n  epsB=-(temp - epsA - epsB);\n  epsA=temp;\n  temp=xa * HEX_40000000;\n  double ya=xa + temp - temp;\n  double yb=xb + xa - ya;\n  xa=ya;\n  xb+=yb;\n  if (idx == 0) {\n    final double denom=1d / (1d + (xa + xb) * (ttA + ttB));\n    ya=epsA * denom;\n    yb=epsB * denom;\n  }\n else {\n    double temp2=xa * ttA;\n    double za=1d + temp2;\n    double zb=-(za - 1d - temp2);\n    temp2=xb * ttA + xa * ttB;\n    temp=za + temp2;\n    zb+=-(temp - za - temp2);\n    za=temp;\n    zb+=xb * ttB;\n    ya=epsA / za;\n    temp=ya * HEX_40000000;\n    final double yaa=(ya + temp) - temp;\n    final double yab=ya - yaa;\n    temp=za * HEX_40000000;\n    final double zaa=(za + temp) - temp;\n    final double zab=za - zaa;\n    yb=(epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;\n    yb+=-epsA * zb / za / za;\n    yb+=epsB / za;\n  }\n  epsA=ya;\n  epsB=yb;\n  final double epsA2=epsA * epsA;\n  yb=0.07490822288864472;\n  yb=yb * epsA2 + -0.09088450866185192;\n  yb=yb * epsA2 + 0.11111095942313305;\n  yb=yb * epsA2 + -0.1428571423679182;\n  yb=yb * epsA2 + 0.19999999999923582;\n  yb=yb * epsA2 + -0.33333333333333287;\n  yb=yb * epsA2 * epsA;\n  ya=epsA;\n  temp=ya + yb;\n  yb=-(temp - ya - yb);\n  ya=temp;\n  yb+=epsB / (1d + epsA * epsA);\n  double za=EIGHTHS[idx] + ya;\n  double zb=-(za - EIGHTHS[idx] - ya);\n  temp=za + yb;\n  zb+=-(temp - za - yb);\n  za=temp;\n  double result=za + zb;\n  if (leftPlane) {\n    final double resultb=-(result - za - zb);\n    final double pia=1.5707963267948966 * 2;\n    final double pib=6.123233995736766E-17 * 2;\n    za=pia - result;\n    zb=-(za - pia + result);\n    zb+=pib - resultb;\n    result=za + zb;\n  }\n  if (negate ^ leftPlane) {\n    result=-result;\n  }\n  return result;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 632,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4674,
                        "startLineNumber": 2428,
                        "startColumnNumber": 4,
                        "endLineNumber": 2577,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Internal helper function to compute arctangent.\n * @param xa number from which arctangent is requested\n * @param xb extra bits for x (may be 0.0)\n * @param leftPlane if true, result angle must be put in the left half plane\n * @return atan(xa + xb) (or angle shifted by {@code PI} if leftPlane is true)\n */\nprivate static double atan(double xa,double xb,boolean leftPlane){\n  if (xa == 0.0) {\n    return leftPlane ? copySign(Math.PI,xa) : xa;\n  }\n  final boolean negate;\n  if (xa < 0) {\n    xa=-xa;\n    xb=-xb;\n    negate=true;\n  }\n else {\n    negate=false;\n  }\n  if (xa > 1.633123935319537E16) {\n    return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);\n  }\n  final int idx;\n  if (xa < 1) {\n    idx=(int)(((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);\n  }\n else {\n    final double oneOverXa=1 / xa;\n    idx=(int)(-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);\n  }\n  final double ttA=TANGENT_TABLE_A[idx];\n  final double ttB=TANGENT_TABLE_B[idx];\n  double epsA=xa - ttA;\n  double epsB=-(epsA - xa + ttA);\n  epsB+=xb - ttB;\n  double temp=epsA + epsB;\n  epsB=-(temp - epsA - epsB);\n  epsA=temp;\n  temp=xa * HEX_40000000;\n  double ya=xa + temp - temp;\n  double yb=xb + xa - ya;\n  xa=ya;\n  xb+=yb;\n  if (idx == 0) {\n    final double denom=1d / (1d + (xa + xb) * (ttA + ttB));\n    ya=epsA * denom;\n    yb=epsB * denom;\n  }\n else {\n    double temp2=xa * ttA;\n    double za=1d + temp2;\n    double zb=-(za - 1d - temp2);\n    temp2=xb * ttA + xa * ttB;\n    temp=za + temp2;\n    zb+=-(temp - za - temp2);\n    za=temp;\n    zb+=xb * ttB;\n    ya=epsA / za;\n    temp=ya * HEX_40000000;\n    final double yaa=(ya + temp) - temp;\n    final double yab=ya - yaa;\n    temp=za * HEX_40000000;\n    final double zaa=(za + temp) - temp;\n    final double zab=za - zaa;\n    yb=(epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;\n    yb+=-epsA * zb / za / za;\n    yb+=epsB / za;\n  }\n  epsA=ya;\n  epsB=yb;\n  final double epsA2=epsA * epsA;\n  yb=0.07490822288864472;\n  yb=yb * epsA2 + -0.09088450866185192;\n  yb=yb * epsA2 + 0.11111095942313305;\n  yb=yb * epsA2 + -0.1428571423679182;\n  yb=yb * epsA2 + 0.19999999999923582;\n  yb=yb * epsA2 + -0.33333333333333287;\n  yb=yb * epsA2 * epsA;\n  ya=epsA;\n  temp=ya + yb;\n  yb=-(temp - ya - yb);\n  ya=temp;\n  yb+=epsB / (1d + epsA * epsA);\n  double za=EIGHTHS[idx] + ya;\n  double zb=-(za - EIGHTHS[idx] - ya);\n  temp=za + yb;\n  zb+=-(temp - za - yb);\n  za=temp;\n  double result=za + zb;\n  if (leftPlane) {\n    final double resultb=-(result - za - zb);\n    final double pia=1.5707963267948966 * 2;\n    final double pib=6.123233995736766E-17 * 2;\n    za=pia - result;\n    zb=-(za - pia + result);\n    zb+=pib - resultb;\n    result=za + zb;\n  }\n  if (negate ^ leftPlane) {\n    result=-result;\n  }\n  return result;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 647,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 23,
                    "startLineNumber": 2537,
                    "startColumnNumber": 8,
                    "endLineNumber": 2537,
                    "endColumnNumber": 31
                },
                "nodeContext": "yb=yb * epsA2 * epsA;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 7,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "double"
        },
        {
            "nodeContext": "yb",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 2542,
                "startColumnNumber": 20,
                "endLineNumber": 2542,
                "endColumnNumber": 22
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 2542,
                        "startColumnNumber": 15,
                        "endLineNumber": 2542,
                        "endColumnNumber": 22
                    },
                    "nodeContext": "ya + yb",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 14,
                        "startLineNumber": 2542,
                        "startColumnNumber": 8,
                        "endLineNumber": 2542,
                        "endColumnNumber": 22
                    },
                    "nodeContext": "temp=ya + yb",
                    "nodeType": "Assignment",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 15,
                        "startLineNumber": 2542,
                        "startColumnNumber": 8,
                        "endLineNumber": 2542,
                        "endColumnNumber": 23
                    },
                    "nodeContext": "temp=ya + yb;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 6,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4272,
                        "startLineNumber": 2434,
                        "startColumnNumber": 72,
                        "endLineNumber": 2577,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (xa == 0.0) {\n    return leftPlane ? copySign(Math.PI,xa) : xa;\n  }\n  final boolean negate;\n  if (xa < 0) {\n    xa=-xa;\n    xb=-xb;\n    negate=true;\n  }\n else {\n    negate=false;\n  }\n  if (xa > 1.633123935319537E16) {\n    return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);\n  }\n  final int idx;\n  if (xa < 1) {\n    idx=(int)(((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);\n  }\n else {\n    final double oneOverXa=1 / xa;\n    idx=(int)(-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);\n  }\n  final double ttA=TANGENT_TABLE_A[idx];\n  final double ttB=TANGENT_TABLE_B[idx];\n  double epsA=xa - ttA;\n  double epsB=-(epsA - xa + ttA);\n  epsB+=xb - ttB;\n  double temp=epsA + epsB;\n  epsB=-(temp - epsA - epsB);\n  epsA=temp;\n  temp=xa * HEX_40000000;\n  double ya=xa + temp - temp;\n  double yb=xb + xa - ya;\n  xa=ya;\n  xb+=yb;\n  if (idx == 0) {\n    final double denom=1d / (1d + (xa + xb) * (ttA + ttB));\n    ya=epsA * denom;\n    yb=epsB * denom;\n  }\n else {\n    double temp2=xa * ttA;\n    double za=1d + temp2;\n    double zb=-(za - 1d - temp2);\n    temp2=xb * ttA + xa * ttB;\n    temp=za + temp2;\n    zb+=-(temp - za - temp2);\n    za=temp;\n    zb+=xb * ttB;\n    ya=epsA / za;\n    temp=ya * HEX_40000000;\n    final double yaa=(ya + temp) - temp;\n    final double yab=ya - yaa;\n    temp=za * HEX_40000000;\n    final double zaa=(za + temp) - temp;\n    final double zab=za - zaa;\n    yb=(epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;\n    yb+=-epsA * zb / za / za;\n    yb+=epsB / za;\n  }\n  epsA=ya;\n  epsB=yb;\n  final double epsA2=epsA * epsA;\n  yb=0.07490822288864472;\n  yb=yb * epsA2 + -0.09088450866185192;\n  yb=yb * epsA2 + 0.11111095942313305;\n  yb=yb * epsA2 + -0.1428571423679182;\n  yb=yb * epsA2 + 0.19999999999923582;\n  yb=yb * epsA2 + -0.33333333333333287;\n  yb=yb * epsA2 * epsA;\n  ya=epsA;\n  temp=ya + yb;\n  yb=-(temp - ya - yb);\n  ya=temp;\n  yb+=epsB / (1d + epsA * epsA);\n  double za=EIGHTHS[idx] + ya;\n  double zb=-(za - EIGHTHS[idx] - ya);\n  temp=za + yb;\n  zb+=-(temp - za - yb);\n  za=temp;\n  double result=za + zb;\n  if (leftPlane) {\n    final double resultb=-(result - za - zb);\n    final double pia=1.5707963267948966 * 2;\n    final double pib=6.123233995736766E-17 * 2;\n    za=pia - result;\n    zb=-(za - pia + result);\n    zb+=pib - resultb;\n    result=za + zb;\n  }\n  if (negate ^ leftPlane) {\n    result=-result;\n  }\n  return result;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 632,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4674,
                        "startLineNumber": 2428,
                        "startColumnNumber": 4,
                        "endLineNumber": 2577,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Internal helper function to compute arctangent.\n * @param xa number from which arctangent is requested\n * @param xb extra bits for x (may be 0.0)\n * @param leftPlane if true, result angle must be put in the left half plane\n * @return atan(xa + xb) (or angle shifted by {@code PI} if leftPlane is true)\n */\nprivate static double atan(double xa,double xb,boolean leftPlane){\n  if (xa == 0.0) {\n    return leftPlane ? copySign(Math.PI,xa) : xa;\n  }\n  final boolean negate;\n  if (xa < 0) {\n    xa=-xa;\n    xb=-xb;\n    negate=true;\n  }\n else {\n    negate=false;\n  }\n  if (xa > 1.633123935319537E16) {\n    return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);\n  }\n  final int idx;\n  if (xa < 1) {\n    idx=(int)(((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);\n  }\n else {\n    final double oneOverXa=1 / xa;\n    idx=(int)(-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);\n  }\n  final double ttA=TANGENT_TABLE_A[idx];\n  final double ttB=TANGENT_TABLE_B[idx];\n  double epsA=xa - ttA;\n  double epsB=-(epsA - xa + ttA);\n  epsB+=xb - ttB;\n  double temp=epsA + epsB;\n  epsB=-(temp - epsA - epsB);\n  epsA=temp;\n  temp=xa * HEX_40000000;\n  double ya=xa + temp - temp;\n  double yb=xb + xa - ya;\n  xa=ya;\n  xb+=yb;\n  if (idx == 0) {\n    final double denom=1d / (1d + (xa + xb) * (ttA + ttB));\n    ya=epsA * denom;\n    yb=epsB * denom;\n  }\n else {\n    double temp2=xa * ttA;\n    double za=1d + temp2;\n    double zb=-(za - 1d - temp2);\n    temp2=xb * ttA + xa * ttB;\n    temp=za + temp2;\n    zb+=-(temp - za - temp2);\n    za=temp;\n    zb+=xb * ttB;\n    ya=epsA / za;\n    temp=ya * HEX_40000000;\n    final double yaa=(ya + temp) - temp;\n    final double yab=ya - yaa;\n    temp=za * HEX_40000000;\n    final double zaa=(za + temp) - temp;\n    final double zab=za - zaa;\n    yb=(epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;\n    yb+=-epsA * zb / za / za;\n    yb+=epsB / za;\n  }\n  epsA=ya;\n  epsB=yb;\n  final double epsA2=epsA * epsA;\n  yb=0.07490822288864472;\n  yb=yb * epsA2 + -0.09088450866185192;\n  yb=yb * epsA2 + 0.11111095942313305;\n  yb=yb * epsA2 + -0.1428571423679182;\n  yb=yb * epsA2 + 0.19999999999923582;\n  yb=yb * epsA2 + -0.33333333333333287;\n  yb=yb * epsA2 * epsA;\n  ya=epsA;\n  temp=ya + yb;\n  yb=-(temp - ya - yb);\n  ya=temp;\n  yb+=epsB / (1d + epsA * epsA);\n  double za=EIGHTHS[idx] + ya;\n  double zb=-(za - EIGHTHS[idx] - ya);\n  temp=za + yb;\n  zb+=-(temp - za - yb);\n  za=temp;\n  double result=za + zb;\n  if (leftPlane) {\n    final double resultb=-(result - za - zb);\n    final double pia=1.5707963267948966 * 2;\n    final double pib=6.123233995736766E-17 * 2;\n    za=pia - result;\n    zb=-(za - pia + result);\n    zb+=pib - resultb;\n    result=za + zb;\n  }\n  if (negate ^ leftPlane) {\n    result=-result;\n  }\n  return result;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 647,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 15,
                    "startLineNumber": 2542,
                    "startColumnNumber": 8,
                    "endLineNumber": 2542,
                    "endColumnNumber": 23
                },
                "nodeContext": "temp=ya + yb;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 6,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "double"
        },
        {
            "nodeContext": "yb",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 2543,
                "startColumnNumber": 27,
                "endLineNumber": 2543,
                "endColumnNumber": 29
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
                    "nodePosition": {
                        "charLength": 14,
                        "startLineNumber": 2543,
                        "startColumnNumber": 15,
                        "endLineNumber": 2543,
                        "endColumnNumber": 29
                    },
                    "nodeContext": "temp - ya - yb",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
                    "nodePosition": {
                        "charLength": 16,
                        "startLineNumber": 2543,
                        "startColumnNumber": 14,
                        "endLineNumber": 2543,
                        "endColumnNumber": 30
                    },
                    "nodeContext": "(temp - ya - yb)",
                    "nodeType": "ParenthesizedExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 17,
                        "startLineNumber": 2543,
                        "startColumnNumber": 13,
                        "endLineNumber": 2543,
                        "endColumnNumber": 30
                    },
                    "nodeContext": "-(temp - ya - yb)",
                    "nodeType": "PrefixExpression",
                    "astNodeNumber": 6,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 22,
                        "startLineNumber": 2543,
                        "startColumnNumber": 8,
                        "endLineNumber": 2543,
                        "endColumnNumber": 30
                    },
                    "nodeContext": "yb=-(temp - ya - yb)",
                    "nodeType": "Assignment",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 23,
                        "startLineNumber": 2543,
                        "startColumnNumber": 8,
                        "endLineNumber": 2543,
                        "endColumnNumber": 31
                    },
                    "nodeContext": "yb=-(temp - ya - yb);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 9,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4272,
                        "startLineNumber": 2434,
                        "startColumnNumber": 72,
                        "endLineNumber": 2577,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (xa == 0.0) {\n    return leftPlane ? copySign(Math.PI,xa) : xa;\n  }\n  final boolean negate;\n  if (xa < 0) {\n    xa=-xa;\n    xb=-xb;\n    negate=true;\n  }\n else {\n    negate=false;\n  }\n  if (xa > 1.633123935319537E16) {\n    return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);\n  }\n  final int idx;\n  if (xa < 1) {\n    idx=(int)(((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);\n  }\n else {\n    final double oneOverXa=1 / xa;\n    idx=(int)(-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);\n  }\n  final double ttA=TANGENT_TABLE_A[idx];\n  final double ttB=TANGENT_TABLE_B[idx];\n  double epsA=xa - ttA;\n  double epsB=-(epsA - xa + ttA);\n  epsB+=xb - ttB;\n  double temp=epsA + epsB;\n  epsB=-(temp - epsA - epsB);\n  epsA=temp;\n  temp=xa * HEX_40000000;\n  double ya=xa + temp - temp;\n  double yb=xb + xa - ya;\n  xa=ya;\n  xb+=yb;\n  if (idx == 0) {\n    final double denom=1d / (1d + (xa + xb) * (ttA + ttB));\n    ya=epsA * denom;\n    yb=epsB * denom;\n  }\n else {\n    double temp2=xa * ttA;\n    double za=1d + temp2;\n    double zb=-(za - 1d - temp2);\n    temp2=xb * ttA + xa * ttB;\n    temp=za + temp2;\n    zb+=-(temp - za - temp2);\n    za=temp;\n    zb+=xb * ttB;\n    ya=epsA / za;\n    temp=ya * HEX_40000000;\n    final double yaa=(ya + temp) - temp;\n    final double yab=ya - yaa;\n    temp=za * HEX_40000000;\n    final double zaa=(za + temp) - temp;\n    final double zab=za - zaa;\n    yb=(epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;\n    yb+=-epsA * zb / za / za;\n    yb+=epsB / za;\n  }\n  epsA=ya;\n  epsB=yb;\n  final double epsA2=epsA * epsA;\n  yb=0.07490822288864472;\n  yb=yb * epsA2 + -0.09088450866185192;\n  yb=yb * epsA2 + 0.11111095942313305;\n  yb=yb * epsA2 + -0.1428571423679182;\n  yb=yb * epsA2 + 0.19999999999923582;\n  yb=yb * epsA2 + -0.33333333333333287;\n  yb=yb * epsA2 * epsA;\n  ya=epsA;\n  temp=ya + yb;\n  yb=-(temp - ya - yb);\n  ya=temp;\n  yb+=epsB / (1d + epsA * epsA);\n  double za=EIGHTHS[idx] + ya;\n  double zb=-(za - EIGHTHS[idx] - ya);\n  temp=za + yb;\n  zb+=-(temp - za - yb);\n  za=temp;\n  double result=za + zb;\n  if (leftPlane) {\n    final double resultb=-(result - za - zb);\n    final double pia=1.5707963267948966 * 2;\n    final double pib=6.123233995736766E-17 * 2;\n    za=pia - result;\n    zb=-(za - pia + result);\n    zb+=pib - resultb;\n    result=za + zb;\n  }\n  if (negate ^ leftPlane) {\n    result=-result;\n  }\n  return result;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 632,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4674,
                        "startLineNumber": 2428,
                        "startColumnNumber": 4,
                        "endLineNumber": 2577,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Internal helper function to compute arctangent.\n * @param xa number from which arctangent is requested\n * @param xb extra bits for x (may be 0.0)\n * @param leftPlane if true, result angle must be put in the left half plane\n * @return atan(xa + xb) (or angle shifted by {@code PI} if leftPlane is true)\n */\nprivate static double atan(double xa,double xb,boolean leftPlane){\n  if (xa == 0.0) {\n    return leftPlane ? copySign(Math.PI,xa) : xa;\n  }\n  final boolean negate;\n  if (xa < 0) {\n    xa=-xa;\n    xb=-xb;\n    negate=true;\n  }\n else {\n    negate=false;\n  }\n  if (xa > 1.633123935319537E16) {\n    return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);\n  }\n  final int idx;\n  if (xa < 1) {\n    idx=(int)(((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);\n  }\n else {\n    final double oneOverXa=1 / xa;\n    idx=(int)(-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);\n  }\n  final double ttA=TANGENT_TABLE_A[idx];\n  final double ttB=TANGENT_TABLE_B[idx];\n  double epsA=xa - ttA;\n  double epsB=-(epsA - xa + ttA);\n  epsB+=xb - ttB;\n  double temp=epsA + epsB;\n  epsB=-(temp - epsA - epsB);\n  epsA=temp;\n  temp=xa * HEX_40000000;\n  double ya=xa + temp - temp;\n  double yb=xb + xa - ya;\n  xa=ya;\n  xb+=yb;\n  if (idx == 0) {\n    final double denom=1d / (1d + (xa + xb) * (ttA + ttB));\n    ya=epsA * denom;\n    yb=epsB * denom;\n  }\n else {\n    double temp2=xa * ttA;\n    double za=1d + temp2;\n    double zb=-(za - 1d - temp2);\n    temp2=xb * ttA + xa * ttB;\n    temp=za + temp2;\n    zb+=-(temp - za - temp2);\n    za=temp;\n    zb+=xb * ttB;\n    ya=epsA / za;\n    temp=ya * HEX_40000000;\n    final double yaa=(ya + temp) - temp;\n    final double yab=ya - yaa;\n    temp=za * HEX_40000000;\n    final double zaa=(za + temp) - temp;\n    final double zab=za - zaa;\n    yb=(epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;\n    yb+=-epsA * zb / za / za;\n    yb+=epsB / za;\n  }\n  epsA=ya;\n  epsB=yb;\n  final double epsA2=epsA * epsA;\n  yb=0.07490822288864472;\n  yb=yb * epsA2 + -0.09088450866185192;\n  yb=yb * epsA2 + 0.11111095942313305;\n  yb=yb * epsA2 + -0.1428571423679182;\n  yb=yb * epsA2 + 0.19999999999923582;\n  yb=yb * epsA2 + -0.33333333333333287;\n  yb=yb * epsA2 * epsA;\n  ya=epsA;\n  temp=ya + yb;\n  yb=-(temp - ya - yb);\n  ya=temp;\n  yb+=epsB / (1d + epsA * epsA);\n  double za=EIGHTHS[idx] + ya;\n  double zb=-(za - EIGHTHS[idx] - ya);\n  temp=za + yb;\n  zb+=-(temp - za - yb);\n  za=temp;\n  double result=za + zb;\n  if (leftPlane) {\n    final double resultb=-(result - za - zb);\n    final double pia=1.5707963267948966 * 2;\n    final double pib=6.123233995736766E-17 * 2;\n    za=pia - result;\n    zb=-(za - pia + result);\n    zb+=pib - resultb;\n    result=za + zb;\n  }\n  if (negate ^ leftPlane) {\n    result=-result;\n  }\n  return result;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 647,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 23,
                    "startLineNumber": 2543,
                    "startColumnNumber": 8,
                    "endLineNumber": 2543,
                    "endColumnNumber": 31
                },
                "nodeContext": "yb=-(temp - ya - yb);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 9,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "double"
        },
        {
            "nodeContext": "yb",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 2552,
                "startColumnNumber": 20,
                "endLineNumber": 2552,
                "endColumnNumber": 22
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 2552,
                        "startColumnNumber": 15,
                        "endLineNumber": 2552,
                        "endColumnNumber": 22
                    },
                    "nodeContext": "za + yb",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 14,
                        "startLineNumber": 2552,
                        "startColumnNumber": 8,
                        "endLineNumber": 2552,
                        "endColumnNumber": 22
                    },
                    "nodeContext": "temp=za + yb",
                    "nodeType": "Assignment",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 15,
                        "startLineNumber": 2552,
                        "startColumnNumber": 8,
                        "endLineNumber": 2552,
                        "endColumnNumber": 23
                    },
                    "nodeContext": "temp=za + yb;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 6,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4272,
                        "startLineNumber": 2434,
                        "startColumnNumber": 72,
                        "endLineNumber": 2577,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (xa == 0.0) {\n    return leftPlane ? copySign(Math.PI,xa) : xa;\n  }\n  final boolean negate;\n  if (xa < 0) {\n    xa=-xa;\n    xb=-xb;\n    negate=true;\n  }\n else {\n    negate=false;\n  }\n  if (xa > 1.633123935319537E16) {\n    return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);\n  }\n  final int idx;\n  if (xa < 1) {\n    idx=(int)(((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);\n  }\n else {\n    final double oneOverXa=1 / xa;\n    idx=(int)(-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);\n  }\n  final double ttA=TANGENT_TABLE_A[idx];\n  final double ttB=TANGENT_TABLE_B[idx];\n  double epsA=xa - ttA;\n  double epsB=-(epsA - xa + ttA);\n  epsB+=xb - ttB;\n  double temp=epsA + epsB;\n  epsB=-(temp - epsA - epsB);\n  epsA=temp;\n  temp=xa * HEX_40000000;\n  double ya=xa + temp - temp;\n  double yb=xb + xa - ya;\n  xa=ya;\n  xb+=yb;\n  if (idx == 0) {\n    final double denom=1d / (1d + (xa + xb) * (ttA + ttB));\n    ya=epsA * denom;\n    yb=epsB * denom;\n  }\n else {\n    double temp2=xa * ttA;\n    double za=1d + temp2;\n    double zb=-(za - 1d - temp2);\n    temp2=xb * ttA + xa * ttB;\n    temp=za + temp2;\n    zb+=-(temp - za - temp2);\n    za=temp;\n    zb+=xb * ttB;\n    ya=epsA / za;\n    temp=ya * HEX_40000000;\n    final double yaa=(ya + temp) - temp;\n    final double yab=ya - yaa;\n    temp=za * HEX_40000000;\n    final double zaa=(za + temp) - temp;\n    final double zab=za - zaa;\n    yb=(epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;\n    yb+=-epsA * zb / za / za;\n    yb+=epsB / za;\n  }\n  epsA=ya;\n  epsB=yb;\n  final double epsA2=epsA * epsA;\n  yb=0.07490822288864472;\n  yb=yb * epsA2 + -0.09088450866185192;\n  yb=yb * epsA2 + 0.11111095942313305;\n  yb=yb * epsA2 + -0.1428571423679182;\n  yb=yb * epsA2 + 0.19999999999923582;\n  yb=yb * epsA2 + -0.33333333333333287;\n  yb=yb * epsA2 * epsA;\n  ya=epsA;\n  temp=ya + yb;\n  yb=-(temp - ya - yb);\n  ya=temp;\n  yb+=epsB / (1d + epsA * epsA);\n  double za=EIGHTHS[idx] + ya;\n  double zb=-(za - EIGHTHS[idx] - ya);\n  temp=za + yb;\n  zb+=-(temp - za - yb);\n  za=temp;\n  double result=za + zb;\n  if (leftPlane) {\n    final double resultb=-(result - za - zb);\n    final double pia=1.5707963267948966 * 2;\n    final double pib=6.123233995736766E-17 * 2;\n    za=pia - result;\n    zb=-(za - pia + result);\n    zb+=pib - resultb;\n    result=za + zb;\n  }\n  if (negate ^ leftPlane) {\n    result=-result;\n  }\n  return result;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 632,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4674,
                        "startLineNumber": 2428,
                        "startColumnNumber": 4,
                        "endLineNumber": 2577,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Internal helper function to compute arctangent.\n * @param xa number from which arctangent is requested\n * @param xb extra bits for x (may be 0.0)\n * @param leftPlane if true, result angle must be put in the left half plane\n * @return atan(xa + xb) (or angle shifted by {@code PI} if leftPlane is true)\n */\nprivate static double atan(double xa,double xb,boolean leftPlane){\n  if (xa == 0.0) {\n    return leftPlane ? copySign(Math.PI,xa) : xa;\n  }\n  final boolean negate;\n  if (xa < 0) {\n    xa=-xa;\n    xb=-xb;\n    negate=true;\n  }\n else {\n    negate=false;\n  }\n  if (xa > 1.633123935319537E16) {\n    return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);\n  }\n  final int idx;\n  if (xa < 1) {\n    idx=(int)(((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);\n  }\n else {\n    final double oneOverXa=1 / xa;\n    idx=(int)(-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);\n  }\n  final double ttA=TANGENT_TABLE_A[idx];\n  final double ttB=TANGENT_TABLE_B[idx];\n  double epsA=xa - ttA;\n  double epsB=-(epsA - xa + ttA);\n  epsB+=xb - ttB;\n  double temp=epsA + epsB;\n  epsB=-(temp - epsA - epsB);\n  epsA=temp;\n  temp=xa * HEX_40000000;\n  double ya=xa + temp - temp;\n  double yb=xb + xa - ya;\n  xa=ya;\n  xb+=yb;\n  if (idx == 0) {\n    final double denom=1d / (1d + (xa + xb) * (ttA + ttB));\n    ya=epsA * denom;\n    yb=epsB * denom;\n  }\n else {\n    double temp2=xa * ttA;\n    double za=1d + temp2;\n    double zb=-(za - 1d - temp2);\n    temp2=xb * ttA + xa * ttB;\n    temp=za + temp2;\n    zb+=-(temp - za - temp2);\n    za=temp;\n    zb+=xb * ttB;\n    ya=epsA / za;\n    temp=ya * HEX_40000000;\n    final double yaa=(ya + temp) - temp;\n    final double yab=ya - yaa;\n    temp=za * HEX_40000000;\n    final double zaa=(za + temp) - temp;\n    final double zab=za - zaa;\n    yb=(epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;\n    yb+=-epsA * zb / za / za;\n    yb+=epsB / za;\n  }\n  epsA=ya;\n  epsB=yb;\n  final double epsA2=epsA * epsA;\n  yb=0.07490822288864472;\n  yb=yb * epsA2 + -0.09088450866185192;\n  yb=yb * epsA2 + 0.11111095942313305;\n  yb=yb * epsA2 + -0.1428571423679182;\n  yb=yb * epsA2 + 0.19999999999923582;\n  yb=yb * epsA2 + -0.33333333333333287;\n  yb=yb * epsA2 * epsA;\n  ya=epsA;\n  temp=ya + yb;\n  yb=-(temp - ya - yb);\n  ya=temp;\n  yb+=epsB / (1d + epsA * epsA);\n  double za=EIGHTHS[idx] + ya;\n  double zb=-(za - EIGHTHS[idx] - ya);\n  temp=za + yb;\n  zb+=-(temp - za - yb);\n  za=temp;\n  double result=za + zb;\n  if (leftPlane) {\n    final double resultb=-(result - za - zb);\n    final double pia=1.5707963267948966 * 2;\n    final double pib=6.123233995736766E-17 * 2;\n    za=pia - result;\n    zb=-(za - pia + result);\n    zb+=pib - resultb;\n    result=za + zb;\n  }\n  if (negate ^ leftPlane) {\n    result=-result;\n  }\n  return result;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 647,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 15,
                    "startLineNumber": 2552,
                    "startColumnNumber": 8,
                    "endLineNumber": 2552,
                    "endColumnNumber": 23
                },
                "nodeContext": "temp=za + yb;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 6,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "double"
        },
        {
            "nodeContext": "yb",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 2553,
                "startColumnNumber": 28,
                "endLineNumber": 2553,
                "endColumnNumber": 30
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
                    "nodePosition": {
                        "charLength": 14,
                        "startLineNumber": 2553,
                        "startColumnNumber": 16,
                        "endLineNumber": 2553,
                        "endColumnNumber": 30
                    },
                    "nodeContext": "temp - za - yb",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
                    "nodePosition": {
                        "charLength": 16,
                        "startLineNumber": 2553,
                        "startColumnNumber": 15,
                        "endLineNumber": 2553,
                        "endColumnNumber": 31
                    },
                    "nodeContext": "(temp - za - yb)",
                    "nodeType": "ParenthesizedExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 17,
                        "startLineNumber": 2553,
                        "startColumnNumber": 14,
                        "endLineNumber": 2553,
                        "endColumnNumber": 31
                    },
                    "nodeContext": "-(temp - za - yb)",
                    "nodeType": "PrefixExpression",
                    "astNodeNumber": 6,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 23,
                        "startLineNumber": 2553,
                        "startColumnNumber": 8,
                        "endLineNumber": 2553,
                        "endColumnNumber": 31
                    },
                    "nodeContext": "zb+=-(temp - za - yb)",
                    "nodeType": "Assignment",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 24,
                        "startLineNumber": 2553,
                        "startColumnNumber": 8,
                        "endLineNumber": 2553,
                        "endColumnNumber": 32
                    },
                    "nodeContext": "zb+=-(temp - za - yb);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 9,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4272,
                        "startLineNumber": 2434,
                        "startColumnNumber": 72,
                        "endLineNumber": 2577,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (xa == 0.0) {\n    return leftPlane ? copySign(Math.PI,xa) : xa;\n  }\n  final boolean negate;\n  if (xa < 0) {\n    xa=-xa;\n    xb=-xb;\n    negate=true;\n  }\n else {\n    negate=false;\n  }\n  if (xa > 1.633123935319537E16) {\n    return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);\n  }\n  final int idx;\n  if (xa < 1) {\n    idx=(int)(((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);\n  }\n else {\n    final double oneOverXa=1 / xa;\n    idx=(int)(-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);\n  }\n  final double ttA=TANGENT_TABLE_A[idx];\n  final double ttB=TANGENT_TABLE_B[idx];\n  double epsA=xa - ttA;\n  double epsB=-(epsA - xa + ttA);\n  epsB+=xb - ttB;\n  double temp=epsA + epsB;\n  epsB=-(temp - epsA - epsB);\n  epsA=temp;\n  temp=xa * HEX_40000000;\n  double ya=xa + temp - temp;\n  double yb=xb + xa - ya;\n  xa=ya;\n  xb+=yb;\n  if (idx == 0) {\n    final double denom=1d / (1d + (xa + xb) * (ttA + ttB));\n    ya=epsA * denom;\n    yb=epsB * denom;\n  }\n else {\n    double temp2=xa * ttA;\n    double za=1d + temp2;\n    double zb=-(za - 1d - temp2);\n    temp2=xb * ttA + xa * ttB;\n    temp=za + temp2;\n    zb+=-(temp - za - temp2);\n    za=temp;\n    zb+=xb * ttB;\n    ya=epsA / za;\n    temp=ya * HEX_40000000;\n    final double yaa=(ya + temp) - temp;\n    final double yab=ya - yaa;\n    temp=za * HEX_40000000;\n    final double zaa=(za + temp) - temp;\n    final double zab=za - zaa;\n    yb=(epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;\n    yb+=-epsA * zb / za / za;\n    yb+=epsB / za;\n  }\n  epsA=ya;\n  epsB=yb;\n  final double epsA2=epsA * epsA;\n  yb=0.07490822288864472;\n  yb=yb * epsA2 + -0.09088450866185192;\n  yb=yb * epsA2 + 0.11111095942313305;\n  yb=yb * epsA2 + -0.1428571423679182;\n  yb=yb * epsA2 + 0.19999999999923582;\n  yb=yb * epsA2 + -0.33333333333333287;\n  yb=yb * epsA2 * epsA;\n  ya=epsA;\n  temp=ya + yb;\n  yb=-(temp - ya - yb);\n  ya=temp;\n  yb+=epsB / (1d + epsA * epsA);\n  double za=EIGHTHS[idx] + ya;\n  double zb=-(za - EIGHTHS[idx] - ya);\n  temp=za + yb;\n  zb+=-(temp - za - yb);\n  za=temp;\n  double result=za + zb;\n  if (leftPlane) {\n    final double resultb=-(result - za - zb);\n    final double pia=1.5707963267948966 * 2;\n    final double pib=6.123233995736766E-17 * 2;\n    za=pia - result;\n    zb=-(za - pia + result);\n    zb+=pib - resultb;\n    result=za + zb;\n  }\n  if (negate ^ leftPlane) {\n    result=-result;\n  }\n  return result;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 632,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4674,
                        "startLineNumber": 2428,
                        "startColumnNumber": 4,
                        "endLineNumber": 2577,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Internal helper function to compute arctangent.\n * @param xa number from which arctangent is requested\n * @param xb extra bits for x (may be 0.0)\n * @param leftPlane if true, result angle must be put in the left half plane\n * @return atan(xa + xb) (or angle shifted by {@code PI} if leftPlane is true)\n */\nprivate static double atan(double xa,double xb,boolean leftPlane){\n  if (xa == 0.0) {\n    return leftPlane ? copySign(Math.PI,xa) : xa;\n  }\n  final boolean negate;\n  if (xa < 0) {\n    xa=-xa;\n    xb=-xb;\n    negate=true;\n  }\n else {\n    negate=false;\n  }\n  if (xa > 1.633123935319537E16) {\n    return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);\n  }\n  final int idx;\n  if (xa < 1) {\n    idx=(int)(((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);\n  }\n else {\n    final double oneOverXa=1 / xa;\n    idx=(int)(-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);\n  }\n  final double ttA=TANGENT_TABLE_A[idx];\n  final double ttB=TANGENT_TABLE_B[idx];\n  double epsA=xa - ttA;\n  double epsB=-(epsA - xa + ttA);\n  epsB+=xb - ttB;\n  double temp=epsA + epsB;\n  epsB=-(temp - epsA - epsB);\n  epsA=temp;\n  temp=xa * HEX_40000000;\n  double ya=xa + temp - temp;\n  double yb=xb + xa - ya;\n  xa=ya;\n  xb+=yb;\n  if (idx == 0) {\n    final double denom=1d / (1d + (xa + xb) * (ttA + ttB));\n    ya=epsA * denom;\n    yb=epsB * denom;\n  }\n else {\n    double temp2=xa * ttA;\n    double za=1d + temp2;\n    double zb=-(za - 1d - temp2);\n    temp2=xb * ttA + xa * ttB;\n    temp=za + temp2;\n    zb+=-(temp - za - temp2);\n    za=temp;\n    zb+=xb * ttB;\n    ya=epsA / za;\n    temp=ya * HEX_40000000;\n    final double yaa=(ya + temp) - temp;\n    final double yab=ya - yaa;\n    temp=za * HEX_40000000;\n    final double zaa=(za + temp) - temp;\n    final double zab=za - zaa;\n    yb=(epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;\n    yb+=-epsA * zb / za / za;\n    yb+=epsB / za;\n  }\n  epsA=ya;\n  epsB=yb;\n  final double epsA2=epsA * epsA;\n  yb=0.07490822288864472;\n  yb=yb * epsA2 + -0.09088450866185192;\n  yb=yb * epsA2 + 0.11111095942313305;\n  yb=yb * epsA2 + -0.1428571423679182;\n  yb=yb * epsA2 + 0.19999999999923582;\n  yb=yb * epsA2 + -0.33333333333333287;\n  yb=yb * epsA2 * epsA;\n  ya=epsA;\n  temp=ya + yb;\n  yb=-(temp - ya - yb);\n  ya=temp;\n  yb+=epsB / (1d + epsA * epsA);\n  double za=EIGHTHS[idx] + ya;\n  double zb=-(za - EIGHTHS[idx] - ya);\n  temp=za + yb;\n  zb+=-(temp - za - yb);\n  za=temp;\n  double result=za + zb;\n  if (leftPlane) {\n    final double resultb=-(result - za - zb);\n    final double pia=1.5707963267948966 * 2;\n    final double pib=6.123233995736766E-17 * 2;\n    za=pia - result;\n    zb=-(za - pia + result);\n    zb+=pib - resultb;\n    result=za + zb;\n  }\n  if (negate ^ leftPlane) {\n    result=-result;\n  }\n  return result;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 647,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 24,
                    "startLineNumber": 2553,
                    "startColumnNumber": 8,
                    "endLineNumber": 2553,
                    "endColumnNumber": 32
                },
                "nodeContext": "zb+=-(temp - za - yb);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 9,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "double"
        }
    ],
    "positionList": [
        {
            "charLength": 2,
            "startLineNumber": 2478,
            "startColumnNumber": 14,
            "endLineNumber": 2478,
            "endColumnNumber": 16
        },
        {
            "charLength": 2,
            "startLineNumber": 2517,
            "startColumnNumber": 15,
            "endLineNumber": 2517,
            "endColumnNumber": 17
        },
        {
            "charLength": 2,
            "startLineNumber": 2532,
            "startColumnNumber": 13,
            "endLineNumber": 2532,
            "endColumnNumber": 15
        },
        {
            "charLength": 2,
            "startLineNumber": 2533,
            "startColumnNumber": 13,
            "endLineNumber": 2533,
            "endColumnNumber": 15
        },
        {
            "charLength": 2,
            "startLineNumber": 2534,
            "startColumnNumber": 13,
            "endLineNumber": 2534,
            "endColumnNumber": 15
        },
        {
            "charLength": 2,
            "startLineNumber": 2535,
            "startColumnNumber": 13,
            "endLineNumber": 2535,
            "endColumnNumber": 15
        },
        {
            "charLength": 2,
            "startLineNumber": 2536,
            "startColumnNumber": 13,
            "endLineNumber": 2536,
            "endColumnNumber": 15
        },
        {
            "charLength": 2,
            "startLineNumber": 2537,
            "startColumnNumber": 13,
            "endLineNumber": 2537,
            "endColumnNumber": 15
        },
        {
            "charLength": 2,
            "startLineNumber": 2542,
            "startColumnNumber": 20,
            "endLineNumber": 2542,
            "endColumnNumber": 22
        },
        {
            "charLength": 2,
            "startLineNumber": 2543,
            "startColumnNumber": 27,
            "endLineNumber": 2543,
            "endColumnNumber": 29
        },
        {
            "charLength": 2,
            "startLineNumber": 2552,
            "startColumnNumber": 20,
            "endLineNumber": 2552,
            "endColumnNumber": 22
        },
        {
            "charLength": 2,
            "startLineNumber": 2553,
            "startColumnNumber": 28,
            "endLineNumber": 2553,
            "endColumnNumber": 30
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 9,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 9,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 9,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 9,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 9,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 9,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 9,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 9,
            "secondKey": 8,
            "layout": 5
        },
        {
            "firstKey": 9,
            "secondKey": 10,
            "layout": 5
        },
        {
            "firstKey": 9,
            "secondKey": 11,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 11,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 8,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 9,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 10,
            "layout": 5
        }
    ]
}