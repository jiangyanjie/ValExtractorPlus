{
    "id": 214,
    "expression": "tuples",
    "projectName": "storm",
    "commitID": "4986373c5ca8d8e3d6903dd479c4442451c49655",
    "filePath": "external/storm-kafka-client/src/main/java/org/apache/storm/kafka/trident/TridentKafkaState.java",
    "occurrences": 4,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "tuples",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 6,
                "startLineNumber": 78,
                "startColumnNumber": 67,
                "endLineNumber": 78,
                "endColumnNumber": 73
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
                    "nodePosition": {
                        "charLength": 13,
                        "startLineNumber": 78,
                        "startColumnNumber": 67,
                        "endLineNumber": 78,
                        "endColumnNumber": 80
                    },
                    "nodeContext": "tuples.size()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 30,
                        "startLineNumber": 78,
                        "startColumnNumber": 51,
                        "endLineNumber": 78,
                        "endColumnNumber": 81
                    },
                    "nodeContext": "new ArrayList<>(tuples.size())",
                    "nodeType": "ClassInstanceCreation",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 40,
                        "startLineNumber": 78,
                        "startColumnNumber": 41,
                        "endLineNumber": 78,
                        "endColumnNumber": 81
                    },
                    "nodeContext": "futures=new ArrayList<>(tuples.size())",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 9,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 70,
                        "startLineNumber": 78,
                        "startColumnNumber": 12,
                        "endLineNumber": 78,
                        "endColumnNumber": 82
                    },
                    "nodeContext": "List<Future<RecordMetadata>> futures=new ArrayList<>(tuples.size());\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 18,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 1441,
                        "startLineNumber": 77,
                        "startColumnNumber": 12,
                        "endLineNumber": 109,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  List<Future<RecordMetadata>> futures=new ArrayList<>(tuples.size());\n  for (  TridentTuple tuple : tuples) {\n    topic=topicSelector.getTopic(tuple);\n    if (topic != null) {\n      Future<RecordMetadata> result=producer.send(new ProducerRecord(topic,mapper.getKeyFromTuple(tuple),mapper.getMessageFromTuple(tuple)));\n      futures.add(result);\n    }\n else {\n      LOG.warn(\"skipping key = \" + mapper.getKeyFromTuple(tuple) + \", topic selector returned null.\");\n    }\n  }\n  List<ExecutionException> exceptions=new ArrayList<>(futures.size());\n  for (  Future<RecordMetadata> future : futures) {\n    try {\n      future.get();\n    }\n catch (    ExecutionException e) {\n      exceptions.add(e);\n    }\n  }\n  if (exceptions.size() > 0) {\n    String errorMsg=\"Could not retrieve result for messages \" + tuples + \" from topic = \"+ topic+ \" because of the following exceptions: \\n\";\n    for (    ExecutionException exception : exceptions) {\n      errorMsg=errorMsg + exception.getMessage() + \"\\n\";\n    }\n    LOG.error(errorMsg);\n    throw new FailedException(errorMsg);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 164,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1659,
                        "startLineNumber": 77,
                        "startColumnNumber": 8,
                        "endLineNumber": 113,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  List<Future<RecordMetadata>> futures=new ArrayList<>(tuples.size());\n  for (  TridentTuple tuple : tuples) {\n    topic=topicSelector.getTopic(tuple);\n    if (topic != null) {\n      Future<RecordMetadata> result=producer.send(new ProducerRecord(topic,mapper.getKeyFromTuple(tuple),mapper.getMessageFromTuple(tuple)));\n      futures.add(result);\n    }\n else {\n      LOG.warn(\"skipping key = \" + mapper.getKeyFromTuple(tuple) + \", topic selector returned null.\");\n    }\n  }\n  List<ExecutionException> exceptions=new ArrayList<>(futures.size());\n  for (  Future<RecordMetadata> future : futures) {\n    try {\n      future.get();\n    }\n catch (    ExecutionException e) {\n      exceptions.add(e);\n    }\n  }\n  if (exceptions.size() > 0) {\n    String errorMsg=\"Could not retrieve result for messages \" + tuples + \" from topic = \"+ topic+ \" because of the following exceptions: \\n\";\n    for (    ExecutionException exception : exceptions) {\n      errorMsg=errorMsg + exception.getMessage() + \"\\n\";\n    }\n    LOG.error(errorMsg);\n    throw new FailedException(errorMsg);\n  }\n}\n catch (Exception ex) {\n  String errorMsg=\"Could not send messages \" + tuples + \" to topic = \"+ topic;\n  LOG.warn(errorMsg,ex);\n  throw new FailedException(errorMsg,ex);\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 193,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1704,
                        "startLineNumber": 75,
                        "startColumnNumber": 83,
                        "endLineNumber": 114,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  String topic=null;\n  try {\n    List<Future<RecordMetadata>> futures=new ArrayList<>(tuples.size());\n    for (    TridentTuple tuple : tuples) {\n      topic=topicSelector.getTopic(tuple);\n      if (topic != null) {\n        Future<RecordMetadata> result=producer.send(new ProducerRecord(topic,mapper.getKeyFromTuple(tuple),mapper.getMessageFromTuple(tuple)));\n        futures.add(result);\n      }\n else {\n        LOG.warn(\"skipping key = \" + mapper.getKeyFromTuple(tuple) + \", topic selector returned null.\");\n      }\n    }\n    List<ExecutionException> exceptions=new ArrayList<>(futures.size());\n    for (    Future<RecordMetadata> future : futures) {\n      try {\n        future.get();\n      }\n catch (      ExecutionException e) {\n        exceptions.add(e);\n      }\n    }\n    if (exceptions.size() > 0) {\n      String errorMsg=\"Could not retrieve result for messages \" + tuples + \" from topic = \"+ topic+ \" because of the following exceptions: \\n\";\n      for (      ExecutionException exception : exceptions) {\n        errorMsg=errorMsg + exception.getMessage() + \"\\n\";\n      }\n      LOG.error(errorMsg);\n      throw new FailedException(errorMsg);\n    }\n  }\n catch (  Exception ex) {\n    String errorMsg=\"Could not send messages \" + tuples + \" to topic = \"+ topic;\n    LOG.warn(errorMsg,ex);\n    throw new FailedException(errorMsg,ex);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 200,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1783,
                        "startLineNumber": 75,
                        "startColumnNumber": 4,
                        "endLineNumber": 114,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "public void updateState(List<TridentTuple> tuples,TridentCollector collector){\n  String topic=null;\n  try {\n    List<Future<RecordMetadata>> futures=new ArrayList<>(tuples.size());\n    for (    TridentTuple tuple : tuples) {\n      topic=topicSelector.getTopic(tuple);\n      if (topic != null) {\n        Future<RecordMetadata> result=producer.send(new ProducerRecord(topic,mapper.getKeyFromTuple(tuple),mapper.getMessageFromTuple(tuple)));\n        futures.add(result);\n      }\n else {\n        LOG.warn(\"skipping key = \" + mapper.getKeyFromTuple(tuple) + \", topic selector returned null.\");\n      }\n    }\n    List<ExecutionException> exceptions=new ArrayList<>(futures.size());\n    for (    Future<RecordMetadata> future : futures) {\n      try {\n        future.get();\n      }\n catch (      ExecutionException e) {\n        exceptions.add(e);\n      }\n    }\n    if (exceptions.size() > 0) {\n      String errorMsg=\"Could not retrieve result for messages \" + tuples + \" from topic = \"+ topic+ \" because of the following exceptions: \\n\";\n      for (      ExecutionException exception : exceptions) {\n        errorMsg=errorMsg + exception.getMessage() + \"\\n\";\n      }\n      LOG.error(errorMsg);\n      throw new FailedException(errorMsg);\n    }\n  }\n catch (  Exception ex) {\n    String errorMsg=\"Could not send messages \" + tuples + \" to topic = \"+ topic;\n    LOG.warn(errorMsg,ex);\n    throw new FailedException(errorMsg,ex);\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 215,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 70,
                    "startLineNumber": 78,
                    "startColumnNumber": 12,
                    "endLineNumber": 78,
                    "endColumnNumber": 82
                },
                "nodeContext": "List<Future<RecordMetadata>> futures=new ArrayList<>(tuples.size());\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 18,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "java.util.List<org.apache.storm.trident.tuple.TridentTuple>"
        },
        {
            "nodeContext": "tuples",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 6,
                "startLineNumber": 79,
                "startColumnNumber": 38,
                "endLineNumber": 79,
                "endColumnNumber": 44
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 530,
                        "startLineNumber": 79,
                        "startColumnNumber": 12,
                        "endLineNumber": 89,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (TridentTuple tuple : tuples) {\n  topic=topicSelector.getTopic(tuple);\n  if (topic != null) {\n    Future<RecordMetadata> result=producer.send(new ProducerRecord(topic,mapper.getKeyFromTuple(tuple),mapper.getMessageFromTuple(tuple)));\n    futures.add(result);\n  }\n else {\n    LOG.warn(\"skipping key = \" + mapper.getKeyFromTuple(tuple) + \", topic selector returned null.\");\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 59,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 1441,
                        "startLineNumber": 77,
                        "startColumnNumber": 12,
                        "endLineNumber": 109,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  List<Future<RecordMetadata>> futures=new ArrayList<>(tuples.size());\n  for (  TridentTuple tuple : tuples) {\n    topic=topicSelector.getTopic(tuple);\n    if (topic != null) {\n      Future<RecordMetadata> result=producer.send(new ProducerRecord(topic,mapper.getKeyFromTuple(tuple),mapper.getMessageFromTuple(tuple)));\n      futures.add(result);\n    }\n else {\n      LOG.warn(\"skipping key = \" + mapper.getKeyFromTuple(tuple) + \", topic selector returned null.\");\n    }\n  }\n  List<ExecutionException> exceptions=new ArrayList<>(futures.size());\n  for (  Future<RecordMetadata> future : futures) {\n    try {\n      future.get();\n    }\n catch (    ExecutionException e) {\n      exceptions.add(e);\n    }\n  }\n  if (exceptions.size() > 0) {\n    String errorMsg=\"Could not retrieve result for messages \" + tuples + \" from topic = \"+ topic+ \" because of the following exceptions: \\n\";\n    for (    ExecutionException exception : exceptions) {\n      errorMsg=errorMsg + exception.getMessage() + \"\\n\";\n    }\n    LOG.error(errorMsg);\n    throw new FailedException(errorMsg);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 164,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1659,
                        "startLineNumber": 77,
                        "startColumnNumber": 8,
                        "endLineNumber": 113,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  List<Future<RecordMetadata>> futures=new ArrayList<>(tuples.size());\n  for (  TridentTuple tuple : tuples) {\n    topic=topicSelector.getTopic(tuple);\n    if (topic != null) {\n      Future<RecordMetadata> result=producer.send(new ProducerRecord(topic,mapper.getKeyFromTuple(tuple),mapper.getMessageFromTuple(tuple)));\n      futures.add(result);\n    }\n else {\n      LOG.warn(\"skipping key = \" + mapper.getKeyFromTuple(tuple) + \", topic selector returned null.\");\n    }\n  }\n  List<ExecutionException> exceptions=new ArrayList<>(futures.size());\n  for (  Future<RecordMetadata> future : futures) {\n    try {\n      future.get();\n    }\n catch (    ExecutionException e) {\n      exceptions.add(e);\n    }\n  }\n  if (exceptions.size() > 0) {\n    String errorMsg=\"Could not retrieve result for messages \" + tuples + \" from topic = \"+ topic+ \" because of the following exceptions: \\n\";\n    for (    ExecutionException exception : exceptions) {\n      errorMsg=errorMsg + exception.getMessage() + \"\\n\";\n    }\n    LOG.error(errorMsg);\n    throw new FailedException(errorMsg);\n  }\n}\n catch (Exception ex) {\n  String errorMsg=\"Could not send messages \" + tuples + \" to topic = \"+ topic;\n  LOG.warn(errorMsg,ex);\n  throw new FailedException(errorMsg,ex);\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 193,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1704,
                        "startLineNumber": 75,
                        "startColumnNumber": 83,
                        "endLineNumber": 114,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  String topic=null;\n  try {\n    List<Future<RecordMetadata>> futures=new ArrayList<>(tuples.size());\n    for (    TridentTuple tuple : tuples) {\n      topic=topicSelector.getTopic(tuple);\n      if (topic != null) {\n        Future<RecordMetadata> result=producer.send(new ProducerRecord(topic,mapper.getKeyFromTuple(tuple),mapper.getMessageFromTuple(tuple)));\n        futures.add(result);\n      }\n else {\n        LOG.warn(\"skipping key = \" + mapper.getKeyFromTuple(tuple) + \", topic selector returned null.\");\n      }\n    }\n    List<ExecutionException> exceptions=new ArrayList<>(futures.size());\n    for (    Future<RecordMetadata> future : futures) {\n      try {\n        future.get();\n      }\n catch (      ExecutionException e) {\n        exceptions.add(e);\n      }\n    }\n    if (exceptions.size() > 0) {\n      String errorMsg=\"Could not retrieve result for messages \" + tuples + \" from topic = \"+ topic+ \" because of the following exceptions: \\n\";\n      for (      ExecutionException exception : exceptions) {\n        errorMsg=errorMsg + exception.getMessage() + \"\\n\";\n      }\n      LOG.error(errorMsg);\n      throw new FailedException(errorMsg);\n    }\n  }\n catch (  Exception ex) {\n    String errorMsg=\"Could not send messages \" + tuples + \" to topic = \"+ topic;\n    LOG.warn(errorMsg,ex);\n    throw new FailedException(errorMsg,ex);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 200,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1783,
                        "startLineNumber": 75,
                        "startColumnNumber": 4,
                        "endLineNumber": 114,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "public void updateState(List<TridentTuple> tuples,TridentCollector collector){\n  String topic=null;\n  try {\n    List<Future<RecordMetadata>> futures=new ArrayList<>(tuples.size());\n    for (    TridentTuple tuple : tuples) {\n      topic=topicSelector.getTopic(tuple);\n      if (topic != null) {\n        Future<RecordMetadata> result=producer.send(new ProducerRecord(topic,mapper.getKeyFromTuple(tuple),mapper.getMessageFromTuple(tuple)));\n        futures.add(result);\n      }\n else {\n        LOG.warn(\"skipping key = \" + mapper.getKeyFromTuple(tuple) + \", topic selector returned null.\");\n      }\n    }\n    List<ExecutionException> exceptions=new ArrayList<>(futures.size());\n    for (    Future<RecordMetadata> future : futures) {\n      try {\n        future.get();\n      }\n catch (      ExecutionException e) {\n        exceptions.add(e);\n      }\n    }\n    if (exceptions.size() > 0) {\n      String errorMsg=\"Could not retrieve result for messages \" + tuples + \" from topic = \"+ topic+ \" because of the following exceptions: \\n\";\n      for (      ExecutionException exception : exceptions) {\n        errorMsg=errorMsg + exception.getMessage() + \"\\n\";\n      }\n      LOG.error(errorMsg);\n      throw new FailedException(errorMsg);\n    }\n  }\n catch (  Exception ex) {\n    String errorMsg=\"Could not send messages \" + tuples + \" to topic = \"+ topic;\n    LOG.warn(errorMsg,ex);\n    throw new FailedException(errorMsg,ex);\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 215,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 530,
                    "startLineNumber": 79,
                    "startColumnNumber": 12,
                    "endLineNumber": 89,
                    "endColumnNumber": 13
                },
                "nodeContext": "for (TridentTuple tuple : tuples) {\n  topic=topicSelector.getTopic(tuple);\n  if (topic != null) {\n    Future<RecordMetadata> result=producer.send(new ProducerRecord(topic,mapper.getKeyFromTuple(tuple),mapper.getMessageFromTuple(tuple)));\n    futures.add(result);\n  }\n else {\n    LOG.warn(\"skipping key = \" + mapper.getKeyFromTuple(tuple) + \", topic selector returned null.\");\n  }\n}\n",
                "nodeType": "EnhancedForStatement",
                "astNodeNumber": 59,
                "astHeight": 10
            },
            "tokenLength": 1,
            "type": "java.util.List<org.apache.storm.trident.tuple.TridentTuple>"
        },
        {
            "nodeContext": "tuples",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 6,
                "startLineNumber": 101,
                "startColumnNumber": 78,
                "endLineNumber": 101,
                "endColumnNumber": 84
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 147,
                        "startLineNumber": 101,
                        "startColumnNumber": 34,
                        "endLineNumber": 102,
                        "endColumnNumber": 68
                    },
                    "nodeContext": "\"Could not retrieve result for messages \" + tuples + \" from topic = \"+ topic+ \" because of the following exceptions: \\n\"",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 6,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 158,
                        "startLineNumber": 101,
                        "startColumnNumber": 23,
                        "endLineNumber": 102,
                        "endColumnNumber": 68
                    },
                    "nodeContext": "errorMsg=\"Could not retrieve result for messages \" + tuples + \" from topic = \"+ topic+ \" because of the following exceptions: \\n\"",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 8,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 166,
                        "startLineNumber": 101,
                        "startColumnNumber": 16,
                        "endLineNumber": 102,
                        "endColumnNumber": 69
                    },
                    "nodeContext": "String errorMsg=\"Could not retrieve result for messages \" + tuples + \" from topic = \"+ topic+ \" because of the following exceptions: \\n\";\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 445,
                        "startLineNumber": 100,
                        "startColumnNumber": 37,
                        "endLineNumber": 108,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  String errorMsg=\"Could not retrieve result for messages \" + tuples + \" from topic = \"+ topic+ \" because of the following exceptions: \\n\";\n  for (  ExecutionException exception : exceptions) {\n    errorMsg=errorMsg + exception.getMessage() + \"\\n\";\n  }\n  LOG.error(errorMsg);\n  throw new FailedException(errorMsg);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 38,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 470,
                        "startLineNumber": 100,
                        "startColumnNumber": 12,
                        "endLineNumber": 108,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (exceptions.size() > 0) {\n  String errorMsg=\"Could not retrieve result for messages \" + tuples + \" from topic = \"+ topic+ \" because of the following exceptions: \\n\";\n  for (  ExecutionException exception : exceptions) {\n    errorMsg=errorMsg + exception.getMessage() + \"\\n\";\n  }\n  LOG.error(errorMsg);\n  throw new FailedException(errorMsg);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 44,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 1441,
                        "startLineNumber": 77,
                        "startColumnNumber": 12,
                        "endLineNumber": 109,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  List<Future<RecordMetadata>> futures=new ArrayList<>(tuples.size());\n  for (  TridentTuple tuple : tuples) {\n    topic=topicSelector.getTopic(tuple);\n    if (topic != null) {\n      Future<RecordMetadata> result=producer.send(new ProducerRecord(topic,mapper.getKeyFromTuple(tuple),mapper.getMessageFromTuple(tuple)));\n      futures.add(result);\n    }\n else {\n      LOG.warn(\"skipping key = \" + mapper.getKeyFromTuple(tuple) + \", topic selector returned null.\");\n    }\n  }\n  List<ExecutionException> exceptions=new ArrayList<>(futures.size());\n  for (  Future<RecordMetadata> future : futures) {\n    try {\n      future.get();\n    }\n catch (    ExecutionException e) {\n      exceptions.add(e);\n    }\n  }\n  if (exceptions.size() > 0) {\n    String errorMsg=\"Could not retrieve result for messages \" + tuples + \" from topic = \"+ topic+ \" because of the following exceptions: \\n\";\n    for (    ExecutionException exception : exceptions) {\n      errorMsg=errorMsg + exception.getMessage() + \"\\n\";\n    }\n    LOG.error(errorMsg);\n    throw new FailedException(errorMsg);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 164,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1659,
                        "startLineNumber": 77,
                        "startColumnNumber": 8,
                        "endLineNumber": 113,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  List<Future<RecordMetadata>> futures=new ArrayList<>(tuples.size());\n  for (  TridentTuple tuple : tuples) {\n    topic=topicSelector.getTopic(tuple);\n    if (topic != null) {\n      Future<RecordMetadata> result=producer.send(new ProducerRecord(topic,mapper.getKeyFromTuple(tuple),mapper.getMessageFromTuple(tuple)));\n      futures.add(result);\n    }\n else {\n      LOG.warn(\"skipping key = \" + mapper.getKeyFromTuple(tuple) + \", topic selector returned null.\");\n    }\n  }\n  List<ExecutionException> exceptions=new ArrayList<>(futures.size());\n  for (  Future<RecordMetadata> future : futures) {\n    try {\n      future.get();\n    }\n catch (    ExecutionException e) {\n      exceptions.add(e);\n    }\n  }\n  if (exceptions.size() > 0) {\n    String errorMsg=\"Could not retrieve result for messages \" + tuples + \" from topic = \"+ topic+ \" because of the following exceptions: \\n\";\n    for (    ExecutionException exception : exceptions) {\n      errorMsg=errorMsg + exception.getMessage() + \"\\n\";\n    }\n    LOG.error(errorMsg);\n    throw new FailedException(errorMsg);\n  }\n}\n catch (Exception ex) {\n  String errorMsg=\"Could not send messages \" + tuples + \" to topic = \"+ topic;\n  LOG.warn(errorMsg,ex);\n  throw new FailedException(errorMsg,ex);\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 193,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1704,
                        "startLineNumber": 75,
                        "startColumnNumber": 83,
                        "endLineNumber": 114,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  String topic=null;\n  try {\n    List<Future<RecordMetadata>> futures=new ArrayList<>(tuples.size());\n    for (    TridentTuple tuple : tuples) {\n      topic=topicSelector.getTopic(tuple);\n      if (topic != null) {\n        Future<RecordMetadata> result=producer.send(new ProducerRecord(topic,mapper.getKeyFromTuple(tuple),mapper.getMessageFromTuple(tuple)));\n        futures.add(result);\n      }\n else {\n        LOG.warn(\"skipping key = \" + mapper.getKeyFromTuple(tuple) + \", topic selector returned null.\");\n      }\n    }\n    List<ExecutionException> exceptions=new ArrayList<>(futures.size());\n    for (    Future<RecordMetadata> future : futures) {\n      try {\n        future.get();\n      }\n catch (      ExecutionException e) {\n        exceptions.add(e);\n      }\n    }\n    if (exceptions.size() > 0) {\n      String errorMsg=\"Could not retrieve result for messages \" + tuples + \" from topic = \"+ topic+ \" because of the following exceptions: \\n\";\n      for (      ExecutionException exception : exceptions) {\n        errorMsg=errorMsg + exception.getMessage() + \"\\n\";\n      }\n      LOG.error(errorMsg);\n      throw new FailedException(errorMsg);\n    }\n  }\n catch (  Exception ex) {\n    String errorMsg=\"Could not send messages \" + tuples + \" to topic = \"+ topic;\n    LOG.warn(errorMsg,ex);\n    throw new FailedException(errorMsg,ex);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 200,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1783,
                        "startLineNumber": 75,
                        "startColumnNumber": 4,
                        "endLineNumber": 114,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "public void updateState(List<TridentTuple> tuples,TridentCollector collector){\n  String topic=null;\n  try {\n    List<Future<RecordMetadata>> futures=new ArrayList<>(tuples.size());\n    for (    TridentTuple tuple : tuples) {\n      topic=topicSelector.getTopic(tuple);\n      if (topic != null) {\n        Future<RecordMetadata> result=producer.send(new ProducerRecord(topic,mapper.getKeyFromTuple(tuple),mapper.getMessageFromTuple(tuple)));\n        futures.add(result);\n      }\n else {\n        LOG.warn(\"skipping key = \" + mapper.getKeyFromTuple(tuple) + \", topic selector returned null.\");\n      }\n    }\n    List<ExecutionException> exceptions=new ArrayList<>(futures.size());\n    for (    Future<RecordMetadata> future : futures) {\n      try {\n        future.get();\n      }\n catch (      ExecutionException e) {\n        exceptions.add(e);\n      }\n    }\n    if (exceptions.size() > 0) {\n      String errorMsg=\"Could not retrieve result for messages \" + tuples + \" from topic = \"+ topic+ \" because of the following exceptions: \\n\";\n      for (      ExecutionException exception : exceptions) {\n        errorMsg=errorMsg + exception.getMessage() + \"\\n\";\n      }\n      LOG.error(errorMsg);\n      throw new FailedException(errorMsg);\n    }\n  }\n catch (  Exception ex) {\n    String errorMsg=\"Could not send messages \" + tuples + \" to topic = \"+ topic;\n    LOG.warn(errorMsg,ex);\n    throw new FailedException(errorMsg,ex);\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 215,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                "nodePosition": {
                    "charLength": 147,
                    "startLineNumber": 101,
                    "startColumnNumber": 34,
                    "endLineNumber": 102,
                    "endColumnNumber": 68
                },
                "nodeContext": "\"Could not retrieve result for messages \" + tuples + \" from topic = \"+ topic+ \" because of the following exceptions: \\n\"",
                "nodeType": "InfixExpression",
                "astNodeNumber": 6,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "java.util.List<org.apache.storm.trident.tuple.TridentTuple>"
        },
        {
            "nodeContext": "tuples",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 6,
                "startLineNumber": 110,
                "startColumnNumber": 59,
                "endLineNumber": 110,
                "endColumnNumber": 65
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 60,
                        "startLineNumber": 110,
                        "startColumnNumber": 30,
                        "endLineNumber": 110,
                        "endColumnNumber": 90
                    },
                    "nodeContext": "\"Could not send messages \" + tuples + \" to topic = \"+ topic",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 71,
                        "startLineNumber": 110,
                        "startColumnNumber": 19,
                        "endLineNumber": 110,
                        "endColumnNumber": 90
                    },
                    "nodeContext": "errorMsg=\"Could not send messages \" + tuples + \" to topic = \"+ topic",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 79,
                        "startLineNumber": 110,
                        "startColumnNumber": 12,
                        "endLineNumber": 110,
                        "endColumnNumber": 91
                    },
                    "nodeContext": "String errorMsg=\"Could not send messages \" + tuples + \" to topic = \"+ topic;\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 10,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
                    "nodePosition": {
                        "charLength": 192,
                        "startLineNumber": 109,
                        "startColumnNumber": 31,
                        "endLineNumber": 113,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  String errorMsg=\"Could not send messages \" + tuples + \" to topic = \"+ topic;\n  LOG.warn(errorMsg,ex);\n  throw new FailedException(errorMsg,ex);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 23,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
                    "nodePosition": {
                        "charLength": 213,
                        "startLineNumber": 109,
                        "startColumnNumber": 10,
                        "endLineNumber": 113,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "catch (Exception ex) {\n  String errorMsg=\"Could not send messages \" + tuples + \" to topic = \"+ topic;\n  LOG.warn(errorMsg,ex);\n  throw new FailedException(errorMsg,ex);\n}\n",
                    "nodeType": "CatchClause",
                    "astNodeNumber": 28,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1659,
                        "startLineNumber": 77,
                        "startColumnNumber": 8,
                        "endLineNumber": 113,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  List<Future<RecordMetadata>> futures=new ArrayList<>(tuples.size());\n  for (  TridentTuple tuple : tuples) {\n    topic=topicSelector.getTopic(tuple);\n    if (topic != null) {\n      Future<RecordMetadata> result=producer.send(new ProducerRecord(topic,mapper.getKeyFromTuple(tuple),mapper.getMessageFromTuple(tuple)));\n      futures.add(result);\n    }\n else {\n      LOG.warn(\"skipping key = \" + mapper.getKeyFromTuple(tuple) + \", topic selector returned null.\");\n    }\n  }\n  List<ExecutionException> exceptions=new ArrayList<>(futures.size());\n  for (  Future<RecordMetadata> future : futures) {\n    try {\n      future.get();\n    }\n catch (    ExecutionException e) {\n      exceptions.add(e);\n    }\n  }\n  if (exceptions.size() > 0) {\n    String errorMsg=\"Could not retrieve result for messages \" + tuples + \" from topic = \"+ topic+ \" because of the following exceptions: \\n\";\n    for (    ExecutionException exception : exceptions) {\n      errorMsg=errorMsg + exception.getMessage() + \"\\n\";\n    }\n    LOG.error(errorMsg);\n    throw new FailedException(errorMsg);\n  }\n}\n catch (Exception ex) {\n  String errorMsg=\"Could not send messages \" + tuples + \" to topic = \"+ topic;\n  LOG.warn(errorMsg,ex);\n  throw new FailedException(errorMsg,ex);\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 193,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1704,
                        "startLineNumber": 75,
                        "startColumnNumber": 83,
                        "endLineNumber": 114,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  String topic=null;\n  try {\n    List<Future<RecordMetadata>> futures=new ArrayList<>(tuples.size());\n    for (    TridentTuple tuple : tuples) {\n      topic=topicSelector.getTopic(tuple);\n      if (topic != null) {\n        Future<RecordMetadata> result=producer.send(new ProducerRecord(topic,mapper.getKeyFromTuple(tuple),mapper.getMessageFromTuple(tuple)));\n        futures.add(result);\n      }\n else {\n        LOG.warn(\"skipping key = \" + mapper.getKeyFromTuple(tuple) + \", topic selector returned null.\");\n      }\n    }\n    List<ExecutionException> exceptions=new ArrayList<>(futures.size());\n    for (    Future<RecordMetadata> future : futures) {\n      try {\n        future.get();\n      }\n catch (      ExecutionException e) {\n        exceptions.add(e);\n      }\n    }\n    if (exceptions.size() > 0) {\n      String errorMsg=\"Could not retrieve result for messages \" + tuples + \" from topic = \"+ topic+ \" because of the following exceptions: \\n\";\n      for (      ExecutionException exception : exceptions) {\n        errorMsg=errorMsg + exception.getMessage() + \"\\n\";\n      }\n      LOG.error(errorMsg);\n      throw new FailedException(errorMsg);\n    }\n  }\n catch (  Exception ex) {\n    String errorMsg=\"Could not send messages \" + tuples + \" to topic = \"+ topic;\n    LOG.warn(errorMsg,ex);\n    throw new FailedException(errorMsg,ex);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 200,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1783,
                        "startLineNumber": 75,
                        "startColumnNumber": 4,
                        "endLineNumber": 114,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "public void updateState(List<TridentTuple> tuples,TridentCollector collector){\n  String topic=null;\n  try {\n    List<Future<RecordMetadata>> futures=new ArrayList<>(tuples.size());\n    for (    TridentTuple tuple : tuples) {\n      topic=topicSelector.getTopic(tuple);\n      if (topic != null) {\n        Future<RecordMetadata> result=producer.send(new ProducerRecord(topic,mapper.getKeyFromTuple(tuple),mapper.getMessageFromTuple(tuple)));\n        futures.add(result);\n      }\n else {\n        LOG.warn(\"skipping key = \" + mapper.getKeyFromTuple(tuple) + \", topic selector returned null.\");\n      }\n    }\n    List<ExecutionException> exceptions=new ArrayList<>(futures.size());\n    for (    Future<RecordMetadata> future : futures) {\n      try {\n        future.get();\n      }\n catch (      ExecutionException e) {\n        exceptions.add(e);\n      }\n    }\n    if (exceptions.size() > 0) {\n      String errorMsg=\"Could not retrieve result for messages \" + tuples + \" from topic = \"+ topic+ \" because of the following exceptions: \\n\";\n      for (      ExecutionException exception : exceptions) {\n        errorMsg=errorMsg + exception.getMessage() + \"\\n\";\n      }\n      LOG.error(errorMsg);\n      throw new FailedException(errorMsg);\n    }\n  }\n catch (  Exception ex) {\n    String errorMsg=\"Could not send messages \" + tuples + \" to topic = \"+ topic;\n    LOG.warn(errorMsg,ex);\n    throw new FailedException(errorMsg,ex);\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 215,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 79,
                    "startLineNumber": 110,
                    "startColumnNumber": 12,
                    "endLineNumber": 110,
                    "endColumnNumber": 91
                },
                "nodeContext": "String errorMsg=\"Could not send messages \" + tuples + \" to topic = \"+ topic;\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 10,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "java.util.List<org.apache.storm.trident.tuple.TridentTuple>"
        }
    ],
    "positionList": [
        {
            "charLength": 6,
            "startLineNumber": 78,
            "startColumnNumber": 67,
            "endLineNumber": 78,
            "endColumnNumber": 73
        },
        {
            "charLength": 6,
            "startLineNumber": 79,
            "startColumnNumber": 38,
            "endLineNumber": 79,
            "endColumnNumber": 44
        },
        {
            "charLength": 6,
            "startLineNumber": 101,
            "startColumnNumber": 78,
            "endLineNumber": 101,
            "endColumnNumber": 84
        },
        {
            "charLength": 6,
            "startLineNumber": 110,
            "startColumnNumber": 59,
            "endLineNumber": 110,
            "endColumnNumber": 65
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 1
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 1
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 5
        }
    ]
}