{
    "id": 20,
    "expression": "pq",
    "projectName": "storm",
    "commitID": "674a7cb4a1bae26b30a87b0d3d5204c48cd13ebe",
    "filePath": "storm-webapp/src/main/java/org/apache/storm/daemon/logviewer/utils/DirectoryCleaner.java",
    "occurrences": 8,
    "isArithmeticExpression": 0,
    "isGetTypeMethod": 0,
    "expressionList": [
        {
            "nodeContext": "pq",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 117,
                "startColumnNumber": 28,
                "endLineNumber": 117,
                "endColumnNumber": 30
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 9,
                        "startLineNumber": 117,
                        "startColumnNumber": 28,
                        "endLineNumber": 117,
                        "endColumnNumber": 37
                    },
                    "nodeContext": "pq.size()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 19,
                        "startLineNumber": 117,
                        "startColumnNumber": 28,
                        "endLineNumber": 117,
                        "endColumnNumber": 47
                    },
                    "nodeContext": "pq.size() < PQ_SIZE",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 339,
                        "startLineNumber": 117,
                        "startColumnNumber": 24,
                        "endLineNumber": 124,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "if (pq.size() < PQ_SIZE) {\n  pq.offer(file);\n}\n else {\n  if (file.lastModified() < pq.peek().lastModified()) {\n    pq.poll();\n    pq.offer(file);\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 33,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 600,
                        "startLineNumber": 112,
                        "startColumnNumber": 45,
                        "endLineNumber": 125,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  File file=path.toFile();\n  if (isFileEligibleToSkipDelete(forPerDir,activeDirs,dir,file)) {\n    continue;\n  }\n  if (pq.size() < PQ_SIZE) {\n    pq.offer(file);\n  }\n else {\n    if (file.lastModified() < pq.peek().lastModified()) {\n      pq.poll();\n      pq.offer(file);\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 51,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 625,
                        "startLineNumber": 112,
                        "startColumnNumber": 20,
                        "endLineNumber": 125,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "for (Path path : stream) {\n  File file=path.toFile();\n  if (isFileEligibleToSkipDelete(forPerDir,activeDirs,dir,file)) {\n    continue;\n  }\n  if (pq.size() < PQ_SIZE) {\n    pq.offer(file);\n  }\n else {\n    if (file.lastModified() < pq.peek().lastModified()) {\n      pq.poll();\n      pq.offer(file);\n    }\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 57,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 667,
                        "startLineNumber": 111,
                        "startColumnNumber": 80,
                        "endLineNumber": 126,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  for (  Path path : stream) {\n    File file=path.toFile();\n    if (isFileEligibleToSkipDelete(forPerDir,activeDirs,dir,file)) {\n      continue;\n    }\n    if (pq.size() < PQ_SIZE) {\n      pq.offer(file);\n    }\n else {\n      if (file.lastModified() < pq.peek().lastModified()) {\n        pq.poll();\n        pq.offer(file);\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 58,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 731,
                        "startLineNumber": 111,
                        "startColumnNumber": 16,
                        "endLineNumber": 126,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){\n  for (  Path path : stream) {\n    File file=path.toFile();\n    if (isFileEligibleToSkipDelete(forPerDir,activeDirs,dir,file)) {\n      continue;\n    }\n    if (pq.size() < PQ_SIZE) {\n      pq.offer(file);\n    }\n else {\n      if (file.lastModified() < pq.peek().lastModified()) {\n        pq.poll();\n        pq.offer(file);\n      }\n    }\n  }\n}\n ",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 70,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 765,
                        "startLineNumber": 110,
                        "startColumnNumber": 34,
                        "endLineNumber": 127,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){\n    for (    Path path : stream) {\n      File file=path.toFile();\n      if (isFileEligibleToSkipDelete(forPerDir,activeDirs,dir,file)) {\n        continue;\n      }\n      if (pq.size() < PQ_SIZE) {\n        pq.offer(file);\n      }\n else {\n        if (file.lastModified() < pq.peek().lastModified()) {\n          pq.poll();\n          pq.offer(file);\n        }\n      }\n    }\n  }\n }\n",
                    "nodeType": "Block",
                    "astNodeNumber": 71,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 787,
                        "startLineNumber": 110,
                        "startColumnNumber": 12,
                        "endLineNumber": 127,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (File dir : dirs) {\n  try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){\n    for (    Path path : stream) {\n      File file=path.toFile();\n      if (isFileEligibleToSkipDelete(forPerDir,activeDirs,dir,file)) {\n        continue;\n      }\n      if (pq.size() < PQ_SIZE) {\n        pq.offer(file);\n      }\n else {\n        if (file.lastModified() < pq.peek().lastModified()) {\n          pq.poll();\n          pq.offer(file);\n        }\n      }\n    }\n  }\n }\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 77,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2274,
                        "startLineNumber": 108,
                        "startColumnNumber": 33,
                        "endLineNumber": 154,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  LOG.debug(\"To delete size is {}, start a new round of deletion, round: {}\",toDeleteSize,round);\n  for (  File dir : dirs) {\n    try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){\n      for (      Path path : stream) {\n        File file=path.toFile();\n        if (isFileEligibleToSkipDelete(forPerDir,activeDirs,dir,file)) {\n          continue;\n        }\n        if (pq.size() < PQ_SIZE) {\n          pq.offer(file);\n        }\n else {\n          if (file.lastModified() < pq.peek().lastModified()) {\n            pq.poll();\n            pq.offer(file);\n          }\n        }\n      }\n    }\n   }\n  Stack<File> stack=new Stack<File>();\n  while (!pq.isEmpty()) {\n    File file=pq.poll();\n    stack.push(file);\n  }\n  while (!stack.isEmpty() && toDeleteSize > 0) {\n    File file=stack.pop();\n    toDeleteSize-=file.length();\n    LOG.info(\"Delete file: {}, size: {}, lastModified: {}\",file.getCanonicalPath(),file.length(),file.lastModified());\n    file.delete();\n    deletedFiles++;\n  }\n  pq.clear();\n  round++;\n  if (round >= MAX_ROUNDS) {\n    if (forPerDir) {\n      LOG.warn(\"Reach the MAX_ROUNDS: {} during per-dir deletion, you may have too many files in \" + \"a single directory : {}, will delete the rest files in next interval.\",MAX_ROUNDS,dirs.get(0).getCanonicalPath());\n    }\n else {\n      LOG.warn(\"Reach the MAX_ROUNDS: {} during global deletion, you may have too many files, \" + \"will delete the rest files in next interval.\",MAX_ROUNDS);\n    }\n    break;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 202,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2299,
                        "startLineNumber": 108,
                        "startColumnNumber": 8,
                        "endLineNumber": 154,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (toDeleteSize > 0) {\n  LOG.debug(\"To delete size is {}, start a new round of deletion, round: {}\",toDeleteSize,round);\n  for (  File dir : dirs) {\n    try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){\n      for (      Path path : stream) {\n        File file=path.toFile();\n        if (isFileEligibleToSkipDelete(forPerDir,activeDirs,dir,file)) {\n          continue;\n        }\n        if (pq.size() < PQ_SIZE) {\n          pq.offer(file);\n        }\n else {\n          if (file.lastModified() < pq.peek().lastModified()) {\n            pq.poll();\n            pq.offer(file);\n          }\n        }\n      }\n    }\n   }\n  Stack<File> stack=new Stack<File>();\n  while (!pq.isEmpty()) {\n    File file=pq.poll();\n    stack.push(file);\n  }\n  while (!stack.isEmpty() && toDeleteSize > 0) {\n    File file=stack.pop();\n    toDeleteSize-=file.length();\n    LOG.info(\"Delete file: {}, size: {}, lastModified: {}\",file.getCanonicalPath(),file.length(),file.lastModified());\n    file.delete();\n    deletedFiles++;\n  }\n  pq.clear();\n  round++;\n  if (round >= MAX_ROUNDS) {\n    if (forPerDir) {\n      LOG.warn(\"Reach the MAX_ROUNDS: {} during per-dir deletion, you may have too many files in \" + \"a single directory : {}, will delete the rest files in next interval.\",MAX_ROUNDS,dirs.get(0).getCanonicalPath());\n    }\n else {\n      LOG.warn(\"Reach the MAX_ROUNDS: {} during global deletion, you may have too many files, \" + \"will delete the rest files in next interval.\",MAX_ROUNDS);\n    }\n    break;\n  }\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 206,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3425,
                        "startLineNumber": 77,
                        "startColumnNumber": 98,
                        "endLineNumber": 156,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  long totalSize=0;\n  int deletedFiles=0;\n  for (  File dir : dirs) {\n    try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){\n      for (      Path path : stream) {\n        File file=path.toFile();\n        totalSize+=file.length();\n      }\n    }\n   }\n  LOG.debug(\"totalSize: {} quota: {}\",totalSize,quota);\n  long toDeleteSize=totalSize - quota;\n  if (toDeleteSize <= 0) {\n    return deletedFiles;\n  }\n  Comparator<File> comparator=new Comparator<File>(){\n    public int compare(    File f1,    File f2){\n      if (f1.lastModified() > f2.lastModified()) {\n        return -1;\n      }\n else {\n        return 1;\n      }\n    }\n  }\n;\n  PriorityQueue<File> pq=new PriorityQueue<File>(PQ_SIZE,comparator);\n  int round=0;\n  while (toDeleteSize > 0) {\n    LOG.debug(\"To delete size is {}, start a new round of deletion, round: {}\",toDeleteSize,round);\n    for (    File dir : dirs) {\n      try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){\n        for (        Path path : stream) {\n          File file=path.toFile();\n          if (isFileEligibleToSkipDelete(forPerDir,activeDirs,dir,file)) {\n            continue;\n          }\n          if (pq.size() < PQ_SIZE) {\n            pq.offer(file);\n          }\n else {\n            if (file.lastModified() < pq.peek().lastModified()) {\n              pq.poll();\n              pq.offer(file);\n            }\n          }\n        }\n      }\n     }\n    Stack<File> stack=new Stack<File>();\n    while (!pq.isEmpty()) {\n      File file=pq.poll();\n      stack.push(file);\n    }\n    while (!stack.isEmpty() && toDeleteSize > 0) {\n      File file=stack.pop();\n      toDeleteSize-=file.length();\n      LOG.info(\"Delete file: {}, size: {}, lastModified: {}\",file.getCanonicalPath(),file.length(),file.lastModified());\n      file.delete();\n      deletedFiles++;\n    }\n    pq.clear();\n    round++;\n    if (round >= MAX_ROUNDS) {\n      if (forPerDir) {\n        LOG.warn(\"Reach the MAX_ROUNDS: {} during per-dir deletion, you may have too many files in \" + \"a single directory : {}, will delete the rest files in next interval.\",MAX_ROUNDS,dirs.get(0).getCanonicalPath());\n      }\n else {\n        LOG.warn(\"Reach the MAX_ROUNDS: {} during global deletion, you may have too many files, \" + \"will delete the rest files in next interval.\",MAX_ROUNDS);\n      }\n      break;\n    }\n  }\n  return deletedFiles;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 345,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4269,
                        "startLineNumber": 65,
                        "startColumnNumber": 4,
                        "endLineNumber": 156,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * If totalSize of files exceeds the either the per-worker quota or global quota, Logviewer deletes oldest inactive log files in a worker directory or in all worker dirs. We use the parameter forPerDir to switch between the two deletion modes.\n * @param dirs the list of directories to be scanned for deletion\n * @param quota the per-dir quota or the total quota for the all directories\n * @param forPerDir if true, deletion happens for a single dir; otherwise, for all directories globally\n * @param activeDirs only for global deletion, we want to skip the active logs in activeDirs\n * @return number of files deleted\n */\npublic int deleteOldestWhileTooLarge(List<File> dirs,long quota,boolean forPerDir,Set<String> activeDirs) throws IOException {\n  long totalSize=0;\n  int deletedFiles=0;\n  for (  File dir : dirs) {\n    try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){\n      for (      Path path : stream) {\n        File file=path.toFile();\n        totalSize+=file.length();\n      }\n    }\n   }\n  LOG.debug(\"totalSize: {} quota: {}\",totalSize,quota);\n  long toDeleteSize=totalSize - quota;\n  if (toDeleteSize <= 0) {\n    return deletedFiles;\n  }\n  Comparator<File> comparator=new Comparator<File>(){\n    public int compare(    File f1,    File f2){\n      if (f1.lastModified() > f2.lastModified()) {\n        return -1;\n      }\n else {\n        return 1;\n      }\n    }\n  }\n;\n  PriorityQueue<File> pq=new PriorityQueue<File>(PQ_SIZE,comparator);\n  int round=0;\n  while (toDeleteSize > 0) {\n    LOG.debug(\"To delete size is {}, start a new round of deletion, round: {}\",toDeleteSize,round);\n    for (    File dir : dirs) {\n      try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){\n        for (        Path path : stream) {\n          File file=path.toFile();\n          if (isFileEligibleToSkipDelete(forPerDir,activeDirs,dir,file)) {\n            continue;\n          }\n          if (pq.size() < PQ_SIZE) {\n            pq.offer(file);\n          }\n else {\n            if (file.lastModified() < pq.peek().lastModified()) {\n              pq.poll();\n              pq.offer(file);\n            }\n          }\n        }\n      }\n     }\n    Stack<File> stack=new Stack<File>();\n    while (!pq.isEmpty()) {\n      File file=pq.poll();\n      stack.push(file);\n    }\n    while (!stack.isEmpty() && toDeleteSize > 0) {\n      File file=stack.pop();\n      toDeleteSize-=file.length();\n      LOG.info(\"Delete file: {}, size: {}, lastModified: {}\",file.getCanonicalPath(),file.length(),file.lastModified());\n      file.delete();\n      deletedFiles++;\n    }\n    pq.clear();\n    round++;\n    if (round >= MAX_ROUNDS) {\n      if (forPerDir) {\n        LOG.warn(\"Reach the MAX_ROUNDS: {} during per-dir deletion, you may have too many files in \" + \"a single directory : {}, will delete the rest files in next interval.\",MAX_ROUNDS,dirs.get(0).getCanonicalPath());\n      }\n else {\n        LOG.warn(\"Reach the MAX_ROUNDS: {} during global deletion, you may have too many files, \" + \"will delete the rest files in next interval.\",MAX_ROUNDS);\n      }\n      break;\n    }\n  }\n  return deletedFiles;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 372,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 19,
                    "startLineNumber": 117,
                    "startColumnNumber": 28,
                    "endLineNumber": 117,
                    "endColumnNumber": 47
                },
                "nodeContext": "pq.size() < PQ_SIZE",
                "nodeType": "InfixExpression",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.util.PriorityQueue<java.io.File>"
        },
        {
            "nodeContext": "pq",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 118,
                "startColumnNumber": 28,
                "endLineNumber": 118,
                "endColumnNumber": 30
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 14,
                        "startLineNumber": 118,
                        "startColumnNumber": 28,
                        "endLineNumber": 118,
                        "endColumnNumber": 42
                    },
                    "nodeContext": "pq.offer(file)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 15,
                        "startLineNumber": 118,
                        "startColumnNumber": 28,
                        "endLineNumber": 118,
                        "endColumnNumber": 43
                    },
                    "nodeContext": "pq.offer(file);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 73,
                        "startLineNumber": 117,
                        "startColumnNumber": 49,
                        "endLineNumber": 119,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "{\n  pq.offer(file);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 6,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 339,
                        "startLineNumber": 117,
                        "startColumnNumber": 24,
                        "endLineNumber": 124,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "if (pq.size() < PQ_SIZE) {\n  pq.offer(file);\n}\n else {\n  if (file.lastModified() < pq.peek().lastModified()) {\n    pq.poll();\n    pq.offer(file);\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 33,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 600,
                        "startLineNumber": 112,
                        "startColumnNumber": 45,
                        "endLineNumber": 125,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  File file=path.toFile();\n  if (isFileEligibleToSkipDelete(forPerDir,activeDirs,dir,file)) {\n    continue;\n  }\n  if (pq.size() < PQ_SIZE) {\n    pq.offer(file);\n  }\n else {\n    if (file.lastModified() < pq.peek().lastModified()) {\n      pq.poll();\n      pq.offer(file);\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 51,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 625,
                        "startLineNumber": 112,
                        "startColumnNumber": 20,
                        "endLineNumber": 125,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "for (Path path : stream) {\n  File file=path.toFile();\n  if (isFileEligibleToSkipDelete(forPerDir,activeDirs,dir,file)) {\n    continue;\n  }\n  if (pq.size() < PQ_SIZE) {\n    pq.offer(file);\n  }\n else {\n    if (file.lastModified() < pq.peek().lastModified()) {\n      pq.poll();\n      pq.offer(file);\n    }\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 57,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 667,
                        "startLineNumber": 111,
                        "startColumnNumber": 80,
                        "endLineNumber": 126,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  for (  Path path : stream) {\n    File file=path.toFile();\n    if (isFileEligibleToSkipDelete(forPerDir,activeDirs,dir,file)) {\n      continue;\n    }\n    if (pq.size() < PQ_SIZE) {\n      pq.offer(file);\n    }\n else {\n      if (file.lastModified() < pq.peek().lastModified()) {\n        pq.poll();\n        pq.offer(file);\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 58,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 731,
                        "startLineNumber": 111,
                        "startColumnNumber": 16,
                        "endLineNumber": 126,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){\n  for (  Path path : stream) {\n    File file=path.toFile();\n    if (isFileEligibleToSkipDelete(forPerDir,activeDirs,dir,file)) {\n      continue;\n    }\n    if (pq.size() < PQ_SIZE) {\n      pq.offer(file);\n    }\n else {\n      if (file.lastModified() < pq.peek().lastModified()) {\n        pq.poll();\n        pq.offer(file);\n      }\n    }\n  }\n}\n ",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 70,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 765,
                        "startLineNumber": 110,
                        "startColumnNumber": 34,
                        "endLineNumber": 127,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){\n    for (    Path path : stream) {\n      File file=path.toFile();\n      if (isFileEligibleToSkipDelete(forPerDir,activeDirs,dir,file)) {\n        continue;\n      }\n      if (pq.size() < PQ_SIZE) {\n        pq.offer(file);\n      }\n else {\n        if (file.lastModified() < pq.peek().lastModified()) {\n          pq.poll();\n          pq.offer(file);\n        }\n      }\n    }\n  }\n }\n",
                    "nodeType": "Block",
                    "astNodeNumber": 71,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 787,
                        "startLineNumber": 110,
                        "startColumnNumber": 12,
                        "endLineNumber": 127,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (File dir : dirs) {\n  try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){\n    for (    Path path : stream) {\n      File file=path.toFile();\n      if (isFileEligibleToSkipDelete(forPerDir,activeDirs,dir,file)) {\n        continue;\n      }\n      if (pq.size() < PQ_SIZE) {\n        pq.offer(file);\n      }\n else {\n        if (file.lastModified() < pq.peek().lastModified()) {\n          pq.poll();\n          pq.offer(file);\n        }\n      }\n    }\n  }\n }\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 77,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2274,
                        "startLineNumber": 108,
                        "startColumnNumber": 33,
                        "endLineNumber": 154,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  LOG.debug(\"To delete size is {}, start a new round of deletion, round: {}\",toDeleteSize,round);\n  for (  File dir : dirs) {\n    try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){\n      for (      Path path : stream) {\n        File file=path.toFile();\n        if (isFileEligibleToSkipDelete(forPerDir,activeDirs,dir,file)) {\n          continue;\n        }\n        if (pq.size() < PQ_SIZE) {\n          pq.offer(file);\n        }\n else {\n          if (file.lastModified() < pq.peek().lastModified()) {\n            pq.poll();\n            pq.offer(file);\n          }\n        }\n      }\n    }\n   }\n  Stack<File> stack=new Stack<File>();\n  while (!pq.isEmpty()) {\n    File file=pq.poll();\n    stack.push(file);\n  }\n  while (!stack.isEmpty() && toDeleteSize > 0) {\n    File file=stack.pop();\n    toDeleteSize-=file.length();\n    LOG.info(\"Delete file: {}, size: {}, lastModified: {}\",file.getCanonicalPath(),file.length(),file.lastModified());\n    file.delete();\n    deletedFiles++;\n  }\n  pq.clear();\n  round++;\n  if (round >= MAX_ROUNDS) {\n    if (forPerDir) {\n      LOG.warn(\"Reach the MAX_ROUNDS: {} during per-dir deletion, you may have too many files in \" + \"a single directory : {}, will delete the rest files in next interval.\",MAX_ROUNDS,dirs.get(0).getCanonicalPath());\n    }\n else {\n      LOG.warn(\"Reach the MAX_ROUNDS: {} during global deletion, you may have too many files, \" + \"will delete the rest files in next interval.\",MAX_ROUNDS);\n    }\n    break;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 202,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2299,
                        "startLineNumber": 108,
                        "startColumnNumber": 8,
                        "endLineNumber": 154,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (toDeleteSize > 0) {\n  LOG.debug(\"To delete size is {}, start a new round of deletion, round: {}\",toDeleteSize,round);\n  for (  File dir : dirs) {\n    try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){\n      for (      Path path : stream) {\n        File file=path.toFile();\n        if (isFileEligibleToSkipDelete(forPerDir,activeDirs,dir,file)) {\n          continue;\n        }\n        if (pq.size() < PQ_SIZE) {\n          pq.offer(file);\n        }\n else {\n          if (file.lastModified() < pq.peek().lastModified()) {\n            pq.poll();\n            pq.offer(file);\n          }\n        }\n      }\n    }\n   }\n  Stack<File> stack=new Stack<File>();\n  while (!pq.isEmpty()) {\n    File file=pq.poll();\n    stack.push(file);\n  }\n  while (!stack.isEmpty() && toDeleteSize > 0) {\n    File file=stack.pop();\n    toDeleteSize-=file.length();\n    LOG.info(\"Delete file: {}, size: {}, lastModified: {}\",file.getCanonicalPath(),file.length(),file.lastModified());\n    file.delete();\n    deletedFiles++;\n  }\n  pq.clear();\n  round++;\n  if (round >= MAX_ROUNDS) {\n    if (forPerDir) {\n      LOG.warn(\"Reach the MAX_ROUNDS: {} during per-dir deletion, you may have too many files in \" + \"a single directory : {}, will delete the rest files in next interval.\",MAX_ROUNDS,dirs.get(0).getCanonicalPath());\n    }\n else {\n      LOG.warn(\"Reach the MAX_ROUNDS: {} during global deletion, you may have too many files, \" + \"will delete the rest files in next interval.\",MAX_ROUNDS);\n    }\n    break;\n  }\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 206,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3425,
                        "startLineNumber": 77,
                        "startColumnNumber": 98,
                        "endLineNumber": 156,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  long totalSize=0;\n  int deletedFiles=0;\n  for (  File dir : dirs) {\n    try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){\n      for (      Path path : stream) {\n        File file=path.toFile();\n        totalSize+=file.length();\n      }\n    }\n   }\n  LOG.debug(\"totalSize: {} quota: {}\",totalSize,quota);\n  long toDeleteSize=totalSize - quota;\n  if (toDeleteSize <= 0) {\n    return deletedFiles;\n  }\n  Comparator<File> comparator=new Comparator<File>(){\n    public int compare(    File f1,    File f2){\n      if (f1.lastModified() > f2.lastModified()) {\n        return -1;\n      }\n else {\n        return 1;\n      }\n    }\n  }\n;\n  PriorityQueue<File> pq=new PriorityQueue<File>(PQ_SIZE,comparator);\n  int round=0;\n  while (toDeleteSize > 0) {\n    LOG.debug(\"To delete size is {}, start a new round of deletion, round: {}\",toDeleteSize,round);\n    for (    File dir : dirs) {\n      try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){\n        for (        Path path : stream) {\n          File file=path.toFile();\n          if (isFileEligibleToSkipDelete(forPerDir,activeDirs,dir,file)) {\n            continue;\n          }\n          if (pq.size() < PQ_SIZE) {\n            pq.offer(file);\n          }\n else {\n            if (file.lastModified() < pq.peek().lastModified()) {\n              pq.poll();\n              pq.offer(file);\n            }\n          }\n        }\n      }\n     }\n    Stack<File> stack=new Stack<File>();\n    while (!pq.isEmpty()) {\n      File file=pq.poll();\n      stack.push(file);\n    }\n    while (!stack.isEmpty() && toDeleteSize > 0) {\n      File file=stack.pop();\n      toDeleteSize-=file.length();\n      LOG.info(\"Delete file: {}, size: {}, lastModified: {}\",file.getCanonicalPath(),file.length(),file.lastModified());\n      file.delete();\n      deletedFiles++;\n    }\n    pq.clear();\n    round++;\n    if (round >= MAX_ROUNDS) {\n      if (forPerDir) {\n        LOG.warn(\"Reach the MAX_ROUNDS: {} during per-dir deletion, you may have too many files in \" + \"a single directory : {}, will delete the rest files in next interval.\",MAX_ROUNDS,dirs.get(0).getCanonicalPath());\n      }\n else {\n        LOG.warn(\"Reach the MAX_ROUNDS: {} during global deletion, you may have too many files, \" + \"will delete the rest files in next interval.\",MAX_ROUNDS);\n      }\n      break;\n    }\n  }\n  return deletedFiles;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 345,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4269,
                        "startLineNumber": 65,
                        "startColumnNumber": 4,
                        "endLineNumber": 156,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * If totalSize of files exceeds the either the per-worker quota or global quota, Logviewer deletes oldest inactive log files in a worker directory or in all worker dirs. We use the parameter forPerDir to switch between the two deletion modes.\n * @param dirs the list of directories to be scanned for deletion\n * @param quota the per-dir quota or the total quota for the all directories\n * @param forPerDir if true, deletion happens for a single dir; otherwise, for all directories globally\n * @param activeDirs only for global deletion, we want to skip the active logs in activeDirs\n * @return number of files deleted\n */\npublic int deleteOldestWhileTooLarge(List<File> dirs,long quota,boolean forPerDir,Set<String> activeDirs) throws IOException {\n  long totalSize=0;\n  int deletedFiles=0;\n  for (  File dir : dirs) {\n    try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){\n      for (      Path path : stream) {\n        File file=path.toFile();\n        totalSize+=file.length();\n      }\n    }\n   }\n  LOG.debug(\"totalSize: {} quota: {}\",totalSize,quota);\n  long toDeleteSize=totalSize - quota;\n  if (toDeleteSize <= 0) {\n    return deletedFiles;\n  }\n  Comparator<File> comparator=new Comparator<File>(){\n    public int compare(    File f1,    File f2){\n      if (f1.lastModified() > f2.lastModified()) {\n        return -1;\n      }\n else {\n        return 1;\n      }\n    }\n  }\n;\n  PriorityQueue<File> pq=new PriorityQueue<File>(PQ_SIZE,comparator);\n  int round=0;\n  while (toDeleteSize > 0) {\n    LOG.debug(\"To delete size is {}, start a new round of deletion, round: {}\",toDeleteSize,round);\n    for (    File dir : dirs) {\n      try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){\n        for (        Path path : stream) {\n          File file=path.toFile();\n          if (isFileEligibleToSkipDelete(forPerDir,activeDirs,dir,file)) {\n            continue;\n          }\n          if (pq.size() < PQ_SIZE) {\n            pq.offer(file);\n          }\n else {\n            if (file.lastModified() < pq.peek().lastModified()) {\n              pq.poll();\n              pq.offer(file);\n            }\n          }\n        }\n      }\n     }\n    Stack<File> stack=new Stack<File>();\n    while (!pq.isEmpty()) {\n      File file=pq.poll();\n      stack.push(file);\n    }\n    while (!stack.isEmpty() && toDeleteSize > 0) {\n      File file=stack.pop();\n      toDeleteSize-=file.length();\n      LOG.info(\"Delete file: {}, size: {}, lastModified: {}\",file.getCanonicalPath(),file.length(),file.lastModified());\n      file.delete();\n      deletedFiles++;\n    }\n    pq.clear();\n    round++;\n    if (round >= MAX_ROUNDS) {\n      if (forPerDir) {\n        LOG.warn(\"Reach the MAX_ROUNDS: {} during per-dir deletion, you may have too many files in \" + \"a single directory : {}, will delete the rest files in next interval.\",MAX_ROUNDS,dirs.get(0).getCanonicalPath());\n      }\n else {\n        LOG.warn(\"Reach the MAX_ROUNDS: {} during global deletion, you may have too many files, \" + \"will delete the rest files in next interval.\",MAX_ROUNDS);\n      }\n      break;\n    }\n  }\n  return deletedFiles;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 372,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 15,
                    "startLineNumber": 118,
                    "startColumnNumber": 28,
                    "endLineNumber": 118,
                    "endColumnNumber": 43
                },
                "nodeContext": "pq.offer(file);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.util.PriorityQueue<java.io.File>"
        },
        {
            "nodeContext": "pq",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 120,
                "startColumnNumber": 54,
                "endLineNumber": 120,
                "endColumnNumber": 56
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 9,
                        "startLineNumber": 120,
                        "startColumnNumber": 54,
                        "endLineNumber": 120,
                        "endColumnNumber": 63
                    },
                    "nodeContext": "pq.peek()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 24,
                        "startLineNumber": 120,
                        "startColumnNumber": 54,
                        "endLineNumber": 120,
                        "endColumnNumber": 78
                    },
                    "nodeContext": "pq.peek().lastModified()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 46,
                        "startLineNumber": 120,
                        "startColumnNumber": 32,
                        "endLineNumber": 120,
                        "endColumnNumber": 78
                    },
                    "nodeContext": "file.lastModified() < pq.peek().lastModified()",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 177,
                        "startLineNumber": 120,
                        "startColumnNumber": 28,
                        "endLineNumber": 123,
                        "endColumnNumber": 29
                    },
                    "nodeContext": "if (file.lastModified() < pq.peek().lastModified()) {\n  pq.poll();\n  pq.offer(file);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 20,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 235,
                        "startLineNumber": 119,
                        "startColumnNumber": 31,
                        "endLineNumber": 124,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "{\n  if (file.lastModified() < pq.peek().lastModified()) {\n    pq.poll();\n    pq.offer(file);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 21,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 339,
                        "startLineNumber": 117,
                        "startColumnNumber": 24,
                        "endLineNumber": 124,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "if (pq.size() < PQ_SIZE) {\n  pq.offer(file);\n}\n else {\n  if (file.lastModified() < pq.peek().lastModified()) {\n    pq.poll();\n    pq.offer(file);\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 33,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 600,
                        "startLineNumber": 112,
                        "startColumnNumber": 45,
                        "endLineNumber": 125,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  File file=path.toFile();\n  if (isFileEligibleToSkipDelete(forPerDir,activeDirs,dir,file)) {\n    continue;\n  }\n  if (pq.size() < PQ_SIZE) {\n    pq.offer(file);\n  }\n else {\n    if (file.lastModified() < pq.peek().lastModified()) {\n      pq.poll();\n      pq.offer(file);\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 51,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 625,
                        "startLineNumber": 112,
                        "startColumnNumber": 20,
                        "endLineNumber": 125,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "for (Path path : stream) {\n  File file=path.toFile();\n  if (isFileEligibleToSkipDelete(forPerDir,activeDirs,dir,file)) {\n    continue;\n  }\n  if (pq.size() < PQ_SIZE) {\n    pq.offer(file);\n  }\n else {\n    if (file.lastModified() < pq.peek().lastModified()) {\n      pq.poll();\n      pq.offer(file);\n    }\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 57,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 667,
                        "startLineNumber": 111,
                        "startColumnNumber": 80,
                        "endLineNumber": 126,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  for (  Path path : stream) {\n    File file=path.toFile();\n    if (isFileEligibleToSkipDelete(forPerDir,activeDirs,dir,file)) {\n      continue;\n    }\n    if (pq.size() < PQ_SIZE) {\n      pq.offer(file);\n    }\n else {\n      if (file.lastModified() < pq.peek().lastModified()) {\n        pq.poll();\n        pq.offer(file);\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 58,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 731,
                        "startLineNumber": 111,
                        "startColumnNumber": 16,
                        "endLineNumber": 126,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){\n  for (  Path path : stream) {\n    File file=path.toFile();\n    if (isFileEligibleToSkipDelete(forPerDir,activeDirs,dir,file)) {\n      continue;\n    }\n    if (pq.size() < PQ_SIZE) {\n      pq.offer(file);\n    }\n else {\n      if (file.lastModified() < pq.peek().lastModified()) {\n        pq.poll();\n        pq.offer(file);\n      }\n    }\n  }\n}\n ",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 70,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 765,
                        "startLineNumber": 110,
                        "startColumnNumber": 34,
                        "endLineNumber": 127,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){\n    for (    Path path : stream) {\n      File file=path.toFile();\n      if (isFileEligibleToSkipDelete(forPerDir,activeDirs,dir,file)) {\n        continue;\n      }\n      if (pq.size() < PQ_SIZE) {\n        pq.offer(file);\n      }\n else {\n        if (file.lastModified() < pq.peek().lastModified()) {\n          pq.poll();\n          pq.offer(file);\n        }\n      }\n    }\n  }\n }\n",
                    "nodeType": "Block",
                    "astNodeNumber": 71,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 787,
                        "startLineNumber": 110,
                        "startColumnNumber": 12,
                        "endLineNumber": 127,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (File dir : dirs) {\n  try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){\n    for (    Path path : stream) {\n      File file=path.toFile();\n      if (isFileEligibleToSkipDelete(forPerDir,activeDirs,dir,file)) {\n        continue;\n      }\n      if (pq.size() < PQ_SIZE) {\n        pq.offer(file);\n      }\n else {\n        if (file.lastModified() < pq.peek().lastModified()) {\n          pq.poll();\n          pq.offer(file);\n        }\n      }\n    }\n  }\n }\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 77,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2274,
                        "startLineNumber": 108,
                        "startColumnNumber": 33,
                        "endLineNumber": 154,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  LOG.debug(\"To delete size is {}, start a new round of deletion, round: {}\",toDeleteSize,round);\n  for (  File dir : dirs) {\n    try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){\n      for (      Path path : stream) {\n        File file=path.toFile();\n        if (isFileEligibleToSkipDelete(forPerDir,activeDirs,dir,file)) {\n          continue;\n        }\n        if (pq.size() < PQ_SIZE) {\n          pq.offer(file);\n        }\n else {\n          if (file.lastModified() < pq.peek().lastModified()) {\n            pq.poll();\n            pq.offer(file);\n          }\n        }\n      }\n    }\n   }\n  Stack<File> stack=new Stack<File>();\n  while (!pq.isEmpty()) {\n    File file=pq.poll();\n    stack.push(file);\n  }\n  while (!stack.isEmpty() && toDeleteSize > 0) {\n    File file=stack.pop();\n    toDeleteSize-=file.length();\n    LOG.info(\"Delete file: {}, size: {}, lastModified: {}\",file.getCanonicalPath(),file.length(),file.lastModified());\n    file.delete();\n    deletedFiles++;\n  }\n  pq.clear();\n  round++;\n  if (round >= MAX_ROUNDS) {\n    if (forPerDir) {\n      LOG.warn(\"Reach the MAX_ROUNDS: {} during per-dir deletion, you may have too many files in \" + \"a single directory : {}, will delete the rest files in next interval.\",MAX_ROUNDS,dirs.get(0).getCanonicalPath());\n    }\n else {\n      LOG.warn(\"Reach the MAX_ROUNDS: {} during global deletion, you may have too many files, \" + \"will delete the rest files in next interval.\",MAX_ROUNDS);\n    }\n    break;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 202,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2299,
                        "startLineNumber": 108,
                        "startColumnNumber": 8,
                        "endLineNumber": 154,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (toDeleteSize > 0) {\n  LOG.debug(\"To delete size is {}, start a new round of deletion, round: {}\",toDeleteSize,round);\n  for (  File dir : dirs) {\n    try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){\n      for (      Path path : stream) {\n        File file=path.toFile();\n        if (isFileEligibleToSkipDelete(forPerDir,activeDirs,dir,file)) {\n          continue;\n        }\n        if (pq.size() < PQ_SIZE) {\n          pq.offer(file);\n        }\n else {\n          if (file.lastModified() < pq.peek().lastModified()) {\n            pq.poll();\n            pq.offer(file);\n          }\n        }\n      }\n    }\n   }\n  Stack<File> stack=new Stack<File>();\n  while (!pq.isEmpty()) {\n    File file=pq.poll();\n    stack.push(file);\n  }\n  while (!stack.isEmpty() && toDeleteSize > 0) {\n    File file=stack.pop();\n    toDeleteSize-=file.length();\n    LOG.info(\"Delete file: {}, size: {}, lastModified: {}\",file.getCanonicalPath(),file.length(),file.lastModified());\n    file.delete();\n    deletedFiles++;\n  }\n  pq.clear();\n  round++;\n  if (round >= MAX_ROUNDS) {\n    if (forPerDir) {\n      LOG.warn(\"Reach the MAX_ROUNDS: {} during per-dir deletion, you may have too many files in \" + \"a single directory : {}, will delete the rest files in next interval.\",MAX_ROUNDS,dirs.get(0).getCanonicalPath());\n    }\n else {\n      LOG.warn(\"Reach the MAX_ROUNDS: {} during global deletion, you may have too many files, \" + \"will delete the rest files in next interval.\",MAX_ROUNDS);\n    }\n    break;\n  }\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 206,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3425,
                        "startLineNumber": 77,
                        "startColumnNumber": 98,
                        "endLineNumber": 156,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  long totalSize=0;\n  int deletedFiles=0;\n  for (  File dir : dirs) {\n    try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){\n      for (      Path path : stream) {\n        File file=path.toFile();\n        totalSize+=file.length();\n      }\n    }\n   }\n  LOG.debug(\"totalSize: {} quota: {}\",totalSize,quota);\n  long toDeleteSize=totalSize - quota;\n  if (toDeleteSize <= 0) {\n    return deletedFiles;\n  }\n  Comparator<File> comparator=new Comparator<File>(){\n    public int compare(    File f1,    File f2){\n      if (f1.lastModified() > f2.lastModified()) {\n        return -1;\n      }\n else {\n        return 1;\n      }\n    }\n  }\n;\n  PriorityQueue<File> pq=new PriorityQueue<File>(PQ_SIZE,comparator);\n  int round=0;\n  while (toDeleteSize > 0) {\n    LOG.debug(\"To delete size is {}, start a new round of deletion, round: {}\",toDeleteSize,round);\n    for (    File dir : dirs) {\n      try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){\n        for (        Path path : stream) {\n          File file=path.toFile();\n          if (isFileEligibleToSkipDelete(forPerDir,activeDirs,dir,file)) {\n            continue;\n          }\n          if (pq.size() < PQ_SIZE) {\n            pq.offer(file);\n          }\n else {\n            if (file.lastModified() < pq.peek().lastModified()) {\n              pq.poll();\n              pq.offer(file);\n            }\n          }\n        }\n      }\n     }\n    Stack<File> stack=new Stack<File>();\n    while (!pq.isEmpty()) {\n      File file=pq.poll();\n      stack.push(file);\n    }\n    while (!stack.isEmpty() && toDeleteSize > 0) {\n      File file=stack.pop();\n      toDeleteSize-=file.length();\n      LOG.info(\"Delete file: {}, size: {}, lastModified: {}\",file.getCanonicalPath(),file.length(),file.lastModified());\n      file.delete();\n      deletedFiles++;\n    }\n    pq.clear();\n    round++;\n    if (round >= MAX_ROUNDS) {\n      if (forPerDir) {\n        LOG.warn(\"Reach the MAX_ROUNDS: {} during per-dir deletion, you may have too many files in \" + \"a single directory : {}, will delete the rest files in next interval.\",MAX_ROUNDS,dirs.get(0).getCanonicalPath());\n      }\n else {\n        LOG.warn(\"Reach the MAX_ROUNDS: {} during global deletion, you may have too many files, \" + \"will delete the rest files in next interval.\",MAX_ROUNDS);\n      }\n      break;\n    }\n  }\n  return deletedFiles;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 345,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4269,
                        "startLineNumber": 65,
                        "startColumnNumber": 4,
                        "endLineNumber": 156,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * If totalSize of files exceeds the either the per-worker quota or global quota, Logviewer deletes oldest inactive log files in a worker directory or in all worker dirs. We use the parameter forPerDir to switch between the two deletion modes.\n * @param dirs the list of directories to be scanned for deletion\n * @param quota the per-dir quota or the total quota for the all directories\n * @param forPerDir if true, deletion happens for a single dir; otherwise, for all directories globally\n * @param activeDirs only for global deletion, we want to skip the active logs in activeDirs\n * @return number of files deleted\n */\npublic int deleteOldestWhileTooLarge(List<File> dirs,long quota,boolean forPerDir,Set<String> activeDirs) throws IOException {\n  long totalSize=0;\n  int deletedFiles=0;\n  for (  File dir : dirs) {\n    try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){\n      for (      Path path : stream) {\n        File file=path.toFile();\n        totalSize+=file.length();\n      }\n    }\n   }\n  LOG.debug(\"totalSize: {} quota: {}\",totalSize,quota);\n  long toDeleteSize=totalSize - quota;\n  if (toDeleteSize <= 0) {\n    return deletedFiles;\n  }\n  Comparator<File> comparator=new Comparator<File>(){\n    public int compare(    File f1,    File f2){\n      if (f1.lastModified() > f2.lastModified()) {\n        return -1;\n      }\n else {\n        return 1;\n      }\n    }\n  }\n;\n  PriorityQueue<File> pq=new PriorityQueue<File>(PQ_SIZE,comparator);\n  int round=0;\n  while (toDeleteSize > 0) {\n    LOG.debug(\"To delete size is {}, start a new round of deletion, round: {}\",toDeleteSize,round);\n    for (    File dir : dirs) {\n      try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){\n        for (        Path path : stream) {\n          File file=path.toFile();\n          if (isFileEligibleToSkipDelete(forPerDir,activeDirs,dir,file)) {\n            continue;\n          }\n          if (pq.size() < PQ_SIZE) {\n            pq.offer(file);\n          }\n else {\n            if (file.lastModified() < pq.peek().lastModified()) {\n              pq.poll();\n              pq.offer(file);\n            }\n          }\n        }\n      }\n     }\n    Stack<File> stack=new Stack<File>();\n    while (!pq.isEmpty()) {\n      File file=pq.poll();\n      stack.push(file);\n    }\n    while (!stack.isEmpty() && toDeleteSize > 0) {\n      File file=stack.pop();\n      toDeleteSize-=file.length();\n      LOG.info(\"Delete file: {}, size: {}, lastModified: {}\",file.getCanonicalPath(),file.length(),file.lastModified());\n      file.delete();\n      deletedFiles++;\n    }\n    pq.clear();\n    round++;\n    if (round >= MAX_ROUNDS) {\n      if (forPerDir) {\n        LOG.warn(\"Reach the MAX_ROUNDS: {} during per-dir deletion, you may have too many files in \" + \"a single directory : {}, will delete the rest files in next interval.\",MAX_ROUNDS,dirs.get(0).getCanonicalPath());\n      }\n else {\n        LOG.warn(\"Reach the MAX_ROUNDS: {} during global deletion, you may have too many files, \" + \"will delete the rest files in next interval.\",MAX_ROUNDS);\n      }\n      break;\n    }\n  }\n  return deletedFiles;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 372,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 46,
                    "startLineNumber": 120,
                    "startColumnNumber": 32,
                    "endLineNumber": 120,
                    "endColumnNumber": 78
                },
                "nodeContext": "file.lastModified() < pq.peek().lastModified()",
                "nodeType": "InfixExpression",
                "astNodeNumber": 9,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "java.util.PriorityQueue<java.io.File>"
        },
        {
            "nodeContext": "pq",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 121,
                "startColumnNumber": 32,
                "endLineNumber": 121,
                "endColumnNumber": 34
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 9,
                        "startLineNumber": 121,
                        "startColumnNumber": 32,
                        "endLineNumber": 121,
                        "endColumnNumber": 41
                    },
                    "nodeContext": "pq.poll()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 10,
                        "startLineNumber": 121,
                        "startColumnNumber": 32,
                        "endLineNumber": 121,
                        "endColumnNumber": 42
                    },
                    "nodeContext": "pq.poll();\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 125,
                        "startLineNumber": 120,
                        "startColumnNumber": 80,
                        "endLineNumber": 123,
                        "endColumnNumber": 29
                    },
                    "nodeContext": "{\n  pq.poll();\n  pq.offer(file);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 10,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 177,
                        "startLineNumber": 120,
                        "startColumnNumber": 28,
                        "endLineNumber": 123,
                        "endColumnNumber": 29
                    },
                    "nodeContext": "if (file.lastModified() < pq.peek().lastModified()) {\n  pq.poll();\n  pq.offer(file);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 20,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 235,
                        "startLineNumber": 119,
                        "startColumnNumber": 31,
                        "endLineNumber": 124,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "{\n  if (file.lastModified() < pq.peek().lastModified()) {\n    pq.poll();\n    pq.offer(file);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 21,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 339,
                        "startLineNumber": 117,
                        "startColumnNumber": 24,
                        "endLineNumber": 124,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "if (pq.size() < PQ_SIZE) {\n  pq.offer(file);\n}\n else {\n  if (file.lastModified() < pq.peek().lastModified()) {\n    pq.poll();\n    pq.offer(file);\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 33,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 600,
                        "startLineNumber": 112,
                        "startColumnNumber": 45,
                        "endLineNumber": 125,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  File file=path.toFile();\n  if (isFileEligibleToSkipDelete(forPerDir,activeDirs,dir,file)) {\n    continue;\n  }\n  if (pq.size() < PQ_SIZE) {\n    pq.offer(file);\n  }\n else {\n    if (file.lastModified() < pq.peek().lastModified()) {\n      pq.poll();\n      pq.offer(file);\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 51,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 625,
                        "startLineNumber": 112,
                        "startColumnNumber": 20,
                        "endLineNumber": 125,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "for (Path path : stream) {\n  File file=path.toFile();\n  if (isFileEligibleToSkipDelete(forPerDir,activeDirs,dir,file)) {\n    continue;\n  }\n  if (pq.size() < PQ_SIZE) {\n    pq.offer(file);\n  }\n else {\n    if (file.lastModified() < pq.peek().lastModified()) {\n      pq.poll();\n      pq.offer(file);\n    }\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 57,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 667,
                        "startLineNumber": 111,
                        "startColumnNumber": 80,
                        "endLineNumber": 126,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  for (  Path path : stream) {\n    File file=path.toFile();\n    if (isFileEligibleToSkipDelete(forPerDir,activeDirs,dir,file)) {\n      continue;\n    }\n    if (pq.size() < PQ_SIZE) {\n      pq.offer(file);\n    }\n else {\n      if (file.lastModified() < pq.peek().lastModified()) {\n        pq.poll();\n        pq.offer(file);\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 58,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 731,
                        "startLineNumber": 111,
                        "startColumnNumber": 16,
                        "endLineNumber": 126,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){\n  for (  Path path : stream) {\n    File file=path.toFile();\n    if (isFileEligibleToSkipDelete(forPerDir,activeDirs,dir,file)) {\n      continue;\n    }\n    if (pq.size() < PQ_SIZE) {\n      pq.offer(file);\n    }\n else {\n      if (file.lastModified() < pq.peek().lastModified()) {\n        pq.poll();\n        pq.offer(file);\n      }\n    }\n  }\n}\n ",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 70,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 765,
                        "startLineNumber": 110,
                        "startColumnNumber": 34,
                        "endLineNumber": 127,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){\n    for (    Path path : stream) {\n      File file=path.toFile();\n      if (isFileEligibleToSkipDelete(forPerDir,activeDirs,dir,file)) {\n        continue;\n      }\n      if (pq.size() < PQ_SIZE) {\n        pq.offer(file);\n      }\n else {\n        if (file.lastModified() < pq.peek().lastModified()) {\n          pq.poll();\n          pq.offer(file);\n        }\n      }\n    }\n  }\n }\n",
                    "nodeType": "Block",
                    "astNodeNumber": 71,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 787,
                        "startLineNumber": 110,
                        "startColumnNumber": 12,
                        "endLineNumber": 127,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (File dir : dirs) {\n  try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){\n    for (    Path path : stream) {\n      File file=path.toFile();\n      if (isFileEligibleToSkipDelete(forPerDir,activeDirs,dir,file)) {\n        continue;\n      }\n      if (pq.size() < PQ_SIZE) {\n        pq.offer(file);\n      }\n else {\n        if (file.lastModified() < pq.peek().lastModified()) {\n          pq.poll();\n          pq.offer(file);\n        }\n      }\n    }\n  }\n }\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 77,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2274,
                        "startLineNumber": 108,
                        "startColumnNumber": 33,
                        "endLineNumber": 154,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  LOG.debug(\"To delete size is {}, start a new round of deletion, round: {}\",toDeleteSize,round);\n  for (  File dir : dirs) {\n    try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){\n      for (      Path path : stream) {\n        File file=path.toFile();\n        if (isFileEligibleToSkipDelete(forPerDir,activeDirs,dir,file)) {\n          continue;\n        }\n        if (pq.size() < PQ_SIZE) {\n          pq.offer(file);\n        }\n else {\n          if (file.lastModified() < pq.peek().lastModified()) {\n            pq.poll();\n            pq.offer(file);\n          }\n        }\n      }\n    }\n   }\n  Stack<File> stack=new Stack<File>();\n  while (!pq.isEmpty()) {\n    File file=pq.poll();\n    stack.push(file);\n  }\n  while (!stack.isEmpty() && toDeleteSize > 0) {\n    File file=stack.pop();\n    toDeleteSize-=file.length();\n    LOG.info(\"Delete file: {}, size: {}, lastModified: {}\",file.getCanonicalPath(),file.length(),file.lastModified());\n    file.delete();\n    deletedFiles++;\n  }\n  pq.clear();\n  round++;\n  if (round >= MAX_ROUNDS) {\n    if (forPerDir) {\n      LOG.warn(\"Reach the MAX_ROUNDS: {} during per-dir deletion, you may have too many files in \" + \"a single directory : {}, will delete the rest files in next interval.\",MAX_ROUNDS,dirs.get(0).getCanonicalPath());\n    }\n else {\n      LOG.warn(\"Reach the MAX_ROUNDS: {} during global deletion, you may have too many files, \" + \"will delete the rest files in next interval.\",MAX_ROUNDS);\n    }\n    break;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 202,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2299,
                        "startLineNumber": 108,
                        "startColumnNumber": 8,
                        "endLineNumber": 154,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (toDeleteSize > 0) {\n  LOG.debug(\"To delete size is {}, start a new round of deletion, round: {}\",toDeleteSize,round);\n  for (  File dir : dirs) {\n    try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){\n      for (      Path path : stream) {\n        File file=path.toFile();\n        if (isFileEligibleToSkipDelete(forPerDir,activeDirs,dir,file)) {\n          continue;\n        }\n        if (pq.size() < PQ_SIZE) {\n          pq.offer(file);\n        }\n else {\n          if (file.lastModified() < pq.peek().lastModified()) {\n            pq.poll();\n            pq.offer(file);\n          }\n        }\n      }\n    }\n   }\n  Stack<File> stack=new Stack<File>();\n  while (!pq.isEmpty()) {\n    File file=pq.poll();\n    stack.push(file);\n  }\n  while (!stack.isEmpty() && toDeleteSize > 0) {\n    File file=stack.pop();\n    toDeleteSize-=file.length();\n    LOG.info(\"Delete file: {}, size: {}, lastModified: {}\",file.getCanonicalPath(),file.length(),file.lastModified());\n    file.delete();\n    deletedFiles++;\n  }\n  pq.clear();\n  round++;\n  if (round >= MAX_ROUNDS) {\n    if (forPerDir) {\n      LOG.warn(\"Reach the MAX_ROUNDS: {} during per-dir deletion, you may have too many files in \" + \"a single directory : {}, will delete the rest files in next interval.\",MAX_ROUNDS,dirs.get(0).getCanonicalPath());\n    }\n else {\n      LOG.warn(\"Reach the MAX_ROUNDS: {} during global deletion, you may have too many files, \" + \"will delete the rest files in next interval.\",MAX_ROUNDS);\n    }\n    break;\n  }\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 206,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3425,
                        "startLineNumber": 77,
                        "startColumnNumber": 98,
                        "endLineNumber": 156,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  long totalSize=0;\n  int deletedFiles=0;\n  for (  File dir : dirs) {\n    try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){\n      for (      Path path : stream) {\n        File file=path.toFile();\n        totalSize+=file.length();\n      }\n    }\n   }\n  LOG.debug(\"totalSize: {} quota: {}\",totalSize,quota);\n  long toDeleteSize=totalSize - quota;\n  if (toDeleteSize <= 0) {\n    return deletedFiles;\n  }\n  Comparator<File> comparator=new Comparator<File>(){\n    public int compare(    File f1,    File f2){\n      if (f1.lastModified() > f2.lastModified()) {\n        return -1;\n      }\n else {\n        return 1;\n      }\n    }\n  }\n;\n  PriorityQueue<File> pq=new PriorityQueue<File>(PQ_SIZE,comparator);\n  int round=0;\n  while (toDeleteSize > 0) {\n    LOG.debug(\"To delete size is {}, start a new round of deletion, round: {}\",toDeleteSize,round);\n    for (    File dir : dirs) {\n      try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){\n        for (        Path path : stream) {\n          File file=path.toFile();\n          if (isFileEligibleToSkipDelete(forPerDir,activeDirs,dir,file)) {\n            continue;\n          }\n          if (pq.size() < PQ_SIZE) {\n            pq.offer(file);\n          }\n else {\n            if (file.lastModified() < pq.peek().lastModified()) {\n              pq.poll();\n              pq.offer(file);\n            }\n          }\n        }\n      }\n     }\n    Stack<File> stack=new Stack<File>();\n    while (!pq.isEmpty()) {\n      File file=pq.poll();\n      stack.push(file);\n    }\n    while (!stack.isEmpty() && toDeleteSize > 0) {\n      File file=stack.pop();\n      toDeleteSize-=file.length();\n      LOG.info(\"Delete file: {}, size: {}, lastModified: {}\",file.getCanonicalPath(),file.length(),file.lastModified());\n      file.delete();\n      deletedFiles++;\n    }\n    pq.clear();\n    round++;\n    if (round >= MAX_ROUNDS) {\n      if (forPerDir) {\n        LOG.warn(\"Reach the MAX_ROUNDS: {} during per-dir deletion, you may have too many files in \" + \"a single directory : {}, will delete the rest files in next interval.\",MAX_ROUNDS,dirs.get(0).getCanonicalPath());\n      }\n else {\n        LOG.warn(\"Reach the MAX_ROUNDS: {} during global deletion, you may have too many files, \" + \"will delete the rest files in next interval.\",MAX_ROUNDS);\n      }\n      break;\n    }\n  }\n  return deletedFiles;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 345,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4269,
                        "startLineNumber": 65,
                        "startColumnNumber": 4,
                        "endLineNumber": 156,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * If totalSize of files exceeds the either the per-worker quota or global quota, Logviewer deletes oldest inactive log files in a worker directory or in all worker dirs. We use the parameter forPerDir to switch between the two deletion modes.\n * @param dirs the list of directories to be scanned for deletion\n * @param quota the per-dir quota or the total quota for the all directories\n * @param forPerDir if true, deletion happens for a single dir; otherwise, for all directories globally\n * @param activeDirs only for global deletion, we want to skip the active logs in activeDirs\n * @return number of files deleted\n */\npublic int deleteOldestWhileTooLarge(List<File> dirs,long quota,boolean forPerDir,Set<String> activeDirs) throws IOException {\n  long totalSize=0;\n  int deletedFiles=0;\n  for (  File dir : dirs) {\n    try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){\n      for (      Path path : stream) {\n        File file=path.toFile();\n        totalSize+=file.length();\n      }\n    }\n   }\n  LOG.debug(\"totalSize: {} quota: {}\",totalSize,quota);\n  long toDeleteSize=totalSize - quota;\n  if (toDeleteSize <= 0) {\n    return deletedFiles;\n  }\n  Comparator<File> comparator=new Comparator<File>(){\n    public int compare(    File f1,    File f2){\n      if (f1.lastModified() > f2.lastModified()) {\n        return -1;\n      }\n else {\n        return 1;\n      }\n    }\n  }\n;\n  PriorityQueue<File> pq=new PriorityQueue<File>(PQ_SIZE,comparator);\n  int round=0;\n  while (toDeleteSize > 0) {\n    LOG.debug(\"To delete size is {}, start a new round of deletion, round: {}\",toDeleteSize,round);\n    for (    File dir : dirs) {\n      try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){\n        for (        Path path : stream) {\n          File file=path.toFile();\n          if (isFileEligibleToSkipDelete(forPerDir,activeDirs,dir,file)) {\n            continue;\n          }\n          if (pq.size() < PQ_SIZE) {\n            pq.offer(file);\n          }\n else {\n            if (file.lastModified() < pq.peek().lastModified()) {\n              pq.poll();\n              pq.offer(file);\n            }\n          }\n        }\n      }\n     }\n    Stack<File> stack=new Stack<File>();\n    while (!pq.isEmpty()) {\n      File file=pq.poll();\n      stack.push(file);\n    }\n    while (!stack.isEmpty() && toDeleteSize > 0) {\n      File file=stack.pop();\n      toDeleteSize-=file.length();\n      LOG.info(\"Delete file: {}, size: {}, lastModified: {}\",file.getCanonicalPath(),file.length(),file.lastModified());\n      file.delete();\n      deletedFiles++;\n    }\n    pq.clear();\n    round++;\n    if (round >= MAX_ROUNDS) {\n      if (forPerDir) {\n        LOG.warn(\"Reach the MAX_ROUNDS: {} during per-dir deletion, you may have too many files in \" + \"a single directory : {}, will delete the rest files in next interval.\",MAX_ROUNDS,dirs.get(0).getCanonicalPath());\n      }\n else {\n        LOG.warn(\"Reach the MAX_ROUNDS: {} during global deletion, you may have too many files, \" + \"will delete the rest files in next interval.\",MAX_ROUNDS);\n      }\n      break;\n    }\n  }\n  return deletedFiles;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 372,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 10,
                    "startLineNumber": 121,
                    "startColumnNumber": 32,
                    "endLineNumber": 121,
                    "endColumnNumber": 42
                },
                "nodeContext": "pq.poll();\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 4,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.util.PriorityQueue<java.io.File>"
        },
        {
            "nodeContext": "pq",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 122,
                "startColumnNumber": 32,
                "endLineNumber": 122,
                "endColumnNumber": 34
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 14,
                        "startLineNumber": 122,
                        "startColumnNumber": 32,
                        "endLineNumber": 122,
                        "endColumnNumber": 46
                    },
                    "nodeContext": "pq.offer(file)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 15,
                        "startLineNumber": 122,
                        "startColumnNumber": 32,
                        "endLineNumber": 122,
                        "endColumnNumber": 47
                    },
                    "nodeContext": "pq.offer(file);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 125,
                        "startLineNumber": 120,
                        "startColumnNumber": 80,
                        "endLineNumber": 123,
                        "endColumnNumber": 29
                    },
                    "nodeContext": "{\n  pq.poll();\n  pq.offer(file);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 10,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 177,
                        "startLineNumber": 120,
                        "startColumnNumber": 28,
                        "endLineNumber": 123,
                        "endColumnNumber": 29
                    },
                    "nodeContext": "if (file.lastModified() < pq.peek().lastModified()) {\n  pq.poll();\n  pq.offer(file);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 20,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 235,
                        "startLineNumber": 119,
                        "startColumnNumber": 31,
                        "endLineNumber": 124,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "{\n  if (file.lastModified() < pq.peek().lastModified()) {\n    pq.poll();\n    pq.offer(file);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 21,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 339,
                        "startLineNumber": 117,
                        "startColumnNumber": 24,
                        "endLineNumber": 124,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "if (pq.size() < PQ_SIZE) {\n  pq.offer(file);\n}\n else {\n  if (file.lastModified() < pq.peek().lastModified()) {\n    pq.poll();\n    pq.offer(file);\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 33,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 600,
                        "startLineNumber": 112,
                        "startColumnNumber": 45,
                        "endLineNumber": 125,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  File file=path.toFile();\n  if (isFileEligibleToSkipDelete(forPerDir,activeDirs,dir,file)) {\n    continue;\n  }\n  if (pq.size() < PQ_SIZE) {\n    pq.offer(file);\n  }\n else {\n    if (file.lastModified() < pq.peek().lastModified()) {\n      pq.poll();\n      pq.offer(file);\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 51,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 625,
                        "startLineNumber": 112,
                        "startColumnNumber": 20,
                        "endLineNumber": 125,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "for (Path path : stream) {\n  File file=path.toFile();\n  if (isFileEligibleToSkipDelete(forPerDir,activeDirs,dir,file)) {\n    continue;\n  }\n  if (pq.size() < PQ_SIZE) {\n    pq.offer(file);\n  }\n else {\n    if (file.lastModified() < pq.peek().lastModified()) {\n      pq.poll();\n      pq.offer(file);\n    }\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 57,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 667,
                        "startLineNumber": 111,
                        "startColumnNumber": 80,
                        "endLineNumber": 126,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  for (  Path path : stream) {\n    File file=path.toFile();\n    if (isFileEligibleToSkipDelete(forPerDir,activeDirs,dir,file)) {\n      continue;\n    }\n    if (pq.size() < PQ_SIZE) {\n      pq.offer(file);\n    }\n else {\n      if (file.lastModified() < pq.peek().lastModified()) {\n        pq.poll();\n        pq.offer(file);\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 58,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 731,
                        "startLineNumber": 111,
                        "startColumnNumber": 16,
                        "endLineNumber": 126,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){\n  for (  Path path : stream) {\n    File file=path.toFile();\n    if (isFileEligibleToSkipDelete(forPerDir,activeDirs,dir,file)) {\n      continue;\n    }\n    if (pq.size() < PQ_SIZE) {\n      pq.offer(file);\n    }\n else {\n      if (file.lastModified() < pq.peek().lastModified()) {\n        pq.poll();\n        pq.offer(file);\n      }\n    }\n  }\n}\n ",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 70,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 765,
                        "startLineNumber": 110,
                        "startColumnNumber": 34,
                        "endLineNumber": 127,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){\n    for (    Path path : stream) {\n      File file=path.toFile();\n      if (isFileEligibleToSkipDelete(forPerDir,activeDirs,dir,file)) {\n        continue;\n      }\n      if (pq.size() < PQ_SIZE) {\n        pq.offer(file);\n      }\n else {\n        if (file.lastModified() < pq.peek().lastModified()) {\n          pq.poll();\n          pq.offer(file);\n        }\n      }\n    }\n  }\n }\n",
                    "nodeType": "Block",
                    "astNodeNumber": 71,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 787,
                        "startLineNumber": 110,
                        "startColumnNumber": 12,
                        "endLineNumber": 127,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (File dir : dirs) {\n  try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){\n    for (    Path path : stream) {\n      File file=path.toFile();\n      if (isFileEligibleToSkipDelete(forPerDir,activeDirs,dir,file)) {\n        continue;\n      }\n      if (pq.size() < PQ_SIZE) {\n        pq.offer(file);\n      }\n else {\n        if (file.lastModified() < pq.peek().lastModified()) {\n          pq.poll();\n          pq.offer(file);\n        }\n      }\n    }\n  }\n }\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 77,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2274,
                        "startLineNumber": 108,
                        "startColumnNumber": 33,
                        "endLineNumber": 154,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  LOG.debug(\"To delete size is {}, start a new round of deletion, round: {}\",toDeleteSize,round);\n  for (  File dir : dirs) {\n    try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){\n      for (      Path path : stream) {\n        File file=path.toFile();\n        if (isFileEligibleToSkipDelete(forPerDir,activeDirs,dir,file)) {\n          continue;\n        }\n        if (pq.size() < PQ_SIZE) {\n          pq.offer(file);\n        }\n else {\n          if (file.lastModified() < pq.peek().lastModified()) {\n            pq.poll();\n            pq.offer(file);\n          }\n        }\n      }\n    }\n   }\n  Stack<File> stack=new Stack<File>();\n  while (!pq.isEmpty()) {\n    File file=pq.poll();\n    stack.push(file);\n  }\n  while (!stack.isEmpty() && toDeleteSize > 0) {\n    File file=stack.pop();\n    toDeleteSize-=file.length();\n    LOG.info(\"Delete file: {}, size: {}, lastModified: {}\",file.getCanonicalPath(),file.length(),file.lastModified());\n    file.delete();\n    deletedFiles++;\n  }\n  pq.clear();\n  round++;\n  if (round >= MAX_ROUNDS) {\n    if (forPerDir) {\n      LOG.warn(\"Reach the MAX_ROUNDS: {} during per-dir deletion, you may have too many files in \" + \"a single directory : {}, will delete the rest files in next interval.\",MAX_ROUNDS,dirs.get(0).getCanonicalPath());\n    }\n else {\n      LOG.warn(\"Reach the MAX_ROUNDS: {} during global deletion, you may have too many files, \" + \"will delete the rest files in next interval.\",MAX_ROUNDS);\n    }\n    break;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 202,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2299,
                        "startLineNumber": 108,
                        "startColumnNumber": 8,
                        "endLineNumber": 154,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (toDeleteSize > 0) {\n  LOG.debug(\"To delete size is {}, start a new round of deletion, round: {}\",toDeleteSize,round);\n  for (  File dir : dirs) {\n    try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){\n      for (      Path path : stream) {\n        File file=path.toFile();\n        if (isFileEligibleToSkipDelete(forPerDir,activeDirs,dir,file)) {\n          continue;\n        }\n        if (pq.size() < PQ_SIZE) {\n          pq.offer(file);\n        }\n else {\n          if (file.lastModified() < pq.peek().lastModified()) {\n            pq.poll();\n            pq.offer(file);\n          }\n        }\n      }\n    }\n   }\n  Stack<File> stack=new Stack<File>();\n  while (!pq.isEmpty()) {\n    File file=pq.poll();\n    stack.push(file);\n  }\n  while (!stack.isEmpty() && toDeleteSize > 0) {\n    File file=stack.pop();\n    toDeleteSize-=file.length();\n    LOG.info(\"Delete file: {}, size: {}, lastModified: {}\",file.getCanonicalPath(),file.length(),file.lastModified());\n    file.delete();\n    deletedFiles++;\n  }\n  pq.clear();\n  round++;\n  if (round >= MAX_ROUNDS) {\n    if (forPerDir) {\n      LOG.warn(\"Reach the MAX_ROUNDS: {} during per-dir deletion, you may have too many files in \" + \"a single directory : {}, will delete the rest files in next interval.\",MAX_ROUNDS,dirs.get(0).getCanonicalPath());\n    }\n else {\n      LOG.warn(\"Reach the MAX_ROUNDS: {} during global deletion, you may have too many files, \" + \"will delete the rest files in next interval.\",MAX_ROUNDS);\n    }\n    break;\n  }\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 206,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3425,
                        "startLineNumber": 77,
                        "startColumnNumber": 98,
                        "endLineNumber": 156,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  long totalSize=0;\n  int deletedFiles=0;\n  for (  File dir : dirs) {\n    try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){\n      for (      Path path : stream) {\n        File file=path.toFile();\n        totalSize+=file.length();\n      }\n    }\n   }\n  LOG.debug(\"totalSize: {} quota: {}\",totalSize,quota);\n  long toDeleteSize=totalSize - quota;\n  if (toDeleteSize <= 0) {\n    return deletedFiles;\n  }\n  Comparator<File> comparator=new Comparator<File>(){\n    public int compare(    File f1,    File f2){\n      if (f1.lastModified() > f2.lastModified()) {\n        return -1;\n      }\n else {\n        return 1;\n      }\n    }\n  }\n;\n  PriorityQueue<File> pq=new PriorityQueue<File>(PQ_SIZE,comparator);\n  int round=0;\n  while (toDeleteSize > 0) {\n    LOG.debug(\"To delete size is {}, start a new round of deletion, round: {}\",toDeleteSize,round);\n    for (    File dir : dirs) {\n      try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){\n        for (        Path path : stream) {\n          File file=path.toFile();\n          if (isFileEligibleToSkipDelete(forPerDir,activeDirs,dir,file)) {\n            continue;\n          }\n          if (pq.size() < PQ_SIZE) {\n            pq.offer(file);\n          }\n else {\n            if (file.lastModified() < pq.peek().lastModified()) {\n              pq.poll();\n              pq.offer(file);\n            }\n          }\n        }\n      }\n     }\n    Stack<File> stack=new Stack<File>();\n    while (!pq.isEmpty()) {\n      File file=pq.poll();\n      stack.push(file);\n    }\n    while (!stack.isEmpty() && toDeleteSize > 0) {\n      File file=stack.pop();\n      toDeleteSize-=file.length();\n      LOG.info(\"Delete file: {}, size: {}, lastModified: {}\",file.getCanonicalPath(),file.length(),file.lastModified());\n      file.delete();\n      deletedFiles++;\n    }\n    pq.clear();\n    round++;\n    if (round >= MAX_ROUNDS) {\n      if (forPerDir) {\n        LOG.warn(\"Reach the MAX_ROUNDS: {} during per-dir deletion, you may have too many files in \" + \"a single directory : {}, will delete the rest files in next interval.\",MAX_ROUNDS,dirs.get(0).getCanonicalPath());\n      }\n else {\n        LOG.warn(\"Reach the MAX_ROUNDS: {} during global deletion, you may have too many files, \" + \"will delete the rest files in next interval.\",MAX_ROUNDS);\n      }\n      break;\n    }\n  }\n  return deletedFiles;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 345,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4269,
                        "startLineNumber": 65,
                        "startColumnNumber": 4,
                        "endLineNumber": 156,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * If totalSize of files exceeds the either the per-worker quota or global quota, Logviewer deletes oldest inactive log files in a worker directory or in all worker dirs. We use the parameter forPerDir to switch between the two deletion modes.\n * @param dirs the list of directories to be scanned for deletion\n * @param quota the per-dir quota or the total quota for the all directories\n * @param forPerDir if true, deletion happens for a single dir; otherwise, for all directories globally\n * @param activeDirs only for global deletion, we want to skip the active logs in activeDirs\n * @return number of files deleted\n */\npublic int deleteOldestWhileTooLarge(List<File> dirs,long quota,boolean forPerDir,Set<String> activeDirs) throws IOException {\n  long totalSize=0;\n  int deletedFiles=0;\n  for (  File dir : dirs) {\n    try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){\n      for (      Path path : stream) {\n        File file=path.toFile();\n        totalSize+=file.length();\n      }\n    }\n   }\n  LOG.debug(\"totalSize: {} quota: {}\",totalSize,quota);\n  long toDeleteSize=totalSize - quota;\n  if (toDeleteSize <= 0) {\n    return deletedFiles;\n  }\n  Comparator<File> comparator=new Comparator<File>(){\n    public int compare(    File f1,    File f2){\n      if (f1.lastModified() > f2.lastModified()) {\n        return -1;\n      }\n else {\n        return 1;\n      }\n    }\n  }\n;\n  PriorityQueue<File> pq=new PriorityQueue<File>(PQ_SIZE,comparator);\n  int round=0;\n  while (toDeleteSize > 0) {\n    LOG.debug(\"To delete size is {}, start a new round of deletion, round: {}\",toDeleteSize,round);\n    for (    File dir : dirs) {\n      try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){\n        for (        Path path : stream) {\n          File file=path.toFile();\n          if (isFileEligibleToSkipDelete(forPerDir,activeDirs,dir,file)) {\n            continue;\n          }\n          if (pq.size() < PQ_SIZE) {\n            pq.offer(file);\n          }\n else {\n            if (file.lastModified() < pq.peek().lastModified()) {\n              pq.poll();\n              pq.offer(file);\n            }\n          }\n        }\n      }\n     }\n    Stack<File> stack=new Stack<File>();\n    while (!pq.isEmpty()) {\n      File file=pq.poll();\n      stack.push(file);\n    }\n    while (!stack.isEmpty() && toDeleteSize > 0) {\n      File file=stack.pop();\n      toDeleteSize-=file.length();\n      LOG.info(\"Delete file: {}, size: {}, lastModified: {}\",file.getCanonicalPath(),file.length(),file.lastModified());\n      file.delete();\n      deletedFiles++;\n    }\n    pq.clear();\n    round++;\n    if (round >= MAX_ROUNDS) {\n      if (forPerDir) {\n        LOG.warn(\"Reach the MAX_ROUNDS: {} during per-dir deletion, you may have too many files in \" + \"a single directory : {}, will delete the rest files in next interval.\",MAX_ROUNDS,dirs.get(0).getCanonicalPath());\n      }\n else {\n        LOG.warn(\"Reach the MAX_ROUNDS: {} during global deletion, you may have too many files, \" + \"will delete the rest files in next interval.\",MAX_ROUNDS);\n      }\n      break;\n    }\n  }\n  return deletedFiles;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 372,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 15,
                    "startLineNumber": 122,
                    "startColumnNumber": 32,
                    "endLineNumber": 122,
                    "endColumnNumber": 47
                },
                "nodeContext": "pq.offer(file);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.util.PriorityQueue<java.io.File>"
        },
        {
            "nodeContext": "pq",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 130,
                "startColumnNumber": 20,
                "endLineNumber": 130,
                "endColumnNumber": 22
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
                    "nodePosition": {
                        "charLength": 12,
                        "startLineNumber": 130,
                        "startColumnNumber": 20,
                        "endLineNumber": 130,
                        "endColumnNumber": 32
                    },
                    "nodeContext": "pq.isEmpty()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
                    "nodePosition": {
                        "charLength": 13,
                        "startLineNumber": 130,
                        "startColumnNumber": 19,
                        "endLineNumber": 130,
                        "endColumnNumber": 32
                    },
                    "nodeContext": "!pq.isEmpty()",
                    "nodeType": "PrefixExpression",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 113,
                        "startLineNumber": 130,
                        "startColumnNumber": 12,
                        "endLineNumber": 133,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "while (!pq.isEmpty()) {\n  File file=pq.poll();\n  stack.push(file);\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 19,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2274,
                        "startLineNumber": 108,
                        "startColumnNumber": 33,
                        "endLineNumber": 154,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  LOG.debug(\"To delete size is {}, start a new round of deletion, round: {}\",toDeleteSize,round);\n  for (  File dir : dirs) {\n    try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){\n      for (      Path path : stream) {\n        File file=path.toFile();\n        if (isFileEligibleToSkipDelete(forPerDir,activeDirs,dir,file)) {\n          continue;\n        }\n        if (pq.size() < PQ_SIZE) {\n          pq.offer(file);\n        }\n else {\n          if (file.lastModified() < pq.peek().lastModified()) {\n            pq.poll();\n            pq.offer(file);\n          }\n        }\n      }\n    }\n   }\n  Stack<File> stack=new Stack<File>();\n  while (!pq.isEmpty()) {\n    File file=pq.poll();\n    stack.push(file);\n  }\n  while (!stack.isEmpty() && toDeleteSize > 0) {\n    File file=stack.pop();\n    toDeleteSize-=file.length();\n    LOG.info(\"Delete file: {}, size: {}, lastModified: {}\",file.getCanonicalPath(),file.length(),file.lastModified());\n    file.delete();\n    deletedFiles++;\n  }\n  pq.clear();\n  round++;\n  if (round >= MAX_ROUNDS) {\n    if (forPerDir) {\n      LOG.warn(\"Reach the MAX_ROUNDS: {} during per-dir deletion, you may have too many files in \" + \"a single directory : {}, will delete the rest files in next interval.\",MAX_ROUNDS,dirs.get(0).getCanonicalPath());\n    }\n else {\n      LOG.warn(\"Reach the MAX_ROUNDS: {} during global deletion, you may have too many files, \" + \"will delete the rest files in next interval.\",MAX_ROUNDS);\n    }\n    break;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 202,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2299,
                        "startLineNumber": 108,
                        "startColumnNumber": 8,
                        "endLineNumber": 154,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (toDeleteSize > 0) {\n  LOG.debug(\"To delete size is {}, start a new round of deletion, round: {}\",toDeleteSize,round);\n  for (  File dir : dirs) {\n    try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){\n      for (      Path path : stream) {\n        File file=path.toFile();\n        if (isFileEligibleToSkipDelete(forPerDir,activeDirs,dir,file)) {\n          continue;\n        }\n        if (pq.size() < PQ_SIZE) {\n          pq.offer(file);\n        }\n else {\n          if (file.lastModified() < pq.peek().lastModified()) {\n            pq.poll();\n            pq.offer(file);\n          }\n        }\n      }\n    }\n   }\n  Stack<File> stack=new Stack<File>();\n  while (!pq.isEmpty()) {\n    File file=pq.poll();\n    stack.push(file);\n  }\n  while (!stack.isEmpty() && toDeleteSize > 0) {\n    File file=stack.pop();\n    toDeleteSize-=file.length();\n    LOG.info(\"Delete file: {}, size: {}, lastModified: {}\",file.getCanonicalPath(),file.length(),file.lastModified());\n    file.delete();\n    deletedFiles++;\n  }\n  pq.clear();\n  round++;\n  if (round >= MAX_ROUNDS) {\n    if (forPerDir) {\n      LOG.warn(\"Reach the MAX_ROUNDS: {} during per-dir deletion, you may have too many files in \" + \"a single directory : {}, will delete the rest files in next interval.\",MAX_ROUNDS,dirs.get(0).getCanonicalPath());\n    }\n else {\n      LOG.warn(\"Reach the MAX_ROUNDS: {} during global deletion, you may have too many files, \" + \"will delete the rest files in next interval.\",MAX_ROUNDS);\n    }\n    break;\n  }\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 206,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3425,
                        "startLineNumber": 77,
                        "startColumnNumber": 98,
                        "endLineNumber": 156,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  long totalSize=0;\n  int deletedFiles=0;\n  for (  File dir : dirs) {\n    try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){\n      for (      Path path : stream) {\n        File file=path.toFile();\n        totalSize+=file.length();\n      }\n    }\n   }\n  LOG.debug(\"totalSize: {} quota: {}\",totalSize,quota);\n  long toDeleteSize=totalSize - quota;\n  if (toDeleteSize <= 0) {\n    return deletedFiles;\n  }\n  Comparator<File> comparator=new Comparator<File>(){\n    public int compare(    File f1,    File f2){\n      if (f1.lastModified() > f2.lastModified()) {\n        return -1;\n      }\n else {\n        return 1;\n      }\n    }\n  }\n;\n  PriorityQueue<File> pq=new PriorityQueue<File>(PQ_SIZE,comparator);\n  int round=0;\n  while (toDeleteSize > 0) {\n    LOG.debug(\"To delete size is {}, start a new round of deletion, round: {}\",toDeleteSize,round);\n    for (    File dir : dirs) {\n      try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){\n        for (        Path path : stream) {\n          File file=path.toFile();\n          if (isFileEligibleToSkipDelete(forPerDir,activeDirs,dir,file)) {\n            continue;\n          }\n          if (pq.size() < PQ_SIZE) {\n            pq.offer(file);\n          }\n else {\n            if (file.lastModified() < pq.peek().lastModified()) {\n              pq.poll();\n              pq.offer(file);\n            }\n          }\n        }\n      }\n     }\n    Stack<File> stack=new Stack<File>();\n    while (!pq.isEmpty()) {\n      File file=pq.poll();\n      stack.push(file);\n    }\n    while (!stack.isEmpty() && toDeleteSize > 0) {\n      File file=stack.pop();\n      toDeleteSize-=file.length();\n      LOG.info(\"Delete file: {}, size: {}, lastModified: {}\",file.getCanonicalPath(),file.length(),file.lastModified());\n      file.delete();\n      deletedFiles++;\n    }\n    pq.clear();\n    round++;\n    if (round >= MAX_ROUNDS) {\n      if (forPerDir) {\n        LOG.warn(\"Reach the MAX_ROUNDS: {} during per-dir deletion, you may have too many files in \" + \"a single directory : {}, will delete the rest files in next interval.\",MAX_ROUNDS,dirs.get(0).getCanonicalPath());\n      }\n else {\n        LOG.warn(\"Reach the MAX_ROUNDS: {} during global deletion, you may have too many files, \" + \"will delete the rest files in next interval.\",MAX_ROUNDS);\n      }\n      break;\n    }\n  }\n  return deletedFiles;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 345,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4269,
                        "startLineNumber": 65,
                        "startColumnNumber": 4,
                        "endLineNumber": 156,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * If totalSize of files exceeds the either the per-worker quota or global quota, Logviewer deletes oldest inactive log files in a worker directory or in all worker dirs. We use the parameter forPerDir to switch between the two deletion modes.\n * @param dirs the list of directories to be scanned for deletion\n * @param quota the per-dir quota or the total quota for the all directories\n * @param forPerDir if true, deletion happens for a single dir; otherwise, for all directories globally\n * @param activeDirs only for global deletion, we want to skip the active logs in activeDirs\n * @return number of files deleted\n */\npublic int deleteOldestWhileTooLarge(List<File> dirs,long quota,boolean forPerDir,Set<String> activeDirs) throws IOException {\n  long totalSize=0;\n  int deletedFiles=0;\n  for (  File dir : dirs) {\n    try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){\n      for (      Path path : stream) {\n        File file=path.toFile();\n        totalSize+=file.length();\n      }\n    }\n   }\n  LOG.debug(\"totalSize: {} quota: {}\",totalSize,quota);\n  long toDeleteSize=totalSize - quota;\n  if (toDeleteSize <= 0) {\n    return deletedFiles;\n  }\n  Comparator<File> comparator=new Comparator<File>(){\n    public int compare(    File f1,    File f2){\n      if (f1.lastModified() > f2.lastModified()) {\n        return -1;\n      }\n else {\n        return 1;\n      }\n    }\n  }\n;\n  PriorityQueue<File> pq=new PriorityQueue<File>(PQ_SIZE,comparator);\n  int round=0;\n  while (toDeleteSize > 0) {\n    LOG.debug(\"To delete size is {}, start a new round of deletion, round: {}\",toDeleteSize,round);\n    for (    File dir : dirs) {\n      try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){\n        for (        Path path : stream) {\n          File file=path.toFile();\n          if (isFileEligibleToSkipDelete(forPerDir,activeDirs,dir,file)) {\n            continue;\n          }\n          if (pq.size() < PQ_SIZE) {\n            pq.offer(file);\n          }\n else {\n            if (file.lastModified() < pq.peek().lastModified()) {\n              pq.poll();\n              pq.offer(file);\n            }\n          }\n        }\n      }\n     }\n    Stack<File> stack=new Stack<File>();\n    while (!pq.isEmpty()) {\n      File file=pq.poll();\n      stack.push(file);\n    }\n    while (!stack.isEmpty() && toDeleteSize > 0) {\n      File file=stack.pop();\n      toDeleteSize-=file.length();\n      LOG.info(\"Delete file: {}, size: {}, lastModified: {}\",file.getCanonicalPath(),file.length(),file.lastModified());\n      file.delete();\n      deletedFiles++;\n    }\n    pq.clear();\n    round++;\n    if (round >= MAX_ROUNDS) {\n      if (forPerDir) {\n        LOG.warn(\"Reach the MAX_ROUNDS: {} during per-dir deletion, you may have too many files in \" + \"a single directory : {}, will delete the rest files in next interval.\",MAX_ROUNDS,dirs.get(0).getCanonicalPath());\n      }\n else {\n        LOG.warn(\"Reach the MAX_ROUNDS: {} during global deletion, you may have too many files, \" + \"will delete the rest files in next interval.\",MAX_ROUNDS);\n      }\n      break;\n    }\n  }\n  return deletedFiles;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 372,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
                "nodePosition": {
                    "charLength": 13,
                    "startLineNumber": 130,
                    "startColumnNumber": 19,
                    "endLineNumber": 130,
                    "endColumnNumber": 32
                },
                "nodeContext": "!pq.isEmpty()",
                "nodeType": "PrefixExpression",
                "astNodeNumber": 4,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.util.PriorityQueue<java.io.File>"
        },
        {
            "nodeContext": "pq",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 131,
                "startColumnNumber": 28,
                "endLineNumber": 131,
                "endColumnNumber": 30
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 9,
                        "startLineNumber": 131,
                        "startColumnNumber": 28,
                        "endLineNumber": 131,
                        "endColumnNumber": 37
                    },
                    "nodeContext": "pq.poll()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 16,
                        "startLineNumber": 131,
                        "startColumnNumber": 21,
                        "endLineNumber": 131,
                        "endColumnNumber": 37
                    },
                    "nodeContext": "file=pq.poll()",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 22,
                        "startLineNumber": 131,
                        "startColumnNumber": 16,
                        "endLineNumber": 131,
                        "endColumnNumber": 38
                    },
                    "nodeContext": "File file=pq.poll();\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 91,
                        "startLineNumber": 130,
                        "startColumnNumber": 34,
                        "endLineNumber": 133,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  File file=pq.poll();\n  stack.push(file);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 14,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 113,
                        "startLineNumber": 130,
                        "startColumnNumber": 12,
                        "endLineNumber": 133,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "while (!pq.isEmpty()) {\n  File file=pq.poll();\n  stack.push(file);\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 19,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2274,
                        "startLineNumber": 108,
                        "startColumnNumber": 33,
                        "endLineNumber": 154,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  LOG.debug(\"To delete size is {}, start a new round of deletion, round: {}\",toDeleteSize,round);\n  for (  File dir : dirs) {\n    try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){\n      for (      Path path : stream) {\n        File file=path.toFile();\n        if (isFileEligibleToSkipDelete(forPerDir,activeDirs,dir,file)) {\n          continue;\n        }\n        if (pq.size() < PQ_SIZE) {\n          pq.offer(file);\n        }\n else {\n          if (file.lastModified() < pq.peek().lastModified()) {\n            pq.poll();\n            pq.offer(file);\n          }\n        }\n      }\n    }\n   }\n  Stack<File> stack=new Stack<File>();\n  while (!pq.isEmpty()) {\n    File file=pq.poll();\n    stack.push(file);\n  }\n  while (!stack.isEmpty() && toDeleteSize > 0) {\n    File file=stack.pop();\n    toDeleteSize-=file.length();\n    LOG.info(\"Delete file: {}, size: {}, lastModified: {}\",file.getCanonicalPath(),file.length(),file.lastModified());\n    file.delete();\n    deletedFiles++;\n  }\n  pq.clear();\n  round++;\n  if (round >= MAX_ROUNDS) {\n    if (forPerDir) {\n      LOG.warn(\"Reach the MAX_ROUNDS: {} during per-dir deletion, you may have too many files in \" + \"a single directory : {}, will delete the rest files in next interval.\",MAX_ROUNDS,dirs.get(0).getCanonicalPath());\n    }\n else {\n      LOG.warn(\"Reach the MAX_ROUNDS: {} during global deletion, you may have too many files, \" + \"will delete the rest files in next interval.\",MAX_ROUNDS);\n    }\n    break;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 202,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2299,
                        "startLineNumber": 108,
                        "startColumnNumber": 8,
                        "endLineNumber": 154,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (toDeleteSize > 0) {\n  LOG.debug(\"To delete size is {}, start a new round of deletion, round: {}\",toDeleteSize,round);\n  for (  File dir : dirs) {\n    try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){\n      for (      Path path : stream) {\n        File file=path.toFile();\n        if (isFileEligibleToSkipDelete(forPerDir,activeDirs,dir,file)) {\n          continue;\n        }\n        if (pq.size() < PQ_SIZE) {\n          pq.offer(file);\n        }\n else {\n          if (file.lastModified() < pq.peek().lastModified()) {\n            pq.poll();\n            pq.offer(file);\n          }\n        }\n      }\n    }\n   }\n  Stack<File> stack=new Stack<File>();\n  while (!pq.isEmpty()) {\n    File file=pq.poll();\n    stack.push(file);\n  }\n  while (!stack.isEmpty() && toDeleteSize > 0) {\n    File file=stack.pop();\n    toDeleteSize-=file.length();\n    LOG.info(\"Delete file: {}, size: {}, lastModified: {}\",file.getCanonicalPath(),file.length(),file.lastModified());\n    file.delete();\n    deletedFiles++;\n  }\n  pq.clear();\n  round++;\n  if (round >= MAX_ROUNDS) {\n    if (forPerDir) {\n      LOG.warn(\"Reach the MAX_ROUNDS: {} during per-dir deletion, you may have too many files in \" + \"a single directory : {}, will delete the rest files in next interval.\",MAX_ROUNDS,dirs.get(0).getCanonicalPath());\n    }\n else {\n      LOG.warn(\"Reach the MAX_ROUNDS: {} during global deletion, you may have too many files, \" + \"will delete the rest files in next interval.\",MAX_ROUNDS);\n    }\n    break;\n  }\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 206,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3425,
                        "startLineNumber": 77,
                        "startColumnNumber": 98,
                        "endLineNumber": 156,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  long totalSize=0;\n  int deletedFiles=0;\n  for (  File dir : dirs) {\n    try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){\n      for (      Path path : stream) {\n        File file=path.toFile();\n        totalSize+=file.length();\n      }\n    }\n   }\n  LOG.debug(\"totalSize: {} quota: {}\",totalSize,quota);\n  long toDeleteSize=totalSize - quota;\n  if (toDeleteSize <= 0) {\n    return deletedFiles;\n  }\n  Comparator<File> comparator=new Comparator<File>(){\n    public int compare(    File f1,    File f2){\n      if (f1.lastModified() > f2.lastModified()) {\n        return -1;\n      }\n else {\n        return 1;\n      }\n    }\n  }\n;\n  PriorityQueue<File> pq=new PriorityQueue<File>(PQ_SIZE,comparator);\n  int round=0;\n  while (toDeleteSize > 0) {\n    LOG.debug(\"To delete size is {}, start a new round of deletion, round: {}\",toDeleteSize,round);\n    for (    File dir : dirs) {\n      try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){\n        for (        Path path : stream) {\n          File file=path.toFile();\n          if (isFileEligibleToSkipDelete(forPerDir,activeDirs,dir,file)) {\n            continue;\n          }\n          if (pq.size() < PQ_SIZE) {\n            pq.offer(file);\n          }\n else {\n            if (file.lastModified() < pq.peek().lastModified()) {\n              pq.poll();\n              pq.offer(file);\n            }\n          }\n        }\n      }\n     }\n    Stack<File> stack=new Stack<File>();\n    while (!pq.isEmpty()) {\n      File file=pq.poll();\n      stack.push(file);\n    }\n    while (!stack.isEmpty() && toDeleteSize > 0) {\n      File file=stack.pop();\n      toDeleteSize-=file.length();\n      LOG.info(\"Delete file: {}, size: {}, lastModified: {}\",file.getCanonicalPath(),file.length(),file.lastModified());\n      file.delete();\n      deletedFiles++;\n    }\n    pq.clear();\n    round++;\n    if (round >= MAX_ROUNDS) {\n      if (forPerDir) {\n        LOG.warn(\"Reach the MAX_ROUNDS: {} during per-dir deletion, you may have too many files in \" + \"a single directory : {}, will delete the rest files in next interval.\",MAX_ROUNDS,dirs.get(0).getCanonicalPath());\n      }\n else {\n        LOG.warn(\"Reach the MAX_ROUNDS: {} during global deletion, you may have too many files, \" + \"will delete the rest files in next interval.\",MAX_ROUNDS);\n      }\n      break;\n    }\n  }\n  return deletedFiles;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 345,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4269,
                        "startLineNumber": 65,
                        "startColumnNumber": 4,
                        "endLineNumber": 156,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * If totalSize of files exceeds the either the per-worker quota or global quota, Logviewer deletes oldest inactive log files in a worker directory or in all worker dirs. We use the parameter forPerDir to switch between the two deletion modes.\n * @param dirs the list of directories to be scanned for deletion\n * @param quota the per-dir quota or the total quota for the all directories\n * @param forPerDir if true, deletion happens for a single dir; otherwise, for all directories globally\n * @param activeDirs only for global deletion, we want to skip the active logs in activeDirs\n * @return number of files deleted\n */\npublic int deleteOldestWhileTooLarge(List<File> dirs,long quota,boolean forPerDir,Set<String> activeDirs) throws IOException {\n  long totalSize=0;\n  int deletedFiles=0;\n  for (  File dir : dirs) {\n    try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){\n      for (      Path path : stream) {\n        File file=path.toFile();\n        totalSize+=file.length();\n      }\n    }\n   }\n  LOG.debug(\"totalSize: {} quota: {}\",totalSize,quota);\n  long toDeleteSize=totalSize - quota;\n  if (toDeleteSize <= 0) {\n    return deletedFiles;\n  }\n  Comparator<File> comparator=new Comparator<File>(){\n    public int compare(    File f1,    File f2){\n      if (f1.lastModified() > f2.lastModified()) {\n        return -1;\n      }\n else {\n        return 1;\n      }\n    }\n  }\n;\n  PriorityQueue<File> pq=new PriorityQueue<File>(PQ_SIZE,comparator);\n  int round=0;\n  while (toDeleteSize > 0) {\n    LOG.debug(\"To delete size is {}, start a new round of deletion, round: {}\",toDeleteSize,round);\n    for (    File dir : dirs) {\n      try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){\n        for (        Path path : stream) {\n          File file=path.toFile();\n          if (isFileEligibleToSkipDelete(forPerDir,activeDirs,dir,file)) {\n            continue;\n          }\n          if (pq.size() < PQ_SIZE) {\n            pq.offer(file);\n          }\n else {\n            if (file.lastModified() < pq.peek().lastModified()) {\n              pq.poll();\n              pq.offer(file);\n            }\n          }\n        }\n      }\n     }\n    Stack<File> stack=new Stack<File>();\n    while (!pq.isEmpty()) {\n      File file=pq.poll();\n      stack.push(file);\n    }\n    while (!stack.isEmpty() && toDeleteSize > 0) {\n      File file=stack.pop();\n      toDeleteSize-=file.length();\n      LOG.info(\"Delete file: {}, size: {}, lastModified: {}\",file.getCanonicalPath(),file.length(),file.lastModified());\n      file.delete();\n      deletedFiles++;\n    }\n    pq.clear();\n    round++;\n    if (round >= MAX_ROUNDS) {\n      if (forPerDir) {\n        LOG.warn(\"Reach the MAX_ROUNDS: {} during per-dir deletion, you may have too many files in \" + \"a single directory : {}, will delete the rest files in next interval.\",MAX_ROUNDS,dirs.get(0).getCanonicalPath());\n      }\n else {\n        LOG.warn(\"Reach the MAX_ROUNDS: {} during global deletion, you may have too many files, \" + \"will delete the rest files in next interval.\",MAX_ROUNDS);\n      }\n      break;\n    }\n  }\n  return deletedFiles;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 372,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 22,
                    "startLineNumber": 131,
                    "startColumnNumber": 16,
                    "endLineNumber": 131,
                    "endColumnNumber": 38
                },
                "nodeContext": "File file=pq.poll();\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "java.util.PriorityQueue<java.io.File>"
        },
        {
            "nodeContext": "pq",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 141,
                "startColumnNumber": 12,
                "endLineNumber": 141,
                "endColumnNumber": 14
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 10,
                        "startLineNumber": 141,
                        "startColumnNumber": 12,
                        "endLineNumber": 141,
                        "endColumnNumber": 22
                    },
                    "nodeContext": "pq.clear()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 11,
                        "startLineNumber": 141,
                        "startColumnNumber": 12,
                        "endLineNumber": 141,
                        "endColumnNumber": 23
                    },
                    "nodeContext": "pq.clear();\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2274,
                        "startLineNumber": 108,
                        "startColumnNumber": 33,
                        "endLineNumber": 154,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  LOG.debug(\"To delete size is {}, start a new round of deletion, round: {}\",toDeleteSize,round);\n  for (  File dir : dirs) {\n    try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){\n      for (      Path path : stream) {\n        File file=path.toFile();\n        if (isFileEligibleToSkipDelete(forPerDir,activeDirs,dir,file)) {\n          continue;\n        }\n        if (pq.size() < PQ_SIZE) {\n          pq.offer(file);\n        }\n else {\n          if (file.lastModified() < pq.peek().lastModified()) {\n            pq.poll();\n            pq.offer(file);\n          }\n        }\n      }\n    }\n   }\n  Stack<File> stack=new Stack<File>();\n  while (!pq.isEmpty()) {\n    File file=pq.poll();\n    stack.push(file);\n  }\n  while (!stack.isEmpty() && toDeleteSize > 0) {\n    File file=stack.pop();\n    toDeleteSize-=file.length();\n    LOG.info(\"Delete file: {}, size: {}, lastModified: {}\",file.getCanonicalPath(),file.length(),file.lastModified());\n    file.delete();\n    deletedFiles++;\n  }\n  pq.clear();\n  round++;\n  if (round >= MAX_ROUNDS) {\n    if (forPerDir) {\n      LOG.warn(\"Reach the MAX_ROUNDS: {} during per-dir deletion, you may have too many files in \" + \"a single directory : {}, will delete the rest files in next interval.\",MAX_ROUNDS,dirs.get(0).getCanonicalPath());\n    }\n else {\n      LOG.warn(\"Reach the MAX_ROUNDS: {} during global deletion, you may have too many files, \" + \"will delete the rest files in next interval.\",MAX_ROUNDS);\n    }\n    break;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 202,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2299,
                        "startLineNumber": 108,
                        "startColumnNumber": 8,
                        "endLineNumber": 154,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (toDeleteSize > 0) {\n  LOG.debug(\"To delete size is {}, start a new round of deletion, round: {}\",toDeleteSize,round);\n  for (  File dir : dirs) {\n    try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){\n      for (      Path path : stream) {\n        File file=path.toFile();\n        if (isFileEligibleToSkipDelete(forPerDir,activeDirs,dir,file)) {\n          continue;\n        }\n        if (pq.size() < PQ_SIZE) {\n          pq.offer(file);\n        }\n else {\n          if (file.lastModified() < pq.peek().lastModified()) {\n            pq.poll();\n            pq.offer(file);\n          }\n        }\n      }\n    }\n   }\n  Stack<File> stack=new Stack<File>();\n  while (!pq.isEmpty()) {\n    File file=pq.poll();\n    stack.push(file);\n  }\n  while (!stack.isEmpty() && toDeleteSize > 0) {\n    File file=stack.pop();\n    toDeleteSize-=file.length();\n    LOG.info(\"Delete file: {}, size: {}, lastModified: {}\",file.getCanonicalPath(),file.length(),file.lastModified());\n    file.delete();\n    deletedFiles++;\n  }\n  pq.clear();\n  round++;\n  if (round >= MAX_ROUNDS) {\n    if (forPerDir) {\n      LOG.warn(\"Reach the MAX_ROUNDS: {} during per-dir deletion, you may have too many files in \" + \"a single directory : {}, will delete the rest files in next interval.\",MAX_ROUNDS,dirs.get(0).getCanonicalPath());\n    }\n else {\n      LOG.warn(\"Reach the MAX_ROUNDS: {} during global deletion, you may have too many files, \" + \"will delete the rest files in next interval.\",MAX_ROUNDS);\n    }\n    break;\n  }\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 206,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3425,
                        "startLineNumber": 77,
                        "startColumnNumber": 98,
                        "endLineNumber": 156,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  long totalSize=0;\n  int deletedFiles=0;\n  for (  File dir : dirs) {\n    try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){\n      for (      Path path : stream) {\n        File file=path.toFile();\n        totalSize+=file.length();\n      }\n    }\n   }\n  LOG.debug(\"totalSize: {} quota: {}\",totalSize,quota);\n  long toDeleteSize=totalSize - quota;\n  if (toDeleteSize <= 0) {\n    return deletedFiles;\n  }\n  Comparator<File> comparator=new Comparator<File>(){\n    public int compare(    File f1,    File f2){\n      if (f1.lastModified() > f2.lastModified()) {\n        return -1;\n      }\n else {\n        return 1;\n      }\n    }\n  }\n;\n  PriorityQueue<File> pq=new PriorityQueue<File>(PQ_SIZE,comparator);\n  int round=0;\n  while (toDeleteSize > 0) {\n    LOG.debug(\"To delete size is {}, start a new round of deletion, round: {}\",toDeleteSize,round);\n    for (    File dir : dirs) {\n      try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){\n        for (        Path path : stream) {\n          File file=path.toFile();\n          if (isFileEligibleToSkipDelete(forPerDir,activeDirs,dir,file)) {\n            continue;\n          }\n          if (pq.size() < PQ_SIZE) {\n            pq.offer(file);\n          }\n else {\n            if (file.lastModified() < pq.peek().lastModified()) {\n              pq.poll();\n              pq.offer(file);\n            }\n          }\n        }\n      }\n     }\n    Stack<File> stack=new Stack<File>();\n    while (!pq.isEmpty()) {\n      File file=pq.poll();\n      stack.push(file);\n    }\n    while (!stack.isEmpty() && toDeleteSize > 0) {\n      File file=stack.pop();\n      toDeleteSize-=file.length();\n      LOG.info(\"Delete file: {}, size: {}, lastModified: {}\",file.getCanonicalPath(),file.length(),file.lastModified());\n      file.delete();\n      deletedFiles++;\n    }\n    pq.clear();\n    round++;\n    if (round >= MAX_ROUNDS) {\n      if (forPerDir) {\n        LOG.warn(\"Reach the MAX_ROUNDS: {} during per-dir deletion, you may have too many files in \" + \"a single directory : {}, will delete the rest files in next interval.\",MAX_ROUNDS,dirs.get(0).getCanonicalPath());\n      }\n else {\n        LOG.warn(\"Reach the MAX_ROUNDS: {} during global deletion, you may have too many files, \" + \"will delete the rest files in next interval.\",MAX_ROUNDS);\n      }\n      break;\n    }\n  }\n  return deletedFiles;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 345,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4269,
                        "startLineNumber": 65,
                        "startColumnNumber": 4,
                        "endLineNumber": 156,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * If totalSize of files exceeds the either the per-worker quota or global quota, Logviewer deletes oldest inactive log files in a worker directory or in all worker dirs. We use the parameter forPerDir to switch between the two deletion modes.\n * @param dirs the list of directories to be scanned for deletion\n * @param quota the per-dir quota or the total quota for the all directories\n * @param forPerDir if true, deletion happens for a single dir; otherwise, for all directories globally\n * @param activeDirs only for global deletion, we want to skip the active logs in activeDirs\n * @return number of files deleted\n */\npublic int deleteOldestWhileTooLarge(List<File> dirs,long quota,boolean forPerDir,Set<String> activeDirs) throws IOException {\n  long totalSize=0;\n  int deletedFiles=0;\n  for (  File dir : dirs) {\n    try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){\n      for (      Path path : stream) {\n        File file=path.toFile();\n        totalSize+=file.length();\n      }\n    }\n   }\n  LOG.debug(\"totalSize: {} quota: {}\",totalSize,quota);\n  long toDeleteSize=totalSize - quota;\n  if (toDeleteSize <= 0) {\n    return deletedFiles;\n  }\n  Comparator<File> comparator=new Comparator<File>(){\n    public int compare(    File f1,    File f2){\n      if (f1.lastModified() > f2.lastModified()) {\n        return -1;\n      }\n else {\n        return 1;\n      }\n    }\n  }\n;\n  PriorityQueue<File> pq=new PriorityQueue<File>(PQ_SIZE,comparator);\n  int round=0;\n  while (toDeleteSize > 0) {\n    LOG.debug(\"To delete size is {}, start a new round of deletion, round: {}\",toDeleteSize,round);\n    for (    File dir : dirs) {\n      try (DirectoryStream<Path> stream=getStreamForDirectory(dir)){\n        for (        Path path : stream) {\n          File file=path.toFile();\n          if (isFileEligibleToSkipDelete(forPerDir,activeDirs,dir,file)) {\n            continue;\n          }\n          if (pq.size() < PQ_SIZE) {\n            pq.offer(file);\n          }\n else {\n            if (file.lastModified() < pq.peek().lastModified()) {\n              pq.poll();\n              pq.offer(file);\n            }\n          }\n        }\n      }\n     }\n    Stack<File> stack=new Stack<File>();\n    while (!pq.isEmpty()) {\n      File file=pq.poll();\n      stack.push(file);\n    }\n    while (!stack.isEmpty() && toDeleteSize > 0) {\n      File file=stack.pop();\n      toDeleteSize-=file.length();\n      LOG.info(\"Delete file: {}, size: {}, lastModified: {}\",file.getCanonicalPath(),file.length(),file.lastModified());\n      file.delete();\n      deletedFiles++;\n    }\n    pq.clear();\n    round++;\n    if (round >= MAX_ROUNDS) {\n      if (forPerDir) {\n        LOG.warn(\"Reach the MAX_ROUNDS: {} during per-dir deletion, you may have too many files in \" + \"a single directory : {}, will delete the rest files in next interval.\",MAX_ROUNDS,dirs.get(0).getCanonicalPath());\n      }\n else {\n        LOG.warn(\"Reach the MAX_ROUNDS: {} during global deletion, you may have too many files, \" + \"will delete the rest files in next interval.\",MAX_ROUNDS);\n      }\n      break;\n    }\n  }\n  return deletedFiles;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 372,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 11,
                    "startLineNumber": 141,
                    "startColumnNumber": 12,
                    "endLineNumber": 141,
                    "endColumnNumber": 23
                },
                "nodeContext": "pq.clear();\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 4,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.util.PriorityQueue<java.io.File>"
        }
    ],
    "positionList": [
        {
            "charLength": 2,
            "startLineNumber": 117,
            "startColumnNumber": 28,
            "endLineNumber": 117,
            "endColumnNumber": 30
        },
        {
            "charLength": 2,
            "startLineNumber": 118,
            "startColumnNumber": 28,
            "endLineNumber": 118,
            "endColumnNumber": 30
        },
        {
            "charLength": 2,
            "startLineNumber": 120,
            "startColumnNumber": 54,
            "endLineNumber": 120,
            "endColumnNumber": 56
        },
        {
            "charLength": 2,
            "startLineNumber": 121,
            "startColumnNumber": 32,
            "endLineNumber": 121,
            "endColumnNumber": 34
        },
        {
            "charLength": 2,
            "startLineNumber": 122,
            "startColumnNumber": 32,
            "endLineNumber": 122,
            "endColumnNumber": 34
        },
        {
            "charLength": 2,
            "startLineNumber": 130,
            "startColumnNumber": 20,
            "endLineNumber": 130,
            "endColumnNumber": 22
        },
        {
            "charLength": 2,
            "startLineNumber": 131,
            "startColumnNumber": 28,
            "endLineNumber": 131,
            "endColumnNumber": 30
        },
        {
            "charLength": 2,
            "startLineNumber": 141,
            "startColumnNumber": 12,
            "endLineNumber": 141,
            "endColumnNumber": 14
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 5,
            "layout": 9
        },
        {
            "firstKey": 0,
            "secondKey": 6,
            "layout": 9
        },
        {
            "firstKey": 0,
            "secondKey": 7,
            "layout": 9
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 5,
            "layout": 10
        },
        {
            "firstKey": 1,
            "secondKey": 6,
            "layout": 10
        },
        {
            "firstKey": 1,
            "secondKey": 7,
            "layout": 10
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 5,
            "layout": 12
        },
        {
            "firstKey": 2,
            "secondKey": 6,
            "layout": 12
        },
        {
            "firstKey": 2,
            "secondKey": 7,
            "layout": 12
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 5,
            "layout": 12
        },
        {
            "firstKey": 3,
            "secondKey": 6,
            "layout": 12
        },
        {
            "firstKey": 3,
            "secondKey": 7,
            "layout": 12
        },
        {
            "firstKey": 4,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 5,
            "layout": 12
        },
        {
            "firstKey": 4,
            "secondKey": 6,
            "layout": 12
        },
        {
            "firstKey": 4,
            "secondKey": 7,
            "layout": 12
        },
        {
            "firstKey": 5,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 7,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 7,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 7,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 7,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 7,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 7,
            "secondKey": 6,
            "layout": 2
        }
    ]
}