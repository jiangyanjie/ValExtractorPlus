{
    "id": 831,
    "expression": "indexNode != null",
    "projectName": "jackrabbit-oak",
    "commitID": "58a0f096dee5f13a5591d924728f226bd2caa204",
    "filePath": "oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/LucenePropertyIndex.java",
    "occurrences": 1,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "indexNode != null",
            "nodeType": "InfixExpression",
            "nodePosition": {
                "charLength": 17,
                "startLineNumber": 349,
                "startColumnNumber": 27,
                "endLineNumber": 349,
                "endColumnNumber": 44
            },
            "astNodeNumber": 3,
            "astHeight": 2,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 29,
                        "startLineNumber": 349,
                        "startColumnNumber": 16,
                        "endLineNumber": 349,
                        "endColumnNumber": 45
                    },
                    "nodeContext": "checkState(indexNode != null)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 30,
                        "startLineNumber": 349,
                        "startColumnNumber": 16,
                        "endLineNumber": 349,
                        "endColumnNumber": 46
                    },
                    "nodeContext": "checkState(indexNode != null);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 6,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 6935,
                        "startLineNumber": 340,
                        "startColumnNumber": 39,
                        "endLineNumber": 466,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  if (noDocs) {\n    return false;\n  }\n  ScoreDoc lastDocToRecord=null;\n  final IndexNode indexNode=acquireIndexNode(plan);\n  checkState(indexNode != null);\n  try {\n    IndexSearcher searcher=indexNode.getSearcher();\n    LuceneRequestFacade luceneRequestFacade=getLuceneRequest(plan,searcher.getIndexReader());\n    if (luceneRequestFacade.getLuceneRequest() instanceof Query) {\n      Query query=(Query)luceneRequestFacade.getLuceneRequest();\n      CustomScoreQuery customScoreQuery=getCustomScoreQuery(plan,query);\n      if (customScoreQuery != null) {\n        query=customScoreQuery;\n      }\n      checkForIndexVersionChange(searcher);\n      TopDocs docs;\n      long start=PERF_LOGGER.start();\n      while (true) {\n        if (lastDoc != null) {\n          LOG.debug(\"loading the next {} entries for query {}\",nextBatchSize,query);\n          if (sort == null) {\n            docs=searcher.searchAfter(lastDoc,query,nextBatchSize);\n          }\n else {\n            docs=searcher.searchAfter(lastDoc,query,nextBatchSize,sort);\n          }\n        }\n else {\n          LOG.debug(\"loading the first {} entries for query {}\",nextBatchSize,query);\n          if (sort == null) {\n            docs=searcher.search(query,nextBatchSize);\n          }\n else {\n            docs=searcher.search(query,nextBatchSize,sort);\n          }\n        }\n        PERF_LOGGER.end(start,-1,\"{} ...\",docs.scoreDocs.length);\n        nextBatchSize=(int)Math.min(nextBatchSize * 2L,100000);\n        boolean addExcerpt=filter.getQueryStatement() != null && filter.getQueryStatement().contains(QueryImpl.REP_EXCERPT);\n        for (        ScoreDoc doc : docs.scoreDocs) {\n          String excerpt=null;\n          if (addExcerpt) {\n            excerpt=getExcerpt(indexNode,searcher,query,doc);\n          }\n          LuceneResultRow row=convertToRow(doc,searcher,excerpt);\n          if (row != null) {\n            queue.add(row);\n          }\n          lastDocToRecord=doc;\n        }\n        if (queue.isEmpty() && docs.scoreDocs.length > 0) {\n          lastDoc=lastDocToRecord;\n        }\n else {\n          break;\n        }\n      }\n    }\n else     if (luceneRequestFacade.getLuceneRequest() instanceof SpellcheckHelper.SpellcheckQuery) {\n      String aclCheckField=indexNode.getDefinition().isFullTextEnabled() ? FieldNames.FULLTEXT : FieldNames.SPELLCHECK;\n      SpellcheckHelper.SpellcheckQuery spellcheckQuery=(SpellcheckHelper.SpellcheckQuery)luceneRequestFacade.getLuceneRequest();\n      SuggestWord[] suggestWords=SpellcheckHelper.getSpellcheck(spellcheckQuery);\n      QueryParser qp=new QueryParser(Version.LUCENE_47,aclCheckField,indexNode.getDefinition().getAnalyzer());\n      for (      SuggestWord suggestion : suggestWords) {\n        Query query=qp.createPhraseQuery(aclCheckField,suggestion.string);\n        TopDocs topDocs=searcher.search(query,100);\n        if (topDocs.totalHits > 0) {\n          for (          ScoreDoc doc : topDocs.scoreDocs) {\n            Document retrievedDoc=searcher.doc(doc.doc);\n            if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n              queue.add(new LuceneResultRow(suggestion.string));\n              break;\n            }\n          }\n        }\n      }\n      noDocs=true;\n    }\n else     if (luceneRequestFacade.getLuceneRequest() instanceof SuggestHelper.SuggestQuery) {\n      SuggestHelper.SuggestQuery suggestQuery=(SuggestHelper.SuggestQuery)luceneRequestFacade.getLuceneRequest();\n      List<Lookup.LookupResult> lookupResults=SuggestHelper.getSuggestions(indexNode.getLookup(),suggestQuery);\n      QueryParser qp=new QueryParser(Version.LUCENE_47,FieldNames.SUGGEST,indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer());\n      for (      Lookup.LookupResult suggestion : lookupResults) {\n        Query query=qp.parse(\"\\\"\" + suggestion.key.toString() + \"\\\"\");\n        TopDocs topDocs=searcher.search(query,100);\n        if (topDocs.totalHits > 0) {\n          for (          ScoreDoc doc : topDocs.scoreDocs) {\n            Document retrievedDoc=searcher.doc(doc.doc);\n            if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n              queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n              break;\n            }\n          }\n        }\n      }\n      noDocs=true;\n    }\n  }\n catch (  Exception e) {\n    LOG.warn(\"query via {} failed.\",LucenePropertyIndex.this,e);\n  }\n finally {\n    indexNode.release();\n  }\n  if (lastDocToRecord != null) {\n    this.lastDoc=lastDocToRecord;\n  }\n  return !queue.isEmpty();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 635,
                    "astHeight": 21
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.AnonymousClassDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7101,
                        "startLineNumber": 336,
                        "startColumnNumber": 12,
                        "endLineNumber": 466,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "/** \n * Loads the lucene documents in batches\n * @return true if any document is loaded\n */\nprivate boolean loadDocs(){\n  if (noDocs) {\n    return false;\n  }\n  ScoreDoc lastDocToRecord=null;\n  final IndexNode indexNode=acquireIndexNode(plan);\n  checkState(indexNode != null);\n  try {\n    IndexSearcher searcher=indexNode.getSearcher();\n    LuceneRequestFacade luceneRequestFacade=getLuceneRequest(plan,searcher.getIndexReader());\n    if (luceneRequestFacade.getLuceneRequest() instanceof Query) {\n      Query query=(Query)luceneRequestFacade.getLuceneRequest();\n      CustomScoreQuery customScoreQuery=getCustomScoreQuery(plan,query);\n      if (customScoreQuery != null) {\n        query=customScoreQuery;\n      }\n      checkForIndexVersionChange(searcher);\n      TopDocs docs;\n      long start=PERF_LOGGER.start();\n      while (true) {\n        if (lastDoc != null) {\n          LOG.debug(\"loading the next {} entries for query {}\",nextBatchSize,query);\n          if (sort == null) {\n            docs=searcher.searchAfter(lastDoc,query,nextBatchSize);\n          }\n else {\n            docs=searcher.searchAfter(lastDoc,query,nextBatchSize,sort);\n          }\n        }\n else {\n          LOG.debug(\"loading the first {} entries for query {}\",nextBatchSize,query);\n          if (sort == null) {\n            docs=searcher.search(query,nextBatchSize);\n          }\n else {\n            docs=searcher.search(query,nextBatchSize,sort);\n          }\n        }\n        PERF_LOGGER.end(start,-1,\"{} ...\",docs.scoreDocs.length);\n        nextBatchSize=(int)Math.min(nextBatchSize * 2L,100000);\n        boolean addExcerpt=filter.getQueryStatement() != null && filter.getQueryStatement().contains(QueryImpl.REP_EXCERPT);\n        for (        ScoreDoc doc : docs.scoreDocs) {\n          String excerpt=null;\n          if (addExcerpt) {\n            excerpt=getExcerpt(indexNode,searcher,query,doc);\n          }\n          LuceneResultRow row=convertToRow(doc,searcher,excerpt);\n          if (row != null) {\n            queue.add(row);\n          }\n          lastDocToRecord=doc;\n        }\n        if (queue.isEmpty() && docs.scoreDocs.length > 0) {\n          lastDoc=lastDocToRecord;\n        }\n else {\n          break;\n        }\n      }\n    }\n else     if (luceneRequestFacade.getLuceneRequest() instanceof SpellcheckHelper.SpellcheckQuery) {\n      String aclCheckField=indexNode.getDefinition().isFullTextEnabled() ? FieldNames.FULLTEXT : FieldNames.SPELLCHECK;\n      SpellcheckHelper.SpellcheckQuery spellcheckQuery=(SpellcheckHelper.SpellcheckQuery)luceneRequestFacade.getLuceneRequest();\n      SuggestWord[] suggestWords=SpellcheckHelper.getSpellcheck(spellcheckQuery);\n      QueryParser qp=new QueryParser(Version.LUCENE_47,aclCheckField,indexNode.getDefinition().getAnalyzer());\n      for (      SuggestWord suggestion : suggestWords) {\n        Query query=qp.createPhraseQuery(aclCheckField,suggestion.string);\n        TopDocs topDocs=searcher.search(query,100);\n        if (topDocs.totalHits > 0) {\n          for (          ScoreDoc doc : topDocs.scoreDocs) {\n            Document retrievedDoc=searcher.doc(doc.doc);\n            if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n              queue.add(new LuceneResultRow(suggestion.string));\n              break;\n            }\n          }\n        }\n      }\n      noDocs=true;\n    }\n else     if (luceneRequestFacade.getLuceneRequest() instanceof SuggestHelper.SuggestQuery) {\n      SuggestHelper.SuggestQuery suggestQuery=(SuggestHelper.SuggestQuery)luceneRequestFacade.getLuceneRequest();\n      List<Lookup.LookupResult> lookupResults=SuggestHelper.getSuggestions(indexNode.getLookup(),suggestQuery);\n      QueryParser qp=new QueryParser(Version.LUCENE_47,FieldNames.SUGGEST,indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer());\n      for (      Lookup.LookupResult suggestion : lookupResults) {\n        Query query=qp.parse(\"\\\"\" + suggestion.key.toString() + \"\\\"\");\n        TopDocs topDocs=searcher.search(query,100);\n        if (topDocs.totalHits > 0) {\n          for (          ScoreDoc doc : topDocs.scoreDocs) {\n            Document retrievedDoc=searcher.doc(doc.doc);\n            if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n              queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n              break;\n            }\n          }\n        }\n      }\n      noDocs=true;\n    }\n  }\n catch (  Exception e) {\n    LOG.warn(\"query via {} failed.\",LucenePropertyIndex.this,e);\n  }\n finally {\n    indexNode.release();\n  }\n  if (lastDocToRecord != null) {\n    this.lastDoc=lastDocToRecord;\n  }\n  return !queue.isEmpty();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 640,
                    "astHeight": 22
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 30,
                    "startLineNumber": 349,
                    "startColumnNumber": 16,
                    "endLineNumber": 349,
                    "endColumnNumber": 46
                },
                "nodeContext": "checkState(indexNode != null);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 6,
                "astHeight": 4
            },
            "tokenLength": 3,
            "type": "boolean"
        }
    ],
    "positionList": [
        {
            "charLength": 17,
            "startLineNumber": 349,
            "startColumnNumber": 27,
            "endLineNumber": 349,
            "endColumnNumber": 44
        }
    ],
    "layoutRelationDataList": []
}