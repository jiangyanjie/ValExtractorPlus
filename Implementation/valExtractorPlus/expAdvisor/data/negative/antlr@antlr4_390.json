{
    "id": 390,
    "expression": "Math",
    "projectName": "antlr@antlr4",
    "commitID": "f2b93e550cd912be3973743d09206db98f4092c9",
    "filePath": "tool/src/org/antlr/v4/tool/Grammar.java",
    "occurrences": 1,
    "isArithmeticExpression": 0,
    "isGetTypeMethod": 0,
    "expressionList": [
        {
            "nodeContext": "Math",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 4,
                "startLineNumber": 791,
                "startColumnNumber": 22,
                "endLineNumber": 791,
                "endColumnNumber": 26
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 61,
                        "startLineNumber": 791,
                        "startColumnNumber": 22,
                        "endLineNumber": 791,
                        "endColumnNumber": 83
                    },
                    "nodeContext": "Math.min(literalNames.length,typeToStringLiteralList.size())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 9,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
                    "nodePosition": {
                        "charLength": 65,
                        "startLineNumber": 791,
                        "startColumnNumber": 18,
                        "endLineNumber": 791,
                        "endColumnNumber": 83
                    },
                    "nodeContext": "i < Math.min(literalNames.length,typeToStringLiteralList.size())",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 148,
                        "startLineNumber": 791,
                        "startColumnNumber": 2,
                        "endLineNumber": 793,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "for (int i=0; i < Math.min(literalNames.length,typeToStringLiteralList.size()); i++) {\n  literalNames[i]=typeToStringLiteralList.get(i);\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 29,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 527,
                        "startLineNumber": 788,
                        "startColumnNumber": 40,
                        "endLineNumber": 803,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "{\n  int numTokens=getMaxTokenType();\n  String[] literalNames=new String[numTokens + 1];\n  for (int i=0; i < Math.min(literalNames.length,typeToStringLiteralList.size()); i++) {\n    literalNames[i]=typeToStringLiteralList.get(i);\n  }\n  for (  Map.Entry<String,Integer> entry : stringLiteralToTypeMap.entrySet()) {\n    int value=entry.getValue();\n    if (value >= 0 && value < literalNames.length && literalNames[value] == null) {\n      literalNames[value]=entry.getKey();\n    }\n  }\n  return literalNames;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 101,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 643,
                        "startLineNumber": 784,
                        "startColumnNumber": 1,
                        "endLineNumber": 803,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "/** \n * Gets the literal names assigned to tokens in the grammar.\n */\npublic String[] getTokenLiteralNames(){\n  int numTokens=getMaxTokenType();\n  String[] literalNames=new String[numTokens + 1];\n  for (int i=0; i < Math.min(literalNames.length,typeToStringLiteralList.size()); i++) {\n    literalNames[i]=typeToStringLiteralList.get(i);\n  }\n  for (  Map.Entry<String,Integer> entry : stringLiteralToTypeMap.entrySet()) {\n    int value=entry.getValue();\n    if (value >= 0 && value < literalNames.length && literalNames[value] == null) {\n      literalNames[value]=entry.getKey();\n    }\n  }\n  return literalNames;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 109,
                    "astHeight": 10
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
                "nodePosition": {
                    "charLength": 65,
                    "startLineNumber": 791,
                    "startColumnNumber": 18,
                    "endLineNumber": 791,
                    "endColumnNumber": 83
                },
                "nodeContext": "i < Math.min(literalNames.length,typeToStringLiteralList.size())",
                "nodeType": "InfixExpression",
                "astNodeNumber": 11,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "java.lang.Math"
        }
    ],
    "positionList": [
        {
            "charLength": 4,
            "startLineNumber": 791,
            "startColumnNumber": 22,
            "endLineNumber": 791,
            "endColumnNumber": 26
        }
    ],
    "layoutRelationDataList": []
}