{
    "id": 72,
    "expression": "initialReader",
    "projectName": "johnzon",
    "commitID": "cf35affe65d8a4a4789071b86d04423a8ab41a03",
    "filePath": "johnzon-jsonb/src/main/java/org/apache/johnzon/jsonb/JsonbAccessMode.java",
    "occurrences": 10,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "initialReader",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 13,
                "startLineNumber": 441,
                "startColumnNumber": 28,
                "endLineNumber": 441,
                "endColumnNumber": 41
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 38,
                        "startLineNumber": 441,
                        "startColumnNumber": 16,
                        "endLineNumber": 441,
                        "endColumnNumber": 54
                    },
                    "nodeContext": "isTransient(initialReader,visibility)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 153,
                        "startLineNumber": 441,
                        "startColumnNumber": 12,
                        "endLineNumber": 444,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (isTransient(initialReader,visibility)) {\n  validateAnnotationsOnTransientField(initialReader);\n  continue;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 11,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 4006,
                        "startLineNumber": 439,
                        "startColumnNumber": 73,
                        "endLineNumber": 525,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final Reader initialReader=entry.getValue();\n  if (isTransient(initialReader,visibility)) {\n    validateAnnotationsOnTransientField(initialReader);\n    continue;\n  }\n  if (initialReader.getAnnotation(JohnzonAny.class) != null) {\n    continue;\n  }\n  final Reader finalReader;\n  if (FieldAndMethodAccessMode.CompositeDecoratedType.class.isInstance(initialReader)) {\n    final FieldAndMethodAccessMode.CompositeDecoratedType decoratedType=FieldAndMethodAccessMode.CompositeDecoratedType.class.cast(initialReader);\n    final DecoratedType type2=decoratedType.getType2();\n    if (MethodAccessMode.MethodReader.class.isInstance(type2)) {\n      finalReader=Reader.class.cast(type2);\n    }\n else {\n      finalReader=initialReader;\n    }\n  }\n else {\n    finalReader=initialReader;\n  }\n  final Type type;\n  final Function<Object,Object> reader;\n  if (isOptional(finalReader)) {\n    type=ParameterizedType.class.cast(finalReader.getType()).getActualTypeArguments()[0];\n    reader=i -> ofNullable(finalReader.read(i)).map(o -> Optional.class.cast(o).orElse(null)).orElse(null);\n  }\n else   if (OptionalInt.class == finalReader.getType()) {\n    type=int.class;\n    reader=i -> OptionalInt.class.cast(finalReader.read(i)).orElse(0);\n  }\n else   if (OptionalLong.class == finalReader.getType()) {\n    type=long.class;\n    reader=i -> OptionalLong.class.cast(finalReader.read(i)).orElse(0);\n  }\n else   if (OptionalDouble.class == finalReader.getType()) {\n    type=double.class;\n    reader=i -> OptionalDouble.class.cast(finalReader.read(i)).orElse(0);\n  }\n else {\n    type=finalReader.getType();\n    reader=finalReader::read;\n  }\n  final WriterConverters writerConverters=new WriterConverters(initialReader,types);\n  final JsonbProperty property=initialReader.getAnnotation(JsonbProperty.class);\n  final JsonbNillable nillable=initialReader.getClassOrPackageAnnotation(JsonbNillable.class);\n  final boolean isNillable=isNillable(property,nillable);\n  final String key=property == null || property.value().isEmpty() ? naming.translateName(entry.getKey()) : property.value();\n  if (result.put(key,new Reader(){\n    @Override public Object read(    final Object instance){\n      return reader.apply(instance);\n    }\n    @Override public ObjectConverter.Writer<?> findObjectConverterWriter(){\n      return writerConverters.writer;\n    }\n    @Override public Type getType(){\n      return type;\n    }\n    @Override public <T extends Annotation>T getAnnotation(    final Class<T> clazz){\n      return finalReader.getAnnotation(clazz);\n    }\n    @Override public <T extends Annotation>T getClassOrPackageAnnotation(    final Class<T> clazz){\n      return finalReader.getClassOrPackageAnnotation(clazz);\n    }\n    @Override public Adapter<?,?> findConverter(){\n      return writerConverters.converter;\n    }\n    @Override public boolean isNillable(    final boolean global){\n      return isNillable;\n    }\n  }\n) != null) {\n    throw new JsonbException(\"Ambiguous field \" + key);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 487,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4071,
                        "startLineNumber": 439,
                        "startColumnNumber": 8,
                        "endLineNumber": 525,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (final Map.Entry<String,Reader> entry : readers.entrySet()) {\n  final Reader initialReader=entry.getValue();\n  if (isTransient(initialReader,visibility)) {\n    validateAnnotationsOnTransientField(initialReader);\n    continue;\n  }\n  if (initialReader.getAnnotation(JohnzonAny.class) != null) {\n    continue;\n  }\n  final Reader finalReader;\n  if (FieldAndMethodAccessMode.CompositeDecoratedType.class.isInstance(initialReader)) {\n    final FieldAndMethodAccessMode.CompositeDecoratedType decoratedType=FieldAndMethodAccessMode.CompositeDecoratedType.class.cast(initialReader);\n    final DecoratedType type2=decoratedType.getType2();\n    if (MethodAccessMode.MethodReader.class.isInstance(type2)) {\n      finalReader=Reader.class.cast(type2);\n    }\n else {\n      finalReader=initialReader;\n    }\n  }\n else {\n    finalReader=initialReader;\n  }\n  final Type type;\n  final Function<Object,Object> reader;\n  if (isOptional(finalReader)) {\n    type=ParameterizedType.class.cast(finalReader.getType()).getActualTypeArguments()[0];\n    reader=i -> ofNullable(finalReader.read(i)).map(o -> Optional.class.cast(o).orElse(null)).orElse(null);\n  }\n else   if (OptionalInt.class == finalReader.getType()) {\n    type=int.class;\n    reader=i -> OptionalInt.class.cast(finalReader.read(i)).orElse(0);\n  }\n else   if (OptionalLong.class == finalReader.getType()) {\n    type=long.class;\n    reader=i -> OptionalLong.class.cast(finalReader.read(i)).orElse(0);\n  }\n else   if (OptionalDouble.class == finalReader.getType()) {\n    type=double.class;\n    reader=i -> OptionalDouble.class.cast(finalReader.read(i)).orElse(0);\n  }\n else {\n    type=finalReader.getType();\n    reader=finalReader::read;\n  }\n  final WriterConverters writerConverters=new WriterConverters(initialReader,types);\n  final JsonbProperty property=initialReader.getAnnotation(JsonbProperty.class);\n  final JsonbNillable nillable=initialReader.getClassOrPackageAnnotation(JsonbNillable.class);\n  final boolean isNillable=isNillable(property,nillable);\n  final String key=property == null || property.value().isEmpty() ? naming.translateName(entry.getKey()) : property.value();\n  if (result.put(key,new Reader(){\n    @Override public Object read(    final Object instance){\n      return reader.apply(instance);\n    }\n    @Override public ObjectConverter.Writer<?> findObjectConverterWriter(){\n      return writerConverters.writer;\n    }\n    @Override public Type getType(){\n      return type;\n    }\n    @Override public <T extends Annotation>T getAnnotation(    final Class<T> clazz){\n      return finalReader.getAnnotation(clazz);\n    }\n    @Override public <T extends Annotation>T getClassOrPackageAnnotation(    final Class<T> clazz){\n      return finalReader.getClassOrPackageAnnotation(clazz);\n    }\n    @Override public Adapter<?,?> findConverter(){\n      return writerConverters.converter;\n    }\n    @Override public boolean isNillable(    final boolean global){\n      return isNillable;\n    }\n  }\n) != null) {\n    throw new JsonbException(\"Ambiguous field \" + key);\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 503,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4372,
                        "startLineNumber": 434,
                        "startColumnNumber": 65,
                        "endLineNumber": 527,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final Map<String,Reader> readers=delegate.findReaders(clazz);\n  final Comparator<String> keyComparator=fieldComparator(clazz);\n  final Map<String,Reader> result=keyComparator == null ? new HashMap<>() : new TreeMap<>(keyComparator);\n  for (  final Map.Entry<String,Reader> entry : readers.entrySet()) {\n    final Reader initialReader=entry.getValue();\n    if (isTransient(initialReader,visibility)) {\n      validateAnnotationsOnTransientField(initialReader);\n      continue;\n    }\n    if (initialReader.getAnnotation(JohnzonAny.class) != null) {\n      continue;\n    }\n    final Reader finalReader;\n    if (FieldAndMethodAccessMode.CompositeDecoratedType.class.isInstance(initialReader)) {\n      final FieldAndMethodAccessMode.CompositeDecoratedType decoratedType=FieldAndMethodAccessMode.CompositeDecoratedType.class.cast(initialReader);\n      final DecoratedType type2=decoratedType.getType2();\n      if (MethodAccessMode.MethodReader.class.isInstance(type2)) {\n        finalReader=Reader.class.cast(type2);\n      }\n else {\n        finalReader=initialReader;\n      }\n    }\n else {\n      finalReader=initialReader;\n    }\n    final Type type;\n    final Function<Object,Object> reader;\n    if (isOptional(finalReader)) {\n      type=ParameterizedType.class.cast(finalReader.getType()).getActualTypeArguments()[0];\n      reader=i -> ofNullable(finalReader.read(i)).map(o -> Optional.class.cast(o).orElse(null)).orElse(null);\n    }\n else     if (OptionalInt.class == finalReader.getType()) {\n      type=int.class;\n      reader=i -> OptionalInt.class.cast(finalReader.read(i)).orElse(0);\n    }\n else     if (OptionalLong.class == finalReader.getType()) {\n      type=long.class;\n      reader=i -> OptionalLong.class.cast(finalReader.read(i)).orElse(0);\n    }\n else     if (OptionalDouble.class == finalReader.getType()) {\n      type=double.class;\n      reader=i -> OptionalDouble.class.cast(finalReader.read(i)).orElse(0);\n    }\n else {\n      type=finalReader.getType();\n      reader=finalReader::read;\n    }\n    final WriterConverters writerConverters=new WriterConverters(initialReader,types);\n    final JsonbProperty property=initialReader.getAnnotation(JsonbProperty.class);\n    final JsonbNillable nillable=initialReader.getClassOrPackageAnnotation(JsonbNillable.class);\n    final boolean isNillable=isNillable(property,nillable);\n    final String key=property == null || property.value().isEmpty() ? naming.translateName(entry.getKey()) : property.value();\n    if (result.put(key,new Reader(){\n      @Override public Object read(      final Object instance){\n        return reader.apply(instance);\n      }\n      @Override public ObjectConverter.Writer<?> findObjectConverterWriter(){\n        return writerConverters.writer;\n      }\n      @Override public Type getType(){\n        return type;\n      }\n      @Override public <T extends Annotation>T getAnnotation(      final Class<T> clazz){\n        return finalReader.getAnnotation(clazz);\n      }\n      @Override public <T extends Annotation>T getClassOrPackageAnnotation(      final Class<T> clazz){\n        return finalReader.getClassOrPackageAnnotation(clazz);\n      }\n      @Override public Adapter<?,?> findConverter(){\n        return writerConverters.converter;\n      }\n      @Override public boolean isNillable(      final boolean global){\n        return isNillable;\n      }\n    }\n) != null) {\n      throw new JsonbException(\"Ambiguous field \" + key);\n    }\n  }\n  return result;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 557,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4447,
                        "startLineNumber": 433,
                        "startColumnNumber": 4,
                        "endLineNumber": 527,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public Map<String,Reader> findReaders(final Class<?> clazz){\n  final Map<String,Reader> readers=delegate.findReaders(clazz);\n  final Comparator<String> keyComparator=fieldComparator(clazz);\n  final Map<String,Reader> result=keyComparator == null ? new HashMap<>() : new TreeMap<>(keyComparator);\n  for (  final Map.Entry<String,Reader> entry : readers.entrySet()) {\n    final Reader initialReader=entry.getValue();\n    if (isTransient(initialReader,visibility)) {\n      validateAnnotationsOnTransientField(initialReader);\n      continue;\n    }\n    if (initialReader.getAnnotation(JohnzonAny.class) != null) {\n      continue;\n    }\n    final Reader finalReader;\n    if (FieldAndMethodAccessMode.CompositeDecoratedType.class.isInstance(initialReader)) {\n      final FieldAndMethodAccessMode.CompositeDecoratedType decoratedType=FieldAndMethodAccessMode.CompositeDecoratedType.class.cast(initialReader);\n      final DecoratedType type2=decoratedType.getType2();\n      if (MethodAccessMode.MethodReader.class.isInstance(type2)) {\n        finalReader=Reader.class.cast(type2);\n      }\n else {\n        finalReader=initialReader;\n      }\n    }\n else {\n      finalReader=initialReader;\n    }\n    final Type type;\n    final Function<Object,Object> reader;\n    if (isOptional(finalReader)) {\n      type=ParameterizedType.class.cast(finalReader.getType()).getActualTypeArguments()[0];\n      reader=i -> ofNullable(finalReader.read(i)).map(o -> Optional.class.cast(o).orElse(null)).orElse(null);\n    }\n else     if (OptionalInt.class == finalReader.getType()) {\n      type=int.class;\n      reader=i -> OptionalInt.class.cast(finalReader.read(i)).orElse(0);\n    }\n else     if (OptionalLong.class == finalReader.getType()) {\n      type=long.class;\n      reader=i -> OptionalLong.class.cast(finalReader.read(i)).orElse(0);\n    }\n else     if (OptionalDouble.class == finalReader.getType()) {\n      type=double.class;\n      reader=i -> OptionalDouble.class.cast(finalReader.read(i)).orElse(0);\n    }\n else {\n      type=finalReader.getType();\n      reader=finalReader::read;\n    }\n    final WriterConverters writerConverters=new WriterConverters(initialReader,types);\n    final JsonbProperty property=initialReader.getAnnotation(JsonbProperty.class);\n    final JsonbNillable nillable=initialReader.getClassOrPackageAnnotation(JsonbNillable.class);\n    final boolean isNillable=isNillable(property,nillable);\n    final String key=property == null || property.value().isEmpty() ? naming.translateName(entry.getKey()) : property.value();\n    if (result.put(key,new Reader(){\n      @Override public Object read(      final Object instance){\n        return reader.apply(instance);\n      }\n      @Override public ObjectConverter.Writer<?> findObjectConverterWriter(){\n        return writerConverters.writer;\n      }\n      @Override public Type getType(){\n        return type;\n      }\n      @Override public <T extends Annotation>T getAnnotation(      final Class<T> clazz){\n        return finalReader.getAnnotation(clazz);\n      }\n      @Override public <T extends Annotation>T getClassOrPackageAnnotation(      final Class<T> clazz){\n        return finalReader.getClassOrPackageAnnotation(clazz);\n      }\n      @Override public Adapter<?,?> findConverter(){\n        return writerConverters.converter;\n      }\n      @Override public boolean isNillable(      final boolean global){\n        return isNillable;\n      }\n    }\n) != null) {\n      throw new JsonbException(\"Ambiguous field \" + key);\n    }\n  }\n  return result;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 576,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 38,
                    "startLineNumber": 441,
                    "startColumnNumber": 16,
                    "endLineNumber": 441,
                    "endColumnNumber": 54
                },
                "nodeContext": "isTransient(initialReader,visibility)",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 4,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "org.apache.johnzon.mapper.access.AccessMode.Reader"
        },
        {
            "nodeContext": "initialReader",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 13,
                "startLineNumber": 442,
                "startColumnNumber": 52,
                "endLineNumber": 442,
                "endColumnNumber": 65
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 50,
                        "startLineNumber": 442,
                        "startColumnNumber": 16,
                        "endLineNumber": 442,
                        "endColumnNumber": 66
                    },
                    "nodeContext": "validateAnnotationsOnTransientField(initialReader)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 51,
                        "startLineNumber": 442,
                        "startColumnNumber": 16,
                        "endLineNumber": 442,
                        "endColumnNumber": 67
                    },
                    "nodeContext": "validateAnnotationsOnTransientField(initialReader);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 109,
                        "startLineNumber": 441,
                        "startColumnNumber": 56,
                        "endLineNumber": 444,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  validateAnnotationsOnTransientField(initialReader);\n  continue;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 6,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 153,
                        "startLineNumber": 441,
                        "startColumnNumber": 12,
                        "endLineNumber": 444,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (isTransient(initialReader,visibility)) {\n  validateAnnotationsOnTransientField(initialReader);\n  continue;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 11,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 4006,
                        "startLineNumber": 439,
                        "startColumnNumber": 73,
                        "endLineNumber": 525,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final Reader initialReader=entry.getValue();\n  if (isTransient(initialReader,visibility)) {\n    validateAnnotationsOnTransientField(initialReader);\n    continue;\n  }\n  if (initialReader.getAnnotation(JohnzonAny.class) != null) {\n    continue;\n  }\n  final Reader finalReader;\n  if (FieldAndMethodAccessMode.CompositeDecoratedType.class.isInstance(initialReader)) {\n    final FieldAndMethodAccessMode.CompositeDecoratedType decoratedType=FieldAndMethodAccessMode.CompositeDecoratedType.class.cast(initialReader);\n    final DecoratedType type2=decoratedType.getType2();\n    if (MethodAccessMode.MethodReader.class.isInstance(type2)) {\n      finalReader=Reader.class.cast(type2);\n    }\n else {\n      finalReader=initialReader;\n    }\n  }\n else {\n    finalReader=initialReader;\n  }\n  final Type type;\n  final Function<Object,Object> reader;\n  if (isOptional(finalReader)) {\n    type=ParameterizedType.class.cast(finalReader.getType()).getActualTypeArguments()[0];\n    reader=i -> ofNullable(finalReader.read(i)).map(o -> Optional.class.cast(o).orElse(null)).orElse(null);\n  }\n else   if (OptionalInt.class == finalReader.getType()) {\n    type=int.class;\n    reader=i -> OptionalInt.class.cast(finalReader.read(i)).orElse(0);\n  }\n else   if (OptionalLong.class == finalReader.getType()) {\n    type=long.class;\n    reader=i -> OptionalLong.class.cast(finalReader.read(i)).orElse(0);\n  }\n else   if (OptionalDouble.class == finalReader.getType()) {\n    type=double.class;\n    reader=i -> OptionalDouble.class.cast(finalReader.read(i)).orElse(0);\n  }\n else {\n    type=finalReader.getType();\n    reader=finalReader::read;\n  }\n  final WriterConverters writerConverters=new WriterConverters(initialReader,types);\n  final JsonbProperty property=initialReader.getAnnotation(JsonbProperty.class);\n  final JsonbNillable nillable=initialReader.getClassOrPackageAnnotation(JsonbNillable.class);\n  final boolean isNillable=isNillable(property,nillable);\n  final String key=property == null || property.value().isEmpty() ? naming.translateName(entry.getKey()) : property.value();\n  if (result.put(key,new Reader(){\n    @Override public Object read(    final Object instance){\n      return reader.apply(instance);\n    }\n    @Override public ObjectConverter.Writer<?> findObjectConverterWriter(){\n      return writerConverters.writer;\n    }\n    @Override public Type getType(){\n      return type;\n    }\n    @Override public <T extends Annotation>T getAnnotation(    final Class<T> clazz){\n      return finalReader.getAnnotation(clazz);\n    }\n    @Override public <T extends Annotation>T getClassOrPackageAnnotation(    final Class<T> clazz){\n      return finalReader.getClassOrPackageAnnotation(clazz);\n    }\n    @Override public Adapter<?,?> findConverter(){\n      return writerConverters.converter;\n    }\n    @Override public boolean isNillable(    final boolean global){\n      return isNillable;\n    }\n  }\n) != null) {\n    throw new JsonbException(\"Ambiguous field \" + key);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 487,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4071,
                        "startLineNumber": 439,
                        "startColumnNumber": 8,
                        "endLineNumber": 525,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (final Map.Entry<String,Reader> entry : readers.entrySet()) {\n  final Reader initialReader=entry.getValue();\n  if (isTransient(initialReader,visibility)) {\n    validateAnnotationsOnTransientField(initialReader);\n    continue;\n  }\n  if (initialReader.getAnnotation(JohnzonAny.class) != null) {\n    continue;\n  }\n  final Reader finalReader;\n  if (FieldAndMethodAccessMode.CompositeDecoratedType.class.isInstance(initialReader)) {\n    final FieldAndMethodAccessMode.CompositeDecoratedType decoratedType=FieldAndMethodAccessMode.CompositeDecoratedType.class.cast(initialReader);\n    final DecoratedType type2=decoratedType.getType2();\n    if (MethodAccessMode.MethodReader.class.isInstance(type2)) {\n      finalReader=Reader.class.cast(type2);\n    }\n else {\n      finalReader=initialReader;\n    }\n  }\n else {\n    finalReader=initialReader;\n  }\n  final Type type;\n  final Function<Object,Object> reader;\n  if (isOptional(finalReader)) {\n    type=ParameterizedType.class.cast(finalReader.getType()).getActualTypeArguments()[0];\n    reader=i -> ofNullable(finalReader.read(i)).map(o -> Optional.class.cast(o).orElse(null)).orElse(null);\n  }\n else   if (OptionalInt.class == finalReader.getType()) {\n    type=int.class;\n    reader=i -> OptionalInt.class.cast(finalReader.read(i)).orElse(0);\n  }\n else   if (OptionalLong.class == finalReader.getType()) {\n    type=long.class;\n    reader=i -> OptionalLong.class.cast(finalReader.read(i)).orElse(0);\n  }\n else   if (OptionalDouble.class == finalReader.getType()) {\n    type=double.class;\n    reader=i -> OptionalDouble.class.cast(finalReader.read(i)).orElse(0);\n  }\n else {\n    type=finalReader.getType();\n    reader=finalReader::read;\n  }\n  final WriterConverters writerConverters=new WriterConverters(initialReader,types);\n  final JsonbProperty property=initialReader.getAnnotation(JsonbProperty.class);\n  final JsonbNillable nillable=initialReader.getClassOrPackageAnnotation(JsonbNillable.class);\n  final boolean isNillable=isNillable(property,nillable);\n  final String key=property == null || property.value().isEmpty() ? naming.translateName(entry.getKey()) : property.value();\n  if (result.put(key,new Reader(){\n    @Override public Object read(    final Object instance){\n      return reader.apply(instance);\n    }\n    @Override public ObjectConverter.Writer<?> findObjectConverterWriter(){\n      return writerConverters.writer;\n    }\n    @Override public Type getType(){\n      return type;\n    }\n    @Override public <T extends Annotation>T getAnnotation(    final Class<T> clazz){\n      return finalReader.getAnnotation(clazz);\n    }\n    @Override public <T extends Annotation>T getClassOrPackageAnnotation(    final Class<T> clazz){\n      return finalReader.getClassOrPackageAnnotation(clazz);\n    }\n    @Override public Adapter<?,?> findConverter(){\n      return writerConverters.converter;\n    }\n    @Override public boolean isNillable(    final boolean global){\n      return isNillable;\n    }\n  }\n) != null) {\n    throw new JsonbException(\"Ambiguous field \" + key);\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 503,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4372,
                        "startLineNumber": 434,
                        "startColumnNumber": 65,
                        "endLineNumber": 527,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final Map<String,Reader> readers=delegate.findReaders(clazz);\n  final Comparator<String> keyComparator=fieldComparator(clazz);\n  final Map<String,Reader> result=keyComparator == null ? new HashMap<>() : new TreeMap<>(keyComparator);\n  for (  final Map.Entry<String,Reader> entry : readers.entrySet()) {\n    final Reader initialReader=entry.getValue();\n    if (isTransient(initialReader,visibility)) {\n      validateAnnotationsOnTransientField(initialReader);\n      continue;\n    }\n    if (initialReader.getAnnotation(JohnzonAny.class) != null) {\n      continue;\n    }\n    final Reader finalReader;\n    if (FieldAndMethodAccessMode.CompositeDecoratedType.class.isInstance(initialReader)) {\n      final FieldAndMethodAccessMode.CompositeDecoratedType decoratedType=FieldAndMethodAccessMode.CompositeDecoratedType.class.cast(initialReader);\n      final DecoratedType type2=decoratedType.getType2();\n      if (MethodAccessMode.MethodReader.class.isInstance(type2)) {\n        finalReader=Reader.class.cast(type2);\n      }\n else {\n        finalReader=initialReader;\n      }\n    }\n else {\n      finalReader=initialReader;\n    }\n    final Type type;\n    final Function<Object,Object> reader;\n    if (isOptional(finalReader)) {\n      type=ParameterizedType.class.cast(finalReader.getType()).getActualTypeArguments()[0];\n      reader=i -> ofNullable(finalReader.read(i)).map(o -> Optional.class.cast(o).orElse(null)).orElse(null);\n    }\n else     if (OptionalInt.class == finalReader.getType()) {\n      type=int.class;\n      reader=i -> OptionalInt.class.cast(finalReader.read(i)).orElse(0);\n    }\n else     if (OptionalLong.class == finalReader.getType()) {\n      type=long.class;\n      reader=i -> OptionalLong.class.cast(finalReader.read(i)).orElse(0);\n    }\n else     if (OptionalDouble.class == finalReader.getType()) {\n      type=double.class;\n      reader=i -> OptionalDouble.class.cast(finalReader.read(i)).orElse(0);\n    }\n else {\n      type=finalReader.getType();\n      reader=finalReader::read;\n    }\n    final WriterConverters writerConverters=new WriterConverters(initialReader,types);\n    final JsonbProperty property=initialReader.getAnnotation(JsonbProperty.class);\n    final JsonbNillable nillable=initialReader.getClassOrPackageAnnotation(JsonbNillable.class);\n    final boolean isNillable=isNillable(property,nillable);\n    final String key=property == null || property.value().isEmpty() ? naming.translateName(entry.getKey()) : property.value();\n    if (result.put(key,new Reader(){\n      @Override public Object read(      final Object instance){\n        return reader.apply(instance);\n      }\n      @Override public ObjectConverter.Writer<?> findObjectConverterWriter(){\n        return writerConverters.writer;\n      }\n      @Override public Type getType(){\n        return type;\n      }\n      @Override public <T extends Annotation>T getAnnotation(      final Class<T> clazz){\n        return finalReader.getAnnotation(clazz);\n      }\n      @Override public <T extends Annotation>T getClassOrPackageAnnotation(      final Class<T> clazz){\n        return finalReader.getClassOrPackageAnnotation(clazz);\n      }\n      @Override public Adapter<?,?> findConverter(){\n        return writerConverters.converter;\n      }\n      @Override public boolean isNillable(      final boolean global){\n        return isNillable;\n      }\n    }\n) != null) {\n      throw new JsonbException(\"Ambiguous field \" + key);\n    }\n  }\n  return result;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 557,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4447,
                        "startLineNumber": 433,
                        "startColumnNumber": 4,
                        "endLineNumber": 527,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public Map<String,Reader> findReaders(final Class<?> clazz){\n  final Map<String,Reader> readers=delegate.findReaders(clazz);\n  final Comparator<String> keyComparator=fieldComparator(clazz);\n  final Map<String,Reader> result=keyComparator == null ? new HashMap<>() : new TreeMap<>(keyComparator);\n  for (  final Map.Entry<String,Reader> entry : readers.entrySet()) {\n    final Reader initialReader=entry.getValue();\n    if (isTransient(initialReader,visibility)) {\n      validateAnnotationsOnTransientField(initialReader);\n      continue;\n    }\n    if (initialReader.getAnnotation(JohnzonAny.class) != null) {\n      continue;\n    }\n    final Reader finalReader;\n    if (FieldAndMethodAccessMode.CompositeDecoratedType.class.isInstance(initialReader)) {\n      final FieldAndMethodAccessMode.CompositeDecoratedType decoratedType=FieldAndMethodAccessMode.CompositeDecoratedType.class.cast(initialReader);\n      final DecoratedType type2=decoratedType.getType2();\n      if (MethodAccessMode.MethodReader.class.isInstance(type2)) {\n        finalReader=Reader.class.cast(type2);\n      }\n else {\n        finalReader=initialReader;\n      }\n    }\n else {\n      finalReader=initialReader;\n    }\n    final Type type;\n    final Function<Object,Object> reader;\n    if (isOptional(finalReader)) {\n      type=ParameterizedType.class.cast(finalReader.getType()).getActualTypeArguments()[0];\n      reader=i -> ofNullable(finalReader.read(i)).map(o -> Optional.class.cast(o).orElse(null)).orElse(null);\n    }\n else     if (OptionalInt.class == finalReader.getType()) {\n      type=int.class;\n      reader=i -> OptionalInt.class.cast(finalReader.read(i)).orElse(0);\n    }\n else     if (OptionalLong.class == finalReader.getType()) {\n      type=long.class;\n      reader=i -> OptionalLong.class.cast(finalReader.read(i)).orElse(0);\n    }\n else     if (OptionalDouble.class == finalReader.getType()) {\n      type=double.class;\n      reader=i -> OptionalDouble.class.cast(finalReader.read(i)).orElse(0);\n    }\n else {\n      type=finalReader.getType();\n      reader=finalReader::read;\n    }\n    final WriterConverters writerConverters=new WriterConverters(initialReader,types);\n    final JsonbProperty property=initialReader.getAnnotation(JsonbProperty.class);\n    final JsonbNillable nillable=initialReader.getClassOrPackageAnnotation(JsonbNillable.class);\n    final boolean isNillable=isNillable(property,nillable);\n    final String key=property == null || property.value().isEmpty() ? naming.translateName(entry.getKey()) : property.value();\n    if (result.put(key,new Reader(){\n      @Override public Object read(      final Object instance){\n        return reader.apply(instance);\n      }\n      @Override public ObjectConverter.Writer<?> findObjectConverterWriter(){\n        return writerConverters.writer;\n      }\n      @Override public Type getType(){\n        return type;\n      }\n      @Override public <T extends Annotation>T getAnnotation(      final Class<T> clazz){\n        return finalReader.getAnnotation(clazz);\n      }\n      @Override public <T extends Annotation>T getClassOrPackageAnnotation(      final Class<T> clazz){\n        return finalReader.getClassOrPackageAnnotation(clazz);\n      }\n      @Override public Adapter<?,?> findConverter(){\n        return writerConverters.converter;\n      }\n      @Override public boolean isNillable(      final boolean global){\n        return isNillable;\n      }\n    }\n) != null) {\n      throw new JsonbException(\"Ambiguous field \" + key);\n    }\n  }\n  return result;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 576,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 51,
                    "startLineNumber": 442,
                    "startColumnNumber": 16,
                    "endLineNumber": 442,
                    "endColumnNumber": 67
                },
                "nodeContext": "validateAnnotationsOnTransientField(initialReader);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 4,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "org.apache.johnzon.mapper.access.AccessMode.Reader"
        },
        {
            "nodeContext": "initialReader",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 13,
                "startLineNumber": 445,
                "startColumnNumber": 16,
                "endLineNumber": 445,
                "endColumnNumber": 29
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 45,
                        "startLineNumber": 445,
                        "startColumnNumber": 16,
                        "endLineNumber": 445,
                        "endColumnNumber": 61
                    },
                    "nodeContext": "initialReader.getAnnotation(JohnzonAny.class)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 6,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 53,
                        "startLineNumber": 445,
                        "startColumnNumber": 16,
                        "endLineNumber": 445,
                        "endColumnNumber": 69
                    },
                    "nodeContext": "initialReader.getAnnotation(JohnzonAny.class) != null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 100,
                        "startLineNumber": 445,
                        "startColumnNumber": 12,
                        "endLineNumber": 447,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (initialReader.getAnnotation(JohnzonAny.class) != null) {\n  continue;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 11,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 4006,
                        "startLineNumber": 439,
                        "startColumnNumber": 73,
                        "endLineNumber": 525,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final Reader initialReader=entry.getValue();\n  if (isTransient(initialReader,visibility)) {\n    validateAnnotationsOnTransientField(initialReader);\n    continue;\n  }\n  if (initialReader.getAnnotation(JohnzonAny.class) != null) {\n    continue;\n  }\n  final Reader finalReader;\n  if (FieldAndMethodAccessMode.CompositeDecoratedType.class.isInstance(initialReader)) {\n    final FieldAndMethodAccessMode.CompositeDecoratedType decoratedType=FieldAndMethodAccessMode.CompositeDecoratedType.class.cast(initialReader);\n    final DecoratedType type2=decoratedType.getType2();\n    if (MethodAccessMode.MethodReader.class.isInstance(type2)) {\n      finalReader=Reader.class.cast(type2);\n    }\n else {\n      finalReader=initialReader;\n    }\n  }\n else {\n    finalReader=initialReader;\n  }\n  final Type type;\n  final Function<Object,Object> reader;\n  if (isOptional(finalReader)) {\n    type=ParameterizedType.class.cast(finalReader.getType()).getActualTypeArguments()[0];\n    reader=i -> ofNullable(finalReader.read(i)).map(o -> Optional.class.cast(o).orElse(null)).orElse(null);\n  }\n else   if (OptionalInt.class == finalReader.getType()) {\n    type=int.class;\n    reader=i -> OptionalInt.class.cast(finalReader.read(i)).orElse(0);\n  }\n else   if (OptionalLong.class == finalReader.getType()) {\n    type=long.class;\n    reader=i -> OptionalLong.class.cast(finalReader.read(i)).orElse(0);\n  }\n else   if (OptionalDouble.class == finalReader.getType()) {\n    type=double.class;\n    reader=i -> OptionalDouble.class.cast(finalReader.read(i)).orElse(0);\n  }\n else {\n    type=finalReader.getType();\n    reader=finalReader::read;\n  }\n  final WriterConverters writerConverters=new WriterConverters(initialReader,types);\n  final JsonbProperty property=initialReader.getAnnotation(JsonbProperty.class);\n  final JsonbNillable nillable=initialReader.getClassOrPackageAnnotation(JsonbNillable.class);\n  final boolean isNillable=isNillable(property,nillable);\n  final String key=property == null || property.value().isEmpty() ? naming.translateName(entry.getKey()) : property.value();\n  if (result.put(key,new Reader(){\n    @Override public Object read(    final Object instance){\n      return reader.apply(instance);\n    }\n    @Override public ObjectConverter.Writer<?> findObjectConverterWriter(){\n      return writerConverters.writer;\n    }\n    @Override public Type getType(){\n      return type;\n    }\n    @Override public <T extends Annotation>T getAnnotation(    final Class<T> clazz){\n      return finalReader.getAnnotation(clazz);\n    }\n    @Override public <T extends Annotation>T getClassOrPackageAnnotation(    final Class<T> clazz){\n      return finalReader.getClassOrPackageAnnotation(clazz);\n    }\n    @Override public Adapter<?,?> findConverter(){\n      return writerConverters.converter;\n    }\n    @Override public boolean isNillable(    final boolean global){\n      return isNillable;\n    }\n  }\n) != null) {\n    throw new JsonbException(\"Ambiguous field \" + key);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 487,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4071,
                        "startLineNumber": 439,
                        "startColumnNumber": 8,
                        "endLineNumber": 525,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (final Map.Entry<String,Reader> entry : readers.entrySet()) {\n  final Reader initialReader=entry.getValue();\n  if (isTransient(initialReader,visibility)) {\n    validateAnnotationsOnTransientField(initialReader);\n    continue;\n  }\n  if (initialReader.getAnnotation(JohnzonAny.class) != null) {\n    continue;\n  }\n  final Reader finalReader;\n  if (FieldAndMethodAccessMode.CompositeDecoratedType.class.isInstance(initialReader)) {\n    final FieldAndMethodAccessMode.CompositeDecoratedType decoratedType=FieldAndMethodAccessMode.CompositeDecoratedType.class.cast(initialReader);\n    final DecoratedType type2=decoratedType.getType2();\n    if (MethodAccessMode.MethodReader.class.isInstance(type2)) {\n      finalReader=Reader.class.cast(type2);\n    }\n else {\n      finalReader=initialReader;\n    }\n  }\n else {\n    finalReader=initialReader;\n  }\n  final Type type;\n  final Function<Object,Object> reader;\n  if (isOptional(finalReader)) {\n    type=ParameterizedType.class.cast(finalReader.getType()).getActualTypeArguments()[0];\n    reader=i -> ofNullable(finalReader.read(i)).map(o -> Optional.class.cast(o).orElse(null)).orElse(null);\n  }\n else   if (OptionalInt.class == finalReader.getType()) {\n    type=int.class;\n    reader=i -> OptionalInt.class.cast(finalReader.read(i)).orElse(0);\n  }\n else   if (OptionalLong.class == finalReader.getType()) {\n    type=long.class;\n    reader=i -> OptionalLong.class.cast(finalReader.read(i)).orElse(0);\n  }\n else   if (OptionalDouble.class == finalReader.getType()) {\n    type=double.class;\n    reader=i -> OptionalDouble.class.cast(finalReader.read(i)).orElse(0);\n  }\n else {\n    type=finalReader.getType();\n    reader=finalReader::read;\n  }\n  final WriterConverters writerConverters=new WriterConverters(initialReader,types);\n  final JsonbProperty property=initialReader.getAnnotation(JsonbProperty.class);\n  final JsonbNillable nillable=initialReader.getClassOrPackageAnnotation(JsonbNillable.class);\n  final boolean isNillable=isNillable(property,nillable);\n  final String key=property == null || property.value().isEmpty() ? naming.translateName(entry.getKey()) : property.value();\n  if (result.put(key,new Reader(){\n    @Override public Object read(    final Object instance){\n      return reader.apply(instance);\n    }\n    @Override public ObjectConverter.Writer<?> findObjectConverterWriter(){\n      return writerConverters.writer;\n    }\n    @Override public Type getType(){\n      return type;\n    }\n    @Override public <T extends Annotation>T getAnnotation(    final Class<T> clazz){\n      return finalReader.getAnnotation(clazz);\n    }\n    @Override public <T extends Annotation>T getClassOrPackageAnnotation(    final Class<T> clazz){\n      return finalReader.getClassOrPackageAnnotation(clazz);\n    }\n    @Override public Adapter<?,?> findConverter(){\n      return writerConverters.converter;\n    }\n    @Override public boolean isNillable(    final boolean global){\n      return isNillable;\n    }\n  }\n) != null) {\n    throw new JsonbException(\"Ambiguous field \" + key);\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 503,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4372,
                        "startLineNumber": 434,
                        "startColumnNumber": 65,
                        "endLineNumber": 527,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final Map<String,Reader> readers=delegate.findReaders(clazz);\n  final Comparator<String> keyComparator=fieldComparator(clazz);\n  final Map<String,Reader> result=keyComparator == null ? new HashMap<>() : new TreeMap<>(keyComparator);\n  for (  final Map.Entry<String,Reader> entry : readers.entrySet()) {\n    final Reader initialReader=entry.getValue();\n    if (isTransient(initialReader,visibility)) {\n      validateAnnotationsOnTransientField(initialReader);\n      continue;\n    }\n    if (initialReader.getAnnotation(JohnzonAny.class) != null) {\n      continue;\n    }\n    final Reader finalReader;\n    if (FieldAndMethodAccessMode.CompositeDecoratedType.class.isInstance(initialReader)) {\n      final FieldAndMethodAccessMode.CompositeDecoratedType decoratedType=FieldAndMethodAccessMode.CompositeDecoratedType.class.cast(initialReader);\n      final DecoratedType type2=decoratedType.getType2();\n      if (MethodAccessMode.MethodReader.class.isInstance(type2)) {\n        finalReader=Reader.class.cast(type2);\n      }\n else {\n        finalReader=initialReader;\n      }\n    }\n else {\n      finalReader=initialReader;\n    }\n    final Type type;\n    final Function<Object,Object> reader;\n    if (isOptional(finalReader)) {\n      type=ParameterizedType.class.cast(finalReader.getType()).getActualTypeArguments()[0];\n      reader=i -> ofNullable(finalReader.read(i)).map(o -> Optional.class.cast(o).orElse(null)).orElse(null);\n    }\n else     if (OptionalInt.class == finalReader.getType()) {\n      type=int.class;\n      reader=i -> OptionalInt.class.cast(finalReader.read(i)).orElse(0);\n    }\n else     if (OptionalLong.class == finalReader.getType()) {\n      type=long.class;\n      reader=i -> OptionalLong.class.cast(finalReader.read(i)).orElse(0);\n    }\n else     if (OptionalDouble.class == finalReader.getType()) {\n      type=double.class;\n      reader=i -> OptionalDouble.class.cast(finalReader.read(i)).orElse(0);\n    }\n else {\n      type=finalReader.getType();\n      reader=finalReader::read;\n    }\n    final WriterConverters writerConverters=new WriterConverters(initialReader,types);\n    final JsonbProperty property=initialReader.getAnnotation(JsonbProperty.class);\n    final JsonbNillable nillable=initialReader.getClassOrPackageAnnotation(JsonbNillable.class);\n    final boolean isNillable=isNillable(property,nillable);\n    final String key=property == null || property.value().isEmpty() ? naming.translateName(entry.getKey()) : property.value();\n    if (result.put(key,new Reader(){\n      @Override public Object read(      final Object instance){\n        return reader.apply(instance);\n      }\n      @Override public ObjectConverter.Writer<?> findObjectConverterWriter(){\n        return writerConverters.writer;\n      }\n      @Override public Type getType(){\n        return type;\n      }\n      @Override public <T extends Annotation>T getAnnotation(      final Class<T> clazz){\n        return finalReader.getAnnotation(clazz);\n      }\n      @Override public <T extends Annotation>T getClassOrPackageAnnotation(      final Class<T> clazz){\n        return finalReader.getClassOrPackageAnnotation(clazz);\n      }\n      @Override public Adapter<?,?> findConverter(){\n        return writerConverters.converter;\n      }\n      @Override public boolean isNillable(      final boolean global){\n        return isNillable;\n      }\n    }\n) != null) {\n      throw new JsonbException(\"Ambiguous field \" + key);\n    }\n  }\n  return result;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 557,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4447,
                        "startLineNumber": 433,
                        "startColumnNumber": 4,
                        "endLineNumber": 527,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public Map<String,Reader> findReaders(final Class<?> clazz){\n  final Map<String,Reader> readers=delegate.findReaders(clazz);\n  final Comparator<String> keyComparator=fieldComparator(clazz);\n  final Map<String,Reader> result=keyComparator == null ? new HashMap<>() : new TreeMap<>(keyComparator);\n  for (  final Map.Entry<String,Reader> entry : readers.entrySet()) {\n    final Reader initialReader=entry.getValue();\n    if (isTransient(initialReader,visibility)) {\n      validateAnnotationsOnTransientField(initialReader);\n      continue;\n    }\n    if (initialReader.getAnnotation(JohnzonAny.class) != null) {\n      continue;\n    }\n    final Reader finalReader;\n    if (FieldAndMethodAccessMode.CompositeDecoratedType.class.isInstance(initialReader)) {\n      final FieldAndMethodAccessMode.CompositeDecoratedType decoratedType=FieldAndMethodAccessMode.CompositeDecoratedType.class.cast(initialReader);\n      final DecoratedType type2=decoratedType.getType2();\n      if (MethodAccessMode.MethodReader.class.isInstance(type2)) {\n        finalReader=Reader.class.cast(type2);\n      }\n else {\n        finalReader=initialReader;\n      }\n    }\n else {\n      finalReader=initialReader;\n    }\n    final Type type;\n    final Function<Object,Object> reader;\n    if (isOptional(finalReader)) {\n      type=ParameterizedType.class.cast(finalReader.getType()).getActualTypeArguments()[0];\n      reader=i -> ofNullable(finalReader.read(i)).map(o -> Optional.class.cast(o).orElse(null)).orElse(null);\n    }\n else     if (OptionalInt.class == finalReader.getType()) {\n      type=int.class;\n      reader=i -> OptionalInt.class.cast(finalReader.read(i)).orElse(0);\n    }\n else     if (OptionalLong.class == finalReader.getType()) {\n      type=long.class;\n      reader=i -> OptionalLong.class.cast(finalReader.read(i)).orElse(0);\n    }\n else     if (OptionalDouble.class == finalReader.getType()) {\n      type=double.class;\n      reader=i -> OptionalDouble.class.cast(finalReader.read(i)).orElse(0);\n    }\n else {\n      type=finalReader.getType();\n      reader=finalReader::read;\n    }\n    final WriterConverters writerConverters=new WriterConverters(initialReader,types);\n    final JsonbProperty property=initialReader.getAnnotation(JsonbProperty.class);\n    final JsonbNillable nillable=initialReader.getClassOrPackageAnnotation(JsonbNillable.class);\n    final boolean isNillable=isNillable(property,nillable);\n    final String key=property == null || property.value().isEmpty() ? naming.translateName(entry.getKey()) : property.value();\n    if (result.put(key,new Reader(){\n      @Override public Object read(      final Object instance){\n        return reader.apply(instance);\n      }\n      @Override public ObjectConverter.Writer<?> findObjectConverterWriter(){\n        return writerConverters.writer;\n      }\n      @Override public Type getType(){\n        return type;\n      }\n      @Override public <T extends Annotation>T getAnnotation(      final Class<T> clazz){\n        return finalReader.getAnnotation(clazz);\n      }\n      @Override public <T extends Annotation>T getClassOrPackageAnnotation(      final Class<T> clazz){\n        return finalReader.getClassOrPackageAnnotation(clazz);\n      }\n      @Override public Adapter<?,?> findConverter(){\n        return writerConverters.converter;\n      }\n      @Override public boolean isNillable(      final boolean global){\n        return isNillable;\n      }\n    }\n) != null) {\n      throw new JsonbException(\"Ambiguous field \" + key);\n    }\n  }\n  return result;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 576,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 53,
                    "startLineNumber": 445,
                    "startColumnNumber": 16,
                    "endLineNumber": 445,
                    "endColumnNumber": 69
                },
                "nodeContext": "initialReader.getAnnotation(JohnzonAny.class) != null",
                "nodeType": "InfixExpression",
                "astNodeNumber": 8,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "org.apache.johnzon.mapper.access.AccessMode.Reader"
        },
        {
            "nodeContext": "initialReader",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 13,
                "startLineNumber": 450,
                "startColumnNumber": 81,
                "endLineNumber": 450,
                "endColumnNumber": 94
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 79,
                        "startLineNumber": 450,
                        "startColumnNumber": 16,
                        "endLineNumber": 450,
                        "endColumnNumber": 95
                    },
                    "nodeContext": "FieldAndMethodAccessMode.CompositeDecoratedType.class.isInstance(initialReader)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 660,
                        "startLineNumber": 450,
                        "startColumnNumber": 12,
                        "endLineNumber": 460,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (FieldAndMethodAccessMode.CompositeDecoratedType.class.isInstance(initialReader)) {\n  final FieldAndMethodAccessMode.CompositeDecoratedType decoratedType=FieldAndMethodAccessMode.CompositeDecoratedType.class.cast(initialReader);\n  final DecoratedType type2=decoratedType.getType2();\n  if (MethodAccessMode.MethodReader.class.isInstance(type2)) {\n    finalReader=Reader.class.cast(type2);\n  }\n else {\n    finalReader=initialReader;\n  }\n}\n else {\n  finalReader=initialReader;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 64,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 4006,
                        "startLineNumber": 439,
                        "startColumnNumber": 73,
                        "endLineNumber": 525,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final Reader initialReader=entry.getValue();\n  if (isTransient(initialReader,visibility)) {\n    validateAnnotationsOnTransientField(initialReader);\n    continue;\n  }\n  if (initialReader.getAnnotation(JohnzonAny.class) != null) {\n    continue;\n  }\n  final Reader finalReader;\n  if (FieldAndMethodAccessMode.CompositeDecoratedType.class.isInstance(initialReader)) {\n    final FieldAndMethodAccessMode.CompositeDecoratedType decoratedType=FieldAndMethodAccessMode.CompositeDecoratedType.class.cast(initialReader);\n    final DecoratedType type2=decoratedType.getType2();\n    if (MethodAccessMode.MethodReader.class.isInstance(type2)) {\n      finalReader=Reader.class.cast(type2);\n    }\n else {\n      finalReader=initialReader;\n    }\n  }\n else {\n    finalReader=initialReader;\n  }\n  final Type type;\n  final Function<Object,Object> reader;\n  if (isOptional(finalReader)) {\n    type=ParameterizedType.class.cast(finalReader.getType()).getActualTypeArguments()[0];\n    reader=i -> ofNullable(finalReader.read(i)).map(o -> Optional.class.cast(o).orElse(null)).orElse(null);\n  }\n else   if (OptionalInt.class == finalReader.getType()) {\n    type=int.class;\n    reader=i -> OptionalInt.class.cast(finalReader.read(i)).orElse(0);\n  }\n else   if (OptionalLong.class == finalReader.getType()) {\n    type=long.class;\n    reader=i -> OptionalLong.class.cast(finalReader.read(i)).orElse(0);\n  }\n else   if (OptionalDouble.class == finalReader.getType()) {\n    type=double.class;\n    reader=i -> OptionalDouble.class.cast(finalReader.read(i)).orElse(0);\n  }\n else {\n    type=finalReader.getType();\n    reader=finalReader::read;\n  }\n  final WriterConverters writerConverters=new WriterConverters(initialReader,types);\n  final JsonbProperty property=initialReader.getAnnotation(JsonbProperty.class);\n  final JsonbNillable nillable=initialReader.getClassOrPackageAnnotation(JsonbNillable.class);\n  final boolean isNillable=isNillable(property,nillable);\n  final String key=property == null || property.value().isEmpty() ? naming.translateName(entry.getKey()) : property.value();\n  if (result.put(key,new Reader(){\n    @Override public Object read(    final Object instance){\n      return reader.apply(instance);\n    }\n    @Override public ObjectConverter.Writer<?> findObjectConverterWriter(){\n      return writerConverters.writer;\n    }\n    @Override public Type getType(){\n      return type;\n    }\n    @Override public <T extends Annotation>T getAnnotation(    final Class<T> clazz){\n      return finalReader.getAnnotation(clazz);\n    }\n    @Override public <T extends Annotation>T getClassOrPackageAnnotation(    final Class<T> clazz){\n      return finalReader.getClassOrPackageAnnotation(clazz);\n    }\n    @Override public Adapter<?,?> findConverter(){\n      return writerConverters.converter;\n    }\n    @Override public boolean isNillable(    final boolean global){\n      return isNillable;\n    }\n  }\n) != null) {\n    throw new JsonbException(\"Ambiguous field \" + key);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 487,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4071,
                        "startLineNumber": 439,
                        "startColumnNumber": 8,
                        "endLineNumber": 525,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (final Map.Entry<String,Reader> entry : readers.entrySet()) {\n  final Reader initialReader=entry.getValue();\n  if (isTransient(initialReader,visibility)) {\n    validateAnnotationsOnTransientField(initialReader);\n    continue;\n  }\n  if (initialReader.getAnnotation(JohnzonAny.class) != null) {\n    continue;\n  }\n  final Reader finalReader;\n  if (FieldAndMethodAccessMode.CompositeDecoratedType.class.isInstance(initialReader)) {\n    final FieldAndMethodAccessMode.CompositeDecoratedType decoratedType=FieldAndMethodAccessMode.CompositeDecoratedType.class.cast(initialReader);\n    final DecoratedType type2=decoratedType.getType2();\n    if (MethodAccessMode.MethodReader.class.isInstance(type2)) {\n      finalReader=Reader.class.cast(type2);\n    }\n else {\n      finalReader=initialReader;\n    }\n  }\n else {\n    finalReader=initialReader;\n  }\n  final Type type;\n  final Function<Object,Object> reader;\n  if (isOptional(finalReader)) {\n    type=ParameterizedType.class.cast(finalReader.getType()).getActualTypeArguments()[0];\n    reader=i -> ofNullable(finalReader.read(i)).map(o -> Optional.class.cast(o).orElse(null)).orElse(null);\n  }\n else   if (OptionalInt.class == finalReader.getType()) {\n    type=int.class;\n    reader=i -> OptionalInt.class.cast(finalReader.read(i)).orElse(0);\n  }\n else   if (OptionalLong.class == finalReader.getType()) {\n    type=long.class;\n    reader=i -> OptionalLong.class.cast(finalReader.read(i)).orElse(0);\n  }\n else   if (OptionalDouble.class == finalReader.getType()) {\n    type=double.class;\n    reader=i -> OptionalDouble.class.cast(finalReader.read(i)).orElse(0);\n  }\n else {\n    type=finalReader.getType();\n    reader=finalReader::read;\n  }\n  final WriterConverters writerConverters=new WriterConverters(initialReader,types);\n  final JsonbProperty property=initialReader.getAnnotation(JsonbProperty.class);\n  final JsonbNillable nillable=initialReader.getClassOrPackageAnnotation(JsonbNillable.class);\n  final boolean isNillable=isNillable(property,nillable);\n  final String key=property == null || property.value().isEmpty() ? naming.translateName(entry.getKey()) : property.value();\n  if (result.put(key,new Reader(){\n    @Override public Object read(    final Object instance){\n      return reader.apply(instance);\n    }\n    @Override public ObjectConverter.Writer<?> findObjectConverterWriter(){\n      return writerConverters.writer;\n    }\n    @Override public Type getType(){\n      return type;\n    }\n    @Override public <T extends Annotation>T getAnnotation(    final Class<T> clazz){\n      return finalReader.getAnnotation(clazz);\n    }\n    @Override public <T extends Annotation>T getClassOrPackageAnnotation(    final Class<T> clazz){\n      return finalReader.getClassOrPackageAnnotation(clazz);\n    }\n    @Override public Adapter<?,?> findConverter(){\n      return writerConverters.converter;\n    }\n    @Override public boolean isNillable(    final boolean global){\n      return isNillable;\n    }\n  }\n) != null) {\n    throw new JsonbException(\"Ambiguous field \" + key);\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 503,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4372,
                        "startLineNumber": 434,
                        "startColumnNumber": 65,
                        "endLineNumber": 527,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final Map<String,Reader> readers=delegate.findReaders(clazz);\n  final Comparator<String> keyComparator=fieldComparator(clazz);\n  final Map<String,Reader> result=keyComparator == null ? new HashMap<>() : new TreeMap<>(keyComparator);\n  for (  final Map.Entry<String,Reader> entry : readers.entrySet()) {\n    final Reader initialReader=entry.getValue();\n    if (isTransient(initialReader,visibility)) {\n      validateAnnotationsOnTransientField(initialReader);\n      continue;\n    }\n    if (initialReader.getAnnotation(JohnzonAny.class) != null) {\n      continue;\n    }\n    final Reader finalReader;\n    if (FieldAndMethodAccessMode.CompositeDecoratedType.class.isInstance(initialReader)) {\n      final FieldAndMethodAccessMode.CompositeDecoratedType decoratedType=FieldAndMethodAccessMode.CompositeDecoratedType.class.cast(initialReader);\n      final DecoratedType type2=decoratedType.getType2();\n      if (MethodAccessMode.MethodReader.class.isInstance(type2)) {\n        finalReader=Reader.class.cast(type2);\n      }\n else {\n        finalReader=initialReader;\n      }\n    }\n else {\n      finalReader=initialReader;\n    }\n    final Type type;\n    final Function<Object,Object> reader;\n    if (isOptional(finalReader)) {\n      type=ParameterizedType.class.cast(finalReader.getType()).getActualTypeArguments()[0];\n      reader=i -> ofNullable(finalReader.read(i)).map(o -> Optional.class.cast(o).orElse(null)).orElse(null);\n    }\n else     if (OptionalInt.class == finalReader.getType()) {\n      type=int.class;\n      reader=i -> OptionalInt.class.cast(finalReader.read(i)).orElse(0);\n    }\n else     if (OptionalLong.class == finalReader.getType()) {\n      type=long.class;\n      reader=i -> OptionalLong.class.cast(finalReader.read(i)).orElse(0);\n    }\n else     if (OptionalDouble.class == finalReader.getType()) {\n      type=double.class;\n      reader=i -> OptionalDouble.class.cast(finalReader.read(i)).orElse(0);\n    }\n else {\n      type=finalReader.getType();\n      reader=finalReader::read;\n    }\n    final WriterConverters writerConverters=new WriterConverters(initialReader,types);\n    final JsonbProperty property=initialReader.getAnnotation(JsonbProperty.class);\n    final JsonbNillable nillable=initialReader.getClassOrPackageAnnotation(JsonbNillable.class);\n    final boolean isNillable=isNillable(property,nillable);\n    final String key=property == null || property.value().isEmpty() ? naming.translateName(entry.getKey()) : property.value();\n    if (result.put(key,new Reader(){\n      @Override public Object read(      final Object instance){\n        return reader.apply(instance);\n      }\n      @Override public ObjectConverter.Writer<?> findObjectConverterWriter(){\n        return writerConverters.writer;\n      }\n      @Override public Type getType(){\n        return type;\n      }\n      @Override public <T extends Annotation>T getAnnotation(      final Class<T> clazz){\n        return finalReader.getAnnotation(clazz);\n      }\n      @Override public <T extends Annotation>T getClassOrPackageAnnotation(      final Class<T> clazz){\n        return finalReader.getClassOrPackageAnnotation(clazz);\n      }\n      @Override public Adapter<?,?> findConverter(){\n        return writerConverters.converter;\n      }\n      @Override public boolean isNillable(      final boolean global){\n        return isNillable;\n      }\n    }\n) != null) {\n      throw new JsonbException(\"Ambiguous field \" + key);\n    }\n  }\n  return result;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 557,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4447,
                        "startLineNumber": 433,
                        "startColumnNumber": 4,
                        "endLineNumber": 527,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public Map<String,Reader> findReaders(final Class<?> clazz){\n  final Map<String,Reader> readers=delegate.findReaders(clazz);\n  final Comparator<String> keyComparator=fieldComparator(clazz);\n  final Map<String,Reader> result=keyComparator == null ? new HashMap<>() : new TreeMap<>(keyComparator);\n  for (  final Map.Entry<String,Reader> entry : readers.entrySet()) {\n    final Reader initialReader=entry.getValue();\n    if (isTransient(initialReader,visibility)) {\n      validateAnnotationsOnTransientField(initialReader);\n      continue;\n    }\n    if (initialReader.getAnnotation(JohnzonAny.class) != null) {\n      continue;\n    }\n    final Reader finalReader;\n    if (FieldAndMethodAccessMode.CompositeDecoratedType.class.isInstance(initialReader)) {\n      final FieldAndMethodAccessMode.CompositeDecoratedType decoratedType=FieldAndMethodAccessMode.CompositeDecoratedType.class.cast(initialReader);\n      final DecoratedType type2=decoratedType.getType2();\n      if (MethodAccessMode.MethodReader.class.isInstance(type2)) {\n        finalReader=Reader.class.cast(type2);\n      }\n else {\n        finalReader=initialReader;\n      }\n    }\n else {\n      finalReader=initialReader;\n    }\n    final Type type;\n    final Function<Object,Object> reader;\n    if (isOptional(finalReader)) {\n      type=ParameterizedType.class.cast(finalReader.getType()).getActualTypeArguments()[0];\n      reader=i -> ofNullable(finalReader.read(i)).map(o -> Optional.class.cast(o).orElse(null)).orElse(null);\n    }\n else     if (OptionalInt.class == finalReader.getType()) {\n      type=int.class;\n      reader=i -> OptionalInt.class.cast(finalReader.read(i)).orElse(0);\n    }\n else     if (OptionalLong.class == finalReader.getType()) {\n      type=long.class;\n      reader=i -> OptionalLong.class.cast(finalReader.read(i)).orElse(0);\n    }\n else     if (OptionalDouble.class == finalReader.getType()) {\n      type=double.class;\n      reader=i -> OptionalDouble.class.cast(finalReader.read(i)).orElse(0);\n    }\n else {\n      type=finalReader.getType();\n      reader=finalReader::read;\n    }\n    final WriterConverters writerConverters=new WriterConverters(initialReader,types);\n    final JsonbProperty property=initialReader.getAnnotation(JsonbProperty.class);\n    final JsonbNillable nillable=initialReader.getClassOrPackageAnnotation(JsonbNillable.class);\n    final boolean isNillable=isNillable(property,nillable);\n    final String key=property == null || property.value().isEmpty() ? naming.translateName(entry.getKey()) : property.value();\n    if (result.put(key,new Reader(){\n      @Override public Object read(      final Object instance){\n        return reader.apply(instance);\n      }\n      @Override public ObjectConverter.Writer<?> findObjectConverterWriter(){\n        return writerConverters.writer;\n      }\n      @Override public Type getType(){\n        return type;\n      }\n      @Override public <T extends Annotation>T getAnnotation(      final Class<T> clazz){\n        return finalReader.getAnnotation(clazz);\n      }\n      @Override public <T extends Annotation>T getClassOrPackageAnnotation(      final Class<T> clazz){\n        return finalReader.getClassOrPackageAnnotation(clazz);\n      }\n      @Override public Adapter<?,?> findConverter(){\n        return writerConverters.converter;\n      }\n      @Override public boolean isNillable(      final boolean global){\n        return isNillable;\n      }\n    }\n) != null) {\n      throw new JsonbException(\"Ambiguous field \" + key);\n    }\n  }\n  return result;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 576,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 79,
                    "startLineNumber": 450,
                    "startColumnNumber": 16,
                    "endLineNumber": 450,
                    "endColumnNumber": 95
                },
                "nodeContext": "FieldAndMethodAccessMode.CompositeDecoratedType.class.isInstance(initialReader)",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 8,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "org.apache.johnzon.mapper.access.AccessMode.Reader"
        },
        {
            "nodeContext": "initialReader",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 13,
                "startLineNumber": 451,
                "startColumnNumber": 145,
                "endLineNumber": 451,
                "endColumnNumber": 158
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 73,
                        "startLineNumber": 451,
                        "startColumnNumber": 86,
                        "endLineNumber": 451,
                        "endColumnNumber": 159
                    },
                    "nodeContext": "FieldAndMethodAccessMode.CompositeDecoratedType.class.cast(initialReader)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 89,
                        "startLineNumber": 451,
                        "startColumnNumber": 70,
                        "endLineNumber": 451,
                        "endColumnNumber": 159
                    },
                    "nodeContext": "decoratedType=FieldAndMethodAccessMode.CompositeDecoratedType.class.cast(initialReader)",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 10,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 144,
                        "startLineNumber": 451,
                        "startColumnNumber": 16,
                        "endLineNumber": 451,
                        "endColumnNumber": 160
                    },
                    "nodeContext": "final FieldAndMethodAccessMode.CompositeDecoratedType decoratedType=FieldAndMethodAccessMode.CompositeDecoratedType.class.cast(initialReader);\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 16,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 509,
                        "startLineNumber": 450,
                        "startColumnNumber": 97,
                        "endLineNumber": 458,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  final FieldAndMethodAccessMode.CompositeDecoratedType decoratedType=FieldAndMethodAccessMode.CompositeDecoratedType.class.cast(initialReader);\n  final DecoratedType type2=decoratedType.getType2();\n  if (MethodAccessMode.MethodReader.class.isInstance(type2)) {\n    finalReader=Reader.class.cast(type2);\n  }\n else {\n    finalReader=initialReader;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 50,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 660,
                        "startLineNumber": 450,
                        "startColumnNumber": 12,
                        "endLineNumber": 460,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (FieldAndMethodAccessMode.CompositeDecoratedType.class.isInstance(initialReader)) {\n  final FieldAndMethodAccessMode.CompositeDecoratedType decoratedType=FieldAndMethodAccessMode.CompositeDecoratedType.class.cast(initialReader);\n  final DecoratedType type2=decoratedType.getType2();\n  if (MethodAccessMode.MethodReader.class.isInstance(type2)) {\n    finalReader=Reader.class.cast(type2);\n  }\n else {\n    finalReader=initialReader;\n  }\n}\n else {\n  finalReader=initialReader;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 64,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 4006,
                        "startLineNumber": 439,
                        "startColumnNumber": 73,
                        "endLineNumber": 525,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final Reader initialReader=entry.getValue();\n  if (isTransient(initialReader,visibility)) {\n    validateAnnotationsOnTransientField(initialReader);\n    continue;\n  }\n  if (initialReader.getAnnotation(JohnzonAny.class) != null) {\n    continue;\n  }\n  final Reader finalReader;\n  if (FieldAndMethodAccessMode.CompositeDecoratedType.class.isInstance(initialReader)) {\n    final FieldAndMethodAccessMode.CompositeDecoratedType decoratedType=FieldAndMethodAccessMode.CompositeDecoratedType.class.cast(initialReader);\n    final DecoratedType type2=decoratedType.getType2();\n    if (MethodAccessMode.MethodReader.class.isInstance(type2)) {\n      finalReader=Reader.class.cast(type2);\n    }\n else {\n      finalReader=initialReader;\n    }\n  }\n else {\n    finalReader=initialReader;\n  }\n  final Type type;\n  final Function<Object,Object> reader;\n  if (isOptional(finalReader)) {\n    type=ParameterizedType.class.cast(finalReader.getType()).getActualTypeArguments()[0];\n    reader=i -> ofNullable(finalReader.read(i)).map(o -> Optional.class.cast(o).orElse(null)).orElse(null);\n  }\n else   if (OptionalInt.class == finalReader.getType()) {\n    type=int.class;\n    reader=i -> OptionalInt.class.cast(finalReader.read(i)).orElse(0);\n  }\n else   if (OptionalLong.class == finalReader.getType()) {\n    type=long.class;\n    reader=i -> OptionalLong.class.cast(finalReader.read(i)).orElse(0);\n  }\n else   if (OptionalDouble.class == finalReader.getType()) {\n    type=double.class;\n    reader=i -> OptionalDouble.class.cast(finalReader.read(i)).orElse(0);\n  }\n else {\n    type=finalReader.getType();\n    reader=finalReader::read;\n  }\n  final WriterConverters writerConverters=new WriterConverters(initialReader,types);\n  final JsonbProperty property=initialReader.getAnnotation(JsonbProperty.class);\n  final JsonbNillable nillable=initialReader.getClassOrPackageAnnotation(JsonbNillable.class);\n  final boolean isNillable=isNillable(property,nillable);\n  final String key=property == null || property.value().isEmpty() ? naming.translateName(entry.getKey()) : property.value();\n  if (result.put(key,new Reader(){\n    @Override public Object read(    final Object instance){\n      return reader.apply(instance);\n    }\n    @Override public ObjectConverter.Writer<?> findObjectConverterWriter(){\n      return writerConverters.writer;\n    }\n    @Override public Type getType(){\n      return type;\n    }\n    @Override public <T extends Annotation>T getAnnotation(    final Class<T> clazz){\n      return finalReader.getAnnotation(clazz);\n    }\n    @Override public <T extends Annotation>T getClassOrPackageAnnotation(    final Class<T> clazz){\n      return finalReader.getClassOrPackageAnnotation(clazz);\n    }\n    @Override public Adapter<?,?> findConverter(){\n      return writerConverters.converter;\n    }\n    @Override public boolean isNillable(    final boolean global){\n      return isNillable;\n    }\n  }\n) != null) {\n    throw new JsonbException(\"Ambiguous field \" + key);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 487,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4071,
                        "startLineNumber": 439,
                        "startColumnNumber": 8,
                        "endLineNumber": 525,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (final Map.Entry<String,Reader> entry : readers.entrySet()) {\n  final Reader initialReader=entry.getValue();\n  if (isTransient(initialReader,visibility)) {\n    validateAnnotationsOnTransientField(initialReader);\n    continue;\n  }\n  if (initialReader.getAnnotation(JohnzonAny.class) != null) {\n    continue;\n  }\n  final Reader finalReader;\n  if (FieldAndMethodAccessMode.CompositeDecoratedType.class.isInstance(initialReader)) {\n    final FieldAndMethodAccessMode.CompositeDecoratedType decoratedType=FieldAndMethodAccessMode.CompositeDecoratedType.class.cast(initialReader);\n    final DecoratedType type2=decoratedType.getType2();\n    if (MethodAccessMode.MethodReader.class.isInstance(type2)) {\n      finalReader=Reader.class.cast(type2);\n    }\n else {\n      finalReader=initialReader;\n    }\n  }\n else {\n    finalReader=initialReader;\n  }\n  final Type type;\n  final Function<Object,Object> reader;\n  if (isOptional(finalReader)) {\n    type=ParameterizedType.class.cast(finalReader.getType()).getActualTypeArguments()[0];\n    reader=i -> ofNullable(finalReader.read(i)).map(o -> Optional.class.cast(o).orElse(null)).orElse(null);\n  }\n else   if (OptionalInt.class == finalReader.getType()) {\n    type=int.class;\n    reader=i -> OptionalInt.class.cast(finalReader.read(i)).orElse(0);\n  }\n else   if (OptionalLong.class == finalReader.getType()) {\n    type=long.class;\n    reader=i -> OptionalLong.class.cast(finalReader.read(i)).orElse(0);\n  }\n else   if (OptionalDouble.class == finalReader.getType()) {\n    type=double.class;\n    reader=i -> OptionalDouble.class.cast(finalReader.read(i)).orElse(0);\n  }\n else {\n    type=finalReader.getType();\n    reader=finalReader::read;\n  }\n  final WriterConverters writerConverters=new WriterConverters(initialReader,types);\n  final JsonbProperty property=initialReader.getAnnotation(JsonbProperty.class);\n  final JsonbNillable nillable=initialReader.getClassOrPackageAnnotation(JsonbNillable.class);\n  final boolean isNillable=isNillable(property,nillable);\n  final String key=property == null || property.value().isEmpty() ? naming.translateName(entry.getKey()) : property.value();\n  if (result.put(key,new Reader(){\n    @Override public Object read(    final Object instance){\n      return reader.apply(instance);\n    }\n    @Override public ObjectConverter.Writer<?> findObjectConverterWriter(){\n      return writerConverters.writer;\n    }\n    @Override public Type getType(){\n      return type;\n    }\n    @Override public <T extends Annotation>T getAnnotation(    final Class<T> clazz){\n      return finalReader.getAnnotation(clazz);\n    }\n    @Override public <T extends Annotation>T getClassOrPackageAnnotation(    final Class<T> clazz){\n      return finalReader.getClassOrPackageAnnotation(clazz);\n    }\n    @Override public Adapter<?,?> findConverter(){\n      return writerConverters.converter;\n    }\n    @Override public boolean isNillable(    final boolean global){\n      return isNillable;\n    }\n  }\n) != null) {\n    throw new JsonbException(\"Ambiguous field \" + key);\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 503,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4372,
                        "startLineNumber": 434,
                        "startColumnNumber": 65,
                        "endLineNumber": 527,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final Map<String,Reader> readers=delegate.findReaders(clazz);\n  final Comparator<String> keyComparator=fieldComparator(clazz);\n  final Map<String,Reader> result=keyComparator == null ? new HashMap<>() : new TreeMap<>(keyComparator);\n  for (  final Map.Entry<String,Reader> entry : readers.entrySet()) {\n    final Reader initialReader=entry.getValue();\n    if (isTransient(initialReader,visibility)) {\n      validateAnnotationsOnTransientField(initialReader);\n      continue;\n    }\n    if (initialReader.getAnnotation(JohnzonAny.class) != null) {\n      continue;\n    }\n    final Reader finalReader;\n    if (FieldAndMethodAccessMode.CompositeDecoratedType.class.isInstance(initialReader)) {\n      final FieldAndMethodAccessMode.CompositeDecoratedType decoratedType=FieldAndMethodAccessMode.CompositeDecoratedType.class.cast(initialReader);\n      final DecoratedType type2=decoratedType.getType2();\n      if (MethodAccessMode.MethodReader.class.isInstance(type2)) {\n        finalReader=Reader.class.cast(type2);\n      }\n else {\n        finalReader=initialReader;\n      }\n    }\n else {\n      finalReader=initialReader;\n    }\n    final Type type;\n    final Function<Object,Object> reader;\n    if (isOptional(finalReader)) {\n      type=ParameterizedType.class.cast(finalReader.getType()).getActualTypeArguments()[0];\n      reader=i -> ofNullable(finalReader.read(i)).map(o -> Optional.class.cast(o).orElse(null)).orElse(null);\n    }\n else     if (OptionalInt.class == finalReader.getType()) {\n      type=int.class;\n      reader=i -> OptionalInt.class.cast(finalReader.read(i)).orElse(0);\n    }\n else     if (OptionalLong.class == finalReader.getType()) {\n      type=long.class;\n      reader=i -> OptionalLong.class.cast(finalReader.read(i)).orElse(0);\n    }\n else     if (OptionalDouble.class == finalReader.getType()) {\n      type=double.class;\n      reader=i -> OptionalDouble.class.cast(finalReader.read(i)).orElse(0);\n    }\n else {\n      type=finalReader.getType();\n      reader=finalReader::read;\n    }\n    final WriterConverters writerConverters=new WriterConverters(initialReader,types);\n    final JsonbProperty property=initialReader.getAnnotation(JsonbProperty.class);\n    final JsonbNillable nillable=initialReader.getClassOrPackageAnnotation(JsonbNillable.class);\n    final boolean isNillable=isNillable(property,nillable);\n    final String key=property == null || property.value().isEmpty() ? naming.translateName(entry.getKey()) : property.value();\n    if (result.put(key,new Reader(){\n      @Override public Object read(      final Object instance){\n        return reader.apply(instance);\n      }\n      @Override public ObjectConverter.Writer<?> findObjectConverterWriter(){\n        return writerConverters.writer;\n      }\n      @Override public Type getType(){\n        return type;\n      }\n      @Override public <T extends Annotation>T getAnnotation(      final Class<T> clazz){\n        return finalReader.getAnnotation(clazz);\n      }\n      @Override public <T extends Annotation>T getClassOrPackageAnnotation(      final Class<T> clazz){\n        return finalReader.getClassOrPackageAnnotation(clazz);\n      }\n      @Override public Adapter<?,?> findConverter(){\n        return writerConverters.converter;\n      }\n      @Override public boolean isNillable(      final boolean global){\n        return isNillable;\n      }\n    }\n) != null) {\n      throw new JsonbException(\"Ambiguous field \" + key);\n    }\n  }\n  return result;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 557,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4447,
                        "startLineNumber": 433,
                        "startColumnNumber": 4,
                        "endLineNumber": 527,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public Map<String,Reader> findReaders(final Class<?> clazz){\n  final Map<String,Reader> readers=delegate.findReaders(clazz);\n  final Comparator<String> keyComparator=fieldComparator(clazz);\n  final Map<String,Reader> result=keyComparator == null ? new HashMap<>() : new TreeMap<>(keyComparator);\n  for (  final Map.Entry<String,Reader> entry : readers.entrySet()) {\n    final Reader initialReader=entry.getValue();\n    if (isTransient(initialReader,visibility)) {\n      validateAnnotationsOnTransientField(initialReader);\n      continue;\n    }\n    if (initialReader.getAnnotation(JohnzonAny.class) != null) {\n      continue;\n    }\n    final Reader finalReader;\n    if (FieldAndMethodAccessMode.CompositeDecoratedType.class.isInstance(initialReader)) {\n      final FieldAndMethodAccessMode.CompositeDecoratedType decoratedType=FieldAndMethodAccessMode.CompositeDecoratedType.class.cast(initialReader);\n      final DecoratedType type2=decoratedType.getType2();\n      if (MethodAccessMode.MethodReader.class.isInstance(type2)) {\n        finalReader=Reader.class.cast(type2);\n      }\n else {\n        finalReader=initialReader;\n      }\n    }\n else {\n      finalReader=initialReader;\n    }\n    final Type type;\n    final Function<Object,Object> reader;\n    if (isOptional(finalReader)) {\n      type=ParameterizedType.class.cast(finalReader.getType()).getActualTypeArguments()[0];\n      reader=i -> ofNullable(finalReader.read(i)).map(o -> Optional.class.cast(o).orElse(null)).orElse(null);\n    }\n else     if (OptionalInt.class == finalReader.getType()) {\n      type=int.class;\n      reader=i -> OptionalInt.class.cast(finalReader.read(i)).orElse(0);\n    }\n else     if (OptionalLong.class == finalReader.getType()) {\n      type=long.class;\n      reader=i -> OptionalLong.class.cast(finalReader.read(i)).orElse(0);\n    }\n else     if (OptionalDouble.class == finalReader.getType()) {\n      type=double.class;\n      reader=i -> OptionalDouble.class.cast(finalReader.read(i)).orElse(0);\n    }\n else {\n      type=finalReader.getType();\n      reader=finalReader::read;\n    }\n    final WriterConverters writerConverters=new WriterConverters(initialReader,types);\n    final JsonbProperty property=initialReader.getAnnotation(JsonbProperty.class);\n    final JsonbNillable nillable=initialReader.getClassOrPackageAnnotation(JsonbNillable.class);\n    final boolean isNillable=isNillable(property,nillable);\n    final String key=property == null || property.value().isEmpty() ? naming.translateName(entry.getKey()) : property.value();\n    if (result.put(key,new Reader(){\n      @Override public Object read(      final Object instance){\n        return reader.apply(instance);\n      }\n      @Override public ObjectConverter.Writer<?> findObjectConverterWriter(){\n        return writerConverters.writer;\n      }\n      @Override public Type getType(){\n        return type;\n      }\n      @Override public <T extends Annotation>T getAnnotation(      final Class<T> clazz){\n        return finalReader.getAnnotation(clazz);\n      }\n      @Override public <T extends Annotation>T getClassOrPackageAnnotation(      final Class<T> clazz){\n        return finalReader.getClassOrPackageAnnotation(clazz);\n      }\n      @Override public Adapter<?,?> findConverter(){\n        return writerConverters.converter;\n      }\n      @Override public boolean isNillable(      final boolean global){\n        return isNillable;\n      }\n    }\n) != null) {\n      throw new JsonbException(\"Ambiguous field \" + key);\n    }\n  }\n  return result;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 576,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 144,
                    "startLineNumber": 451,
                    "startColumnNumber": 16,
                    "endLineNumber": 451,
                    "endColumnNumber": 160
                },
                "nodeContext": "final FieldAndMethodAccessMode.CompositeDecoratedType decoratedType=FieldAndMethodAccessMode.CompositeDecoratedType.class.cast(initialReader);\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 16,
                "astHeight": 7
            },
            "tokenLength": 1,
            "type": "org.apache.johnzon.mapper.access.AccessMode.Reader"
        },
        {
            "nodeContext": "initialReader",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 13,
                "startLineNumber": 456,
                "startColumnNumber": 34,
                "endLineNumber": 456,
                "endColumnNumber": 47
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 27,
                        "startLineNumber": 456,
                        "startColumnNumber": 20,
                        "endLineNumber": 456,
                        "endColumnNumber": 47
                    },
                    "nodeContext": "finalReader=initialReader",
                    "nodeType": "Assignment",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 28,
                        "startLineNumber": 456,
                        "startColumnNumber": 20,
                        "endLineNumber": 456,
                        "endColumnNumber": 48
                    },
                    "nodeContext": "finalReader=initialReader;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 68,
                        "startLineNumber": 455,
                        "startColumnNumber": 23,
                        "endLineNumber": 457,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  finalReader=initialReader;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 5,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 212,
                        "startLineNumber": 453,
                        "startColumnNumber": 16,
                        "endLineNumber": 457,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (MethodAccessMode.MethodReader.class.isInstance(type2)) {\n  finalReader=Reader.class.cast(type2);\n}\n else {\n  finalReader=initialReader;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 24,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 509,
                        "startLineNumber": 450,
                        "startColumnNumber": 97,
                        "endLineNumber": 458,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  final FieldAndMethodAccessMode.CompositeDecoratedType decoratedType=FieldAndMethodAccessMode.CompositeDecoratedType.class.cast(initialReader);\n  final DecoratedType type2=decoratedType.getType2();\n  if (MethodAccessMode.MethodReader.class.isInstance(type2)) {\n    finalReader=Reader.class.cast(type2);\n  }\n else {\n    finalReader=initialReader;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 50,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 660,
                        "startLineNumber": 450,
                        "startColumnNumber": 12,
                        "endLineNumber": 460,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (FieldAndMethodAccessMode.CompositeDecoratedType.class.isInstance(initialReader)) {\n  final FieldAndMethodAccessMode.CompositeDecoratedType decoratedType=FieldAndMethodAccessMode.CompositeDecoratedType.class.cast(initialReader);\n  final DecoratedType type2=decoratedType.getType2();\n  if (MethodAccessMode.MethodReader.class.isInstance(type2)) {\n    finalReader=Reader.class.cast(type2);\n  }\n else {\n    finalReader=initialReader;\n  }\n}\n else {\n  finalReader=initialReader;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 64,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 4006,
                        "startLineNumber": 439,
                        "startColumnNumber": 73,
                        "endLineNumber": 525,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final Reader initialReader=entry.getValue();\n  if (isTransient(initialReader,visibility)) {\n    validateAnnotationsOnTransientField(initialReader);\n    continue;\n  }\n  if (initialReader.getAnnotation(JohnzonAny.class) != null) {\n    continue;\n  }\n  final Reader finalReader;\n  if (FieldAndMethodAccessMode.CompositeDecoratedType.class.isInstance(initialReader)) {\n    final FieldAndMethodAccessMode.CompositeDecoratedType decoratedType=FieldAndMethodAccessMode.CompositeDecoratedType.class.cast(initialReader);\n    final DecoratedType type2=decoratedType.getType2();\n    if (MethodAccessMode.MethodReader.class.isInstance(type2)) {\n      finalReader=Reader.class.cast(type2);\n    }\n else {\n      finalReader=initialReader;\n    }\n  }\n else {\n    finalReader=initialReader;\n  }\n  final Type type;\n  final Function<Object,Object> reader;\n  if (isOptional(finalReader)) {\n    type=ParameterizedType.class.cast(finalReader.getType()).getActualTypeArguments()[0];\n    reader=i -> ofNullable(finalReader.read(i)).map(o -> Optional.class.cast(o).orElse(null)).orElse(null);\n  }\n else   if (OptionalInt.class == finalReader.getType()) {\n    type=int.class;\n    reader=i -> OptionalInt.class.cast(finalReader.read(i)).orElse(0);\n  }\n else   if (OptionalLong.class == finalReader.getType()) {\n    type=long.class;\n    reader=i -> OptionalLong.class.cast(finalReader.read(i)).orElse(0);\n  }\n else   if (OptionalDouble.class == finalReader.getType()) {\n    type=double.class;\n    reader=i -> OptionalDouble.class.cast(finalReader.read(i)).orElse(0);\n  }\n else {\n    type=finalReader.getType();\n    reader=finalReader::read;\n  }\n  final WriterConverters writerConverters=new WriterConverters(initialReader,types);\n  final JsonbProperty property=initialReader.getAnnotation(JsonbProperty.class);\n  final JsonbNillable nillable=initialReader.getClassOrPackageAnnotation(JsonbNillable.class);\n  final boolean isNillable=isNillable(property,nillable);\n  final String key=property == null || property.value().isEmpty() ? naming.translateName(entry.getKey()) : property.value();\n  if (result.put(key,new Reader(){\n    @Override public Object read(    final Object instance){\n      return reader.apply(instance);\n    }\n    @Override public ObjectConverter.Writer<?> findObjectConverterWriter(){\n      return writerConverters.writer;\n    }\n    @Override public Type getType(){\n      return type;\n    }\n    @Override public <T extends Annotation>T getAnnotation(    final Class<T> clazz){\n      return finalReader.getAnnotation(clazz);\n    }\n    @Override public <T extends Annotation>T getClassOrPackageAnnotation(    final Class<T> clazz){\n      return finalReader.getClassOrPackageAnnotation(clazz);\n    }\n    @Override public Adapter<?,?> findConverter(){\n      return writerConverters.converter;\n    }\n    @Override public boolean isNillable(    final boolean global){\n      return isNillable;\n    }\n  }\n) != null) {\n    throw new JsonbException(\"Ambiguous field \" + key);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 487,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4071,
                        "startLineNumber": 439,
                        "startColumnNumber": 8,
                        "endLineNumber": 525,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (final Map.Entry<String,Reader> entry : readers.entrySet()) {\n  final Reader initialReader=entry.getValue();\n  if (isTransient(initialReader,visibility)) {\n    validateAnnotationsOnTransientField(initialReader);\n    continue;\n  }\n  if (initialReader.getAnnotation(JohnzonAny.class) != null) {\n    continue;\n  }\n  final Reader finalReader;\n  if (FieldAndMethodAccessMode.CompositeDecoratedType.class.isInstance(initialReader)) {\n    final FieldAndMethodAccessMode.CompositeDecoratedType decoratedType=FieldAndMethodAccessMode.CompositeDecoratedType.class.cast(initialReader);\n    final DecoratedType type2=decoratedType.getType2();\n    if (MethodAccessMode.MethodReader.class.isInstance(type2)) {\n      finalReader=Reader.class.cast(type2);\n    }\n else {\n      finalReader=initialReader;\n    }\n  }\n else {\n    finalReader=initialReader;\n  }\n  final Type type;\n  final Function<Object,Object> reader;\n  if (isOptional(finalReader)) {\n    type=ParameterizedType.class.cast(finalReader.getType()).getActualTypeArguments()[0];\n    reader=i -> ofNullable(finalReader.read(i)).map(o -> Optional.class.cast(o).orElse(null)).orElse(null);\n  }\n else   if (OptionalInt.class == finalReader.getType()) {\n    type=int.class;\n    reader=i -> OptionalInt.class.cast(finalReader.read(i)).orElse(0);\n  }\n else   if (OptionalLong.class == finalReader.getType()) {\n    type=long.class;\n    reader=i -> OptionalLong.class.cast(finalReader.read(i)).orElse(0);\n  }\n else   if (OptionalDouble.class == finalReader.getType()) {\n    type=double.class;\n    reader=i -> OptionalDouble.class.cast(finalReader.read(i)).orElse(0);\n  }\n else {\n    type=finalReader.getType();\n    reader=finalReader::read;\n  }\n  final WriterConverters writerConverters=new WriterConverters(initialReader,types);\n  final JsonbProperty property=initialReader.getAnnotation(JsonbProperty.class);\n  final JsonbNillable nillable=initialReader.getClassOrPackageAnnotation(JsonbNillable.class);\n  final boolean isNillable=isNillable(property,nillable);\n  final String key=property == null || property.value().isEmpty() ? naming.translateName(entry.getKey()) : property.value();\n  if (result.put(key,new Reader(){\n    @Override public Object read(    final Object instance){\n      return reader.apply(instance);\n    }\n    @Override public ObjectConverter.Writer<?> findObjectConverterWriter(){\n      return writerConverters.writer;\n    }\n    @Override public Type getType(){\n      return type;\n    }\n    @Override public <T extends Annotation>T getAnnotation(    final Class<T> clazz){\n      return finalReader.getAnnotation(clazz);\n    }\n    @Override public <T extends Annotation>T getClassOrPackageAnnotation(    final Class<T> clazz){\n      return finalReader.getClassOrPackageAnnotation(clazz);\n    }\n    @Override public Adapter<?,?> findConverter(){\n      return writerConverters.converter;\n    }\n    @Override public boolean isNillable(    final boolean global){\n      return isNillable;\n    }\n  }\n) != null) {\n    throw new JsonbException(\"Ambiguous field \" + key);\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 503,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4372,
                        "startLineNumber": 434,
                        "startColumnNumber": 65,
                        "endLineNumber": 527,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final Map<String,Reader> readers=delegate.findReaders(clazz);\n  final Comparator<String> keyComparator=fieldComparator(clazz);\n  final Map<String,Reader> result=keyComparator == null ? new HashMap<>() : new TreeMap<>(keyComparator);\n  for (  final Map.Entry<String,Reader> entry : readers.entrySet()) {\n    final Reader initialReader=entry.getValue();\n    if (isTransient(initialReader,visibility)) {\n      validateAnnotationsOnTransientField(initialReader);\n      continue;\n    }\n    if (initialReader.getAnnotation(JohnzonAny.class) != null) {\n      continue;\n    }\n    final Reader finalReader;\n    if (FieldAndMethodAccessMode.CompositeDecoratedType.class.isInstance(initialReader)) {\n      final FieldAndMethodAccessMode.CompositeDecoratedType decoratedType=FieldAndMethodAccessMode.CompositeDecoratedType.class.cast(initialReader);\n      final DecoratedType type2=decoratedType.getType2();\n      if (MethodAccessMode.MethodReader.class.isInstance(type2)) {\n        finalReader=Reader.class.cast(type2);\n      }\n else {\n        finalReader=initialReader;\n      }\n    }\n else {\n      finalReader=initialReader;\n    }\n    final Type type;\n    final Function<Object,Object> reader;\n    if (isOptional(finalReader)) {\n      type=ParameterizedType.class.cast(finalReader.getType()).getActualTypeArguments()[0];\n      reader=i -> ofNullable(finalReader.read(i)).map(o -> Optional.class.cast(o).orElse(null)).orElse(null);\n    }\n else     if (OptionalInt.class == finalReader.getType()) {\n      type=int.class;\n      reader=i -> OptionalInt.class.cast(finalReader.read(i)).orElse(0);\n    }\n else     if (OptionalLong.class == finalReader.getType()) {\n      type=long.class;\n      reader=i -> OptionalLong.class.cast(finalReader.read(i)).orElse(0);\n    }\n else     if (OptionalDouble.class == finalReader.getType()) {\n      type=double.class;\n      reader=i -> OptionalDouble.class.cast(finalReader.read(i)).orElse(0);\n    }\n else {\n      type=finalReader.getType();\n      reader=finalReader::read;\n    }\n    final WriterConverters writerConverters=new WriterConverters(initialReader,types);\n    final JsonbProperty property=initialReader.getAnnotation(JsonbProperty.class);\n    final JsonbNillable nillable=initialReader.getClassOrPackageAnnotation(JsonbNillable.class);\n    final boolean isNillable=isNillable(property,nillable);\n    final String key=property == null || property.value().isEmpty() ? naming.translateName(entry.getKey()) : property.value();\n    if (result.put(key,new Reader(){\n      @Override public Object read(      final Object instance){\n        return reader.apply(instance);\n      }\n      @Override public ObjectConverter.Writer<?> findObjectConverterWriter(){\n        return writerConverters.writer;\n      }\n      @Override public Type getType(){\n        return type;\n      }\n      @Override public <T extends Annotation>T getAnnotation(      final Class<T> clazz){\n        return finalReader.getAnnotation(clazz);\n      }\n      @Override public <T extends Annotation>T getClassOrPackageAnnotation(      final Class<T> clazz){\n        return finalReader.getClassOrPackageAnnotation(clazz);\n      }\n      @Override public Adapter<?,?> findConverter(){\n        return writerConverters.converter;\n      }\n      @Override public boolean isNillable(      final boolean global){\n        return isNillable;\n      }\n    }\n) != null) {\n      throw new JsonbException(\"Ambiguous field \" + key);\n    }\n  }\n  return result;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 557,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4447,
                        "startLineNumber": 433,
                        "startColumnNumber": 4,
                        "endLineNumber": 527,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public Map<String,Reader> findReaders(final Class<?> clazz){\n  final Map<String,Reader> readers=delegate.findReaders(clazz);\n  final Comparator<String> keyComparator=fieldComparator(clazz);\n  final Map<String,Reader> result=keyComparator == null ? new HashMap<>() : new TreeMap<>(keyComparator);\n  for (  final Map.Entry<String,Reader> entry : readers.entrySet()) {\n    final Reader initialReader=entry.getValue();\n    if (isTransient(initialReader,visibility)) {\n      validateAnnotationsOnTransientField(initialReader);\n      continue;\n    }\n    if (initialReader.getAnnotation(JohnzonAny.class) != null) {\n      continue;\n    }\n    final Reader finalReader;\n    if (FieldAndMethodAccessMode.CompositeDecoratedType.class.isInstance(initialReader)) {\n      final FieldAndMethodAccessMode.CompositeDecoratedType decoratedType=FieldAndMethodAccessMode.CompositeDecoratedType.class.cast(initialReader);\n      final DecoratedType type2=decoratedType.getType2();\n      if (MethodAccessMode.MethodReader.class.isInstance(type2)) {\n        finalReader=Reader.class.cast(type2);\n      }\n else {\n        finalReader=initialReader;\n      }\n    }\n else {\n      finalReader=initialReader;\n    }\n    final Type type;\n    final Function<Object,Object> reader;\n    if (isOptional(finalReader)) {\n      type=ParameterizedType.class.cast(finalReader.getType()).getActualTypeArguments()[0];\n      reader=i -> ofNullable(finalReader.read(i)).map(o -> Optional.class.cast(o).orElse(null)).orElse(null);\n    }\n else     if (OptionalInt.class == finalReader.getType()) {\n      type=int.class;\n      reader=i -> OptionalInt.class.cast(finalReader.read(i)).orElse(0);\n    }\n else     if (OptionalLong.class == finalReader.getType()) {\n      type=long.class;\n      reader=i -> OptionalLong.class.cast(finalReader.read(i)).orElse(0);\n    }\n else     if (OptionalDouble.class == finalReader.getType()) {\n      type=double.class;\n      reader=i -> OptionalDouble.class.cast(finalReader.read(i)).orElse(0);\n    }\n else {\n      type=finalReader.getType();\n      reader=finalReader::read;\n    }\n    final WriterConverters writerConverters=new WriterConverters(initialReader,types);\n    final JsonbProperty property=initialReader.getAnnotation(JsonbProperty.class);\n    final JsonbNillable nillable=initialReader.getClassOrPackageAnnotation(JsonbNillable.class);\n    final boolean isNillable=isNillable(property,nillable);\n    final String key=property == null || property.value().isEmpty() ? naming.translateName(entry.getKey()) : property.value();\n    if (result.put(key,new Reader(){\n      @Override public Object read(      final Object instance){\n        return reader.apply(instance);\n      }\n      @Override public ObjectConverter.Writer<?> findObjectConverterWriter(){\n        return writerConverters.writer;\n      }\n      @Override public Type getType(){\n        return type;\n      }\n      @Override public <T extends Annotation>T getAnnotation(      final Class<T> clazz){\n        return finalReader.getAnnotation(clazz);\n      }\n      @Override public <T extends Annotation>T getClassOrPackageAnnotation(      final Class<T> clazz){\n        return finalReader.getClassOrPackageAnnotation(clazz);\n      }\n      @Override public Adapter<?,?> findConverter(){\n        return writerConverters.converter;\n      }\n      @Override public boolean isNillable(      final boolean global){\n        return isNillable;\n      }\n    }\n) != null) {\n      throw new JsonbException(\"Ambiguous field \" + key);\n    }\n  }\n  return result;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 576,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 28,
                    "startLineNumber": 456,
                    "startColumnNumber": 20,
                    "endLineNumber": 456,
                    "endColumnNumber": 48
                },
                "nodeContext": "finalReader=initialReader;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 4,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "org.apache.johnzon.mapper.access.AccessMode.Reader"
        },
        {
            "nodeContext": "initialReader",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 13,
                "startLineNumber": 459,
                "startColumnNumber": 30,
                "endLineNumber": 459,
                "endColumnNumber": 43
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 27,
                        "startLineNumber": 459,
                        "startColumnNumber": 16,
                        "endLineNumber": 459,
                        "endColumnNumber": 43
                    },
                    "nodeContext": "finalReader=initialReader",
                    "nodeType": "Assignment",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 28,
                        "startLineNumber": 459,
                        "startColumnNumber": 16,
                        "endLineNumber": 459,
                        "endColumnNumber": 44
                    },
                    "nodeContext": "finalReader=initialReader;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 60,
                        "startLineNumber": 458,
                        "startColumnNumber": 19,
                        "endLineNumber": 460,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  finalReader=initialReader;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 5,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 660,
                        "startLineNumber": 450,
                        "startColumnNumber": 12,
                        "endLineNumber": 460,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (FieldAndMethodAccessMode.CompositeDecoratedType.class.isInstance(initialReader)) {\n  final FieldAndMethodAccessMode.CompositeDecoratedType decoratedType=FieldAndMethodAccessMode.CompositeDecoratedType.class.cast(initialReader);\n  final DecoratedType type2=decoratedType.getType2();\n  if (MethodAccessMode.MethodReader.class.isInstance(type2)) {\n    finalReader=Reader.class.cast(type2);\n  }\n else {\n    finalReader=initialReader;\n  }\n}\n else {\n  finalReader=initialReader;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 64,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 4006,
                        "startLineNumber": 439,
                        "startColumnNumber": 73,
                        "endLineNumber": 525,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final Reader initialReader=entry.getValue();\n  if (isTransient(initialReader,visibility)) {\n    validateAnnotationsOnTransientField(initialReader);\n    continue;\n  }\n  if (initialReader.getAnnotation(JohnzonAny.class) != null) {\n    continue;\n  }\n  final Reader finalReader;\n  if (FieldAndMethodAccessMode.CompositeDecoratedType.class.isInstance(initialReader)) {\n    final FieldAndMethodAccessMode.CompositeDecoratedType decoratedType=FieldAndMethodAccessMode.CompositeDecoratedType.class.cast(initialReader);\n    final DecoratedType type2=decoratedType.getType2();\n    if (MethodAccessMode.MethodReader.class.isInstance(type2)) {\n      finalReader=Reader.class.cast(type2);\n    }\n else {\n      finalReader=initialReader;\n    }\n  }\n else {\n    finalReader=initialReader;\n  }\n  final Type type;\n  final Function<Object,Object> reader;\n  if (isOptional(finalReader)) {\n    type=ParameterizedType.class.cast(finalReader.getType()).getActualTypeArguments()[0];\n    reader=i -> ofNullable(finalReader.read(i)).map(o -> Optional.class.cast(o).orElse(null)).orElse(null);\n  }\n else   if (OptionalInt.class == finalReader.getType()) {\n    type=int.class;\n    reader=i -> OptionalInt.class.cast(finalReader.read(i)).orElse(0);\n  }\n else   if (OptionalLong.class == finalReader.getType()) {\n    type=long.class;\n    reader=i -> OptionalLong.class.cast(finalReader.read(i)).orElse(0);\n  }\n else   if (OptionalDouble.class == finalReader.getType()) {\n    type=double.class;\n    reader=i -> OptionalDouble.class.cast(finalReader.read(i)).orElse(0);\n  }\n else {\n    type=finalReader.getType();\n    reader=finalReader::read;\n  }\n  final WriterConverters writerConverters=new WriterConverters(initialReader,types);\n  final JsonbProperty property=initialReader.getAnnotation(JsonbProperty.class);\n  final JsonbNillable nillable=initialReader.getClassOrPackageAnnotation(JsonbNillable.class);\n  final boolean isNillable=isNillable(property,nillable);\n  final String key=property == null || property.value().isEmpty() ? naming.translateName(entry.getKey()) : property.value();\n  if (result.put(key,new Reader(){\n    @Override public Object read(    final Object instance){\n      return reader.apply(instance);\n    }\n    @Override public ObjectConverter.Writer<?> findObjectConverterWriter(){\n      return writerConverters.writer;\n    }\n    @Override public Type getType(){\n      return type;\n    }\n    @Override public <T extends Annotation>T getAnnotation(    final Class<T> clazz){\n      return finalReader.getAnnotation(clazz);\n    }\n    @Override public <T extends Annotation>T getClassOrPackageAnnotation(    final Class<T> clazz){\n      return finalReader.getClassOrPackageAnnotation(clazz);\n    }\n    @Override public Adapter<?,?> findConverter(){\n      return writerConverters.converter;\n    }\n    @Override public boolean isNillable(    final boolean global){\n      return isNillable;\n    }\n  }\n) != null) {\n    throw new JsonbException(\"Ambiguous field \" + key);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 487,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4071,
                        "startLineNumber": 439,
                        "startColumnNumber": 8,
                        "endLineNumber": 525,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (final Map.Entry<String,Reader> entry : readers.entrySet()) {\n  final Reader initialReader=entry.getValue();\n  if (isTransient(initialReader,visibility)) {\n    validateAnnotationsOnTransientField(initialReader);\n    continue;\n  }\n  if (initialReader.getAnnotation(JohnzonAny.class) != null) {\n    continue;\n  }\n  final Reader finalReader;\n  if (FieldAndMethodAccessMode.CompositeDecoratedType.class.isInstance(initialReader)) {\n    final FieldAndMethodAccessMode.CompositeDecoratedType decoratedType=FieldAndMethodAccessMode.CompositeDecoratedType.class.cast(initialReader);\n    final DecoratedType type2=decoratedType.getType2();\n    if (MethodAccessMode.MethodReader.class.isInstance(type2)) {\n      finalReader=Reader.class.cast(type2);\n    }\n else {\n      finalReader=initialReader;\n    }\n  }\n else {\n    finalReader=initialReader;\n  }\n  final Type type;\n  final Function<Object,Object> reader;\n  if (isOptional(finalReader)) {\n    type=ParameterizedType.class.cast(finalReader.getType()).getActualTypeArguments()[0];\n    reader=i -> ofNullable(finalReader.read(i)).map(o -> Optional.class.cast(o).orElse(null)).orElse(null);\n  }\n else   if (OptionalInt.class == finalReader.getType()) {\n    type=int.class;\n    reader=i -> OptionalInt.class.cast(finalReader.read(i)).orElse(0);\n  }\n else   if (OptionalLong.class == finalReader.getType()) {\n    type=long.class;\n    reader=i -> OptionalLong.class.cast(finalReader.read(i)).orElse(0);\n  }\n else   if (OptionalDouble.class == finalReader.getType()) {\n    type=double.class;\n    reader=i -> OptionalDouble.class.cast(finalReader.read(i)).orElse(0);\n  }\n else {\n    type=finalReader.getType();\n    reader=finalReader::read;\n  }\n  final WriterConverters writerConverters=new WriterConverters(initialReader,types);\n  final JsonbProperty property=initialReader.getAnnotation(JsonbProperty.class);\n  final JsonbNillable nillable=initialReader.getClassOrPackageAnnotation(JsonbNillable.class);\n  final boolean isNillable=isNillable(property,nillable);\n  final String key=property == null || property.value().isEmpty() ? naming.translateName(entry.getKey()) : property.value();\n  if (result.put(key,new Reader(){\n    @Override public Object read(    final Object instance){\n      return reader.apply(instance);\n    }\n    @Override public ObjectConverter.Writer<?> findObjectConverterWriter(){\n      return writerConverters.writer;\n    }\n    @Override public Type getType(){\n      return type;\n    }\n    @Override public <T extends Annotation>T getAnnotation(    final Class<T> clazz){\n      return finalReader.getAnnotation(clazz);\n    }\n    @Override public <T extends Annotation>T getClassOrPackageAnnotation(    final Class<T> clazz){\n      return finalReader.getClassOrPackageAnnotation(clazz);\n    }\n    @Override public Adapter<?,?> findConverter(){\n      return writerConverters.converter;\n    }\n    @Override public boolean isNillable(    final boolean global){\n      return isNillable;\n    }\n  }\n) != null) {\n    throw new JsonbException(\"Ambiguous field \" + key);\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 503,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4372,
                        "startLineNumber": 434,
                        "startColumnNumber": 65,
                        "endLineNumber": 527,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final Map<String,Reader> readers=delegate.findReaders(clazz);\n  final Comparator<String> keyComparator=fieldComparator(clazz);\n  final Map<String,Reader> result=keyComparator == null ? new HashMap<>() : new TreeMap<>(keyComparator);\n  for (  final Map.Entry<String,Reader> entry : readers.entrySet()) {\n    final Reader initialReader=entry.getValue();\n    if (isTransient(initialReader,visibility)) {\n      validateAnnotationsOnTransientField(initialReader);\n      continue;\n    }\n    if (initialReader.getAnnotation(JohnzonAny.class) != null) {\n      continue;\n    }\n    final Reader finalReader;\n    if (FieldAndMethodAccessMode.CompositeDecoratedType.class.isInstance(initialReader)) {\n      final FieldAndMethodAccessMode.CompositeDecoratedType decoratedType=FieldAndMethodAccessMode.CompositeDecoratedType.class.cast(initialReader);\n      final DecoratedType type2=decoratedType.getType2();\n      if (MethodAccessMode.MethodReader.class.isInstance(type2)) {\n        finalReader=Reader.class.cast(type2);\n      }\n else {\n        finalReader=initialReader;\n      }\n    }\n else {\n      finalReader=initialReader;\n    }\n    final Type type;\n    final Function<Object,Object> reader;\n    if (isOptional(finalReader)) {\n      type=ParameterizedType.class.cast(finalReader.getType()).getActualTypeArguments()[0];\n      reader=i -> ofNullable(finalReader.read(i)).map(o -> Optional.class.cast(o).orElse(null)).orElse(null);\n    }\n else     if (OptionalInt.class == finalReader.getType()) {\n      type=int.class;\n      reader=i -> OptionalInt.class.cast(finalReader.read(i)).orElse(0);\n    }\n else     if (OptionalLong.class == finalReader.getType()) {\n      type=long.class;\n      reader=i -> OptionalLong.class.cast(finalReader.read(i)).orElse(0);\n    }\n else     if (OptionalDouble.class == finalReader.getType()) {\n      type=double.class;\n      reader=i -> OptionalDouble.class.cast(finalReader.read(i)).orElse(0);\n    }\n else {\n      type=finalReader.getType();\n      reader=finalReader::read;\n    }\n    final WriterConverters writerConverters=new WriterConverters(initialReader,types);\n    final JsonbProperty property=initialReader.getAnnotation(JsonbProperty.class);\n    final JsonbNillable nillable=initialReader.getClassOrPackageAnnotation(JsonbNillable.class);\n    final boolean isNillable=isNillable(property,nillable);\n    final String key=property == null || property.value().isEmpty() ? naming.translateName(entry.getKey()) : property.value();\n    if (result.put(key,new Reader(){\n      @Override public Object read(      final Object instance){\n        return reader.apply(instance);\n      }\n      @Override public ObjectConverter.Writer<?> findObjectConverterWriter(){\n        return writerConverters.writer;\n      }\n      @Override public Type getType(){\n        return type;\n      }\n      @Override public <T extends Annotation>T getAnnotation(      final Class<T> clazz){\n        return finalReader.getAnnotation(clazz);\n      }\n      @Override public <T extends Annotation>T getClassOrPackageAnnotation(      final Class<T> clazz){\n        return finalReader.getClassOrPackageAnnotation(clazz);\n      }\n      @Override public Adapter<?,?> findConverter(){\n        return writerConverters.converter;\n      }\n      @Override public boolean isNillable(      final boolean global){\n        return isNillable;\n      }\n    }\n) != null) {\n      throw new JsonbException(\"Ambiguous field \" + key);\n    }\n  }\n  return result;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 557,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4447,
                        "startLineNumber": 433,
                        "startColumnNumber": 4,
                        "endLineNumber": 527,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public Map<String,Reader> findReaders(final Class<?> clazz){\n  final Map<String,Reader> readers=delegate.findReaders(clazz);\n  final Comparator<String> keyComparator=fieldComparator(clazz);\n  final Map<String,Reader> result=keyComparator == null ? new HashMap<>() : new TreeMap<>(keyComparator);\n  for (  final Map.Entry<String,Reader> entry : readers.entrySet()) {\n    final Reader initialReader=entry.getValue();\n    if (isTransient(initialReader,visibility)) {\n      validateAnnotationsOnTransientField(initialReader);\n      continue;\n    }\n    if (initialReader.getAnnotation(JohnzonAny.class) != null) {\n      continue;\n    }\n    final Reader finalReader;\n    if (FieldAndMethodAccessMode.CompositeDecoratedType.class.isInstance(initialReader)) {\n      final FieldAndMethodAccessMode.CompositeDecoratedType decoratedType=FieldAndMethodAccessMode.CompositeDecoratedType.class.cast(initialReader);\n      final DecoratedType type2=decoratedType.getType2();\n      if (MethodAccessMode.MethodReader.class.isInstance(type2)) {\n        finalReader=Reader.class.cast(type2);\n      }\n else {\n        finalReader=initialReader;\n      }\n    }\n else {\n      finalReader=initialReader;\n    }\n    final Type type;\n    final Function<Object,Object> reader;\n    if (isOptional(finalReader)) {\n      type=ParameterizedType.class.cast(finalReader.getType()).getActualTypeArguments()[0];\n      reader=i -> ofNullable(finalReader.read(i)).map(o -> Optional.class.cast(o).orElse(null)).orElse(null);\n    }\n else     if (OptionalInt.class == finalReader.getType()) {\n      type=int.class;\n      reader=i -> OptionalInt.class.cast(finalReader.read(i)).orElse(0);\n    }\n else     if (OptionalLong.class == finalReader.getType()) {\n      type=long.class;\n      reader=i -> OptionalLong.class.cast(finalReader.read(i)).orElse(0);\n    }\n else     if (OptionalDouble.class == finalReader.getType()) {\n      type=double.class;\n      reader=i -> OptionalDouble.class.cast(finalReader.read(i)).orElse(0);\n    }\n else {\n      type=finalReader.getType();\n      reader=finalReader::read;\n    }\n    final WriterConverters writerConverters=new WriterConverters(initialReader,types);\n    final JsonbProperty property=initialReader.getAnnotation(JsonbProperty.class);\n    final JsonbNillable nillable=initialReader.getClassOrPackageAnnotation(JsonbNillable.class);\n    final boolean isNillable=isNillable(property,nillable);\n    final String key=property == null || property.value().isEmpty() ? naming.translateName(entry.getKey()) : property.value();\n    if (result.put(key,new Reader(){\n      @Override public Object read(      final Object instance){\n        return reader.apply(instance);\n      }\n      @Override public ObjectConverter.Writer<?> findObjectConverterWriter(){\n        return writerConverters.writer;\n      }\n      @Override public Type getType(){\n        return type;\n      }\n      @Override public <T extends Annotation>T getAnnotation(      final Class<T> clazz){\n        return finalReader.getAnnotation(clazz);\n      }\n      @Override public <T extends Annotation>T getClassOrPackageAnnotation(      final Class<T> clazz){\n        return finalReader.getClassOrPackageAnnotation(clazz);\n      }\n      @Override public Adapter<?,?> findConverter(){\n        return writerConverters.converter;\n      }\n      @Override public boolean isNillable(      final boolean global){\n        return isNillable;\n      }\n    }\n) != null) {\n      throw new JsonbException(\"Ambiguous field \" + key);\n    }\n  }\n  return result;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 576,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 28,
                    "startLineNumber": 459,
                    "startColumnNumber": 16,
                    "endLineNumber": 459,
                    "endColumnNumber": 44
                },
                "nodeContext": "finalReader=initialReader;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 4,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "org.apache.johnzon.mapper.access.AccessMode.Reader"
        },
        {
            "nodeContext": "initialReader",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 13,
                "startLineNumber": 482,
                "startColumnNumber": 75,
                "endLineNumber": 482,
                "endColumnNumber": 88
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 42,
                        "startLineNumber": 482,
                        "startColumnNumber": 54,
                        "endLineNumber": 482,
                        "endColumnNumber": 96
                    },
                    "nodeContext": "new WriterConverters(initialReader,types)",
                    "nodeType": "ClassInstanceCreation",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 61,
                        "startLineNumber": 482,
                        "startColumnNumber": 35,
                        "endLineNumber": 482,
                        "endColumnNumber": 96
                    },
                    "nodeContext": "writerConverters=new WriterConverters(initialReader,types)",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 85,
                        "startLineNumber": 482,
                        "startColumnNumber": 12,
                        "endLineNumber": 482,
                        "endColumnNumber": 97
                    },
                    "nodeContext": "final WriterConverters writerConverters=new WriterConverters(initialReader,types);\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 11,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 4006,
                        "startLineNumber": 439,
                        "startColumnNumber": 73,
                        "endLineNumber": 525,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final Reader initialReader=entry.getValue();\n  if (isTransient(initialReader,visibility)) {\n    validateAnnotationsOnTransientField(initialReader);\n    continue;\n  }\n  if (initialReader.getAnnotation(JohnzonAny.class) != null) {\n    continue;\n  }\n  final Reader finalReader;\n  if (FieldAndMethodAccessMode.CompositeDecoratedType.class.isInstance(initialReader)) {\n    final FieldAndMethodAccessMode.CompositeDecoratedType decoratedType=FieldAndMethodAccessMode.CompositeDecoratedType.class.cast(initialReader);\n    final DecoratedType type2=decoratedType.getType2();\n    if (MethodAccessMode.MethodReader.class.isInstance(type2)) {\n      finalReader=Reader.class.cast(type2);\n    }\n else {\n      finalReader=initialReader;\n    }\n  }\n else {\n    finalReader=initialReader;\n  }\n  final Type type;\n  final Function<Object,Object> reader;\n  if (isOptional(finalReader)) {\n    type=ParameterizedType.class.cast(finalReader.getType()).getActualTypeArguments()[0];\n    reader=i -> ofNullable(finalReader.read(i)).map(o -> Optional.class.cast(o).orElse(null)).orElse(null);\n  }\n else   if (OptionalInt.class == finalReader.getType()) {\n    type=int.class;\n    reader=i -> OptionalInt.class.cast(finalReader.read(i)).orElse(0);\n  }\n else   if (OptionalLong.class == finalReader.getType()) {\n    type=long.class;\n    reader=i -> OptionalLong.class.cast(finalReader.read(i)).orElse(0);\n  }\n else   if (OptionalDouble.class == finalReader.getType()) {\n    type=double.class;\n    reader=i -> OptionalDouble.class.cast(finalReader.read(i)).orElse(0);\n  }\n else {\n    type=finalReader.getType();\n    reader=finalReader::read;\n  }\n  final WriterConverters writerConverters=new WriterConverters(initialReader,types);\n  final JsonbProperty property=initialReader.getAnnotation(JsonbProperty.class);\n  final JsonbNillable nillable=initialReader.getClassOrPackageAnnotation(JsonbNillable.class);\n  final boolean isNillable=isNillable(property,nillable);\n  final String key=property == null || property.value().isEmpty() ? naming.translateName(entry.getKey()) : property.value();\n  if (result.put(key,new Reader(){\n    @Override public Object read(    final Object instance){\n      return reader.apply(instance);\n    }\n    @Override public ObjectConverter.Writer<?> findObjectConverterWriter(){\n      return writerConverters.writer;\n    }\n    @Override public Type getType(){\n      return type;\n    }\n    @Override public <T extends Annotation>T getAnnotation(    final Class<T> clazz){\n      return finalReader.getAnnotation(clazz);\n    }\n    @Override public <T extends Annotation>T getClassOrPackageAnnotation(    final Class<T> clazz){\n      return finalReader.getClassOrPackageAnnotation(clazz);\n    }\n    @Override public Adapter<?,?> findConverter(){\n      return writerConverters.converter;\n    }\n    @Override public boolean isNillable(    final boolean global){\n      return isNillable;\n    }\n  }\n) != null) {\n    throw new JsonbException(\"Ambiguous field \" + key);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 487,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4071,
                        "startLineNumber": 439,
                        "startColumnNumber": 8,
                        "endLineNumber": 525,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (final Map.Entry<String,Reader> entry : readers.entrySet()) {\n  final Reader initialReader=entry.getValue();\n  if (isTransient(initialReader,visibility)) {\n    validateAnnotationsOnTransientField(initialReader);\n    continue;\n  }\n  if (initialReader.getAnnotation(JohnzonAny.class) != null) {\n    continue;\n  }\n  final Reader finalReader;\n  if (FieldAndMethodAccessMode.CompositeDecoratedType.class.isInstance(initialReader)) {\n    final FieldAndMethodAccessMode.CompositeDecoratedType decoratedType=FieldAndMethodAccessMode.CompositeDecoratedType.class.cast(initialReader);\n    final DecoratedType type2=decoratedType.getType2();\n    if (MethodAccessMode.MethodReader.class.isInstance(type2)) {\n      finalReader=Reader.class.cast(type2);\n    }\n else {\n      finalReader=initialReader;\n    }\n  }\n else {\n    finalReader=initialReader;\n  }\n  final Type type;\n  final Function<Object,Object> reader;\n  if (isOptional(finalReader)) {\n    type=ParameterizedType.class.cast(finalReader.getType()).getActualTypeArguments()[0];\n    reader=i -> ofNullable(finalReader.read(i)).map(o -> Optional.class.cast(o).orElse(null)).orElse(null);\n  }\n else   if (OptionalInt.class == finalReader.getType()) {\n    type=int.class;\n    reader=i -> OptionalInt.class.cast(finalReader.read(i)).orElse(0);\n  }\n else   if (OptionalLong.class == finalReader.getType()) {\n    type=long.class;\n    reader=i -> OptionalLong.class.cast(finalReader.read(i)).orElse(0);\n  }\n else   if (OptionalDouble.class == finalReader.getType()) {\n    type=double.class;\n    reader=i -> OptionalDouble.class.cast(finalReader.read(i)).orElse(0);\n  }\n else {\n    type=finalReader.getType();\n    reader=finalReader::read;\n  }\n  final WriterConverters writerConverters=new WriterConverters(initialReader,types);\n  final JsonbProperty property=initialReader.getAnnotation(JsonbProperty.class);\n  final JsonbNillable nillable=initialReader.getClassOrPackageAnnotation(JsonbNillable.class);\n  final boolean isNillable=isNillable(property,nillable);\n  final String key=property == null || property.value().isEmpty() ? naming.translateName(entry.getKey()) : property.value();\n  if (result.put(key,new Reader(){\n    @Override public Object read(    final Object instance){\n      return reader.apply(instance);\n    }\n    @Override public ObjectConverter.Writer<?> findObjectConverterWriter(){\n      return writerConverters.writer;\n    }\n    @Override public Type getType(){\n      return type;\n    }\n    @Override public <T extends Annotation>T getAnnotation(    final Class<T> clazz){\n      return finalReader.getAnnotation(clazz);\n    }\n    @Override public <T extends Annotation>T getClassOrPackageAnnotation(    final Class<T> clazz){\n      return finalReader.getClassOrPackageAnnotation(clazz);\n    }\n    @Override public Adapter<?,?> findConverter(){\n      return writerConverters.converter;\n    }\n    @Override public boolean isNillable(    final boolean global){\n      return isNillable;\n    }\n  }\n) != null) {\n    throw new JsonbException(\"Ambiguous field \" + key);\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 503,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4372,
                        "startLineNumber": 434,
                        "startColumnNumber": 65,
                        "endLineNumber": 527,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final Map<String,Reader> readers=delegate.findReaders(clazz);\n  final Comparator<String> keyComparator=fieldComparator(clazz);\n  final Map<String,Reader> result=keyComparator == null ? new HashMap<>() : new TreeMap<>(keyComparator);\n  for (  final Map.Entry<String,Reader> entry : readers.entrySet()) {\n    final Reader initialReader=entry.getValue();\n    if (isTransient(initialReader,visibility)) {\n      validateAnnotationsOnTransientField(initialReader);\n      continue;\n    }\n    if (initialReader.getAnnotation(JohnzonAny.class) != null) {\n      continue;\n    }\n    final Reader finalReader;\n    if (FieldAndMethodAccessMode.CompositeDecoratedType.class.isInstance(initialReader)) {\n      final FieldAndMethodAccessMode.CompositeDecoratedType decoratedType=FieldAndMethodAccessMode.CompositeDecoratedType.class.cast(initialReader);\n      final DecoratedType type2=decoratedType.getType2();\n      if (MethodAccessMode.MethodReader.class.isInstance(type2)) {\n        finalReader=Reader.class.cast(type2);\n      }\n else {\n        finalReader=initialReader;\n      }\n    }\n else {\n      finalReader=initialReader;\n    }\n    final Type type;\n    final Function<Object,Object> reader;\n    if (isOptional(finalReader)) {\n      type=ParameterizedType.class.cast(finalReader.getType()).getActualTypeArguments()[0];\n      reader=i -> ofNullable(finalReader.read(i)).map(o -> Optional.class.cast(o).orElse(null)).orElse(null);\n    }\n else     if (OptionalInt.class == finalReader.getType()) {\n      type=int.class;\n      reader=i -> OptionalInt.class.cast(finalReader.read(i)).orElse(0);\n    }\n else     if (OptionalLong.class == finalReader.getType()) {\n      type=long.class;\n      reader=i -> OptionalLong.class.cast(finalReader.read(i)).orElse(0);\n    }\n else     if (OptionalDouble.class == finalReader.getType()) {\n      type=double.class;\n      reader=i -> OptionalDouble.class.cast(finalReader.read(i)).orElse(0);\n    }\n else {\n      type=finalReader.getType();\n      reader=finalReader::read;\n    }\n    final WriterConverters writerConverters=new WriterConverters(initialReader,types);\n    final JsonbProperty property=initialReader.getAnnotation(JsonbProperty.class);\n    final JsonbNillable nillable=initialReader.getClassOrPackageAnnotation(JsonbNillable.class);\n    final boolean isNillable=isNillable(property,nillable);\n    final String key=property == null || property.value().isEmpty() ? naming.translateName(entry.getKey()) : property.value();\n    if (result.put(key,new Reader(){\n      @Override public Object read(      final Object instance){\n        return reader.apply(instance);\n      }\n      @Override public ObjectConverter.Writer<?> findObjectConverterWriter(){\n        return writerConverters.writer;\n      }\n      @Override public Type getType(){\n        return type;\n      }\n      @Override public <T extends Annotation>T getAnnotation(      final Class<T> clazz){\n        return finalReader.getAnnotation(clazz);\n      }\n      @Override public <T extends Annotation>T getClassOrPackageAnnotation(      final Class<T> clazz){\n        return finalReader.getClassOrPackageAnnotation(clazz);\n      }\n      @Override public Adapter<?,?> findConverter(){\n        return writerConverters.converter;\n      }\n      @Override public boolean isNillable(      final boolean global){\n        return isNillable;\n      }\n    }\n) != null) {\n      throw new JsonbException(\"Ambiguous field \" + key);\n    }\n  }\n  return result;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 557,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4447,
                        "startLineNumber": 433,
                        "startColumnNumber": 4,
                        "endLineNumber": 527,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public Map<String,Reader> findReaders(final Class<?> clazz){\n  final Map<String,Reader> readers=delegate.findReaders(clazz);\n  final Comparator<String> keyComparator=fieldComparator(clazz);\n  final Map<String,Reader> result=keyComparator == null ? new HashMap<>() : new TreeMap<>(keyComparator);\n  for (  final Map.Entry<String,Reader> entry : readers.entrySet()) {\n    final Reader initialReader=entry.getValue();\n    if (isTransient(initialReader,visibility)) {\n      validateAnnotationsOnTransientField(initialReader);\n      continue;\n    }\n    if (initialReader.getAnnotation(JohnzonAny.class) != null) {\n      continue;\n    }\n    final Reader finalReader;\n    if (FieldAndMethodAccessMode.CompositeDecoratedType.class.isInstance(initialReader)) {\n      final FieldAndMethodAccessMode.CompositeDecoratedType decoratedType=FieldAndMethodAccessMode.CompositeDecoratedType.class.cast(initialReader);\n      final DecoratedType type2=decoratedType.getType2();\n      if (MethodAccessMode.MethodReader.class.isInstance(type2)) {\n        finalReader=Reader.class.cast(type2);\n      }\n else {\n        finalReader=initialReader;\n      }\n    }\n else {\n      finalReader=initialReader;\n    }\n    final Type type;\n    final Function<Object,Object> reader;\n    if (isOptional(finalReader)) {\n      type=ParameterizedType.class.cast(finalReader.getType()).getActualTypeArguments()[0];\n      reader=i -> ofNullable(finalReader.read(i)).map(o -> Optional.class.cast(o).orElse(null)).orElse(null);\n    }\n else     if (OptionalInt.class == finalReader.getType()) {\n      type=int.class;\n      reader=i -> OptionalInt.class.cast(finalReader.read(i)).orElse(0);\n    }\n else     if (OptionalLong.class == finalReader.getType()) {\n      type=long.class;\n      reader=i -> OptionalLong.class.cast(finalReader.read(i)).orElse(0);\n    }\n else     if (OptionalDouble.class == finalReader.getType()) {\n      type=double.class;\n      reader=i -> OptionalDouble.class.cast(finalReader.read(i)).orElse(0);\n    }\n else {\n      type=finalReader.getType();\n      reader=finalReader::read;\n    }\n    final WriterConverters writerConverters=new WriterConverters(initialReader,types);\n    final JsonbProperty property=initialReader.getAnnotation(JsonbProperty.class);\n    final JsonbNillable nillable=initialReader.getClassOrPackageAnnotation(JsonbNillable.class);\n    final boolean isNillable=isNillable(property,nillable);\n    final String key=property == null || property.value().isEmpty() ? naming.translateName(entry.getKey()) : property.value();\n    if (result.put(key,new Reader(){\n      @Override public Object read(      final Object instance){\n        return reader.apply(instance);\n      }\n      @Override public ObjectConverter.Writer<?> findObjectConverterWriter(){\n        return writerConverters.writer;\n      }\n      @Override public Type getType(){\n        return type;\n      }\n      @Override public <T extends Annotation>T getAnnotation(      final Class<T> clazz){\n        return finalReader.getAnnotation(clazz);\n      }\n      @Override public <T extends Annotation>T getClassOrPackageAnnotation(      final Class<T> clazz){\n        return finalReader.getClassOrPackageAnnotation(clazz);\n      }\n      @Override public Adapter<?,?> findConverter(){\n        return writerConverters.converter;\n      }\n      @Override public boolean isNillable(      final boolean global){\n        return isNillable;\n      }\n    }\n) != null) {\n      throw new JsonbException(\"Ambiguous field \" + key);\n    }\n  }\n  return result;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 576,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 85,
                    "startLineNumber": 482,
                    "startColumnNumber": 12,
                    "endLineNumber": 482,
                    "endColumnNumber": 97
                },
                "nodeContext": "final WriterConverters writerConverters=new WriterConverters(initialReader,types);\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 11,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "org.apache.johnzon.mapper.access.AccessMode.Reader"
        },
        {
            "nodeContext": "initialReader",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 13,
                "startLineNumber": 483,
                "startColumnNumber": 43,
                "endLineNumber": 483,
                "endColumnNumber": 56
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 48,
                        "startLineNumber": 483,
                        "startColumnNumber": 43,
                        "endLineNumber": 483,
                        "endColumnNumber": 91
                    },
                    "nodeContext": "initialReader.getAnnotation(JsonbProperty.class)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 6,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 59,
                        "startLineNumber": 483,
                        "startColumnNumber": 32,
                        "endLineNumber": 483,
                        "endColumnNumber": 91
                    },
                    "nodeContext": "property=initialReader.getAnnotation(JsonbProperty.class)",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 80,
                        "startLineNumber": 483,
                        "startColumnNumber": 12,
                        "endLineNumber": 483,
                        "endColumnNumber": 92
                    },
                    "nodeContext": "final JsonbProperty property=initialReader.getAnnotation(JsonbProperty.class);\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 12,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 4006,
                        "startLineNumber": 439,
                        "startColumnNumber": 73,
                        "endLineNumber": 525,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final Reader initialReader=entry.getValue();\n  if (isTransient(initialReader,visibility)) {\n    validateAnnotationsOnTransientField(initialReader);\n    continue;\n  }\n  if (initialReader.getAnnotation(JohnzonAny.class) != null) {\n    continue;\n  }\n  final Reader finalReader;\n  if (FieldAndMethodAccessMode.CompositeDecoratedType.class.isInstance(initialReader)) {\n    final FieldAndMethodAccessMode.CompositeDecoratedType decoratedType=FieldAndMethodAccessMode.CompositeDecoratedType.class.cast(initialReader);\n    final DecoratedType type2=decoratedType.getType2();\n    if (MethodAccessMode.MethodReader.class.isInstance(type2)) {\n      finalReader=Reader.class.cast(type2);\n    }\n else {\n      finalReader=initialReader;\n    }\n  }\n else {\n    finalReader=initialReader;\n  }\n  final Type type;\n  final Function<Object,Object> reader;\n  if (isOptional(finalReader)) {\n    type=ParameterizedType.class.cast(finalReader.getType()).getActualTypeArguments()[0];\n    reader=i -> ofNullable(finalReader.read(i)).map(o -> Optional.class.cast(o).orElse(null)).orElse(null);\n  }\n else   if (OptionalInt.class == finalReader.getType()) {\n    type=int.class;\n    reader=i -> OptionalInt.class.cast(finalReader.read(i)).orElse(0);\n  }\n else   if (OptionalLong.class == finalReader.getType()) {\n    type=long.class;\n    reader=i -> OptionalLong.class.cast(finalReader.read(i)).orElse(0);\n  }\n else   if (OptionalDouble.class == finalReader.getType()) {\n    type=double.class;\n    reader=i -> OptionalDouble.class.cast(finalReader.read(i)).orElse(0);\n  }\n else {\n    type=finalReader.getType();\n    reader=finalReader::read;\n  }\n  final WriterConverters writerConverters=new WriterConverters(initialReader,types);\n  final JsonbProperty property=initialReader.getAnnotation(JsonbProperty.class);\n  final JsonbNillable nillable=initialReader.getClassOrPackageAnnotation(JsonbNillable.class);\n  final boolean isNillable=isNillable(property,nillable);\n  final String key=property == null || property.value().isEmpty() ? naming.translateName(entry.getKey()) : property.value();\n  if (result.put(key,new Reader(){\n    @Override public Object read(    final Object instance){\n      return reader.apply(instance);\n    }\n    @Override public ObjectConverter.Writer<?> findObjectConverterWriter(){\n      return writerConverters.writer;\n    }\n    @Override public Type getType(){\n      return type;\n    }\n    @Override public <T extends Annotation>T getAnnotation(    final Class<T> clazz){\n      return finalReader.getAnnotation(clazz);\n    }\n    @Override public <T extends Annotation>T getClassOrPackageAnnotation(    final Class<T> clazz){\n      return finalReader.getClassOrPackageAnnotation(clazz);\n    }\n    @Override public Adapter<?,?> findConverter(){\n      return writerConverters.converter;\n    }\n    @Override public boolean isNillable(    final boolean global){\n      return isNillable;\n    }\n  }\n) != null) {\n    throw new JsonbException(\"Ambiguous field \" + key);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 487,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4071,
                        "startLineNumber": 439,
                        "startColumnNumber": 8,
                        "endLineNumber": 525,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (final Map.Entry<String,Reader> entry : readers.entrySet()) {\n  final Reader initialReader=entry.getValue();\n  if (isTransient(initialReader,visibility)) {\n    validateAnnotationsOnTransientField(initialReader);\n    continue;\n  }\n  if (initialReader.getAnnotation(JohnzonAny.class) != null) {\n    continue;\n  }\n  final Reader finalReader;\n  if (FieldAndMethodAccessMode.CompositeDecoratedType.class.isInstance(initialReader)) {\n    final FieldAndMethodAccessMode.CompositeDecoratedType decoratedType=FieldAndMethodAccessMode.CompositeDecoratedType.class.cast(initialReader);\n    final DecoratedType type2=decoratedType.getType2();\n    if (MethodAccessMode.MethodReader.class.isInstance(type2)) {\n      finalReader=Reader.class.cast(type2);\n    }\n else {\n      finalReader=initialReader;\n    }\n  }\n else {\n    finalReader=initialReader;\n  }\n  final Type type;\n  final Function<Object,Object> reader;\n  if (isOptional(finalReader)) {\n    type=ParameterizedType.class.cast(finalReader.getType()).getActualTypeArguments()[0];\n    reader=i -> ofNullable(finalReader.read(i)).map(o -> Optional.class.cast(o).orElse(null)).orElse(null);\n  }\n else   if (OptionalInt.class == finalReader.getType()) {\n    type=int.class;\n    reader=i -> OptionalInt.class.cast(finalReader.read(i)).orElse(0);\n  }\n else   if (OptionalLong.class == finalReader.getType()) {\n    type=long.class;\n    reader=i -> OptionalLong.class.cast(finalReader.read(i)).orElse(0);\n  }\n else   if (OptionalDouble.class == finalReader.getType()) {\n    type=double.class;\n    reader=i -> OptionalDouble.class.cast(finalReader.read(i)).orElse(0);\n  }\n else {\n    type=finalReader.getType();\n    reader=finalReader::read;\n  }\n  final WriterConverters writerConverters=new WriterConverters(initialReader,types);\n  final JsonbProperty property=initialReader.getAnnotation(JsonbProperty.class);\n  final JsonbNillable nillable=initialReader.getClassOrPackageAnnotation(JsonbNillable.class);\n  final boolean isNillable=isNillable(property,nillable);\n  final String key=property == null || property.value().isEmpty() ? naming.translateName(entry.getKey()) : property.value();\n  if (result.put(key,new Reader(){\n    @Override public Object read(    final Object instance){\n      return reader.apply(instance);\n    }\n    @Override public ObjectConverter.Writer<?> findObjectConverterWriter(){\n      return writerConverters.writer;\n    }\n    @Override public Type getType(){\n      return type;\n    }\n    @Override public <T extends Annotation>T getAnnotation(    final Class<T> clazz){\n      return finalReader.getAnnotation(clazz);\n    }\n    @Override public <T extends Annotation>T getClassOrPackageAnnotation(    final Class<T> clazz){\n      return finalReader.getClassOrPackageAnnotation(clazz);\n    }\n    @Override public Adapter<?,?> findConverter(){\n      return writerConverters.converter;\n    }\n    @Override public boolean isNillable(    final boolean global){\n      return isNillable;\n    }\n  }\n) != null) {\n    throw new JsonbException(\"Ambiguous field \" + key);\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 503,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4372,
                        "startLineNumber": 434,
                        "startColumnNumber": 65,
                        "endLineNumber": 527,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final Map<String,Reader> readers=delegate.findReaders(clazz);\n  final Comparator<String> keyComparator=fieldComparator(clazz);\n  final Map<String,Reader> result=keyComparator == null ? new HashMap<>() : new TreeMap<>(keyComparator);\n  for (  final Map.Entry<String,Reader> entry : readers.entrySet()) {\n    final Reader initialReader=entry.getValue();\n    if (isTransient(initialReader,visibility)) {\n      validateAnnotationsOnTransientField(initialReader);\n      continue;\n    }\n    if (initialReader.getAnnotation(JohnzonAny.class) != null) {\n      continue;\n    }\n    final Reader finalReader;\n    if (FieldAndMethodAccessMode.CompositeDecoratedType.class.isInstance(initialReader)) {\n      final FieldAndMethodAccessMode.CompositeDecoratedType decoratedType=FieldAndMethodAccessMode.CompositeDecoratedType.class.cast(initialReader);\n      final DecoratedType type2=decoratedType.getType2();\n      if (MethodAccessMode.MethodReader.class.isInstance(type2)) {\n        finalReader=Reader.class.cast(type2);\n      }\n else {\n        finalReader=initialReader;\n      }\n    }\n else {\n      finalReader=initialReader;\n    }\n    final Type type;\n    final Function<Object,Object> reader;\n    if (isOptional(finalReader)) {\n      type=ParameterizedType.class.cast(finalReader.getType()).getActualTypeArguments()[0];\n      reader=i -> ofNullable(finalReader.read(i)).map(o -> Optional.class.cast(o).orElse(null)).orElse(null);\n    }\n else     if (OptionalInt.class == finalReader.getType()) {\n      type=int.class;\n      reader=i -> OptionalInt.class.cast(finalReader.read(i)).orElse(0);\n    }\n else     if (OptionalLong.class == finalReader.getType()) {\n      type=long.class;\n      reader=i -> OptionalLong.class.cast(finalReader.read(i)).orElse(0);\n    }\n else     if (OptionalDouble.class == finalReader.getType()) {\n      type=double.class;\n      reader=i -> OptionalDouble.class.cast(finalReader.read(i)).orElse(0);\n    }\n else {\n      type=finalReader.getType();\n      reader=finalReader::read;\n    }\n    final WriterConverters writerConverters=new WriterConverters(initialReader,types);\n    final JsonbProperty property=initialReader.getAnnotation(JsonbProperty.class);\n    final JsonbNillable nillable=initialReader.getClassOrPackageAnnotation(JsonbNillable.class);\n    final boolean isNillable=isNillable(property,nillable);\n    final String key=property == null || property.value().isEmpty() ? naming.translateName(entry.getKey()) : property.value();\n    if (result.put(key,new Reader(){\n      @Override public Object read(      final Object instance){\n        return reader.apply(instance);\n      }\n      @Override public ObjectConverter.Writer<?> findObjectConverterWriter(){\n        return writerConverters.writer;\n      }\n      @Override public Type getType(){\n        return type;\n      }\n      @Override public <T extends Annotation>T getAnnotation(      final Class<T> clazz){\n        return finalReader.getAnnotation(clazz);\n      }\n      @Override public <T extends Annotation>T getClassOrPackageAnnotation(      final Class<T> clazz){\n        return finalReader.getClassOrPackageAnnotation(clazz);\n      }\n      @Override public Adapter<?,?> findConverter(){\n        return writerConverters.converter;\n      }\n      @Override public boolean isNillable(      final boolean global){\n        return isNillable;\n      }\n    }\n) != null) {\n      throw new JsonbException(\"Ambiguous field \" + key);\n    }\n  }\n  return result;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 557,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4447,
                        "startLineNumber": 433,
                        "startColumnNumber": 4,
                        "endLineNumber": 527,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public Map<String,Reader> findReaders(final Class<?> clazz){\n  final Map<String,Reader> readers=delegate.findReaders(clazz);\n  final Comparator<String> keyComparator=fieldComparator(clazz);\n  final Map<String,Reader> result=keyComparator == null ? new HashMap<>() : new TreeMap<>(keyComparator);\n  for (  final Map.Entry<String,Reader> entry : readers.entrySet()) {\n    final Reader initialReader=entry.getValue();\n    if (isTransient(initialReader,visibility)) {\n      validateAnnotationsOnTransientField(initialReader);\n      continue;\n    }\n    if (initialReader.getAnnotation(JohnzonAny.class) != null) {\n      continue;\n    }\n    final Reader finalReader;\n    if (FieldAndMethodAccessMode.CompositeDecoratedType.class.isInstance(initialReader)) {\n      final FieldAndMethodAccessMode.CompositeDecoratedType decoratedType=FieldAndMethodAccessMode.CompositeDecoratedType.class.cast(initialReader);\n      final DecoratedType type2=decoratedType.getType2();\n      if (MethodAccessMode.MethodReader.class.isInstance(type2)) {\n        finalReader=Reader.class.cast(type2);\n      }\n else {\n        finalReader=initialReader;\n      }\n    }\n else {\n      finalReader=initialReader;\n    }\n    final Type type;\n    final Function<Object,Object> reader;\n    if (isOptional(finalReader)) {\n      type=ParameterizedType.class.cast(finalReader.getType()).getActualTypeArguments()[0];\n      reader=i -> ofNullable(finalReader.read(i)).map(o -> Optional.class.cast(o).orElse(null)).orElse(null);\n    }\n else     if (OptionalInt.class == finalReader.getType()) {\n      type=int.class;\n      reader=i -> OptionalInt.class.cast(finalReader.read(i)).orElse(0);\n    }\n else     if (OptionalLong.class == finalReader.getType()) {\n      type=long.class;\n      reader=i -> OptionalLong.class.cast(finalReader.read(i)).orElse(0);\n    }\n else     if (OptionalDouble.class == finalReader.getType()) {\n      type=double.class;\n      reader=i -> OptionalDouble.class.cast(finalReader.read(i)).orElse(0);\n    }\n else {\n      type=finalReader.getType();\n      reader=finalReader::read;\n    }\n    final WriterConverters writerConverters=new WriterConverters(initialReader,types);\n    final JsonbProperty property=initialReader.getAnnotation(JsonbProperty.class);\n    final JsonbNillable nillable=initialReader.getClassOrPackageAnnotation(JsonbNillable.class);\n    final boolean isNillable=isNillable(property,nillable);\n    final String key=property == null || property.value().isEmpty() ? naming.translateName(entry.getKey()) : property.value();\n    if (result.put(key,new Reader(){\n      @Override public Object read(      final Object instance){\n        return reader.apply(instance);\n      }\n      @Override public ObjectConverter.Writer<?> findObjectConverterWriter(){\n        return writerConverters.writer;\n      }\n      @Override public Type getType(){\n        return type;\n      }\n      @Override public <T extends Annotation>T getAnnotation(      final Class<T> clazz){\n        return finalReader.getAnnotation(clazz);\n      }\n      @Override public <T extends Annotation>T getClassOrPackageAnnotation(      final Class<T> clazz){\n        return finalReader.getClassOrPackageAnnotation(clazz);\n      }\n      @Override public Adapter<?,?> findConverter(){\n        return writerConverters.converter;\n      }\n      @Override public boolean isNillable(      final boolean global){\n        return isNillable;\n      }\n    }\n) != null) {\n      throw new JsonbException(\"Ambiguous field \" + key);\n    }\n  }\n  return result;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 576,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 80,
                    "startLineNumber": 483,
                    "startColumnNumber": 12,
                    "endLineNumber": 483,
                    "endColumnNumber": 92
                },
                "nodeContext": "final JsonbProperty property=initialReader.getAnnotation(JsonbProperty.class);\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 12,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "org.apache.johnzon.mapper.access.AccessMode.Reader"
        },
        {
            "nodeContext": "initialReader",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 13,
                "startLineNumber": 484,
                "startColumnNumber": 43,
                "endLineNumber": 484,
                "endColumnNumber": 56
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 62,
                        "startLineNumber": 484,
                        "startColumnNumber": 43,
                        "endLineNumber": 484,
                        "endColumnNumber": 105
                    },
                    "nodeContext": "initialReader.getClassOrPackageAnnotation(JsonbNillable.class)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 6,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 73,
                        "startLineNumber": 484,
                        "startColumnNumber": 32,
                        "endLineNumber": 484,
                        "endColumnNumber": 105
                    },
                    "nodeContext": "nillable=initialReader.getClassOrPackageAnnotation(JsonbNillable.class)",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 94,
                        "startLineNumber": 484,
                        "startColumnNumber": 12,
                        "endLineNumber": 484,
                        "endColumnNumber": 106
                    },
                    "nodeContext": "final JsonbNillable nillable=initialReader.getClassOrPackageAnnotation(JsonbNillable.class);\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 12,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 4006,
                        "startLineNumber": 439,
                        "startColumnNumber": 73,
                        "endLineNumber": 525,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final Reader initialReader=entry.getValue();\n  if (isTransient(initialReader,visibility)) {\n    validateAnnotationsOnTransientField(initialReader);\n    continue;\n  }\n  if (initialReader.getAnnotation(JohnzonAny.class) != null) {\n    continue;\n  }\n  final Reader finalReader;\n  if (FieldAndMethodAccessMode.CompositeDecoratedType.class.isInstance(initialReader)) {\n    final FieldAndMethodAccessMode.CompositeDecoratedType decoratedType=FieldAndMethodAccessMode.CompositeDecoratedType.class.cast(initialReader);\n    final DecoratedType type2=decoratedType.getType2();\n    if (MethodAccessMode.MethodReader.class.isInstance(type2)) {\n      finalReader=Reader.class.cast(type2);\n    }\n else {\n      finalReader=initialReader;\n    }\n  }\n else {\n    finalReader=initialReader;\n  }\n  final Type type;\n  final Function<Object,Object> reader;\n  if (isOptional(finalReader)) {\n    type=ParameterizedType.class.cast(finalReader.getType()).getActualTypeArguments()[0];\n    reader=i -> ofNullable(finalReader.read(i)).map(o -> Optional.class.cast(o).orElse(null)).orElse(null);\n  }\n else   if (OptionalInt.class == finalReader.getType()) {\n    type=int.class;\n    reader=i -> OptionalInt.class.cast(finalReader.read(i)).orElse(0);\n  }\n else   if (OptionalLong.class == finalReader.getType()) {\n    type=long.class;\n    reader=i -> OptionalLong.class.cast(finalReader.read(i)).orElse(0);\n  }\n else   if (OptionalDouble.class == finalReader.getType()) {\n    type=double.class;\n    reader=i -> OptionalDouble.class.cast(finalReader.read(i)).orElse(0);\n  }\n else {\n    type=finalReader.getType();\n    reader=finalReader::read;\n  }\n  final WriterConverters writerConverters=new WriterConverters(initialReader,types);\n  final JsonbProperty property=initialReader.getAnnotation(JsonbProperty.class);\n  final JsonbNillable nillable=initialReader.getClassOrPackageAnnotation(JsonbNillable.class);\n  final boolean isNillable=isNillable(property,nillable);\n  final String key=property == null || property.value().isEmpty() ? naming.translateName(entry.getKey()) : property.value();\n  if (result.put(key,new Reader(){\n    @Override public Object read(    final Object instance){\n      return reader.apply(instance);\n    }\n    @Override public ObjectConverter.Writer<?> findObjectConverterWriter(){\n      return writerConverters.writer;\n    }\n    @Override public Type getType(){\n      return type;\n    }\n    @Override public <T extends Annotation>T getAnnotation(    final Class<T> clazz){\n      return finalReader.getAnnotation(clazz);\n    }\n    @Override public <T extends Annotation>T getClassOrPackageAnnotation(    final Class<T> clazz){\n      return finalReader.getClassOrPackageAnnotation(clazz);\n    }\n    @Override public Adapter<?,?> findConverter(){\n      return writerConverters.converter;\n    }\n    @Override public boolean isNillable(    final boolean global){\n      return isNillable;\n    }\n  }\n) != null) {\n    throw new JsonbException(\"Ambiguous field \" + key);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 487,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4071,
                        "startLineNumber": 439,
                        "startColumnNumber": 8,
                        "endLineNumber": 525,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (final Map.Entry<String,Reader> entry : readers.entrySet()) {\n  final Reader initialReader=entry.getValue();\n  if (isTransient(initialReader,visibility)) {\n    validateAnnotationsOnTransientField(initialReader);\n    continue;\n  }\n  if (initialReader.getAnnotation(JohnzonAny.class) != null) {\n    continue;\n  }\n  final Reader finalReader;\n  if (FieldAndMethodAccessMode.CompositeDecoratedType.class.isInstance(initialReader)) {\n    final FieldAndMethodAccessMode.CompositeDecoratedType decoratedType=FieldAndMethodAccessMode.CompositeDecoratedType.class.cast(initialReader);\n    final DecoratedType type2=decoratedType.getType2();\n    if (MethodAccessMode.MethodReader.class.isInstance(type2)) {\n      finalReader=Reader.class.cast(type2);\n    }\n else {\n      finalReader=initialReader;\n    }\n  }\n else {\n    finalReader=initialReader;\n  }\n  final Type type;\n  final Function<Object,Object> reader;\n  if (isOptional(finalReader)) {\n    type=ParameterizedType.class.cast(finalReader.getType()).getActualTypeArguments()[0];\n    reader=i -> ofNullable(finalReader.read(i)).map(o -> Optional.class.cast(o).orElse(null)).orElse(null);\n  }\n else   if (OptionalInt.class == finalReader.getType()) {\n    type=int.class;\n    reader=i -> OptionalInt.class.cast(finalReader.read(i)).orElse(0);\n  }\n else   if (OptionalLong.class == finalReader.getType()) {\n    type=long.class;\n    reader=i -> OptionalLong.class.cast(finalReader.read(i)).orElse(0);\n  }\n else   if (OptionalDouble.class == finalReader.getType()) {\n    type=double.class;\n    reader=i -> OptionalDouble.class.cast(finalReader.read(i)).orElse(0);\n  }\n else {\n    type=finalReader.getType();\n    reader=finalReader::read;\n  }\n  final WriterConverters writerConverters=new WriterConverters(initialReader,types);\n  final JsonbProperty property=initialReader.getAnnotation(JsonbProperty.class);\n  final JsonbNillable nillable=initialReader.getClassOrPackageAnnotation(JsonbNillable.class);\n  final boolean isNillable=isNillable(property,nillable);\n  final String key=property == null || property.value().isEmpty() ? naming.translateName(entry.getKey()) : property.value();\n  if (result.put(key,new Reader(){\n    @Override public Object read(    final Object instance){\n      return reader.apply(instance);\n    }\n    @Override public ObjectConverter.Writer<?> findObjectConverterWriter(){\n      return writerConverters.writer;\n    }\n    @Override public Type getType(){\n      return type;\n    }\n    @Override public <T extends Annotation>T getAnnotation(    final Class<T> clazz){\n      return finalReader.getAnnotation(clazz);\n    }\n    @Override public <T extends Annotation>T getClassOrPackageAnnotation(    final Class<T> clazz){\n      return finalReader.getClassOrPackageAnnotation(clazz);\n    }\n    @Override public Adapter<?,?> findConverter(){\n      return writerConverters.converter;\n    }\n    @Override public boolean isNillable(    final boolean global){\n      return isNillable;\n    }\n  }\n) != null) {\n    throw new JsonbException(\"Ambiguous field \" + key);\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 503,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 4372,
                        "startLineNumber": 434,
                        "startColumnNumber": 65,
                        "endLineNumber": 527,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final Map<String,Reader> readers=delegate.findReaders(clazz);\n  final Comparator<String> keyComparator=fieldComparator(clazz);\n  final Map<String,Reader> result=keyComparator == null ? new HashMap<>() : new TreeMap<>(keyComparator);\n  for (  final Map.Entry<String,Reader> entry : readers.entrySet()) {\n    final Reader initialReader=entry.getValue();\n    if (isTransient(initialReader,visibility)) {\n      validateAnnotationsOnTransientField(initialReader);\n      continue;\n    }\n    if (initialReader.getAnnotation(JohnzonAny.class) != null) {\n      continue;\n    }\n    final Reader finalReader;\n    if (FieldAndMethodAccessMode.CompositeDecoratedType.class.isInstance(initialReader)) {\n      final FieldAndMethodAccessMode.CompositeDecoratedType decoratedType=FieldAndMethodAccessMode.CompositeDecoratedType.class.cast(initialReader);\n      final DecoratedType type2=decoratedType.getType2();\n      if (MethodAccessMode.MethodReader.class.isInstance(type2)) {\n        finalReader=Reader.class.cast(type2);\n      }\n else {\n        finalReader=initialReader;\n      }\n    }\n else {\n      finalReader=initialReader;\n    }\n    final Type type;\n    final Function<Object,Object> reader;\n    if (isOptional(finalReader)) {\n      type=ParameterizedType.class.cast(finalReader.getType()).getActualTypeArguments()[0];\n      reader=i -> ofNullable(finalReader.read(i)).map(o -> Optional.class.cast(o).orElse(null)).orElse(null);\n    }\n else     if (OptionalInt.class == finalReader.getType()) {\n      type=int.class;\n      reader=i -> OptionalInt.class.cast(finalReader.read(i)).orElse(0);\n    }\n else     if (OptionalLong.class == finalReader.getType()) {\n      type=long.class;\n      reader=i -> OptionalLong.class.cast(finalReader.read(i)).orElse(0);\n    }\n else     if (OptionalDouble.class == finalReader.getType()) {\n      type=double.class;\n      reader=i -> OptionalDouble.class.cast(finalReader.read(i)).orElse(0);\n    }\n else {\n      type=finalReader.getType();\n      reader=finalReader::read;\n    }\n    final WriterConverters writerConverters=new WriterConverters(initialReader,types);\n    final JsonbProperty property=initialReader.getAnnotation(JsonbProperty.class);\n    final JsonbNillable nillable=initialReader.getClassOrPackageAnnotation(JsonbNillable.class);\n    final boolean isNillable=isNillable(property,nillable);\n    final String key=property == null || property.value().isEmpty() ? naming.translateName(entry.getKey()) : property.value();\n    if (result.put(key,new Reader(){\n      @Override public Object read(      final Object instance){\n        return reader.apply(instance);\n      }\n      @Override public ObjectConverter.Writer<?> findObjectConverterWriter(){\n        return writerConverters.writer;\n      }\n      @Override public Type getType(){\n        return type;\n      }\n      @Override public <T extends Annotation>T getAnnotation(      final Class<T> clazz){\n        return finalReader.getAnnotation(clazz);\n      }\n      @Override public <T extends Annotation>T getClassOrPackageAnnotation(      final Class<T> clazz){\n        return finalReader.getClassOrPackageAnnotation(clazz);\n      }\n      @Override public Adapter<?,?> findConverter(){\n        return writerConverters.converter;\n      }\n      @Override public boolean isNillable(      final boolean global){\n        return isNillable;\n      }\n    }\n) != null) {\n      throw new JsonbException(\"Ambiguous field \" + key);\n    }\n  }\n  return result;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 557,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 4447,
                        "startLineNumber": 433,
                        "startColumnNumber": 4,
                        "endLineNumber": 527,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public Map<String,Reader> findReaders(final Class<?> clazz){\n  final Map<String,Reader> readers=delegate.findReaders(clazz);\n  final Comparator<String> keyComparator=fieldComparator(clazz);\n  final Map<String,Reader> result=keyComparator == null ? new HashMap<>() : new TreeMap<>(keyComparator);\n  for (  final Map.Entry<String,Reader> entry : readers.entrySet()) {\n    final Reader initialReader=entry.getValue();\n    if (isTransient(initialReader,visibility)) {\n      validateAnnotationsOnTransientField(initialReader);\n      continue;\n    }\n    if (initialReader.getAnnotation(JohnzonAny.class) != null) {\n      continue;\n    }\n    final Reader finalReader;\n    if (FieldAndMethodAccessMode.CompositeDecoratedType.class.isInstance(initialReader)) {\n      final FieldAndMethodAccessMode.CompositeDecoratedType decoratedType=FieldAndMethodAccessMode.CompositeDecoratedType.class.cast(initialReader);\n      final DecoratedType type2=decoratedType.getType2();\n      if (MethodAccessMode.MethodReader.class.isInstance(type2)) {\n        finalReader=Reader.class.cast(type2);\n      }\n else {\n        finalReader=initialReader;\n      }\n    }\n else {\n      finalReader=initialReader;\n    }\n    final Type type;\n    final Function<Object,Object> reader;\n    if (isOptional(finalReader)) {\n      type=ParameterizedType.class.cast(finalReader.getType()).getActualTypeArguments()[0];\n      reader=i -> ofNullable(finalReader.read(i)).map(o -> Optional.class.cast(o).orElse(null)).orElse(null);\n    }\n else     if (OptionalInt.class == finalReader.getType()) {\n      type=int.class;\n      reader=i -> OptionalInt.class.cast(finalReader.read(i)).orElse(0);\n    }\n else     if (OptionalLong.class == finalReader.getType()) {\n      type=long.class;\n      reader=i -> OptionalLong.class.cast(finalReader.read(i)).orElse(0);\n    }\n else     if (OptionalDouble.class == finalReader.getType()) {\n      type=double.class;\n      reader=i -> OptionalDouble.class.cast(finalReader.read(i)).orElse(0);\n    }\n else {\n      type=finalReader.getType();\n      reader=finalReader::read;\n    }\n    final WriterConverters writerConverters=new WriterConverters(initialReader,types);\n    final JsonbProperty property=initialReader.getAnnotation(JsonbProperty.class);\n    final JsonbNillable nillable=initialReader.getClassOrPackageAnnotation(JsonbNillable.class);\n    final boolean isNillable=isNillable(property,nillable);\n    final String key=property == null || property.value().isEmpty() ? naming.translateName(entry.getKey()) : property.value();\n    if (result.put(key,new Reader(){\n      @Override public Object read(      final Object instance){\n        return reader.apply(instance);\n      }\n      @Override public ObjectConverter.Writer<?> findObjectConverterWriter(){\n        return writerConverters.writer;\n      }\n      @Override public Type getType(){\n        return type;\n      }\n      @Override public <T extends Annotation>T getAnnotation(      final Class<T> clazz){\n        return finalReader.getAnnotation(clazz);\n      }\n      @Override public <T extends Annotation>T getClassOrPackageAnnotation(      final Class<T> clazz){\n        return finalReader.getClassOrPackageAnnotation(clazz);\n      }\n      @Override public Adapter<?,?> findConverter(){\n        return writerConverters.converter;\n      }\n      @Override public boolean isNillable(      final boolean global){\n        return isNillable;\n      }\n    }\n) != null) {\n      throw new JsonbException(\"Ambiguous field \" + key);\n    }\n  }\n  return result;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 576,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 94,
                    "startLineNumber": 484,
                    "startColumnNumber": 12,
                    "endLineNumber": 484,
                    "endColumnNumber": 106
                },
                "nodeContext": "final JsonbNillable nillable=initialReader.getClassOrPackageAnnotation(JsonbNillable.class);\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 12,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "org.apache.johnzon.mapper.access.AccessMode.Reader"
        }
    ],
    "positionList": [
        {
            "charLength": 13,
            "startLineNumber": 441,
            "startColumnNumber": 28,
            "endLineNumber": 441,
            "endColumnNumber": 41
        },
        {
            "charLength": 13,
            "startLineNumber": 442,
            "startColumnNumber": 52,
            "endLineNumber": 442,
            "endColumnNumber": 65
        },
        {
            "charLength": 13,
            "startLineNumber": 445,
            "startColumnNumber": 16,
            "endLineNumber": 445,
            "endColumnNumber": 29
        },
        {
            "charLength": 13,
            "startLineNumber": 450,
            "startColumnNumber": 81,
            "endLineNumber": 450,
            "endColumnNumber": 94
        },
        {
            "charLength": 13,
            "startLineNumber": 451,
            "startColumnNumber": 145,
            "endLineNumber": 451,
            "endColumnNumber": 158
        },
        {
            "charLength": 13,
            "startLineNumber": 456,
            "startColumnNumber": 34,
            "endLineNumber": 456,
            "endColumnNumber": 47
        },
        {
            "charLength": 13,
            "startLineNumber": 459,
            "startColumnNumber": 30,
            "endLineNumber": 459,
            "endColumnNumber": 43
        },
        {
            "charLength": 13,
            "startLineNumber": 482,
            "startColumnNumber": 75,
            "endLineNumber": 482,
            "endColumnNumber": 88
        },
        {
            "charLength": 13,
            "startLineNumber": 483,
            "startColumnNumber": 43,
            "endLineNumber": 483,
            "endColumnNumber": 56
        },
        {
            "charLength": 13,
            "startLineNumber": 484,
            "startColumnNumber": 43,
            "endLineNumber": 484,
            "endColumnNumber": 56
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 1
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 4,
            "layout": 1
        },
        {
            "firstKey": 3,
            "secondKey": 5,
            "layout": 1
        },
        {
            "firstKey": 3,
            "secondKey": 6,
            "layout": 1
        },
        {
            "firstKey": 3,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 8,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 9,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 5,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 5,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 5,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 7,
            "layout": 6
        },
        {
            "firstKey": 5,
            "secondKey": 8,
            "layout": 6
        },
        {
            "firstKey": 5,
            "secondKey": 9,
            "layout": 6
        },
        {
            "firstKey": 6,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 8,
            "layout": 3
        }
    ]
}