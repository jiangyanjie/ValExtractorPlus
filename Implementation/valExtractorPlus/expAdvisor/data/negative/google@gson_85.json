{
    "id": 85,
    "expression": "\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\" + type + \"> is of type \"+ className",
    "projectName": "google@gson",
    "commitID": "883ce465d5514ee9fd28a73c0891869d0b744d4a",
    "filePath": "gson/src/main/java/com/google/gson/Types.java",
    "occurrences": 1,
    "isArithmeticExpression": 0,
    "isGetTypeMethod": 0,
    "expressionList": [
        {
            "nodeContext": "\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\" + type + \"> is of type \"+ className",
            "nodeType": "InfixExpression",
            "nodePosition": {
                "charLength": 117,
                "startLineNumber": 142,
                "startColumnNumber": 41,
                "endLineNumber": 143,
                "endColumnNumber": 74
            },
            "astNodeNumber": 7,
            "astHeight": 3,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
                    "nodePosition": {
                        "charLength": 147,
                        "startLineNumber": 142,
                        "startColumnNumber": 12,
                        "endLineNumber": 143,
                        "endColumnNumber": 75
                    },
                    "nodeContext": "new IllegalArgumentException(\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\" + type + \"> is of type \"+ className)",
                    "nodeType": "ClassInstanceCreation",
                    "astNodeNumber": 10,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 154,
                        "startLineNumber": 142,
                        "startColumnNumber": 6,
                        "endLineNumber": 143,
                        "endColumnNumber": 76
                    },
                    "nodeContext": "throw new IllegalArgumentException(\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\" + type + \"> is of type \"+ className);\n",
                    "nodeType": "ThrowStatement",
                    "astNodeNumber": 11,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 244,
                        "startLineNumber": 140,
                        "startColumnNumber": 11,
                        "endLineNumber": 144,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  String className=type == null ? \"null\" : type.getClass().getName();\n  throw new IllegalArgumentException(\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\" + type + \"> is of type \"+ className);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 27,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 360,
                        "startLineNumber": 137,
                        "startColumnNumber": 11,
                        "endLineNumber": 144,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "if (type instanceof WildcardType) {\n  return getRawType(((WildcardType)type).getUpperBounds()[0]);\n}\n else {\n  String className=type == null ? \"null\" : type.getClass().getName();\n  throw new IllegalArgumentException(\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\" + type + \"> is of type \"+ className);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 45,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 593,
                        "startLineNumber": 132,
                        "startColumnNumber": 11,
                        "endLineNumber": 144,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "if (type instanceof TypeVariable) {\n  return Object.class;\n}\n else if (type instanceof WildcardType) {\n  return getRawType(((WildcardType)type).getUpperBounds()[0]);\n}\n else {\n  String className=type == null ? \"null\" : type.getClass().getName();\n  throw new IllegalArgumentException(\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\" + type + \"> is of type \"+ className);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 55,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 797,
                        "startLineNumber": 128,
                        "startColumnNumber": 11,
                        "endLineNumber": 144,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "if (type instanceof GenericArrayType) {\n  Type componentType=((GenericArrayType)type).getGenericComponentType();\n  return Array.newInstance(getRawType(componentType),0).getClass();\n}\n else if (type instanceof TypeVariable) {\n  return Object.class;\n}\n else if (type instanceof WildcardType) {\n  return getRawType(((WildcardType)type).getUpperBounds()[0]);\n}\n else {\n  String className=type == null ? \"null\" : type.getClass().getName();\n  throw new IllegalArgumentException(\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\" + type + \"> is of type \"+ className);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 83,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1238,
                        "startLineNumber": 118,
                        "startColumnNumber": 11,
                        "endLineNumber": 144,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "if (type instanceof ParameterizedType) {\n  ParameterizedType parameterizedType=(ParameterizedType)type;\n  Type rawType=parameterizedType.getRawType();\n  checkArgument(rawType instanceof Class);\n  return (Class<?>)rawType;\n}\n else if (type instanceof GenericArrayType) {\n  Type componentType=((GenericArrayType)type).getGenericComponentType();\n  return Array.newInstance(getRawType(componentType),0).getClass();\n}\n else if (type instanceof TypeVariable) {\n  return Object.class;\n}\n else if (type instanceof WildcardType) {\n  return getRawType(((WildcardType)type).getUpperBounds()[0]);\n}\n else {\n  String className=type == null ? \"null\" : type.getClass().getName();\n  throw new IllegalArgumentException(\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\" + type + \"> is of type \"+ className);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 120,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1345,
                        "startLineNumber": 114,
                        "startColumnNumber": 4,
                        "endLineNumber": 144,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "if (type instanceof Class<?>) {\n  return (Class<?>)type;\n}\n else if (type instanceof ParameterizedType) {\n  ParameterizedType parameterizedType=(ParameterizedType)type;\n  Type rawType=parameterizedType.getRawType();\n  checkArgument(rawType instanceof Class);\n  return (Class<?>)rawType;\n}\n else if (type instanceof GenericArrayType) {\n  Type componentType=((GenericArrayType)type).getGenericComponentType();\n  return Array.newInstance(getRawType(componentType),0).getClass();\n}\n else if (type instanceof TypeVariable) {\n  return Object.class;\n}\n else if (type instanceof WildcardType) {\n  return getRawType(((WildcardType)type).getUpperBounds()[0]);\n}\n else {\n  String className=type == null ? \"null\" : type.getClass().getName();\n  throw new IllegalArgumentException(\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\" + type + \"> is of type \"+ className);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 135,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1355,
                        "startLineNumber": 113,
                        "startColumnNumber": 47,
                        "endLineNumber": 145,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  if (type instanceof Class<?>) {\n    return (Class<?>)type;\n  }\n else   if (type instanceof ParameterizedType) {\n    ParameterizedType parameterizedType=(ParameterizedType)type;\n    Type rawType=parameterizedType.getRawType();\n    checkArgument(rawType instanceof Class);\n    return (Class<?>)rawType;\n  }\n else   if (type instanceof GenericArrayType) {\n    Type componentType=((GenericArrayType)type).getGenericComponentType();\n    return Array.newInstance(getRawType(componentType),0).getClass();\n  }\n else   if (type instanceof TypeVariable) {\n    return Object.class;\n  }\n else   if (type instanceof WildcardType) {\n    return getRawType(((WildcardType)type).getUpperBounds()[0]);\n  }\n else {\n    String className=type == null ? \"null\" : type.getClass().getName();\n    throw new IllegalArgumentException(\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\" + type + \"> is of type \"+ className);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 136,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1400,
                        "startLineNumber": 113,
                        "startColumnNumber": 2,
                        "endLineNumber": 145,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "public static Class<?> getRawType(Type type){\n  if (type instanceof Class<?>) {\n    return (Class<?>)type;\n  }\n else   if (type instanceof ParameterizedType) {\n    ParameterizedType parameterizedType=(ParameterizedType)type;\n    Type rawType=parameterizedType.getRawType();\n    checkArgument(rawType instanceof Class);\n    return (Class<?>)rawType;\n  }\n else   if (type instanceof GenericArrayType) {\n    Type componentType=((GenericArrayType)type).getGenericComponentType();\n    return Array.newInstance(getRawType(componentType),0).getClass();\n  }\n else   if (type instanceof TypeVariable) {\n    return Object.class;\n  }\n else   if (type instanceof WildcardType) {\n    return getRawType(((WildcardType)type).getUpperBounds()[0]);\n  }\n else {\n    String className=type == null ? \"null\" : type.getClass().getName();\n    throw new IllegalArgumentException(\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\" + type + \"> is of type \"+ className);\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 148,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 154,
                    "startLineNumber": 142,
                    "startColumnNumber": 6,
                    "endLineNumber": 143,
                    "endColumnNumber": 76
                },
                "nodeContext": "throw new IllegalArgumentException(\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\" + type + \"> is of type \"+ className);\n",
                "nodeType": "ThrowStatement",
                "astNodeNumber": 11,
                "astHeight": 5
            },
            "tokenLength": 18,
            "type": "java.lang.String"
        }
    ],
    "positionList": [
        {
            "charLength": 117,
            "startLineNumber": 142,
            "startColumnNumber": 41,
            "endLineNumber": 143,
            "endColumnNumber": 74
        }
    ],
    "layoutRelationDataList": []
}