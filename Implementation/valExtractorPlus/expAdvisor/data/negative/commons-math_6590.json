{
    "id": 6590,
    "expression": "1",
    "projectName": "commons-math",
    "commitID": "c4cc69cf5210ed3ddf67be8802a55f0a8058e260",
    "filePath": "src/java/org/apache/commons/math/geometry/Rotation.java",
    "occurrences": 56,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 0,
    "expressionList": [
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 935,
                "startColumnNumber": 22,
                "endLineNumber": 935,
                "endColumnNumber": 23
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 935,
                        "startColumnNumber": 17,
                        "endLineNumber": 935,
                        "endColumnNumber": 24
                    },
                    "nodeContext": "m[0][1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 13,
                        "startLineNumber": 935,
                        "startColumnNumber": 11,
                        "endLineNumber": 935,
                        "endColumnNumber": 24
                    },
                    "nodeContext": "x01=m[0][1]",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 21,
                        "startLineNumber": 935,
                        "startColumnNumber": 4,
                        "endLineNumber": 935,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "double x01=m[0][1];\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 9,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 21,
                    "startLineNumber": 935,
                    "startColumnNumber": 4,
                    "endLineNumber": 935,
                    "endColumnNumber": 25
                },
                "nodeContext": "double x01=m[0][1];\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 9,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 937,
                "startColumnNumber": 19,
                "endLineNumber": 937,
                "endColumnNumber": 20
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
                    "nodePosition": {
                        "charLength": 4,
                        "startLineNumber": 937,
                        "startColumnNumber": 17,
                        "endLineNumber": 937,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "m[1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 937,
                        "startColumnNumber": 17,
                        "endLineNumber": 937,
                        "endColumnNumber": 24
                    },
                    "nodeContext": "m[1][0]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 13,
                        "startLineNumber": 937,
                        "startColumnNumber": 11,
                        "endLineNumber": 937,
                        "endColumnNumber": 24
                    },
                    "nodeContext": "x10=m[1][0]",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 21,
                        "startLineNumber": 937,
                        "startColumnNumber": 4,
                        "endLineNumber": 937,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "double x10=m[1][0];\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 9,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 21,
                    "startLineNumber": 937,
                    "startColumnNumber": 4,
                    "endLineNumber": 937,
                    "endColumnNumber": 25
                },
                "nodeContext": "double x10=m[1][0];\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 9,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 938,
                "startColumnNumber": 19,
                "endLineNumber": 938,
                "endColumnNumber": 20
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
                    "nodePosition": {
                        "charLength": 4,
                        "startLineNumber": 938,
                        "startColumnNumber": 17,
                        "endLineNumber": 938,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "m[1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 938,
                        "startColumnNumber": 17,
                        "endLineNumber": 938,
                        "endColumnNumber": 24
                    },
                    "nodeContext": "m[1][1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 13,
                        "startLineNumber": 938,
                        "startColumnNumber": 11,
                        "endLineNumber": 938,
                        "endColumnNumber": 24
                    },
                    "nodeContext": "x11=m[1][1]",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 21,
                        "startLineNumber": 938,
                        "startColumnNumber": 4,
                        "endLineNumber": 938,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "double x11=m[1][1];\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 9,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 21,
                    "startLineNumber": 938,
                    "startColumnNumber": 4,
                    "endLineNumber": 938,
                    "endColumnNumber": 25
                },
                "nodeContext": "double x11=m[1][1];\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 9,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 938,
                "startColumnNumber": 22,
                "endLineNumber": 938,
                "endColumnNumber": 23
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 938,
                        "startColumnNumber": 17,
                        "endLineNumber": 938,
                        "endColumnNumber": 24
                    },
                    "nodeContext": "m[1][1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 13,
                        "startLineNumber": 938,
                        "startColumnNumber": 11,
                        "endLineNumber": 938,
                        "endColumnNumber": 24
                    },
                    "nodeContext": "x11=m[1][1]",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 21,
                        "startLineNumber": 938,
                        "startColumnNumber": 4,
                        "endLineNumber": 938,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "double x11=m[1][1];\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 9,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 21,
                    "startLineNumber": 938,
                    "startColumnNumber": 4,
                    "endLineNumber": 938,
                    "endColumnNumber": 25
                },
                "nodeContext": "double x11=m[1][1];\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 9,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 939,
                "startColumnNumber": 19,
                "endLineNumber": 939,
                "endColumnNumber": 20
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
                    "nodePosition": {
                        "charLength": 4,
                        "startLineNumber": 939,
                        "startColumnNumber": 17,
                        "endLineNumber": 939,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "m[1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 939,
                        "startColumnNumber": 17,
                        "endLineNumber": 939,
                        "endColumnNumber": 24
                    },
                    "nodeContext": "m[1][2]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 13,
                        "startLineNumber": 939,
                        "startColumnNumber": 11,
                        "endLineNumber": 939,
                        "endColumnNumber": 24
                    },
                    "nodeContext": "x12=m[1][2]",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 21,
                        "startLineNumber": 939,
                        "startColumnNumber": 4,
                        "endLineNumber": 939,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "double x12=m[1][2];\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 9,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 21,
                    "startLineNumber": 939,
                    "startColumnNumber": 4,
                    "endLineNumber": 939,
                    "endColumnNumber": 25
                },
                "nodeContext": "double x12=m[1][2];\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 9,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 941,
                "startColumnNumber": 22,
                "endLineNumber": 941,
                "endColumnNumber": 23
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 941,
                        "startColumnNumber": 17,
                        "endLineNumber": 941,
                        "endColumnNumber": 24
                    },
                    "nodeContext": "m[2][1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 13,
                        "startLineNumber": 941,
                        "startColumnNumber": 11,
                        "endLineNumber": 941,
                        "endColumnNumber": 24
                    },
                    "nodeContext": "x21=m[2][1]",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 21,
                        "startLineNumber": 941,
                        "startColumnNumber": 4,
                        "endLineNumber": 941,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "double x21=m[2][1];\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 9,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 21,
                    "startLineNumber": 941,
                    "startColumnNumber": 4,
                    "endLineNumber": 941,
                    "endColumnNumber": 25
                },
                "nodeContext": "double x21=m[2][1];\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 9,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 948,
                "startColumnNumber": 6,
                "endLineNumber": 948,
                "endColumnNumber": 7
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
                    "nodePosition": {
                        "charLength": 4,
                        "startLineNumber": 948,
                        "startColumnNumber": 4,
                        "endLineNumber": 948,
                        "endColumnNumber": 8
                    },
                    "nodeContext": "o[1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 20,
                        "startLineNumber": 948,
                        "startColumnNumber": 4,
                        "endLineNumber": 948,
                        "endColumnNumber": 24
                    },
                    "nodeContext": "o[1]=new double[3]",
                    "nodeType": "Assignment",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 21,
                        "startLineNumber": 948,
                        "startColumnNumber": 4,
                        "endLineNumber": 948,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "o[1]=new double[3];\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 10,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 21,
                    "startLineNumber": 948,
                    "startColumnNumber": 4,
                    "endLineNumber": 948,
                    "endColumnNumber": 25
                },
                "nodeContext": "o[1]=new double[3];\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 10,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 956,
                "startColumnNumber": 38,
                "endLineNumber": 956,
                "endColumnNumber": 39
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
                    "nodePosition": {
                        "charLength": 4,
                        "startLineNumber": 956,
                        "startColumnNumber": 36,
                        "endLineNumber": 956,
                        "endColumnNumber": 40
                    },
                    "nodeContext": "m[1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 956,
                        "startColumnNumber": 36,
                        "endLineNumber": 956,
                        "endColumnNumber": 43
                    },
                    "nodeContext": "m[1][0]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 13,
                        "startLineNumber": 956,
                        "startColumnNumber": 36,
                        "endLineNumber": 956,
                        "endColumnNumber": 49
                    },
                    "nodeContext": "m[1][0] * x10",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 29,
                        "startLineNumber": 956,
                        "startColumnNumber": 20,
                        "endLineNumber": 956,
                        "endColumnNumber": 49
                    },
                    "nodeContext": "m[0][0] * x00 + m[1][0] * x10",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 15,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 45,
                        "startLineNumber": 956,
                        "startColumnNumber": 20,
                        "endLineNumber": 956,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 23,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 52,
                        "startLineNumber": 956,
                        "startColumnNumber": 13,
                        "endLineNumber": 956,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 25,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 60,
                        "startLineNumber": 956,
                        "startColumnNumber": 6,
                        "endLineNumber": 956,
                        "endColumnNumber": 66
                    },
                    "nodeContext": "double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 27,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2310,
                        "startLineNumber": 953,
                        "startColumnNumber": 21,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 765,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2327,
                        "startLineNumber": 953,
                        "startColumnNumber": 4,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "while (++i < 11) {\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 770,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 60,
                    "startLineNumber": 956,
                    "startColumnNumber": 6,
                    "endLineNumber": 956,
                    "endColumnNumber": 66
                },
                "nodeContext": "double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 27,
                "astHeight": 8
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 957,
                "startColumnNumber": 25,
                "endLineNumber": 957,
                "endColumnNumber": 26
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 957,
                        "startColumnNumber": 20,
                        "endLineNumber": 957,
                        "endColumnNumber": 27
                    },
                    "nodeContext": "m[0][1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 13,
                        "startLineNumber": 957,
                        "startColumnNumber": 20,
                        "endLineNumber": 957,
                        "endColumnNumber": 33
                    },
                    "nodeContext": "m[0][1] * x00",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 29,
                        "startLineNumber": 957,
                        "startColumnNumber": 20,
                        "endLineNumber": 957,
                        "endColumnNumber": 49
                    },
                    "nodeContext": "m[0][1] * x00 + m[1][1] * x10",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 15,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 45,
                        "startLineNumber": 957,
                        "startColumnNumber": 20,
                        "endLineNumber": 957,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 23,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 52,
                        "startLineNumber": 957,
                        "startColumnNumber": 13,
                        "endLineNumber": 957,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 25,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 60,
                        "startLineNumber": 957,
                        "startColumnNumber": 6,
                        "endLineNumber": 957,
                        "endColumnNumber": 66
                    },
                    "nodeContext": "double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 27,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2310,
                        "startLineNumber": 953,
                        "startColumnNumber": 21,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 765,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2327,
                        "startLineNumber": 953,
                        "startColumnNumber": 4,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "while (++i < 11) {\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 770,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 60,
                    "startLineNumber": 957,
                    "startColumnNumber": 6,
                    "endLineNumber": 957,
                    "endColumnNumber": 66
                },
                "nodeContext": "double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 27,
                "astHeight": 8
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 957,
                "startColumnNumber": 38,
                "endLineNumber": 957,
                "endColumnNumber": 39
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
                    "nodePosition": {
                        "charLength": 4,
                        "startLineNumber": 957,
                        "startColumnNumber": 36,
                        "endLineNumber": 957,
                        "endColumnNumber": 40
                    },
                    "nodeContext": "m[1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 957,
                        "startColumnNumber": 36,
                        "endLineNumber": 957,
                        "endColumnNumber": 43
                    },
                    "nodeContext": "m[1][1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 13,
                        "startLineNumber": 957,
                        "startColumnNumber": 36,
                        "endLineNumber": 957,
                        "endColumnNumber": 49
                    },
                    "nodeContext": "m[1][1] * x10",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 29,
                        "startLineNumber": 957,
                        "startColumnNumber": 20,
                        "endLineNumber": 957,
                        "endColumnNumber": 49
                    },
                    "nodeContext": "m[0][1] * x00 + m[1][1] * x10",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 15,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 45,
                        "startLineNumber": 957,
                        "startColumnNumber": 20,
                        "endLineNumber": 957,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 23,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 52,
                        "startLineNumber": 957,
                        "startColumnNumber": 13,
                        "endLineNumber": 957,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 25,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 60,
                        "startLineNumber": 957,
                        "startColumnNumber": 6,
                        "endLineNumber": 957,
                        "endColumnNumber": 66
                    },
                    "nodeContext": "double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 27,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2310,
                        "startLineNumber": 953,
                        "startColumnNumber": 21,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 765,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2327,
                        "startLineNumber": 953,
                        "startColumnNumber": 4,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "while (++i < 11) {\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 770,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 60,
                    "startLineNumber": 957,
                    "startColumnNumber": 6,
                    "endLineNumber": 957,
                    "endColumnNumber": 66
                },
                "nodeContext": "double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 27,
                "astHeight": 8
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 957,
                "startColumnNumber": 41,
                "endLineNumber": 957,
                "endColumnNumber": 42
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 957,
                        "startColumnNumber": 36,
                        "endLineNumber": 957,
                        "endColumnNumber": 43
                    },
                    "nodeContext": "m[1][1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 13,
                        "startLineNumber": 957,
                        "startColumnNumber": 36,
                        "endLineNumber": 957,
                        "endColumnNumber": 49
                    },
                    "nodeContext": "m[1][1] * x10",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 29,
                        "startLineNumber": 957,
                        "startColumnNumber": 20,
                        "endLineNumber": 957,
                        "endColumnNumber": 49
                    },
                    "nodeContext": "m[0][1] * x00 + m[1][1] * x10",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 15,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 45,
                        "startLineNumber": 957,
                        "startColumnNumber": 20,
                        "endLineNumber": 957,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 23,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 52,
                        "startLineNumber": 957,
                        "startColumnNumber": 13,
                        "endLineNumber": 957,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 25,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 60,
                        "startLineNumber": 957,
                        "startColumnNumber": 6,
                        "endLineNumber": 957,
                        "endColumnNumber": 66
                    },
                    "nodeContext": "double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 27,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2310,
                        "startLineNumber": 953,
                        "startColumnNumber": 21,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 765,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2327,
                        "startLineNumber": 953,
                        "startColumnNumber": 4,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "while (++i < 11) {\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 770,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 60,
                    "startLineNumber": 957,
                    "startColumnNumber": 6,
                    "endLineNumber": 957,
                    "endColumnNumber": 66
                },
                "nodeContext": "double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 27,
                "astHeight": 8
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 957,
                "startColumnNumber": 57,
                "endLineNumber": 957,
                "endColumnNumber": 58
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 957,
                        "startColumnNumber": 52,
                        "endLineNumber": 957,
                        "endColumnNumber": 59
                    },
                    "nodeContext": "m[2][1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 13,
                        "startLineNumber": 957,
                        "startColumnNumber": 52,
                        "endLineNumber": 957,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "m[2][1] * x20",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 45,
                        "startLineNumber": 957,
                        "startColumnNumber": 20,
                        "endLineNumber": 957,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 23,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 52,
                        "startLineNumber": 957,
                        "startColumnNumber": 13,
                        "endLineNumber": 957,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 25,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 60,
                        "startLineNumber": 957,
                        "startColumnNumber": 6,
                        "endLineNumber": 957,
                        "endColumnNumber": 66
                    },
                    "nodeContext": "double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 27,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2310,
                        "startLineNumber": 953,
                        "startColumnNumber": 21,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 765,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2327,
                        "startLineNumber": 953,
                        "startColumnNumber": 4,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "while (++i < 11) {\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 770,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 60,
                    "startLineNumber": 957,
                    "startColumnNumber": 6,
                    "endLineNumber": 957,
                    "endColumnNumber": 66
                },
                "nodeContext": "double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 27,
                "astHeight": 8
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 958,
                "startColumnNumber": 38,
                "endLineNumber": 958,
                "endColumnNumber": 39
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
                    "nodePosition": {
                        "charLength": 4,
                        "startLineNumber": 958,
                        "startColumnNumber": 36,
                        "endLineNumber": 958,
                        "endColumnNumber": 40
                    },
                    "nodeContext": "m[1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 958,
                        "startColumnNumber": 36,
                        "endLineNumber": 958,
                        "endColumnNumber": 43
                    },
                    "nodeContext": "m[1][2]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 13,
                        "startLineNumber": 958,
                        "startColumnNumber": 36,
                        "endLineNumber": 958,
                        "endColumnNumber": 49
                    },
                    "nodeContext": "m[1][2] * x10",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 29,
                        "startLineNumber": 958,
                        "startColumnNumber": 20,
                        "endLineNumber": 958,
                        "endColumnNumber": 49
                    },
                    "nodeContext": "m[0][2] * x00 + m[1][2] * x10",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 15,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 45,
                        "startLineNumber": 958,
                        "startColumnNumber": 20,
                        "endLineNumber": 958,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 23,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 52,
                        "startLineNumber": 958,
                        "startColumnNumber": 13,
                        "endLineNumber": 958,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 25,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 60,
                        "startLineNumber": 958,
                        "startColumnNumber": 6,
                        "endLineNumber": 958,
                        "endColumnNumber": 66
                    },
                    "nodeContext": "double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 27,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2310,
                        "startLineNumber": 953,
                        "startColumnNumber": 21,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 765,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2327,
                        "startLineNumber": 953,
                        "startColumnNumber": 4,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "while (++i < 11) {\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 770,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 60,
                    "startLineNumber": 958,
                    "startColumnNumber": 6,
                    "endLineNumber": 958,
                    "endColumnNumber": 66
                },
                "nodeContext": "double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 27,
                "astHeight": 8
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 959,
                "startColumnNumber": 38,
                "endLineNumber": 959,
                "endColumnNumber": 39
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
                    "nodePosition": {
                        "charLength": 4,
                        "startLineNumber": 959,
                        "startColumnNumber": 36,
                        "endLineNumber": 959,
                        "endColumnNumber": 40
                    },
                    "nodeContext": "m[1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 959,
                        "startColumnNumber": 36,
                        "endLineNumber": 959,
                        "endColumnNumber": 43
                    },
                    "nodeContext": "m[1][0]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 13,
                        "startLineNumber": 959,
                        "startColumnNumber": 36,
                        "endLineNumber": 959,
                        "endColumnNumber": 49
                    },
                    "nodeContext": "m[1][0] * x11",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 29,
                        "startLineNumber": 959,
                        "startColumnNumber": 20,
                        "endLineNumber": 959,
                        "endColumnNumber": 49
                    },
                    "nodeContext": "m[0][0] * x01 + m[1][0] * x11",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 15,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 45,
                        "startLineNumber": 959,
                        "startColumnNumber": 20,
                        "endLineNumber": 959,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 23,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 52,
                        "startLineNumber": 959,
                        "startColumnNumber": 13,
                        "endLineNumber": 959,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 25,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 60,
                        "startLineNumber": 959,
                        "startColumnNumber": 6,
                        "endLineNumber": 959,
                        "endColumnNumber": 66
                    },
                    "nodeContext": "double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 27,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2310,
                        "startLineNumber": 953,
                        "startColumnNumber": 21,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 765,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2327,
                        "startLineNumber": 953,
                        "startColumnNumber": 4,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "while (++i < 11) {\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 770,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 60,
                    "startLineNumber": 959,
                    "startColumnNumber": 6,
                    "endLineNumber": 959,
                    "endColumnNumber": 66
                },
                "nodeContext": "double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 27,
                "astHeight": 8
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 960,
                "startColumnNumber": 25,
                "endLineNumber": 960,
                "endColumnNumber": 26
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 960,
                        "startColumnNumber": 20,
                        "endLineNumber": 960,
                        "endColumnNumber": 27
                    },
                    "nodeContext": "m[0][1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 13,
                        "startLineNumber": 960,
                        "startColumnNumber": 20,
                        "endLineNumber": 960,
                        "endColumnNumber": 33
                    },
                    "nodeContext": "m[0][1] * x01",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 29,
                        "startLineNumber": 960,
                        "startColumnNumber": 20,
                        "endLineNumber": 960,
                        "endColumnNumber": 49
                    },
                    "nodeContext": "m[0][1] * x01 + m[1][1] * x11",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 15,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 45,
                        "startLineNumber": 960,
                        "startColumnNumber": 20,
                        "endLineNumber": 960,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 23,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 52,
                        "startLineNumber": 960,
                        "startColumnNumber": 13,
                        "endLineNumber": 960,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 25,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 60,
                        "startLineNumber": 960,
                        "startColumnNumber": 6,
                        "endLineNumber": 960,
                        "endColumnNumber": 66
                    },
                    "nodeContext": "double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 27,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2310,
                        "startLineNumber": 953,
                        "startColumnNumber": 21,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 765,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2327,
                        "startLineNumber": 953,
                        "startColumnNumber": 4,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "while (++i < 11) {\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 770,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 60,
                    "startLineNumber": 960,
                    "startColumnNumber": 6,
                    "endLineNumber": 960,
                    "endColumnNumber": 66
                },
                "nodeContext": "double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 27,
                "astHeight": 8
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 960,
                "startColumnNumber": 38,
                "endLineNumber": 960,
                "endColumnNumber": 39
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
                    "nodePosition": {
                        "charLength": 4,
                        "startLineNumber": 960,
                        "startColumnNumber": 36,
                        "endLineNumber": 960,
                        "endColumnNumber": 40
                    },
                    "nodeContext": "m[1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 960,
                        "startColumnNumber": 36,
                        "endLineNumber": 960,
                        "endColumnNumber": 43
                    },
                    "nodeContext": "m[1][1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 13,
                        "startLineNumber": 960,
                        "startColumnNumber": 36,
                        "endLineNumber": 960,
                        "endColumnNumber": 49
                    },
                    "nodeContext": "m[1][1] * x11",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 29,
                        "startLineNumber": 960,
                        "startColumnNumber": 20,
                        "endLineNumber": 960,
                        "endColumnNumber": 49
                    },
                    "nodeContext": "m[0][1] * x01 + m[1][1] * x11",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 15,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 45,
                        "startLineNumber": 960,
                        "startColumnNumber": 20,
                        "endLineNumber": 960,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 23,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 52,
                        "startLineNumber": 960,
                        "startColumnNumber": 13,
                        "endLineNumber": 960,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 25,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 60,
                        "startLineNumber": 960,
                        "startColumnNumber": 6,
                        "endLineNumber": 960,
                        "endColumnNumber": 66
                    },
                    "nodeContext": "double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 27,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2310,
                        "startLineNumber": 953,
                        "startColumnNumber": 21,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 765,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2327,
                        "startLineNumber": 953,
                        "startColumnNumber": 4,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "while (++i < 11) {\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 770,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 60,
                    "startLineNumber": 960,
                    "startColumnNumber": 6,
                    "endLineNumber": 960,
                    "endColumnNumber": 66
                },
                "nodeContext": "double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 27,
                "astHeight": 8
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 960,
                "startColumnNumber": 41,
                "endLineNumber": 960,
                "endColumnNumber": 42
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 960,
                        "startColumnNumber": 36,
                        "endLineNumber": 960,
                        "endColumnNumber": 43
                    },
                    "nodeContext": "m[1][1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 13,
                        "startLineNumber": 960,
                        "startColumnNumber": 36,
                        "endLineNumber": 960,
                        "endColumnNumber": 49
                    },
                    "nodeContext": "m[1][1] * x11",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 29,
                        "startLineNumber": 960,
                        "startColumnNumber": 20,
                        "endLineNumber": 960,
                        "endColumnNumber": 49
                    },
                    "nodeContext": "m[0][1] * x01 + m[1][1] * x11",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 15,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 45,
                        "startLineNumber": 960,
                        "startColumnNumber": 20,
                        "endLineNumber": 960,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 23,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 52,
                        "startLineNumber": 960,
                        "startColumnNumber": 13,
                        "endLineNumber": 960,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 25,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 60,
                        "startLineNumber": 960,
                        "startColumnNumber": 6,
                        "endLineNumber": 960,
                        "endColumnNumber": 66
                    },
                    "nodeContext": "double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 27,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2310,
                        "startLineNumber": 953,
                        "startColumnNumber": 21,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 765,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2327,
                        "startLineNumber": 953,
                        "startColumnNumber": 4,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "while (++i < 11) {\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 770,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 60,
                    "startLineNumber": 960,
                    "startColumnNumber": 6,
                    "endLineNumber": 960,
                    "endColumnNumber": 66
                },
                "nodeContext": "double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 27,
                "astHeight": 8
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 960,
                "startColumnNumber": 57,
                "endLineNumber": 960,
                "endColumnNumber": 58
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 960,
                        "startColumnNumber": 52,
                        "endLineNumber": 960,
                        "endColumnNumber": 59
                    },
                    "nodeContext": "m[2][1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 13,
                        "startLineNumber": 960,
                        "startColumnNumber": 52,
                        "endLineNumber": 960,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "m[2][1] * x21",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 45,
                        "startLineNumber": 960,
                        "startColumnNumber": 20,
                        "endLineNumber": 960,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 23,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 52,
                        "startLineNumber": 960,
                        "startColumnNumber": 13,
                        "endLineNumber": 960,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 25,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 60,
                        "startLineNumber": 960,
                        "startColumnNumber": 6,
                        "endLineNumber": 960,
                        "endColumnNumber": 66
                    },
                    "nodeContext": "double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 27,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2310,
                        "startLineNumber": 953,
                        "startColumnNumber": 21,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 765,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2327,
                        "startLineNumber": 953,
                        "startColumnNumber": 4,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "while (++i < 11) {\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 770,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 60,
                    "startLineNumber": 960,
                    "startColumnNumber": 6,
                    "endLineNumber": 960,
                    "endColumnNumber": 66
                },
                "nodeContext": "double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 27,
                "astHeight": 8
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 961,
                "startColumnNumber": 38,
                "endLineNumber": 961,
                "endColumnNumber": 39
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
                    "nodePosition": {
                        "charLength": 4,
                        "startLineNumber": 961,
                        "startColumnNumber": 36,
                        "endLineNumber": 961,
                        "endColumnNumber": 40
                    },
                    "nodeContext": "m[1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 961,
                        "startColumnNumber": 36,
                        "endLineNumber": 961,
                        "endColumnNumber": 43
                    },
                    "nodeContext": "m[1][2]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 13,
                        "startLineNumber": 961,
                        "startColumnNumber": 36,
                        "endLineNumber": 961,
                        "endColumnNumber": 49
                    },
                    "nodeContext": "m[1][2] * x11",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 29,
                        "startLineNumber": 961,
                        "startColumnNumber": 20,
                        "endLineNumber": 961,
                        "endColumnNumber": 49
                    },
                    "nodeContext": "m[0][2] * x01 + m[1][2] * x11",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 15,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 45,
                        "startLineNumber": 961,
                        "startColumnNumber": 20,
                        "endLineNumber": 961,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 23,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 52,
                        "startLineNumber": 961,
                        "startColumnNumber": 13,
                        "endLineNumber": 961,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 25,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 60,
                        "startLineNumber": 961,
                        "startColumnNumber": 6,
                        "endLineNumber": 961,
                        "endColumnNumber": 66
                    },
                    "nodeContext": "double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 27,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2310,
                        "startLineNumber": 953,
                        "startColumnNumber": 21,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 765,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2327,
                        "startLineNumber": 953,
                        "startColumnNumber": 4,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "while (++i < 11) {\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 770,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 60,
                    "startLineNumber": 961,
                    "startColumnNumber": 6,
                    "endLineNumber": 961,
                    "endColumnNumber": 66
                },
                "nodeContext": "double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 27,
                "astHeight": 8
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 962,
                "startColumnNumber": 38,
                "endLineNumber": 962,
                "endColumnNumber": 39
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
                    "nodePosition": {
                        "charLength": 4,
                        "startLineNumber": 962,
                        "startColumnNumber": 36,
                        "endLineNumber": 962,
                        "endColumnNumber": 40
                    },
                    "nodeContext": "m[1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 962,
                        "startColumnNumber": 36,
                        "endLineNumber": 962,
                        "endColumnNumber": 43
                    },
                    "nodeContext": "m[1][0]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 13,
                        "startLineNumber": 962,
                        "startColumnNumber": 36,
                        "endLineNumber": 962,
                        "endColumnNumber": 49
                    },
                    "nodeContext": "m[1][0] * x12",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 29,
                        "startLineNumber": 962,
                        "startColumnNumber": 20,
                        "endLineNumber": 962,
                        "endColumnNumber": 49
                    },
                    "nodeContext": "m[0][0] * x02 + m[1][0] * x12",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 15,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 45,
                        "startLineNumber": 962,
                        "startColumnNumber": 20,
                        "endLineNumber": 962,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 23,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 52,
                        "startLineNumber": 962,
                        "startColumnNumber": 13,
                        "endLineNumber": 962,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 25,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 60,
                        "startLineNumber": 962,
                        "startColumnNumber": 6,
                        "endLineNumber": 962,
                        "endColumnNumber": 66
                    },
                    "nodeContext": "double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 27,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2310,
                        "startLineNumber": 953,
                        "startColumnNumber": 21,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 765,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2327,
                        "startLineNumber": 953,
                        "startColumnNumber": 4,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "while (++i < 11) {\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 770,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 60,
                    "startLineNumber": 962,
                    "startColumnNumber": 6,
                    "endLineNumber": 962,
                    "endColumnNumber": 66
                },
                "nodeContext": "double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 27,
                "astHeight": 8
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 963,
                "startColumnNumber": 25,
                "endLineNumber": 963,
                "endColumnNumber": 26
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 963,
                        "startColumnNumber": 20,
                        "endLineNumber": 963,
                        "endColumnNumber": 27
                    },
                    "nodeContext": "m[0][1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 13,
                        "startLineNumber": 963,
                        "startColumnNumber": 20,
                        "endLineNumber": 963,
                        "endColumnNumber": 33
                    },
                    "nodeContext": "m[0][1] * x02",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 29,
                        "startLineNumber": 963,
                        "startColumnNumber": 20,
                        "endLineNumber": 963,
                        "endColumnNumber": 49
                    },
                    "nodeContext": "m[0][1] * x02 + m[1][1] * x12",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 15,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 45,
                        "startLineNumber": 963,
                        "startColumnNumber": 20,
                        "endLineNumber": 963,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 23,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 52,
                        "startLineNumber": 963,
                        "startColumnNumber": 13,
                        "endLineNumber": 963,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 25,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 60,
                        "startLineNumber": 963,
                        "startColumnNumber": 6,
                        "endLineNumber": 963,
                        "endColumnNumber": 66
                    },
                    "nodeContext": "double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 27,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2310,
                        "startLineNumber": 953,
                        "startColumnNumber": 21,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 765,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2327,
                        "startLineNumber": 953,
                        "startColumnNumber": 4,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "while (++i < 11) {\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 770,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 60,
                    "startLineNumber": 963,
                    "startColumnNumber": 6,
                    "endLineNumber": 963,
                    "endColumnNumber": 66
                },
                "nodeContext": "double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 27,
                "astHeight": 8
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 963,
                "startColumnNumber": 38,
                "endLineNumber": 963,
                "endColumnNumber": 39
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
                    "nodePosition": {
                        "charLength": 4,
                        "startLineNumber": 963,
                        "startColumnNumber": 36,
                        "endLineNumber": 963,
                        "endColumnNumber": 40
                    },
                    "nodeContext": "m[1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 963,
                        "startColumnNumber": 36,
                        "endLineNumber": 963,
                        "endColumnNumber": 43
                    },
                    "nodeContext": "m[1][1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 13,
                        "startLineNumber": 963,
                        "startColumnNumber": 36,
                        "endLineNumber": 963,
                        "endColumnNumber": 49
                    },
                    "nodeContext": "m[1][1] * x12",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 29,
                        "startLineNumber": 963,
                        "startColumnNumber": 20,
                        "endLineNumber": 963,
                        "endColumnNumber": 49
                    },
                    "nodeContext": "m[0][1] * x02 + m[1][1] * x12",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 15,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 45,
                        "startLineNumber": 963,
                        "startColumnNumber": 20,
                        "endLineNumber": 963,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 23,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 52,
                        "startLineNumber": 963,
                        "startColumnNumber": 13,
                        "endLineNumber": 963,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 25,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 60,
                        "startLineNumber": 963,
                        "startColumnNumber": 6,
                        "endLineNumber": 963,
                        "endColumnNumber": 66
                    },
                    "nodeContext": "double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 27,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2310,
                        "startLineNumber": 953,
                        "startColumnNumber": 21,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 765,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2327,
                        "startLineNumber": 953,
                        "startColumnNumber": 4,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "while (++i < 11) {\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 770,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 60,
                    "startLineNumber": 963,
                    "startColumnNumber": 6,
                    "endLineNumber": 963,
                    "endColumnNumber": 66
                },
                "nodeContext": "double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 27,
                "astHeight": 8
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 963,
                "startColumnNumber": 41,
                "endLineNumber": 963,
                "endColumnNumber": 42
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 963,
                        "startColumnNumber": 36,
                        "endLineNumber": 963,
                        "endColumnNumber": 43
                    },
                    "nodeContext": "m[1][1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 13,
                        "startLineNumber": 963,
                        "startColumnNumber": 36,
                        "endLineNumber": 963,
                        "endColumnNumber": 49
                    },
                    "nodeContext": "m[1][1] * x12",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 29,
                        "startLineNumber": 963,
                        "startColumnNumber": 20,
                        "endLineNumber": 963,
                        "endColumnNumber": 49
                    },
                    "nodeContext": "m[0][1] * x02 + m[1][1] * x12",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 15,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 45,
                        "startLineNumber": 963,
                        "startColumnNumber": 20,
                        "endLineNumber": 963,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 23,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 52,
                        "startLineNumber": 963,
                        "startColumnNumber": 13,
                        "endLineNumber": 963,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 25,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 60,
                        "startLineNumber": 963,
                        "startColumnNumber": 6,
                        "endLineNumber": 963,
                        "endColumnNumber": 66
                    },
                    "nodeContext": "double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 27,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2310,
                        "startLineNumber": 953,
                        "startColumnNumber": 21,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 765,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2327,
                        "startLineNumber": 953,
                        "startColumnNumber": 4,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "while (++i < 11) {\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 770,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 60,
                    "startLineNumber": 963,
                    "startColumnNumber": 6,
                    "endLineNumber": 963,
                    "endColumnNumber": 66
                },
                "nodeContext": "double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 27,
                "astHeight": 8
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 963,
                "startColumnNumber": 57,
                "endLineNumber": 963,
                "endColumnNumber": 58
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 963,
                        "startColumnNumber": 52,
                        "endLineNumber": 963,
                        "endColumnNumber": 59
                    },
                    "nodeContext": "m[2][1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 13,
                        "startLineNumber": 963,
                        "startColumnNumber": 52,
                        "endLineNumber": 963,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "m[2][1] * x22",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 45,
                        "startLineNumber": 963,
                        "startColumnNumber": 20,
                        "endLineNumber": 963,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 23,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 52,
                        "startLineNumber": 963,
                        "startColumnNumber": 13,
                        "endLineNumber": 963,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 25,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 60,
                        "startLineNumber": 963,
                        "startColumnNumber": 6,
                        "endLineNumber": 963,
                        "endColumnNumber": 66
                    },
                    "nodeContext": "double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 27,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2310,
                        "startLineNumber": 953,
                        "startColumnNumber": 21,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 765,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2327,
                        "startLineNumber": 953,
                        "startColumnNumber": 4,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "while (++i < 11) {\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 770,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 60,
                    "startLineNumber": 963,
                    "startColumnNumber": 6,
                    "endLineNumber": 963,
                    "endColumnNumber": 66
                },
                "nodeContext": "double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 27,
                "astHeight": 8
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 964,
                "startColumnNumber": 38,
                "endLineNumber": 964,
                "endColumnNumber": 39
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
                    "nodePosition": {
                        "charLength": 4,
                        "startLineNumber": 964,
                        "startColumnNumber": 36,
                        "endLineNumber": 964,
                        "endColumnNumber": 40
                    },
                    "nodeContext": "m[1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 964,
                        "startColumnNumber": 36,
                        "endLineNumber": 964,
                        "endColumnNumber": 43
                    },
                    "nodeContext": "m[1][2]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 13,
                        "startLineNumber": 964,
                        "startColumnNumber": 36,
                        "endLineNumber": 964,
                        "endColumnNumber": 49
                    },
                    "nodeContext": "m[1][2] * x12",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 29,
                        "startLineNumber": 964,
                        "startColumnNumber": 20,
                        "endLineNumber": 964,
                        "endColumnNumber": 49
                    },
                    "nodeContext": "m[0][2] * x02 + m[1][2] * x12",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 15,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 45,
                        "startLineNumber": 964,
                        "startColumnNumber": 20,
                        "endLineNumber": 964,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 23,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 52,
                        "startLineNumber": 964,
                        "startColumnNumber": 13,
                        "endLineNumber": 964,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 25,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 60,
                        "startLineNumber": 964,
                        "startColumnNumber": 6,
                        "endLineNumber": 964,
                        "endColumnNumber": 66
                    },
                    "nodeContext": "double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 27,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2310,
                        "startLineNumber": 953,
                        "startColumnNumber": 21,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 765,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2327,
                        "startLineNumber": 953,
                        "startColumnNumber": 4,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "while (++i < 11) {\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 770,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 60,
                    "startLineNumber": 964,
                    "startColumnNumber": 6,
                    "endLineNumber": 964,
                    "endColumnNumber": 66
                },
                "nodeContext": "double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 27,
                "astHeight": 8
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 968,
                "startColumnNumber": 11,
                "endLineNumber": 968,
                "endColumnNumber": 12
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 968,
                        "startColumnNumber": 6,
                        "endLineNumber": 968,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "o[0][1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 70,
                        "startLineNumber": 968,
                        "startColumnNumber": 6,
                        "endLineNumber": 968,
                        "endColumnNumber": 76
                    },
                    "nodeContext": "o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1])",
                    "nodeType": "Assignment",
                    "astNodeNumber": 28,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 71,
                        "startLineNumber": 968,
                        "startColumnNumber": 6,
                        "endLineNumber": 968,
                        "endColumnNumber": 77
                    },
                    "nodeContext": "o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 29,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2310,
                        "startLineNumber": 953,
                        "startColumnNumber": 21,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 765,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2327,
                        "startLineNumber": 953,
                        "startColumnNumber": 4,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "while (++i < 11) {\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 770,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 71,
                    "startLineNumber": 968,
                    "startColumnNumber": 6,
                    "endLineNumber": 968,
                    "endColumnNumber": 77
                },
                "nodeContext": "o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 29,
                "astHeight": 10
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 968,
                "startColumnNumber": 73,
                "endLineNumber": 968,
                "endColumnNumber": 74
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 968,
                        "startColumnNumber": 68,
                        "endLineNumber": 968,
                        "endColumnNumber": 75
                    },
                    "nodeContext": "m[0][1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
                    "nodePosition": {
                        "charLength": 46,
                        "startLineNumber": 968,
                        "startColumnNumber": 29,
                        "endLineNumber": 968,
                        "endColumnNumber": 75
                    },
                    "nodeContext": "x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 17,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 48,
                        "startLineNumber": 968,
                        "startColumnNumber": 28,
                        "endLineNumber": 968,
                        "endColumnNumber": 76
                    },
                    "nodeContext": "(x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1])",
                    "nodeType": "ParenthesizedExpression",
                    "astNodeNumber": 18,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 54,
                        "startLineNumber": 968,
                        "startColumnNumber": 22,
                        "endLineNumber": 968,
                        "endColumnNumber": 76
                    },
                    "nodeContext": "0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1])",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 20,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 60,
                        "startLineNumber": 968,
                        "startColumnNumber": 16,
                        "endLineNumber": 968,
                        "endColumnNumber": 76
                    },
                    "nodeContext": "x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1])",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 22,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 70,
                        "startLineNumber": 968,
                        "startColumnNumber": 6,
                        "endLineNumber": 968,
                        "endColumnNumber": 76
                    },
                    "nodeContext": "o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1])",
                    "nodeType": "Assignment",
                    "astNodeNumber": 28,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 71,
                        "startLineNumber": 968,
                        "startColumnNumber": 6,
                        "endLineNumber": 968,
                        "endColumnNumber": 77
                    },
                    "nodeContext": "o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 29,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2310,
                        "startLineNumber": 953,
                        "startColumnNumber": 21,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 765,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2327,
                        "startLineNumber": 953,
                        "startColumnNumber": 4,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "while (++i < 11) {\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 770,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 71,
                    "startLineNumber": 968,
                    "startColumnNumber": 6,
                    "endLineNumber": 968,
                    "endColumnNumber": 77
                },
                "nodeContext": "o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 29,
                "astHeight": 10
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 970,
                "startColumnNumber": 8,
                "endLineNumber": 970,
                "endColumnNumber": 9
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
                    "nodePosition": {
                        "charLength": 4,
                        "startLineNumber": 970,
                        "startColumnNumber": 6,
                        "endLineNumber": 970,
                        "endColumnNumber": 10
                    },
                    "nodeContext": "o[1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 970,
                        "startColumnNumber": 6,
                        "endLineNumber": 970,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "o[1][0]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 70,
                        "startLineNumber": 970,
                        "startColumnNumber": 6,
                        "endLineNumber": 970,
                        "endColumnNumber": 76
                    },
                    "nodeContext": "o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0])",
                    "nodeType": "Assignment",
                    "astNodeNumber": 28,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 71,
                        "startLineNumber": 970,
                        "startColumnNumber": 6,
                        "endLineNumber": 970,
                        "endColumnNumber": 77
                    },
                    "nodeContext": "o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 29,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2310,
                        "startLineNumber": 953,
                        "startColumnNumber": 21,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 765,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2327,
                        "startLineNumber": 953,
                        "startColumnNumber": 4,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "while (++i < 11) {\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 770,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 71,
                    "startLineNumber": 970,
                    "startColumnNumber": 6,
                    "endLineNumber": 970,
                    "endColumnNumber": 77
                },
                "nodeContext": "o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 29,
                "astHeight": 10
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 970,
                "startColumnNumber": 70,
                "endLineNumber": 970,
                "endColumnNumber": 71
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
                    "nodePosition": {
                        "charLength": 4,
                        "startLineNumber": 970,
                        "startColumnNumber": 68,
                        "endLineNumber": 970,
                        "endColumnNumber": 72
                    },
                    "nodeContext": "m[1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 970,
                        "startColumnNumber": 68,
                        "endLineNumber": 970,
                        "endColumnNumber": 75
                    },
                    "nodeContext": "m[1][0]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
                    "nodePosition": {
                        "charLength": 46,
                        "startLineNumber": 970,
                        "startColumnNumber": 29,
                        "endLineNumber": 970,
                        "endColumnNumber": 75
                    },
                    "nodeContext": "x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 17,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 48,
                        "startLineNumber": 970,
                        "startColumnNumber": 28,
                        "endLineNumber": 970,
                        "endColumnNumber": 76
                    },
                    "nodeContext": "(x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0])",
                    "nodeType": "ParenthesizedExpression",
                    "astNodeNumber": 18,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 54,
                        "startLineNumber": 970,
                        "startColumnNumber": 22,
                        "endLineNumber": 970,
                        "endColumnNumber": 76
                    },
                    "nodeContext": "0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0])",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 20,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 60,
                        "startLineNumber": 970,
                        "startColumnNumber": 16,
                        "endLineNumber": 970,
                        "endColumnNumber": 76
                    },
                    "nodeContext": "x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0])",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 22,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 70,
                        "startLineNumber": 970,
                        "startColumnNumber": 6,
                        "endLineNumber": 970,
                        "endColumnNumber": 76
                    },
                    "nodeContext": "o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0])",
                    "nodeType": "Assignment",
                    "astNodeNumber": 28,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 71,
                        "startLineNumber": 970,
                        "startColumnNumber": 6,
                        "endLineNumber": 970,
                        "endColumnNumber": 77
                    },
                    "nodeContext": "o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 29,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2310,
                        "startLineNumber": 953,
                        "startColumnNumber": 21,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 765,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2327,
                        "startLineNumber": 953,
                        "startColumnNumber": 4,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "while (++i < 11) {\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 770,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 71,
                    "startLineNumber": 970,
                    "startColumnNumber": 6,
                    "endLineNumber": 970,
                    "endColumnNumber": 77
                },
                "nodeContext": "o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 29,
                "astHeight": 10
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 971,
                "startColumnNumber": 8,
                "endLineNumber": 971,
                "endColumnNumber": 9
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
                    "nodePosition": {
                        "charLength": 4,
                        "startLineNumber": 971,
                        "startColumnNumber": 6,
                        "endLineNumber": 971,
                        "endColumnNumber": 10
                    },
                    "nodeContext": "o[1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 971,
                        "startColumnNumber": 6,
                        "endLineNumber": 971,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "o[1][1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 70,
                        "startLineNumber": 971,
                        "startColumnNumber": 6,
                        "endLineNumber": 971,
                        "endColumnNumber": 76
                    },
                    "nodeContext": "o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1])",
                    "nodeType": "Assignment",
                    "astNodeNumber": 28,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 71,
                        "startLineNumber": 971,
                        "startColumnNumber": 6,
                        "endLineNumber": 971,
                        "endColumnNumber": 77
                    },
                    "nodeContext": "o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 29,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2310,
                        "startLineNumber": 953,
                        "startColumnNumber": 21,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 765,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2327,
                        "startLineNumber": 953,
                        "startColumnNumber": 4,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "while (++i < 11) {\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 770,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 71,
                    "startLineNumber": 971,
                    "startColumnNumber": 6,
                    "endLineNumber": 971,
                    "endColumnNumber": 77
                },
                "nodeContext": "o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 29,
                "astHeight": 10
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 971,
                "startColumnNumber": 11,
                "endLineNumber": 971,
                "endColumnNumber": 12
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 971,
                        "startColumnNumber": 6,
                        "endLineNumber": 971,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "o[1][1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 70,
                        "startLineNumber": 971,
                        "startColumnNumber": 6,
                        "endLineNumber": 971,
                        "endColumnNumber": 76
                    },
                    "nodeContext": "o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1])",
                    "nodeType": "Assignment",
                    "astNodeNumber": 28,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 71,
                        "startLineNumber": 971,
                        "startColumnNumber": 6,
                        "endLineNumber": 971,
                        "endColumnNumber": 77
                    },
                    "nodeContext": "o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 29,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2310,
                        "startLineNumber": 953,
                        "startColumnNumber": 21,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 765,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2327,
                        "startLineNumber": 953,
                        "startColumnNumber": 4,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "while (++i < 11) {\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 770,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 71,
                    "startLineNumber": 971,
                    "startColumnNumber": 6,
                    "endLineNumber": 971,
                    "endColumnNumber": 77
                },
                "nodeContext": "o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 29,
                "astHeight": 10
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 971,
                "startColumnNumber": 70,
                "endLineNumber": 971,
                "endColumnNumber": 71
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
                    "nodePosition": {
                        "charLength": 4,
                        "startLineNumber": 971,
                        "startColumnNumber": 68,
                        "endLineNumber": 971,
                        "endColumnNumber": 72
                    },
                    "nodeContext": "m[1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 971,
                        "startColumnNumber": 68,
                        "endLineNumber": 971,
                        "endColumnNumber": 75
                    },
                    "nodeContext": "m[1][1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
                    "nodePosition": {
                        "charLength": 46,
                        "startLineNumber": 971,
                        "startColumnNumber": 29,
                        "endLineNumber": 971,
                        "endColumnNumber": 75
                    },
                    "nodeContext": "x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 17,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 48,
                        "startLineNumber": 971,
                        "startColumnNumber": 28,
                        "endLineNumber": 971,
                        "endColumnNumber": 76
                    },
                    "nodeContext": "(x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1])",
                    "nodeType": "ParenthesizedExpression",
                    "astNodeNumber": 18,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 54,
                        "startLineNumber": 971,
                        "startColumnNumber": 22,
                        "endLineNumber": 971,
                        "endColumnNumber": 76
                    },
                    "nodeContext": "0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1])",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 20,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 60,
                        "startLineNumber": 971,
                        "startColumnNumber": 16,
                        "endLineNumber": 971,
                        "endColumnNumber": 76
                    },
                    "nodeContext": "x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1])",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 22,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 70,
                        "startLineNumber": 971,
                        "startColumnNumber": 6,
                        "endLineNumber": 971,
                        "endColumnNumber": 76
                    },
                    "nodeContext": "o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1])",
                    "nodeType": "Assignment",
                    "astNodeNumber": 28,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 71,
                        "startLineNumber": 971,
                        "startColumnNumber": 6,
                        "endLineNumber": 971,
                        "endColumnNumber": 77
                    },
                    "nodeContext": "o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 29,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2310,
                        "startLineNumber": 953,
                        "startColumnNumber": 21,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 765,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2327,
                        "startLineNumber": 953,
                        "startColumnNumber": 4,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "while (++i < 11) {\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 770,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 71,
                    "startLineNumber": 971,
                    "startColumnNumber": 6,
                    "endLineNumber": 971,
                    "endColumnNumber": 77
                },
                "nodeContext": "o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 29,
                "astHeight": 10
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 971,
                "startColumnNumber": 73,
                "endLineNumber": 971,
                "endColumnNumber": 74
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 971,
                        "startColumnNumber": 68,
                        "endLineNumber": 971,
                        "endColumnNumber": 75
                    },
                    "nodeContext": "m[1][1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
                    "nodePosition": {
                        "charLength": 46,
                        "startLineNumber": 971,
                        "startColumnNumber": 29,
                        "endLineNumber": 971,
                        "endColumnNumber": 75
                    },
                    "nodeContext": "x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 17,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 48,
                        "startLineNumber": 971,
                        "startColumnNumber": 28,
                        "endLineNumber": 971,
                        "endColumnNumber": 76
                    },
                    "nodeContext": "(x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1])",
                    "nodeType": "ParenthesizedExpression",
                    "astNodeNumber": 18,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 54,
                        "startLineNumber": 971,
                        "startColumnNumber": 22,
                        "endLineNumber": 971,
                        "endColumnNumber": 76
                    },
                    "nodeContext": "0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1])",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 20,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 60,
                        "startLineNumber": 971,
                        "startColumnNumber": 16,
                        "endLineNumber": 971,
                        "endColumnNumber": 76
                    },
                    "nodeContext": "x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1])",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 22,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 70,
                        "startLineNumber": 971,
                        "startColumnNumber": 6,
                        "endLineNumber": 971,
                        "endColumnNumber": 76
                    },
                    "nodeContext": "o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1])",
                    "nodeType": "Assignment",
                    "astNodeNumber": 28,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 71,
                        "startLineNumber": 971,
                        "startColumnNumber": 6,
                        "endLineNumber": 971,
                        "endColumnNumber": 77
                    },
                    "nodeContext": "o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 29,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2310,
                        "startLineNumber": 953,
                        "startColumnNumber": 21,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 765,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2327,
                        "startLineNumber": 953,
                        "startColumnNumber": 4,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "while (++i < 11) {\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 770,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 71,
                    "startLineNumber": 971,
                    "startColumnNumber": 6,
                    "endLineNumber": 971,
                    "endColumnNumber": 77
                },
                "nodeContext": "o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 29,
                "astHeight": 10
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 972,
                "startColumnNumber": 8,
                "endLineNumber": 972,
                "endColumnNumber": 9
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
                    "nodePosition": {
                        "charLength": 4,
                        "startLineNumber": 972,
                        "startColumnNumber": 6,
                        "endLineNumber": 972,
                        "endColumnNumber": 10
                    },
                    "nodeContext": "o[1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 972,
                        "startColumnNumber": 6,
                        "endLineNumber": 972,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "o[1][2]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 70,
                        "startLineNumber": 972,
                        "startColumnNumber": 6,
                        "endLineNumber": 972,
                        "endColumnNumber": 76
                    },
                    "nodeContext": "o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2])",
                    "nodeType": "Assignment",
                    "astNodeNumber": 28,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 71,
                        "startLineNumber": 972,
                        "startColumnNumber": 6,
                        "endLineNumber": 972,
                        "endColumnNumber": 77
                    },
                    "nodeContext": "o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 29,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2310,
                        "startLineNumber": 953,
                        "startColumnNumber": 21,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 765,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2327,
                        "startLineNumber": 953,
                        "startColumnNumber": 4,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "while (++i < 11) {\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 770,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 71,
                    "startLineNumber": 972,
                    "startColumnNumber": 6,
                    "endLineNumber": 972,
                    "endColumnNumber": 77
                },
                "nodeContext": "o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 29,
                "astHeight": 10
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 972,
                "startColumnNumber": 70,
                "endLineNumber": 972,
                "endColumnNumber": 71
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
                    "nodePosition": {
                        "charLength": 4,
                        "startLineNumber": 972,
                        "startColumnNumber": 68,
                        "endLineNumber": 972,
                        "endColumnNumber": 72
                    },
                    "nodeContext": "m[1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 972,
                        "startColumnNumber": 68,
                        "endLineNumber": 972,
                        "endColumnNumber": 75
                    },
                    "nodeContext": "m[1][2]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
                    "nodePosition": {
                        "charLength": 46,
                        "startLineNumber": 972,
                        "startColumnNumber": 29,
                        "endLineNumber": 972,
                        "endColumnNumber": 75
                    },
                    "nodeContext": "x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 17,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 48,
                        "startLineNumber": 972,
                        "startColumnNumber": 28,
                        "endLineNumber": 972,
                        "endColumnNumber": 76
                    },
                    "nodeContext": "(x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2])",
                    "nodeType": "ParenthesizedExpression",
                    "astNodeNumber": 18,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 54,
                        "startLineNumber": 972,
                        "startColumnNumber": 22,
                        "endLineNumber": 972,
                        "endColumnNumber": 76
                    },
                    "nodeContext": "0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2])",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 20,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 60,
                        "startLineNumber": 972,
                        "startColumnNumber": 16,
                        "endLineNumber": 972,
                        "endColumnNumber": 76
                    },
                    "nodeContext": "x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2])",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 22,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 70,
                        "startLineNumber": 972,
                        "startColumnNumber": 6,
                        "endLineNumber": 972,
                        "endColumnNumber": 76
                    },
                    "nodeContext": "o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2])",
                    "nodeType": "Assignment",
                    "astNodeNumber": 28,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 71,
                        "startLineNumber": 972,
                        "startColumnNumber": 6,
                        "endLineNumber": 972,
                        "endColumnNumber": 77
                    },
                    "nodeContext": "o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 29,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2310,
                        "startLineNumber": 953,
                        "startColumnNumber": 21,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 765,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2327,
                        "startLineNumber": 953,
                        "startColumnNumber": 4,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "while (++i < 11) {\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 770,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 71,
                    "startLineNumber": 972,
                    "startColumnNumber": 6,
                    "endLineNumber": 972,
                    "endColumnNumber": 77
                },
                "nodeContext": "o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 29,
                "astHeight": 10
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 974,
                "startColumnNumber": 11,
                "endLineNumber": 974,
                "endColumnNumber": 12
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 974,
                        "startColumnNumber": 6,
                        "endLineNumber": 974,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "o[2][1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 70,
                        "startLineNumber": 974,
                        "startColumnNumber": 6,
                        "endLineNumber": 974,
                        "endColumnNumber": 76
                    },
                    "nodeContext": "o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1])",
                    "nodeType": "Assignment",
                    "astNodeNumber": 28,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 71,
                        "startLineNumber": 974,
                        "startColumnNumber": 6,
                        "endLineNumber": 974,
                        "endColumnNumber": 77
                    },
                    "nodeContext": "o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 29,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2310,
                        "startLineNumber": 953,
                        "startColumnNumber": 21,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 765,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2327,
                        "startLineNumber": 953,
                        "startColumnNumber": 4,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "while (++i < 11) {\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 770,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 71,
                    "startLineNumber": 974,
                    "startColumnNumber": 6,
                    "endLineNumber": 974,
                    "endColumnNumber": 77
                },
                "nodeContext": "o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 29,
                "astHeight": 10
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 974,
                "startColumnNumber": 73,
                "endLineNumber": 974,
                "endColumnNumber": 74
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 974,
                        "startColumnNumber": 68,
                        "endLineNumber": 974,
                        "endColumnNumber": 75
                    },
                    "nodeContext": "m[2][1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
                    "nodePosition": {
                        "charLength": 46,
                        "startLineNumber": 974,
                        "startColumnNumber": 29,
                        "endLineNumber": 974,
                        "endColumnNumber": 75
                    },
                    "nodeContext": "x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 17,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 48,
                        "startLineNumber": 974,
                        "startColumnNumber": 28,
                        "endLineNumber": 974,
                        "endColumnNumber": 76
                    },
                    "nodeContext": "(x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1])",
                    "nodeType": "ParenthesizedExpression",
                    "astNodeNumber": 18,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 54,
                        "startLineNumber": 974,
                        "startColumnNumber": 22,
                        "endLineNumber": 974,
                        "endColumnNumber": 76
                    },
                    "nodeContext": "0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1])",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 20,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 60,
                        "startLineNumber": 974,
                        "startColumnNumber": 16,
                        "endLineNumber": 974,
                        "endColumnNumber": 76
                    },
                    "nodeContext": "x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1])",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 22,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 70,
                        "startLineNumber": 974,
                        "startColumnNumber": 6,
                        "endLineNumber": 974,
                        "endColumnNumber": 76
                    },
                    "nodeContext": "o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1])",
                    "nodeType": "Assignment",
                    "astNodeNumber": 28,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 71,
                        "startLineNumber": 974,
                        "startColumnNumber": 6,
                        "endLineNumber": 974,
                        "endColumnNumber": 77
                    },
                    "nodeContext": "o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 29,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2310,
                        "startLineNumber": 953,
                        "startColumnNumber": 21,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 765,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2327,
                        "startLineNumber": 953,
                        "startColumnNumber": 4,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "while (++i < 11) {\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 770,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 71,
                    "startLineNumber": 974,
                    "startColumnNumber": 6,
                    "endLineNumber": 974,
                    "endColumnNumber": 77
                },
                "nodeContext": "o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 29,
                "astHeight": 10
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 979,
                "startColumnNumber": 27,
                "endLineNumber": 979,
                "endColumnNumber": 28
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 979,
                        "startColumnNumber": 22,
                        "endLineNumber": 979,
                        "endColumnNumber": 29
                    },
                    "nodeContext": "o[0][1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 17,
                        "startLineNumber": 979,
                        "startColumnNumber": 22,
                        "endLineNumber": 979,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "o[0][1] - m[0][1]",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 26,
                        "startLineNumber": 979,
                        "startColumnNumber": 13,
                        "endLineNumber": 979,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "corr01=o[0][1] - m[0][1]",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 13,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 34,
                        "startLineNumber": 979,
                        "startColumnNumber": 6,
                        "endLineNumber": 979,
                        "endColumnNumber": 40
                    },
                    "nodeContext": "double corr01=o[0][1] - m[0][1];\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 15,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2310,
                        "startLineNumber": 953,
                        "startColumnNumber": 21,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 765,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2327,
                        "startLineNumber": 953,
                        "startColumnNumber": 4,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "while (++i < 11) {\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 770,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 34,
                    "startLineNumber": 979,
                    "startColumnNumber": 6,
                    "endLineNumber": 979,
                    "endColumnNumber": 40
                },
                "nodeContext": "double corr01=o[0][1] - m[0][1];\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 15,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 979,
                "startColumnNumber": 37,
                "endLineNumber": 979,
                "endColumnNumber": 38
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 979,
                        "startColumnNumber": 32,
                        "endLineNumber": 979,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "m[0][1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 17,
                        "startLineNumber": 979,
                        "startColumnNumber": 22,
                        "endLineNumber": 979,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "o[0][1] - m[0][1]",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 26,
                        "startLineNumber": 979,
                        "startColumnNumber": 13,
                        "endLineNumber": 979,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "corr01=o[0][1] - m[0][1]",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 13,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 34,
                        "startLineNumber": 979,
                        "startColumnNumber": 6,
                        "endLineNumber": 979,
                        "endColumnNumber": 40
                    },
                    "nodeContext": "double corr01=o[0][1] - m[0][1];\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 15,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2310,
                        "startLineNumber": 953,
                        "startColumnNumber": 21,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 765,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2327,
                        "startLineNumber": 953,
                        "startColumnNumber": 4,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "while (++i < 11) {\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 770,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 34,
                    "startLineNumber": 979,
                    "startColumnNumber": 6,
                    "endLineNumber": 979,
                    "endColumnNumber": 40
                },
                "nodeContext": "double corr01=o[0][1] - m[0][1];\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 15,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 981,
                "startColumnNumber": 24,
                "endLineNumber": 981,
                "endColumnNumber": 25
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
                    "nodePosition": {
                        "charLength": 4,
                        "startLineNumber": 981,
                        "startColumnNumber": 22,
                        "endLineNumber": 981,
                        "endColumnNumber": 26
                    },
                    "nodeContext": "o[1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 981,
                        "startColumnNumber": 22,
                        "endLineNumber": 981,
                        "endColumnNumber": 29
                    },
                    "nodeContext": "o[1][0]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 17,
                        "startLineNumber": 981,
                        "startColumnNumber": 22,
                        "endLineNumber": 981,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "o[1][0] - m[1][0]",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 26,
                        "startLineNumber": 981,
                        "startColumnNumber": 13,
                        "endLineNumber": 981,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "corr10=o[1][0] - m[1][0]",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 13,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 34,
                        "startLineNumber": 981,
                        "startColumnNumber": 6,
                        "endLineNumber": 981,
                        "endColumnNumber": 40
                    },
                    "nodeContext": "double corr10=o[1][0] - m[1][0];\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 15,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2310,
                        "startLineNumber": 953,
                        "startColumnNumber": 21,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 765,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2327,
                        "startLineNumber": 953,
                        "startColumnNumber": 4,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "while (++i < 11) {\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 770,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 34,
                    "startLineNumber": 981,
                    "startColumnNumber": 6,
                    "endLineNumber": 981,
                    "endColumnNumber": 40
                },
                "nodeContext": "double corr10=o[1][0] - m[1][0];\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 15,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 981,
                "startColumnNumber": 34,
                "endLineNumber": 981,
                "endColumnNumber": 35
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
                    "nodePosition": {
                        "charLength": 4,
                        "startLineNumber": 981,
                        "startColumnNumber": 32,
                        "endLineNumber": 981,
                        "endColumnNumber": 36
                    },
                    "nodeContext": "m[1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 981,
                        "startColumnNumber": 32,
                        "endLineNumber": 981,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "m[1][0]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 17,
                        "startLineNumber": 981,
                        "startColumnNumber": 22,
                        "endLineNumber": 981,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "o[1][0] - m[1][0]",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 26,
                        "startLineNumber": 981,
                        "startColumnNumber": 13,
                        "endLineNumber": 981,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "corr10=o[1][0] - m[1][0]",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 13,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 34,
                        "startLineNumber": 981,
                        "startColumnNumber": 6,
                        "endLineNumber": 981,
                        "endColumnNumber": 40
                    },
                    "nodeContext": "double corr10=o[1][0] - m[1][0];\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 15,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2310,
                        "startLineNumber": 953,
                        "startColumnNumber": 21,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 765,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2327,
                        "startLineNumber": 953,
                        "startColumnNumber": 4,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "while (++i < 11) {\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 770,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 34,
                    "startLineNumber": 981,
                    "startColumnNumber": 6,
                    "endLineNumber": 981,
                    "endColumnNumber": 40
                },
                "nodeContext": "double corr10=o[1][0] - m[1][0];\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 15,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 982,
                "startColumnNumber": 24,
                "endLineNumber": 982,
                "endColumnNumber": 25
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
                    "nodePosition": {
                        "charLength": 4,
                        "startLineNumber": 982,
                        "startColumnNumber": 22,
                        "endLineNumber": 982,
                        "endColumnNumber": 26
                    },
                    "nodeContext": "o[1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 982,
                        "startColumnNumber": 22,
                        "endLineNumber": 982,
                        "endColumnNumber": 29
                    },
                    "nodeContext": "o[1][1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 17,
                        "startLineNumber": 982,
                        "startColumnNumber": 22,
                        "endLineNumber": 982,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "o[1][1] - m[1][1]",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 26,
                        "startLineNumber": 982,
                        "startColumnNumber": 13,
                        "endLineNumber": 982,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "corr11=o[1][1] - m[1][1]",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 13,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 34,
                        "startLineNumber": 982,
                        "startColumnNumber": 6,
                        "endLineNumber": 982,
                        "endColumnNumber": 40
                    },
                    "nodeContext": "double corr11=o[1][1] - m[1][1];\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 15,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2310,
                        "startLineNumber": 953,
                        "startColumnNumber": 21,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 765,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2327,
                        "startLineNumber": 953,
                        "startColumnNumber": 4,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "while (++i < 11) {\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 770,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 34,
                    "startLineNumber": 982,
                    "startColumnNumber": 6,
                    "endLineNumber": 982,
                    "endColumnNumber": 40
                },
                "nodeContext": "double corr11=o[1][1] - m[1][1];\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 15,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 982,
                "startColumnNumber": 27,
                "endLineNumber": 982,
                "endColumnNumber": 28
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 982,
                        "startColumnNumber": 22,
                        "endLineNumber": 982,
                        "endColumnNumber": 29
                    },
                    "nodeContext": "o[1][1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 17,
                        "startLineNumber": 982,
                        "startColumnNumber": 22,
                        "endLineNumber": 982,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "o[1][1] - m[1][1]",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 26,
                        "startLineNumber": 982,
                        "startColumnNumber": 13,
                        "endLineNumber": 982,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "corr11=o[1][1] - m[1][1]",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 13,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 34,
                        "startLineNumber": 982,
                        "startColumnNumber": 6,
                        "endLineNumber": 982,
                        "endColumnNumber": 40
                    },
                    "nodeContext": "double corr11=o[1][1] - m[1][1];\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 15,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2310,
                        "startLineNumber": 953,
                        "startColumnNumber": 21,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 765,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2327,
                        "startLineNumber": 953,
                        "startColumnNumber": 4,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "while (++i < 11) {\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 770,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 34,
                    "startLineNumber": 982,
                    "startColumnNumber": 6,
                    "endLineNumber": 982,
                    "endColumnNumber": 40
                },
                "nodeContext": "double corr11=o[1][1] - m[1][1];\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 15,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 982,
                "startColumnNumber": 34,
                "endLineNumber": 982,
                "endColumnNumber": 35
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
                    "nodePosition": {
                        "charLength": 4,
                        "startLineNumber": 982,
                        "startColumnNumber": 32,
                        "endLineNumber": 982,
                        "endColumnNumber": 36
                    },
                    "nodeContext": "m[1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 982,
                        "startColumnNumber": 32,
                        "endLineNumber": 982,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "m[1][1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 17,
                        "startLineNumber": 982,
                        "startColumnNumber": 22,
                        "endLineNumber": 982,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "o[1][1] - m[1][1]",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 26,
                        "startLineNumber": 982,
                        "startColumnNumber": 13,
                        "endLineNumber": 982,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "corr11=o[1][1] - m[1][1]",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 13,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 34,
                        "startLineNumber": 982,
                        "startColumnNumber": 6,
                        "endLineNumber": 982,
                        "endColumnNumber": 40
                    },
                    "nodeContext": "double corr11=o[1][1] - m[1][1];\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 15,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2310,
                        "startLineNumber": 953,
                        "startColumnNumber": 21,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 765,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2327,
                        "startLineNumber": 953,
                        "startColumnNumber": 4,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "while (++i < 11) {\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 770,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 34,
                    "startLineNumber": 982,
                    "startColumnNumber": 6,
                    "endLineNumber": 982,
                    "endColumnNumber": 40
                },
                "nodeContext": "double corr11=o[1][1] - m[1][1];\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 15,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 982,
                "startColumnNumber": 37,
                "endLineNumber": 982,
                "endColumnNumber": 38
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 982,
                        "startColumnNumber": 32,
                        "endLineNumber": 982,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "m[1][1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 17,
                        "startLineNumber": 982,
                        "startColumnNumber": 22,
                        "endLineNumber": 982,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "o[1][1] - m[1][1]",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 26,
                        "startLineNumber": 982,
                        "startColumnNumber": 13,
                        "endLineNumber": 982,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "corr11=o[1][1] - m[1][1]",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 13,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 34,
                        "startLineNumber": 982,
                        "startColumnNumber": 6,
                        "endLineNumber": 982,
                        "endColumnNumber": 40
                    },
                    "nodeContext": "double corr11=o[1][1] - m[1][1];\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 15,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2310,
                        "startLineNumber": 953,
                        "startColumnNumber": 21,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 765,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2327,
                        "startLineNumber": 953,
                        "startColumnNumber": 4,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "while (++i < 11) {\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 770,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 34,
                    "startLineNumber": 982,
                    "startColumnNumber": 6,
                    "endLineNumber": 982,
                    "endColumnNumber": 40
                },
                "nodeContext": "double corr11=o[1][1] - m[1][1];\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 15,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 983,
                "startColumnNumber": 24,
                "endLineNumber": 983,
                "endColumnNumber": 25
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
                    "nodePosition": {
                        "charLength": 4,
                        "startLineNumber": 983,
                        "startColumnNumber": 22,
                        "endLineNumber": 983,
                        "endColumnNumber": 26
                    },
                    "nodeContext": "o[1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 983,
                        "startColumnNumber": 22,
                        "endLineNumber": 983,
                        "endColumnNumber": 29
                    },
                    "nodeContext": "o[1][2]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 17,
                        "startLineNumber": 983,
                        "startColumnNumber": 22,
                        "endLineNumber": 983,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "o[1][2] - m[1][2]",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 26,
                        "startLineNumber": 983,
                        "startColumnNumber": 13,
                        "endLineNumber": 983,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "corr12=o[1][2] - m[1][2]",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 13,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 34,
                        "startLineNumber": 983,
                        "startColumnNumber": 6,
                        "endLineNumber": 983,
                        "endColumnNumber": 40
                    },
                    "nodeContext": "double corr12=o[1][2] - m[1][2];\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 15,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2310,
                        "startLineNumber": 953,
                        "startColumnNumber": 21,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 765,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2327,
                        "startLineNumber": 953,
                        "startColumnNumber": 4,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "while (++i < 11) {\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 770,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 34,
                    "startLineNumber": 983,
                    "startColumnNumber": 6,
                    "endLineNumber": 983,
                    "endColumnNumber": 40
                },
                "nodeContext": "double corr12=o[1][2] - m[1][2];\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 15,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 983,
                "startColumnNumber": 34,
                "endLineNumber": 983,
                "endColumnNumber": 35
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
                    "nodePosition": {
                        "charLength": 4,
                        "startLineNumber": 983,
                        "startColumnNumber": 32,
                        "endLineNumber": 983,
                        "endColumnNumber": 36
                    },
                    "nodeContext": "m[1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 983,
                        "startColumnNumber": 32,
                        "endLineNumber": 983,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "m[1][2]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 17,
                        "startLineNumber": 983,
                        "startColumnNumber": 22,
                        "endLineNumber": 983,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "o[1][2] - m[1][2]",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 26,
                        "startLineNumber": 983,
                        "startColumnNumber": 13,
                        "endLineNumber": 983,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "corr12=o[1][2] - m[1][2]",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 13,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 34,
                        "startLineNumber": 983,
                        "startColumnNumber": 6,
                        "endLineNumber": 983,
                        "endColumnNumber": 40
                    },
                    "nodeContext": "double corr12=o[1][2] - m[1][2];\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 15,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2310,
                        "startLineNumber": 953,
                        "startColumnNumber": 21,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 765,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2327,
                        "startLineNumber": 953,
                        "startColumnNumber": 4,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "while (++i < 11) {\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 770,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 34,
                    "startLineNumber": 983,
                    "startColumnNumber": 6,
                    "endLineNumber": 983,
                    "endColumnNumber": 40
                },
                "nodeContext": "double corr12=o[1][2] - m[1][2];\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 15,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 985,
                "startColumnNumber": 27,
                "endLineNumber": 985,
                "endColumnNumber": 28
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 985,
                        "startColumnNumber": 22,
                        "endLineNumber": 985,
                        "endColumnNumber": 29
                    },
                    "nodeContext": "o[2][1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 17,
                        "startLineNumber": 985,
                        "startColumnNumber": 22,
                        "endLineNumber": 985,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "o[2][1] - m[2][1]",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 26,
                        "startLineNumber": 985,
                        "startColumnNumber": 13,
                        "endLineNumber": 985,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "corr21=o[2][1] - m[2][1]",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 13,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 34,
                        "startLineNumber": 985,
                        "startColumnNumber": 6,
                        "endLineNumber": 985,
                        "endColumnNumber": 40
                    },
                    "nodeContext": "double corr21=o[2][1] - m[2][1];\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 15,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2310,
                        "startLineNumber": 953,
                        "startColumnNumber": 21,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 765,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2327,
                        "startLineNumber": 953,
                        "startColumnNumber": 4,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "while (++i < 11) {\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 770,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 34,
                    "startLineNumber": 985,
                    "startColumnNumber": 6,
                    "endLineNumber": 985,
                    "endColumnNumber": 40
                },
                "nodeContext": "double corr21=o[2][1] - m[2][1];\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 15,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 985,
                "startColumnNumber": 37,
                "endLineNumber": 985,
                "endColumnNumber": 38
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 985,
                        "startColumnNumber": 32,
                        "endLineNumber": 985,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "m[2][1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 17,
                        "startLineNumber": 985,
                        "startColumnNumber": 22,
                        "endLineNumber": 985,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "o[2][1] - m[2][1]",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 26,
                        "startLineNumber": 985,
                        "startColumnNumber": 13,
                        "endLineNumber": 985,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "corr21=o[2][1] - m[2][1]",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 13,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 34,
                        "startLineNumber": 985,
                        "startColumnNumber": 6,
                        "endLineNumber": 985,
                        "endColumnNumber": 40
                    },
                    "nodeContext": "double corr21=o[2][1] - m[2][1];\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 15,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2310,
                        "startLineNumber": 953,
                        "startColumnNumber": 21,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 765,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2327,
                        "startLineNumber": 953,
                        "startColumnNumber": 4,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "while (++i < 11) {\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 770,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 34,
                    "startLineNumber": 985,
                    "startColumnNumber": 6,
                    "endLineNumber": 985,
                    "endColumnNumber": 40
                },
                "nodeContext": "double corr21=o[2][1] - m[2][1];\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 15,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 999,
                "startColumnNumber": 17,
                "endLineNumber": 999,
                "endColumnNumber": 18
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 999,
                        "startColumnNumber": 12,
                        "endLineNumber": 999,
                        "endColumnNumber": 19
                    },
                    "nodeContext": "o[0][1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 13,
                        "startLineNumber": 999,
                        "startColumnNumber": 6,
                        "endLineNumber": 999,
                        "endColumnNumber": 19
                    },
                    "nodeContext": "x01=o[0][1]",
                    "nodeType": "Assignment",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 14,
                        "startLineNumber": 999,
                        "startColumnNumber": 6,
                        "endLineNumber": 999,
                        "endColumnNumber": 20
                    },
                    "nodeContext": "x01=o[0][1];\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2310,
                        "startLineNumber": 953,
                        "startColumnNumber": 21,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 765,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2327,
                        "startLineNumber": 953,
                        "startColumnNumber": 4,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "while (++i < 11) {\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 770,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 14,
                    "startLineNumber": 999,
                    "startColumnNumber": 6,
                    "endLineNumber": 999,
                    "endColumnNumber": 20
                },
                "nodeContext": "x01=o[0][1];\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 1001,
                "startColumnNumber": 14,
                "endLineNumber": 1001,
                "endColumnNumber": 15
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
                    "nodePosition": {
                        "charLength": 4,
                        "startLineNumber": 1001,
                        "startColumnNumber": 12,
                        "endLineNumber": 1001,
                        "endColumnNumber": 16
                    },
                    "nodeContext": "o[1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 1001,
                        "startColumnNumber": 12,
                        "endLineNumber": 1001,
                        "endColumnNumber": 19
                    },
                    "nodeContext": "o[1][0]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 13,
                        "startLineNumber": 1001,
                        "startColumnNumber": 6,
                        "endLineNumber": 1001,
                        "endColumnNumber": 19
                    },
                    "nodeContext": "x10=o[1][0]",
                    "nodeType": "Assignment",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 14,
                        "startLineNumber": 1001,
                        "startColumnNumber": 6,
                        "endLineNumber": 1001,
                        "endColumnNumber": 20
                    },
                    "nodeContext": "x10=o[1][0];\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2310,
                        "startLineNumber": 953,
                        "startColumnNumber": 21,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 765,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2327,
                        "startLineNumber": 953,
                        "startColumnNumber": 4,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "while (++i < 11) {\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 770,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 14,
                    "startLineNumber": 1001,
                    "startColumnNumber": 6,
                    "endLineNumber": 1001,
                    "endColumnNumber": 20
                },
                "nodeContext": "x10=o[1][0];\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 1002,
                "startColumnNumber": 14,
                "endLineNumber": 1002,
                "endColumnNumber": 15
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
                    "nodePosition": {
                        "charLength": 4,
                        "startLineNumber": 1002,
                        "startColumnNumber": 12,
                        "endLineNumber": 1002,
                        "endColumnNumber": 16
                    },
                    "nodeContext": "o[1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 1002,
                        "startColumnNumber": 12,
                        "endLineNumber": 1002,
                        "endColumnNumber": 19
                    },
                    "nodeContext": "o[1][1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 13,
                        "startLineNumber": 1002,
                        "startColumnNumber": 6,
                        "endLineNumber": 1002,
                        "endColumnNumber": 19
                    },
                    "nodeContext": "x11=o[1][1]",
                    "nodeType": "Assignment",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 14,
                        "startLineNumber": 1002,
                        "startColumnNumber": 6,
                        "endLineNumber": 1002,
                        "endColumnNumber": 20
                    },
                    "nodeContext": "x11=o[1][1];\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2310,
                        "startLineNumber": 953,
                        "startColumnNumber": 21,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 765,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2327,
                        "startLineNumber": 953,
                        "startColumnNumber": 4,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "while (++i < 11) {\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 770,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 14,
                    "startLineNumber": 1002,
                    "startColumnNumber": 6,
                    "endLineNumber": 1002,
                    "endColumnNumber": 20
                },
                "nodeContext": "x11=o[1][1];\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 1002,
                "startColumnNumber": 17,
                "endLineNumber": 1002,
                "endColumnNumber": 18
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 1002,
                        "startColumnNumber": 12,
                        "endLineNumber": 1002,
                        "endColumnNumber": 19
                    },
                    "nodeContext": "o[1][1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 13,
                        "startLineNumber": 1002,
                        "startColumnNumber": 6,
                        "endLineNumber": 1002,
                        "endColumnNumber": 19
                    },
                    "nodeContext": "x11=o[1][1]",
                    "nodeType": "Assignment",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 14,
                        "startLineNumber": 1002,
                        "startColumnNumber": 6,
                        "endLineNumber": 1002,
                        "endColumnNumber": 20
                    },
                    "nodeContext": "x11=o[1][1];\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2310,
                        "startLineNumber": 953,
                        "startColumnNumber": 21,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 765,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2327,
                        "startLineNumber": 953,
                        "startColumnNumber": 4,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "while (++i < 11) {\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 770,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 14,
                    "startLineNumber": 1002,
                    "startColumnNumber": 6,
                    "endLineNumber": 1002,
                    "endColumnNumber": 20
                },
                "nodeContext": "x11=o[1][1];\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 1003,
                "startColumnNumber": 14,
                "endLineNumber": 1003,
                "endColumnNumber": 15
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
                    "nodePosition": {
                        "charLength": 4,
                        "startLineNumber": 1003,
                        "startColumnNumber": 12,
                        "endLineNumber": 1003,
                        "endColumnNumber": 16
                    },
                    "nodeContext": "o[1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 1003,
                        "startColumnNumber": 12,
                        "endLineNumber": 1003,
                        "endColumnNumber": 19
                    },
                    "nodeContext": "o[1][2]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 13,
                        "startLineNumber": 1003,
                        "startColumnNumber": 6,
                        "endLineNumber": 1003,
                        "endColumnNumber": 19
                    },
                    "nodeContext": "x12=o[1][2]",
                    "nodeType": "Assignment",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 14,
                        "startLineNumber": 1003,
                        "startColumnNumber": 6,
                        "endLineNumber": 1003,
                        "endColumnNumber": 20
                    },
                    "nodeContext": "x12=o[1][2];\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2310,
                        "startLineNumber": 953,
                        "startColumnNumber": 21,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 765,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2327,
                        "startLineNumber": 953,
                        "startColumnNumber": 4,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "while (++i < 11) {\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 770,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 14,
                    "startLineNumber": 1003,
                    "startColumnNumber": 6,
                    "endLineNumber": 1003,
                    "endColumnNumber": 20
                },
                "nodeContext": "x12=o[1][2];\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 1005,
                "startColumnNumber": 17,
                "endLineNumber": 1005,
                "endColumnNumber": 18
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 1005,
                        "startColumnNumber": 12,
                        "endLineNumber": 1005,
                        "endColumnNumber": 19
                    },
                    "nodeContext": "o[2][1]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 13,
                        "startLineNumber": 1005,
                        "startColumnNumber": 6,
                        "endLineNumber": 1005,
                        "endColumnNumber": 19
                    },
                    "nodeContext": "x21=o[2][1]",
                    "nodeType": "Assignment",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 14,
                        "startLineNumber": 1005,
                        "startColumnNumber": 6,
                        "endLineNumber": 1005,
                        "endColumnNumber": 20
                    },
                    "nodeContext": "x21=o[2][1];\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2310,
                        "startLineNumber": 953,
                        "startColumnNumber": 21,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 765,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2327,
                        "startLineNumber": 953,
                        "startColumnNumber": 4,
                        "endLineNumber": 1009,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "while (++i < 11) {\n  double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n  double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n  double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n  double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n  double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n  double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n  double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n  double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n  double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n  o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n  o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n  o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n  o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n  o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n  o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n  o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n  o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n  o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n  double corr00=o[0][0] - m[0][0];\n  double corr01=o[0][1] - m[0][1];\n  double corr02=o[0][2] - m[0][2];\n  double corr10=o[1][0] - m[1][0];\n  double corr11=o[1][1] - m[1][1];\n  double corr12=o[1][2] - m[1][2];\n  double corr20=o[2][0] - m[2][0];\n  double corr21=o[2][1] - m[2][1];\n  double corr22=o[2][2] - m[2][2];\n  fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n  if (Math.abs(fn1 - fn) <= threshold)   return o;\n  x00=o[0][0];\n  x01=o[0][1];\n  x02=o[0][2];\n  x10=o[1][0];\n  x11=o[1][1];\n  x12=o[1][2];\n  x20=o[2][0];\n  x21=o[2][1];\n  x22=o[2][2];\n  fn=fn1;\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 770,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 14,
                    "startLineNumber": 1005,
                    "startColumnNumber": 6,
                    "endLineNumber": 1005,
                    "endColumnNumber": 20
                },
                "nodeContext": "x21=o[2][1];\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "1",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 1015,
                "startColumnNumber": 65,
                "endLineNumber": 1015,
                "endColumnNumber": 66
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 5,
                        "startLineNumber": 1015,
                        "startColumnNumber": 61,
                        "endLineNumber": 1015,
                        "endColumnNumber": 66
                    },
                    "nodeContext": "i - 1",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ArrayInitializer,expressions]",
                    "nodePosition": {
                        "charLength": 23,
                        "startLineNumber": 1015,
                        "startColumnNumber": 44,
                        "endLineNumber": 1015,
                        "endColumnNumber": 67
                    },
                    "nodeContext": "Integer.toString(i - 1)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ArrayCreation,initializer]",
                    "nodePosition": {
                        "charLength": 113,
                        "startLineNumber": 1014,
                        "startColumnNumber": 55,
                        "endLineNumber": 1016,
                        "endColumnNumber": 43
                    },
                    "nodeContext": "{Integer.toString(i - 1)}",
                    "nodeType": "ArrayInitializer",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
                    "nodePosition": {
                        "charLength": 126,
                        "startLineNumber": 1014,
                        "startColumnNumber": 42,
                        "endLineNumber": 1016,
                        "endColumnNumber": 43
                    },
                    "nodeContext": "new String[]{Integer.toString(i - 1)}",
                    "nodeType": "ArrayCreation",
                    "astNodeNumber": 12,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
                    "nodePosition": {
                        "charLength": 300,
                        "startLineNumber": 1012,
                        "startColumnNumber": 10,
                        "endLineNumber": 1016,
                        "endColumnNumber": 44
                    },
                    "nodeContext": "new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)})",
                    "nodeType": "ClassInstanceCreation",
                    "astNodeNumber": 18,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 307,
                        "startLineNumber": 1012,
                        "startColumnNumber": 4,
                        "endLineNumber": 1016,
                        "endColumnNumber": 45
                    },
                    "nodeContext": "throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n",
                    "nodeType": "ThrowStatement",
                    "astNodeNumber": 19,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3170,
                        "startLineNumber": 933,
                        "startColumnNumber": 39,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 928,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3792,
                        "startLineNumber": 922,
                        "startColumnNumber": 2,
                        "endLineNumber": 1017,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterativeorthogonality correction (convergence is reached when the difference between two steps of the Frobenius norm of the correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot beorthogonalized with the given threshold after 10 iterations\n */\nprivate double[][] orthogonalizeMatrix(double[][] m,double threshold) throws NotARotationMatrixException {\n  double x00=m[0][0];\n  double x01=m[0][1];\n  double x02=m[0][2];\n  double x10=m[1][0];\n  double x11=m[1][1];\n  double x12=m[1][2];\n  double x20=m[2][0];\n  double x21=m[2][1];\n  double x22=m[2][2];\n  double fn=0;\n  double fn1;\n  double[][] o=new double[3][];\n  o[0]=new double[3];\n  o[1]=new double[3];\n  o[2]=new double[3];\n  int i=0;\n  while (++i < 11) {\n    double mx00=m[0][0] * x00 + m[1][0] * x10 + m[2][0] * x20;\n    double mx10=m[0][1] * x00 + m[1][1] * x10 + m[2][1] * x20;\n    double mx20=m[0][2] * x00 + m[1][2] * x10 + m[2][2] * x20;\n    double mx01=m[0][0] * x01 + m[1][0] * x11 + m[2][0] * x21;\n    double mx11=m[0][1] * x01 + m[1][1] * x11 + m[2][1] * x21;\n    double mx21=m[0][2] * x01 + m[1][2] * x11 + m[2][2] * x21;\n    double mx02=m[0][0] * x02 + m[1][0] * x12 + m[2][0] * x22;\n    double mx12=m[0][1] * x02 + m[1][1] * x12 + m[2][1] * x22;\n    double mx22=m[0][2] * x02 + m[1][2] * x12 + m[2][2] * x22;\n    o[0][0]=x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m[0][0]);\n    o[0][1]=x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m[0][1]);\n    o[0][2]=x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m[0][2]);\n    o[1][0]=x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m[1][0]);\n    o[1][1]=x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m[1][1]);\n    o[1][2]=x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m[1][2]);\n    o[2][0]=x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m[2][0]);\n    o[2][1]=x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m[2][1]);\n    o[2][2]=x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m[2][2]);\n    double corr00=o[0][0] - m[0][0];\n    double corr01=o[0][1] - m[0][1];\n    double corr02=o[0][2] - m[0][2];\n    double corr10=o[1][0] - m[1][0];\n    double corr11=o[1][1] - m[1][1];\n    double corr12=o[1][2] - m[1][2];\n    double corr20=o[2][0] - m[2][0];\n    double corr21=o[2][1] - m[2][1];\n    double corr22=o[2][2] - m[2][2];\n    fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n    if (Math.abs(fn1 - fn) <= threshold)     return o;\n    x00=o[0][0];\n    x01=o[0][1];\n    x02=o[0][2];\n    x10=o[1][0];\n    x11=o[1][1];\n    x12=o[1][2];\n    x20=o[2][0];\n    x21=o[2][1];\n    x22=o[2][2];\n    fn=fn1;\n  }\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" + \" in {0} iterations\",new String[]{Integer.toString(i - 1)});\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 947,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ArrayInitializer,expressions]",
                "nodePosition": {
                    "charLength": 23,
                    "startLineNumber": 1015,
                    "startColumnNumber": 44,
                    "endLineNumber": 1015,
                    "endColumnNumber": 67
                },
                "nodeContext": "Integer.toString(i - 1)",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 6,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "int"
        }
    ],
    "positionList": [
        {
            "charLength": 1,
            "startLineNumber": 935,
            "startColumnNumber": 22,
            "endLineNumber": 935,
            "endColumnNumber": 23
        },
        {
            "charLength": 1,
            "startLineNumber": 937,
            "startColumnNumber": 19,
            "endLineNumber": 937,
            "endColumnNumber": 20
        },
        {
            "charLength": 1,
            "startLineNumber": 938,
            "startColumnNumber": 19,
            "endLineNumber": 938,
            "endColumnNumber": 20
        },
        {
            "charLength": 1,
            "startLineNumber": 938,
            "startColumnNumber": 22,
            "endLineNumber": 938,
            "endColumnNumber": 23
        },
        {
            "charLength": 1,
            "startLineNumber": 939,
            "startColumnNumber": 19,
            "endLineNumber": 939,
            "endColumnNumber": 20
        },
        {
            "charLength": 1,
            "startLineNumber": 941,
            "startColumnNumber": 22,
            "endLineNumber": 941,
            "endColumnNumber": 23
        },
        {
            "charLength": 1,
            "startLineNumber": 948,
            "startColumnNumber": 6,
            "endLineNumber": 948,
            "endColumnNumber": 7
        },
        {
            "charLength": 1,
            "startLineNumber": 956,
            "startColumnNumber": 38,
            "endLineNumber": 956,
            "endColumnNumber": 39
        },
        {
            "charLength": 1,
            "startLineNumber": 957,
            "startColumnNumber": 25,
            "endLineNumber": 957,
            "endColumnNumber": 26
        },
        {
            "charLength": 1,
            "startLineNumber": 957,
            "startColumnNumber": 38,
            "endLineNumber": 957,
            "endColumnNumber": 39
        },
        {
            "charLength": 1,
            "startLineNumber": 957,
            "startColumnNumber": 41,
            "endLineNumber": 957,
            "endColumnNumber": 42
        },
        {
            "charLength": 1,
            "startLineNumber": 957,
            "startColumnNumber": 57,
            "endLineNumber": 957,
            "endColumnNumber": 58
        },
        {
            "charLength": 1,
            "startLineNumber": 958,
            "startColumnNumber": 38,
            "endLineNumber": 958,
            "endColumnNumber": 39
        },
        {
            "charLength": 1,
            "startLineNumber": 959,
            "startColumnNumber": 38,
            "endLineNumber": 959,
            "endColumnNumber": 39
        },
        {
            "charLength": 1,
            "startLineNumber": 960,
            "startColumnNumber": 25,
            "endLineNumber": 960,
            "endColumnNumber": 26
        },
        {
            "charLength": 1,
            "startLineNumber": 960,
            "startColumnNumber": 38,
            "endLineNumber": 960,
            "endColumnNumber": 39
        },
        {
            "charLength": 1,
            "startLineNumber": 960,
            "startColumnNumber": 41,
            "endLineNumber": 960,
            "endColumnNumber": 42
        },
        {
            "charLength": 1,
            "startLineNumber": 960,
            "startColumnNumber": 57,
            "endLineNumber": 960,
            "endColumnNumber": 58
        },
        {
            "charLength": 1,
            "startLineNumber": 961,
            "startColumnNumber": 38,
            "endLineNumber": 961,
            "endColumnNumber": 39
        },
        {
            "charLength": 1,
            "startLineNumber": 962,
            "startColumnNumber": 38,
            "endLineNumber": 962,
            "endColumnNumber": 39
        },
        {
            "charLength": 1,
            "startLineNumber": 963,
            "startColumnNumber": 25,
            "endLineNumber": 963,
            "endColumnNumber": 26
        },
        {
            "charLength": 1,
            "startLineNumber": 963,
            "startColumnNumber": 38,
            "endLineNumber": 963,
            "endColumnNumber": 39
        },
        {
            "charLength": 1,
            "startLineNumber": 963,
            "startColumnNumber": 41,
            "endLineNumber": 963,
            "endColumnNumber": 42
        },
        {
            "charLength": 1,
            "startLineNumber": 963,
            "startColumnNumber": 57,
            "endLineNumber": 963,
            "endColumnNumber": 58
        },
        {
            "charLength": 1,
            "startLineNumber": 964,
            "startColumnNumber": 38,
            "endLineNumber": 964,
            "endColumnNumber": 39
        },
        {
            "charLength": 1,
            "startLineNumber": 968,
            "startColumnNumber": 11,
            "endLineNumber": 968,
            "endColumnNumber": 12
        },
        {
            "charLength": 1,
            "startLineNumber": 968,
            "startColumnNumber": 73,
            "endLineNumber": 968,
            "endColumnNumber": 74
        },
        {
            "charLength": 1,
            "startLineNumber": 970,
            "startColumnNumber": 8,
            "endLineNumber": 970,
            "endColumnNumber": 9
        },
        {
            "charLength": 1,
            "startLineNumber": 970,
            "startColumnNumber": 70,
            "endLineNumber": 970,
            "endColumnNumber": 71
        },
        {
            "charLength": 1,
            "startLineNumber": 971,
            "startColumnNumber": 8,
            "endLineNumber": 971,
            "endColumnNumber": 9
        },
        {
            "charLength": 1,
            "startLineNumber": 971,
            "startColumnNumber": 11,
            "endLineNumber": 971,
            "endColumnNumber": 12
        },
        {
            "charLength": 1,
            "startLineNumber": 971,
            "startColumnNumber": 70,
            "endLineNumber": 971,
            "endColumnNumber": 71
        },
        {
            "charLength": 1,
            "startLineNumber": 971,
            "startColumnNumber": 73,
            "endLineNumber": 971,
            "endColumnNumber": 74
        },
        {
            "charLength": 1,
            "startLineNumber": 972,
            "startColumnNumber": 8,
            "endLineNumber": 972,
            "endColumnNumber": 9
        },
        {
            "charLength": 1,
            "startLineNumber": 972,
            "startColumnNumber": 70,
            "endLineNumber": 972,
            "endColumnNumber": 71
        },
        {
            "charLength": 1,
            "startLineNumber": 974,
            "startColumnNumber": 11,
            "endLineNumber": 974,
            "endColumnNumber": 12
        },
        {
            "charLength": 1,
            "startLineNumber": 974,
            "startColumnNumber": 73,
            "endLineNumber": 974,
            "endColumnNumber": 74
        },
        {
            "charLength": 1,
            "startLineNumber": 979,
            "startColumnNumber": 27,
            "endLineNumber": 979,
            "endColumnNumber": 28
        },
        {
            "charLength": 1,
            "startLineNumber": 979,
            "startColumnNumber": 37,
            "endLineNumber": 979,
            "endColumnNumber": 38
        },
        {
            "charLength": 1,
            "startLineNumber": 981,
            "startColumnNumber": 24,
            "endLineNumber": 981,
            "endColumnNumber": 25
        },
        {
            "charLength": 1,
            "startLineNumber": 981,
            "startColumnNumber": 34,
            "endLineNumber": 981,
            "endColumnNumber": 35
        },
        {
            "charLength": 1,
            "startLineNumber": 982,
            "startColumnNumber": 24,
            "endLineNumber": 982,
            "endColumnNumber": 25
        },
        {
            "charLength": 1,
            "startLineNumber": 982,
            "startColumnNumber": 27,
            "endLineNumber": 982,
            "endColumnNumber": 28
        },
        {
            "charLength": 1,
            "startLineNumber": 982,
            "startColumnNumber": 34,
            "endLineNumber": 982,
            "endColumnNumber": 35
        },
        {
            "charLength": 1,
            "startLineNumber": 982,
            "startColumnNumber": 37,
            "endLineNumber": 982,
            "endColumnNumber": 38
        },
        {
            "charLength": 1,
            "startLineNumber": 983,
            "startColumnNumber": 24,
            "endLineNumber": 983,
            "endColumnNumber": 25
        },
        {
            "charLength": 1,
            "startLineNumber": 983,
            "startColumnNumber": 34,
            "endLineNumber": 983,
            "endColumnNumber": 35
        },
        {
            "charLength": 1,
            "startLineNumber": 985,
            "startColumnNumber": 27,
            "endLineNumber": 985,
            "endColumnNumber": 28
        },
        {
            "charLength": 1,
            "startLineNumber": 985,
            "startColumnNumber": 37,
            "endLineNumber": 985,
            "endColumnNumber": 38
        },
        {
            "charLength": 1,
            "startLineNumber": 999,
            "startColumnNumber": 17,
            "endLineNumber": 999,
            "endColumnNumber": 18
        },
        {
            "charLength": 1,
            "startLineNumber": 1001,
            "startColumnNumber": 14,
            "endLineNumber": 1001,
            "endColumnNumber": 15
        },
        {
            "charLength": 1,
            "startLineNumber": 1002,
            "startColumnNumber": 14,
            "endLineNumber": 1002,
            "endColumnNumber": 15
        },
        {
            "charLength": 1,
            "startLineNumber": 1002,
            "startColumnNumber": 17,
            "endLineNumber": 1002,
            "endColumnNumber": 18
        },
        {
            "charLength": 1,
            "startLineNumber": 1003,
            "startColumnNumber": 14,
            "endLineNumber": 1003,
            "endColumnNumber": 15
        },
        {
            "charLength": 1,
            "startLineNumber": 1005,
            "startColumnNumber": 17,
            "endLineNumber": 1005,
            "endColumnNumber": 18
        },
        {
            "charLength": 1,
            "startLineNumber": 1015,
            "startColumnNumber": 65,
            "endLineNumber": 1015,
            "endColumnNumber": 66
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 18,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 19,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 20,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 21,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 22,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 23,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 24,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 25,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 26,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 27,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 28,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 29,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 30,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 31,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 32,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 33,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 34,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 35,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 36,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 37,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 38,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 39,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 40,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 41,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 42,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 43,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 44,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 45,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 46,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 47,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 48,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 49,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 50,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 51,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 52,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 53,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 54,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 55,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 14,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 15,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 16,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 18,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 19,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 20,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 21,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 22,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 23,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 24,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 25,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 26,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 27,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 28,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 29,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 30,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 31,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 32,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 33,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 34,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 35,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 36,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 37,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 38,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 39,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 40,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 41,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 42,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 43,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 44,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 45,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 46,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 47,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 48,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 49,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 50,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 51,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 52,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 53,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 54,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 55,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 1
        },
        {
            "firstKey": 2,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 14,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 15,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 16,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 18,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 19,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 20,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 21,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 22,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 23,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 24,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 25,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 26,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 27,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 28,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 29,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 30,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 31,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 32,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 33,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 34,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 35,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 36,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 37,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 38,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 39,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 40,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 41,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 42,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 43,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 44,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 45,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 46,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 47,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 48,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 49,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 50,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 51,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 52,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 53,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 54,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 55,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 0
        },
        {
            "firstKey": 3,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 18,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 19,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 20,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 21,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 22,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 23,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 24,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 25,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 26,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 27,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 28,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 29,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 30,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 31,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 32,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 33,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 34,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 35,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 36,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 37,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 38,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 39,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 40,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 41,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 42,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 43,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 44,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 45,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 46,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 47,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 48,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 49,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 50,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 51,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 52,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 53,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 54,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 55,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 14,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 15,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 16,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 18,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 19,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 20,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 21,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 22,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 23,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 24,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 25,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 26,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 27,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 28,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 29,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 30,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 31,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 32,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 33,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 34,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 35,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 36,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 37,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 38,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 39,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 40,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 41,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 42,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 43,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 44,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 45,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 46,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 47,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 48,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 49,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 50,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 51,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 52,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 53,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 54,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 55,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 18,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 19,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 20,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 21,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 22,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 23,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 24,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 25,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 26,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 27,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 28,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 29,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 30,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 31,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 32,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 33,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 34,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 35,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 36,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 37,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 38,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 39,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 40,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 41,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 42,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 43,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 44,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 45,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 46,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 47,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 48,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 49,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 50,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 51,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 52,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 53,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 54,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 55,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 18,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 19,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 20,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 21,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 22,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 23,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 24,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 25,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 26,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 27,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 28,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 29,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 30,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 31,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 32,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 33,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 34,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 35,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 36,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 37,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 38,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 39,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 40,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 41,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 42,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 43,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 44,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 45,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 46,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 47,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 48,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 49,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 50,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 51,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 52,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 53,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 54,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 55,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 0,
            "layout": 9
        },
        {
            "firstKey": 7,
            "secondKey": 1,
            "layout": 9
        },
        {
            "firstKey": 7,
            "secondKey": 2,
            "layout": 9
        },
        {
            "firstKey": 7,
            "secondKey": 3,
            "layout": 9
        },
        {
            "firstKey": 7,
            "secondKey": 4,
            "layout": 9
        },
        {
            "firstKey": 7,
            "secondKey": 5,
            "layout": 9
        },
        {
            "firstKey": 7,
            "secondKey": 6,
            "layout": 9
        },
        {
            "firstKey": 7,
            "secondKey": 8,
            "layout": 7
        },
        {
            "firstKey": 7,
            "secondKey": 9,
            "layout": 7
        },
        {
            "firstKey": 7,
            "secondKey": 10,
            "layout": 7
        },
        {
            "firstKey": 7,
            "secondKey": 11,
            "layout": 7
        },
        {
            "firstKey": 7,
            "secondKey": 12,
            "layout": 7
        },
        {
            "firstKey": 7,
            "secondKey": 13,
            "layout": 7
        },
        {
            "firstKey": 7,
            "secondKey": 14,
            "layout": 7
        },
        {
            "firstKey": 7,
            "secondKey": 15,
            "layout": 7
        },
        {
            "firstKey": 7,
            "secondKey": 16,
            "layout": 7
        },
        {
            "firstKey": 7,
            "secondKey": 17,
            "layout": 7
        },
        {
            "firstKey": 7,
            "secondKey": 18,
            "layout": 7
        },
        {
            "firstKey": 7,
            "secondKey": 19,
            "layout": 7
        },
        {
            "firstKey": 7,
            "secondKey": 20,
            "layout": 7
        },
        {
            "firstKey": 7,
            "secondKey": 21,
            "layout": 7
        },
        {
            "firstKey": 7,
            "secondKey": 22,
            "layout": 7
        },
        {
            "firstKey": 7,
            "secondKey": 23,
            "layout": 7
        },
        {
            "firstKey": 7,
            "secondKey": 24,
            "layout": 7
        },
        {
            "firstKey": 7,
            "secondKey": 25,
            "layout": 7
        },
        {
            "firstKey": 7,
            "secondKey": 26,
            "layout": 7
        },
        {
            "firstKey": 7,
            "secondKey": 27,
            "layout": 7
        },
        {
            "firstKey": 7,
            "secondKey": 28,
            "layout": 7
        },
        {
            "firstKey": 7,
            "secondKey": 29,
            "layout": 7
        },
        {
            "firstKey": 7,
            "secondKey": 30,
            "layout": 7
        },
        {
            "firstKey": 7,
            "secondKey": 31,
            "layout": 7
        },
        {
            "firstKey": 7,
            "secondKey": 32,
            "layout": 7
        },
        {
            "firstKey": 7,
            "secondKey": 33,
            "layout": 7
        },
        {
            "firstKey": 7,
            "secondKey": 34,
            "layout": 7
        },
        {
            "firstKey": 7,
            "secondKey": 35,
            "layout": 7
        },
        {
            "firstKey": 7,
            "secondKey": 36,
            "layout": 7
        },
        {
            "firstKey": 7,
            "secondKey": 37,
            "layout": 7
        },
        {
            "firstKey": 7,
            "secondKey": 38,
            "layout": 7
        },
        {
            "firstKey": 7,
            "secondKey": 39,
            "layout": 7
        },
        {
            "firstKey": 7,
            "secondKey": 40,
            "layout": 7
        },
        {
            "firstKey": 7,
            "secondKey": 41,
            "layout": 7
        },
        {
            "firstKey": 7,
            "secondKey": 42,
            "layout": 7
        },
        {
            "firstKey": 7,
            "secondKey": 43,
            "layout": 7
        },
        {
            "firstKey": 7,
            "secondKey": 44,
            "layout": 7
        },
        {
            "firstKey": 7,
            "secondKey": 45,
            "layout": 7
        },
        {
            "firstKey": 7,
            "secondKey": 46,
            "layout": 7
        },
        {
            "firstKey": 7,
            "secondKey": 47,
            "layout": 7
        },
        {
            "firstKey": 7,
            "secondKey": 48,
            "layout": 7
        },
        {
            "firstKey": 7,
            "secondKey": 49,
            "layout": 7
        },
        {
            "firstKey": 7,
            "secondKey": 50,
            "layout": 7
        },
        {
            "firstKey": 7,
            "secondKey": 51,
            "layout": 7
        },
        {
            "firstKey": 7,
            "secondKey": 52,
            "layout": 7
        },
        {
            "firstKey": 7,
            "secondKey": 53,
            "layout": 7
        },
        {
            "firstKey": 7,
            "secondKey": 54,
            "layout": 7
        },
        {
            "firstKey": 7,
            "secondKey": 55,
            "layout": 9
        },
        {
            "firstKey": 8,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 8,
            "secondKey": 1,
            "layout": 8
        },
        {
            "firstKey": 8,
            "secondKey": 2,
            "layout": 8
        },
        {
            "firstKey": 8,
            "secondKey": 3,
            "layout": 8
        },
        {
            "firstKey": 8,
            "secondKey": 4,
            "layout": 8
        },
        {
            "firstKey": 8,
            "secondKey": 5,
            "layout": 8
        },
        {
            "firstKey": 8,
            "secondKey": 6,
            "layout": 8
        },
        {
            "firstKey": 8,
            "secondKey": 7,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 8,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 8,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 12,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 13,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 14,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 15,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 16,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 17,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 18,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 19,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 20,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 21,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 22,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 23,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 24,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 25,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 26,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 27,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 28,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 29,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 30,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 31,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 32,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 33,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 34,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 35,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 36,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 37,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 38,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 39,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 40,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 41,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 42,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 43,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 44,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 45,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 46,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 47,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 48,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 49,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 50,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 51,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 52,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 53,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 54,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 55,
            "layout": 8
        },
        {
            "firstKey": 9,
            "secondKey": 0,
            "layout": 9
        },
        {
            "firstKey": 9,
            "secondKey": 1,
            "layout": 9
        },
        {
            "firstKey": 9,
            "secondKey": 2,
            "layout": 9
        },
        {
            "firstKey": 9,
            "secondKey": 3,
            "layout": 9
        },
        {
            "firstKey": 9,
            "secondKey": 4,
            "layout": 9
        },
        {
            "firstKey": 9,
            "secondKey": 5,
            "layout": 9
        },
        {
            "firstKey": 9,
            "secondKey": 6,
            "layout": 9
        },
        {
            "firstKey": 9,
            "secondKey": 7,
            "layout": 7
        },
        {
            "firstKey": 9,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 10,
            "layout": 1
        },
        {
            "firstKey": 9,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 12,
            "layout": 7
        },
        {
            "firstKey": 9,
            "secondKey": 13,
            "layout": 7
        },
        {
            "firstKey": 9,
            "secondKey": 14,
            "layout": 7
        },
        {
            "firstKey": 9,
            "secondKey": 15,
            "layout": 7
        },
        {
            "firstKey": 9,
            "secondKey": 16,
            "layout": 7
        },
        {
            "firstKey": 9,
            "secondKey": 17,
            "layout": 7
        },
        {
            "firstKey": 9,
            "secondKey": 18,
            "layout": 7
        },
        {
            "firstKey": 9,
            "secondKey": 19,
            "layout": 7
        },
        {
            "firstKey": 9,
            "secondKey": 20,
            "layout": 7
        },
        {
            "firstKey": 9,
            "secondKey": 21,
            "layout": 7
        },
        {
            "firstKey": 9,
            "secondKey": 22,
            "layout": 7
        },
        {
            "firstKey": 9,
            "secondKey": 23,
            "layout": 7
        },
        {
            "firstKey": 9,
            "secondKey": 24,
            "layout": 7
        },
        {
            "firstKey": 9,
            "secondKey": 25,
            "layout": 7
        },
        {
            "firstKey": 9,
            "secondKey": 26,
            "layout": 7
        },
        {
            "firstKey": 9,
            "secondKey": 27,
            "layout": 7
        },
        {
            "firstKey": 9,
            "secondKey": 28,
            "layout": 7
        },
        {
            "firstKey": 9,
            "secondKey": 29,
            "layout": 7
        },
        {
            "firstKey": 9,
            "secondKey": 30,
            "layout": 7
        },
        {
            "firstKey": 9,
            "secondKey": 31,
            "layout": 7
        },
        {
            "firstKey": 9,
            "secondKey": 32,
            "layout": 7
        },
        {
            "firstKey": 9,
            "secondKey": 33,
            "layout": 7
        },
        {
            "firstKey": 9,
            "secondKey": 34,
            "layout": 7
        },
        {
            "firstKey": 9,
            "secondKey": 35,
            "layout": 7
        },
        {
            "firstKey": 9,
            "secondKey": 36,
            "layout": 7
        },
        {
            "firstKey": 9,
            "secondKey": 37,
            "layout": 7
        },
        {
            "firstKey": 9,
            "secondKey": 38,
            "layout": 7
        },
        {
            "firstKey": 9,
            "secondKey": 39,
            "layout": 7
        },
        {
            "firstKey": 9,
            "secondKey": 40,
            "layout": 7
        },
        {
            "firstKey": 9,
            "secondKey": 41,
            "layout": 7
        },
        {
            "firstKey": 9,
            "secondKey": 42,
            "layout": 7
        },
        {
            "firstKey": 9,
            "secondKey": 43,
            "layout": 7
        },
        {
            "firstKey": 9,
            "secondKey": 44,
            "layout": 7
        },
        {
            "firstKey": 9,
            "secondKey": 45,
            "layout": 7
        },
        {
            "firstKey": 9,
            "secondKey": 46,
            "layout": 7
        },
        {
            "firstKey": 9,
            "secondKey": 47,
            "layout": 7
        },
        {
            "firstKey": 9,
            "secondKey": 48,
            "layout": 7
        },
        {
            "firstKey": 9,
            "secondKey": 49,
            "layout": 7
        },
        {
            "firstKey": 9,
            "secondKey": 50,
            "layout": 7
        },
        {
            "firstKey": 9,
            "secondKey": 51,
            "layout": 7
        },
        {
            "firstKey": 9,
            "secondKey": 52,
            "layout": 7
        },
        {
            "firstKey": 9,
            "secondKey": 53,
            "layout": 7
        },
        {
            "firstKey": 9,
            "secondKey": 54,
            "layout": 7
        },
        {
            "firstKey": 9,
            "secondKey": 55,
            "layout": 9
        },
        {
            "firstKey": 10,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 10,
            "secondKey": 1,
            "layout": 8
        },
        {
            "firstKey": 10,
            "secondKey": 2,
            "layout": 8
        },
        {
            "firstKey": 10,
            "secondKey": 3,
            "layout": 8
        },
        {
            "firstKey": 10,
            "secondKey": 4,
            "layout": 8
        },
        {
            "firstKey": 10,
            "secondKey": 5,
            "layout": 8
        },
        {
            "firstKey": 10,
            "secondKey": 6,
            "layout": 8
        },
        {
            "firstKey": 10,
            "secondKey": 7,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 9,
            "layout": 0
        },
        {
            "firstKey": 10,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 12,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 13,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 14,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 15,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 16,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 17,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 18,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 19,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 20,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 21,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 22,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 23,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 24,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 25,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 26,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 27,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 28,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 29,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 30,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 31,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 32,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 33,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 34,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 35,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 36,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 37,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 38,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 39,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 40,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 41,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 42,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 43,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 44,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 45,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 46,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 47,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 48,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 49,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 50,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 51,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 52,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 53,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 54,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 55,
            "layout": 8
        },
        {
            "firstKey": 11,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 11,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 11,
            "secondKey": 2,
            "layout": 7
        },
        {
            "firstKey": 11,
            "secondKey": 3,
            "layout": 7
        },
        {
            "firstKey": 11,
            "secondKey": 4,
            "layout": 7
        },
        {
            "firstKey": 11,
            "secondKey": 5,
            "layout": 7
        },
        {
            "firstKey": 11,
            "secondKey": 6,
            "layout": 7
        },
        {
            "firstKey": 11,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 12,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 13,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 14,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 15,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 16,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 17,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 18,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 19,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 20,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 21,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 22,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 23,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 24,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 25,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 26,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 27,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 28,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 29,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 30,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 31,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 32,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 33,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 34,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 35,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 36,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 37,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 38,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 39,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 40,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 41,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 42,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 43,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 44,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 45,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 46,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 47,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 48,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 49,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 50,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 51,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 52,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 53,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 54,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 55,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 0,
            "layout": 9
        },
        {
            "firstKey": 12,
            "secondKey": 1,
            "layout": 9
        },
        {
            "firstKey": 12,
            "secondKey": 2,
            "layout": 9
        },
        {
            "firstKey": 12,
            "secondKey": 3,
            "layout": 9
        },
        {
            "firstKey": 12,
            "secondKey": 4,
            "layout": 9
        },
        {
            "firstKey": 12,
            "secondKey": 5,
            "layout": 9
        },
        {
            "firstKey": 12,
            "secondKey": 6,
            "layout": 9
        },
        {
            "firstKey": 12,
            "secondKey": 7,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 8,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 9,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 10,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 11,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 13,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 14,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 15,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 16,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 17,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 18,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 19,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 20,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 21,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 22,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 23,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 24,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 25,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 26,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 27,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 28,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 29,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 30,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 31,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 32,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 33,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 34,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 35,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 36,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 37,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 38,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 39,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 40,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 41,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 42,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 43,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 44,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 45,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 46,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 47,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 48,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 49,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 50,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 51,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 52,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 53,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 54,
            "layout": 7
        },
        {
            "firstKey": 12,
            "secondKey": 55,
            "layout": 9
        },
        {
            "firstKey": 13,
            "secondKey": 0,
            "layout": 9
        },
        {
            "firstKey": 13,
            "secondKey": 1,
            "layout": 9
        },
        {
            "firstKey": 13,
            "secondKey": 2,
            "layout": 9
        },
        {
            "firstKey": 13,
            "secondKey": 3,
            "layout": 9
        },
        {
            "firstKey": 13,
            "secondKey": 4,
            "layout": 9
        },
        {
            "firstKey": 13,
            "secondKey": 5,
            "layout": 9
        },
        {
            "firstKey": 13,
            "secondKey": 6,
            "layout": 9
        },
        {
            "firstKey": 13,
            "secondKey": 7,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 8,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 9,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 10,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 11,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 12,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 14,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 15,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 16,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 17,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 18,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 19,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 20,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 21,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 22,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 23,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 24,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 25,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 26,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 27,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 28,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 29,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 30,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 31,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 32,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 33,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 34,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 35,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 36,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 37,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 38,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 39,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 40,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 41,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 42,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 43,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 44,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 45,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 46,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 47,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 48,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 49,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 50,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 51,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 52,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 53,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 54,
            "layout": 7
        },
        {
            "firstKey": 13,
            "secondKey": 55,
            "layout": 9
        },
        {
            "firstKey": 14,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 14,
            "secondKey": 1,
            "layout": 8
        },
        {
            "firstKey": 14,
            "secondKey": 2,
            "layout": 8
        },
        {
            "firstKey": 14,
            "secondKey": 3,
            "layout": 8
        },
        {
            "firstKey": 14,
            "secondKey": 4,
            "layout": 8
        },
        {
            "firstKey": 14,
            "secondKey": 5,
            "layout": 8
        },
        {
            "firstKey": 14,
            "secondKey": 6,
            "layout": 8
        },
        {
            "firstKey": 14,
            "secondKey": 7,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 8,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 9,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 10,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 11,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 12,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 13,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 14,
            "secondKey": 16,
            "layout": 2
        },
        {
            "firstKey": 14,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 14,
            "secondKey": 18,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 19,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 20,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 21,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 22,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 23,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 24,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 25,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 26,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 27,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 28,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 29,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 30,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 31,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 32,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 33,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 34,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 35,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 36,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 37,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 38,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 39,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 40,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 41,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 42,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 43,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 44,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 45,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 46,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 47,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 48,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 49,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 50,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 51,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 52,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 53,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 54,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 55,
            "layout": 8
        },
        {
            "firstKey": 15,
            "secondKey": 0,
            "layout": 9
        },
        {
            "firstKey": 15,
            "secondKey": 1,
            "layout": 9
        },
        {
            "firstKey": 15,
            "secondKey": 2,
            "layout": 9
        },
        {
            "firstKey": 15,
            "secondKey": 3,
            "layout": 9
        },
        {
            "firstKey": 15,
            "secondKey": 4,
            "layout": 9
        },
        {
            "firstKey": 15,
            "secondKey": 5,
            "layout": 9
        },
        {
            "firstKey": 15,
            "secondKey": 6,
            "layout": 9
        },
        {
            "firstKey": 15,
            "secondKey": 7,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 8,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 9,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 10,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 11,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 12,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 13,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 15,
            "secondKey": 16,
            "layout": 1
        },
        {
            "firstKey": 15,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 15,
            "secondKey": 18,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 19,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 20,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 21,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 22,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 23,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 24,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 25,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 26,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 27,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 28,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 29,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 30,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 31,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 32,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 33,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 34,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 35,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 36,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 37,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 38,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 39,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 40,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 41,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 42,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 43,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 44,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 45,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 46,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 47,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 48,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 49,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 50,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 51,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 52,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 53,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 54,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 55,
            "layout": 9
        },
        {
            "firstKey": 16,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 16,
            "secondKey": 1,
            "layout": 8
        },
        {
            "firstKey": 16,
            "secondKey": 2,
            "layout": 8
        },
        {
            "firstKey": 16,
            "secondKey": 3,
            "layout": 8
        },
        {
            "firstKey": 16,
            "secondKey": 4,
            "layout": 8
        },
        {
            "firstKey": 16,
            "secondKey": 5,
            "layout": 8
        },
        {
            "firstKey": 16,
            "secondKey": 6,
            "layout": 8
        },
        {
            "firstKey": 16,
            "secondKey": 7,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 8,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 9,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 10,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 11,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 12,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 13,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 16,
            "secondKey": 15,
            "layout": 0
        },
        {
            "firstKey": 16,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 16,
            "secondKey": 18,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 19,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 20,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 21,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 22,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 23,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 24,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 25,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 26,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 27,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 28,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 29,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 30,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 31,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 32,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 33,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 34,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 35,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 36,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 37,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 38,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 39,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 40,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 41,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 42,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 43,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 44,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 45,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 46,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 47,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 48,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 49,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 50,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 51,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 52,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 53,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 54,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 55,
            "layout": 8
        },
        {
            "firstKey": 17,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 17,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 17,
            "secondKey": 2,
            "layout": 7
        },
        {
            "firstKey": 17,
            "secondKey": 3,
            "layout": 7
        },
        {
            "firstKey": 17,
            "secondKey": 4,
            "layout": 7
        },
        {
            "firstKey": 17,
            "secondKey": 5,
            "layout": 7
        },
        {
            "firstKey": 17,
            "secondKey": 6,
            "layout": 7
        },
        {
            "firstKey": 17,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 8,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 9,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 10,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 11,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 12,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 13,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 17,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 17,
            "secondKey": 16,
            "layout": 2
        },
        {
            "firstKey": 17,
            "secondKey": 18,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 19,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 20,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 21,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 22,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 23,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 24,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 25,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 26,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 27,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 28,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 29,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 30,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 31,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 32,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 33,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 34,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 35,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 36,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 37,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 38,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 39,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 40,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 41,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 42,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 43,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 44,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 45,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 46,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 47,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 48,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 49,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 50,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 51,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 52,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 53,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 54,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 55,
            "layout": 7
        },
        {
            "firstKey": 18,
            "secondKey": 0,
            "layout": 9
        },
        {
            "firstKey": 18,
            "secondKey": 1,
            "layout": 9
        },
        {
            "firstKey": 18,
            "secondKey": 2,
            "layout": 9
        },
        {
            "firstKey": 18,
            "secondKey": 3,
            "layout": 9
        },
        {
            "firstKey": 18,
            "secondKey": 4,
            "layout": 9
        },
        {
            "firstKey": 18,
            "secondKey": 5,
            "layout": 9
        },
        {
            "firstKey": 18,
            "secondKey": 6,
            "layout": 9
        },
        {
            "firstKey": 18,
            "secondKey": 7,
            "layout": 7
        },
        {
            "firstKey": 18,
            "secondKey": 8,
            "layout": 7
        },
        {
            "firstKey": 18,
            "secondKey": 9,
            "layout": 7
        },
        {
            "firstKey": 18,
            "secondKey": 10,
            "layout": 7
        },
        {
            "firstKey": 18,
            "secondKey": 11,
            "layout": 7
        },
        {
            "firstKey": 18,
            "secondKey": 12,
            "layout": 7
        },
        {
            "firstKey": 18,
            "secondKey": 13,
            "layout": 7
        },
        {
            "firstKey": 18,
            "secondKey": 14,
            "layout": 7
        },
        {
            "firstKey": 18,
            "secondKey": 15,
            "layout": 7
        },
        {
            "firstKey": 18,
            "secondKey": 16,
            "layout": 7
        },
        {
            "firstKey": 18,
            "secondKey": 17,
            "layout": 7
        },
        {
            "firstKey": 18,
            "secondKey": 19,
            "layout": 7
        },
        {
            "firstKey": 18,
            "secondKey": 20,
            "layout": 7
        },
        {
            "firstKey": 18,
            "secondKey": 21,
            "layout": 7
        },
        {
            "firstKey": 18,
            "secondKey": 22,
            "layout": 7
        },
        {
            "firstKey": 18,
            "secondKey": 23,
            "layout": 7
        },
        {
            "firstKey": 18,
            "secondKey": 24,
            "layout": 7
        },
        {
            "firstKey": 18,
            "secondKey": 25,
            "layout": 7
        },
        {
            "firstKey": 18,
            "secondKey": 26,
            "layout": 7
        },
        {
            "firstKey": 18,
            "secondKey": 27,
            "layout": 7
        },
        {
            "firstKey": 18,
            "secondKey": 28,
            "layout": 7
        },
        {
            "firstKey": 18,
            "secondKey": 29,
            "layout": 7
        },
        {
            "firstKey": 18,
            "secondKey": 30,
            "layout": 7
        },
        {
            "firstKey": 18,
            "secondKey": 31,
            "layout": 7
        },
        {
            "firstKey": 18,
            "secondKey": 32,
            "layout": 7
        },
        {
            "firstKey": 18,
            "secondKey": 33,
            "layout": 7
        },
        {
            "firstKey": 18,
            "secondKey": 34,
            "layout": 7
        },
        {
            "firstKey": 18,
            "secondKey": 35,
            "layout": 7
        },
        {
            "firstKey": 18,
            "secondKey": 36,
            "layout": 7
        },
        {
            "firstKey": 18,
            "secondKey": 37,
            "layout": 7
        },
        {
            "firstKey": 18,
            "secondKey": 38,
            "layout": 7
        },
        {
            "firstKey": 18,
            "secondKey": 39,
            "layout": 7
        },
        {
            "firstKey": 18,
            "secondKey": 40,
            "layout": 7
        },
        {
            "firstKey": 18,
            "secondKey": 41,
            "layout": 7
        },
        {
            "firstKey": 18,
            "secondKey": 42,
            "layout": 7
        },
        {
            "firstKey": 18,
            "secondKey": 43,
            "layout": 7
        },
        {
            "firstKey": 18,
            "secondKey": 44,
            "layout": 7
        },
        {
            "firstKey": 18,
            "secondKey": 45,
            "layout": 7
        },
        {
            "firstKey": 18,
            "secondKey": 46,
            "layout": 7
        },
        {
            "firstKey": 18,
            "secondKey": 47,
            "layout": 7
        },
        {
            "firstKey": 18,
            "secondKey": 48,
            "layout": 7
        },
        {
            "firstKey": 18,
            "secondKey": 49,
            "layout": 7
        },
        {
            "firstKey": 18,
            "secondKey": 50,
            "layout": 7
        },
        {
            "firstKey": 18,
            "secondKey": 51,
            "layout": 7
        },
        {
            "firstKey": 18,
            "secondKey": 52,
            "layout": 7
        },
        {
            "firstKey": 18,
            "secondKey": 53,
            "layout": 7
        },
        {
            "firstKey": 18,
            "secondKey": 54,
            "layout": 7
        },
        {
            "firstKey": 18,
            "secondKey": 55,
            "layout": 9
        },
        {
            "firstKey": 19,
            "secondKey": 0,
            "layout": 9
        },
        {
            "firstKey": 19,
            "secondKey": 1,
            "layout": 9
        },
        {
            "firstKey": 19,
            "secondKey": 2,
            "layout": 9
        },
        {
            "firstKey": 19,
            "secondKey": 3,
            "layout": 9
        },
        {
            "firstKey": 19,
            "secondKey": 4,
            "layout": 9
        },
        {
            "firstKey": 19,
            "secondKey": 5,
            "layout": 9
        },
        {
            "firstKey": 19,
            "secondKey": 6,
            "layout": 9
        },
        {
            "firstKey": 19,
            "secondKey": 7,
            "layout": 7
        },
        {
            "firstKey": 19,
            "secondKey": 8,
            "layout": 7
        },
        {
            "firstKey": 19,
            "secondKey": 9,
            "layout": 7
        },
        {
            "firstKey": 19,
            "secondKey": 10,
            "layout": 7
        },
        {
            "firstKey": 19,
            "secondKey": 11,
            "layout": 7
        },
        {
            "firstKey": 19,
            "secondKey": 12,
            "layout": 7
        },
        {
            "firstKey": 19,
            "secondKey": 13,
            "layout": 7
        },
        {
            "firstKey": 19,
            "secondKey": 14,
            "layout": 7
        },
        {
            "firstKey": 19,
            "secondKey": 15,
            "layout": 7
        },
        {
            "firstKey": 19,
            "secondKey": 16,
            "layout": 7
        },
        {
            "firstKey": 19,
            "secondKey": 17,
            "layout": 7
        },
        {
            "firstKey": 19,
            "secondKey": 18,
            "layout": 7
        },
        {
            "firstKey": 19,
            "secondKey": 20,
            "layout": 7
        },
        {
            "firstKey": 19,
            "secondKey": 21,
            "layout": 7
        },
        {
            "firstKey": 19,
            "secondKey": 22,
            "layout": 7
        },
        {
            "firstKey": 19,
            "secondKey": 23,
            "layout": 7
        },
        {
            "firstKey": 19,
            "secondKey": 24,
            "layout": 7
        },
        {
            "firstKey": 19,
            "secondKey": 25,
            "layout": 7
        },
        {
            "firstKey": 19,
            "secondKey": 26,
            "layout": 7
        },
        {
            "firstKey": 19,
            "secondKey": 27,
            "layout": 7
        },
        {
            "firstKey": 19,
            "secondKey": 28,
            "layout": 7
        },
        {
            "firstKey": 19,
            "secondKey": 29,
            "layout": 7
        },
        {
            "firstKey": 19,
            "secondKey": 30,
            "layout": 7
        },
        {
            "firstKey": 19,
            "secondKey": 31,
            "layout": 7
        },
        {
            "firstKey": 19,
            "secondKey": 32,
            "layout": 7
        },
        {
            "firstKey": 19,
            "secondKey": 33,
            "layout": 7
        },
        {
            "firstKey": 19,
            "secondKey": 34,
            "layout": 7
        },
        {
            "firstKey": 19,
            "secondKey": 35,
            "layout": 7
        },
        {
            "firstKey": 19,
            "secondKey": 36,
            "layout": 7
        },
        {
            "firstKey": 19,
            "secondKey": 37,
            "layout": 7
        },
        {
            "firstKey": 19,
            "secondKey": 38,
            "layout": 7
        },
        {
            "firstKey": 19,
            "secondKey": 39,
            "layout": 7
        },
        {
            "firstKey": 19,
            "secondKey": 40,
            "layout": 7
        },
        {
            "firstKey": 19,
            "secondKey": 41,
            "layout": 7
        },
        {
            "firstKey": 19,
            "secondKey": 42,
            "layout": 7
        },
        {
            "firstKey": 19,
            "secondKey": 43,
            "layout": 7
        },
        {
            "firstKey": 19,
            "secondKey": 44,
            "layout": 7
        },
        {
            "firstKey": 19,
            "secondKey": 45,
            "layout": 7
        },
        {
            "firstKey": 19,
            "secondKey": 46,
            "layout": 7
        },
        {
            "firstKey": 19,
            "secondKey": 47,
            "layout": 7
        },
        {
            "firstKey": 19,
            "secondKey": 48,
            "layout": 7
        },
        {
            "firstKey": 19,
            "secondKey": 49,
            "layout": 7
        },
        {
            "firstKey": 19,
            "secondKey": 50,
            "layout": 7
        },
        {
            "firstKey": 19,
            "secondKey": 51,
            "layout": 7
        },
        {
            "firstKey": 19,
            "secondKey": 52,
            "layout": 7
        },
        {
            "firstKey": 19,
            "secondKey": 53,
            "layout": 7
        },
        {
            "firstKey": 19,
            "secondKey": 54,
            "layout": 7
        },
        {
            "firstKey": 19,
            "secondKey": 55,
            "layout": 9
        },
        {
            "firstKey": 20,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 20,
            "secondKey": 1,
            "layout": 8
        },
        {
            "firstKey": 20,
            "secondKey": 2,
            "layout": 8
        },
        {
            "firstKey": 20,
            "secondKey": 3,
            "layout": 8
        },
        {
            "firstKey": 20,
            "secondKey": 4,
            "layout": 8
        },
        {
            "firstKey": 20,
            "secondKey": 5,
            "layout": 8
        },
        {
            "firstKey": 20,
            "secondKey": 6,
            "layout": 8
        },
        {
            "firstKey": 20,
            "secondKey": 7,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 8,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 9,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 10,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 11,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 12,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 13,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 14,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 15,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 16,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 17,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 18,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 19,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 21,
            "layout": 2
        },
        {
            "firstKey": 20,
            "secondKey": 22,
            "layout": 2
        },
        {
            "firstKey": 20,
            "secondKey": 23,
            "layout": 3
        },
        {
            "firstKey": 20,
            "secondKey": 24,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 25,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 26,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 27,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 28,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 29,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 30,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 31,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 32,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 33,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 34,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 35,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 36,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 37,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 38,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 39,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 40,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 41,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 42,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 43,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 44,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 45,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 46,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 47,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 48,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 49,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 50,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 51,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 52,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 53,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 54,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 55,
            "layout": 8
        },
        {
            "firstKey": 21,
            "secondKey": 0,
            "layout": 9
        },
        {
            "firstKey": 21,
            "secondKey": 1,
            "layout": 9
        },
        {
            "firstKey": 21,
            "secondKey": 2,
            "layout": 9
        },
        {
            "firstKey": 21,
            "secondKey": 3,
            "layout": 9
        },
        {
            "firstKey": 21,
            "secondKey": 4,
            "layout": 9
        },
        {
            "firstKey": 21,
            "secondKey": 5,
            "layout": 9
        },
        {
            "firstKey": 21,
            "secondKey": 6,
            "layout": 9
        },
        {
            "firstKey": 21,
            "secondKey": 7,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 8,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 9,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 10,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 11,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 12,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 13,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 14,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 15,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 16,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 17,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 18,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 19,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 20,
            "layout": 3
        },
        {
            "firstKey": 21,
            "secondKey": 22,
            "layout": 1
        },
        {
            "firstKey": 21,
            "secondKey": 23,
            "layout": 4
        },
        {
            "firstKey": 21,
            "secondKey": 24,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 25,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 26,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 27,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 28,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 29,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 30,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 31,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 32,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 33,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 34,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 35,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 36,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 37,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 38,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 39,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 40,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 41,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 42,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 43,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 44,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 45,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 46,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 47,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 48,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 49,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 50,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 51,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 52,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 53,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 54,
            "layout": 7
        },
        {
            "firstKey": 21,
            "secondKey": 55,
            "layout": 9
        },
        {
            "firstKey": 22,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 22,
            "secondKey": 1,
            "layout": 8
        },
        {
            "firstKey": 22,
            "secondKey": 2,
            "layout": 8
        },
        {
            "firstKey": 22,
            "secondKey": 3,
            "layout": 8
        },
        {
            "firstKey": 22,
            "secondKey": 4,
            "layout": 8
        },
        {
            "firstKey": 22,
            "secondKey": 5,
            "layout": 8
        },
        {
            "firstKey": 22,
            "secondKey": 6,
            "layout": 8
        },
        {
            "firstKey": 22,
            "secondKey": 7,
            "layout": 6
        },
        {
            "firstKey": 22,
            "secondKey": 8,
            "layout": 6
        },
        {
            "firstKey": 22,
            "secondKey": 9,
            "layout": 6
        },
        {
            "firstKey": 22,
            "secondKey": 10,
            "layout": 6
        },
        {
            "firstKey": 22,
            "secondKey": 11,
            "layout": 6
        },
        {
            "firstKey": 22,
            "secondKey": 12,
            "layout": 6
        },
        {
            "firstKey": 22,
            "secondKey": 13,
            "layout": 6
        },
        {
            "firstKey": 22,
            "secondKey": 14,
            "layout": 6
        },
        {
            "firstKey": 22,
            "secondKey": 15,
            "layout": 6
        },
        {
            "firstKey": 22,
            "secondKey": 16,
            "layout": 6
        },
        {
            "firstKey": 22,
            "secondKey": 17,
            "layout": 6
        },
        {
            "firstKey": 22,
            "secondKey": 18,
            "layout": 6
        },
        {
            "firstKey": 22,
            "secondKey": 19,
            "layout": 6
        },
        {
            "firstKey": 22,
            "secondKey": 20,
            "layout": 2
        },
        {
            "firstKey": 22,
            "secondKey": 21,
            "layout": 0
        },
        {
            "firstKey": 22,
            "secondKey": 23,
            "layout": 3
        },
        {
            "firstKey": 22,
            "secondKey": 24,
            "layout": 6
        },
        {
            "firstKey": 22,
            "secondKey": 25,
            "layout": 6
        },
        {
            "firstKey": 22,
            "secondKey": 26,
            "layout": 6
        },
        {
            "firstKey": 22,
            "secondKey": 27,
            "layout": 6
        },
        {
            "firstKey": 22,
            "secondKey": 28,
            "layout": 6
        },
        {
            "firstKey": 22,
            "secondKey": 29,
            "layout": 6
        },
        {
            "firstKey": 22,
            "secondKey": 30,
            "layout": 6
        },
        {
            "firstKey": 22,
            "secondKey": 31,
            "layout": 6
        },
        {
            "firstKey": 22,
            "secondKey": 32,
            "layout": 6
        },
        {
            "firstKey": 22,
            "secondKey": 33,
            "layout": 6
        },
        {
            "firstKey": 22,
            "secondKey": 34,
            "layout": 6
        },
        {
            "firstKey": 22,
            "secondKey": 35,
            "layout": 6
        },
        {
            "firstKey": 22,
            "secondKey": 36,
            "layout": 6
        },
        {
            "firstKey": 22,
            "secondKey": 37,
            "layout": 6
        },
        {
            "firstKey": 22,
            "secondKey": 38,
            "layout": 6
        },
        {
            "firstKey": 22,
            "secondKey": 39,
            "layout": 6
        },
        {
            "firstKey": 22,
            "secondKey": 40,
            "layout": 6
        },
        {
            "firstKey": 22,
            "secondKey": 41,
            "layout": 6
        },
        {
            "firstKey": 22,
            "secondKey": 42,
            "layout": 6
        },
        {
            "firstKey": 22,
            "secondKey": 43,
            "layout": 6
        },
        {
            "firstKey": 22,
            "secondKey": 44,
            "layout": 6
        },
        {
            "firstKey": 22,
            "secondKey": 45,
            "layout": 6
        },
        {
            "firstKey": 22,
            "secondKey": 46,
            "layout": 6
        },
        {
            "firstKey": 22,
            "secondKey": 47,
            "layout": 6
        },
        {
            "firstKey": 22,
            "secondKey": 48,
            "layout": 6
        },
        {
            "firstKey": 22,
            "secondKey": 49,
            "layout": 6
        },
        {
            "firstKey": 22,
            "secondKey": 50,
            "layout": 6
        },
        {
            "firstKey": 22,
            "secondKey": 51,
            "layout": 6
        },
        {
            "firstKey": 22,
            "secondKey": 52,
            "layout": 6
        },
        {
            "firstKey": 22,
            "secondKey": 53,
            "layout": 6
        },
        {
            "firstKey": 22,
            "secondKey": 54,
            "layout": 6
        },
        {
            "firstKey": 22,
            "secondKey": 55,
            "layout": 8
        },
        {
            "firstKey": 23,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 23,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 23,
            "secondKey": 2,
            "layout": 7
        },
        {
            "firstKey": 23,
            "secondKey": 3,
            "layout": 7
        },
        {
            "firstKey": 23,
            "secondKey": 4,
            "layout": 7
        },
        {
            "firstKey": 23,
            "secondKey": 5,
            "layout": 7
        },
        {
            "firstKey": 23,
            "secondKey": 6,
            "layout": 7
        },
        {
            "firstKey": 23,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 23,
            "secondKey": 8,
            "layout": 5
        },
        {
            "firstKey": 23,
            "secondKey": 9,
            "layout": 5
        },
        {
            "firstKey": 23,
            "secondKey": 10,
            "layout": 5
        },
        {
            "firstKey": 23,
            "secondKey": 11,
            "layout": 5
        },
        {
            "firstKey": 23,
            "secondKey": 12,
            "layout": 5
        },
        {
            "firstKey": 23,
            "secondKey": 13,
            "layout": 5
        },
        {
            "firstKey": 23,
            "secondKey": 14,
            "layout": 5
        },
        {
            "firstKey": 23,
            "secondKey": 15,
            "layout": 5
        },
        {
            "firstKey": 23,
            "secondKey": 16,
            "layout": 5
        },
        {
            "firstKey": 23,
            "secondKey": 17,
            "layout": 5
        },
        {
            "firstKey": 23,
            "secondKey": 18,
            "layout": 5
        },
        {
            "firstKey": 23,
            "secondKey": 19,
            "layout": 5
        },
        {
            "firstKey": 23,
            "secondKey": 20,
            "layout": 2
        },
        {
            "firstKey": 23,
            "secondKey": 21,
            "layout": 2
        },
        {
            "firstKey": 23,
            "secondKey": 22,
            "layout": 2
        },
        {
            "firstKey": 23,
            "secondKey": 24,
            "layout": 5
        },
        {
            "firstKey": 23,
            "secondKey": 25,
            "layout": 5
        },
        {
            "firstKey": 23,
            "secondKey": 26,
            "layout": 5
        },
        {
            "firstKey": 23,
            "secondKey": 27,
            "layout": 5
        },
        {
            "firstKey": 23,
            "secondKey": 28,
            "layout": 5
        },
        {
            "firstKey": 23,
            "secondKey": 29,
            "layout": 5
        },
        {
            "firstKey": 23,
            "secondKey": 30,
            "layout": 5
        },
        {
            "firstKey": 23,
            "secondKey": 31,
            "layout": 5
        },
        {
            "firstKey": 23,
            "secondKey": 32,
            "layout": 5
        },
        {
            "firstKey": 23,
            "secondKey": 33,
            "layout": 5
        },
        {
            "firstKey": 23,
            "secondKey": 34,
            "layout": 5
        },
        {
            "firstKey": 23,
            "secondKey": 35,
            "layout": 5
        },
        {
            "firstKey": 23,
            "secondKey": 36,
            "layout": 5
        },
        {
            "firstKey": 23,
            "secondKey": 37,
            "layout": 5
        },
        {
            "firstKey": 23,
            "secondKey": 38,
            "layout": 5
        },
        {
            "firstKey": 23,
            "secondKey": 39,
            "layout": 5
        },
        {
            "firstKey": 23,
            "secondKey": 40,
            "layout": 5
        },
        {
            "firstKey": 23,
            "secondKey": 41,
            "layout": 5
        },
        {
            "firstKey": 23,
            "secondKey": 42,
            "layout": 5
        },
        {
            "firstKey": 23,
            "secondKey": 43,
            "layout": 5
        },
        {
            "firstKey": 23,
            "secondKey": 44,
            "layout": 5
        },
        {
            "firstKey": 23,
            "secondKey": 45,
            "layout": 5
        },
        {
            "firstKey": 23,
            "secondKey": 46,
            "layout": 5
        },
        {
            "firstKey": 23,
            "secondKey": 47,
            "layout": 5
        },
        {
            "firstKey": 23,
            "secondKey": 48,
            "layout": 5
        },
        {
            "firstKey": 23,
            "secondKey": 49,
            "layout": 5
        },
        {
            "firstKey": 23,
            "secondKey": 50,
            "layout": 5
        },
        {
            "firstKey": 23,
            "secondKey": 51,
            "layout": 5
        },
        {
            "firstKey": 23,
            "secondKey": 52,
            "layout": 5
        },
        {
            "firstKey": 23,
            "secondKey": 53,
            "layout": 5
        },
        {
            "firstKey": 23,
            "secondKey": 54,
            "layout": 5
        },
        {
            "firstKey": 23,
            "secondKey": 55,
            "layout": 7
        },
        {
            "firstKey": 24,
            "secondKey": 0,
            "layout": 9
        },
        {
            "firstKey": 24,
            "secondKey": 1,
            "layout": 9
        },
        {
            "firstKey": 24,
            "secondKey": 2,
            "layout": 9
        },
        {
            "firstKey": 24,
            "secondKey": 3,
            "layout": 9
        },
        {
            "firstKey": 24,
            "secondKey": 4,
            "layout": 9
        },
        {
            "firstKey": 24,
            "secondKey": 5,
            "layout": 9
        },
        {
            "firstKey": 24,
            "secondKey": 6,
            "layout": 9
        },
        {
            "firstKey": 24,
            "secondKey": 7,
            "layout": 7
        },
        {
            "firstKey": 24,
            "secondKey": 8,
            "layout": 7
        },
        {
            "firstKey": 24,
            "secondKey": 9,
            "layout": 7
        },
        {
            "firstKey": 24,
            "secondKey": 10,
            "layout": 7
        },
        {
            "firstKey": 24,
            "secondKey": 11,
            "layout": 7
        },
        {
            "firstKey": 24,
            "secondKey": 12,
            "layout": 7
        },
        {
            "firstKey": 24,
            "secondKey": 13,
            "layout": 7
        },
        {
            "firstKey": 24,
            "secondKey": 14,
            "layout": 7
        },
        {
            "firstKey": 24,
            "secondKey": 15,
            "layout": 7
        },
        {
            "firstKey": 24,
            "secondKey": 16,
            "layout": 7
        },
        {
            "firstKey": 24,
            "secondKey": 17,
            "layout": 7
        },
        {
            "firstKey": 24,
            "secondKey": 18,
            "layout": 7
        },
        {
            "firstKey": 24,
            "secondKey": 19,
            "layout": 7
        },
        {
            "firstKey": 24,
            "secondKey": 20,
            "layout": 7
        },
        {
            "firstKey": 24,
            "secondKey": 21,
            "layout": 7
        },
        {
            "firstKey": 24,
            "secondKey": 22,
            "layout": 7
        },
        {
            "firstKey": 24,
            "secondKey": 23,
            "layout": 7
        },
        {
            "firstKey": 24,
            "secondKey": 25,
            "layout": 7
        },
        {
            "firstKey": 24,
            "secondKey": 26,
            "layout": 7
        },
        {
            "firstKey": 24,
            "secondKey": 27,
            "layout": 7
        },
        {
            "firstKey": 24,
            "secondKey": 28,
            "layout": 7
        },
        {
            "firstKey": 24,
            "secondKey": 29,
            "layout": 7
        },
        {
            "firstKey": 24,
            "secondKey": 30,
            "layout": 7
        },
        {
            "firstKey": 24,
            "secondKey": 31,
            "layout": 7
        },
        {
            "firstKey": 24,
            "secondKey": 32,
            "layout": 7
        },
        {
            "firstKey": 24,
            "secondKey": 33,
            "layout": 7
        },
        {
            "firstKey": 24,
            "secondKey": 34,
            "layout": 7
        },
        {
            "firstKey": 24,
            "secondKey": 35,
            "layout": 7
        },
        {
            "firstKey": 24,
            "secondKey": 36,
            "layout": 7
        },
        {
            "firstKey": 24,
            "secondKey": 37,
            "layout": 7
        },
        {
            "firstKey": 24,
            "secondKey": 38,
            "layout": 7
        },
        {
            "firstKey": 24,
            "secondKey": 39,
            "layout": 7
        },
        {
            "firstKey": 24,
            "secondKey": 40,
            "layout": 7
        },
        {
            "firstKey": 24,
            "secondKey": 41,
            "layout": 7
        },
        {
            "firstKey": 24,
            "secondKey": 42,
            "layout": 7
        },
        {
            "firstKey": 24,
            "secondKey": 43,
            "layout": 7
        },
        {
            "firstKey": 24,
            "secondKey": 44,
            "layout": 7
        },
        {
            "firstKey": 24,
            "secondKey": 45,
            "layout": 7
        },
        {
            "firstKey": 24,
            "secondKey": 46,
            "layout": 7
        },
        {
            "firstKey": 24,
            "secondKey": 47,
            "layout": 7
        },
        {
            "firstKey": 24,
            "secondKey": 48,
            "layout": 7
        },
        {
            "firstKey": 24,
            "secondKey": 49,
            "layout": 7
        },
        {
            "firstKey": 24,
            "secondKey": 50,
            "layout": 7
        },
        {
            "firstKey": 24,
            "secondKey": 51,
            "layout": 7
        },
        {
            "firstKey": 24,
            "secondKey": 52,
            "layout": 7
        },
        {
            "firstKey": 24,
            "secondKey": 53,
            "layout": 7
        },
        {
            "firstKey": 24,
            "secondKey": 54,
            "layout": 7
        },
        {
            "firstKey": 24,
            "secondKey": 55,
            "layout": 9
        },
        {
            "firstKey": 25,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 25,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 25,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 25,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 25,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 25,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 25,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 25,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 18,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 19,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 20,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 21,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 22,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 23,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 24,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 26,
            "layout": 1
        },
        {
            "firstKey": 25,
            "secondKey": 27,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 28,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 29,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 30,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 31,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 32,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 33,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 34,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 35,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 36,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 37,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 38,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 39,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 40,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 41,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 42,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 43,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 44,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 45,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 46,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 47,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 48,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 49,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 50,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 51,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 52,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 53,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 54,
            "layout": 3
        },
        {
            "firstKey": 25,
            "secondKey": 55,
            "layout": 5
        },
        {
            "firstKey": 26,
            "secondKey": 0,
            "layout": 9
        },
        {
            "firstKey": 26,
            "secondKey": 1,
            "layout": 9
        },
        {
            "firstKey": 26,
            "secondKey": 2,
            "layout": 9
        },
        {
            "firstKey": 26,
            "secondKey": 3,
            "layout": 9
        },
        {
            "firstKey": 26,
            "secondKey": 4,
            "layout": 9
        },
        {
            "firstKey": 26,
            "secondKey": 5,
            "layout": 9
        },
        {
            "firstKey": 26,
            "secondKey": 6,
            "layout": 9
        },
        {
            "firstKey": 26,
            "secondKey": 7,
            "layout": 7
        },
        {
            "firstKey": 26,
            "secondKey": 8,
            "layout": 7
        },
        {
            "firstKey": 26,
            "secondKey": 9,
            "layout": 7
        },
        {
            "firstKey": 26,
            "secondKey": 10,
            "layout": 7
        },
        {
            "firstKey": 26,
            "secondKey": 11,
            "layout": 7
        },
        {
            "firstKey": 26,
            "secondKey": 12,
            "layout": 7
        },
        {
            "firstKey": 26,
            "secondKey": 13,
            "layout": 7
        },
        {
            "firstKey": 26,
            "secondKey": 14,
            "layout": 7
        },
        {
            "firstKey": 26,
            "secondKey": 15,
            "layout": 7
        },
        {
            "firstKey": 26,
            "secondKey": 16,
            "layout": 7
        },
        {
            "firstKey": 26,
            "secondKey": 17,
            "layout": 7
        },
        {
            "firstKey": 26,
            "secondKey": 18,
            "layout": 7
        },
        {
            "firstKey": 26,
            "secondKey": 19,
            "layout": 7
        },
        {
            "firstKey": 26,
            "secondKey": 20,
            "layout": 7
        },
        {
            "firstKey": 26,
            "secondKey": 21,
            "layout": 7
        },
        {
            "firstKey": 26,
            "secondKey": 22,
            "layout": 7
        },
        {
            "firstKey": 26,
            "secondKey": 23,
            "layout": 7
        },
        {
            "firstKey": 26,
            "secondKey": 24,
            "layout": 7
        },
        {
            "firstKey": 26,
            "secondKey": 25,
            "layout": 5
        },
        {
            "firstKey": 26,
            "secondKey": 27,
            "layout": 7
        },
        {
            "firstKey": 26,
            "secondKey": 28,
            "layout": 7
        },
        {
            "firstKey": 26,
            "secondKey": 29,
            "layout": 7
        },
        {
            "firstKey": 26,
            "secondKey": 30,
            "layout": 7
        },
        {
            "firstKey": 26,
            "secondKey": 31,
            "layout": 7
        },
        {
            "firstKey": 26,
            "secondKey": 32,
            "layout": 7
        },
        {
            "firstKey": 26,
            "secondKey": 33,
            "layout": 7
        },
        {
            "firstKey": 26,
            "secondKey": 34,
            "layout": 7
        },
        {
            "firstKey": 26,
            "secondKey": 35,
            "layout": 7
        },
        {
            "firstKey": 26,
            "secondKey": 36,
            "layout": 7
        },
        {
            "firstKey": 26,
            "secondKey": 37,
            "layout": 7
        },
        {
            "firstKey": 26,
            "secondKey": 38,
            "layout": 7
        },
        {
            "firstKey": 26,
            "secondKey": 39,
            "layout": 7
        },
        {
            "firstKey": 26,
            "secondKey": 40,
            "layout": 7
        },
        {
            "firstKey": 26,
            "secondKey": 41,
            "layout": 7
        },
        {
            "firstKey": 26,
            "secondKey": 42,
            "layout": 7
        },
        {
            "firstKey": 26,
            "secondKey": 43,
            "layout": 7
        },
        {
            "firstKey": 26,
            "secondKey": 44,
            "layout": 7
        },
        {
            "firstKey": 26,
            "secondKey": 45,
            "layout": 7
        },
        {
            "firstKey": 26,
            "secondKey": 46,
            "layout": 7
        },
        {
            "firstKey": 26,
            "secondKey": 47,
            "layout": 7
        },
        {
            "firstKey": 26,
            "secondKey": 48,
            "layout": 7
        },
        {
            "firstKey": 26,
            "secondKey": 49,
            "layout": 7
        },
        {
            "firstKey": 26,
            "secondKey": 50,
            "layout": 7
        },
        {
            "firstKey": 26,
            "secondKey": 51,
            "layout": 7
        },
        {
            "firstKey": 26,
            "secondKey": 52,
            "layout": 7
        },
        {
            "firstKey": 26,
            "secondKey": 53,
            "layout": 7
        },
        {
            "firstKey": 26,
            "secondKey": 54,
            "layout": 7
        },
        {
            "firstKey": 26,
            "secondKey": 55,
            "layout": 9
        },
        {
            "firstKey": 27,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 27,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 27,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 27,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 27,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 27,
            "secondKey": 5,
            "layout": 6
        },
        {
            "firstKey": 27,
            "secondKey": 6,
            "layout": 6
        },
        {
            "firstKey": 27,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 27,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 27,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 27,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 27,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 27,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 27,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 27,
            "secondKey": 14,
            "layout": 4
        },
        {
            "firstKey": 27,
            "secondKey": 15,
            "layout": 4
        },
        {
            "firstKey": 27,
            "secondKey": 16,
            "layout": 4
        },
        {
            "firstKey": 27,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 27,
            "secondKey": 18,
            "layout": 4
        },
        {
            "firstKey": 27,
            "secondKey": 19,
            "layout": 4
        },
        {
            "firstKey": 27,
            "secondKey": 20,
            "layout": 4
        },
        {
            "firstKey": 27,
            "secondKey": 21,
            "layout": 4
        },
        {
            "firstKey": 27,
            "secondKey": 22,
            "layout": 4
        },
        {
            "firstKey": 27,
            "secondKey": 23,
            "layout": 4
        },
        {
            "firstKey": 27,
            "secondKey": 24,
            "layout": 4
        },
        {
            "firstKey": 27,
            "secondKey": 25,
            "layout": 4
        },
        {
            "firstKey": 27,
            "secondKey": 26,
            "layout": 4
        },
        {
            "firstKey": 27,
            "secondKey": 28,
            "layout": 2
        },
        {
            "firstKey": 27,
            "secondKey": 29,
            "layout": 4
        },
        {
            "firstKey": 27,
            "secondKey": 30,
            "layout": 4
        },
        {
            "firstKey": 27,
            "secondKey": 31,
            "layout": 4
        },
        {
            "firstKey": 27,
            "secondKey": 32,
            "layout": 4
        },
        {
            "firstKey": 27,
            "secondKey": 33,
            "layout": 4
        },
        {
            "firstKey": 27,
            "secondKey": 34,
            "layout": 4
        },
        {
            "firstKey": 27,
            "secondKey": 35,
            "layout": 4
        },
        {
            "firstKey": 27,
            "secondKey": 36,
            "layout": 4
        },
        {
            "firstKey": 27,
            "secondKey": 37,
            "layout": 4
        },
        {
            "firstKey": 27,
            "secondKey": 38,
            "layout": 4
        },
        {
            "firstKey": 27,
            "secondKey": 39,
            "layout": 4
        },
        {
            "firstKey": 27,
            "secondKey": 40,
            "layout": 4
        },
        {
            "firstKey": 27,
            "secondKey": 41,
            "layout": 4
        },
        {
            "firstKey": 27,
            "secondKey": 42,
            "layout": 4
        },
        {
            "firstKey": 27,
            "secondKey": 43,
            "layout": 4
        },
        {
            "firstKey": 27,
            "secondKey": 44,
            "layout": 4
        },
        {
            "firstKey": 27,
            "secondKey": 45,
            "layout": 4
        },
        {
            "firstKey": 27,
            "secondKey": 46,
            "layout": 4
        },
        {
            "firstKey": 27,
            "secondKey": 47,
            "layout": 4
        },
        {
            "firstKey": 27,
            "secondKey": 48,
            "layout": 4
        },
        {
            "firstKey": 27,
            "secondKey": 49,
            "layout": 4
        },
        {
            "firstKey": 27,
            "secondKey": 50,
            "layout": 4
        },
        {
            "firstKey": 27,
            "secondKey": 51,
            "layout": 4
        },
        {
            "firstKey": 27,
            "secondKey": 52,
            "layout": 4
        },
        {
            "firstKey": 27,
            "secondKey": 53,
            "layout": 4
        },
        {
            "firstKey": 27,
            "secondKey": 54,
            "layout": 4
        },
        {
            "firstKey": 27,
            "secondKey": 55,
            "layout": 6
        },
        {
            "firstKey": 28,
            "secondKey": 0,
            "layout": 10
        },
        {
            "firstKey": 28,
            "secondKey": 1,
            "layout": 10
        },
        {
            "firstKey": 28,
            "secondKey": 2,
            "layout": 10
        },
        {
            "firstKey": 28,
            "secondKey": 3,
            "layout": 10
        },
        {
            "firstKey": 28,
            "secondKey": 4,
            "layout": 10
        },
        {
            "firstKey": 28,
            "secondKey": 5,
            "layout": 10
        },
        {
            "firstKey": 28,
            "secondKey": 6,
            "layout": 10
        },
        {
            "firstKey": 28,
            "secondKey": 7,
            "layout": 8
        },
        {
            "firstKey": 28,
            "secondKey": 8,
            "layout": 8
        },
        {
            "firstKey": 28,
            "secondKey": 9,
            "layout": 8
        },
        {
            "firstKey": 28,
            "secondKey": 10,
            "layout": 8
        },
        {
            "firstKey": 28,
            "secondKey": 11,
            "layout": 8
        },
        {
            "firstKey": 28,
            "secondKey": 12,
            "layout": 8
        },
        {
            "firstKey": 28,
            "secondKey": 13,
            "layout": 8
        },
        {
            "firstKey": 28,
            "secondKey": 14,
            "layout": 8
        },
        {
            "firstKey": 28,
            "secondKey": 15,
            "layout": 8
        },
        {
            "firstKey": 28,
            "secondKey": 16,
            "layout": 8
        },
        {
            "firstKey": 28,
            "secondKey": 17,
            "layout": 8
        },
        {
            "firstKey": 28,
            "secondKey": 18,
            "layout": 8
        },
        {
            "firstKey": 28,
            "secondKey": 19,
            "layout": 8
        },
        {
            "firstKey": 28,
            "secondKey": 20,
            "layout": 8
        },
        {
            "firstKey": 28,
            "secondKey": 21,
            "layout": 8
        },
        {
            "firstKey": 28,
            "secondKey": 22,
            "layout": 8
        },
        {
            "firstKey": 28,
            "secondKey": 23,
            "layout": 8
        },
        {
            "firstKey": 28,
            "secondKey": 24,
            "layout": 8
        },
        {
            "firstKey": 28,
            "secondKey": 25,
            "layout": 8
        },
        {
            "firstKey": 28,
            "secondKey": 26,
            "layout": 8
        },
        {
            "firstKey": 28,
            "secondKey": 27,
            "layout": 6
        },
        {
            "firstKey": 28,
            "secondKey": 29,
            "layout": 8
        },
        {
            "firstKey": 28,
            "secondKey": 30,
            "layout": 8
        },
        {
            "firstKey": 28,
            "secondKey": 31,
            "layout": 8
        },
        {
            "firstKey": 28,
            "secondKey": 32,
            "layout": 8
        },
        {
            "firstKey": 28,
            "secondKey": 33,
            "layout": 8
        },
        {
            "firstKey": 28,
            "secondKey": 34,
            "layout": 8
        },
        {
            "firstKey": 28,
            "secondKey": 35,
            "layout": 8
        },
        {
            "firstKey": 28,
            "secondKey": 36,
            "layout": 8
        },
        {
            "firstKey": 28,
            "secondKey": 37,
            "layout": 8
        },
        {
            "firstKey": 28,
            "secondKey": 38,
            "layout": 8
        },
        {
            "firstKey": 28,
            "secondKey": 39,
            "layout": 8
        },
        {
            "firstKey": 28,
            "secondKey": 40,
            "layout": 8
        },
        {
            "firstKey": 28,
            "secondKey": 41,
            "layout": 8
        },
        {
            "firstKey": 28,
            "secondKey": 42,
            "layout": 8
        },
        {
            "firstKey": 28,
            "secondKey": 43,
            "layout": 8
        },
        {
            "firstKey": 28,
            "secondKey": 44,
            "layout": 8
        },
        {
            "firstKey": 28,
            "secondKey": 45,
            "layout": 8
        },
        {
            "firstKey": 28,
            "secondKey": 46,
            "layout": 8
        },
        {
            "firstKey": 28,
            "secondKey": 47,
            "layout": 8
        },
        {
            "firstKey": 28,
            "secondKey": 48,
            "layout": 8
        },
        {
            "firstKey": 28,
            "secondKey": 49,
            "layout": 8
        },
        {
            "firstKey": 28,
            "secondKey": 50,
            "layout": 8
        },
        {
            "firstKey": 28,
            "secondKey": 51,
            "layout": 8
        },
        {
            "firstKey": 28,
            "secondKey": 52,
            "layout": 8
        },
        {
            "firstKey": 28,
            "secondKey": 53,
            "layout": 8
        },
        {
            "firstKey": 28,
            "secondKey": 54,
            "layout": 8
        },
        {
            "firstKey": 28,
            "secondKey": 55,
            "layout": 10
        },
        {
            "firstKey": 29,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 29,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 29,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 29,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 29,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 29,
            "secondKey": 5,
            "layout": 6
        },
        {
            "firstKey": 29,
            "secondKey": 6,
            "layout": 6
        },
        {
            "firstKey": 29,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 29,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 29,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 29,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 29,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 29,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 29,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 29,
            "secondKey": 14,
            "layout": 4
        },
        {
            "firstKey": 29,
            "secondKey": 15,
            "layout": 4
        },
        {
            "firstKey": 29,
            "secondKey": 16,
            "layout": 4
        },
        {
            "firstKey": 29,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 29,
            "secondKey": 18,
            "layout": 4
        },
        {
            "firstKey": 29,
            "secondKey": 19,
            "layout": 4
        },
        {
            "firstKey": 29,
            "secondKey": 20,
            "layout": 4
        },
        {
            "firstKey": 29,
            "secondKey": 21,
            "layout": 4
        },
        {
            "firstKey": 29,
            "secondKey": 22,
            "layout": 4
        },
        {
            "firstKey": 29,
            "secondKey": 23,
            "layout": 4
        },
        {
            "firstKey": 29,
            "secondKey": 24,
            "layout": 4
        },
        {
            "firstKey": 29,
            "secondKey": 25,
            "layout": 4
        },
        {
            "firstKey": 29,
            "secondKey": 26,
            "layout": 4
        },
        {
            "firstKey": 29,
            "secondKey": 27,
            "layout": 4
        },
        {
            "firstKey": 29,
            "secondKey": 28,
            "layout": 4
        },
        {
            "firstKey": 29,
            "secondKey": 30,
            "layout": 1
        },
        {
            "firstKey": 29,
            "secondKey": 31,
            "layout": 2
        },
        {
            "firstKey": 29,
            "secondKey": 32,
            "layout": 2
        },
        {
            "firstKey": 29,
            "secondKey": 33,
            "layout": 4
        },
        {
            "firstKey": 29,
            "secondKey": 34,
            "layout": 4
        },
        {
            "firstKey": 29,
            "secondKey": 35,
            "layout": 4
        },
        {
            "firstKey": 29,
            "secondKey": 36,
            "layout": 4
        },
        {
            "firstKey": 29,
            "secondKey": 37,
            "layout": 4
        },
        {
            "firstKey": 29,
            "secondKey": 38,
            "layout": 4
        },
        {
            "firstKey": 29,
            "secondKey": 39,
            "layout": 4
        },
        {
            "firstKey": 29,
            "secondKey": 40,
            "layout": 4
        },
        {
            "firstKey": 29,
            "secondKey": 41,
            "layout": 4
        },
        {
            "firstKey": 29,
            "secondKey": 42,
            "layout": 4
        },
        {
            "firstKey": 29,
            "secondKey": 43,
            "layout": 4
        },
        {
            "firstKey": 29,
            "secondKey": 44,
            "layout": 4
        },
        {
            "firstKey": 29,
            "secondKey": 45,
            "layout": 4
        },
        {
            "firstKey": 29,
            "secondKey": 46,
            "layout": 4
        },
        {
            "firstKey": 29,
            "secondKey": 47,
            "layout": 4
        },
        {
            "firstKey": 29,
            "secondKey": 48,
            "layout": 4
        },
        {
            "firstKey": 29,
            "secondKey": 49,
            "layout": 4
        },
        {
            "firstKey": 29,
            "secondKey": 50,
            "layout": 4
        },
        {
            "firstKey": 29,
            "secondKey": 51,
            "layout": 4
        },
        {
            "firstKey": 29,
            "secondKey": 52,
            "layout": 4
        },
        {
            "firstKey": 29,
            "secondKey": 53,
            "layout": 4
        },
        {
            "firstKey": 29,
            "secondKey": 54,
            "layout": 4
        },
        {
            "firstKey": 29,
            "secondKey": 55,
            "layout": 6
        },
        {
            "firstKey": 30,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 30,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 30,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 30,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 30,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 30,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 30,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 30,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 30,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 30,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 30,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 30,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 30,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 30,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 30,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 30,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 30,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 30,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 30,
            "secondKey": 18,
            "layout": 3
        },
        {
            "firstKey": 30,
            "secondKey": 19,
            "layout": 3
        },
        {
            "firstKey": 30,
            "secondKey": 20,
            "layout": 3
        },
        {
            "firstKey": 30,
            "secondKey": 21,
            "layout": 3
        },
        {
            "firstKey": 30,
            "secondKey": 22,
            "layout": 3
        },
        {
            "firstKey": 30,
            "secondKey": 23,
            "layout": 3
        },
        {
            "firstKey": 30,
            "secondKey": 24,
            "layout": 3
        },
        {
            "firstKey": 30,
            "secondKey": 25,
            "layout": 3
        },
        {
            "firstKey": 30,
            "secondKey": 26,
            "layout": 3
        },
        {
            "firstKey": 30,
            "secondKey": 27,
            "layout": 3
        },
        {
            "firstKey": 30,
            "secondKey": 28,
            "layout": 3
        },
        {
            "firstKey": 30,
            "secondKey": 29,
            "layout": 0
        },
        {
            "firstKey": 30,
            "secondKey": 31,
            "layout": 1
        },
        {
            "firstKey": 30,
            "secondKey": 32,
            "layout": 1
        },
        {
            "firstKey": 30,
            "secondKey": 33,
            "layout": 3
        },
        {
            "firstKey": 30,
            "secondKey": 34,
            "layout": 3
        },
        {
            "firstKey": 30,
            "secondKey": 35,
            "layout": 3
        },
        {
            "firstKey": 30,
            "secondKey": 36,
            "layout": 3
        },
        {
            "firstKey": 30,
            "secondKey": 37,
            "layout": 3
        },
        {
            "firstKey": 30,
            "secondKey": 38,
            "layout": 3
        },
        {
            "firstKey": 30,
            "secondKey": 39,
            "layout": 3
        },
        {
            "firstKey": 30,
            "secondKey": 40,
            "layout": 3
        },
        {
            "firstKey": 30,
            "secondKey": 41,
            "layout": 3
        },
        {
            "firstKey": 30,
            "secondKey": 42,
            "layout": 3
        },
        {
            "firstKey": 30,
            "secondKey": 43,
            "layout": 3
        },
        {
            "firstKey": 30,
            "secondKey": 44,
            "layout": 3
        },
        {
            "firstKey": 30,
            "secondKey": 45,
            "layout": 3
        },
        {
            "firstKey": 30,
            "secondKey": 46,
            "layout": 3
        },
        {
            "firstKey": 30,
            "secondKey": 47,
            "layout": 3
        },
        {
            "firstKey": 30,
            "secondKey": 48,
            "layout": 3
        },
        {
            "firstKey": 30,
            "secondKey": 49,
            "layout": 3
        },
        {
            "firstKey": 30,
            "secondKey": 50,
            "layout": 3
        },
        {
            "firstKey": 30,
            "secondKey": 51,
            "layout": 3
        },
        {
            "firstKey": 30,
            "secondKey": 52,
            "layout": 3
        },
        {
            "firstKey": 30,
            "secondKey": 53,
            "layout": 3
        },
        {
            "firstKey": 30,
            "secondKey": 54,
            "layout": 3
        },
        {
            "firstKey": 30,
            "secondKey": 55,
            "layout": 5
        },
        {
            "firstKey": 31,
            "secondKey": 0,
            "layout": 10
        },
        {
            "firstKey": 31,
            "secondKey": 1,
            "layout": 10
        },
        {
            "firstKey": 31,
            "secondKey": 2,
            "layout": 10
        },
        {
            "firstKey": 31,
            "secondKey": 3,
            "layout": 10
        },
        {
            "firstKey": 31,
            "secondKey": 4,
            "layout": 10
        },
        {
            "firstKey": 31,
            "secondKey": 5,
            "layout": 10
        },
        {
            "firstKey": 31,
            "secondKey": 6,
            "layout": 10
        },
        {
            "firstKey": 31,
            "secondKey": 7,
            "layout": 8
        },
        {
            "firstKey": 31,
            "secondKey": 8,
            "layout": 8
        },
        {
            "firstKey": 31,
            "secondKey": 9,
            "layout": 8
        },
        {
            "firstKey": 31,
            "secondKey": 10,
            "layout": 8
        },
        {
            "firstKey": 31,
            "secondKey": 11,
            "layout": 8
        },
        {
            "firstKey": 31,
            "secondKey": 12,
            "layout": 8
        },
        {
            "firstKey": 31,
            "secondKey": 13,
            "layout": 8
        },
        {
            "firstKey": 31,
            "secondKey": 14,
            "layout": 8
        },
        {
            "firstKey": 31,
            "secondKey": 15,
            "layout": 8
        },
        {
            "firstKey": 31,
            "secondKey": 16,
            "layout": 8
        },
        {
            "firstKey": 31,
            "secondKey": 17,
            "layout": 8
        },
        {
            "firstKey": 31,
            "secondKey": 18,
            "layout": 8
        },
        {
            "firstKey": 31,
            "secondKey": 19,
            "layout": 8
        },
        {
            "firstKey": 31,
            "secondKey": 20,
            "layout": 8
        },
        {
            "firstKey": 31,
            "secondKey": 21,
            "layout": 8
        },
        {
            "firstKey": 31,
            "secondKey": 22,
            "layout": 8
        },
        {
            "firstKey": 31,
            "secondKey": 23,
            "layout": 8
        },
        {
            "firstKey": 31,
            "secondKey": 24,
            "layout": 8
        },
        {
            "firstKey": 31,
            "secondKey": 25,
            "layout": 8
        },
        {
            "firstKey": 31,
            "secondKey": 26,
            "layout": 8
        },
        {
            "firstKey": 31,
            "secondKey": 27,
            "layout": 8
        },
        {
            "firstKey": 31,
            "secondKey": 28,
            "layout": 8
        },
        {
            "firstKey": 31,
            "secondKey": 29,
            "layout": 6
        },
        {
            "firstKey": 31,
            "secondKey": 30,
            "layout": 6
        },
        {
            "firstKey": 31,
            "secondKey": 32,
            "layout": 1
        },
        {
            "firstKey": 31,
            "secondKey": 33,
            "layout": 8
        },
        {
            "firstKey": 31,
            "secondKey": 34,
            "layout": 8
        },
        {
            "firstKey": 31,
            "secondKey": 35,
            "layout": 8
        },
        {
            "firstKey": 31,
            "secondKey": 36,
            "layout": 8
        },
        {
            "firstKey": 31,
            "secondKey": 37,
            "layout": 8
        },
        {
            "firstKey": 31,
            "secondKey": 38,
            "layout": 8
        },
        {
            "firstKey": 31,
            "secondKey": 39,
            "layout": 8
        },
        {
            "firstKey": 31,
            "secondKey": 40,
            "layout": 8
        },
        {
            "firstKey": 31,
            "secondKey": 41,
            "layout": 8
        },
        {
            "firstKey": 31,
            "secondKey": 42,
            "layout": 8
        },
        {
            "firstKey": 31,
            "secondKey": 43,
            "layout": 8
        },
        {
            "firstKey": 31,
            "secondKey": 44,
            "layout": 8
        },
        {
            "firstKey": 31,
            "secondKey": 45,
            "layout": 8
        },
        {
            "firstKey": 31,
            "secondKey": 46,
            "layout": 8
        },
        {
            "firstKey": 31,
            "secondKey": 47,
            "layout": 8
        },
        {
            "firstKey": 31,
            "secondKey": 48,
            "layout": 8
        },
        {
            "firstKey": 31,
            "secondKey": 49,
            "layout": 8
        },
        {
            "firstKey": 31,
            "secondKey": 50,
            "layout": 8
        },
        {
            "firstKey": 31,
            "secondKey": 51,
            "layout": 8
        },
        {
            "firstKey": 31,
            "secondKey": 52,
            "layout": 8
        },
        {
            "firstKey": 31,
            "secondKey": 53,
            "layout": 8
        },
        {
            "firstKey": 31,
            "secondKey": 54,
            "layout": 8
        },
        {
            "firstKey": 31,
            "secondKey": 55,
            "layout": 10
        },
        {
            "firstKey": 32,
            "secondKey": 0,
            "layout": 9
        },
        {
            "firstKey": 32,
            "secondKey": 1,
            "layout": 9
        },
        {
            "firstKey": 32,
            "secondKey": 2,
            "layout": 9
        },
        {
            "firstKey": 32,
            "secondKey": 3,
            "layout": 9
        },
        {
            "firstKey": 32,
            "secondKey": 4,
            "layout": 9
        },
        {
            "firstKey": 32,
            "secondKey": 5,
            "layout": 9
        },
        {
            "firstKey": 32,
            "secondKey": 6,
            "layout": 9
        },
        {
            "firstKey": 32,
            "secondKey": 7,
            "layout": 7
        },
        {
            "firstKey": 32,
            "secondKey": 8,
            "layout": 7
        },
        {
            "firstKey": 32,
            "secondKey": 9,
            "layout": 7
        },
        {
            "firstKey": 32,
            "secondKey": 10,
            "layout": 7
        },
        {
            "firstKey": 32,
            "secondKey": 11,
            "layout": 7
        },
        {
            "firstKey": 32,
            "secondKey": 12,
            "layout": 7
        },
        {
            "firstKey": 32,
            "secondKey": 13,
            "layout": 7
        },
        {
            "firstKey": 32,
            "secondKey": 14,
            "layout": 7
        },
        {
            "firstKey": 32,
            "secondKey": 15,
            "layout": 7
        },
        {
            "firstKey": 32,
            "secondKey": 16,
            "layout": 7
        },
        {
            "firstKey": 32,
            "secondKey": 17,
            "layout": 7
        },
        {
            "firstKey": 32,
            "secondKey": 18,
            "layout": 7
        },
        {
            "firstKey": 32,
            "secondKey": 19,
            "layout": 7
        },
        {
            "firstKey": 32,
            "secondKey": 20,
            "layout": 7
        },
        {
            "firstKey": 32,
            "secondKey": 21,
            "layout": 7
        },
        {
            "firstKey": 32,
            "secondKey": 22,
            "layout": 7
        },
        {
            "firstKey": 32,
            "secondKey": 23,
            "layout": 7
        },
        {
            "firstKey": 32,
            "secondKey": 24,
            "layout": 7
        },
        {
            "firstKey": 32,
            "secondKey": 25,
            "layout": 7
        },
        {
            "firstKey": 32,
            "secondKey": 26,
            "layout": 7
        },
        {
            "firstKey": 32,
            "secondKey": 27,
            "layout": 7
        },
        {
            "firstKey": 32,
            "secondKey": 28,
            "layout": 7
        },
        {
            "firstKey": 32,
            "secondKey": 29,
            "layout": 5
        },
        {
            "firstKey": 32,
            "secondKey": 30,
            "layout": 5
        },
        {
            "firstKey": 32,
            "secondKey": 31,
            "layout": 0
        },
        {
            "firstKey": 32,
            "secondKey": 33,
            "layout": 7
        },
        {
            "firstKey": 32,
            "secondKey": 34,
            "layout": 7
        },
        {
            "firstKey": 32,
            "secondKey": 35,
            "layout": 7
        },
        {
            "firstKey": 32,
            "secondKey": 36,
            "layout": 7
        },
        {
            "firstKey": 32,
            "secondKey": 37,
            "layout": 7
        },
        {
            "firstKey": 32,
            "secondKey": 38,
            "layout": 7
        },
        {
            "firstKey": 32,
            "secondKey": 39,
            "layout": 7
        },
        {
            "firstKey": 32,
            "secondKey": 40,
            "layout": 7
        },
        {
            "firstKey": 32,
            "secondKey": 41,
            "layout": 7
        },
        {
            "firstKey": 32,
            "secondKey": 42,
            "layout": 7
        },
        {
            "firstKey": 32,
            "secondKey": 43,
            "layout": 7
        },
        {
            "firstKey": 32,
            "secondKey": 44,
            "layout": 7
        },
        {
            "firstKey": 32,
            "secondKey": 45,
            "layout": 7
        },
        {
            "firstKey": 32,
            "secondKey": 46,
            "layout": 7
        },
        {
            "firstKey": 32,
            "secondKey": 47,
            "layout": 7
        },
        {
            "firstKey": 32,
            "secondKey": 48,
            "layout": 7
        },
        {
            "firstKey": 32,
            "secondKey": 49,
            "layout": 7
        },
        {
            "firstKey": 32,
            "secondKey": 50,
            "layout": 7
        },
        {
            "firstKey": 32,
            "secondKey": 51,
            "layout": 7
        },
        {
            "firstKey": 32,
            "secondKey": 52,
            "layout": 7
        },
        {
            "firstKey": 32,
            "secondKey": 53,
            "layout": 7
        },
        {
            "firstKey": 32,
            "secondKey": 54,
            "layout": 7
        },
        {
            "firstKey": 32,
            "secondKey": 55,
            "layout": 9
        },
        {
            "firstKey": 33,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 33,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 33,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 33,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 33,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 33,
            "secondKey": 5,
            "layout": 6
        },
        {
            "firstKey": 33,
            "secondKey": 6,
            "layout": 6
        },
        {
            "firstKey": 33,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 33,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 33,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 33,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 33,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 33,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 33,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 33,
            "secondKey": 14,
            "layout": 4
        },
        {
            "firstKey": 33,
            "secondKey": 15,
            "layout": 4
        },
        {
            "firstKey": 33,
            "secondKey": 16,
            "layout": 4
        },
        {
            "firstKey": 33,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 33,
            "secondKey": 18,
            "layout": 4
        },
        {
            "firstKey": 33,
            "secondKey": 19,
            "layout": 4
        },
        {
            "firstKey": 33,
            "secondKey": 20,
            "layout": 4
        },
        {
            "firstKey": 33,
            "secondKey": 21,
            "layout": 4
        },
        {
            "firstKey": 33,
            "secondKey": 22,
            "layout": 4
        },
        {
            "firstKey": 33,
            "secondKey": 23,
            "layout": 4
        },
        {
            "firstKey": 33,
            "secondKey": 24,
            "layout": 4
        },
        {
            "firstKey": 33,
            "secondKey": 25,
            "layout": 4
        },
        {
            "firstKey": 33,
            "secondKey": 26,
            "layout": 4
        },
        {
            "firstKey": 33,
            "secondKey": 27,
            "layout": 4
        },
        {
            "firstKey": 33,
            "secondKey": 28,
            "layout": 4
        },
        {
            "firstKey": 33,
            "secondKey": 29,
            "layout": 4
        },
        {
            "firstKey": 33,
            "secondKey": 30,
            "layout": 4
        },
        {
            "firstKey": 33,
            "secondKey": 31,
            "layout": 4
        },
        {
            "firstKey": 33,
            "secondKey": 32,
            "layout": 4
        },
        {
            "firstKey": 33,
            "secondKey": 34,
            "layout": 2
        },
        {
            "firstKey": 33,
            "secondKey": 35,
            "layout": 4
        },
        {
            "firstKey": 33,
            "secondKey": 36,
            "layout": 4
        },
        {
            "firstKey": 33,
            "secondKey": 37,
            "layout": 4
        },
        {
            "firstKey": 33,
            "secondKey": 38,
            "layout": 4
        },
        {
            "firstKey": 33,
            "secondKey": 39,
            "layout": 4
        },
        {
            "firstKey": 33,
            "secondKey": 40,
            "layout": 4
        },
        {
            "firstKey": 33,
            "secondKey": 41,
            "layout": 4
        },
        {
            "firstKey": 33,
            "secondKey": 42,
            "layout": 4
        },
        {
            "firstKey": 33,
            "secondKey": 43,
            "layout": 4
        },
        {
            "firstKey": 33,
            "secondKey": 44,
            "layout": 4
        },
        {
            "firstKey": 33,
            "secondKey": 45,
            "layout": 4
        },
        {
            "firstKey": 33,
            "secondKey": 46,
            "layout": 4
        },
        {
            "firstKey": 33,
            "secondKey": 47,
            "layout": 4
        },
        {
            "firstKey": 33,
            "secondKey": 48,
            "layout": 4
        },
        {
            "firstKey": 33,
            "secondKey": 49,
            "layout": 4
        },
        {
            "firstKey": 33,
            "secondKey": 50,
            "layout": 4
        },
        {
            "firstKey": 33,
            "secondKey": 51,
            "layout": 4
        },
        {
            "firstKey": 33,
            "secondKey": 52,
            "layout": 4
        },
        {
            "firstKey": 33,
            "secondKey": 53,
            "layout": 4
        },
        {
            "firstKey": 33,
            "secondKey": 54,
            "layout": 4
        },
        {
            "firstKey": 33,
            "secondKey": 55,
            "layout": 6
        },
        {
            "firstKey": 34,
            "secondKey": 0,
            "layout": 10
        },
        {
            "firstKey": 34,
            "secondKey": 1,
            "layout": 10
        },
        {
            "firstKey": 34,
            "secondKey": 2,
            "layout": 10
        },
        {
            "firstKey": 34,
            "secondKey": 3,
            "layout": 10
        },
        {
            "firstKey": 34,
            "secondKey": 4,
            "layout": 10
        },
        {
            "firstKey": 34,
            "secondKey": 5,
            "layout": 10
        },
        {
            "firstKey": 34,
            "secondKey": 6,
            "layout": 10
        },
        {
            "firstKey": 34,
            "secondKey": 7,
            "layout": 8
        },
        {
            "firstKey": 34,
            "secondKey": 8,
            "layout": 8
        },
        {
            "firstKey": 34,
            "secondKey": 9,
            "layout": 8
        },
        {
            "firstKey": 34,
            "secondKey": 10,
            "layout": 8
        },
        {
            "firstKey": 34,
            "secondKey": 11,
            "layout": 8
        },
        {
            "firstKey": 34,
            "secondKey": 12,
            "layout": 8
        },
        {
            "firstKey": 34,
            "secondKey": 13,
            "layout": 8
        },
        {
            "firstKey": 34,
            "secondKey": 14,
            "layout": 8
        },
        {
            "firstKey": 34,
            "secondKey": 15,
            "layout": 8
        },
        {
            "firstKey": 34,
            "secondKey": 16,
            "layout": 8
        },
        {
            "firstKey": 34,
            "secondKey": 17,
            "layout": 8
        },
        {
            "firstKey": 34,
            "secondKey": 18,
            "layout": 8
        },
        {
            "firstKey": 34,
            "secondKey": 19,
            "layout": 8
        },
        {
            "firstKey": 34,
            "secondKey": 20,
            "layout": 8
        },
        {
            "firstKey": 34,
            "secondKey": 21,
            "layout": 8
        },
        {
            "firstKey": 34,
            "secondKey": 22,
            "layout": 8
        },
        {
            "firstKey": 34,
            "secondKey": 23,
            "layout": 8
        },
        {
            "firstKey": 34,
            "secondKey": 24,
            "layout": 8
        },
        {
            "firstKey": 34,
            "secondKey": 25,
            "layout": 8
        },
        {
            "firstKey": 34,
            "secondKey": 26,
            "layout": 8
        },
        {
            "firstKey": 34,
            "secondKey": 27,
            "layout": 8
        },
        {
            "firstKey": 34,
            "secondKey": 28,
            "layout": 8
        },
        {
            "firstKey": 34,
            "secondKey": 29,
            "layout": 8
        },
        {
            "firstKey": 34,
            "secondKey": 30,
            "layout": 8
        },
        {
            "firstKey": 34,
            "secondKey": 31,
            "layout": 8
        },
        {
            "firstKey": 34,
            "secondKey": 32,
            "layout": 8
        },
        {
            "firstKey": 34,
            "secondKey": 33,
            "layout": 6
        },
        {
            "firstKey": 34,
            "secondKey": 35,
            "layout": 8
        },
        {
            "firstKey": 34,
            "secondKey": 36,
            "layout": 8
        },
        {
            "firstKey": 34,
            "secondKey": 37,
            "layout": 8
        },
        {
            "firstKey": 34,
            "secondKey": 38,
            "layout": 8
        },
        {
            "firstKey": 34,
            "secondKey": 39,
            "layout": 8
        },
        {
            "firstKey": 34,
            "secondKey": 40,
            "layout": 8
        },
        {
            "firstKey": 34,
            "secondKey": 41,
            "layout": 8
        },
        {
            "firstKey": 34,
            "secondKey": 42,
            "layout": 8
        },
        {
            "firstKey": 34,
            "secondKey": 43,
            "layout": 8
        },
        {
            "firstKey": 34,
            "secondKey": 44,
            "layout": 8
        },
        {
            "firstKey": 34,
            "secondKey": 45,
            "layout": 8
        },
        {
            "firstKey": 34,
            "secondKey": 46,
            "layout": 8
        },
        {
            "firstKey": 34,
            "secondKey": 47,
            "layout": 8
        },
        {
            "firstKey": 34,
            "secondKey": 48,
            "layout": 8
        },
        {
            "firstKey": 34,
            "secondKey": 49,
            "layout": 8
        },
        {
            "firstKey": 34,
            "secondKey": 50,
            "layout": 8
        },
        {
            "firstKey": 34,
            "secondKey": 51,
            "layout": 8
        },
        {
            "firstKey": 34,
            "secondKey": 52,
            "layout": 8
        },
        {
            "firstKey": 34,
            "secondKey": 53,
            "layout": 8
        },
        {
            "firstKey": 34,
            "secondKey": 54,
            "layout": 8
        },
        {
            "firstKey": 34,
            "secondKey": 55,
            "layout": 10
        },
        {
            "firstKey": 35,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 35,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 35,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 35,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 35,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 35,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 35,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 35,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 35,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 35,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 35,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 35,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 35,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 35,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 35,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 35,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 35,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 35,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 35,
            "secondKey": 18,
            "layout": 3
        },
        {
            "firstKey": 35,
            "secondKey": 19,
            "layout": 3
        },
        {
            "firstKey": 35,
            "secondKey": 20,
            "layout": 3
        },
        {
            "firstKey": 35,
            "secondKey": 21,
            "layout": 3
        },
        {
            "firstKey": 35,
            "secondKey": 22,
            "layout": 3
        },
        {
            "firstKey": 35,
            "secondKey": 23,
            "layout": 3
        },
        {
            "firstKey": 35,
            "secondKey": 24,
            "layout": 3
        },
        {
            "firstKey": 35,
            "secondKey": 25,
            "layout": 3
        },
        {
            "firstKey": 35,
            "secondKey": 26,
            "layout": 3
        },
        {
            "firstKey": 35,
            "secondKey": 27,
            "layout": 3
        },
        {
            "firstKey": 35,
            "secondKey": 28,
            "layout": 3
        },
        {
            "firstKey": 35,
            "secondKey": 29,
            "layout": 3
        },
        {
            "firstKey": 35,
            "secondKey": 30,
            "layout": 3
        },
        {
            "firstKey": 35,
            "secondKey": 31,
            "layout": 3
        },
        {
            "firstKey": 35,
            "secondKey": 32,
            "layout": 3
        },
        {
            "firstKey": 35,
            "secondKey": 33,
            "layout": 3
        },
        {
            "firstKey": 35,
            "secondKey": 34,
            "layout": 3
        },
        {
            "firstKey": 35,
            "secondKey": 36,
            "layout": 1
        },
        {
            "firstKey": 35,
            "secondKey": 37,
            "layout": 3
        },
        {
            "firstKey": 35,
            "secondKey": 38,
            "layout": 3
        },
        {
            "firstKey": 35,
            "secondKey": 39,
            "layout": 3
        },
        {
            "firstKey": 35,
            "secondKey": 40,
            "layout": 3
        },
        {
            "firstKey": 35,
            "secondKey": 41,
            "layout": 3
        },
        {
            "firstKey": 35,
            "secondKey": 42,
            "layout": 3
        },
        {
            "firstKey": 35,
            "secondKey": 43,
            "layout": 3
        },
        {
            "firstKey": 35,
            "secondKey": 44,
            "layout": 3
        },
        {
            "firstKey": 35,
            "secondKey": 45,
            "layout": 3
        },
        {
            "firstKey": 35,
            "secondKey": 46,
            "layout": 3
        },
        {
            "firstKey": 35,
            "secondKey": 47,
            "layout": 3
        },
        {
            "firstKey": 35,
            "secondKey": 48,
            "layout": 3
        },
        {
            "firstKey": 35,
            "secondKey": 49,
            "layout": 3
        },
        {
            "firstKey": 35,
            "secondKey": 50,
            "layout": 3
        },
        {
            "firstKey": 35,
            "secondKey": 51,
            "layout": 3
        },
        {
            "firstKey": 35,
            "secondKey": 52,
            "layout": 3
        },
        {
            "firstKey": 35,
            "secondKey": 53,
            "layout": 3
        },
        {
            "firstKey": 35,
            "secondKey": 54,
            "layout": 3
        },
        {
            "firstKey": 35,
            "secondKey": 55,
            "layout": 5
        },
        {
            "firstKey": 36,
            "secondKey": 0,
            "layout": 9
        },
        {
            "firstKey": 36,
            "secondKey": 1,
            "layout": 9
        },
        {
            "firstKey": 36,
            "secondKey": 2,
            "layout": 9
        },
        {
            "firstKey": 36,
            "secondKey": 3,
            "layout": 9
        },
        {
            "firstKey": 36,
            "secondKey": 4,
            "layout": 9
        },
        {
            "firstKey": 36,
            "secondKey": 5,
            "layout": 9
        },
        {
            "firstKey": 36,
            "secondKey": 6,
            "layout": 9
        },
        {
            "firstKey": 36,
            "secondKey": 7,
            "layout": 7
        },
        {
            "firstKey": 36,
            "secondKey": 8,
            "layout": 7
        },
        {
            "firstKey": 36,
            "secondKey": 9,
            "layout": 7
        },
        {
            "firstKey": 36,
            "secondKey": 10,
            "layout": 7
        },
        {
            "firstKey": 36,
            "secondKey": 11,
            "layout": 7
        },
        {
            "firstKey": 36,
            "secondKey": 12,
            "layout": 7
        },
        {
            "firstKey": 36,
            "secondKey": 13,
            "layout": 7
        },
        {
            "firstKey": 36,
            "secondKey": 14,
            "layout": 7
        },
        {
            "firstKey": 36,
            "secondKey": 15,
            "layout": 7
        },
        {
            "firstKey": 36,
            "secondKey": 16,
            "layout": 7
        },
        {
            "firstKey": 36,
            "secondKey": 17,
            "layout": 7
        },
        {
            "firstKey": 36,
            "secondKey": 18,
            "layout": 7
        },
        {
            "firstKey": 36,
            "secondKey": 19,
            "layout": 7
        },
        {
            "firstKey": 36,
            "secondKey": 20,
            "layout": 7
        },
        {
            "firstKey": 36,
            "secondKey": 21,
            "layout": 7
        },
        {
            "firstKey": 36,
            "secondKey": 22,
            "layout": 7
        },
        {
            "firstKey": 36,
            "secondKey": 23,
            "layout": 7
        },
        {
            "firstKey": 36,
            "secondKey": 24,
            "layout": 7
        },
        {
            "firstKey": 36,
            "secondKey": 25,
            "layout": 7
        },
        {
            "firstKey": 36,
            "secondKey": 26,
            "layout": 7
        },
        {
            "firstKey": 36,
            "secondKey": 27,
            "layout": 7
        },
        {
            "firstKey": 36,
            "secondKey": 28,
            "layout": 7
        },
        {
            "firstKey": 36,
            "secondKey": 29,
            "layout": 7
        },
        {
            "firstKey": 36,
            "secondKey": 30,
            "layout": 7
        },
        {
            "firstKey": 36,
            "secondKey": 31,
            "layout": 7
        },
        {
            "firstKey": 36,
            "secondKey": 32,
            "layout": 7
        },
        {
            "firstKey": 36,
            "secondKey": 33,
            "layout": 7
        },
        {
            "firstKey": 36,
            "secondKey": 34,
            "layout": 7
        },
        {
            "firstKey": 36,
            "secondKey": 35,
            "layout": 5
        },
        {
            "firstKey": 36,
            "secondKey": 37,
            "layout": 7
        },
        {
            "firstKey": 36,
            "secondKey": 38,
            "layout": 7
        },
        {
            "firstKey": 36,
            "secondKey": 39,
            "layout": 7
        },
        {
            "firstKey": 36,
            "secondKey": 40,
            "layout": 7
        },
        {
            "firstKey": 36,
            "secondKey": 41,
            "layout": 7
        },
        {
            "firstKey": 36,
            "secondKey": 42,
            "layout": 7
        },
        {
            "firstKey": 36,
            "secondKey": 43,
            "layout": 7
        },
        {
            "firstKey": 36,
            "secondKey": 44,
            "layout": 7
        },
        {
            "firstKey": 36,
            "secondKey": 45,
            "layout": 7
        },
        {
            "firstKey": 36,
            "secondKey": 46,
            "layout": 7
        },
        {
            "firstKey": 36,
            "secondKey": 47,
            "layout": 7
        },
        {
            "firstKey": 36,
            "secondKey": 48,
            "layout": 7
        },
        {
            "firstKey": 36,
            "secondKey": 49,
            "layout": 7
        },
        {
            "firstKey": 36,
            "secondKey": 50,
            "layout": 7
        },
        {
            "firstKey": 36,
            "secondKey": 51,
            "layout": 7
        },
        {
            "firstKey": 36,
            "secondKey": 52,
            "layout": 7
        },
        {
            "firstKey": 36,
            "secondKey": 53,
            "layout": 7
        },
        {
            "firstKey": 36,
            "secondKey": 54,
            "layout": 7
        },
        {
            "firstKey": 36,
            "secondKey": 55,
            "layout": 9
        },
        {
            "firstKey": 37,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 37,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 37,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 37,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 37,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 37,
            "secondKey": 5,
            "layout": 6
        },
        {
            "firstKey": 37,
            "secondKey": 6,
            "layout": 6
        },
        {
            "firstKey": 37,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 37,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 37,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 37,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 37,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 37,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 37,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 37,
            "secondKey": 14,
            "layout": 4
        },
        {
            "firstKey": 37,
            "secondKey": 15,
            "layout": 4
        },
        {
            "firstKey": 37,
            "secondKey": 16,
            "layout": 4
        },
        {
            "firstKey": 37,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 37,
            "secondKey": 18,
            "layout": 4
        },
        {
            "firstKey": 37,
            "secondKey": 19,
            "layout": 4
        },
        {
            "firstKey": 37,
            "secondKey": 20,
            "layout": 4
        },
        {
            "firstKey": 37,
            "secondKey": 21,
            "layout": 4
        },
        {
            "firstKey": 37,
            "secondKey": 22,
            "layout": 4
        },
        {
            "firstKey": 37,
            "secondKey": 23,
            "layout": 4
        },
        {
            "firstKey": 37,
            "secondKey": 24,
            "layout": 4
        },
        {
            "firstKey": 37,
            "secondKey": 25,
            "layout": 4
        },
        {
            "firstKey": 37,
            "secondKey": 26,
            "layout": 4
        },
        {
            "firstKey": 37,
            "secondKey": 27,
            "layout": 4
        },
        {
            "firstKey": 37,
            "secondKey": 28,
            "layout": 4
        },
        {
            "firstKey": 37,
            "secondKey": 29,
            "layout": 4
        },
        {
            "firstKey": 37,
            "secondKey": 30,
            "layout": 4
        },
        {
            "firstKey": 37,
            "secondKey": 31,
            "layout": 4
        },
        {
            "firstKey": 37,
            "secondKey": 32,
            "layout": 4
        },
        {
            "firstKey": 37,
            "secondKey": 33,
            "layout": 4
        },
        {
            "firstKey": 37,
            "secondKey": 34,
            "layout": 4
        },
        {
            "firstKey": 37,
            "secondKey": 35,
            "layout": 4
        },
        {
            "firstKey": 37,
            "secondKey": 36,
            "layout": 4
        },
        {
            "firstKey": 37,
            "secondKey": 38,
            "layout": 1
        },
        {
            "firstKey": 37,
            "secondKey": 39,
            "layout": 4
        },
        {
            "firstKey": 37,
            "secondKey": 40,
            "layout": 4
        },
        {
            "firstKey": 37,
            "secondKey": 41,
            "layout": 4
        },
        {
            "firstKey": 37,
            "secondKey": 42,
            "layout": 4
        },
        {
            "firstKey": 37,
            "secondKey": 43,
            "layout": 4
        },
        {
            "firstKey": 37,
            "secondKey": 44,
            "layout": 4
        },
        {
            "firstKey": 37,
            "secondKey": 45,
            "layout": 4
        },
        {
            "firstKey": 37,
            "secondKey": 46,
            "layout": 4
        },
        {
            "firstKey": 37,
            "secondKey": 47,
            "layout": 4
        },
        {
            "firstKey": 37,
            "secondKey": 48,
            "layout": 4
        },
        {
            "firstKey": 37,
            "secondKey": 49,
            "layout": 4
        },
        {
            "firstKey": 37,
            "secondKey": 50,
            "layout": 4
        },
        {
            "firstKey": 37,
            "secondKey": 51,
            "layout": 4
        },
        {
            "firstKey": 37,
            "secondKey": 52,
            "layout": 4
        },
        {
            "firstKey": 37,
            "secondKey": 53,
            "layout": 4
        },
        {
            "firstKey": 37,
            "secondKey": 54,
            "layout": 4
        },
        {
            "firstKey": 37,
            "secondKey": 55,
            "layout": 6
        },
        {
            "firstKey": 38,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 38,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 38,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 38,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 38,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 38,
            "secondKey": 5,
            "layout": 6
        },
        {
            "firstKey": 38,
            "secondKey": 6,
            "layout": 6
        },
        {
            "firstKey": 38,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 38,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 38,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 38,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 38,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 38,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 38,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 38,
            "secondKey": 14,
            "layout": 4
        },
        {
            "firstKey": 38,
            "secondKey": 15,
            "layout": 4
        },
        {
            "firstKey": 38,
            "secondKey": 16,
            "layout": 4
        },
        {
            "firstKey": 38,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 38,
            "secondKey": 18,
            "layout": 4
        },
        {
            "firstKey": 38,
            "secondKey": 19,
            "layout": 4
        },
        {
            "firstKey": 38,
            "secondKey": 20,
            "layout": 4
        },
        {
            "firstKey": 38,
            "secondKey": 21,
            "layout": 4
        },
        {
            "firstKey": 38,
            "secondKey": 22,
            "layout": 4
        },
        {
            "firstKey": 38,
            "secondKey": 23,
            "layout": 4
        },
        {
            "firstKey": 38,
            "secondKey": 24,
            "layout": 4
        },
        {
            "firstKey": 38,
            "secondKey": 25,
            "layout": 4
        },
        {
            "firstKey": 38,
            "secondKey": 26,
            "layout": 4
        },
        {
            "firstKey": 38,
            "secondKey": 27,
            "layout": 4
        },
        {
            "firstKey": 38,
            "secondKey": 28,
            "layout": 4
        },
        {
            "firstKey": 38,
            "secondKey": 29,
            "layout": 4
        },
        {
            "firstKey": 38,
            "secondKey": 30,
            "layout": 4
        },
        {
            "firstKey": 38,
            "secondKey": 31,
            "layout": 4
        },
        {
            "firstKey": 38,
            "secondKey": 32,
            "layout": 4
        },
        {
            "firstKey": 38,
            "secondKey": 33,
            "layout": 4
        },
        {
            "firstKey": 38,
            "secondKey": 34,
            "layout": 4
        },
        {
            "firstKey": 38,
            "secondKey": 35,
            "layout": 4
        },
        {
            "firstKey": 38,
            "secondKey": 36,
            "layout": 4
        },
        {
            "firstKey": 38,
            "secondKey": 37,
            "layout": 1
        },
        {
            "firstKey": 38,
            "secondKey": 39,
            "layout": 4
        },
        {
            "firstKey": 38,
            "secondKey": 40,
            "layout": 4
        },
        {
            "firstKey": 38,
            "secondKey": 41,
            "layout": 4
        },
        {
            "firstKey": 38,
            "secondKey": 42,
            "layout": 4
        },
        {
            "firstKey": 38,
            "secondKey": 43,
            "layout": 4
        },
        {
            "firstKey": 38,
            "secondKey": 44,
            "layout": 4
        },
        {
            "firstKey": 38,
            "secondKey": 45,
            "layout": 4
        },
        {
            "firstKey": 38,
            "secondKey": 46,
            "layout": 4
        },
        {
            "firstKey": 38,
            "secondKey": 47,
            "layout": 4
        },
        {
            "firstKey": 38,
            "secondKey": 48,
            "layout": 4
        },
        {
            "firstKey": 38,
            "secondKey": 49,
            "layout": 4
        },
        {
            "firstKey": 38,
            "secondKey": 50,
            "layout": 4
        },
        {
            "firstKey": 38,
            "secondKey": 51,
            "layout": 4
        },
        {
            "firstKey": 38,
            "secondKey": 52,
            "layout": 4
        },
        {
            "firstKey": 38,
            "secondKey": 53,
            "layout": 4
        },
        {
            "firstKey": 38,
            "secondKey": 54,
            "layout": 4
        },
        {
            "firstKey": 38,
            "secondKey": 55,
            "layout": 6
        },
        {
            "firstKey": 39,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 39,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 39,
            "secondKey": 2,
            "layout": 7
        },
        {
            "firstKey": 39,
            "secondKey": 3,
            "layout": 7
        },
        {
            "firstKey": 39,
            "secondKey": 4,
            "layout": 7
        },
        {
            "firstKey": 39,
            "secondKey": 5,
            "layout": 7
        },
        {
            "firstKey": 39,
            "secondKey": 6,
            "layout": 7
        },
        {
            "firstKey": 39,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 39,
            "secondKey": 8,
            "layout": 5
        },
        {
            "firstKey": 39,
            "secondKey": 9,
            "layout": 5
        },
        {
            "firstKey": 39,
            "secondKey": 10,
            "layout": 5
        },
        {
            "firstKey": 39,
            "secondKey": 11,
            "layout": 5
        },
        {
            "firstKey": 39,
            "secondKey": 12,
            "layout": 5
        },
        {
            "firstKey": 39,
            "secondKey": 13,
            "layout": 5
        },
        {
            "firstKey": 39,
            "secondKey": 14,
            "layout": 5
        },
        {
            "firstKey": 39,
            "secondKey": 15,
            "layout": 5
        },
        {
            "firstKey": 39,
            "secondKey": 16,
            "layout": 5
        },
        {
            "firstKey": 39,
            "secondKey": 17,
            "layout": 5
        },
        {
            "firstKey": 39,
            "secondKey": 18,
            "layout": 5
        },
        {
            "firstKey": 39,
            "secondKey": 19,
            "layout": 5
        },
        {
            "firstKey": 39,
            "secondKey": 20,
            "layout": 5
        },
        {
            "firstKey": 39,
            "secondKey": 21,
            "layout": 5
        },
        {
            "firstKey": 39,
            "secondKey": 22,
            "layout": 5
        },
        {
            "firstKey": 39,
            "secondKey": 23,
            "layout": 5
        },
        {
            "firstKey": 39,
            "secondKey": 24,
            "layout": 5
        },
        {
            "firstKey": 39,
            "secondKey": 25,
            "layout": 5
        },
        {
            "firstKey": 39,
            "secondKey": 26,
            "layout": 5
        },
        {
            "firstKey": 39,
            "secondKey": 27,
            "layout": 5
        },
        {
            "firstKey": 39,
            "secondKey": 28,
            "layout": 5
        },
        {
            "firstKey": 39,
            "secondKey": 29,
            "layout": 5
        },
        {
            "firstKey": 39,
            "secondKey": 30,
            "layout": 5
        },
        {
            "firstKey": 39,
            "secondKey": 31,
            "layout": 5
        },
        {
            "firstKey": 39,
            "secondKey": 32,
            "layout": 5
        },
        {
            "firstKey": 39,
            "secondKey": 33,
            "layout": 5
        },
        {
            "firstKey": 39,
            "secondKey": 34,
            "layout": 5
        },
        {
            "firstKey": 39,
            "secondKey": 35,
            "layout": 5
        },
        {
            "firstKey": 39,
            "secondKey": 36,
            "layout": 5
        },
        {
            "firstKey": 39,
            "secondKey": 37,
            "layout": 5
        },
        {
            "firstKey": 39,
            "secondKey": 38,
            "layout": 5
        },
        {
            "firstKey": 39,
            "secondKey": 40,
            "layout": 2
        },
        {
            "firstKey": 39,
            "secondKey": 41,
            "layout": 5
        },
        {
            "firstKey": 39,
            "secondKey": 42,
            "layout": 5
        },
        {
            "firstKey": 39,
            "secondKey": 43,
            "layout": 5
        },
        {
            "firstKey": 39,
            "secondKey": 44,
            "layout": 5
        },
        {
            "firstKey": 39,
            "secondKey": 45,
            "layout": 5
        },
        {
            "firstKey": 39,
            "secondKey": 46,
            "layout": 5
        },
        {
            "firstKey": 39,
            "secondKey": 47,
            "layout": 5
        },
        {
            "firstKey": 39,
            "secondKey": 48,
            "layout": 5
        },
        {
            "firstKey": 39,
            "secondKey": 49,
            "layout": 5
        },
        {
            "firstKey": 39,
            "secondKey": 50,
            "layout": 5
        },
        {
            "firstKey": 39,
            "secondKey": 51,
            "layout": 5
        },
        {
            "firstKey": 39,
            "secondKey": 52,
            "layout": 5
        },
        {
            "firstKey": 39,
            "secondKey": 53,
            "layout": 5
        },
        {
            "firstKey": 39,
            "secondKey": 54,
            "layout": 5
        },
        {
            "firstKey": 39,
            "secondKey": 55,
            "layout": 7
        },
        {
            "firstKey": 40,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 40,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 40,
            "secondKey": 2,
            "layout": 7
        },
        {
            "firstKey": 40,
            "secondKey": 3,
            "layout": 7
        },
        {
            "firstKey": 40,
            "secondKey": 4,
            "layout": 7
        },
        {
            "firstKey": 40,
            "secondKey": 5,
            "layout": 7
        },
        {
            "firstKey": 40,
            "secondKey": 6,
            "layout": 7
        },
        {
            "firstKey": 40,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 40,
            "secondKey": 8,
            "layout": 5
        },
        {
            "firstKey": 40,
            "secondKey": 9,
            "layout": 5
        },
        {
            "firstKey": 40,
            "secondKey": 10,
            "layout": 5
        },
        {
            "firstKey": 40,
            "secondKey": 11,
            "layout": 5
        },
        {
            "firstKey": 40,
            "secondKey": 12,
            "layout": 5
        },
        {
            "firstKey": 40,
            "secondKey": 13,
            "layout": 5
        },
        {
            "firstKey": 40,
            "secondKey": 14,
            "layout": 5
        },
        {
            "firstKey": 40,
            "secondKey": 15,
            "layout": 5
        },
        {
            "firstKey": 40,
            "secondKey": 16,
            "layout": 5
        },
        {
            "firstKey": 40,
            "secondKey": 17,
            "layout": 5
        },
        {
            "firstKey": 40,
            "secondKey": 18,
            "layout": 5
        },
        {
            "firstKey": 40,
            "secondKey": 19,
            "layout": 5
        },
        {
            "firstKey": 40,
            "secondKey": 20,
            "layout": 5
        },
        {
            "firstKey": 40,
            "secondKey": 21,
            "layout": 5
        },
        {
            "firstKey": 40,
            "secondKey": 22,
            "layout": 5
        },
        {
            "firstKey": 40,
            "secondKey": 23,
            "layout": 5
        },
        {
            "firstKey": 40,
            "secondKey": 24,
            "layout": 5
        },
        {
            "firstKey": 40,
            "secondKey": 25,
            "layout": 5
        },
        {
            "firstKey": 40,
            "secondKey": 26,
            "layout": 5
        },
        {
            "firstKey": 40,
            "secondKey": 27,
            "layout": 5
        },
        {
            "firstKey": 40,
            "secondKey": 28,
            "layout": 5
        },
        {
            "firstKey": 40,
            "secondKey": 29,
            "layout": 5
        },
        {
            "firstKey": 40,
            "secondKey": 30,
            "layout": 5
        },
        {
            "firstKey": 40,
            "secondKey": 31,
            "layout": 5
        },
        {
            "firstKey": 40,
            "secondKey": 32,
            "layout": 5
        },
        {
            "firstKey": 40,
            "secondKey": 33,
            "layout": 5
        },
        {
            "firstKey": 40,
            "secondKey": 34,
            "layout": 5
        },
        {
            "firstKey": 40,
            "secondKey": 35,
            "layout": 5
        },
        {
            "firstKey": 40,
            "secondKey": 36,
            "layout": 5
        },
        {
            "firstKey": 40,
            "secondKey": 37,
            "layout": 5
        },
        {
            "firstKey": 40,
            "secondKey": 38,
            "layout": 5
        },
        {
            "firstKey": 40,
            "secondKey": 39,
            "layout": 2
        },
        {
            "firstKey": 40,
            "secondKey": 41,
            "layout": 5
        },
        {
            "firstKey": 40,
            "secondKey": 42,
            "layout": 5
        },
        {
            "firstKey": 40,
            "secondKey": 43,
            "layout": 5
        },
        {
            "firstKey": 40,
            "secondKey": 44,
            "layout": 5
        },
        {
            "firstKey": 40,
            "secondKey": 45,
            "layout": 5
        },
        {
            "firstKey": 40,
            "secondKey": 46,
            "layout": 5
        },
        {
            "firstKey": 40,
            "secondKey": 47,
            "layout": 5
        },
        {
            "firstKey": 40,
            "secondKey": 48,
            "layout": 5
        },
        {
            "firstKey": 40,
            "secondKey": 49,
            "layout": 5
        },
        {
            "firstKey": 40,
            "secondKey": 50,
            "layout": 5
        },
        {
            "firstKey": 40,
            "secondKey": 51,
            "layout": 5
        },
        {
            "firstKey": 40,
            "secondKey": 52,
            "layout": 5
        },
        {
            "firstKey": 40,
            "secondKey": 53,
            "layout": 5
        },
        {
            "firstKey": 40,
            "secondKey": 54,
            "layout": 5
        },
        {
            "firstKey": 40,
            "secondKey": 55,
            "layout": 7
        },
        {
            "firstKey": 41,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 41,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 41,
            "secondKey": 2,
            "layout": 7
        },
        {
            "firstKey": 41,
            "secondKey": 3,
            "layout": 7
        },
        {
            "firstKey": 41,
            "secondKey": 4,
            "layout": 7
        },
        {
            "firstKey": 41,
            "secondKey": 5,
            "layout": 7
        },
        {
            "firstKey": 41,
            "secondKey": 6,
            "layout": 7
        },
        {
            "firstKey": 41,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 41,
            "secondKey": 8,
            "layout": 5
        },
        {
            "firstKey": 41,
            "secondKey": 9,
            "layout": 5
        },
        {
            "firstKey": 41,
            "secondKey": 10,
            "layout": 5
        },
        {
            "firstKey": 41,
            "secondKey": 11,
            "layout": 5
        },
        {
            "firstKey": 41,
            "secondKey": 12,
            "layout": 5
        },
        {
            "firstKey": 41,
            "secondKey": 13,
            "layout": 5
        },
        {
            "firstKey": 41,
            "secondKey": 14,
            "layout": 5
        },
        {
            "firstKey": 41,
            "secondKey": 15,
            "layout": 5
        },
        {
            "firstKey": 41,
            "secondKey": 16,
            "layout": 5
        },
        {
            "firstKey": 41,
            "secondKey": 17,
            "layout": 5
        },
        {
            "firstKey": 41,
            "secondKey": 18,
            "layout": 5
        },
        {
            "firstKey": 41,
            "secondKey": 19,
            "layout": 5
        },
        {
            "firstKey": 41,
            "secondKey": 20,
            "layout": 5
        },
        {
            "firstKey": 41,
            "secondKey": 21,
            "layout": 5
        },
        {
            "firstKey": 41,
            "secondKey": 22,
            "layout": 5
        },
        {
            "firstKey": 41,
            "secondKey": 23,
            "layout": 5
        },
        {
            "firstKey": 41,
            "secondKey": 24,
            "layout": 5
        },
        {
            "firstKey": 41,
            "secondKey": 25,
            "layout": 5
        },
        {
            "firstKey": 41,
            "secondKey": 26,
            "layout": 5
        },
        {
            "firstKey": 41,
            "secondKey": 27,
            "layout": 5
        },
        {
            "firstKey": 41,
            "secondKey": 28,
            "layout": 5
        },
        {
            "firstKey": 41,
            "secondKey": 29,
            "layout": 5
        },
        {
            "firstKey": 41,
            "secondKey": 30,
            "layout": 5
        },
        {
            "firstKey": 41,
            "secondKey": 31,
            "layout": 5
        },
        {
            "firstKey": 41,
            "secondKey": 32,
            "layout": 5
        },
        {
            "firstKey": 41,
            "secondKey": 33,
            "layout": 5
        },
        {
            "firstKey": 41,
            "secondKey": 34,
            "layout": 5
        },
        {
            "firstKey": 41,
            "secondKey": 35,
            "layout": 5
        },
        {
            "firstKey": 41,
            "secondKey": 36,
            "layout": 5
        },
        {
            "firstKey": 41,
            "secondKey": 37,
            "layout": 5
        },
        {
            "firstKey": 41,
            "secondKey": 38,
            "layout": 5
        },
        {
            "firstKey": 41,
            "secondKey": 39,
            "layout": 5
        },
        {
            "firstKey": 41,
            "secondKey": 40,
            "layout": 5
        },
        {
            "firstKey": 41,
            "secondKey": 42,
            "layout": 1
        },
        {
            "firstKey": 41,
            "secondKey": 43,
            "layout": 2
        },
        {
            "firstKey": 41,
            "secondKey": 44,
            "layout": 2
        },
        {
            "firstKey": 41,
            "secondKey": 45,
            "layout": 5
        },
        {
            "firstKey": 41,
            "secondKey": 46,
            "layout": 5
        },
        {
            "firstKey": 41,
            "secondKey": 47,
            "layout": 5
        },
        {
            "firstKey": 41,
            "secondKey": 48,
            "layout": 5
        },
        {
            "firstKey": 41,
            "secondKey": 49,
            "layout": 5
        },
        {
            "firstKey": 41,
            "secondKey": 50,
            "layout": 5
        },
        {
            "firstKey": 41,
            "secondKey": 51,
            "layout": 5
        },
        {
            "firstKey": 41,
            "secondKey": 52,
            "layout": 5
        },
        {
            "firstKey": 41,
            "secondKey": 53,
            "layout": 5
        },
        {
            "firstKey": 41,
            "secondKey": 54,
            "layout": 5
        },
        {
            "firstKey": 41,
            "secondKey": 55,
            "layout": 7
        },
        {
            "firstKey": 42,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 42,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 42,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 42,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 42,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 42,
            "secondKey": 5,
            "layout": 6
        },
        {
            "firstKey": 42,
            "secondKey": 6,
            "layout": 6
        },
        {
            "firstKey": 42,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 42,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 42,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 42,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 42,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 42,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 42,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 42,
            "secondKey": 14,
            "layout": 4
        },
        {
            "firstKey": 42,
            "secondKey": 15,
            "layout": 4
        },
        {
            "firstKey": 42,
            "secondKey": 16,
            "layout": 4
        },
        {
            "firstKey": 42,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 42,
            "secondKey": 18,
            "layout": 4
        },
        {
            "firstKey": 42,
            "secondKey": 19,
            "layout": 4
        },
        {
            "firstKey": 42,
            "secondKey": 20,
            "layout": 4
        },
        {
            "firstKey": 42,
            "secondKey": 21,
            "layout": 4
        },
        {
            "firstKey": 42,
            "secondKey": 22,
            "layout": 4
        },
        {
            "firstKey": 42,
            "secondKey": 23,
            "layout": 4
        },
        {
            "firstKey": 42,
            "secondKey": 24,
            "layout": 4
        },
        {
            "firstKey": 42,
            "secondKey": 25,
            "layout": 4
        },
        {
            "firstKey": 42,
            "secondKey": 26,
            "layout": 4
        },
        {
            "firstKey": 42,
            "secondKey": 27,
            "layout": 4
        },
        {
            "firstKey": 42,
            "secondKey": 28,
            "layout": 4
        },
        {
            "firstKey": 42,
            "secondKey": 29,
            "layout": 4
        },
        {
            "firstKey": 42,
            "secondKey": 30,
            "layout": 4
        },
        {
            "firstKey": 42,
            "secondKey": 31,
            "layout": 4
        },
        {
            "firstKey": 42,
            "secondKey": 32,
            "layout": 4
        },
        {
            "firstKey": 42,
            "secondKey": 33,
            "layout": 4
        },
        {
            "firstKey": 42,
            "secondKey": 34,
            "layout": 4
        },
        {
            "firstKey": 42,
            "secondKey": 35,
            "layout": 4
        },
        {
            "firstKey": 42,
            "secondKey": 36,
            "layout": 4
        },
        {
            "firstKey": 42,
            "secondKey": 37,
            "layout": 4
        },
        {
            "firstKey": 42,
            "secondKey": 38,
            "layout": 4
        },
        {
            "firstKey": 42,
            "secondKey": 39,
            "layout": 4
        },
        {
            "firstKey": 42,
            "secondKey": 40,
            "layout": 4
        },
        {
            "firstKey": 42,
            "secondKey": 41,
            "layout": 0
        },
        {
            "firstKey": 42,
            "secondKey": 43,
            "layout": 1
        },
        {
            "firstKey": 42,
            "secondKey": 44,
            "layout": 1
        },
        {
            "firstKey": 42,
            "secondKey": 45,
            "layout": 4
        },
        {
            "firstKey": 42,
            "secondKey": 46,
            "layout": 4
        },
        {
            "firstKey": 42,
            "secondKey": 47,
            "layout": 4
        },
        {
            "firstKey": 42,
            "secondKey": 48,
            "layout": 4
        },
        {
            "firstKey": 42,
            "secondKey": 49,
            "layout": 4
        },
        {
            "firstKey": 42,
            "secondKey": 50,
            "layout": 4
        },
        {
            "firstKey": 42,
            "secondKey": 51,
            "layout": 4
        },
        {
            "firstKey": 42,
            "secondKey": 52,
            "layout": 4
        },
        {
            "firstKey": 42,
            "secondKey": 53,
            "layout": 4
        },
        {
            "firstKey": 42,
            "secondKey": 54,
            "layout": 4
        },
        {
            "firstKey": 42,
            "secondKey": 55,
            "layout": 6
        },
        {
            "firstKey": 43,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 43,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 43,
            "secondKey": 2,
            "layout": 7
        },
        {
            "firstKey": 43,
            "secondKey": 3,
            "layout": 7
        },
        {
            "firstKey": 43,
            "secondKey": 4,
            "layout": 7
        },
        {
            "firstKey": 43,
            "secondKey": 5,
            "layout": 7
        },
        {
            "firstKey": 43,
            "secondKey": 6,
            "layout": 7
        },
        {
            "firstKey": 43,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 43,
            "secondKey": 8,
            "layout": 5
        },
        {
            "firstKey": 43,
            "secondKey": 9,
            "layout": 5
        },
        {
            "firstKey": 43,
            "secondKey": 10,
            "layout": 5
        },
        {
            "firstKey": 43,
            "secondKey": 11,
            "layout": 5
        },
        {
            "firstKey": 43,
            "secondKey": 12,
            "layout": 5
        },
        {
            "firstKey": 43,
            "secondKey": 13,
            "layout": 5
        },
        {
            "firstKey": 43,
            "secondKey": 14,
            "layout": 5
        },
        {
            "firstKey": 43,
            "secondKey": 15,
            "layout": 5
        },
        {
            "firstKey": 43,
            "secondKey": 16,
            "layout": 5
        },
        {
            "firstKey": 43,
            "secondKey": 17,
            "layout": 5
        },
        {
            "firstKey": 43,
            "secondKey": 18,
            "layout": 5
        },
        {
            "firstKey": 43,
            "secondKey": 19,
            "layout": 5
        },
        {
            "firstKey": 43,
            "secondKey": 20,
            "layout": 5
        },
        {
            "firstKey": 43,
            "secondKey": 21,
            "layout": 5
        },
        {
            "firstKey": 43,
            "secondKey": 22,
            "layout": 5
        },
        {
            "firstKey": 43,
            "secondKey": 23,
            "layout": 5
        },
        {
            "firstKey": 43,
            "secondKey": 24,
            "layout": 5
        },
        {
            "firstKey": 43,
            "secondKey": 25,
            "layout": 5
        },
        {
            "firstKey": 43,
            "secondKey": 26,
            "layout": 5
        },
        {
            "firstKey": 43,
            "secondKey": 27,
            "layout": 5
        },
        {
            "firstKey": 43,
            "secondKey": 28,
            "layout": 5
        },
        {
            "firstKey": 43,
            "secondKey": 29,
            "layout": 5
        },
        {
            "firstKey": 43,
            "secondKey": 30,
            "layout": 5
        },
        {
            "firstKey": 43,
            "secondKey": 31,
            "layout": 5
        },
        {
            "firstKey": 43,
            "secondKey": 32,
            "layout": 5
        },
        {
            "firstKey": 43,
            "secondKey": 33,
            "layout": 5
        },
        {
            "firstKey": 43,
            "secondKey": 34,
            "layout": 5
        },
        {
            "firstKey": 43,
            "secondKey": 35,
            "layout": 5
        },
        {
            "firstKey": 43,
            "secondKey": 36,
            "layout": 5
        },
        {
            "firstKey": 43,
            "secondKey": 37,
            "layout": 5
        },
        {
            "firstKey": 43,
            "secondKey": 38,
            "layout": 5
        },
        {
            "firstKey": 43,
            "secondKey": 39,
            "layout": 5
        },
        {
            "firstKey": 43,
            "secondKey": 40,
            "layout": 5
        },
        {
            "firstKey": 43,
            "secondKey": 41,
            "layout": 2
        },
        {
            "firstKey": 43,
            "secondKey": 42,
            "layout": 2
        },
        {
            "firstKey": 43,
            "secondKey": 44,
            "layout": 1
        },
        {
            "firstKey": 43,
            "secondKey": 45,
            "layout": 5
        },
        {
            "firstKey": 43,
            "secondKey": 46,
            "layout": 5
        },
        {
            "firstKey": 43,
            "secondKey": 47,
            "layout": 5
        },
        {
            "firstKey": 43,
            "secondKey": 48,
            "layout": 5
        },
        {
            "firstKey": 43,
            "secondKey": 49,
            "layout": 5
        },
        {
            "firstKey": 43,
            "secondKey": 50,
            "layout": 5
        },
        {
            "firstKey": 43,
            "secondKey": 51,
            "layout": 5
        },
        {
            "firstKey": 43,
            "secondKey": 52,
            "layout": 5
        },
        {
            "firstKey": 43,
            "secondKey": 53,
            "layout": 5
        },
        {
            "firstKey": 43,
            "secondKey": 54,
            "layout": 5
        },
        {
            "firstKey": 43,
            "secondKey": 55,
            "layout": 7
        },
        {
            "firstKey": 44,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 44,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 44,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 44,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 44,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 44,
            "secondKey": 5,
            "layout": 6
        },
        {
            "firstKey": 44,
            "secondKey": 6,
            "layout": 6
        },
        {
            "firstKey": 44,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 44,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 44,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 44,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 44,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 44,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 44,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 44,
            "secondKey": 14,
            "layout": 4
        },
        {
            "firstKey": 44,
            "secondKey": 15,
            "layout": 4
        },
        {
            "firstKey": 44,
            "secondKey": 16,
            "layout": 4
        },
        {
            "firstKey": 44,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 44,
            "secondKey": 18,
            "layout": 4
        },
        {
            "firstKey": 44,
            "secondKey": 19,
            "layout": 4
        },
        {
            "firstKey": 44,
            "secondKey": 20,
            "layout": 4
        },
        {
            "firstKey": 44,
            "secondKey": 21,
            "layout": 4
        },
        {
            "firstKey": 44,
            "secondKey": 22,
            "layout": 4
        },
        {
            "firstKey": 44,
            "secondKey": 23,
            "layout": 4
        },
        {
            "firstKey": 44,
            "secondKey": 24,
            "layout": 4
        },
        {
            "firstKey": 44,
            "secondKey": 25,
            "layout": 4
        },
        {
            "firstKey": 44,
            "secondKey": 26,
            "layout": 4
        },
        {
            "firstKey": 44,
            "secondKey": 27,
            "layout": 4
        },
        {
            "firstKey": 44,
            "secondKey": 28,
            "layout": 4
        },
        {
            "firstKey": 44,
            "secondKey": 29,
            "layout": 4
        },
        {
            "firstKey": 44,
            "secondKey": 30,
            "layout": 4
        },
        {
            "firstKey": 44,
            "secondKey": 31,
            "layout": 4
        },
        {
            "firstKey": 44,
            "secondKey": 32,
            "layout": 4
        },
        {
            "firstKey": 44,
            "secondKey": 33,
            "layout": 4
        },
        {
            "firstKey": 44,
            "secondKey": 34,
            "layout": 4
        },
        {
            "firstKey": 44,
            "secondKey": 35,
            "layout": 4
        },
        {
            "firstKey": 44,
            "secondKey": 36,
            "layout": 4
        },
        {
            "firstKey": 44,
            "secondKey": 37,
            "layout": 4
        },
        {
            "firstKey": 44,
            "secondKey": 38,
            "layout": 4
        },
        {
            "firstKey": 44,
            "secondKey": 39,
            "layout": 4
        },
        {
            "firstKey": 44,
            "secondKey": 40,
            "layout": 4
        },
        {
            "firstKey": 44,
            "secondKey": 41,
            "layout": 1
        },
        {
            "firstKey": 44,
            "secondKey": 42,
            "layout": 1
        },
        {
            "firstKey": 44,
            "secondKey": 43,
            "layout": 0
        },
        {
            "firstKey": 44,
            "secondKey": 45,
            "layout": 4
        },
        {
            "firstKey": 44,
            "secondKey": 46,
            "layout": 4
        },
        {
            "firstKey": 44,
            "secondKey": 47,
            "layout": 4
        },
        {
            "firstKey": 44,
            "secondKey": 48,
            "layout": 4
        },
        {
            "firstKey": 44,
            "secondKey": 49,
            "layout": 4
        },
        {
            "firstKey": 44,
            "secondKey": 50,
            "layout": 4
        },
        {
            "firstKey": 44,
            "secondKey": 51,
            "layout": 4
        },
        {
            "firstKey": 44,
            "secondKey": 52,
            "layout": 4
        },
        {
            "firstKey": 44,
            "secondKey": 53,
            "layout": 4
        },
        {
            "firstKey": 44,
            "secondKey": 54,
            "layout": 4
        },
        {
            "firstKey": 44,
            "secondKey": 55,
            "layout": 6
        },
        {
            "firstKey": 45,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 45,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 45,
            "secondKey": 2,
            "layout": 7
        },
        {
            "firstKey": 45,
            "secondKey": 3,
            "layout": 7
        },
        {
            "firstKey": 45,
            "secondKey": 4,
            "layout": 7
        },
        {
            "firstKey": 45,
            "secondKey": 5,
            "layout": 7
        },
        {
            "firstKey": 45,
            "secondKey": 6,
            "layout": 7
        },
        {
            "firstKey": 45,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 45,
            "secondKey": 8,
            "layout": 5
        },
        {
            "firstKey": 45,
            "secondKey": 9,
            "layout": 5
        },
        {
            "firstKey": 45,
            "secondKey": 10,
            "layout": 5
        },
        {
            "firstKey": 45,
            "secondKey": 11,
            "layout": 5
        },
        {
            "firstKey": 45,
            "secondKey": 12,
            "layout": 5
        },
        {
            "firstKey": 45,
            "secondKey": 13,
            "layout": 5
        },
        {
            "firstKey": 45,
            "secondKey": 14,
            "layout": 5
        },
        {
            "firstKey": 45,
            "secondKey": 15,
            "layout": 5
        },
        {
            "firstKey": 45,
            "secondKey": 16,
            "layout": 5
        },
        {
            "firstKey": 45,
            "secondKey": 17,
            "layout": 5
        },
        {
            "firstKey": 45,
            "secondKey": 18,
            "layout": 5
        },
        {
            "firstKey": 45,
            "secondKey": 19,
            "layout": 5
        },
        {
            "firstKey": 45,
            "secondKey": 20,
            "layout": 5
        },
        {
            "firstKey": 45,
            "secondKey": 21,
            "layout": 5
        },
        {
            "firstKey": 45,
            "secondKey": 22,
            "layout": 5
        },
        {
            "firstKey": 45,
            "secondKey": 23,
            "layout": 5
        },
        {
            "firstKey": 45,
            "secondKey": 24,
            "layout": 5
        },
        {
            "firstKey": 45,
            "secondKey": 25,
            "layout": 5
        },
        {
            "firstKey": 45,
            "secondKey": 26,
            "layout": 5
        },
        {
            "firstKey": 45,
            "secondKey": 27,
            "layout": 5
        },
        {
            "firstKey": 45,
            "secondKey": 28,
            "layout": 5
        },
        {
            "firstKey": 45,
            "secondKey": 29,
            "layout": 5
        },
        {
            "firstKey": 45,
            "secondKey": 30,
            "layout": 5
        },
        {
            "firstKey": 45,
            "secondKey": 31,
            "layout": 5
        },
        {
            "firstKey": 45,
            "secondKey": 32,
            "layout": 5
        },
        {
            "firstKey": 45,
            "secondKey": 33,
            "layout": 5
        },
        {
            "firstKey": 45,
            "secondKey": 34,
            "layout": 5
        },
        {
            "firstKey": 45,
            "secondKey": 35,
            "layout": 5
        },
        {
            "firstKey": 45,
            "secondKey": 36,
            "layout": 5
        },
        {
            "firstKey": 45,
            "secondKey": 37,
            "layout": 5
        },
        {
            "firstKey": 45,
            "secondKey": 38,
            "layout": 5
        },
        {
            "firstKey": 45,
            "secondKey": 39,
            "layout": 5
        },
        {
            "firstKey": 45,
            "secondKey": 40,
            "layout": 5
        },
        {
            "firstKey": 45,
            "secondKey": 41,
            "layout": 5
        },
        {
            "firstKey": 45,
            "secondKey": 42,
            "layout": 5
        },
        {
            "firstKey": 45,
            "secondKey": 43,
            "layout": 5
        },
        {
            "firstKey": 45,
            "secondKey": 44,
            "layout": 5
        },
        {
            "firstKey": 45,
            "secondKey": 46,
            "layout": 2
        },
        {
            "firstKey": 45,
            "secondKey": 47,
            "layout": 5
        },
        {
            "firstKey": 45,
            "secondKey": 48,
            "layout": 5
        },
        {
            "firstKey": 45,
            "secondKey": 49,
            "layout": 5
        },
        {
            "firstKey": 45,
            "secondKey": 50,
            "layout": 5
        },
        {
            "firstKey": 45,
            "secondKey": 51,
            "layout": 5
        },
        {
            "firstKey": 45,
            "secondKey": 52,
            "layout": 5
        },
        {
            "firstKey": 45,
            "secondKey": 53,
            "layout": 5
        },
        {
            "firstKey": 45,
            "secondKey": 54,
            "layout": 5
        },
        {
            "firstKey": 45,
            "secondKey": 55,
            "layout": 7
        },
        {
            "firstKey": 46,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 46,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 46,
            "secondKey": 2,
            "layout": 7
        },
        {
            "firstKey": 46,
            "secondKey": 3,
            "layout": 7
        },
        {
            "firstKey": 46,
            "secondKey": 4,
            "layout": 7
        },
        {
            "firstKey": 46,
            "secondKey": 5,
            "layout": 7
        },
        {
            "firstKey": 46,
            "secondKey": 6,
            "layout": 7
        },
        {
            "firstKey": 46,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 46,
            "secondKey": 8,
            "layout": 5
        },
        {
            "firstKey": 46,
            "secondKey": 9,
            "layout": 5
        },
        {
            "firstKey": 46,
            "secondKey": 10,
            "layout": 5
        },
        {
            "firstKey": 46,
            "secondKey": 11,
            "layout": 5
        },
        {
            "firstKey": 46,
            "secondKey": 12,
            "layout": 5
        },
        {
            "firstKey": 46,
            "secondKey": 13,
            "layout": 5
        },
        {
            "firstKey": 46,
            "secondKey": 14,
            "layout": 5
        },
        {
            "firstKey": 46,
            "secondKey": 15,
            "layout": 5
        },
        {
            "firstKey": 46,
            "secondKey": 16,
            "layout": 5
        },
        {
            "firstKey": 46,
            "secondKey": 17,
            "layout": 5
        },
        {
            "firstKey": 46,
            "secondKey": 18,
            "layout": 5
        },
        {
            "firstKey": 46,
            "secondKey": 19,
            "layout": 5
        },
        {
            "firstKey": 46,
            "secondKey": 20,
            "layout": 5
        },
        {
            "firstKey": 46,
            "secondKey": 21,
            "layout": 5
        },
        {
            "firstKey": 46,
            "secondKey": 22,
            "layout": 5
        },
        {
            "firstKey": 46,
            "secondKey": 23,
            "layout": 5
        },
        {
            "firstKey": 46,
            "secondKey": 24,
            "layout": 5
        },
        {
            "firstKey": 46,
            "secondKey": 25,
            "layout": 5
        },
        {
            "firstKey": 46,
            "secondKey": 26,
            "layout": 5
        },
        {
            "firstKey": 46,
            "secondKey": 27,
            "layout": 5
        },
        {
            "firstKey": 46,
            "secondKey": 28,
            "layout": 5
        },
        {
            "firstKey": 46,
            "secondKey": 29,
            "layout": 5
        },
        {
            "firstKey": 46,
            "secondKey": 30,
            "layout": 5
        },
        {
            "firstKey": 46,
            "secondKey": 31,
            "layout": 5
        },
        {
            "firstKey": 46,
            "secondKey": 32,
            "layout": 5
        },
        {
            "firstKey": 46,
            "secondKey": 33,
            "layout": 5
        },
        {
            "firstKey": 46,
            "secondKey": 34,
            "layout": 5
        },
        {
            "firstKey": 46,
            "secondKey": 35,
            "layout": 5
        },
        {
            "firstKey": 46,
            "secondKey": 36,
            "layout": 5
        },
        {
            "firstKey": 46,
            "secondKey": 37,
            "layout": 5
        },
        {
            "firstKey": 46,
            "secondKey": 38,
            "layout": 5
        },
        {
            "firstKey": 46,
            "secondKey": 39,
            "layout": 5
        },
        {
            "firstKey": 46,
            "secondKey": 40,
            "layout": 5
        },
        {
            "firstKey": 46,
            "secondKey": 41,
            "layout": 5
        },
        {
            "firstKey": 46,
            "secondKey": 42,
            "layout": 5
        },
        {
            "firstKey": 46,
            "secondKey": 43,
            "layout": 5
        },
        {
            "firstKey": 46,
            "secondKey": 44,
            "layout": 5
        },
        {
            "firstKey": 46,
            "secondKey": 45,
            "layout": 2
        },
        {
            "firstKey": 46,
            "secondKey": 47,
            "layout": 5
        },
        {
            "firstKey": 46,
            "secondKey": 48,
            "layout": 5
        },
        {
            "firstKey": 46,
            "secondKey": 49,
            "layout": 5
        },
        {
            "firstKey": 46,
            "secondKey": 50,
            "layout": 5
        },
        {
            "firstKey": 46,
            "secondKey": 51,
            "layout": 5
        },
        {
            "firstKey": 46,
            "secondKey": 52,
            "layout": 5
        },
        {
            "firstKey": 46,
            "secondKey": 53,
            "layout": 5
        },
        {
            "firstKey": 46,
            "secondKey": 54,
            "layout": 5
        },
        {
            "firstKey": 46,
            "secondKey": 55,
            "layout": 7
        },
        {
            "firstKey": 47,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 47,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 47,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 47,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 47,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 47,
            "secondKey": 5,
            "layout": 6
        },
        {
            "firstKey": 47,
            "secondKey": 6,
            "layout": 6
        },
        {
            "firstKey": 47,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 47,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 47,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 47,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 47,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 47,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 47,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 47,
            "secondKey": 14,
            "layout": 4
        },
        {
            "firstKey": 47,
            "secondKey": 15,
            "layout": 4
        },
        {
            "firstKey": 47,
            "secondKey": 16,
            "layout": 4
        },
        {
            "firstKey": 47,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 47,
            "secondKey": 18,
            "layout": 4
        },
        {
            "firstKey": 47,
            "secondKey": 19,
            "layout": 4
        },
        {
            "firstKey": 47,
            "secondKey": 20,
            "layout": 4
        },
        {
            "firstKey": 47,
            "secondKey": 21,
            "layout": 4
        },
        {
            "firstKey": 47,
            "secondKey": 22,
            "layout": 4
        },
        {
            "firstKey": 47,
            "secondKey": 23,
            "layout": 4
        },
        {
            "firstKey": 47,
            "secondKey": 24,
            "layout": 4
        },
        {
            "firstKey": 47,
            "secondKey": 25,
            "layout": 4
        },
        {
            "firstKey": 47,
            "secondKey": 26,
            "layout": 4
        },
        {
            "firstKey": 47,
            "secondKey": 27,
            "layout": 4
        },
        {
            "firstKey": 47,
            "secondKey": 28,
            "layout": 4
        },
        {
            "firstKey": 47,
            "secondKey": 29,
            "layout": 4
        },
        {
            "firstKey": 47,
            "secondKey": 30,
            "layout": 4
        },
        {
            "firstKey": 47,
            "secondKey": 31,
            "layout": 4
        },
        {
            "firstKey": 47,
            "secondKey": 32,
            "layout": 4
        },
        {
            "firstKey": 47,
            "secondKey": 33,
            "layout": 4
        },
        {
            "firstKey": 47,
            "secondKey": 34,
            "layout": 4
        },
        {
            "firstKey": 47,
            "secondKey": 35,
            "layout": 4
        },
        {
            "firstKey": 47,
            "secondKey": 36,
            "layout": 4
        },
        {
            "firstKey": 47,
            "secondKey": 37,
            "layout": 4
        },
        {
            "firstKey": 47,
            "secondKey": 38,
            "layout": 4
        },
        {
            "firstKey": 47,
            "secondKey": 39,
            "layout": 4
        },
        {
            "firstKey": 47,
            "secondKey": 40,
            "layout": 4
        },
        {
            "firstKey": 47,
            "secondKey": 41,
            "layout": 4
        },
        {
            "firstKey": 47,
            "secondKey": 42,
            "layout": 4
        },
        {
            "firstKey": 47,
            "secondKey": 43,
            "layout": 4
        },
        {
            "firstKey": 47,
            "secondKey": 44,
            "layout": 4
        },
        {
            "firstKey": 47,
            "secondKey": 45,
            "layout": 4
        },
        {
            "firstKey": 47,
            "secondKey": 46,
            "layout": 4
        },
        {
            "firstKey": 47,
            "secondKey": 48,
            "layout": 1
        },
        {
            "firstKey": 47,
            "secondKey": 49,
            "layout": 4
        },
        {
            "firstKey": 47,
            "secondKey": 50,
            "layout": 4
        },
        {
            "firstKey": 47,
            "secondKey": 51,
            "layout": 4
        },
        {
            "firstKey": 47,
            "secondKey": 52,
            "layout": 4
        },
        {
            "firstKey": 47,
            "secondKey": 53,
            "layout": 4
        },
        {
            "firstKey": 47,
            "secondKey": 54,
            "layout": 4
        },
        {
            "firstKey": 47,
            "secondKey": 55,
            "layout": 6
        },
        {
            "firstKey": 48,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 48,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 48,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 48,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 48,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 48,
            "secondKey": 5,
            "layout": 6
        },
        {
            "firstKey": 48,
            "secondKey": 6,
            "layout": 6
        },
        {
            "firstKey": 48,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 48,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 48,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 48,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 48,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 48,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 48,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 48,
            "secondKey": 14,
            "layout": 4
        },
        {
            "firstKey": 48,
            "secondKey": 15,
            "layout": 4
        },
        {
            "firstKey": 48,
            "secondKey": 16,
            "layout": 4
        },
        {
            "firstKey": 48,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 48,
            "secondKey": 18,
            "layout": 4
        },
        {
            "firstKey": 48,
            "secondKey": 19,
            "layout": 4
        },
        {
            "firstKey": 48,
            "secondKey": 20,
            "layout": 4
        },
        {
            "firstKey": 48,
            "secondKey": 21,
            "layout": 4
        },
        {
            "firstKey": 48,
            "secondKey": 22,
            "layout": 4
        },
        {
            "firstKey": 48,
            "secondKey": 23,
            "layout": 4
        },
        {
            "firstKey": 48,
            "secondKey": 24,
            "layout": 4
        },
        {
            "firstKey": 48,
            "secondKey": 25,
            "layout": 4
        },
        {
            "firstKey": 48,
            "secondKey": 26,
            "layout": 4
        },
        {
            "firstKey": 48,
            "secondKey": 27,
            "layout": 4
        },
        {
            "firstKey": 48,
            "secondKey": 28,
            "layout": 4
        },
        {
            "firstKey": 48,
            "secondKey": 29,
            "layout": 4
        },
        {
            "firstKey": 48,
            "secondKey": 30,
            "layout": 4
        },
        {
            "firstKey": 48,
            "secondKey": 31,
            "layout": 4
        },
        {
            "firstKey": 48,
            "secondKey": 32,
            "layout": 4
        },
        {
            "firstKey": 48,
            "secondKey": 33,
            "layout": 4
        },
        {
            "firstKey": 48,
            "secondKey": 34,
            "layout": 4
        },
        {
            "firstKey": 48,
            "secondKey": 35,
            "layout": 4
        },
        {
            "firstKey": 48,
            "secondKey": 36,
            "layout": 4
        },
        {
            "firstKey": 48,
            "secondKey": 37,
            "layout": 4
        },
        {
            "firstKey": 48,
            "secondKey": 38,
            "layout": 4
        },
        {
            "firstKey": 48,
            "secondKey": 39,
            "layout": 4
        },
        {
            "firstKey": 48,
            "secondKey": 40,
            "layout": 4
        },
        {
            "firstKey": 48,
            "secondKey": 41,
            "layout": 4
        },
        {
            "firstKey": 48,
            "secondKey": 42,
            "layout": 4
        },
        {
            "firstKey": 48,
            "secondKey": 43,
            "layout": 4
        },
        {
            "firstKey": 48,
            "secondKey": 44,
            "layout": 4
        },
        {
            "firstKey": 48,
            "secondKey": 45,
            "layout": 4
        },
        {
            "firstKey": 48,
            "secondKey": 46,
            "layout": 4
        },
        {
            "firstKey": 48,
            "secondKey": 47,
            "layout": 1
        },
        {
            "firstKey": 48,
            "secondKey": 49,
            "layout": 4
        },
        {
            "firstKey": 48,
            "secondKey": 50,
            "layout": 4
        },
        {
            "firstKey": 48,
            "secondKey": 51,
            "layout": 4
        },
        {
            "firstKey": 48,
            "secondKey": 52,
            "layout": 4
        },
        {
            "firstKey": 48,
            "secondKey": 53,
            "layout": 4
        },
        {
            "firstKey": 48,
            "secondKey": 54,
            "layout": 4
        },
        {
            "firstKey": 48,
            "secondKey": 55,
            "layout": 6
        },
        {
            "firstKey": 49,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 49,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 49,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 49,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 49,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 49,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 49,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 49,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 49,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 49,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 49,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 49,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 49,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 49,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 49,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 49,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 49,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 49,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 49,
            "secondKey": 18,
            "layout": 3
        },
        {
            "firstKey": 49,
            "secondKey": 19,
            "layout": 3
        },
        {
            "firstKey": 49,
            "secondKey": 20,
            "layout": 3
        },
        {
            "firstKey": 49,
            "secondKey": 21,
            "layout": 3
        },
        {
            "firstKey": 49,
            "secondKey": 22,
            "layout": 3
        },
        {
            "firstKey": 49,
            "secondKey": 23,
            "layout": 3
        },
        {
            "firstKey": 49,
            "secondKey": 24,
            "layout": 3
        },
        {
            "firstKey": 49,
            "secondKey": 25,
            "layout": 3
        },
        {
            "firstKey": 49,
            "secondKey": 26,
            "layout": 3
        },
        {
            "firstKey": 49,
            "secondKey": 27,
            "layout": 3
        },
        {
            "firstKey": 49,
            "secondKey": 28,
            "layout": 3
        },
        {
            "firstKey": 49,
            "secondKey": 29,
            "layout": 3
        },
        {
            "firstKey": 49,
            "secondKey": 30,
            "layout": 3
        },
        {
            "firstKey": 49,
            "secondKey": 31,
            "layout": 3
        },
        {
            "firstKey": 49,
            "secondKey": 32,
            "layout": 3
        },
        {
            "firstKey": 49,
            "secondKey": 33,
            "layout": 3
        },
        {
            "firstKey": 49,
            "secondKey": 34,
            "layout": 3
        },
        {
            "firstKey": 49,
            "secondKey": 35,
            "layout": 3
        },
        {
            "firstKey": 49,
            "secondKey": 36,
            "layout": 3
        },
        {
            "firstKey": 49,
            "secondKey": 37,
            "layout": 3
        },
        {
            "firstKey": 49,
            "secondKey": 38,
            "layout": 3
        },
        {
            "firstKey": 49,
            "secondKey": 39,
            "layout": 3
        },
        {
            "firstKey": 49,
            "secondKey": 40,
            "layout": 3
        },
        {
            "firstKey": 49,
            "secondKey": 41,
            "layout": 3
        },
        {
            "firstKey": 49,
            "secondKey": 42,
            "layout": 3
        },
        {
            "firstKey": 49,
            "secondKey": 43,
            "layout": 3
        },
        {
            "firstKey": 49,
            "secondKey": 44,
            "layout": 3
        },
        {
            "firstKey": 49,
            "secondKey": 45,
            "layout": 3
        },
        {
            "firstKey": 49,
            "secondKey": 46,
            "layout": 3
        },
        {
            "firstKey": 49,
            "secondKey": 47,
            "layout": 3
        },
        {
            "firstKey": 49,
            "secondKey": 48,
            "layout": 3
        },
        {
            "firstKey": 49,
            "secondKey": 50,
            "layout": 3
        },
        {
            "firstKey": 49,
            "secondKey": 51,
            "layout": 3
        },
        {
            "firstKey": 49,
            "secondKey": 52,
            "layout": 3
        },
        {
            "firstKey": 49,
            "secondKey": 53,
            "layout": 3
        },
        {
            "firstKey": 49,
            "secondKey": 54,
            "layout": 3
        },
        {
            "firstKey": 49,
            "secondKey": 55,
            "layout": 5
        },
        {
            "firstKey": 50,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 50,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 50,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 50,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 50,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 50,
            "secondKey": 5,
            "layout": 6
        },
        {
            "firstKey": 50,
            "secondKey": 6,
            "layout": 6
        },
        {
            "firstKey": 50,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 50,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 50,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 50,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 50,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 50,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 50,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 50,
            "secondKey": 14,
            "layout": 4
        },
        {
            "firstKey": 50,
            "secondKey": 15,
            "layout": 4
        },
        {
            "firstKey": 50,
            "secondKey": 16,
            "layout": 4
        },
        {
            "firstKey": 50,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 50,
            "secondKey": 18,
            "layout": 4
        },
        {
            "firstKey": 50,
            "secondKey": 19,
            "layout": 4
        },
        {
            "firstKey": 50,
            "secondKey": 20,
            "layout": 4
        },
        {
            "firstKey": 50,
            "secondKey": 21,
            "layout": 4
        },
        {
            "firstKey": 50,
            "secondKey": 22,
            "layout": 4
        },
        {
            "firstKey": 50,
            "secondKey": 23,
            "layout": 4
        },
        {
            "firstKey": 50,
            "secondKey": 24,
            "layout": 4
        },
        {
            "firstKey": 50,
            "secondKey": 25,
            "layout": 4
        },
        {
            "firstKey": 50,
            "secondKey": 26,
            "layout": 4
        },
        {
            "firstKey": 50,
            "secondKey": 27,
            "layout": 4
        },
        {
            "firstKey": 50,
            "secondKey": 28,
            "layout": 4
        },
        {
            "firstKey": 50,
            "secondKey": 29,
            "layout": 4
        },
        {
            "firstKey": 50,
            "secondKey": 30,
            "layout": 4
        },
        {
            "firstKey": 50,
            "secondKey": 31,
            "layout": 4
        },
        {
            "firstKey": 50,
            "secondKey": 32,
            "layout": 4
        },
        {
            "firstKey": 50,
            "secondKey": 33,
            "layout": 4
        },
        {
            "firstKey": 50,
            "secondKey": 34,
            "layout": 4
        },
        {
            "firstKey": 50,
            "secondKey": 35,
            "layout": 4
        },
        {
            "firstKey": 50,
            "secondKey": 36,
            "layout": 4
        },
        {
            "firstKey": 50,
            "secondKey": 37,
            "layout": 4
        },
        {
            "firstKey": 50,
            "secondKey": 38,
            "layout": 4
        },
        {
            "firstKey": 50,
            "secondKey": 39,
            "layout": 4
        },
        {
            "firstKey": 50,
            "secondKey": 40,
            "layout": 4
        },
        {
            "firstKey": 50,
            "secondKey": 41,
            "layout": 4
        },
        {
            "firstKey": 50,
            "secondKey": 42,
            "layout": 4
        },
        {
            "firstKey": 50,
            "secondKey": 43,
            "layout": 4
        },
        {
            "firstKey": 50,
            "secondKey": 44,
            "layout": 4
        },
        {
            "firstKey": 50,
            "secondKey": 45,
            "layout": 4
        },
        {
            "firstKey": 50,
            "secondKey": 46,
            "layout": 4
        },
        {
            "firstKey": 50,
            "secondKey": 47,
            "layout": 4
        },
        {
            "firstKey": 50,
            "secondKey": 48,
            "layout": 4
        },
        {
            "firstKey": 50,
            "secondKey": 49,
            "layout": 4
        },
        {
            "firstKey": 50,
            "secondKey": 51,
            "layout": 4
        },
        {
            "firstKey": 50,
            "secondKey": 52,
            "layout": 4
        },
        {
            "firstKey": 50,
            "secondKey": 53,
            "layout": 4
        },
        {
            "firstKey": 50,
            "secondKey": 54,
            "layout": 4
        },
        {
            "firstKey": 50,
            "secondKey": 55,
            "layout": 6
        },
        {
            "firstKey": 51,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 51,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 51,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 51,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 51,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 51,
            "secondKey": 5,
            "layout": 6
        },
        {
            "firstKey": 51,
            "secondKey": 6,
            "layout": 6
        },
        {
            "firstKey": 51,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 51,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 51,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 51,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 51,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 51,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 51,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 51,
            "secondKey": 14,
            "layout": 4
        },
        {
            "firstKey": 51,
            "secondKey": 15,
            "layout": 4
        },
        {
            "firstKey": 51,
            "secondKey": 16,
            "layout": 4
        },
        {
            "firstKey": 51,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 51,
            "secondKey": 18,
            "layout": 4
        },
        {
            "firstKey": 51,
            "secondKey": 19,
            "layout": 4
        },
        {
            "firstKey": 51,
            "secondKey": 20,
            "layout": 4
        },
        {
            "firstKey": 51,
            "secondKey": 21,
            "layout": 4
        },
        {
            "firstKey": 51,
            "secondKey": 22,
            "layout": 4
        },
        {
            "firstKey": 51,
            "secondKey": 23,
            "layout": 4
        },
        {
            "firstKey": 51,
            "secondKey": 24,
            "layout": 4
        },
        {
            "firstKey": 51,
            "secondKey": 25,
            "layout": 4
        },
        {
            "firstKey": 51,
            "secondKey": 26,
            "layout": 4
        },
        {
            "firstKey": 51,
            "secondKey": 27,
            "layout": 4
        },
        {
            "firstKey": 51,
            "secondKey": 28,
            "layout": 4
        },
        {
            "firstKey": 51,
            "secondKey": 29,
            "layout": 4
        },
        {
            "firstKey": 51,
            "secondKey": 30,
            "layout": 4
        },
        {
            "firstKey": 51,
            "secondKey": 31,
            "layout": 4
        },
        {
            "firstKey": 51,
            "secondKey": 32,
            "layout": 4
        },
        {
            "firstKey": 51,
            "secondKey": 33,
            "layout": 4
        },
        {
            "firstKey": 51,
            "secondKey": 34,
            "layout": 4
        },
        {
            "firstKey": 51,
            "secondKey": 35,
            "layout": 4
        },
        {
            "firstKey": 51,
            "secondKey": 36,
            "layout": 4
        },
        {
            "firstKey": 51,
            "secondKey": 37,
            "layout": 4
        },
        {
            "firstKey": 51,
            "secondKey": 38,
            "layout": 4
        },
        {
            "firstKey": 51,
            "secondKey": 39,
            "layout": 4
        },
        {
            "firstKey": 51,
            "secondKey": 40,
            "layout": 4
        },
        {
            "firstKey": 51,
            "secondKey": 41,
            "layout": 4
        },
        {
            "firstKey": 51,
            "secondKey": 42,
            "layout": 4
        },
        {
            "firstKey": 51,
            "secondKey": 43,
            "layout": 4
        },
        {
            "firstKey": 51,
            "secondKey": 44,
            "layout": 4
        },
        {
            "firstKey": 51,
            "secondKey": 45,
            "layout": 4
        },
        {
            "firstKey": 51,
            "secondKey": 46,
            "layout": 4
        },
        {
            "firstKey": 51,
            "secondKey": 47,
            "layout": 4
        },
        {
            "firstKey": 51,
            "secondKey": 48,
            "layout": 4
        },
        {
            "firstKey": 51,
            "secondKey": 49,
            "layout": 4
        },
        {
            "firstKey": 51,
            "secondKey": 50,
            "layout": 4
        },
        {
            "firstKey": 51,
            "secondKey": 52,
            "layout": 1
        },
        {
            "firstKey": 51,
            "secondKey": 53,
            "layout": 4
        },
        {
            "firstKey": 51,
            "secondKey": 54,
            "layout": 4
        },
        {
            "firstKey": 51,
            "secondKey": 55,
            "layout": 6
        },
        {
            "firstKey": 52,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 52,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 52,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 52,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 52,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 52,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 52,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 52,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 52,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 52,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 52,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 52,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 52,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 52,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 52,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 52,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 52,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 52,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 52,
            "secondKey": 18,
            "layout": 3
        },
        {
            "firstKey": 52,
            "secondKey": 19,
            "layout": 3
        },
        {
            "firstKey": 52,
            "secondKey": 20,
            "layout": 3
        },
        {
            "firstKey": 52,
            "secondKey": 21,
            "layout": 3
        },
        {
            "firstKey": 52,
            "secondKey": 22,
            "layout": 3
        },
        {
            "firstKey": 52,
            "secondKey": 23,
            "layout": 3
        },
        {
            "firstKey": 52,
            "secondKey": 24,
            "layout": 3
        },
        {
            "firstKey": 52,
            "secondKey": 25,
            "layout": 3
        },
        {
            "firstKey": 52,
            "secondKey": 26,
            "layout": 3
        },
        {
            "firstKey": 52,
            "secondKey": 27,
            "layout": 3
        },
        {
            "firstKey": 52,
            "secondKey": 28,
            "layout": 3
        },
        {
            "firstKey": 52,
            "secondKey": 29,
            "layout": 3
        },
        {
            "firstKey": 52,
            "secondKey": 30,
            "layout": 3
        },
        {
            "firstKey": 52,
            "secondKey": 31,
            "layout": 3
        },
        {
            "firstKey": 52,
            "secondKey": 32,
            "layout": 3
        },
        {
            "firstKey": 52,
            "secondKey": 33,
            "layout": 3
        },
        {
            "firstKey": 52,
            "secondKey": 34,
            "layout": 3
        },
        {
            "firstKey": 52,
            "secondKey": 35,
            "layout": 3
        },
        {
            "firstKey": 52,
            "secondKey": 36,
            "layout": 3
        },
        {
            "firstKey": 52,
            "secondKey": 37,
            "layout": 3
        },
        {
            "firstKey": 52,
            "secondKey": 38,
            "layout": 3
        },
        {
            "firstKey": 52,
            "secondKey": 39,
            "layout": 3
        },
        {
            "firstKey": 52,
            "secondKey": 40,
            "layout": 3
        },
        {
            "firstKey": 52,
            "secondKey": 41,
            "layout": 3
        },
        {
            "firstKey": 52,
            "secondKey": 42,
            "layout": 3
        },
        {
            "firstKey": 52,
            "secondKey": 43,
            "layout": 3
        },
        {
            "firstKey": 52,
            "secondKey": 44,
            "layout": 3
        },
        {
            "firstKey": 52,
            "secondKey": 45,
            "layout": 3
        },
        {
            "firstKey": 52,
            "secondKey": 46,
            "layout": 3
        },
        {
            "firstKey": 52,
            "secondKey": 47,
            "layout": 3
        },
        {
            "firstKey": 52,
            "secondKey": 48,
            "layout": 3
        },
        {
            "firstKey": 52,
            "secondKey": 49,
            "layout": 3
        },
        {
            "firstKey": 52,
            "secondKey": 50,
            "layout": 3
        },
        {
            "firstKey": 52,
            "secondKey": 51,
            "layout": 0
        },
        {
            "firstKey": 52,
            "secondKey": 53,
            "layout": 3
        },
        {
            "firstKey": 52,
            "secondKey": 54,
            "layout": 3
        },
        {
            "firstKey": 52,
            "secondKey": 55,
            "layout": 5
        },
        {
            "firstKey": 53,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 53,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 53,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 53,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 53,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 53,
            "secondKey": 5,
            "layout": 6
        },
        {
            "firstKey": 53,
            "secondKey": 6,
            "layout": 6
        },
        {
            "firstKey": 53,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 53,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 53,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 53,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 53,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 53,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 53,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 53,
            "secondKey": 14,
            "layout": 4
        },
        {
            "firstKey": 53,
            "secondKey": 15,
            "layout": 4
        },
        {
            "firstKey": 53,
            "secondKey": 16,
            "layout": 4
        },
        {
            "firstKey": 53,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 53,
            "secondKey": 18,
            "layout": 4
        },
        {
            "firstKey": 53,
            "secondKey": 19,
            "layout": 4
        },
        {
            "firstKey": 53,
            "secondKey": 20,
            "layout": 4
        },
        {
            "firstKey": 53,
            "secondKey": 21,
            "layout": 4
        },
        {
            "firstKey": 53,
            "secondKey": 22,
            "layout": 4
        },
        {
            "firstKey": 53,
            "secondKey": 23,
            "layout": 4
        },
        {
            "firstKey": 53,
            "secondKey": 24,
            "layout": 4
        },
        {
            "firstKey": 53,
            "secondKey": 25,
            "layout": 4
        },
        {
            "firstKey": 53,
            "secondKey": 26,
            "layout": 4
        },
        {
            "firstKey": 53,
            "secondKey": 27,
            "layout": 4
        },
        {
            "firstKey": 53,
            "secondKey": 28,
            "layout": 4
        },
        {
            "firstKey": 53,
            "secondKey": 29,
            "layout": 4
        },
        {
            "firstKey": 53,
            "secondKey": 30,
            "layout": 4
        },
        {
            "firstKey": 53,
            "secondKey": 31,
            "layout": 4
        },
        {
            "firstKey": 53,
            "secondKey": 32,
            "layout": 4
        },
        {
            "firstKey": 53,
            "secondKey": 33,
            "layout": 4
        },
        {
            "firstKey": 53,
            "secondKey": 34,
            "layout": 4
        },
        {
            "firstKey": 53,
            "secondKey": 35,
            "layout": 4
        },
        {
            "firstKey": 53,
            "secondKey": 36,
            "layout": 4
        },
        {
            "firstKey": 53,
            "secondKey": 37,
            "layout": 4
        },
        {
            "firstKey": 53,
            "secondKey": 38,
            "layout": 4
        },
        {
            "firstKey": 53,
            "secondKey": 39,
            "layout": 4
        },
        {
            "firstKey": 53,
            "secondKey": 40,
            "layout": 4
        },
        {
            "firstKey": 53,
            "secondKey": 41,
            "layout": 4
        },
        {
            "firstKey": 53,
            "secondKey": 42,
            "layout": 4
        },
        {
            "firstKey": 53,
            "secondKey": 43,
            "layout": 4
        },
        {
            "firstKey": 53,
            "secondKey": 44,
            "layout": 4
        },
        {
            "firstKey": 53,
            "secondKey": 45,
            "layout": 4
        },
        {
            "firstKey": 53,
            "secondKey": 46,
            "layout": 4
        },
        {
            "firstKey": 53,
            "secondKey": 47,
            "layout": 4
        },
        {
            "firstKey": 53,
            "secondKey": 48,
            "layout": 4
        },
        {
            "firstKey": 53,
            "secondKey": 49,
            "layout": 4
        },
        {
            "firstKey": 53,
            "secondKey": 50,
            "layout": 4
        },
        {
            "firstKey": 53,
            "secondKey": 51,
            "layout": 4
        },
        {
            "firstKey": 53,
            "secondKey": 52,
            "layout": 4
        },
        {
            "firstKey": 53,
            "secondKey": 54,
            "layout": 4
        },
        {
            "firstKey": 53,
            "secondKey": 55,
            "layout": 6
        },
        {
            "firstKey": 54,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 54,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 54,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 54,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 54,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 54,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 54,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 54,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 54,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 54,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 54,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 54,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 54,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 54,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 54,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 54,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 54,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 54,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 54,
            "secondKey": 18,
            "layout": 3
        },
        {
            "firstKey": 54,
            "secondKey": 19,
            "layout": 3
        },
        {
            "firstKey": 54,
            "secondKey": 20,
            "layout": 3
        },
        {
            "firstKey": 54,
            "secondKey": 21,
            "layout": 3
        },
        {
            "firstKey": 54,
            "secondKey": 22,
            "layout": 3
        },
        {
            "firstKey": 54,
            "secondKey": 23,
            "layout": 3
        },
        {
            "firstKey": 54,
            "secondKey": 24,
            "layout": 3
        },
        {
            "firstKey": 54,
            "secondKey": 25,
            "layout": 3
        },
        {
            "firstKey": 54,
            "secondKey": 26,
            "layout": 3
        },
        {
            "firstKey": 54,
            "secondKey": 27,
            "layout": 3
        },
        {
            "firstKey": 54,
            "secondKey": 28,
            "layout": 3
        },
        {
            "firstKey": 54,
            "secondKey": 29,
            "layout": 3
        },
        {
            "firstKey": 54,
            "secondKey": 30,
            "layout": 3
        },
        {
            "firstKey": 54,
            "secondKey": 31,
            "layout": 3
        },
        {
            "firstKey": 54,
            "secondKey": 32,
            "layout": 3
        },
        {
            "firstKey": 54,
            "secondKey": 33,
            "layout": 3
        },
        {
            "firstKey": 54,
            "secondKey": 34,
            "layout": 3
        },
        {
            "firstKey": 54,
            "secondKey": 35,
            "layout": 3
        },
        {
            "firstKey": 54,
            "secondKey": 36,
            "layout": 3
        },
        {
            "firstKey": 54,
            "secondKey": 37,
            "layout": 3
        },
        {
            "firstKey": 54,
            "secondKey": 38,
            "layout": 3
        },
        {
            "firstKey": 54,
            "secondKey": 39,
            "layout": 3
        },
        {
            "firstKey": 54,
            "secondKey": 40,
            "layout": 3
        },
        {
            "firstKey": 54,
            "secondKey": 41,
            "layout": 3
        },
        {
            "firstKey": 54,
            "secondKey": 42,
            "layout": 3
        },
        {
            "firstKey": 54,
            "secondKey": 43,
            "layout": 3
        },
        {
            "firstKey": 54,
            "secondKey": 44,
            "layout": 3
        },
        {
            "firstKey": 54,
            "secondKey": 45,
            "layout": 3
        },
        {
            "firstKey": 54,
            "secondKey": 46,
            "layout": 3
        },
        {
            "firstKey": 54,
            "secondKey": 47,
            "layout": 3
        },
        {
            "firstKey": 54,
            "secondKey": 48,
            "layout": 3
        },
        {
            "firstKey": 54,
            "secondKey": 49,
            "layout": 3
        },
        {
            "firstKey": 54,
            "secondKey": 50,
            "layout": 3
        },
        {
            "firstKey": 54,
            "secondKey": 51,
            "layout": 3
        },
        {
            "firstKey": 54,
            "secondKey": 52,
            "layout": 3
        },
        {
            "firstKey": 54,
            "secondKey": 53,
            "layout": 3
        },
        {
            "firstKey": 54,
            "secondKey": 55,
            "layout": 5
        },
        {
            "firstKey": 55,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 55,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 55,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 55,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 55,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 55,
            "secondKey": 5,
            "layout": 6
        },
        {
            "firstKey": 55,
            "secondKey": 6,
            "layout": 6
        },
        {
            "firstKey": 55,
            "secondKey": 7,
            "layout": 6
        },
        {
            "firstKey": 55,
            "secondKey": 8,
            "layout": 6
        },
        {
            "firstKey": 55,
            "secondKey": 9,
            "layout": 6
        },
        {
            "firstKey": 55,
            "secondKey": 10,
            "layout": 6
        },
        {
            "firstKey": 55,
            "secondKey": 11,
            "layout": 6
        },
        {
            "firstKey": 55,
            "secondKey": 12,
            "layout": 6
        },
        {
            "firstKey": 55,
            "secondKey": 13,
            "layout": 6
        },
        {
            "firstKey": 55,
            "secondKey": 14,
            "layout": 6
        },
        {
            "firstKey": 55,
            "secondKey": 15,
            "layout": 6
        },
        {
            "firstKey": 55,
            "secondKey": 16,
            "layout": 6
        },
        {
            "firstKey": 55,
            "secondKey": 17,
            "layout": 6
        },
        {
            "firstKey": 55,
            "secondKey": 18,
            "layout": 6
        },
        {
            "firstKey": 55,
            "secondKey": 19,
            "layout": 6
        },
        {
            "firstKey": 55,
            "secondKey": 20,
            "layout": 6
        },
        {
            "firstKey": 55,
            "secondKey": 21,
            "layout": 6
        },
        {
            "firstKey": 55,
            "secondKey": 22,
            "layout": 6
        },
        {
            "firstKey": 55,
            "secondKey": 23,
            "layout": 6
        },
        {
            "firstKey": 55,
            "secondKey": 24,
            "layout": 6
        },
        {
            "firstKey": 55,
            "secondKey": 25,
            "layout": 6
        },
        {
            "firstKey": 55,
            "secondKey": 26,
            "layout": 6
        },
        {
            "firstKey": 55,
            "secondKey": 27,
            "layout": 6
        },
        {
            "firstKey": 55,
            "secondKey": 28,
            "layout": 6
        },
        {
            "firstKey": 55,
            "secondKey": 29,
            "layout": 6
        },
        {
            "firstKey": 55,
            "secondKey": 30,
            "layout": 6
        },
        {
            "firstKey": 55,
            "secondKey": 31,
            "layout": 6
        },
        {
            "firstKey": 55,
            "secondKey": 32,
            "layout": 6
        },
        {
            "firstKey": 55,
            "secondKey": 33,
            "layout": 6
        },
        {
            "firstKey": 55,
            "secondKey": 34,
            "layout": 6
        },
        {
            "firstKey": 55,
            "secondKey": 35,
            "layout": 6
        },
        {
            "firstKey": 55,
            "secondKey": 36,
            "layout": 6
        },
        {
            "firstKey": 55,
            "secondKey": 37,
            "layout": 6
        },
        {
            "firstKey": 55,
            "secondKey": 38,
            "layout": 6
        },
        {
            "firstKey": 55,
            "secondKey": 39,
            "layout": 6
        },
        {
            "firstKey": 55,
            "secondKey": 40,
            "layout": 6
        },
        {
            "firstKey": 55,
            "secondKey": 41,
            "layout": 6
        },
        {
            "firstKey": 55,
            "secondKey": 42,
            "layout": 6
        },
        {
            "firstKey": 55,
            "secondKey": 43,
            "layout": 6
        },
        {
            "firstKey": 55,
            "secondKey": 44,
            "layout": 6
        },
        {
            "firstKey": 55,
            "secondKey": 45,
            "layout": 6
        },
        {
            "firstKey": 55,
            "secondKey": 46,
            "layout": 6
        },
        {
            "firstKey": 55,
            "secondKey": 47,
            "layout": 6
        },
        {
            "firstKey": 55,
            "secondKey": 48,
            "layout": 6
        },
        {
            "firstKey": 55,
            "secondKey": 49,
            "layout": 6
        },
        {
            "firstKey": 55,
            "secondKey": 50,
            "layout": 6
        },
        {
            "firstKey": 55,
            "secondKey": 51,
            "layout": 6
        },
        {
            "firstKey": 55,
            "secondKey": 52,
            "layout": 6
        },
        {
            "firstKey": 55,
            "secondKey": 53,
            "layout": 6
        },
        {
            "firstKey": 55,
            "secondKey": 54,
            "layout": 6
        }
    ]
}