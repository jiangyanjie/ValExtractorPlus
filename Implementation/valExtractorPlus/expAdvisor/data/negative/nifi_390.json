{
    "id": 390,
    "expression": "connection.getSource()",
    "projectName": "nifi",
    "commitID": "5872eb3c4a060684a88555f1c697f07bec4c26dd",
    "filePath": "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/dto/DtoFactory.java",
    "occurrences": 2,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "connection.getSource()",
            "nodeType": "MethodInvocation",
            "nodePosition": {
                "charLength": 22,
                "startLineNumber": 668,
                "startColumnNumber": 43,
                "endLineNumber": 668,
                "endColumnNumber": 65
            },
            "astNodeNumber": 3,
            "astHeight": 2,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 44,
                        "startLineNumber": 668,
                        "startColumnNumber": 22,
                        "endLineNumber": 668,
                        "endColumnNumber": 66
                    },
                    "nodeContext": "createConnectableDto(connection.getSource())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 59,
                        "startLineNumber": 668,
                        "startColumnNumber": 8,
                        "endLineNumber": 668,
                        "endColumnNumber": 67
                    },
                    "nodeContext": "dto.setSource(createConnectableDto(connection.getSource()))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 60,
                        "startLineNumber": 668,
                        "startColumnNumber": 8,
                        "endLineNumber": 668,
                        "endColumnNumber": 68
                    },
                    "nodeContext": "dto.setSource(createConnectableDto(connection.getSource()));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 9,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2514,
                        "startLineNumber": 650,
                        "startColumnNumber": 74,
                        "endLineNumber": 703,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (connection == null) {\n    return null;\n  }\n  final ConnectionDTO dto=new ConnectionDTO();\n  dto.setId(connection.getIdentifier());\n  dto.setParentGroupId(connection.getProcessGroup().getIdentifier());\n  final List<PositionDTO> bendPoints=new ArrayList<>();\n  for (  final Position bendPoint : connection.getBendPoints()) {\n    bendPoints.add(createPositionDto(bendPoint));\n  }\n  dto.setBends(bendPoints);\n  dto.setName(connection.getName());\n  dto.setLabelIndex(connection.getLabelIndex());\n  dto.setzIndex(connection.getZIndex());\n  dto.setSource(createConnectableDto(connection.getSource()));\n  dto.setDestination(createConnectableDto(connection.getDestination()));\n  dto.setVersionedComponentId(connection.getVersionedComponentId().orElse(null));\n  dto.setBackPressureObjectThreshold(connection.getFlowFileQueue().getBackPressureObjectThreshold());\n  dto.setBackPressureDataSizeThreshold(connection.getFlowFileQueue().getBackPressureDataSizeThreshold());\n  dto.setFlowFileExpiration(connection.getFlowFileQueue().getFlowFileExpiration());\n  dto.setPrioritizers(new ArrayList<String>());\n  for (  final FlowFilePrioritizer comparator : connection.getFlowFileQueue().getPriorities()) {\n    dto.getPrioritizers().add(comparator.getClass().getCanonicalName());\n  }\n  for (  final Relationship selectedRelationship : connection.getRelationships()) {\n    if (!Relationship.ANONYMOUS.equals(selectedRelationship)) {\n      if (dto.getSelectedRelationships() == null) {\n        dto.setSelectedRelationships(new TreeSet<String>(Collator.getInstance(Locale.US)));\n      }\n      dto.getSelectedRelationships().add(selectedRelationship.getName());\n    }\n  }\n  for (  final Relationship availableRelationship : connection.getSource().getRelationships()) {\n    if (!Relationship.ANONYMOUS.equals(availableRelationship)) {\n      if (dto.getAvailableRelationships() == null) {\n        dto.setAvailableRelationships(new TreeSet<String>(Collator.getInstance(Locale.US)));\n      }\n      dto.getAvailableRelationships().add(availableRelationship.getName());\n    }\n  }\n  return dto;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 283,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2724,
                        "startLineNumber": 644,
                        "startColumnNumber": 4,
                        "endLineNumber": 703,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Creates a ConnectionDTO from the specified Connection.\n * @param connection connection\n * @return dto\n */\npublic ConnectionDTO createConnectionDto(final Connection connection){\n  if (connection == null) {\n    return null;\n  }\n  final ConnectionDTO dto=new ConnectionDTO();\n  dto.setId(connection.getIdentifier());\n  dto.setParentGroupId(connection.getProcessGroup().getIdentifier());\n  final List<PositionDTO> bendPoints=new ArrayList<>();\n  for (  final Position bendPoint : connection.getBendPoints()) {\n    bendPoints.add(createPositionDto(bendPoint));\n  }\n  dto.setBends(bendPoints);\n  dto.setName(connection.getName());\n  dto.setLabelIndex(connection.getLabelIndex());\n  dto.setzIndex(connection.getZIndex());\n  dto.setSource(createConnectableDto(connection.getSource()));\n  dto.setDestination(createConnectableDto(connection.getDestination()));\n  dto.setVersionedComponentId(connection.getVersionedComponentId().orElse(null));\n  dto.setBackPressureObjectThreshold(connection.getFlowFileQueue().getBackPressureObjectThreshold());\n  dto.setBackPressureDataSizeThreshold(connection.getFlowFileQueue().getBackPressureDataSizeThreshold());\n  dto.setFlowFileExpiration(connection.getFlowFileQueue().getFlowFileExpiration());\n  dto.setPrioritizers(new ArrayList<String>());\n  for (  final FlowFilePrioritizer comparator : connection.getFlowFileQueue().getPriorities()) {\n    dto.getPrioritizers().add(comparator.getClass().getCanonicalName());\n  }\n  for (  final Relationship selectedRelationship : connection.getRelationships()) {\n    if (!Relationship.ANONYMOUS.equals(selectedRelationship)) {\n      if (dto.getSelectedRelationships() == null) {\n        dto.setSelectedRelationships(new TreeSet<String>(Collator.getInstance(Locale.US)));\n      }\n      dto.getSelectedRelationships().add(selectedRelationship.getName());\n    }\n  }\n  for (  final Relationship availableRelationship : connection.getSource().getRelationships()) {\n    if (!Relationship.ANONYMOUS.equals(availableRelationship)) {\n      if (dto.getAvailableRelationships() == null) {\n        dto.setAvailableRelationships(new TreeSet<String>(Collator.getInstance(Locale.US)));\n      }\n      dto.getAvailableRelationships().add(availableRelationship.getName());\n    }\n  }\n  return dto;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 294,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 60,
                    "startLineNumber": 668,
                    "startColumnNumber": 8,
                    "endLineNumber": 668,
                    "endColumnNumber": 68
                },
                "nodeContext": "dto.setSource(createConnectableDto(connection.getSource()));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 9,
                "astHeight": 5
            },
            "tokenLength": 2,
            "type": "org.apache.nifi.connectable.Connectable"
        },
        {
            "nodeContext": "connection.getSource()",
            "nodeType": "MethodInvocation",
            "nodePosition": {
                "charLength": 22,
                "startLineNumber": 692,
                "startColumnNumber": 56,
                "endLineNumber": 692,
                "endColumnNumber": 78
            },
            "astNodeNumber": 3,
            "astHeight": 2,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
                    "nodePosition": {
                        "charLength": 41,
                        "startLineNumber": 692,
                        "startColumnNumber": 56,
                        "endLineNumber": 692,
                        "endColumnNumber": 97
                    },
                    "nodeContext": "connection.getSource().getRelationships()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 462,
                        "startLineNumber": 692,
                        "startColumnNumber": 8,
                        "endLineNumber": 700,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (final Relationship availableRelationship : connection.getSource().getRelationships()) {\n  if (!Relationship.ANONYMOUS.equals(availableRelationship)) {\n    if (dto.getAvailableRelationships() == null) {\n      dto.setAvailableRelationships(new TreeSet<String>(Collator.getInstance(Locale.US)));\n    }\n    dto.getAvailableRelationships().add(availableRelationship.getName());\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 53,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2514,
                        "startLineNumber": 650,
                        "startColumnNumber": 74,
                        "endLineNumber": 703,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (connection == null) {\n    return null;\n  }\n  final ConnectionDTO dto=new ConnectionDTO();\n  dto.setId(connection.getIdentifier());\n  dto.setParentGroupId(connection.getProcessGroup().getIdentifier());\n  final List<PositionDTO> bendPoints=new ArrayList<>();\n  for (  final Position bendPoint : connection.getBendPoints()) {\n    bendPoints.add(createPositionDto(bendPoint));\n  }\n  dto.setBends(bendPoints);\n  dto.setName(connection.getName());\n  dto.setLabelIndex(connection.getLabelIndex());\n  dto.setzIndex(connection.getZIndex());\n  dto.setSource(createConnectableDto(connection.getSource()));\n  dto.setDestination(createConnectableDto(connection.getDestination()));\n  dto.setVersionedComponentId(connection.getVersionedComponentId().orElse(null));\n  dto.setBackPressureObjectThreshold(connection.getFlowFileQueue().getBackPressureObjectThreshold());\n  dto.setBackPressureDataSizeThreshold(connection.getFlowFileQueue().getBackPressureDataSizeThreshold());\n  dto.setFlowFileExpiration(connection.getFlowFileQueue().getFlowFileExpiration());\n  dto.setPrioritizers(new ArrayList<String>());\n  for (  final FlowFilePrioritizer comparator : connection.getFlowFileQueue().getPriorities()) {\n    dto.getPrioritizers().add(comparator.getClass().getCanonicalName());\n  }\n  for (  final Relationship selectedRelationship : connection.getRelationships()) {\n    if (!Relationship.ANONYMOUS.equals(selectedRelationship)) {\n      if (dto.getSelectedRelationships() == null) {\n        dto.setSelectedRelationships(new TreeSet<String>(Collator.getInstance(Locale.US)));\n      }\n      dto.getSelectedRelationships().add(selectedRelationship.getName());\n    }\n  }\n  for (  final Relationship availableRelationship : connection.getSource().getRelationships()) {\n    if (!Relationship.ANONYMOUS.equals(availableRelationship)) {\n      if (dto.getAvailableRelationships() == null) {\n        dto.setAvailableRelationships(new TreeSet<String>(Collator.getInstance(Locale.US)));\n      }\n      dto.getAvailableRelationships().add(availableRelationship.getName());\n    }\n  }\n  return dto;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 283,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2724,
                        "startLineNumber": 644,
                        "startColumnNumber": 4,
                        "endLineNumber": 703,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Creates a ConnectionDTO from the specified Connection.\n * @param connection connection\n * @return dto\n */\npublic ConnectionDTO createConnectionDto(final Connection connection){\n  if (connection == null) {\n    return null;\n  }\n  final ConnectionDTO dto=new ConnectionDTO();\n  dto.setId(connection.getIdentifier());\n  dto.setParentGroupId(connection.getProcessGroup().getIdentifier());\n  final List<PositionDTO> bendPoints=new ArrayList<>();\n  for (  final Position bendPoint : connection.getBendPoints()) {\n    bendPoints.add(createPositionDto(bendPoint));\n  }\n  dto.setBends(bendPoints);\n  dto.setName(connection.getName());\n  dto.setLabelIndex(connection.getLabelIndex());\n  dto.setzIndex(connection.getZIndex());\n  dto.setSource(createConnectableDto(connection.getSource()));\n  dto.setDestination(createConnectableDto(connection.getDestination()));\n  dto.setVersionedComponentId(connection.getVersionedComponentId().orElse(null));\n  dto.setBackPressureObjectThreshold(connection.getFlowFileQueue().getBackPressureObjectThreshold());\n  dto.setBackPressureDataSizeThreshold(connection.getFlowFileQueue().getBackPressureDataSizeThreshold());\n  dto.setFlowFileExpiration(connection.getFlowFileQueue().getFlowFileExpiration());\n  dto.setPrioritizers(new ArrayList<String>());\n  for (  final FlowFilePrioritizer comparator : connection.getFlowFileQueue().getPriorities()) {\n    dto.getPrioritizers().add(comparator.getClass().getCanonicalName());\n  }\n  for (  final Relationship selectedRelationship : connection.getRelationships()) {\n    if (!Relationship.ANONYMOUS.equals(selectedRelationship)) {\n      if (dto.getSelectedRelationships() == null) {\n        dto.setSelectedRelationships(new TreeSet<String>(Collator.getInstance(Locale.US)));\n      }\n      dto.getSelectedRelationships().add(selectedRelationship.getName());\n    }\n  }\n  for (  final Relationship availableRelationship : connection.getSource().getRelationships()) {\n    if (!Relationship.ANONYMOUS.equals(availableRelationship)) {\n      if (dto.getAvailableRelationships() == null) {\n        dto.setAvailableRelationships(new TreeSet<String>(Collator.getInstance(Locale.US)));\n      }\n      dto.getAvailableRelationships().add(availableRelationship.getName());\n    }\n  }\n  return dto;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 294,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
                "nodePosition": {
                    "charLength": 41,
                    "startLineNumber": 692,
                    "startColumnNumber": 56,
                    "endLineNumber": 692,
                    "endColumnNumber": 97
                },
                "nodeContext": "connection.getSource().getRelationships()",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 2,
            "type": "org.apache.nifi.connectable.Connectable"
        }
    ],
    "positionList": [
        {
            "charLength": 22,
            "startLineNumber": 668,
            "startColumnNumber": 43,
            "endLineNumber": 668,
            "endColumnNumber": 65
        },
        {
            "charLength": 22,
            "startLineNumber": 692,
            "startColumnNumber": 56,
            "endLineNumber": 692,
            "endColumnNumber": 78
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 2
        }
    ]
}