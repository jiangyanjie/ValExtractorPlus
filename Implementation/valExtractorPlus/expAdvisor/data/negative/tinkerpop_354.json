{
    "id": 354,
    "expression": "errorMeter",
    "projectName": "tinkerpop",
    "commitID": "95ff755d6e279c0f19b7be0cabe9eb41df242685",
    "filePath": "gremlin-server/src/main/java/org/apache/tinkerpop/gremlin/server/handler/NioGremlinResponseEncoder.java",
    "occurrences": 2,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "errorMeter",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 10,
                "startLineNumber": 55,
                "startColumnNumber": 16,
                "endLineNumber": 55,
                "endColumnNumber": 26
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 17,
                        "startLineNumber": 55,
                        "startColumnNumber": 16,
                        "endLineNumber": 55,
                        "endColumnNumber": 33
                    },
                    "nodeContext": "errorMeter.mark()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 18,
                        "startLineNumber": 55,
                        "startColumnNumber": 16,
                        "endLineNumber": 55,
                        "endColumnNumber": 34
                    },
                    "nodeContext": "errorMeter.mark();\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 90,
                        "startLineNumber": 54,
                        "startColumnNumber": 12,
                        "endLineNumber": 55,
                        "endColumnNumber": 34
                    },
                    "nodeContext": "if (!responseMessage.getStatus().getCode().isSuccess()) errorMeter.mark();\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 13,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 644,
                        "startLineNumber": 53,
                        "startColumnNumber": 12,
                        "endLineNumber": 65,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (!responseMessage.getStatus().getCode().isSuccess())   errorMeter.mark();\n  if (useBinary)   byteBuf.writeBytes(serializer.serializeResponseAsBinary(responseMessage,ctx.alloc()));\n else {\n    final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n    byteBuf.writeBytes(textSerializer.serializeResponseAsString(responseMessage).getBytes(UTF8));\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 49,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1639,
                        "startLineNumber": 53,
                        "startColumnNumber": 8,
                        "endLineNumber": 79,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  if (!responseMessage.getStatus().getCode().isSuccess())   errorMeter.mark();\n  if (useBinary)   byteBuf.writeBytes(serializer.serializeResponseAsBinary(responseMessage,ctx.alloc()));\n else {\n    final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n    byteBuf.writeBytes(textSerializer.serializeResponseAsString(responseMessage).getBytes(UTF8));\n  }\n}\n catch (Exception ex) {\n  errorMeter.mark();\n  logger.warn(\"The result [{}] in the request {} could not be serialized and returned.\",responseMessage.getResult(),responseMessage.getRequestId(),ex);\n  final String errorMessage=String.format(\"Error during serialization: %s\",ex.getCause() != null ? ex.getCause().getMessage() : ex.getMessage());\n  final ResponseMessage error=ResponseMessage.build(responseMessage.getRequestId()).statusMessage(errorMessage).code(ResponseStatusCode.SERVER_ERROR_SERIALIZATION).create();\n  if (useBinary) {\n    byteBuf.writeBytes(serializer.serializeResponseAsBinary(error,ctx.alloc()));\n  }\n else {\n    final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n    byteBuf.writeBytes(textSerializer.serializeResponseAsString(error).getBytes(UTF8));\n  }\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 154,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1829,
                        "startLineNumber": 49,
                        "startColumnNumber": 138,
                        "endLineNumber": 80,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final MessageSerializer serializer=ctx.channel().attr(StateKey.SERIALIZER).get();\n  final boolean useBinary=ctx.channel().attr(StateKey.USE_BINARY).get();\n  try {\n    if (!responseMessage.getStatus().getCode().isSuccess())     errorMeter.mark();\n    if (useBinary)     byteBuf.writeBytes(serializer.serializeResponseAsBinary(responseMessage,ctx.alloc()));\n else {\n      final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n      byteBuf.writeBytes(textSerializer.serializeResponseAsString(responseMessage).getBytes(UTF8));\n    }\n  }\n catch (  Exception ex) {\n    errorMeter.mark();\n    logger.warn(\"The result [{}] in the request {} could not be serialized and returned.\",responseMessage.getResult(),responseMessage.getRequestId(),ex);\n    final String errorMessage=String.format(\"Error during serialization: %s\",ex.getCause() != null ? ex.getCause().getMessage() : ex.getMessage());\n    final ResponseMessage error=ResponseMessage.build(responseMessage.getRequestId()).statusMessage(errorMessage).code(ResponseStatusCode.SERVER_ERROR_SERIALIZATION).create();\n    if (useBinary) {\n      byteBuf.writeBytes(serializer.serializeResponseAsBinary(error,ctx.alloc()));\n    }\n else {\n      final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n      byteBuf.writeBytes(textSerializer.serializeResponseAsString(error).getBytes(UTF8));\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 186,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1977,
                        "startLineNumber": 48,
                        "startColumnNumber": 4,
                        "endLineNumber": 80,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override protected void encode(final ChannelHandlerContext ctx,final ResponseMessage responseMessage,final ByteBuf byteBuf) throws Exception {\n  final MessageSerializer serializer=ctx.channel().attr(StateKey.SERIALIZER).get();\n  final boolean useBinary=ctx.channel().attr(StateKey.USE_BINARY).get();\n  try {\n    if (!responseMessage.getStatus().getCode().isSuccess())     errorMeter.mark();\n    if (useBinary)     byteBuf.writeBytes(serializer.serializeResponseAsBinary(responseMessage,ctx.alloc()));\n else {\n      final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n      byteBuf.writeBytes(textSerializer.serializeResponseAsString(responseMessage).getBytes(UTF8));\n    }\n  }\n catch (  Exception ex) {\n    errorMeter.mark();\n    logger.warn(\"The result [{}] in the request {} could not be serialized and returned.\",responseMessage.getResult(),responseMessage.getRequestId(),ex);\n    final String errorMessage=String.format(\"Error during serialization: %s\",ex.getCause() != null ? ex.getCause().getMessage() : ex.getMessage());\n    final ResponseMessage error=ResponseMessage.build(responseMessage.getRequestId()).statusMessage(errorMessage).code(ResponseStatusCode.SERVER_ERROR_SERIALIZATION).create();\n    if (useBinary) {\n      byteBuf.writeBytes(serializer.serializeResponseAsBinary(error,ctx.alloc()));\n    }\n else {\n      final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n      byteBuf.writeBytes(textSerializer.serializeResponseAsString(error).getBytes(UTF8));\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 209,
                    "astHeight": 13
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                "nodePosition": {
                    "charLength": 18,
                    "startLineNumber": 55,
                    "startColumnNumber": 16,
                    "endLineNumber": 55,
                    "endColumnNumber": 34
                },
                "nodeContext": "errorMeter.mark();\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 4,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "org.apache.tinkerpop.gremlin.server.handler.Meter"
        },
        {
            "nodeContext": "errorMeter",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 10,
                "startLineNumber": 66,
                "startColumnNumber": 12,
                "endLineNumber": 66,
                "endColumnNumber": 22
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 17,
                        "startLineNumber": 66,
                        "startColumnNumber": 12,
                        "endLineNumber": 66,
                        "endColumnNumber": 29
                    },
                    "nodeContext": "errorMeter.mark()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 18,
                        "startLineNumber": 66,
                        "startColumnNumber": 12,
                        "endLineNumber": 66,
                        "endColumnNumber": 30
                    },
                    "nodeContext": "errorMeter.mark();\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
                    "nodePosition": {
                        "charLength": 969,
                        "startLineNumber": 65,
                        "startColumnNumber": 31,
                        "endLineNumber": 79,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  errorMeter.mark();\n  logger.warn(\"The result [{}] in the request {} could not be serialized and returned.\",responseMessage.getResult(),responseMessage.getRequestId(),ex);\n  final String errorMessage=String.format(\"Error during serialization: %s\",ex.getCause() != null ? ex.getCause().getMessage() : ex.getMessage());\n  final ResponseMessage error=ResponseMessage.build(responseMessage.getRequestId()).statusMessage(errorMessage).code(ResponseStatusCode.SERVER_ERROR_SERIALIZATION).create();\n  if (useBinary) {\n    byteBuf.writeBytes(serializer.serializeResponseAsBinary(error,ctx.alloc()));\n  }\n else {\n    final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n    byteBuf.writeBytes(textSerializer.serializeResponseAsString(error).getBytes(UTF8));\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 99,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
                    "nodePosition": {
                        "charLength": 990,
                        "startLineNumber": 65,
                        "startColumnNumber": 10,
                        "endLineNumber": 79,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "catch (Exception ex) {\n  errorMeter.mark();\n  logger.warn(\"The result [{}] in the request {} could not be serialized and returned.\",responseMessage.getResult(),responseMessage.getRequestId(),ex);\n  final String errorMessage=String.format(\"Error during serialization: %s\",ex.getCause() != null ? ex.getCause().getMessage() : ex.getMessage());\n  final ResponseMessage error=ResponseMessage.build(responseMessage.getRequestId()).statusMessage(errorMessage).code(ResponseStatusCode.SERVER_ERROR_SERIALIZATION).create();\n  if (useBinary) {\n    byteBuf.writeBytes(serializer.serializeResponseAsBinary(error,ctx.alloc()));\n  }\n else {\n    final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n    byteBuf.writeBytes(textSerializer.serializeResponseAsString(error).getBytes(UTF8));\n  }\n}\n",
                    "nodeType": "CatchClause",
                    "astNodeNumber": 104,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1639,
                        "startLineNumber": 53,
                        "startColumnNumber": 8,
                        "endLineNumber": 79,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  if (!responseMessage.getStatus().getCode().isSuccess())   errorMeter.mark();\n  if (useBinary)   byteBuf.writeBytes(serializer.serializeResponseAsBinary(responseMessage,ctx.alloc()));\n else {\n    final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n    byteBuf.writeBytes(textSerializer.serializeResponseAsString(responseMessage).getBytes(UTF8));\n  }\n}\n catch (Exception ex) {\n  errorMeter.mark();\n  logger.warn(\"The result [{}] in the request {} could not be serialized and returned.\",responseMessage.getResult(),responseMessage.getRequestId(),ex);\n  final String errorMessage=String.format(\"Error during serialization: %s\",ex.getCause() != null ? ex.getCause().getMessage() : ex.getMessage());\n  final ResponseMessage error=ResponseMessage.build(responseMessage.getRequestId()).statusMessage(errorMessage).code(ResponseStatusCode.SERVER_ERROR_SERIALIZATION).create();\n  if (useBinary) {\n    byteBuf.writeBytes(serializer.serializeResponseAsBinary(error,ctx.alloc()));\n  }\n else {\n    final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n    byteBuf.writeBytes(textSerializer.serializeResponseAsString(error).getBytes(UTF8));\n  }\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 154,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1829,
                        "startLineNumber": 49,
                        "startColumnNumber": 138,
                        "endLineNumber": 80,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final MessageSerializer serializer=ctx.channel().attr(StateKey.SERIALIZER).get();\n  final boolean useBinary=ctx.channel().attr(StateKey.USE_BINARY).get();\n  try {\n    if (!responseMessage.getStatus().getCode().isSuccess())     errorMeter.mark();\n    if (useBinary)     byteBuf.writeBytes(serializer.serializeResponseAsBinary(responseMessage,ctx.alloc()));\n else {\n      final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n      byteBuf.writeBytes(textSerializer.serializeResponseAsString(responseMessage).getBytes(UTF8));\n    }\n  }\n catch (  Exception ex) {\n    errorMeter.mark();\n    logger.warn(\"The result [{}] in the request {} could not be serialized and returned.\",responseMessage.getResult(),responseMessage.getRequestId(),ex);\n    final String errorMessage=String.format(\"Error during serialization: %s\",ex.getCause() != null ? ex.getCause().getMessage() : ex.getMessage());\n    final ResponseMessage error=ResponseMessage.build(responseMessage.getRequestId()).statusMessage(errorMessage).code(ResponseStatusCode.SERVER_ERROR_SERIALIZATION).create();\n    if (useBinary) {\n      byteBuf.writeBytes(serializer.serializeResponseAsBinary(error,ctx.alloc()));\n    }\n else {\n      final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n      byteBuf.writeBytes(textSerializer.serializeResponseAsString(error).getBytes(UTF8));\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 186,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1977,
                        "startLineNumber": 48,
                        "startColumnNumber": 4,
                        "endLineNumber": 80,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override protected void encode(final ChannelHandlerContext ctx,final ResponseMessage responseMessage,final ByteBuf byteBuf) throws Exception {\n  final MessageSerializer serializer=ctx.channel().attr(StateKey.SERIALIZER).get();\n  final boolean useBinary=ctx.channel().attr(StateKey.USE_BINARY).get();\n  try {\n    if (!responseMessage.getStatus().getCode().isSuccess())     errorMeter.mark();\n    if (useBinary)     byteBuf.writeBytes(serializer.serializeResponseAsBinary(responseMessage,ctx.alloc()));\n else {\n      final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n      byteBuf.writeBytes(textSerializer.serializeResponseAsString(responseMessage).getBytes(UTF8));\n    }\n  }\n catch (  Exception ex) {\n    errorMeter.mark();\n    logger.warn(\"The result [{}] in the request {} could not be serialized and returned.\",responseMessage.getResult(),responseMessage.getRequestId(),ex);\n    final String errorMessage=String.format(\"Error during serialization: %s\",ex.getCause() != null ? ex.getCause().getMessage() : ex.getMessage());\n    final ResponseMessage error=ResponseMessage.build(responseMessage.getRequestId()).statusMessage(errorMessage).code(ResponseStatusCode.SERVER_ERROR_SERIALIZATION).create();\n    if (useBinary) {\n      byteBuf.writeBytes(serializer.serializeResponseAsBinary(error,ctx.alloc()));\n    }\n else {\n      final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n      byteBuf.writeBytes(textSerializer.serializeResponseAsString(error).getBytes(UTF8));\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 209,
                    "astHeight": 13
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 18,
                    "startLineNumber": 66,
                    "startColumnNumber": 12,
                    "endLineNumber": 66,
                    "endColumnNumber": 30
                },
                "nodeContext": "errorMeter.mark();\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 4,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "org.apache.tinkerpop.gremlin.server.handler.Meter"
        }
    ],
    "positionList": [
        {
            "charLength": 10,
            "startLineNumber": 55,
            "startColumnNumber": 16,
            "endLineNumber": 55,
            "endColumnNumber": 26
        },
        {
            "charLength": 10,
            "startLineNumber": 66,
            "startColumnNumber": 12,
            "endLineNumber": 66,
            "endColumnNumber": 22
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 4
        }
    ]
}