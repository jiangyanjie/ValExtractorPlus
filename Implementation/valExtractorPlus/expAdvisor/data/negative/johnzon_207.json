{
    "id": 207,
    "expression": "t",
    "projectName": "johnzon",
    "commitID": "65564700aaf4202836af0fe00159449b0d031d7e",
    "filePath": "johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Mapper.java",
    "occurrences": 3,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "t",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 654,
                "startColumnNumber": 47,
                "endLineNumber": 654,
                "endColumnNumber": 48
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 44,
                        "startLineNumber": 654,
                        "startColumnNumber": 16,
                        "endLineNumber": 654,
                        "endColumnNumber": 60
                    },
                    "nodeContext": "setter.getValue().writer.write(t,jsonValue)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 45,
                        "startLineNumber": 654,
                        "startColumnNumber": 16,
                        "endLineNumber": 654,
                        "endColumnNumber": 61
                    },
                    "nodeContext": "setter.getValue().writer.write(t,jsonValue);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 10,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 103,
                        "startLineNumber": 653,
                        "startColumnNumber": 52,
                        "endLineNumber": 656,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  setter.getValue().writer.write(t,jsonValue);\n  continue;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 12,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 143,
                        "startLineNumber": 653,
                        "startColumnNumber": 12,
                        "endLineNumber": 656,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (JsonValue.class == value.paramType) {\n  setter.getValue().writer.write(t,jsonValue);\n  continue;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 20,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 668,
                        "startLineNumber": 650,
                        "startColumnNumber": 96,
                        "endLineNumber": 666,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final JsonValue jsonValue=object.get(setter.getKey());\n  final Mappings.Setter value=setter.getValue();\n  if (JsonValue.class == value.paramType) {\n    setter.getValue().writer.write(t,jsonValue);\n    continue;\n  }\n  if (jsonValue == null) {\n    continue;\n  }\n  final AccessMode.Writer setterMethod=value.writer;\n  final Object convertedValue=toValue(jsonValue,value.converter,value.itemConverter,value.paramType);\n  if (convertedValue != null) {\n    setterMethod.write(t,convertedValue);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 90,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 756,
                        "startLineNumber": 650,
                        "startColumnNumber": 8,
                        "endLineNumber": 666,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (final Map.Entry<String,Mappings.Setter> setter : classMapping.setters.entrySet()) {\n  final JsonValue jsonValue=object.get(setter.getKey());\n  final Mappings.Setter value=setter.getValue();\n  if (JsonValue.class == value.paramType) {\n    setter.getValue().writer.write(t,jsonValue);\n    continue;\n  }\n  if (jsonValue == null) {\n    continue;\n  }\n  final AccessMode.Writer setterMethod=value.writer;\n  final Object convertedValue=toValue(jsonValue,value.converter,value.itemConverter,value.paramType);\n  if (convertedValue != null) {\n    setterMethod.write(t,convertedValue);\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 110,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3236,
                        "startLineNumber": 597,
                        "startColumnNumber": 92,
                        "endLineNumber": 669,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  Type type=inType;\n  if (inType == Object.class) {\n    type=new JohnzonParameterizedType(Map.class,String.class,Object.class);\n  }\n  final Mappings.ClassMapping classMapping=mappings.findOrCreateClassMapping(type);\n  if (classMapping == null) {\n    if (ParameterizedType.class.isInstance(type)) {\n      final ParameterizedType aType=ParameterizedType.class.cast(type);\n      final Type[] fieldArgTypes=aType.getActualTypeArguments();\n      if (fieldArgTypes.length >= 2) {\n        final Class<?> raw=Class.class.cast(aType.getRawType());\n        final Map map;\n        if (LinkedHashMap.class == raw) {\n          map=new LinkedHashMap();\n        }\n else         if (SortedMap.class.isAssignableFrom(raw) || NavigableMap.class == raw || TreeMap.class == raw) {\n          map=new TreeMap();\n        }\n else         if (ConcurrentMap.class.isAssignableFrom(raw)) {\n          map=new ConcurrentHashMap(object.size());\n        }\n else         if (EnumMap.class.isAssignableFrom(raw)) {\n          map=new EnumMap(Class.class.cast(fieldArgTypes[0]));\n        }\n else         if (Map.class.isAssignableFrom(raw)) {\n          map=new HashMap(object.size());\n        }\n else {\n          map=null;\n        }\n        if (map != null) {\n          Type keyType;\n          if (ParameterizedType.class.isInstance(fieldArgTypes[0])) {\n            keyType=fieldArgTypes[0];\n          }\n else {\n            keyType=fieldArgTypes[0];\n          }\n          for (          final Map.Entry<String,JsonValue> value : object.entrySet()) {\n            map.put(convertTo(keyType,value.getKey()),toObject(value.getValue(),fieldArgTypes[1],null));\n          }\n          return map;\n        }\n      }\n    }\n  }\n  if (classMapping == null) {\n    throw new MapperException(\"Can't map \" + type);\n  }\n  final Object t=classMapping.factory.getParameterTypes().length == 0 ? classMapping.factory.create(null) : classMapping.factory.create(createParameters(classMapping,object));\n  for (  final Map.Entry<String,Mappings.Setter> setter : classMapping.setters.entrySet()) {\n    final JsonValue jsonValue=object.get(setter.getKey());\n    final Mappings.Setter value=setter.getValue();\n    if (JsonValue.class == value.paramType) {\n      setter.getValue().writer.write(t,jsonValue);\n      continue;\n    }\n    if (jsonValue == null) {\n      continue;\n    }\n    final AccessMode.Writer setterMethod=value.writer;\n    final Object convertedValue=toValue(jsonValue,value.converter,value.itemConverter,value.paramType);\n    if (convertedValue != null) {\n      setterMethod.write(t,convertedValue);\n    }\n  }\n  return t;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 432,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3324,
                        "startLineNumber": 597,
                        "startColumnNumber": 4,
                        "endLineNumber": 669,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private Object buildObject(final Type inType,final JsonObject object) throws Exception {\n  Type type=inType;\n  if (inType == Object.class) {\n    type=new JohnzonParameterizedType(Map.class,String.class,Object.class);\n  }\n  final Mappings.ClassMapping classMapping=mappings.findOrCreateClassMapping(type);\n  if (classMapping == null) {\n    if (ParameterizedType.class.isInstance(type)) {\n      final ParameterizedType aType=ParameterizedType.class.cast(type);\n      final Type[] fieldArgTypes=aType.getActualTypeArguments();\n      if (fieldArgTypes.length >= 2) {\n        final Class<?> raw=Class.class.cast(aType.getRawType());\n        final Map map;\n        if (LinkedHashMap.class == raw) {\n          map=new LinkedHashMap();\n        }\n else         if (SortedMap.class.isAssignableFrom(raw) || NavigableMap.class == raw || TreeMap.class == raw) {\n          map=new TreeMap();\n        }\n else         if (ConcurrentMap.class.isAssignableFrom(raw)) {\n          map=new ConcurrentHashMap(object.size());\n        }\n else         if (EnumMap.class.isAssignableFrom(raw)) {\n          map=new EnumMap(Class.class.cast(fieldArgTypes[0]));\n        }\n else         if (Map.class.isAssignableFrom(raw)) {\n          map=new HashMap(object.size());\n        }\n else {\n          map=null;\n        }\n        if (map != null) {\n          Type keyType;\n          if (ParameterizedType.class.isInstance(fieldArgTypes[0])) {\n            keyType=fieldArgTypes[0];\n          }\n else {\n            keyType=fieldArgTypes[0];\n          }\n          for (          final Map.Entry<String,JsonValue> value : object.entrySet()) {\n            map.put(convertTo(keyType,value.getKey()),toObject(value.getValue(),fieldArgTypes[1],null));\n          }\n          return map;\n        }\n      }\n    }\n  }\n  if (classMapping == null) {\n    throw new MapperException(\"Can't map \" + type);\n  }\n  final Object t=classMapping.factory.getParameterTypes().length == 0 ? classMapping.factory.create(null) : classMapping.factory.create(createParameters(classMapping,object));\n  for (  final Map.Entry<String,Mappings.Setter> setter : classMapping.setters.entrySet()) {\n    final JsonValue jsonValue=object.get(setter.getKey());\n    final Mappings.Setter value=setter.getValue();\n    if (JsonValue.class == value.paramType) {\n      setter.getValue().writer.write(t,jsonValue);\n      continue;\n    }\n    if (jsonValue == null) {\n      continue;\n    }\n    final AccessMode.Writer setterMethod=value.writer;\n    final Object convertedValue=toValue(jsonValue,value.converter,value.itemConverter,value.paramType);\n    if (convertedValue != null) {\n      setterMethod.write(t,convertedValue);\n    }\n  }\n  return t;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 449,
                    "astHeight": 20
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 45,
                    "startLineNumber": 654,
                    "startColumnNumber": 16,
                    "endLineNumber": 654,
                    "endColumnNumber": 61
                },
                "nodeContext": "setter.getValue().writer.write(t,jsonValue);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 10,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "java.lang.Object"
        },
        {
            "nodeContext": "t",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 664,
                "startColumnNumber": 35,
                "endLineNumber": 664,
                "endColumnNumber": 36
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 37,
                        "startLineNumber": 664,
                        "startColumnNumber": 16,
                        "endLineNumber": 664,
                        "endColumnNumber": 53
                    },
                    "nodeContext": "setterMethod.write(t,convertedValue)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 38,
                        "startLineNumber": 664,
                        "startColumnNumber": 16,
                        "endLineNumber": 664,
                        "endColumnNumber": 54
                    },
                    "nodeContext": "setterMethod.write(t,convertedValue);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 70,
                        "startLineNumber": 663,
                        "startColumnNumber": 40,
                        "endLineNumber": 665,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  setterMethod.write(t,convertedValue);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 98,
                        "startLineNumber": 663,
                        "startColumnNumber": 12,
                        "endLineNumber": 665,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (convertedValue != null) {\n  setterMethod.write(t,convertedValue);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 11,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 668,
                        "startLineNumber": 650,
                        "startColumnNumber": 96,
                        "endLineNumber": 666,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final JsonValue jsonValue=object.get(setter.getKey());\n  final Mappings.Setter value=setter.getValue();\n  if (JsonValue.class == value.paramType) {\n    setter.getValue().writer.write(t,jsonValue);\n    continue;\n  }\n  if (jsonValue == null) {\n    continue;\n  }\n  final AccessMode.Writer setterMethod=value.writer;\n  final Object convertedValue=toValue(jsonValue,value.converter,value.itemConverter,value.paramType);\n  if (convertedValue != null) {\n    setterMethod.write(t,convertedValue);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 90,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 756,
                        "startLineNumber": 650,
                        "startColumnNumber": 8,
                        "endLineNumber": 666,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (final Map.Entry<String,Mappings.Setter> setter : classMapping.setters.entrySet()) {\n  final JsonValue jsonValue=object.get(setter.getKey());\n  final Mappings.Setter value=setter.getValue();\n  if (JsonValue.class == value.paramType) {\n    setter.getValue().writer.write(t,jsonValue);\n    continue;\n  }\n  if (jsonValue == null) {\n    continue;\n  }\n  final AccessMode.Writer setterMethod=value.writer;\n  final Object convertedValue=toValue(jsonValue,value.converter,value.itemConverter,value.paramType);\n  if (convertedValue != null) {\n    setterMethod.write(t,convertedValue);\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 110,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3236,
                        "startLineNumber": 597,
                        "startColumnNumber": 92,
                        "endLineNumber": 669,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  Type type=inType;\n  if (inType == Object.class) {\n    type=new JohnzonParameterizedType(Map.class,String.class,Object.class);\n  }\n  final Mappings.ClassMapping classMapping=mappings.findOrCreateClassMapping(type);\n  if (classMapping == null) {\n    if (ParameterizedType.class.isInstance(type)) {\n      final ParameterizedType aType=ParameterizedType.class.cast(type);\n      final Type[] fieldArgTypes=aType.getActualTypeArguments();\n      if (fieldArgTypes.length >= 2) {\n        final Class<?> raw=Class.class.cast(aType.getRawType());\n        final Map map;\n        if (LinkedHashMap.class == raw) {\n          map=new LinkedHashMap();\n        }\n else         if (SortedMap.class.isAssignableFrom(raw) || NavigableMap.class == raw || TreeMap.class == raw) {\n          map=new TreeMap();\n        }\n else         if (ConcurrentMap.class.isAssignableFrom(raw)) {\n          map=new ConcurrentHashMap(object.size());\n        }\n else         if (EnumMap.class.isAssignableFrom(raw)) {\n          map=new EnumMap(Class.class.cast(fieldArgTypes[0]));\n        }\n else         if (Map.class.isAssignableFrom(raw)) {\n          map=new HashMap(object.size());\n        }\n else {\n          map=null;\n        }\n        if (map != null) {\n          Type keyType;\n          if (ParameterizedType.class.isInstance(fieldArgTypes[0])) {\n            keyType=fieldArgTypes[0];\n          }\n else {\n            keyType=fieldArgTypes[0];\n          }\n          for (          final Map.Entry<String,JsonValue> value : object.entrySet()) {\n            map.put(convertTo(keyType,value.getKey()),toObject(value.getValue(),fieldArgTypes[1],null));\n          }\n          return map;\n        }\n      }\n    }\n  }\n  if (classMapping == null) {\n    throw new MapperException(\"Can't map \" + type);\n  }\n  final Object t=classMapping.factory.getParameterTypes().length == 0 ? classMapping.factory.create(null) : classMapping.factory.create(createParameters(classMapping,object));\n  for (  final Map.Entry<String,Mappings.Setter> setter : classMapping.setters.entrySet()) {\n    final JsonValue jsonValue=object.get(setter.getKey());\n    final Mappings.Setter value=setter.getValue();\n    if (JsonValue.class == value.paramType) {\n      setter.getValue().writer.write(t,jsonValue);\n      continue;\n    }\n    if (jsonValue == null) {\n      continue;\n    }\n    final AccessMode.Writer setterMethod=value.writer;\n    final Object convertedValue=toValue(jsonValue,value.converter,value.itemConverter,value.paramType);\n    if (convertedValue != null) {\n      setterMethod.write(t,convertedValue);\n    }\n  }\n  return t;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 432,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3324,
                        "startLineNumber": 597,
                        "startColumnNumber": 4,
                        "endLineNumber": 669,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private Object buildObject(final Type inType,final JsonObject object) throws Exception {\n  Type type=inType;\n  if (inType == Object.class) {\n    type=new JohnzonParameterizedType(Map.class,String.class,Object.class);\n  }\n  final Mappings.ClassMapping classMapping=mappings.findOrCreateClassMapping(type);\n  if (classMapping == null) {\n    if (ParameterizedType.class.isInstance(type)) {\n      final ParameterizedType aType=ParameterizedType.class.cast(type);\n      final Type[] fieldArgTypes=aType.getActualTypeArguments();\n      if (fieldArgTypes.length >= 2) {\n        final Class<?> raw=Class.class.cast(aType.getRawType());\n        final Map map;\n        if (LinkedHashMap.class == raw) {\n          map=new LinkedHashMap();\n        }\n else         if (SortedMap.class.isAssignableFrom(raw) || NavigableMap.class == raw || TreeMap.class == raw) {\n          map=new TreeMap();\n        }\n else         if (ConcurrentMap.class.isAssignableFrom(raw)) {\n          map=new ConcurrentHashMap(object.size());\n        }\n else         if (EnumMap.class.isAssignableFrom(raw)) {\n          map=new EnumMap(Class.class.cast(fieldArgTypes[0]));\n        }\n else         if (Map.class.isAssignableFrom(raw)) {\n          map=new HashMap(object.size());\n        }\n else {\n          map=null;\n        }\n        if (map != null) {\n          Type keyType;\n          if (ParameterizedType.class.isInstance(fieldArgTypes[0])) {\n            keyType=fieldArgTypes[0];\n          }\n else {\n            keyType=fieldArgTypes[0];\n          }\n          for (          final Map.Entry<String,JsonValue> value : object.entrySet()) {\n            map.put(convertTo(keyType,value.getKey()),toObject(value.getValue(),fieldArgTypes[1],null));\n          }\n          return map;\n        }\n      }\n    }\n  }\n  if (classMapping == null) {\n    throw new MapperException(\"Can't map \" + type);\n  }\n  final Object t=classMapping.factory.getParameterTypes().length == 0 ? classMapping.factory.create(null) : classMapping.factory.create(createParameters(classMapping,object));\n  for (  final Map.Entry<String,Mappings.Setter> setter : classMapping.setters.entrySet()) {\n    final JsonValue jsonValue=object.get(setter.getKey());\n    final Mappings.Setter value=setter.getValue();\n    if (JsonValue.class == value.paramType) {\n      setter.getValue().writer.write(t,jsonValue);\n      continue;\n    }\n    if (jsonValue == null) {\n      continue;\n    }\n    final AccessMode.Writer setterMethod=value.writer;\n    final Object convertedValue=toValue(jsonValue,value.converter,value.itemConverter,value.paramType);\n    if (convertedValue != null) {\n      setterMethod.write(t,convertedValue);\n    }\n  }\n  return t;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 449,
                    "astHeight": 20
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 38,
                    "startLineNumber": 664,
                    "startColumnNumber": 16,
                    "endLineNumber": 664,
                    "endColumnNumber": 54
                },
                "nodeContext": "setterMethod.write(t,convertedValue);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 6,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.lang.Object"
        },
        {
            "nodeContext": "t",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 668,
                "startColumnNumber": 15,
                "endLineNumber": 668,
                "endColumnNumber": 16
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 9,
                        "startLineNumber": 668,
                        "startColumnNumber": 8,
                        "endLineNumber": 668,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "return t;\n",
                    "nodeType": "ReturnStatement",
                    "astNodeNumber": 2,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3236,
                        "startLineNumber": 597,
                        "startColumnNumber": 92,
                        "endLineNumber": 669,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  Type type=inType;\n  if (inType == Object.class) {\n    type=new JohnzonParameterizedType(Map.class,String.class,Object.class);\n  }\n  final Mappings.ClassMapping classMapping=mappings.findOrCreateClassMapping(type);\n  if (classMapping == null) {\n    if (ParameterizedType.class.isInstance(type)) {\n      final ParameterizedType aType=ParameterizedType.class.cast(type);\n      final Type[] fieldArgTypes=aType.getActualTypeArguments();\n      if (fieldArgTypes.length >= 2) {\n        final Class<?> raw=Class.class.cast(aType.getRawType());\n        final Map map;\n        if (LinkedHashMap.class == raw) {\n          map=new LinkedHashMap();\n        }\n else         if (SortedMap.class.isAssignableFrom(raw) || NavigableMap.class == raw || TreeMap.class == raw) {\n          map=new TreeMap();\n        }\n else         if (ConcurrentMap.class.isAssignableFrom(raw)) {\n          map=new ConcurrentHashMap(object.size());\n        }\n else         if (EnumMap.class.isAssignableFrom(raw)) {\n          map=new EnumMap(Class.class.cast(fieldArgTypes[0]));\n        }\n else         if (Map.class.isAssignableFrom(raw)) {\n          map=new HashMap(object.size());\n        }\n else {\n          map=null;\n        }\n        if (map != null) {\n          Type keyType;\n          if (ParameterizedType.class.isInstance(fieldArgTypes[0])) {\n            keyType=fieldArgTypes[0];\n          }\n else {\n            keyType=fieldArgTypes[0];\n          }\n          for (          final Map.Entry<String,JsonValue> value : object.entrySet()) {\n            map.put(convertTo(keyType,value.getKey()),toObject(value.getValue(),fieldArgTypes[1],null));\n          }\n          return map;\n        }\n      }\n    }\n  }\n  if (classMapping == null) {\n    throw new MapperException(\"Can't map \" + type);\n  }\n  final Object t=classMapping.factory.getParameterTypes().length == 0 ? classMapping.factory.create(null) : classMapping.factory.create(createParameters(classMapping,object));\n  for (  final Map.Entry<String,Mappings.Setter> setter : classMapping.setters.entrySet()) {\n    final JsonValue jsonValue=object.get(setter.getKey());\n    final Mappings.Setter value=setter.getValue();\n    if (JsonValue.class == value.paramType) {\n      setter.getValue().writer.write(t,jsonValue);\n      continue;\n    }\n    if (jsonValue == null) {\n      continue;\n    }\n    final AccessMode.Writer setterMethod=value.writer;\n    final Object convertedValue=toValue(jsonValue,value.converter,value.itemConverter,value.paramType);\n    if (convertedValue != null) {\n      setterMethod.write(t,convertedValue);\n    }\n  }\n  return t;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 432,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3324,
                        "startLineNumber": 597,
                        "startColumnNumber": 4,
                        "endLineNumber": 669,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private Object buildObject(final Type inType,final JsonObject object) throws Exception {\n  Type type=inType;\n  if (inType == Object.class) {\n    type=new JohnzonParameterizedType(Map.class,String.class,Object.class);\n  }\n  final Mappings.ClassMapping classMapping=mappings.findOrCreateClassMapping(type);\n  if (classMapping == null) {\n    if (ParameterizedType.class.isInstance(type)) {\n      final ParameterizedType aType=ParameterizedType.class.cast(type);\n      final Type[] fieldArgTypes=aType.getActualTypeArguments();\n      if (fieldArgTypes.length >= 2) {\n        final Class<?> raw=Class.class.cast(aType.getRawType());\n        final Map map;\n        if (LinkedHashMap.class == raw) {\n          map=new LinkedHashMap();\n        }\n else         if (SortedMap.class.isAssignableFrom(raw) || NavigableMap.class == raw || TreeMap.class == raw) {\n          map=new TreeMap();\n        }\n else         if (ConcurrentMap.class.isAssignableFrom(raw)) {\n          map=new ConcurrentHashMap(object.size());\n        }\n else         if (EnumMap.class.isAssignableFrom(raw)) {\n          map=new EnumMap(Class.class.cast(fieldArgTypes[0]));\n        }\n else         if (Map.class.isAssignableFrom(raw)) {\n          map=new HashMap(object.size());\n        }\n else {\n          map=null;\n        }\n        if (map != null) {\n          Type keyType;\n          if (ParameterizedType.class.isInstance(fieldArgTypes[0])) {\n            keyType=fieldArgTypes[0];\n          }\n else {\n            keyType=fieldArgTypes[0];\n          }\n          for (          final Map.Entry<String,JsonValue> value : object.entrySet()) {\n            map.put(convertTo(keyType,value.getKey()),toObject(value.getValue(),fieldArgTypes[1],null));\n          }\n          return map;\n        }\n      }\n    }\n  }\n  if (classMapping == null) {\n    throw new MapperException(\"Can't map \" + type);\n  }\n  final Object t=classMapping.factory.getParameterTypes().length == 0 ? classMapping.factory.create(null) : classMapping.factory.create(createParameters(classMapping,object));\n  for (  final Map.Entry<String,Mappings.Setter> setter : classMapping.setters.entrySet()) {\n    final JsonValue jsonValue=object.get(setter.getKey());\n    final Mappings.Setter value=setter.getValue();\n    if (JsonValue.class == value.paramType) {\n      setter.getValue().writer.write(t,jsonValue);\n      continue;\n    }\n    if (jsonValue == null) {\n      continue;\n    }\n    final AccessMode.Writer setterMethod=value.writer;\n    final Object convertedValue=toValue(jsonValue,value.converter,value.itemConverter,value.paramType);\n    if (convertedValue != null) {\n      setterMethod.write(t,convertedValue);\n    }\n  }\n  return t;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 449,
                    "astHeight": 20
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 9,
                    "startLineNumber": 668,
                    "startColumnNumber": 8,
                    "endLineNumber": 668,
                    "endColumnNumber": 17
                },
                "nodeContext": "return t;\n",
                "nodeType": "ReturnStatement",
                "astNodeNumber": 2,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "java.lang.Object"
        }
    ],
    "positionList": [
        {
            "charLength": 1,
            "startLineNumber": 654,
            "startColumnNumber": 47,
            "endLineNumber": 654,
            "endColumnNumber": 48
        },
        {
            "charLength": 1,
            "startLineNumber": 664,
            "startColumnNumber": 35,
            "endLineNumber": 664,
            "endColumnNumber": 36
        },
        {
            "charLength": 1,
            "startLineNumber": 668,
            "startColumnNumber": 15,
            "endLineNumber": 668,
            "endColumnNumber": 16
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 1
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 1
        }
    ]
}