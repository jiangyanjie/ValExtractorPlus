{
    "id": 1567,
    "expression": "null",
    "projectName": "jackrabbit-oak",
    "commitID": "2b32e7a4caca999ae8fa1bb4f6e58abcf1cc61b0",
    "filePath": "oak-solr-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/solr/query/SolrQueryIndex.java",
    "occurrences": 18,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "null",
            "nodeType": "NullLiteral",
            "nodePosition": {
                "charLength": 4,
                "startLineNumber": 110,
                "startColumnNumber": 46,
                "endLineNumber": 110,
                "endColumnNumber": 50
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 38,
                        "startLineNumber": 110,
                        "startColumnNumber": 12,
                        "endLineNumber": 110,
                        "endColumnNumber": 50
                    },
                    "nodeContext": "filter.getFullTextConstraint() != null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 469,
                        "startLineNumber": 110,
                        "startColumnNumber": 8,
                        "endLineNumber": 118,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (filter.getFullTextConstraint() != null) {\n  queryBuilder.append(getFullTextQuery(filter.getFullTextConstraint()));\n  queryBuilder.append(' ');\n}\n else if (filter.getFulltextConditions() != null) {\n  Collection<String> fulltextConditions=filter.getFulltextConditions();\n  for (  String fulltextCondition : fulltextConditions) {\n    queryBuilder.append(fulltextCondition).append(\" \");\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 54,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 7985,
                        "startLineNumber": 103,
                        "startColumnNumber": 46,
                        "endLineNumber": 255,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  SolrQuery solrQuery=new SolrQuery();\n  setDefaults(solrQuery);\n  StringBuilder queryBuilder=new StringBuilder();\n  if (filter.getFullTextConstraint() != null) {\n    queryBuilder.append(getFullTextQuery(filter.getFullTextConstraint()));\n    queryBuilder.append(' ');\n  }\n else   if (filter.getFulltextConditions() != null) {\n    Collection<String> fulltextConditions=filter.getFulltextConditions();\n    for (    String fulltextCondition : fulltextConditions) {\n      queryBuilder.append(fulltextCondition).append(\" \");\n    }\n  }\n  Collection<Filter.PropertyRestriction> propertyRestrictions=filter.getPropertyRestrictions();\n  if (propertyRestrictions != null && !propertyRestrictions.isEmpty()) {\n    for (    Filter.PropertyRestriction pr : propertyRestrictions) {\n      if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n        String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n        if (isSupportedHttpRequest(nativeQueryString)) {\n          String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n          if (!\"select\".equals(requestHandlerString)) {\n            if (requestHandlerString.charAt(0) != '/') {\n              requestHandlerString=\"/\" + requestHandlerString;\n            }\n            solrQuery.setRequestHandler(requestHandlerString);\n          }\n          String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n          for (          String param : parameterString.split(\"&\")) {\n            String[] kv=param.split(\"=\");\n            if (kv.length != 2) {\n              throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n            }\n else {\n              if (\"stream.body\".equals(kv[0])) {\n                kv[0]=\"q\";\n                String mltFlString=\"mlt.fl=\";\n                int mltFlIndex=parameterString.indexOf(mltFlString);\n                if (mltFlIndex > -1) {\n                  int beginIndex=mltFlIndex + mltFlString.length();\n                  int endIndex=parameterString.indexOf('&',beginIndex);\n                  String fields;\n                  if (endIndex > beginIndex) {\n                    fields=parameterString.substring(beginIndex,endIndex);\n                  }\n else {\n                    fields=parameterString.substring(beginIndex);\n                  }\n                  kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n                }\n              }\n              solrQuery.setParam(kv[0],kv[1]);\n            }\n          }\n          return solrQuery;\n        }\n else {\n          queryBuilder.append(nativeQueryString);\n        }\n      }\n else {\n        if (pr.propertyName.contains(\"/\")) {\n          continue;\n        }\n        if (\"rep:excerpt\".equals(pr.propertyName)) {\n          continue;\n        }\n        String first=null;\n        if (pr.first != null) {\n          first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n        }\n        String last=null;\n        if (pr.last != null) {\n          last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n        }\n        String prField=configuration.getFieldForPropertyRestriction(pr);\n        CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n        if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n          queryBuilder.append(configuration.getPathField());\n          queryBuilder.append(':');\n          queryBuilder.append(first);\n        }\n else {\n          if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(first);\n          }\n else           if (pr.first == null && pr.last == null) {\n            if (!queryBuilder.toString().contains(fieldName + \":\")) {\n              queryBuilder.append(fieldName).append(':');\n              queryBuilder.append('*');\n            }\n          }\n else           if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n          }\n else           if (pr.isLike) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n          }\n else {\n            throw new RuntimeException(\"[unexpected!] not handled case\");\n          }\n        }\n      }\n      queryBuilder.append(\" \");\n    }\n  }\n  String[] pts=filter.getPrimaryTypes().toArray(new String[filter.getPrimaryTypes().size()]);\n  for (int i=0; i < pts.length; i++) {\n    String pt=pts[i];\n    if (i == 0) {\n      queryBuilder.append(\"(\");\n    }\n    if (i > 0 && i < pts.length) {\n      queryBuilder.append(\"OR \");\n    }\n    queryBuilder.append(\"jcr\\\\:primaryType\").append(':').append(partialEscape(pt)).append(\" \");\n    if (i == pts.length - 1) {\n      queryBuilder.append(\")\");\n      queryBuilder.append(' ');\n    }\n  }\n  Filter.PathRestriction pathRestriction=filter.getPathRestriction();\n  if (pathRestriction != null) {\n    String path=purgePath(filter);\n    String fieldName=configuration.getFieldForPathRestriction(pathRestriction);\n    if (fieldName != null) {\n      queryBuilder.append(fieldName);\n      queryBuilder.append(':');\n      queryBuilder.append(path);\n    }\n  }\n  if (queryBuilder.length() == 0) {\n    queryBuilder.append(\"*:*\");\n  }\n  String escapedQuery=queryBuilder.toString();\n  solrQuery.setQuery(escapedQuery);\n  if (log.isDebugEnabled()) {\n    log.debug(\"JCR query {} has been converted to Solr query {}\",filter.getQueryStatement(),solrQuery.toString());\n  }\n  return solrQuery;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 858,
                    "astHeight": 24
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8027,
                        "startLineNumber": 103,
                        "startColumnNumber": 4,
                        "endLineNumber": 255,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private SolrQuery getQuery(Filter filter){\n  SolrQuery solrQuery=new SolrQuery();\n  setDefaults(solrQuery);\n  StringBuilder queryBuilder=new StringBuilder();\n  if (filter.getFullTextConstraint() != null) {\n    queryBuilder.append(getFullTextQuery(filter.getFullTextConstraint()));\n    queryBuilder.append(' ');\n  }\n else   if (filter.getFulltextConditions() != null) {\n    Collection<String> fulltextConditions=filter.getFulltextConditions();\n    for (    String fulltextCondition : fulltextConditions) {\n      queryBuilder.append(fulltextCondition).append(\" \");\n    }\n  }\n  Collection<Filter.PropertyRestriction> propertyRestrictions=filter.getPropertyRestrictions();\n  if (propertyRestrictions != null && !propertyRestrictions.isEmpty()) {\n    for (    Filter.PropertyRestriction pr : propertyRestrictions) {\n      if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n        String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n        if (isSupportedHttpRequest(nativeQueryString)) {\n          String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n          if (!\"select\".equals(requestHandlerString)) {\n            if (requestHandlerString.charAt(0) != '/') {\n              requestHandlerString=\"/\" + requestHandlerString;\n            }\n            solrQuery.setRequestHandler(requestHandlerString);\n          }\n          String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n          for (          String param : parameterString.split(\"&\")) {\n            String[] kv=param.split(\"=\");\n            if (kv.length != 2) {\n              throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n            }\n else {\n              if (\"stream.body\".equals(kv[0])) {\n                kv[0]=\"q\";\n                String mltFlString=\"mlt.fl=\";\n                int mltFlIndex=parameterString.indexOf(mltFlString);\n                if (mltFlIndex > -1) {\n                  int beginIndex=mltFlIndex + mltFlString.length();\n                  int endIndex=parameterString.indexOf('&',beginIndex);\n                  String fields;\n                  if (endIndex > beginIndex) {\n                    fields=parameterString.substring(beginIndex,endIndex);\n                  }\n else {\n                    fields=parameterString.substring(beginIndex);\n                  }\n                  kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n                }\n              }\n              solrQuery.setParam(kv[0],kv[1]);\n            }\n          }\n          return solrQuery;\n        }\n else {\n          queryBuilder.append(nativeQueryString);\n        }\n      }\n else {\n        if (pr.propertyName.contains(\"/\")) {\n          continue;\n        }\n        if (\"rep:excerpt\".equals(pr.propertyName)) {\n          continue;\n        }\n        String first=null;\n        if (pr.first != null) {\n          first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n        }\n        String last=null;\n        if (pr.last != null) {\n          last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n        }\n        String prField=configuration.getFieldForPropertyRestriction(pr);\n        CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n        if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n          queryBuilder.append(configuration.getPathField());\n          queryBuilder.append(':');\n          queryBuilder.append(first);\n        }\n else {\n          if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(first);\n          }\n else           if (pr.first == null && pr.last == null) {\n            if (!queryBuilder.toString().contains(fieldName + \":\")) {\n              queryBuilder.append(fieldName).append(':');\n              queryBuilder.append('*');\n            }\n          }\n else           if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n          }\n else           if (pr.isLike) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n          }\n else {\n            throw new RuntimeException(\"[unexpected!] not handled case\");\n          }\n        }\n      }\n      queryBuilder.append(\" \");\n    }\n  }\n  String[] pts=filter.getPrimaryTypes().toArray(new String[filter.getPrimaryTypes().size()]);\n  for (int i=0; i < pts.length; i++) {\n    String pt=pts[i];\n    if (i == 0) {\n      queryBuilder.append(\"(\");\n    }\n    if (i > 0 && i < pts.length) {\n      queryBuilder.append(\"OR \");\n    }\n    queryBuilder.append(\"jcr\\\\:primaryType\").append(':').append(partialEscape(pt)).append(\" \");\n    if (i == pts.length - 1) {\n      queryBuilder.append(\")\");\n      queryBuilder.append(' ');\n    }\n  }\n  Filter.PathRestriction pathRestriction=filter.getPathRestriction();\n  if (pathRestriction != null) {\n    String path=purgePath(filter);\n    String fieldName=configuration.getFieldForPathRestriction(pathRestriction);\n    if (fieldName != null) {\n      queryBuilder.append(fieldName);\n      queryBuilder.append(':');\n      queryBuilder.append(path);\n    }\n  }\n  if (queryBuilder.length() == 0) {\n    queryBuilder.append(\"*:*\");\n  }\n  String escapedQuery=queryBuilder.toString();\n  solrQuery.setQuery(escapedQuery);\n  if (log.isDebugEnabled()) {\n    log.debug(\"JCR query {} has been converted to Solr query {}\",filter.getQueryStatement(),solrQuery.toString());\n  }\n  return solrQuery;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 867,
                    "astHeight": 25
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 38,
                    "startLineNumber": 110,
                    "startColumnNumber": 12,
                    "endLineNumber": 110,
                    "endColumnNumber": 50
                },
                "nodeContext": "filter.getFullTextConstraint() != null",
                "nodeType": "InfixExpression",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "null"
        },
        {
            "nodeContext": "null",
            "nodeType": "NullLiteral",
            "nodePosition": {
                "charLength": 4,
                "startLineNumber": 113,
                "startColumnNumber": 53,
                "endLineNumber": 113,
                "endColumnNumber": 57
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 38,
                        "startLineNumber": 113,
                        "startColumnNumber": 19,
                        "endLineNumber": 113,
                        "endColumnNumber": 57
                    },
                    "nodeContext": "filter.getFulltextConditions() != null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 287,
                        "startLineNumber": 113,
                        "startColumnNumber": 15,
                        "endLineNumber": 118,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (filter.getFulltextConditions() != null) {\n  Collection<String> fulltextConditions=filter.getFulltextConditions();\n  for (  String fulltextCondition : fulltextConditions) {\n    queryBuilder.append(fulltextCondition).append(\" \");\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 33,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 469,
                        "startLineNumber": 110,
                        "startColumnNumber": 8,
                        "endLineNumber": 118,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (filter.getFullTextConstraint() != null) {\n  queryBuilder.append(getFullTextQuery(filter.getFullTextConstraint()));\n  queryBuilder.append(' ');\n}\n else if (filter.getFulltextConditions() != null) {\n  Collection<String> fulltextConditions=filter.getFulltextConditions();\n  for (  String fulltextCondition : fulltextConditions) {\n    queryBuilder.append(fulltextCondition).append(\" \");\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 54,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 7985,
                        "startLineNumber": 103,
                        "startColumnNumber": 46,
                        "endLineNumber": 255,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  SolrQuery solrQuery=new SolrQuery();\n  setDefaults(solrQuery);\n  StringBuilder queryBuilder=new StringBuilder();\n  if (filter.getFullTextConstraint() != null) {\n    queryBuilder.append(getFullTextQuery(filter.getFullTextConstraint()));\n    queryBuilder.append(' ');\n  }\n else   if (filter.getFulltextConditions() != null) {\n    Collection<String> fulltextConditions=filter.getFulltextConditions();\n    for (    String fulltextCondition : fulltextConditions) {\n      queryBuilder.append(fulltextCondition).append(\" \");\n    }\n  }\n  Collection<Filter.PropertyRestriction> propertyRestrictions=filter.getPropertyRestrictions();\n  if (propertyRestrictions != null && !propertyRestrictions.isEmpty()) {\n    for (    Filter.PropertyRestriction pr : propertyRestrictions) {\n      if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n        String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n        if (isSupportedHttpRequest(nativeQueryString)) {\n          String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n          if (!\"select\".equals(requestHandlerString)) {\n            if (requestHandlerString.charAt(0) != '/') {\n              requestHandlerString=\"/\" + requestHandlerString;\n            }\n            solrQuery.setRequestHandler(requestHandlerString);\n          }\n          String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n          for (          String param : parameterString.split(\"&\")) {\n            String[] kv=param.split(\"=\");\n            if (kv.length != 2) {\n              throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n            }\n else {\n              if (\"stream.body\".equals(kv[0])) {\n                kv[0]=\"q\";\n                String mltFlString=\"mlt.fl=\";\n                int mltFlIndex=parameterString.indexOf(mltFlString);\n                if (mltFlIndex > -1) {\n                  int beginIndex=mltFlIndex + mltFlString.length();\n                  int endIndex=parameterString.indexOf('&',beginIndex);\n                  String fields;\n                  if (endIndex > beginIndex) {\n                    fields=parameterString.substring(beginIndex,endIndex);\n                  }\n else {\n                    fields=parameterString.substring(beginIndex);\n                  }\n                  kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n                }\n              }\n              solrQuery.setParam(kv[0],kv[1]);\n            }\n          }\n          return solrQuery;\n        }\n else {\n          queryBuilder.append(nativeQueryString);\n        }\n      }\n else {\n        if (pr.propertyName.contains(\"/\")) {\n          continue;\n        }\n        if (\"rep:excerpt\".equals(pr.propertyName)) {\n          continue;\n        }\n        String first=null;\n        if (pr.first != null) {\n          first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n        }\n        String last=null;\n        if (pr.last != null) {\n          last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n        }\n        String prField=configuration.getFieldForPropertyRestriction(pr);\n        CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n        if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n          queryBuilder.append(configuration.getPathField());\n          queryBuilder.append(':');\n          queryBuilder.append(first);\n        }\n else {\n          if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(first);\n          }\n else           if (pr.first == null && pr.last == null) {\n            if (!queryBuilder.toString().contains(fieldName + \":\")) {\n              queryBuilder.append(fieldName).append(':');\n              queryBuilder.append('*');\n            }\n          }\n else           if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n          }\n else           if (pr.isLike) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n          }\n else {\n            throw new RuntimeException(\"[unexpected!] not handled case\");\n          }\n        }\n      }\n      queryBuilder.append(\" \");\n    }\n  }\n  String[] pts=filter.getPrimaryTypes().toArray(new String[filter.getPrimaryTypes().size()]);\n  for (int i=0; i < pts.length; i++) {\n    String pt=pts[i];\n    if (i == 0) {\n      queryBuilder.append(\"(\");\n    }\n    if (i > 0 && i < pts.length) {\n      queryBuilder.append(\"OR \");\n    }\n    queryBuilder.append(\"jcr\\\\:primaryType\").append(':').append(partialEscape(pt)).append(\" \");\n    if (i == pts.length - 1) {\n      queryBuilder.append(\")\");\n      queryBuilder.append(' ');\n    }\n  }\n  Filter.PathRestriction pathRestriction=filter.getPathRestriction();\n  if (pathRestriction != null) {\n    String path=purgePath(filter);\n    String fieldName=configuration.getFieldForPathRestriction(pathRestriction);\n    if (fieldName != null) {\n      queryBuilder.append(fieldName);\n      queryBuilder.append(':');\n      queryBuilder.append(path);\n    }\n  }\n  if (queryBuilder.length() == 0) {\n    queryBuilder.append(\"*:*\");\n  }\n  String escapedQuery=queryBuilder.toString();\n  solrQuery.setQuery(escapedQuery);\n  if (log.isDebugEnabled()) {\n    log.debug(\"JCR query {} has been converted to Solr query {}\",filter.getQueryStatement(),solrQuery.toString());\n  }\n  return solrQuery;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 858,
                    "astHeight": 24
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8027,
                        "startLineNumber": 103,
                        "startColumnNumber": 4,
                        "endLineNumber": 255,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private SolrQuery getQuery(Filter filter){\n  SolrQuery solrQuery=new SolrQuery();\n  setDefaults(solrQuery);\n  StringBuilder queryBuilder=new StringBuilder();\n  if (filter.getFullTextConstraint() != null) {\n    queryBuilder.append(getFullTextQuery(filter.getFullTextConstraint()));\n    queryBuilder.append(' ');\n  }\n else   if (filter.getFulltextConditions() != null) {\n    Collection<String> fulltextConditions=filter.getFulltextConditions();\n    for (    String fulltextCondition : fulltextConditions) {\n      queryBuilder.append(fulltextCondition).append(\" \");\n    }\n  }\n  Collection<Filter.PropertyRestriction> propertyRestrictions=filter.getPropertyRestrictions();\n  if (propertyRestrictions != null && !propertyRestrictions.isEmpty()) {\n    for (    Filter.PropertyRestriction pr : propertyRestrictions) {\n      if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n        String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n        if (isSupportedHttpRequest(nativeQueryString)) {\n          String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n          if (!\"select\".equals(requestHandlerString)) {\n            if (requestHandlerString.charAt(0) != '/') {\n              requestHandlerString=\"/\" + requestHandlerString;\n            }\n            solrQuery.setRequestHandler(requestHandlerString);\n          }\n          String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n          for (          String param : parameterString.split(\"&\")) {\n            String[] kv=param.split(\"=\");\n            if (kv.length != 2) {\n              throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n            }\n else {\n              if (\"stream.body\".equals(kv[0])) {\n                kv[0]=\"q\";\n                String mltFlString=\"mlt.fl=\";\n                int mltFlIndex=parameterString.indexOf(mltFlString);\n                if (mltFlIndex > -1) {\n                  int beginIndex=mltFlIndex + mltFlString.length();\n                  int endIndex=parameterString.indexOf('&',beginIndex);\n                  String fields;\n                  if (endIndex > beginIndex) {\n                    fields=parameterString.substring(beginIndex,endIndex);\n                  }\n else {\n                    fields=parameterString.substring(beginIndex);\n                  }\n                  kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n                }\n              }\n              solrQuery.setParam(kv[0],kv[1]);\n            }\n          }\n          return solrQuery;\n        }\n else {\n          queryBuilder.append(nativeQueryString);\n        }\n      }\n else {\n        if (pr.propertyName.contains(\"/\")) {\n          continue;\n        }\n        if (\"rep:excerpt\".equals(pr.propertyName)) {\n          continue;\n        }\n        String first=null;\n        if (pr.first != null) {\n          first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n        }\n        String last=null;\n        if (pr.last != null) {\n          last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n        }\n        String prField=configuration.getFieldForPropertyRestriction(pr);\n        CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n        if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n          queryBuilder.append(configuration.getPathField());\n          queryBuilder.append(':');\n          queryBuilder.append(first);\n        }\n else {\n          if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(first);\n          }\n else           if (pr.first == null && pr.last == null) {\n            if (!queryBuilder.toString().contains(fieldName + \":\")) {\n              queryBuilder.append(fieldName).append(':');\n              queryBuilder.append('*');\n            }\n          }\n else           if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n          }\n else           if (pr.isLike) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n          }\n else {\n            throw new RuntimeException(\"[unexpected!] not handled case\");\n          }\n        }\n      }\n      queryBuilder.append(\" \");\n    }\n  }\n  String[] pts=filter.getPrimaryTypes().toArray(new String[filter.getPrimaryTypes().size()]);\n  for (int i=0; i < pts.length; i++) {\n    String pt=pts[i];\n    if (i == 0) {\n      queryBuilder.append(\"(\");\n    }\n    if (i > 0 && i < pts.length) {\n      queryBuilder.append(\"OR \");\n    }\n    queryBuilder.append(\"jcr\\\\:primaryType\").append(':').append(partialEscape(pt)).append(\" \");\n    if (i == pts.length - 1) {\n      queryBuilder.append(\")\");\n      queryBuilder.append(' ');\n    }\n  }\n  Filter.PathRestriction pathRestriction=filter.getPathRestriction();\n  if (pathRestriction != null) {\n    String path=purgePath(filter);\n    String fieldName=configuration.getFieldForPathRestriction(pathRestriction);\n    if (fieldName != null) {\n      queryBuilder.append(fieldName);\n      queryBuilder.append(':');\n      queryBuilder.append(path);\n    }\n  }\n  if (queryBuilder.length() == 0) {\n    queryBuilder.append(\"*:*\");\n  }\n  String escapedQuery=queryBuilder.toString();\n  solrQuery.setQuery(escapedQuery);\n  if (log.isDebugEnabled()) {\n    log.debug(\"JCR query {} has been converted to Solr query {}\",filter.getQueryStatement(),solrQuery.toString());\n  }\n  return solrQuery;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 867,
                    "astHeight": 25
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 38,
                    "startLineNumber": 113,
                    "startColumnNumber": 19,
                    "endLineNumber": 113,
                    "endColumnNumber": 57
                },
                "nodeContext": "filter.getFulltextConditions() != null",
                "nodeType": "InfixExpression",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "null"
        },
        {
            "nodeContext": "null",
            "nodeType": "NullLiteral",
            "nodePosition": {
                "charLength": 4,
                "startLineNumber": 121,
                "startColumnNumber": 36,
                "endLineNumber": 121,
                "endColumnNumber": 40
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 28,
                        "startLineNumber": 121,
                        "startColumnNumber": 12,
                        "endLineNumber": 121,
                        "endColumnNumber": 40
                    },
                    "nodeContext": "propertyRestrictions != null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 63,
                        "startLineNumber": 121,
                        "startColumnNumber": 12,
                        "endLineNumber": 121,
                        "endColumnNumber": 75
                    },
                    "nodeContext": "propertyRestrictions != null && !propertyRestrictions.isEmpty()",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 5774,
                        "startLineNumber": 121,
                        "startColumnNumber": 8,
                        "endLineNumber": 214,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (propertyRestrictions != null && !propertyRestrictions.isEmpty()) {\n  for (  Filter.PropertyRestriction pr : propertyRestrictions) {\n    if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n      String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n      if (isSupportedHttpRequest(nativeQueryString)) {\n        String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n        if (!\"select\".equals(requestHandlerString)) {\n          if (requestHandlerString.charAt(0) != '/') {\n            requestHandlerString=\"/\" + requestHandlerString;\n          }\n          solrQuery.setRequestHandler(requestHandlerString);\n        }\n        String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n        for (        String param : parameterString.split(\"&\")) {\n          String[] kv=param.split(\"=\");\n          if (kv.length != 2) {\n            throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n          }\n else {\n            if (\"stream.body\".equals(kv[0])) {\n              kv[0]=\"q\";\n              String mltFlString=\"mlt.fl=\";\n              int mltFlIndex=parameterString.indexOf(mltFlString);\n              if (mltFlIndex > -1) {\n                int beginIndex=mltFlIndex + mltFlString.length();\n                int endIndex=parameterString.indexOf('&',beginIndex);\n                String fields;\n                if (endIndex > beginIndex) {\n                  fields=parameterString.substring(beginIndex,endIndex);\n                }\n else {\n                  fields=parameterString.substring(beginIndex);\n                }\n                kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n              }\n            }\n            solrQuery.setParam(kv[0],kv[1]);\n          }\n        }\n        return solrQuery;\n      }\n else {\n        queryBuilder.append(nativeQueryString);\n      }\n    }\n else {\n      if (pr.propertyName.contains(\"/\")) {\n        continue;\n      }\n      if (\"rep:excerpt\".equals(pr.propertyName)) {\n        continue;\n      }\n      String first=null;\n      if (pr.first != null) {\n        first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n      }\n      String last=null;\n      if (pr.last != null) {\n        last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n      }\n      String prField=configuration.getFieldForPropertyRestriction(pr);\n      CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n      if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n        queryBuilder.append(configuration.getPathField());\n        queryBuilder.append(':');\n        queryBuilder.append(first);\n      }\n else {\n        if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(first);\n        }\n else         if (pr.first == null && pr.last == null) {\n          if (!queryBuilder.toString().contains(fieldName + \":\")) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append('*');\n          }\n        }\n else         if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n        }\n else         if (pr.isLike) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n        }\n else {\n          throw new RuntimeException(\"[unexpected!] not handled case\");\n        }\n      }\n    }\n    queryBuilder.append(\" \");\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 570,
                    "astHeight": 23
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 7985,
                        "startLineNumber": 103,
                        "startColumnNumber": 46,
                        "endLineNumber": 255,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  SolrQuery solrQuery=new SolrQuery();\n  setDefaults(solrQuery);\n  StringBuilder queryBuilder=new StringBuilder();\n  if (filter.getFullTextConstraint() != null) {\n    queryBuilder.append(getFullTextQuery(filter.getFullTextConstraint()));\n    queryBuilder.append(' ');\n  }\n else   if (filter.getFulltextConditions() != null) {\n    Collection<String> fulltextConditions=filter.getFulltextConditions();\n    for (    String fulltextCondition : fulltextConditions) {\n      queryBuilder.append(fulltextCondition).append(\" \");\n    }\n  }\n  Collection<Filter.PropertyRestriction> propertyRestrictions=filter.getPropertyRestrictions();\n  if (propertyRestrictions != null && !propertyRestrictions.isEmpty()) {\n    for (    Filter.PropertyRestriction pr : propertyRestrictions) {\n      if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n        String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n        if (isSupportedHttpRequest(nativeQueryString)) {\n          String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n          if (!\"select\".equals(requestHandlerString)) {\n            if (requestHandlerString.charAt(0) != '/') {\n              requestHandlerString=\"/\" + requestHandlerString;\n            }\n            solrQuery.setRequestHandler(requestHandlerString);\n          }\n          String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n          for (          String param : parameterString.split(\"&\")) {\n            String[] kv=param.split(\"=\");\n            if (kv.length != 2) {\n              throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n            }\n else {\n              if (\"stream.body\".equals(kv[0])) {\n                kv[0]=\"q\";\n                String mltFlString=\"mlt.fl=\";\n                int mltFlIndex=parameterString.indexOf(mltFlString);\n                if (mltFlIndex > -1) {\n                  int beginIndex=mltFlIndex + mltFlString.length();\n                  int endIndex=parameterString.indexOf('&',beginIndex);\n                  String fields;\n                  if (endIndex > beginIndex) {\n                    fields=parameterString.substring(beginIndex,endIndex);\n                  }\n else {\n                    fields=parameterString.substring(beginIndex);\n                  }\n                  kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n                }\n              }\n              solrQuery.setParam(kv[0],kv[1]);\n            }\n          }\n          return solrQuery;\n        }\n else {\n          queryBuilder.append(nativeQueryString);\n        }\n      }\n else {\n        if (pr.propertyName.contains(\"/\")) {\n          continue;\n        }\n        if (\"rep:excerpt\".equals(pr.propertyName)) {\n          continue;\n        }\n        String first=null;\n        if (pr.first != null) {\n          first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n        }\n        String last=null;\n        if (pr.last != null) {\n          last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n        }\n        String prField=configuration.getFieldForPropertyRestriction(pr);\n        CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n        if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n          queryBuilder.append(configuration.getPathField());\n          queryBuilder.append(':');\n          queryBuilder.append(first);\n        }\n else {\n          if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(first);\n          }\n else           if (pr.first == null && pr.last == null) {\n            if (!queryBuilder.toString().contains(fieldName + \":\")) {\n              queryBuilder.append(fieldName).append(':');\n              queryBuilder.append('*');\n            }\n          }\n else           if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n          }\n else           if (pr.isLike) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n          }\n else {\n            throw new RuntimeException(\"[unexpected!] not handled case\");\n          }\n        }\n      }\n      queryBuilder.append(\" \");\n    }\n  }\n  String[] pts=filter.getPrimaryTypes().toArray(new String[filter.getPrimaryTypes().size()]);\n  for (int i=0; i < pts.length; i++) {\n    String pt=pts[i];\n    if (i == 0) {\n      queryBuilder.append(\"(\");\n    }\n    if (i > 0 && i < pts.length) {\n      queryBuilder.append(\"OR \");\n    }\n    queryBuilder.append(\"jcr\\\\:primaryType\").append(':').append(partialEscape(pt)).append(\" \");\n    if (i == pts.length - 1) {\n      queryBuilder.append(\")\");\n      queryBuilder.append(' ');\n    }\n  }\n  Filter.PathRestriction pathRestriction=filter.getPathRestriction();\n  if (pathRestriction != null) {\n    String path=purgePath(filter);\n    String fieldName=configuration.getFieldForPathRestriction(pathRestriction);\n    if (fieldName != null) {\n      queryBuilder.append(fieldName);\n      queryBuilder.append(':');\n      queryBuilder.append(path);\n    }\n  }\n  if (queryBuilder.length() == 0) {\n    queryBuilder.append(\"*:*\");\n  }\n  String escapedQuery=queryBuilder.toString();\n  solrQuery.setQuery(escapedQuery);\n  if (log.isDebugEnabled()) {\n    log.debug(\"JCR query {} has been converted to Solr query {}\",filter.getQueryStatement(),solrQuery.toString());\n  }\n  return solrQuery;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 858,
                    "astHeight": 24
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8027,
                        "startLineNumber": 103,
                        "startColumnNumber": 4,
                        "endLineNumber": 255,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private SolrQuery getQuery(Filter filter){\n  SolrQuery solrQuery=new SolrQuery();\n  setDefaults(solrQuery);\n  StringBuilder queryBuilder=new StringBuilder();\n  if (filter.getFullTextConstraint() != null) {\n    queryBuilder.append(getFullTextQuery(filter.getFullTextConstraint()));\n    queryBuilder.append(' ');\n  }\n else   if (filter.getFulltextConditions() != null) {\n    Collection<String> fulltextConditions=filter.getFulltextConditions();\n    for (    String fulltextCondition : fulltextConditions) {\n      queryBuilder.append(fulltextCondition).append(\" \");\n    }\n  }\n  Collection<Filter.PropertyRestriction> propertyRestrictions=filter.getPropertyRestrictions();\n  if (propertyRestrictions != null && !propertyRestrictions.isEmpty()) {\n    for (    Filter.PropertyRestriction pr : propertyRestrictions) {\n      if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n        String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n        if (isSupportedHttpRequest(nativeQueryString)) {\n          String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n          if (!\"select\".equals(requestHandlerString)) {\n            if (requestHandlerString.charAt(0) != '/') {\n              requestHandlerString=\"/\" + requestHandlerString;\n            }\n            solrQuery.setRequestHandler(requestHandlerString);\n          }\n          String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n          for (          String param : parameterString.split(\"&\")) {\n            String[] kv=param.split(\"=\");\n            if (kv.length != 2) {\n              throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n            }\n else {\n              if (\"stream.body\".equals(kv[0])) {\n                kv[0]=\"q\";\n                String mltFlString=\"mlt.fl=\";\n                int mltFlIndex=parameterString.indexOf(mltFlString);\n                if (mltFlIndex > -1) {\n                  int beginIndex=mltFlIndex + mltFlString.length();\n                  int endIndex=parameterString.indexOf('&',beginIndex);\n                  String fields;\n                  if (endIndex > beginIndex) {\n                    fields=parameterString.substring(beginIndex,endIndex);\n                  }\n else {\n                    fields=parameterString.substring(beginIndex);\n                  }\n                  kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n                }\n              }\n              solrQuery.setParam(kv[0],kv[1]);\n            }\n          }\n          return solrQuery;\n        }\n else {\n          queryBuilder.append(nativeQueryString);\n        }\n      }\n else {\n        if (pr.propertyName.contains(\"/\")) {\n          continue;\n        }\n        if (\"rep:excerpt\".equals(pr.propertyName)) {\n          continue;\n        }\n        String first=null;\n        if (pr.first != null) {\n          first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n        }\n        String last=null;\n        if (pr.last != null) {\n          last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n        }\n        String prField=configuration.getFieldForPropertyRestriction(pr);\n        CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n        if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n          queryBuilder.append(configuration.getPathField());\n          queryBuilder.append(':');\n          queryBuilder.append(first);\n        }\n else {\n          if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(first);\n          }\n else           if (pr.first == null && pr.last == null) {\n            if (!queryBuilder.toString().contains(fieldName + \":\")) {\n              queryBuilder.append(fieldName).append(':');\n              queryBuilder.append('*');\n            }\n          }\n else           if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n          }\n else           if (pr.isLike) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n          }\n else {\n            throw new RuntimeException(\"[unexpected!] not handled case\");\n          }\n        }\n      }\n      queryBuilder.append(\" \");\n    }\n  }\n  String[] pts=filter.getPrimaryTypes().toArray(new String[filter.getPrimaryTypes().size()]);\n  for (int i=0; i < pts.length; i++) {\n    String pt=pts[i];\n    if (i == 0) {\n      queryBuilder.append(\"(\");\n    }\n    if (i > 0 && i < pts.length) {\n      queryBuilder.append(\"OR \");\n    }\n    queryBuilder.append(\"jcr\\\\:primaryType\").append(':').append(partialEscape(pt)).append(\" \");\n    if (i == pts.length - 1) {\n      queryBuilder.append(\")\");\n      queryBuilder.append(' ');\n    }\n  }\n  Filter.PathRestriction pathRestriction=filter.getPathRestriction();\n  if (pathRestriction != null) {\n    String path=purgePath(filter);\n    String fieldName=configuration.getFieldForPathRestriction(pathRestriction);\n    if (fieldName != null) {\n      queryBuilder.append(fieldName);\n      queryBuilder.append(':');\n      queryBuilder.append(path);\n    }\n  }\n  if (queryBuilder.length() == 0) {\n    queryBuilder.append(\"*:*\");\n  }\n  String escapedQuery=queryBuilder.toString();\n  solrQuery.setQuery(escapedQuery);\n  if (log.isDebugEnabled()) {\n    log.debug(\"JCR query {} has been converted to Solr query {}\",filter.getQueryStatement(),solrQuery.toString());\n  }\n  return solrQuery;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 867,
                    "astHeight": 25
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 63,
                    "startLineNumber": 121,
                    "startColumnNumber": 12,
                    "endLineNumber": 121,
                    "endColumnNumber": 75
                },
                "nodeContext": "propertyRestrictions != null && !propertyRestrictions.isEmpty()",
                "nodeType": "InfixExpression",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "null"
        },
        {
            "nodeContext": "null",
            "nodeType": "NullLiteral",
            "nodePosition": {
                "charLength": 4,
                "startLineNumber": 174,
                "startColumnNumber": 35,
                "endLineNumber": 174,
                "endColumnNumber": 39
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 12,
                        "startLineNumber": 174,
                        "startColumnNumber": 27,
                        "endLineNumber": 174,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "first=null",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 20,
                        "startLineNumber": 174,
                        "startColumnNumber": 20,
                        "endLineNumber": 174,
                        "endColumnNumber": 40
                    },
                    "nodeContext": "String first=null;\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 2798,
                        "startLineNumber": 164,
                        "startColumnNumber": 23,
                        "endLineNumber": 211,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  if (pr.propertyName.contains(\"/\")) {\n    continue;\n  }\n  if (\"rep:excerpt\".equals(pr.propertyName)) {\n    continue;\n  }\n  String first=null;\n  if (pr.first != null) {\n    first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n  }\n  String last=null;\n  if (pr.last != null) {\n    last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n  }\n  String prField=configuration.getFieldForPropertyRestriction(pr);\n  CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n  if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n    queryBuilder.append(configuration.getPathField());\n    queryBuilder.append(':');\n    queryBuilder.append(first);\n  }\n else {\n    if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(first);\n    }\n else     if (pr.first == null && pr.last == null) {\n      if (!queryBuilder.toString().contains(fieldName + \":\")) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append('*');\n      }\n    }\n else     if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n    }\n else     if (pr.isLike) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n    }\n else {\n      throw new RuntimeException(\"[unexpected!] not handled case\");\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 312,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 5508,
                        "startLineNumber": 124,
                        "startColumnNumber": 16,
                        "endLineNumber": 211,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n  String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n  if (isSupportedHttpRequest(nativeQueryString)) {\n    String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n    if (!\"select\".equals(requestHandlerString)) {\n      if (requestHandlerString.charAt(0) != '/') {\n        requestHandlerString=\"/\" + requestHandlerString;\n      }\n      solrQuery.setRequestHandler(requestHandlerString);\n    }\n    String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n    for (    String param : parameterString.split(\"&\")) {\n      String[] kv=param.split(\"=\");\n      if (kv.length != 2) {\n        throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n      }\n else {\n        if (\"stream.body\".equals(kv[0])) {\n          kv[0]=\"q\";\n          String mltFlString=\"mlt.fl=\";\n          int mltFlIndex=parameterString.indexOf(mltFlString);\n          if (mltFlIndex > -1) {\n            int beginIndex=mltFlIndex + mltFlString.length();\n            int endIndex=parameterString.indexOf('&',beginIndex);\n            String fields;\n            if (endIndex > beginIndex) {\n              fields=parameterString.substring(beginIndex,endIndex);\n            }\n else {\n              fields=parameterString.substring(beginIndex);\n            }\n            kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n          }\n        }\n        solrQuery.setParam(kv[0],kv[1]);\n      }\n    }\n    return solrQuery;\n  }\n else {\n    queryBuilder.append(nativeQueryString);\n  }\n}\n else {\n  if (pr.propertyName.contains(\"/\")) {\n    continue;\n  }\n  if (\"rep:excerpt\".equals(pr.propertyName)) {\n    continue;\n  }\n  String first=null;\n  if (pr.first != null) {\n    first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n  }\n  String last=null;\n  if (pr.last != null) {\n    last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n  }\n  String prField=configuration.getFieldForPropertyRestriction(pr);\n  CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n  if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n    queryBuilder.append(configuration.getPathField());\n    queryBuilder.append(':');\n    queryBuilder.append(first);\n  }\n else {\n    if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(first);\n    }\n else     if (pr.first == null && pr.last == null) {\n      if (!queryBuilder.toString().contains(fieldName + \":\")) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append('*');\n      }\n    }\n else     if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n    }\n else     if (pr.isLike) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n    }\n else {\n      throw new RuntimeException(\"[unexpected!] not handled case\");\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 546,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 5622,
                        "startLineNumber": 122,
                        "startColumnNumber": 71,
                        "endLineNumber": 213,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n    String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n    if (isSupportedHttpRequest(nativeQueryString)) {\n      String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n      if (!\"select\".equals(requestHandlerString)) {\n        if (requestHandlerString.charAt(0) != '/') {\n          requestHandlerString=\"/\" + requestHandlerString;\n        }\n        solrQuery.setRequestHandler(requestHandlerString);\n      }\n      String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n      for (      String param : parameterString.split(\"&\")) {\n        String[] kv=param.split(\"=\");\n        if (kv.length != 2) {\n          throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n        }\n else {\n          if (\"stream.body\".equals(kv[0])) {\n            kv[0]=\"q\";\n            String mltFlString=\"mlt.fl=\";\n            int mltFlIndex=parameterString.indexOf(mltFlString);\n            if (mltFlIndex > -1) {\n              int beginIndex=mltFlIndex + mltFlString.length();\n              int endIndex=parameterString.indexOf('&',beginIndex);\n              String fields;\n              if (endIndex > beginIndex) {\n                fields=parameterString.substring(beginIndex,endIndex);\n              }\n else {\n                fields=parameterString.substring(beginIndex);\n              }\n              kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n            }\n          }\n          solrQuery.setParam(kv[0],kv[1]);\n        }\n      }\n      return solrQuery;\n    }\n else {\n      queryBuilder.append(nativeQueryString);\n    }\n  }\n else {\n    if (pr.propertyName.contains(\"/\")) {\n      continue;\n    }\n    if (\"rep:excerpt\".equals(pr.propertyName)) {\n      continue;\n    }\n    String first=null;\n    if (pr.first != null) {\n      first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n    }\n    String last=null;\n    if (pr.last != null) {\n      last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n    }\n    String prField=configuration.getFieldForPropertyRestriction(pr);\n    CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n    if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n      queryBuilder.append(configuration.getPathField());\n      queryBuilder.append(':');\n      queryBuilder.append(first);\n    }\n else {\n      if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(first);\n      }\n else       if (pr.first == null && pr.last == null) {\n        if (!queryBuilder.toString().contains(fieldName + \":\")) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append('*');\n        }\n      }\n else       if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n      }\n else       if (pr.isLike) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n      }\n else {\n        throw new RuntimeException(\"[unexpected!] not handled case\");\n      }\n    }\n  }\n  queryBuilder.append(\" \");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 552,
                    "astHeight": 20
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 5681,
                        "startLineNumber": 122,
                        "startColumnNumber": 12,
                        "endLineNumber": 213,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (Filter.PropertyRestriction pr : propertyRestrictions) {\n  if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n    String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n    if (isSupportedHttpRequest(nativeQueryString)) {\n      String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n      if (!\"select\".equals(requestHandlerString)) {\n        if (requestHandlerString.charAt(0) != '/') {\n          requestHandlerString=\"/\" + requestHandlerString;\n        }\n        solrQuery.setRequestHandler(requestHandlerString);\n      }\n      String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n      for (      String param : parameterString.split(\"&\")) {\n        String[] kv=param.split(\"=\");\n        if (kv.length != 2) {\n          throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n        }\n else {\n          if (\"stream.body\".equals(kv[0])) {\n            kv[0]=\"q\";\n            String mltFlString=\"mlt.fl=\";\n            int mltFlIndex=parameterString.indexOf(mltFlString);\n            if (mltFlIndex > -1) {\n              int beginIndex=mltFlIndex + mltFlString.length();\n              int endIndex=parameterString.indexOf('&',beginIndex);\n              String fields;\n              if (endIndex > beginIndex) {\n                fields=parameterString.substring(beginIndex,endIndex);\n              }\n else {\n                fields=parameterString.substring(beginIndex);\n              }\n              kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n            }\n          }\n          solrQuery.setParam(kv[0],kv[1]);\n        }\n      }\n      return solrQuery;\n    }\n else {\n      queryBuilder.append(nativeQueryString);\n    }\n  }\n else {\n    if (pr.propertyName.contains(\"/\")) {\n      continue;\n    }\n    if (\"rep:excerpt\".equals(pr.propertyName)) {\n      continue;\n    }\n    String first=null;\n    if (pr.first != null) {\n      first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n    }\n    String last=null;\n    if (pr.last != null) {\n      last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n    }\n    String prField=configuration.getFieldForPropertyRestriction(pr);\n    CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n    if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n      queryBuilder.append(configuration.getPathField());\n      queryBuilder.append(':');\n      queryBuilder.append(first);\n    }\n else {\n      if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(first);\n      }\n else       if (pr.first == null && pr.last == null) {\n        if (!queryBuilder.toString().contains(fieldName + \":\")) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append('*');\n        }\n      }\n else       if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n      }\n else       if (pr.isLike) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n      }\n else {\n        throw new RuntimeException(\"[unexpected!] not handled case\");\n      }\n    }\n  }\n  queryBuilder.append(\" \");\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 560,
                    "astHeight": 21
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 5705,
                        "startLineNumber": 121,
                        "startColumnNumber": 77,
                        "endLineNumber": 214,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  for (  Filter.PropertyRestriction pr : propertyRestrictions) {\n    if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n      String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n      if (isSupportedHttpRequest(nativeQueryString)) {\n        String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n        if (!\"select\".equals(requestHandlerString)) {\n          if (requestHandlerString.charAt(0) != '/') {\n            requestHandlerString=\"/\" + requestHandlerString;\n          }\n          solrQuery.setRequestHandler(requestHandlerString);\n        }\n        String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n        for (        String param : parameterString.split(\"&\")) {\n          String[] kv=param.split(\"=\");\n          if (kv.length != 2) {\n            throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n          }\n else {\n            if (\"stream.body\".equals(kv[0])) {\n              kv[0]=\"q\";\n              String mltFlString=\"mlt.fl=\";\n              int mltFlIndex=parameterString.indexOf(mltFlString);\n              if (mltFlIndex > -1) {\n                int beginIndex=mltFlIndex + mltFlString.length();\n                int endIndex=parameterString.indexOf('&',beginIndex);\n                String fields;\n                if (endIndex > beginIndex) {\n                  fields=parameterString.substring(beginIndex,endIndex);\n                }\n else {\n                  fields=parameterString.substring(beginIndex);\n                }\n                kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n              }\n            }\n            solrQuery.setParam(kv[0],kv[1]);\n          }\n        }\n        return solrQuery;\n      }\n else {\n        queryBuilder.append(nativeQueryString);\n      }\n    }\n else {\n      if (pr.propertyName.contains(\"/\")) {\n        continue;\n      }\n      if (\"rep:excerpt\".equals(pr.propertyName)) {\n        continue;\n      }\n      String first=null;\n      if (pr.first != null) {\n        first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n      }\n      String last=null;\n      if (pr.last != null) {\n        last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n      }\n      String prField=configuration.getFieldForPropertyRestriction(pr);\n      CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n      if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n        queryBuilder.append(configuration.getPathField());\n        queryBuilder.append(':');\n        queryBuilder.append(first);\n      }\n else {\n        if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(first);\n        }\n else         if (pr.first == null && pr.last == null) {\n          if (!queryBuilder.toString().contains(fieldName + \":\")) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append('*');\n          }\n        }\n else         if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n        }\n else         if (pr.isLike) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n        }\n else {\n          throw new RuntimeException(\"[unexpected!] not handled case\");\n        }\n      }\n    }\n    queryBuilder.append(\" \");\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 561,
                    "astHeight": 22
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 5774,
                        "startLineNumber": 121,
                        "startColumnNumber": 8,
                        "endLineNumber": 214,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (propertyRestrictions != null && !propertyRestrictions.isEmpty()) {\n  for (  Filter.PropertyRestriction pr : propertyRestrictions) {\n    if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n      String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n      if (isSupportedHttpRequest(nativeQueryString)) {\n        String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n        if (!\"select\".equals(requestHandlerString)) {\n          if (requestHandlerString.charAt(0) != '/') {\n            requestHandlerString=\"/\" + requestHandlerString;\n          }\n          solrQuery.setRequestHandler(requestHandlerString);\n        }\n        String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n        for (        String param : parameterString.split(\"&\")) {\n          String[] kv=param.split(\"=\");\n          if (kv.length != 2) {\n            throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n          }\n else {\n            if (\"stream.body\".equals(kv[0])) {\n              kv[0]=\"q\";\n              String mltFlString=\"mlt.fl=\";\n              int mltFlIndex=parameterString.indexOf(mltFlString);\n              if (mltFlIndex > -1) {\n                int beginIndex=mltFlIndex + mltFlString.length();\n                int endIndex=parameterString.indexOf('&',beginIndex);\n                String fields;\n                if (endIndex > beginIndex) {\n                  fields=parameterString.substring(beginIndex,endIndex);\n                }\n else {\n                  fields=parameterString.substring(beginIndex);\n                }\n                kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n              }\n            }\n            solrQuery.setParam(kv[0],kv[1]);\n          }\n        }\n        return solrQuery;\n      }\n else {\n        queryBuilder.append(nativeQueryString);\n      }\n    }\n else {\n      if (pr.propertyName.contains(\"/\")) {\n        continue;\n      }\n      if (\"rep:excerpt\".equals(pr.propertyName)) {\n        continue;\n      }\n      String first=null;\n      if (pr.first != null) {\n        first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n      }\n      String last=null;\n      if (pr.last != null) {\n        last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n      }\n      String prField=configuration.getFieldForPropertyRestriction(pr);\n      CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n      if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n        queryBuilder.append(configuration.getPathField());\n        queryBuilder.append(':');\n        queryBuilder.append(first);\n      }\n else {\n        if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(first);\n        }\n else         if (pr.first == null && pr.last == null) {\n          if (!queryBuilder.toString().contains(fieldName + \":\")) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append('*');\n          }\n        }\n else         if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n        }\n else         if (pr.isLike) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n        }\n else {\n          throw new RuntimeException(\"[unexpected!] not handled case\");\n        }\n      }\n    }\n    queryBuilder.append(\" \");\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 570,
                    "astHeight": 23
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 7985,
                        "startLineNumber": 103,
                        "startColumnNumber": 46,
                        "endLineNumber": 255,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  SolrQuery solrQuery=new SolrQuery();\n  setDefaults(solrQuery);\n  StringBuilder queryBuilder=new StringBuilder();\n  if (filter.getFullTextConstraint() != null) {\n    queryBuilder.append(getFullTextQuery(filter.getFullTextConstraint()));\n    queryBuilder.append(' ');\n  }\n else   if (filter.getFulltextConditions() != null) {\n    Collection<String> fulltextConditions=filter.getFulltextConditions();\n    for (    String fulltextCondition : fulltextConditions) {\n      queryBuilder.append(fulltextCondition).append(\" \");\n    }\n  }\n  Collection<Filter.PropertyRestriction> propertyRestrictions=filter.getPropertyRestrictions();\n  if (propertyRestrictions != null && !propertyRestrictions.isEmpty()) {\n    for (    Filter.PropertyRestriction pr : propertyRestrictions) {\n      if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n        String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n        if (isSupportedHttpRequest(nativeQueryString)) {\n          String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n          if (!\"select\".equals(requestHandlerString)) {\n            if (requestHandlerString.charAt(0) != '/') {\n              requestHandlerString=\"/\" + requestHandlerString;\n            }\n            solrQuery.setRequestHandler(requestHandlerString);\n          }\n          String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n          for (          String param : parameterString.split(\"&\")) {\n            String[] kv=param.split(\"=\");\n            if (kv.length != 2) {\n              throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n            }\n else {\n              if (\"stream.body\".equals(kv[0])) {\n                kv[0]=\"q\";\n                String mltFlString=\"mlt.fl=\";\n                int mltFlIndex=parameterString.indexOf(mltFlString);\n                if (mltFlIndex > -1) {\n                  int beginIndex=mltFlIndex + mltFlString.length();\n                  int endIndex=parameterString.indexOf('&',beginIndex);\n                  String fields;\n                  if (endIndex > beginIndex) {\n                    fields=parameterString.substring(beginIndex,endIndex);\n                  }\n else {\n                    fields=parameterString.substring(beginIndex);\n                  }\n                  kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n                }\n              }\n              solrQuery.setParam(kv[0],kv[1]);\n            }\n          }\n          return solrQuery;\n        }\n else {\n          queryBuilder.append(nativeQueryString);\n        }\n      }\n else {\n        if (pr.propertyName.contains(\"/\")) {\n          continue;\n        }\n        if (\"rep:excerpt\".equals(pr.propertyName)) {\n          continue;\n        }\n        String first=null;\n        if (pr.first != null) {\n          first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n        }\n        String last=null;\n        if (pr.last != null) {\n          last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n        }\n        String prField=configuration.getFieldForPropertyRestriction(pr);\n        CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n        if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n          queryBuilder.append(configuration.getPathField());\n          queryBuilder.append(':');\n          queryBuilder.append(first);\n        }\n else {\n          if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(first);\n          }\n else           if (pr.first == null && pr.last == null) {\n            if (!queryBuilder.toString().contains(fieldName + \":\")) {\n              queryBuilder.append(fieldName).append(':');\n              queryBuilder.append('*');\n            }\n          }\n else           if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n          }\n else           if (pr.isLike) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n          }\n else {\n            throw new RuntimeException(\"[unexpected!] not handled case\");\n          }\n        }\n      }\n      queryBuilder.append(\" \");\n    }\n  }\n  String[] pts=filter.getPrimaryTypes().toArray(new String[filter.getPrimaryTypes().size()]);\n  for (int i=0; i < pts.length; i++) {\n    String pt=pts[i];\n    if (i == 0) {\n      queryBuilder.append(\"(\");\n    }\n    if (i > 0 && i < pts.length) {\n      queryBuilder.append(\"OR \");\n    }\n    queryBuilder.append(\"jcr\\\\:primaryType\").append(':').append(partialEscape(pt)).append(\" \");\n    if (i == pts.length - 1) {\n      queryBuilder.append(\")\");\n      queryBuilder.append(' ');\n    }\n  }\n  Filter.PathRestriction pathRestriction=filter.getPathRestriction();\n  if (pathRestriction != null) {\n    String path=purgePath(filter);\n    String fieldName=configuration.getFieldForPathRestriction(pathRestriction);\n    if (fieldName != null) {\n      queryBuilder.append(fieldName);\n      queryBuilder.append(':');\n      queryBuilder.append(path);\n    }\n  }\n  if (queryBuilder.length() == 0) {\n    queryBuilder.append(\"*:*\");\n  }\n  String escapedQuery=queryBuilder.toString();\n  solrQuery.setQuery(escapedQuery);\n  if (log.isDebugEnabled()) {\n    log.debug(\"JCR query {} has been converted to Solr query {}\",filter.getQueryStatement(),solrQuery.toString());\n  }\n  return solrQuery;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 858,
                    "astHeight": 24
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8027,
                        "startLineNumber": 103,
                        "startColumnNumber": 4,
                        "endLineNumber": 255,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private SolrQuery getQuery(Filter filter){\n  SolrQuery solrQuery=new SolrQuery();\n  setDefaults(solrQuery);\n  StringBuilder queryBuilder=new StringBuilder();\n  if (filter.getFullTextConstraint() != null) {\n    queryBuilder.append(getFullTextQuery(filter.getFullTextConstraint()));\n    queryBuilder.append(' ');\n  }\n else   if (filter.getFulltextConditions() != null) {\n    Collection<String> fulltextConditions=filter.getFulltextConditions();\n    for (    String fulltextCondition : fulltextConditions) {\n      queryBuilder.append(fulltextCondition).append(\" \");\n    }\n  }\n  Collection<Filter.PropertyRestriction> propertyRestrictions=filter.getPropertyRestrictions();\n  if (propertyRestrictions != null && !propertyRestrictions.isEmpty()) {\n    for (    Filter.PropertyRestriction pr : propertyRestrictions) {\n      if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n        String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n        if (isSupportedHttpRequest(nativeQueryString)) {\n          String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n          if (!\"select\".equals(requestHandlerString)) {\n            if (requestHandlerString.charAt(0) != '/') {\n              requestHandlerString=\"/\" + requestHandlerString;\n            }\n            solrQuery.setRequestHandler(requestHandlerString);\n          }\n          String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n          for (          String param : parameterString.split(\"&\")) {\n            String[] kv=param.split(\"=\");\n            if (kv.length != 2) {\n              throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n            }\n else {\n              if (\"stream.body\".equals(kv[0])) {\n                kv[0]=\"q\";\n                String mltFlString=\"mlt.fl=\";\n                int mltFlIndex=parameterString.indexOf(mltFlString);\n                if (mltFlIndex > -1) {\n                  int beginIndex=mltFlIndex + mltFlString.length();\n                  int endIndex=parameterString.indexOf('&',beginIndex);\n                  String fields;\n                  if (endIndex > beginIndex) {\n                    fields=parameterString.substring(beginIndex,endIndex);\n                  }\n else {\n                    fields=parameterString.substring(beginIndex);\n                  }\n                  kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n                }\n              }\n              solrQuery.setParam(kv[0],kv[1]);\n            }\n          }\n          return solrQuery;\n        }\n else {\n          queryBuilder.append(nativeQueryString);\n        }\n      }\n else {\n        if (pr.propertyName.contains(\"/\")) {\n          continue;\n        }\n        if (\"rep:excerpt\".equals(pr.propertyName)) {\n          continue;\n        }\n        String first=null;\n        if (pr.first != null) {\n          first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n        }\n        String last=null;\n        if (pr.last != null) {\n          last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n        }\n        String prField=configuration.getFieldForPropertyRestriction(pr);\n        CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n        if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n          queryBuilder.append(configuration.getPathField());\n          queryBuilder.append(':');\n          queryBuilder.append(first);\n        }\n else {\n          if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(first);\n          }\n else           if (pr.first == null && pr.last == null) {\n            if (!queryBuilder.toString().contains(fieldName + \":\")) {\n              queryBuilder.append(fieldName).append(':');\n              queryBuilder.append('*');\n            }\n          }\n else           if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n          }\n else           if (pr.isLike) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n          }\n else {\n            throw new RuntimeException(\"[unexpected!] not handled case\");\n          }\n        }\n      }\n      queryBuilder.append(\" \");\n    }\n  }\n  String[] pts=filter.getPrimaryTypes().toArray(new String[filter.getPrimaryTypes().size()]);\n  for (int i=0; i < pts.length; i++) {\n    String pt=pts[i];\n    if (i == 0) {\n      queryBuilder.append(\"(\");\n    }\n    if (i > 0 && i < pts.length) {\n      queryBuilder.append(\"OR \");\n    }\n    queryBuilder.append(\"jcr\\\\:primaryType\").append(':').append(partialEscape(pt)).append(\" \");\n    if (i == pts.length - 1) {\n      queryBuilder.append(\")\");\n      queryBuilder.append(' ');\n    }\n  }\n  Filter.PathRestriction pathRestriction=filter.getPathRestriction();\n  if (pathRestriction != null) {\n    String path=purgePath(filter);\n    String fieldName=configuration.getFieldForPathRestriction(pathRestriction);\n    if (fieldName != null) {\n      queryBuilder.append(fieldName);\n      queryBuilder.append(':');\n      queryBuilder.append(path);\n    }\n  }\n  if (queryBuilder.length() == 0) {\n    queryBuilder.append(\"*:*\");\n  }\n  String escapedQuery=queryBuilder.toString();\n  solrQuery.setQuery(escapedQuery);\n  if (log.isDebugEnabled()) {\n    log.debug(\"JCR query {} has been converted to Solr query {}\",filter.getQueryStatement(),solrQuery.toString());\n  }\n  return solrQuery;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 867,
                    "astHeight": 25
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 20,
                    "startLineNumber": 174,
                    "startColumnNumber": 20,
                    "endLineNumber": 174,
                    "endColumnNumber": 40
                },
                "nodeContext": "String first=null;\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 6,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "null"
        },
        {
            "nodeContext": "null",
            "nodeType": "NullLiteral",
            "nodePosition": {
                "charLength": 4,
                "startLineNumber": 175,
                "startColumnNumber": 36,
                "endLineNumber": 175,
                "endColumnNumber": 40
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 16,
                        "startLineNumber": 175,
                        "startColumnNumber": 24,
                        "endLineNumber": 175,
                        "endColumnNumber": 40
                    },
                    "nodeContext": "pr.first != null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 158,
                        "startLineNumber": 175,
                        "startColumnNumber": 20,
                        "endLineNumber": 177,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (pr.first != null) {\n  first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 27,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 2798,
                        "startLineNumber": 164,
                        "startColumnNumber": 23,
                        "endLineNumber": 211,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  if (pr.propertyName.contains(\"/\")) {\n    continue;\n  }\n  if (\"rep:excerpt\".equals(pr.propertyName)) {\n    continue;\n  }\n  String first=null;\n  if (pr.first != null) {\n    first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n  }\n  String last=null;\n  if (pr.last != null) {\n    last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n  }\n  String prField=configuration.getFieldForPropertyRestriction(pr);\n  CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n  if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n    queryBuilder.append(configuration.getPathField());\n    queryBuilder.append(':');\n    queryBuilder.append(first);\n  }\n else {\n    if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(first);\n    }\n else     if (pr.first == null && pr.last == null) {\n      if (!queryBuilder.toString().contains(fieldName + \":\")) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append('*');\n      }\n    }\n else     if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n    }\n else     if (pr.isLike) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n    }\n else {\n      throw new RuntimeException(\"[unexpected!] not handled case\");\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 312,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 5508,
                        "startLineNumber": 124,
                        "startColumnNumber": 16,
                        "endLineNumber": 211,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n  String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n  if (isSupportedHttpRequest(nativeQueryString)) {\n    String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n    if (!\"select\".equals(requestHandlerString)) {\n      if (requestHandlerString.charAt(0) != '/') {\n        requestHandlerString=\"/\" + requestHandlerString;\n      }\n      solrQuery.setRequestHandler(requestHandlerString);\n    }\n    String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n    for (    String param : parameterString.split(\"&\")) {\n      String[] kv=param.split(\"=\");\n      if (kv.length != 2) {\n        throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n      }\n else {\n        if (\"stream.body\".equals(kv[0])) {\n          kv[0]=\"q\";\n          String mltFlString=\"mlt.fl=\";\n          int mltFlIndex=parameterString.indexOf(mltFlString);\n          if (mltFlIndex > -1) {\n            int beginIndex=mltFlIndex + mltFlString.length();\n            int endIndex=parameterString.indexOf('&',beginIndex);\n            String fields;\n            if (endIndex > beginIndex) {\n              fields=parameterString.substring(beginIndex,endIndex);\n            }\n else {\n              fields=parameterString.substring(beginIndex);\n            }\n            kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n          }\n        }\n        solrQuery.setParam(kv[0],kv[1]);\n      }\n    }\n    return solrQuery;\n  }\n else {\n    queryBuilder.append(nativeQueryString);\n  }\n}\n else {\n  if (pr.propertyName.contains(\"/\")) {\n    continue;\n  }\n  if (\"rep:excerpt\".equals(pr.propertyName)) {\n    continue;\n  }\n  String first=null;\n  if (pr.first != null) {\n    first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n  }\n  String last=null;\n  if (pr.last != null) {\n    last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n  }\n  String prField=configuration.getFieldForPropertyRestriction(pr);\n  CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n  if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n    queryBuilder.append(configuration.getPathField());\n    queryBuilder.append(':');\n    queryBuilder.append(first);\n  }\n else {\n    if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(first);\n    }\n else     if (pr.first == null && pr.last == null) {\n      if (!queryBuilder.toString().contains(fieldName + \":\")) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append('*');\n      }\n    }\n else     if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n    }\n else     if (pr.isLike) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n    }\n else {\n      throw new RuntimeException(\"[unexpected!] not handled case\");\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 546,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 5622,
                        "startLineNumber": 122,
                        "startColumnNumber": 71,
                        "endLineNumber": 213,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n    String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n    if (isSupportedHttpRequest(nativeQueryString)) {\n      String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n      if (!\"select\".equals(requestHandlerString)) {\n        if (requestHandlerString.charAt(0) != '/') {\n          requestHandlerString=\"/\" + requestHandlerString;\n        }\n        solrQuery.setRequestHandler(requestHandlerString);\n      }\n      String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n      for (      String param : parameterString.split(\"&\")) {\n        String[] kv=param.split(\"=\");\n        if (kv.length != 2) {\n          throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n        }\n else {\n          if (\"stream.body\".equals(kv[0])) {\n            kv[0]=\"q\";\n            String mltFlString=\"mlt.fl=\";\n            int mltFlIndex=parameterString.indexOf(mltFlString);\n            if (mltFlIndex > -1) {\n              int beginIndex=mltFlIndex + mltFlString.length();\n              int endIndex=parameterString.indexOf('&',beginIndex);\n              String fields;\n              if (endIndex > beginIndex) {\n                fields=parameterString.substring(beginIndex,endIndex);\n              }\n else {\n                fields=parameterString.substring(beginIndex);\n              }\n              kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n            }\n          }\n          solrQuery.setParam(kv[0],kv[1]);\n        }\n      }\n      return solrQuery;\n    }\n else {\n      queryBuilder.append(nativeQueryString);\n    }\n  }\n else {\n    if (pr.propertyName.contains(\"/\")) {\n      continue;\n    }\n    if (\"rep:excerpt\".equals(pr.propertyName)) {\n      continue;\n    }\n    String first=null;\n    if (pr.first != null) {\n      first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n    }\n    String last=null;\n    if (pr.last != null) {\n      last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n    }\n    String prField=configuration.getFieldForPropertyRestriction(pr);\n    CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n    if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n      queryBuilder.append(configuration.getPathField());\n      queryBuilder.append(':');\n      queryBuilder.append(first);\n    }\n else {\n      if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(first);\n      }\n else       if (pr.first == null && pr.last == null) {\n        if (!queryBuilder.toString().contains(fieldName + \":\")) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append('*');\n        }\n      }\n else       if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n      }\n else       if (pr.isLike) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n      }\n else {\n        throw new RuntimeException(\"[unexpected!] not handled case\");\n      }\n    }\n  }\n  queryBuilder.append(\" \");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 552,
                    "astHeight": 20
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 5681,
                        "startLineNumber": 122,
                        "startColumnNumber": 12,
                        "endLineNumber": 213,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (Filter.PropertyRestriction pr : propertyRestrictions) {\n  if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n    String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n    if (isSupportedHttpRequest(nativeQueryString)) {\n      String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n      if (!\"select\".equals(requestHandlerString)) {\n        if (requestHandlerString.charAt(0) != '/') {\n          requestHandlerString=\"/\" + requestHandlerString;\n        }\n        solrQuery.setRequestHandler(requestHandlerString);\n      }\n      String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n      for (      String param : parameterString.split(\"&\")) {\n        String[] kv=param.split(\"=\");\n        if (kv.length != 2) {\n          throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n        }\n else {\n          if (\"stream.body\".equals(kv[0])) {\n            kv[0]=\"q\";\n            String mltFlString=\"mlt.fl=\";\n            int mltFlIndex=parameterString.indexOf(mltFlString);\n            if (mltFlIndex > -1) {\n              int beginIndex=mltFlIndex + mltFlString.length();\n              int endIndex=parameterString.indexOf('&',beginIndex);\n              String fields;\n              if (endIndex > beginIndex) {\n                fields=parameterString.substring(beginIndex,endIndex);\n              }\n else {\n                fields=parameterString.substring(beginIndex);\n              }\n              kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n            }\n          }\n          solrQuery.setParam(kv[0],kv[1]);\n        }\n      }\n      return solrQuery;\n    }\n else {\n      queryBuilder.append(nativeQueryString);\n    }\n  }\n else {\n    if (pr.propertyName.contains(\"/\")) {\n      continue;\n    }\n    if (\"rep:excerpt\".equals(pr.propertyName)) {\n      continue;\n    }\n    String first=null;\n    if (pr.first != null) {\n      first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n    }\n    String last=null;\n    if (pr.last != null) {\n      last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n    }\n    String prField=configuration.getFieldForPropertyRestriction(pr);\n    CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n    if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n      queryBuilder.append(configuration.getPathField());\n      queryBuilder.append(':');\n      queryBuilder.append(first);\n    }\n else {\n      if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(first);\n      }\n else       if (pr.first == null && pr.last == null) {\n        if (!queryBuilder.toString().contains(fieldName + \":\")) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append('*');\n        }\n      }\n else       if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n      }\n else       if (pr.isLike) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n      }\n else {\n        throw new RuntimeException(\"[unexpected!] not handled case\");\n      }\n    }\n  }\n  queryBuilder.append(\" \");\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 560,
                    "astHeight": 21
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 5705,
                        "startLineNumber": 121,
                        "startColumnNumber": 77,
                        "endLineNumber": 214,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  for (  Filter.PropertyRestriction pr : propertyRestrictions) {\n    if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n      String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n      if (isSupportedHttpRequest(nativeQueryString)) {\n        String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n        if (!\"select\".equals(requestHandlerString)) {\n          if (requestHandlerString.charAt(0) != '/') {\n            requestHandlerString=\"/\" + requestHandlerString;\n          }\n          solrQuery.setRequestHandler(requestHandlerString);\n        }\n        String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n        for (        String param : parameterString.split(\"&\")) {\n          String[] kv=param.split(\"=\");\n          if (kv.length != 2) {\n            throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n          }\n else {\n            if (\"stream.body\".equals(kv[0])) {\n              kv[0]=\"q\";\n              String mltFlString=\"mlt.fl=\";\n              int mltFlIndex=parameterString.indexOf(mltFlString);\n              if (mltFlIndex > -1) {\n                int beginIndex=mltFlIndex + mltFlString.length();\n                int endIndex=parameterString.indexOf('&',beginIndex);\n                String fields;\n                if (endIndex > beginIndex) {\n                  fields=parameterString.substring(beginIndex,endIndex);\n                }\n else {\n                  fields=parameterString.substring(beginIndex);\n                }\n                kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n              }\n            }\n            solrQuery.setParam(kv[0],kv[1]);\n          }\n        }\n        return solrQuery;\n      }\n else {\n        queryBuilder.append(nativeQueryString);\n      }\n    }\n else {\n      if (pr.propertyName.contains(\"/\")) {\n        continue;\n      }\n      if (\"rep:excerpt\".equals(pr.propertyName)) {\n        continue;\n      }\n      String first=null;\n      if (pr.first != null) {\n        first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n      }\n      String last=null;\n      if (pr.last != null) {\n        last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n      }\n      String prField=configuration.getFieldForPropertyRestriction(pr);\n      CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n      if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n        queryBuilder.append(configuration.getPathField());\n        queryBuilder.append(':');\n        queryBuilder.append(first);\n      }\n else {\n        if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(first);\n        }\n else         if (pr.first == null && pr.last == null) {\n          if (!queryBuilder.toString().contains(fieldName + \":\")) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append('*');\n          }\n        }\n else         if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n        }\n else         if (pr.isLike) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n        }\n else {\n          throw new RuntimeException(\"[unexpected!] not handled case\");\n        }\n      }\n    }\n    queryBuilder.append(\" \");\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 561,
                    "astHeight": 22
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 5774,
                        "startLineNumber": 121,
                        "startColumnNumber": 8,
                        "endLineNumber": 214,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (propertyRestrictions != null && !propertyRestrictions.isEmpty()) {\n  for (  Filter.PropertyRestriction pr : propertyRestrictions) {\n    if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n      String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n      if (isSupportedHttpRequest(nativeQueryString)) {\n        String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n        if (!\"select\".equals(requestHandlerString)) {\n          if (requestHandlerString.charAt(0) != '/') {\n            requestHandlerString=\"/\" + requestHandlerString;\n          }\n          solrQuery.setRequestHandler(requestHandlerString);\n        }\n        String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n        for (        String param : parameterString.split(\"&\")) {\n          String[] kv=param.split(\"=\");\n          if (kv.length != 2) {\n            throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n          }\n else {\n            if (\"stream.body\".equals(kv[0])) {\n              kv[0]=\"q\";\n              String mltFlString=\"mlt.fl=\";\n              int mltFlIndex=parameterString.indexOf(mltFlString);\n              if (mltFlIndex > -1) {\n                int beginIndex=mltFlIndex + mltFlString.length();\n                int endIndex=parameterString.indexOf('&',beginIndex);\n                String fields;\n                if (endIndex > beginIndex) {\n                  fields=parameterString.substring(beginIndex,endIndex);\n                }\n else {\n                  fields=parameterString.substring(beginIndex);\n                }\n                kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n              }\n            }\n            solrQuery.setParam(kv[0],kv[1]);\n          }\n        }\n        return solrQuery;\n      }\n else {\n        queryBuilder.append(nativeQueryString);\n      }\n    }\n else {\n      if (pr.propertyName.contains(\"/\")) {\n        continue;\n      }\n      if (\"rep:excerpt\".equals(pr.propertyName)) {\n        continue;\n      }\n      String first=null;\n      if (pr.first != null) {\n        first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n      }\n      String last=null;\n      if (pr.last != null) {\n        last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n      }\n      String prField=configuration.getFieldForPropertyRestriction(pr);\n      CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n      if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n        queryBuilder.append(configuration.getPathField());\n        queryBuilder.append(':');\n        queryBuilder.append(first);\n      }\n else {\n        if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(first);\n        }\n else         if (pr.first == null && pr.last == null) {\n          if (!queryBuilder.toString().contains(fieldName + \":\")) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append('*');\n          }\n        }\n else         if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n        }\n else         if (pr.isLike) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n        }\n else {\n          throw new RuntimeException(\"[unexpected!] not handled case\");\n        }\n      }\n    }\n    queryBuilder.append(\" \");\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 570,
                    "astHeight": 23
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 7985,
                        "startLineNumber": 103,
                        "startColumnNumber": 46,
                        "endLineNumber": 255,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  SolrQuery solrQuery=new SolrQuery();\n  setDefaults(solrQuery);\n  StringBuilder queryBuilder=new StringBuilder();\n  if (filter.getFullTextConstraint() != null) {\n    queryBuilder.append(getFullTextQuery(filter.getFullTextConstraint()));\n    queryBuilder.append(' ');\n  }\n else   if (filter.getFulltextConditions() != null) {\n    Collection<String> fulltextConditions=filter.getFulltextConditions();\n    for (    String fulltextCondition : fulltextConditions) {\n      queryBuilder.append(fulltextCondition).append(\" \");\n    }\n  }\n  Collection<Filter.PropertyRestriction> propertyRestrictions=filter.getPropertyRestrictions();\n  if (propertyRestrictions != null && !propertyRestrictions.isEmpty()) {\n    for (    Filter.PropertyRestriction pr : propertyRestrictions) {\n      if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n        String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n        if (isSupportedHttpRequest(nativeQueryString)) {\n          String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n          if (!\"select\".equals(requestHandlerString)) {\n            if (requestHandlerString.charAt(0) != '/') {\n              requestHandlerString=\"/\" + requestHandlerString;\n            }\n            solrQuery.setRequestHandler(requestHandlerString);\n          }\n          String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n          for (          String param : parameterString.split(\"&\")) {\n            String[] kv=param.split(\"=\");\n            if (kv.length != 2) {\n              throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n            }\n else {\n              if (\"stream.body\".equals(kv[0])) {\n                kv[0]=\"q\";\n                String mltFlString=\"mlt.fl=\";\n                int mltFlIndex=parameterString.indexOf(mltFlString);\n                if (mltFlIndex > -1) {\n                  int beginIndex=mltFlIndex + mltFlString.length();\n                  int endIndex=parameterString.indexOf('&',beginIndex);\n                  String fields;\n                  if (endIndex > beginIndex) {\n                    fields=parameterString.substring(beginIndex,endIndex);\n                  }\n else {\n                    fields=parameterString.substring(beginIndex);\n                  }\n                  kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n                }\n              }\n              solrQuery.setParam(kv[0],kv[1]);\n            }\n          }\n          return solrQuery;\n        }\n else {\n          queryBuilder.append(nativeQueryString);\n        }\n      }\n else {\n        if (pr.propertyName.contains(\"/\")) {\n          continue;\n        }\n        if (\"rep:excerpt\".equals(pr.propertyName)) {\n          continue;\n        }\n        String first=null;\n        if (pr.first != null) {\n          first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n        }\n        String last=null;\n        if (pr.last != null) {\n          last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n        }\n        String prField=configuration.getFieldForPropertyRestriction(pr);\n        CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n        if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n          queryBuilder.append(configuration.getPathField());\n          queryBuilder.append(':');\n          queryBuilder.append(first);\n        }\n else {\n          if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(first);\n          }\n else           if (pr.first == null && pr.last == null) {\n            if (!queryBuilder.toString().contains(fieldName + \":\")) {\n              queryBuilder.append(fieldName).append(':');\n              queryBuilder.append('*');\n            }\n          }\n else           if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n          }\n else           if (pr.isLike) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n          }\n else {\n            throw new RuntimeException(\"[unexpected!] not handled case\");\n          }\n        }\n      }\n      queryBuilder.append(\" \");\n    }\n  }\n  String[] pts=filter.getPrimaryTypes().toArray(new String[filter.getPrimaryTypes().size()]);\n  for (int i=0; i < pts.length; i++) {\n    String pt=pts[i];\n    if (i == 0) {\n      queryBuilder.append(\"(\");\n    }\n    if (i > 0 && i < pts.length) {\n      queryBuilder.append(\"OR \");\n    }\n    queryBuilder.append(\"jcr\\\\:primaryType\").append(':').append(partialEscape(pt)).append(\" \");\n    if (i == pts.length - 1) {\n      queryBuilder.append(\")\");\n      queryBuilder.append(' ');\n    }\n  }\n  Filter.PathRestriction pathRestriction=filter.getPathRestriction();\n  if (pathRestriction != null) {\n    String path=purgePath(filter);\n    String fieldName=configuration.getFieldForPathRestriction(pathRestriction);\n    if (fieldName != null) {\n      queryBuilder.append(fieldName);\n      queryBuilder.append(':');\n      queryBuilder.append(path);\n    }\n  }\n  if (queryBuilder.length() == 0) {\n    queryBuilder.append(\"*:*\");\n  }\n  String escapedQuery=queryBuilder.toString();\n  solrQuery.setQuery(escapedQuery);\n  if (log.isDebugEnabled()) {\n    log.debug(\"JCR query {} has been converted to Solr query {}\",filter.getQueryStatement(),solrQuery.toString());\n  }\n  return solrQuery;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 858,
                    "astHeight": 24
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8027,
                        "startLineNumber": 103,
                        "startColumnNumber": 4,
                        "endLineNumber": 255,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private SolrQuery getQuery(Filter filter){\n  SolrQuery solrQuery=new SolrQuery();\n  setDefaults(solrQuery);\n  StringBuilder queryBuilder=new StringBuilder();\n  if (filter.getFullTextConstraint() != null) {\n    queryBuilder.append(getFullTextQuery(filter.getFullTextConstraint()));\n    queryBuilder.append(' ');\n  }\n else   if (filter.getFulltextConditions() != null) {\n    Collection<String> fulltextConditions=filter.getFulltextConditions();\n    for (    String fulltextCondition : fulltextConditions) {\n      queryBuilder.append(fulltextCondition).append(\" \");\n    }\n  }\n  Collection<Filter.PropertyRestriction> propertyRestrictions=filter.getPropertyRestrictions();\n  if (propertyRestrictions != null && !propertyRestrictions.isEmpty()) {\n    for (    Filter.PropertyRestriction pr : propertyRestrictions) {\n      if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n        String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n        if (isSupportedHttpRequest(nativeQueryString)) {\n          String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n          if (!\"select\".equals(requestHandlerString)) {\n            if (requestHandlerString.charAt(0) != '/') {\n              requestHandlerString=\"/\" + requestHandlerString;\n            }\n            solrQuery.setRequestHandler(requestHandlerString);\n          }\n          String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n          for (          String param : parameterString.split(\"&\")) {\n            String[] kv=param.split(\"=\");\n            if (kv.length != 2) {\n              throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n            }\n else {\n              if (\"stream.body\".equals(kv[0])) {\n                kv[0]=\"q\";\n                String mltFlString=\"mlt.fl=\";\n                int mltFlIndex=parameterString.indexOf(mltFlString);\n                if (mltFlIndex > -1) {\n                  int beginIndex=mltFlIndex + mltFlString.length();\n                  int endIndex=parameterString.indexOf('&',beginIndex);\n                  String fields;\n                  if (endIndex > beginIndex) {\n                    fields=parameterString.substring(beginIndex,endIndex);\n                  }\n else {\n                    fields=parameterString.substring(beginIndex);\n                  }\n                  kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n                }\n              }\n              solrQuery.setParam(kv[0],kv[1]);\n            }\n          }\n          return solrQuery;\n        }\n else {\n          queryBuilder.append(nativeQueryString);\n        }\n      }\n else {\n        if (pr.propertyName.contains(\"/\")) {\n          continue;\n        }\n        if (\"rep:excerpt\".equals(pr.propertyName)) {\n          continue;\n        }\n        String first=null;\n        if (pr.first != null) {\n          first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n        }\n        String last=null;\n        if (pr.last != null) {\n          last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n        }\n        String prField=configuration.getFieldForPropertyRestriction(pr);\n        CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n        if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n          queryBuilder.append(configuration.getPathField());\n          queryBuilder.append(':');\n          queryBuilder.append(first);\n        }\n else {\n          if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(first);\n          }\n else           if (pr.first == null && pr.last == null) {\n            if (!queryBuilder.toString().contains(fieldName + \":\")) {\n              queryBuilder.append(fieldName).append(':');\n              queryBuilder.append('*');\n            }\n          }\n else           if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n          }\n else           if (pr.isLike) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n          }\n else {\n            throw new RuntimeException(\"[unexpected!] not handled case\");\n          }\n        }\n      }\n      queryBuilder.append(\" \");\n    }\n  }\n  String[] pts=filter.getPrimaryTypes().toArray(new String[filter.getPrimaryTypes().size()]);\n  for (int i=0; i < pts.length; i++) {\n    String pt=pts[i];\n    if (i == 0) {\n      queryBuilder.append(\"(\");\n    }\n    if (i > 0 && i < pts.length) {\n      queryBuilder.append(\"OR \");\n    }\n    queryBuilder.append(\"jcr\\\\:primaryType\").append(':').append(partialEscape(pt)).append(\" \");\n    if (i == pts.length - 1) {\n      queryBuilder.append(\")\");\n      queryBuilder.append(' ');\n    }\n  }\n  Filter.PathRestriction pathRestriction=filter.getPathRestriction();\n  if (pathRestriction != null) {\n    String path=purgePath(filter);\n    String fieldName=configuration.getFieldForPathRestriction(pathRestriction);\n    if (fieldName != null) {\n      queryBuilder.append(fieldName);\n      queryBuilder.append(':');\n      queryBuilder.append(path);\n    }\n  }\n  if (queryBuilder.length() == 0) {\n    queryBuilder.append(\"*:*\");\n  }\n  String escapedQuery=queryBuilder.toString();\n  solrQuery.setQuery(escapedQuery);\n  if (log.isDebugEnabled()) {\n    log.debug(\"JCR query {} has been converted to Solr query {}\",filter.getQueryStatement(),solrQuery.toString());\n  }\n  return solrQuery;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 867,
                    "astHeight": 25
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 16,
                    "startLineNumber": 175,
                    "startColumnNumber": 24,
                    "endLineNumber": 175,
                    "endColumnNumber": 40
                },
                "nodeContext": "pr.first != null",
                "nodeType": "InfixExpression",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "null"
        },
        {
            "nodeContext": "null",
            "nodeType": "NullLiteral",
            "nodePosition": {
                "charLength": 4,
                "startLineNumber": 178,
                "startColumnNumber": 34,
                "endLineNumber": 178,
                "endColumnNumber": 38
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 11,
                        "startLineNumber": 178,
                        "startColumnNumber": 27,
                        "endLineNumber": 178,
                        "endColumnNumber": 38
                    },
                    "nodeContext": "last=null",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 19,
                        "startLineNumber": 178,
                        "startColumnNumber": 20,
                        "endLineNumber": 178,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "String last=null;\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 2798,
                        "startLineNumber": 164,
                        "startColumnNumber": 23,
                        "endLineNumber": 211,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  if (pr.propertyName.contains(\"/\")) {\n    continue;\n  }\n  if (\"rep:excerpt\".equals(pr.propertyName)) {\n    continue;\n  }\n  String first=null;\n  if (pr.first != null) {\n    first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n  }\n  String last=null;\n  if (pr.last != null) {\n    last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n  }\n  String prField=configuration.getFieldForPropertyRestriction(pr);\n  CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n  if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n    queryBuilder.append(configuration.getPathField());\n    queryBuilder.append(':');\n    queryBuilder.append(first);\n  }\n else {\n    if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(first);\n    }\n else     if (pr.first == null && pr.last == null) {\n      if (!queryBuilder.toString().contains(fieldName + \":\")) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append('*');\n      }\n    }\n else     if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n    }\n else     if (pr.isLike) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n    }\n else {\n      throw new RuntimeException(\"[unexpected!] not handled case\");\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 312,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 5508,
                        "startLineNumber": 124,
                        "startColumnNumber": 16,
                        "endLineNumber": 211,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n  String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n  if (isSupportedHttpRequest(nativeQueryString)) {\n    String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n    if (!\"select\".equals(requestHandlerString)) {\n      if (requestHandlerString.charAt(0) != '/') {\n        requestHandlerString=\"/\" + requestHandlerString;\n      }\n      solrQuery.setRequestHandler(requestHandlerString);\n    }\n    String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n    for (    String param : parameterString.split(\"&\")) {\n      String[] kv=param.split(\"=\");\n      if (kv.length != 2) {\n        throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n      }\n else {\n        if (\"stream.body\".equals(kv[0])) {\n          kv[0]=\"q\";\n          String mltFlString=\"mlt.fl=\";\n          int mltFlIndex=parameterString.indexOf(mltFlString);\n          if (mltFlIndex > -1) {\n            int beginIndex=mltFlIndex + mltFlString.length();\n            int endIndex=parameterString.indexOf('&',beginIndex);\n            String fields;\n            if (endIndex > beginIndex) {\n              fields=parameterString.substring(beginIndex,endIndex);\n            }\n else {\n              fields=parameterString.substring(beginIndex);\n            }\n            kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n          }\n        }\n        solrQuery.setParam(kv[0],kv[1]);\n      }\n    }\n    return solrQuery;\n  }\n else {\n    queryBuilder.append(nativeQueryString);\n  }\n}\n else {\n  if (pr.propertyName.contains(\"/\")) {\n    continue;\n  }\n  if (\"rep:excerpt\".equals(pr.propertyName)) {\n    continue;\n  }\n  String first=null;\n  if (pr.first != null) {\n    first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n  }\n  String last=null;\n  if (pr.last != null) {\n    last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n  }\n  String prField=configuration.getFieldForPropertyRestriction(pr);\n  CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n  if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n    queryBuilder.append(configuration.getPathField());\n    queryBuilder.append(':');\n    queryBuilder.append(first);\n  }\n else {\n    if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(first);\n    }\n else     if (pr.first == null && pr.last == null) {\n      if (!queryBuilder.toString().contains(fieldName + \":\")) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append('*');\n      }\n    }\n else     if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n    }\n else     if (pr.isLike) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n    }\n else {\n      throw new RuntimeException(\"[unexpected!] not handled case\");\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 546,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 5622,
                        "startLineNumber": 122,
                        "startColumnNumber": 71,
                        "endLineNumber": 213,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n    String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n    if (isSupportedHttpRequest(nativeQueryString)) {\n      String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n      if (!\"select\".equals(requestHandlerString)) {\n        if (requestHandlerString.charAt(0) != '/') {\n          requestHandlerString=\"/\" + requestHandlerString;\n        }\n        solrQuery.setRequestHandler(requestHandlerString);\n      }\n      String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n      for (      String param : parameterString.split(\"&\")) {\n        String[] kv=param.split(\"=\");\n        if (kv.length != 2) {\n          throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n        }\n else {\n          if (\"stream.body\".equals(kv[0])) {\n            kv[0]=\"q\";\n            String mltFlString=\"mlt.fl=\";\n            int mltFlIndex=parameterString.indexOf(mltFlString);\n            if (mltFlIndex > -1) {\n              int beginIndex=mltFlIndex + mltFlString.length();\n              int endIndex=parameterString.indexOf('&',beginIndex);\n              String fields;\n              if (endIndex > beginIndex) {\n                fields=parameterString.substring(beginIndex,endIndex);\n              }\n else {\n                fields=parameterString.substring(beginIndex);\n              }\n              kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n            }\n          }\n          solrQuery.setParam(kv[0],kv[1]);\n        }\n      }\n      return solrQuery;\n    }\n else {\n      queryBuilder.append(nativeQueryString);\n    }\n  }\n else {\n    if (pr.propertyName.contains(\"/\")) {\n      continue;\n    }\n    if (\"rep:excerpt\".equals(pr.propertyName)) {\n      continue;\n    }\n    String first=null;\n    if (pr.first != null) {\n      first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n    }\n    String last=null;\n    if (pr.last != null) {\n      last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n    }\n    String prField=configuration.getFieldForPropertyRestriction(pr);\n    CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n    if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n      queryBuilder.append(configuration.getPathField());\n      queryBuilder.append(':');\n      queryBuilder.append(first);\n    }\n else {\n      if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(first);\n      }\n else       if (pr.first == null && pr.last == null) {\n        if (!queryBuilder.toString().contains(fieldName + \":\")) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append('*');\n        }\n      }\n else       if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n      }\n else       if (pr.isLike) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n      }\n else {\n        throw new RuntimeException(\"[unexpected!] not handled case\");\n      }\n    }\n  }\n  queryBuilder.append(\" \");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 552,
                    "astHeight": 20
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 5681,
                        "startLineNumber": 122,
                        "startColumnNumber": 12,
                        "endLineNumber": 213,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (Filter.PropertyRestriction pr : propertyRestrictions) {\n  if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n    String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n    if (isSupportedHttpRequest(nativeQueryString)) {\n      String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n      if (!\"select\".equals(requestHandlerString)) {\n        if (requestHandlerString.charAt(0) != '/') {\n          requestHandlerString=\"/\" + requestHandlerString;\n        }\n        solrQuery.setRequestHandler(requestHandlerString);\n      }\n      String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n      for (      String param : parameterString.split(\"&\")) {\n        String[] kv=param.split(\"=\");\n        if (kv.length != 2) {\n          throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n        }\n else {\n          if (\"stream.body\".equals(kv[0])) {\n            kv[0]=\"q\";\n            String mltFlString=\"mlt.fl=\";\n            int mltFlIndex=parameterString.indexOf(mltFlString);\n            if (mltFlIndex > -1) {\n              int beginIndex=mltFlIndex + mltFlString.length();\n              int endIndex=parameterString.indexOf('&',beginIndex);\n              String fields;\n              if (endIndex > beginIndex) {\n                fields=parameterString.substring(beginIndex,endIndex);\n              }\n else {\n                fields=parameterString.substring(beginIndex);\n              }\n              kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n            }\n          }\n          solrQuery.setParam(kv[0],kv[1]);\n        }\n      }\n      return solrQuery;\n    }\n else {\n      queryBuilder.append(nativeQueryString);\n    }\n  }\n else {\n    if (pr.propertyName.contains(\"/\")) {\n      continue;\n    }\n    if (\"rep:excerpt\".equals(pr.propertyName)) {\n      continue;\n    }\n    String first=null;\n    if (pr.first != null) {\n      first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n    }\n    String last=null;\n    if (pr.last != null) {\n      last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n    }\n    String prField=configuration.getFieldForPropertyRestriction(pr);\n    CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n    if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n      queryBuilder.append(configuration.getPathField());\n      queryBuilder.append(':');\n      queryBuilder.append(first);\n    }\n else {\n      if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(first);\n      }\n else       if (pr.first == null && pr.last == null) {\n        if (!queryBuilder.toString().contains(fieldName + \":\")) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append('*');\n        }\n      }\n else       if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n      }\n else       if (pr.isLike) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n      }\n else {\n        throw new RuntimeException(\"[unexpected!] not handled case\");\n      }\n    }\n  }\n  queryBuilder.append(\" \");\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 560,
                    "astHeight": 21
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 5705,
                        "startLineNumber": 121,
                        "startColumnNumber": 77,
                        "endLineNumber": 214,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  for (  Filter.PropertyRestriction pr : propertyRestrictions) {\n    if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n      String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n      if (isSupportedHttpRequest(nativeQueryString)) {\n        String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n        if (!\"select\".equals(requestHandlerString)) {\n          if (requestHandlerString.charAt(0) != '/') {\n            requestHandlerString=\"/\" + requestHandlerString;\n          }\n          solrQuery.setRequestHandler(requestHandlerString);\n        }\n        String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n        for (        String param : parameterString.split(\"&\")) {\n          String[] kv=param.split(\"=\");\n          if (kv.length != 2) {\n            throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n          }\n else {\n            if (\"stream.body\".equals(kv[0])) {\n              kv[0]=\"q\";\n              String mltFlString=\"mlt.fl=\";\n              int mltFlIndex=parameterString.indexOf(mltFlString);\n              if (mltFlIndex > -1) {\n                int beginIndex=mltFlIndex + mltFlString.length();\n                int endIndex=parameterString.indexOf('&',beginIndex);\n                String fields;\n                if (endIndex > beginIndex) {\n                  fields=parameterString.substring(beginIndex,endIndex);\n                }\n else {\n                  fields=parameterString.substring(beginIndex);\n                }\n                kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n              }\n            }\n            solrQuery.setParam(kv[0],kv[1]);\n          }\n        }\n        return solrQuery;\n      }\n else {\n        queryBuilder.append(nativeQueryString);\n      }\n    }\n else {\n      if (pr.propertyName.contains(\"/\")) {\n        continue;\n      }\n      if (\"rep:excerpt\".equals(pr.propertyName)) {\n        continue;\n      }\n      String first=null;\n      if (pr.first != null) {\n        first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n      }\n      String last=null;\n      if (pr.last != null) {\n        last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n      }\n      String prField=configuration.getFieldForPropertyRestriction(pr);\n      CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n      if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n        queryBuilder.append(configuration.getPathField());\n        queryBuilder.append(':');\n        queryBuilder.append(first);\n      }\n else {\n        if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(first);\n        }\n else         if (pr.first == null && pr.last == null) {\n          if (!queryBuilder.toString().contains(fieldName + \":\")) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append('*');\n          }\n        }\n else         if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n        }\n else         if (pr.isLike) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n        }\n else {\n          throw new RuntimeException(\"[unexpected!] not handled case\");\n        }\n      }\n    }\n    queryBuilder.append(\" \");\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 561,
                    "astHeight": 22
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 5774,
                        "startLineNumber": 121,
                        "startColumnNumber": 8,
                        "endLineNumber": 214,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (propertyRestrictions != null && !propertyRestrictions.isEmpty()) {\n  for (  Filter.PropertyRestriction pr : propertyRestrictions) {\n    if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n      String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n      if (isSupportedHttpRequest(nativeQueryString)) {\n        String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n        if (!\"select\".equals(requestHandlerString)) {\n          if (requestHandlerString.charAt(0) != '/') {\n            requestHandlerString=\"/\" + requestHandlerString;\n          }\n          solrQuery.setRequestHandler(requestHandlerString);\n        }\n        String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n        for (        String param : parameterString.split(\"&\")) {\n          String[] kv=param.split(\"=\");\n          if (kv.length != 2) {\n            throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n          }\n else {\n            if (\"stream.body\".equals(kv[0])) {\n              kv[0]=\"q\";\n              String mltFlString=\"mlt.fl=\";\n              int mltFlIndex=parameterString.indexOf(mltFlString);\n              if (mltFlIndex > -1) {\n                int beginIndex=mltFlIndex + mltFlString.length();\n                int endIndex=parameterString.indexOf('&',beginIndex);\n                String fields;\n                if (endIndex > beginIndex) {\n                  fields=parameterString.substring(beginIndex,endIndex);\n                }\n else {\n                  fields=parameterString.substring(beginIndex);\n                }\n                kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n              }\n            }\n            solrQuery.setParam(kv[0],kv[1]);\n          }\n        }\n        return solrQuery;\n      }\n else {\n        queryBuilder.append(nativeQueryString);\n      }\n    }\n else {\n      if (pr.propertyName.contains(\"/\")) {\n        continue;\n      }\n      if (\"rep:excerpt\".equals(pr.propertyName)) {\n        continue;\n      }\n      String first=null;\n      if (pr.first != null) {\n        first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n      }\n      String last=null;\n      if (pr.last != null) {\n        last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n      }\n      String prField=configuration.getFieldForPropertyRestriction(pr);\n      CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n      if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n        queryBuilder.append(configuration.getPathField());\n        queryBuilder.append(':');\n        queryBuilder.append(first);\n      }\n else {\n        if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(first);\n        }\n else         if (pr.first == null && pr.last == null) {\n          if (!queryBuilder.toString().contains(fieldName + \":\")) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append('*');\n          }\n        }\n else         if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n        }\n else         if (pr.isLike) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n        }\n else {\n          throw new RuntimeException(\"[unexpected!] not handled case\");\n        }\n      }\n    }\n    queryBuilder.append(\" \");\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 570,
                    "astHeight": 23
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 7985,
                        "startLineNumber": 103,
                        "startColumnNumber": 46,
                        "endLineNumber": 255,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  SolrQuery solrQuery=new SolrQuery();\n  setDefaults(solrQuery);\n  StringBuilder queryBuilder=new StringBuilder();\n  if (filter.getFullTextConstraint() != null) {\n    queryBuilder.append(getFullTextQuery(filter.getFullTextConstraint()));\n    queryBuilder.append(' ');\n  }\n else   if (filter.getFulltextConditions() != null) {\n    Collection<String> fulltextConditions=filter.getFulltextConditions();\n    for (    String fulltextCondition : fulltextConditions) {\n      queryBuilder.append(fulltextCondition).append(\" \");\n    }\n  }\n  Collection<Filter.PropertyRestriction> propertyRestrictions=filter.getPropertyRestrictions();\n  if (propertyRestrictions != null && !propertyRestrictions.isEmpty()) {\n    for (    Filter.PropertyRestriction pr : propertyRestrictions) {\n      if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n        String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n        if (isSupportedHttpRequest(nativeQueryString)) {\n          String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n          if (!\"select\".equals(requestHandlerString)) {\n            if (requestHandlerString.charAt(0) != '/') {\n              requestHandlerString=\"/\" + requestHandlerString;\n            }\n            solrQuery.setRequestHandler(requestHandlerString);\n          }\n          String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n          for (          String param : parameterString.split(\"&\")) {\n            String[] kv=param.split(\"=\");\n            if (kv.length != 2) {\n              throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n            }\n else {\n              if (\"stream.body\".equals(kv[0])) {\n                kv[0]=\"q\";\n                String mltFlString=\"mlt.fl=\";\n                int mltFlIndex=parameterString.indexOf(mltFlString);\n                if (mltFlIndex > -1) {\n                  int beginIndex=mltFlIndex + mltFlString.length();\n                  int endIndex=parameterString.indexOf('&',beginIndex);\n                  String fields;\n                  if (endIndex > beginIndex) {\n                    fields=parameterString.substring(beginIndex,endIndex);\n                  }\n else {\n                    fields=parameterString.substring(beginIndex);\n                  }\n                  kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n                }\n              }\n              solrQuery.setParam(kv[0],kv[1]);\n            }\n          }\n          return solrQuery;\n        }\n else {\n          queryBuilder.append(nativeQueryString);\n        }\n      }\n else {\n        if (pr.propertyName.contains(\"/\")) {\n          continue;\n        }\n        if (\"rep:excerpt\".equals(pr.propertyName)) {\n          continue;\n        }\n        String first=null;\n        if (pr.first != null) {\n          first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n        }\n        String last=null;\n        if (pr.last != null) {\n          last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n        }\n        String prField=configuration.getFieldForPropertyRestriction(pr);\n        CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n        if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n          queryBuilder.append(configuration.getPathField());\n          queryBuilder.append(':');\n          queryBuilder.append(first);\n        }\n else {\n          if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(first);\n          }\n else           if (pr.first == null && pr.last == null) {\n            if (!queryBuilder.toString().contains(fieldName + \":\")) {\n              queryBuilder.append(fieldName).append(':');\n              queryBuilder.append('*');\n            }\n          }\n else           if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n          }\n else           if (pr.isLike) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n          }\n else {\n            throw new RuntimeException(\"[unexpected!] not handled case\");\n          }\n        }\n      }\n      queryBuilder.append(\" \");\n    }\n  }\n  String[] pts=filter.getPrimaryTypes().toArray(new String[filter.getPrimaryTypes().size()]);\n  for (int i=0; i < pts.length; i++) {\n    String pt=pts[i];\n    if (i == 0) {\n      queryBuilder.append(\"(\");\n    }\n    if (i > 0 && i < pts.length) {\n      queryBuilder.append(\"OR \");\n    }\n    queryBuilder.append(\"jcr\\\\:primaryType\").append(':').append(partialEscape(pt)).append(\" \");\n    if (i == pts.length - 1) {\n      queryBuilder.append(\")\");\n      queryBuilder.append(' ');\n    }\n  }\n  Filter.PathRestriction pathRestriction=filter.getPathRestriction();\n  if (pathRestriction != null) {\n    String path=purgePath(filter);\n    String fieldName=configuration.getFieldForPathRestriction(pathRestriction);\n    if (fieldName != null) {\n      queryBuilder.append(fieldName);\n      queryBuilder.append(':');\n      queryBuilder.append(path);\n    }\n  }\n  if (queryBuilder.length() == 0) {\n    queryBuilder.append(\"*:*\");\n  }\n  String escapedQuery=queryBuilder.toString();\n  solrQuery.setQuery(escapedQuery);\n  if (log.isDebugEnabled()) {\n    log.debug(\"JCR query {} has been converted to Solr query {}\",filter.getQueryStatement(),solrQuery.toString());\n  }\n  return solrQuery;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 858,
                    "astHeight": 24
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8027,
                        "startLineNumber": 103,
                        "startColumnNumber": 4,
                        "endLineNumber": 255,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private SolrQuery getQuery(Filter filter){\n  SolrQuery solrQuery=new SolrQuery();\n  setDefaults(solrQuery);\n  StringBuilder queryBuilder=new StringBuilder();\n  if (filter.getFullTextConstraint() != null) {\n    queryBuilder.append(getFullTextQuery(filter.getFullTextConstraint()));\n    queryBuilder.append(' ');\n  }\n else   if (filter.getFulltextConditions() != null) {\n    Collection<String> fulltextConditions=filter.getFulltextConditions();\n    for (    String fulltextCondition : fulltextConditions) {\n      queryBuilder.append(fulltextCondition).append(\" \");\n    }\n  }\n  Collection<Filter.PropertyRestriction> propertyRestrictions=filter.getPropertyRestrictions();\n  if (propertyRestrictions != null && !propertyRestrictions.isEmpty()) {\n    for (    Filter.PropertyRestriction pr : propertyRestrictions) {\n      if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n        String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n        if (isSupportedHttpRequest(nativeQueryString)) {\n          String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n          if (!\"select\".equals(requestHandlerString)) {\n            if (requestHandlerString.charAt(0) != '/') {\n              requestHandlerString=\"/\" + requestHandlerString;\n            }\n            solrQuery.setRequestHandler(requestHandlerString);\n          }\n          String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n          for (          String param : parameterString.split(\"&\")) {\n            String[] kv=param.split(\"=\");\n            if (kv.length != 2) {\n              throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n            }\n else {\n              if (\"stream.body\".equals(kv[0])) {\n                kv[0]=\"q\";\n                String mltFlString=\"mlt.fl=\";\n                int mltFlIndex=parameterString.indexOf(mltFlString);\n                if (mltFlIndex > -1) {\n                  int beginIndex=mltFlIndex + mltFlString.length();\n                  int endIndex=parameterString.indexOf('&',beginIndex);\n                  String fields;\n                  if (endIndex > beginIndex) {\n                    fields=parameterString.substring(beginIndex,endIndex);\n                  }\n else {\n                    fields=parameterString.substring(beginIndex);\n                  }\n                  kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n                }\n              }\n              solrQuery.setParam(kv[0],kv[1]);\n            }\n          }\n          return solrQuery;\n        }\n else {\n          queryBuilder.append(nativeQueryString);\n        }\n      }\n else {\n        if (pr.propertyName.contains(\"/\")) {\n          continue;\n        }\n        if (\"rep:excerpt\".equals(pr.propertyName)) {\n          continue;\n        }\n        String first=null;\n        if (pr.first != null) {\n          first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n        }\n        String last=null;\n        if (pr.last != null) {\n          last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n        }\n        String prField=configuration.getFieldForPropertyRestriction(pr);\n        CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n        if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n          queryBuilder.append(configuration.getPathField());\n          queryBuilder.append(':');\n          queryBuilder.append(first);\n        }\n else {\n          if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(first);\n          }\n else           if (pr.first == null && pr.last == null) {\n            if (!queryBuilder.toString().contains(fieldName + \":\")) {\n              queryBuilder.append(fieldName).append(':');\n              queryBuilder.append('*');\n            }\n          }\n else           if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n          }\n else           if (pr.isLike) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n          }\n else {\n            throw new RuntimeException(\"[unexpected!] not handled case\");\n          }\n        }\n      }\n      queryBuilder.append(\" \");\n    }\n  }\n  String[] pts=filter.getPrimaryTypes().toArray(new String[filter.getPrimaryTypes().size()]);\n  for (int i=0; i < pts.length; i++) {\n    String pt=pts[i];\n    if (i == 0) {\n      queryBuilder.append(\"(\");\n    }\n    if (i > 0 && i < pts.length) {\n      queryBuilder.append(\"OR \");\n    }\n    queryBuilder.append(\"jcr\\\\:primaryType\").append(':').append(partialEscape(pt)).append(\" \");\n    if (i == pts.length - 1) {\n      queryBuilder.append(\")\");\n      queryBuilder.append(' ');\n    }\n  }\n  Filter.PathRestriction pathRestriction=filter.getPathRestriction();\n  if (pathRestriction != null) {\n    String path=purgePath(filter);\n    String fieldName=configuration.getFieldForPathRestriction(pathRestriction);\n    if (fieldName != null) {\n      queryBuilder.append(fieldName);\n      queryBuilder.append(':');\n      queryBuilder.append(path);\n    }\n  }\n  if (queryBuilder.length() == 0) {\n    queryBuilder.append(\"*:*\");\n  }\n  String escapedQuery=queryBuilder.toString();\n  solrQuery.setQuery(escapedQuery);\n  if (log.isDebugEnabled()) {\n    log.debug(\"JCR query {} has been converted to Solr query {}\",filter.getQueryStatement(),solrQuery.toString());\n  }\n  return solrQuery;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 867,
                    "astHeight": 25
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 19,
                    "startLineNumber": 178,
                    "startColumnNumber": 20,
                    "endLineNumber": 178,
                    "endColumnNumber": 39
                },
                "nodeContext": "String last=null;\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 6,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "null"
        },
        {
            "nodeContext": "null",
            "nodeType": "NullLiteral",
            "nodePosition": {
                "charLength": 4,
                "startLineNumber": 179,
                "startColumnNumber": 35,
                "endLineNumber": 179,
                "endColumnNumber": 39
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 15,
                        "startLineNumber": 179,
                        "startColumnNumber": 24,
                        "endLineNumber": 179,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "pr.last != null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 154,
                        "startLineNumber": 179,
                        "startColumnNumber": 20,
                        "endLineNumber": 181,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (pr.last != null) {\n  last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 27,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 2798,
                        "startLineNumber": 164,
                        "startColumnNumber": 23,
                        "endLineNumber": 211,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  if (pr.propertyName.contains(\"/\")) {\n    continue;\n  }\n  if (\"rep:excerpt\".equals(pr.propertyName)) {\n    continue;\n  }\n  String first=null;\n  if (pr.first != null) {\n    first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n  }\n  String last=null;\n  if (pr.last != null) {\n    last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n  }\n  String prField=configuration.getFieldForPropertyRestriction(pr);\n  CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n  if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n    queryBuilder.append(configuration.getPathField());\n    queryBuilder.append(':');\n    queryBuilder.append(first);\n  }\n else {\n    if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(first);\n    }\n else     if (pr.first == null && pr.last == null) {\n      if (!queryBuilder.toString().contains(fieldName + \":\")) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append('*');\n      }\n    }\n else     if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n    }\n else     if (pr.isLike) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n    }\n else {\n      throw new RuntimeException(\"[unexpected!] not handled case\");\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 312,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 5508,
                        "startLineNumber": 124,
                        "startColumnNumber": 16,
                        "endLineNumber": 211,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n  String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n  if (isSupportedHttpRequest(nativeQueryString)) {\n    String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n    if (!\"select\".equals(requestHandlerString)) {\n      if (requestHandlerString.charAt(0) != '/') {\n        requestHandlerString=\"/\" + requestHandlerString;\n      }\n      solrQuery.setRequestHandler(requestHandlerString);\n    }\n    String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n    for (    String param : parameterString.split(\"&\")) {\n      String[] kv=param.split(\"=\");\n      if (kv.length != 2) {\n        throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n      }\n else {\n        if (\"stream.body\".equals(kv[0])) {\n          kv[0]=\"q\";\n          String mltFlString=\"mlt.fl=\";\n          int mltFlIndex=parameterString.indexOf(mltFlString);\n          if (mltFlIndex > -1) {\n            int beginIndex=mltFlIndex + mltFlString.length();\n            int endIndex=parameterString.indexOf('&',beginIndex);\n            String fields;\n            if (endIndex > beginIndex) {\n              fields=parameterString.substring(beginIndex,endIndex);\n            }\n else {\n              fields=parameterString.substring(beginIndex);\n            }\n            kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n          }\n        }\n        solrQuery.setParam(kv[0],kv[1]);\n      }\n    }\n    return solrQuery;\n  }\n else {\n    queryBuilder.append(nativeQueryString);\n  }\n}\n else {\n  if (pr.propertyName.contains(\"/\")) {\n    continue;\n  }\n  if (\"rep:excerpt\".equals(pr.propertyName)) {\n    continue;\n  }\n  String first=null;\n  if (pr.first != null) {\n    first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n  }\n  String last=null;\n  if (pr.last != null) {\n    last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n  }\n  String prField=configuration.getFieldForPropertyRestriction(pr);\n  CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n  if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n    queryBuilder.append(configuration.getPathField());\n    queryBuilder.append(':');\n    queryBuilder.append(first);\n  }\n else {\n    if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(first);\n    }\n else     if (pr.first == null && pr.last == null) {\n      if (!queryBuilder.toString().contains(fieldName + \":\")) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append('*');\n      }\n    }\n else     if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n    }\n else     if (pr.isLike) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n    }\n else {\n      throw new RuntimeException(\"[unexpected!] not handled case\");\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 546,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 5622,
                        "startLineNumber": 122,
                        "startColumnNumber": 71,
                        "endLineNumber": 213,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n    String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n    if (isSupportedHttpRequest(nativeQueryString)) {\n      String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n      if (!\"select\".equals(requestHandlerString)) {\n        if (requestHandlerString.charAt(0) != '/') {\n          requestHandlerString=\"/\" + requestHandlerString;\n        }\n        solrQuery.setRequestHandler(requestHandlerString);\n      }\n      String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n      for (      String param : parameterString.split(\"&\")) {\n        String[] kv=param.split(\"=\");\n        if (kv.length != 2) {\n          throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n        }\n else {\n          if (\"stream.body\".equals(kv[0])) {\n            kv[0]=\"q\";\n            String mltFlString=\"mlt.fl=\";\n            int mltFlIndex=parameterString.indexOf(mltFlString);\n            if (mltFlIndex > -1) {\n              int beginIndex=mltFlIndex + mltFlString.length();\n              int endIndex=parameterString.indexOf('&',beginIndex);\n              String fields;\n              if (endIndex > beginIndex) {\n                fields=parameterString.substring(beginIndex,endIndex);\n              }\n else {\n                fields=parameterString.substring(beginIndex);\n              }\n              kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n            }\n          }\n          solrQuery.setParam(kv[0],kv[1]);\n        }\n      }\n      return solrQuery;\n    }\n else {\n      queryBuilder.append(nativeQueryString);\n    }\n  }\n else {\n    if (pr.propertyName.contains(\"/\")) {\n      continue;\n    }\n    if (\"rep:excerpt\".equals(pr.propertyName)) {\n      continue;\n    }\n    String first=null;\n    if (pr.first != null) {\n      first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n    }\n    String last=null;\n    if (pr.last != null) {\n      last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n    }\n    String prField=configuration.getFieldForPropertyRestriction(pr);\n    CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n    if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n      queryBuilder.append(configuration.getPathField());\n      queryBuilder.append(':');\n      queryBuilder.append(first);\n    }\n else {\n      if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(first);\n      }\n else       if (pr.first == null && pr.last == null) {\n        if (!queryBuilder.toString().contains(fieldName + \":\")) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append('*');\n        }\n      }\n else       if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n      }\n else       if (pr.isLike) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n      }\n else {\n        throw new RuntimeException(\"[unexpected!] not handled case\");\n      }\n    }\n  }\n  queryBuilder.append(\" \");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 552,
                    "astHeight": 20
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 5681,
                        "startLineNumber": 122,
                        "startColumnNumber": 12,
                        "endLineNumber": 213,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (Filter.PropertyRestriction pr : propertyRestrictions) {\n  if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n    String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n    if (isSupportedHttpRequest(nativeQueryString)) {\n      String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n      if (!\"select\".equals(requestHandlerString)) {\n        if (requestHandlerString.charAt(0) != '/') {\n          requestHandlerString=\"/\" + requestHandlerString;\n        }\n        solrQuery.setRequestHandler(requestHandlerString);\n      }\n      String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n      for (      String param : parameterString.split(\"&\")) {\n        String[] kv=param.split(\"=\");\n        if (kv.length != 2) {\n          throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n        }\n else {\n          if (\"stream.body\".equals(kv[0])) {\n            kv[0]=\"q\";\n            String mltFlString=\"mlt.fl=\";\n            int mltFlIndex=parameterString.indexOf(mltFlString);\n            if (mltFlIndex > -1) {\n              int beginIndex=mltFlIndex + mltFlString.length();\n              int endIndex=parameterString.indexOf('&',beginIndex);\n              String fields;\n              if (endIndex > beginIndex) {\n                fields=parameterString.substring(beginIndex,endIndex);\n              }\n else {\n                fields=parameterString.substring(beginIndex);\n              }\n              kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n            }\n          }\n          solrQuery.setParam(kv[0],kv[1]);\n        }\n      }\n      return solrQuery;\n    }\n else {\n      queryBuilder.append(nativeQueryString);\n    }\n  }\n else {\n    if (pr.propertyName.contains(\"/\")) {\n      continue;\n    }\n    if (\"rep:excerpt\".equals(pr.propertyName)) {\n      continue;\n    }\n    String first=null;\n    if (pr.first != null) {\n      first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n    }\n    String last=null;\n    if (pr.last != null) {\n      last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n    }\n    String prField=configuration.getFieldForPropertyRestriction(pr);\n    CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n    if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n      queryBuilder.append(configuration.getPathField());\n      queryBuilder.append(':');\n      queryBuilder.append(first);\n    }\n else {\n      if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(first);\n      }\n else       if (pr.first == null && pr.last == null) {\n        if (!queryBuilder.toString().contains(fieldName + \":\")) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append('*');\n        }\n      }\n else       if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n      }\n else       if (pr.isLike) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n      }\n else {\n        throw new RuntimeException(\"[unexpected!] not handled case\");\n      }\n    }\n  }\n  queryBuilder.append(\" \");\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 560,
                    "astHeight": 21
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 5705,
                        "startLineNumber": 121,
                        "startColumnNumber": 77,
                        "endLineNumber": 214,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  for (  Filter.PropertyRestriction pr : propertyRestrictions) {\n    if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n      String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n      if (isSupportedHttpRequest(nativeQueryString)) {\n        String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n        if (!\"select\".equals(requestHandlerString)) {\n          if (requestHandlerString.charAt(0) != '/') {\n            requestHandlerString=\"/\" + requestHandlerString;\n          }\n          solrQuery.setRequestHandler(requestHandlerString);\n        }\n        String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n        for (        String param : parameterString.split(\"&\")) {\n          String[] kv=param.split(\"=\");\n          if (kv.length != 2) {\n            throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n          }\n else {\n            if (\"stream.body\".equals(kv[0])) {\n              kv[0]=\"q\";\n              String mltFlString=\"mlt.fl=\";\n              int mltFlIndex=parameterString.indexOf(mltFlString);\n              if (mltFlIndex > -1) {\n                int beginIndex=mltFlIndex + mltFlString.length();\n                int endIndex=parameterString.indexOf('&',beginIndex);\n                String fields;\n                if (endIndex > beginIndex) {\n                  fields=parameterString.substring(beginIndex,endIndex);\n                }\n else {\n                  fields=parameterString.substring(beginIndex);\n                }\n                kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n              }\n            }\n            solrQuery.setParam(kv[0],kv[1]);\n          }\n        }\n        return solrQuery;\n      }\n else {\n        queryBuilder.append(nativeQueryString);\n      }\n    }\n else {\n      if (pr.propertyName.contains(\"/\")) {\n        continue;\n      }\n      if (\"rep:excerpt\".equals(pr.propertyName)) {\n        continue;\n      }\n      String first=null;\n      if (pr.first != null) {\n        first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n      }\n      String last=null;\n      if (pr.last != null) {\n        last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n      }\n      String prField=configuration.getFieldForPropertyRestriction(pr);\n      CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n      if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n        queryBuilder.append(configuration.getPathField());\n        queryBuilder.append(':');\n        queryBuilder.append(first);\n      }\n else {\n        if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(first);\n        }\n else         if (pr.first == null && pr.last == null) {\n          if (!queryBuilder.toString().contains(fieldName + \":\")) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append('*');\n          }\n        }\n else         if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n        }\n else         if (pr.isLike) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n        }\n else {\n          throw new RuntimeException(\"[unexpected!] not handled case\");\n        }\n      }\n    }\n    queryBuilder.append(\" \");\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 561,
                    "astHeight": 22
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 5774,
                        "startLineNumber": 121,
                        "startColumnNumber": 8,
                        "endLineNumber": 214,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (propertyRestrictions != null && !propertyRestrictions.isEmpty()) {\n  for (  Filter.PropertyRestriction pr : propertyRestrictions) {\n    if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n      String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n      if (isSupportedHttpRequest(nativeQueryString)) {\n        String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n        if (!\"select\".equals(requestHandlerString)) {\n          if (requestHandlerString.charAt(0) != '/') {\n            requestHandlerString=\"/\" + requestHandlerString;\n          }\n          solrQuery.setRequestHandler(requestHandlerString);\n        }\n        String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n        for (        String param : parameterString.split(\"&\")) {\n          String[] kv=param.split(\"=\");\n          if (kv.length != 2) {\n            throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n          }\n else {\n            if (\"stream.body\".equals(kv[0])) {\n              kv[0]=\"q\";\n              String mltFlString=\"mlt.fl=\";\n              int mltFlIndex=parameterString.indexOf(mltFlString);\n              if (mltFlIndex > -1) {\n                int beginIndex=mltFlIndex + mltFlString.length();\n                int endIndex=parameterString.indexOf('&',beginIndex);\n                String fields;\n                if (endIndex > beginIndex) {\n                  fields=parameterString.substring(beginIndex,endIndex);\n                }\n else {\n                  fields=parameterString.substring(beginIndex);\n                }\n                kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n              }\n            }\n            solrQuery.setParam(kv[0],kv[1]);\n          }\n        }\n        return solrQuery;\n      }\n else {\n        queryBuilder.append(nativeQueryString);\n      }\n    }\n else {\n      if (pr.propertyName.contains(\"/\")) {\n        continue;\n      }\n      if (\"rep:excerpt\".equals(pr.propertyName)) {\n        continue;\n      }\n      String first=null;\n      if (pr.first != null) {\n        first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n      }\n      String last=null;\n      if (pr.last != null) {\n        last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n      }\n      String prField=configuration.getFieldForPropertyRestriction(pr);\n      CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n      if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n        queryBuilder.append(configuration.getPathField());\n        queryBuilder.append(':');\n        queryBuilder.append(first);\n      }\n else {\n        if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(first);\n        }\n else         if (pr.first == null && pr.last == null) {\n          if (!queryBuilder.toString().contains(fieldName + \":\")) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append('*');\n          }\n        }\n else         if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n        }\n else         if (pr.isLike) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n        }\n else {\n          throw new RuntimeException(\"[unexpected!] not handled case\");\n        }\n      }\n    }\n    queryBuilder.append(\" \");\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 570,
                    "astHeight": 23
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 7985,
                        "startLineNumber": 103,
                        "startColumnNumber": 46,
                        "endLineNumber": 255,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  SolrQuery solrQuery=new SolrQuery();\n  setDefaults(solrQuery);\n  StringBuilder queryBuilder=new StringBuilder();\n  if (filter.getFullTextConstraint() != null) {\n    queryBuilder.append(getFullTextQuery(filter.getFullTextConstraint()));\n    queryBuilder.append(' ');\n  }\n else   if (filter.getFulltextConditions() != null) {\n    Collection<String> fulltextConditions=filter.getFulltextConditions();\n    for (    String fulltextCondition : fulltextConditions) {\n      queryBuilder.append(fulltextCondition).append(\" \");\n    }\n  }\n  Collection<Filter.PropertyRestriction> propertyRestrictions=filter.getPropertyRestrictions();\n  if (propertyRestrictions != null && !propertyRestrictions.isEmpty()) {\n    for (    Filter.PropertyRestriction pr : propertyRestrictions) {\n      if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n        String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n        if (isSupportedHttpRequest(nativeQueryString)) {\n          String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n          if (!\"select\".equals(requestHandlerString)) {\n            if (requestHandlerString.charAt(0) != '/') {\n              requestHandlerString=\"/\" + requestHandlerString;\n            }\n            solrQuery.setRequestHandler(requestHandlerString);\n          }\n          String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n          for (          String param : parameterString.split(\"&\")) {\n            String[] kv=param.split(\"=\");\n            if (kv.length != 2) {\n              throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n            }\n else {\n              if (\"stream.body\".equals(kv[0])) {\n                kv[0]=\"q\";\n                String mltFlString=\"mlt.fl=\";\n                int mltFlIndex=parameterString.indexOf(mltFlString);\n                if (mltFlIndex > -1) {\n                  int beginIndex=mltFlIndex + mltFlString.length();\n                  int endIndex=parameterString.indexOf('&',beginIndex);\n                  String fields;\n                  if (endIndex > beginIndex) {\n                    fields=parameterString.substring(beginIndex,endIndex);\n                  }\n else {\n                    fields=parameterString.substring(beginIndex);\n                  }\n                  kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n                }\n              }\n              solrQuery.setParam(kv[0],kv[1]);\n            }\n          }\n          return solrQuery;\n        }\n else {\n          queryBuilder.append(nativeQueryString);\n        }\n      }\n else {\n        if (pr.propertyName.contains(\"/\")) {\n          continue;\n        }\n        if (\"rep:excerpt\".equals(pr.propertyName)) {\n          continue;\n        }\n        String first=null;\n        if (pr.first != null) {\n          first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n        }\n        String last=null;\n        if (pr.last != null) {\n          last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n        }\n        String prField=configuration.getFieldForPropertyRestriction(pr);\n        CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n        if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n          queryBuilder.append(configuration.getPathField());\n          queryBuilder.append(':');\n          queryBuilder.append(first);\n        }\n else {\n          if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(first);\n          }\n else           if (pr.first == null && pr.last == null) {\n            if (!queryBuilder.toString().contains(fieldName + \":\")) {\n              queryBuilder.append(fieldName).append(':');\n              queryBuilder.append('*');\n            }\n          }\n else           if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n          }\n else           if (pr.isLike) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n          }\n else {\n            throw new RuntimeException(\"[unexpected!] not handled case\");\n          }\n        }\n      }\n      queryBuilder.append(\" \");\n    }\n  }\n  String[] pts=filter.getPrimaryTypes().toArray(new String[filter.getPrimaryTypes().size()]);\n  for (int i=0; i < pts.length; i++) {\n    String pt=pts[i];\n    if (i == 0) {\n      queryBuilder.append(\"(\");\n    }\n    if (i > 0 && i < pts.length) {\n      queryBuilder.append(\"OR \");\n    }\n    queryBuilder.append(\"jcr\\\\:primaryType\").append(':').append(partialEscape(pt)).append(\" \");\n    if (i == pts.length - 1) {\n      queryBuilder.append(\")\");\n      queryBuilder.append(' ');\n    }\n  }\n  Filter.PathRestriction pathRestriction=filter.getPathRestriction();\n  if (pathRestriction != null) {\n    String path=purgePath(filter);\n    String fieldName=configuration.getFieldForPathRestriction(pathRestriction);\n    if (fieldName != null) {\n      queryBuilder.append(fieldName);\n      queryBuilder.append(':');\n      queryBuilder.append(path);\n    }\n  }\n  if (queryBuilder.length() == 0) {\n    queryBuilder.append(\"*:*\");\n  }\n  String escapedQuery=queryBuilder.toString();\n  solrQuery.setQuery(escapedQuery);\n  if (log.isDebugEnabled()) {\n    log.debug(\"JCR query {} has been converted to Solr query {}\",filter.getQueryStatement(),solrQuery.toString());\n  }\n  return solrQuery;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 858,
                    "astHeight": 24
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8027,
                        "startLineNumber": 103,
                        "startColumnNumber": 4,
                        "endLineNumber": 255,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private SolrQuery getQuery(Filter filter){\n  SolrQuery solrQuery=new SolrQuery();\n  setDefaults(solrQuery);\n  StringBuilder queryBuilder=new StringBuilder();\n  if (filter.getFullTextConstraint() != null) {\n    queryBuilder.append(getFullTextQuery(filter.getFullTextConstraint()));\n    queryBuilder.append(' ');\n  }\n else   if (filter.getFulltextConditions() != null) {\n    Collection<String> fulltextConditions=filter.getFulltextConditions();\n    for (    String fulltextCondition : fulltextConditions) {\n      queryBuilder.append(fulltextCondition).append(\" \");\n    }\n  }\n  Collection<Filter.PropertyRestriction> propertyRestrictions=filter.getPropertyRestrictions();\n  if (propertyRestrictions != null && !propertyRestrictions.isEmpty()) {\n    for (    Filter.PropertyRestriction pr : propertyRestrictions) {\n      if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n        String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n        if (isSupportedHttpRequest(nativeQueryString)) {\n          String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n          if (!\"select\".equals(requestHandlerString)) {\n            if (requestHandlerString.charAt(0) != '/') {\n              requestHandlerString=\"/\" + requestHandlerString;\n            }\n            solrQuery.setRequestHandler(requestHandlerString);\n          }\n          String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n          for (          String param : parameterString.split(\"&\")) {\n            String[] kv=param.split(\"=\");\n            if (kv.length != 2) {\n              throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n            }\n else {\n              if (\"stream.body\".equals(kv[0])) {\n                kv[0]=\"q\";\n                String mltFlString=\"mlt.fl=\";\n                int mltFlIndex=parameterString.indexOf(mltFlString);\n                if (mltFlIndex > -1) {\n                  int beginIndex=mltFlIndex + mltFlString.length();\n                  int endIndex=parameterString.indexOf('&',beginIndex);\n                  String fields;\n                  if (endIndex > beginIndex) {\n                    fields=parameterString.substring(beginIndex,endIndex);\n                  }\n else {\n                    fields=parameterString.substring(beginIndex);\n                  }\n                  kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n                }\n              }\n              solrQuery.setParam(kv[0],kv[1]);\n            }\n          }\n          return solrQuery;\n        }\n else {\n          queryBuilder.append(nativeQueryString);\n        }\n      }\n else {\n        if (pr.propertyName.contains(\"/\")) {\n          continue;\n        }\n        if (\"rep:excerpt\".equals(pr.propertyName)) {\n          continue;\n        }\n        String first=null;\n        if (pr.first != null) {\n          first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n        }\n        String last=null;\n        if (pr.last != null) {\n          last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n        }\n        String prField=configuration.getFieldForPropertyRestriction(pr);\n        CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n        if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n          queryBuilder.append(configuration.getPathField());\n          queryBuilder.append(':');\n          queryBuilder.append(first);\n        }\n else {\n          if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(first);\n          }\n else           if (pr.first == null && pr.last == null) {\n            if (!queryBuilder.toString().contains(fieldName + \":\")) {\n              queryBuilder.append(fieldName).append(':');\n              queryBuilder.append('*');\n            }\n          }\n else           if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n          }\n else           if (pr.isLike) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n          }\n else {\n            throw new RuntimeException(\"[unexpected!] not handled case\");\n          }\n        }\n      }\n      queryBuilder.append(\" \");\n    }\n  }\n  String[] pts=filter.getPrimaryTypes().toArray(new String[filter.getPrimaryTypes().size()]);\n  for (int i=0; i < pts.length; i++) {\n    String pt=pts[i];\n    if (i == 0) {\n      queryBuilder.append(\"(\");\n    }\n    if (i > 0 && i < pts.length) {\n      queryBuilder.append(\"OR \");\n    }\n    queryBuilder.append(\"jcr\\\\:primaryType\").append(':').append(partialEscape(pt)).append(\" \");\n    if (i == pts.length - 1) {\n      queryBuilder.append(\")\");\n      queryBuilder.append(' ');\n    }\n  }\n  Filter.PathRestriction pathRestriction=filter.getPathRestriction();\n  if (pathRestriction != null) {\n    String path=purgePath(filter);\n    String fieldName=configuration.getFieldForPathRestriction(pathRestriction);\n    if (fieldName != null) {\n      queryBuilder.append(fieldName);\n      queryBuilder.append(':');\n      queryBuilder.append(path);\n    }\n  }\n  if (queryBuilder.length() == 0) {\n    queryBuilder.append(\"*:*\");\n  }\n  String escapedQuery=queryBuilder.toString();\n  solrQuery.setQuery(escapedQuery);\n  if (log.isDebugEnabled()) {\n    log.debug(\"JCR query {} has been converted to Solr query {}\",filter.getQueryStatement(),solrQuery.toString());\n  }\n  return solrQuery;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 867,
                    "astHeight": 25
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 15,
                    "startLineNumber": 179,
                    "startColumnNumber": 24,
                    "endLineNumber": 179,
                    "endColumnNumber": 39
                },
                "nodeContext": "pr.last != null",
                "nodeType": "InfixExpression",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "null"
        },
        {
            "nodeContext": "null",
            "nodeType": "NullLiteral",
            "nodePosition": {
                "charLength": 4,
                "startLineNumber": 184,
                "startColumnNumber": 70,
                "endLineNumber": 184,
                "endColumnNumber": 74
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,expression]",
                    "nodePosition": {
                        "charLength": 15,
                        "startLineNumber": 184,
                        "startColumnNumber": 59,
                        "endLineNumber": 184,
                        "endColumnNumber": 74
                    },
                    "nodeContext": "prField != null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 71,
                        "startLineNumber": 184,
                        "startColumnNumber": 59,
                        "endLineNumber": 185,
                        "endColumnNumber": 53
                    },
                    "nodeContext": "prField != null ? prField : pr.propertyName",
                    "nodeType": "ConditionalExpression",
                    "astNodeNumber": 8,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 86,
                        "startLineNumber": 184,
                        "startColumnNumber": 45,
                        "endLineNumber": 185,
                        "endColumnNumber": 54
                    },
                    "nodeContext": "partialEscape(prField != null ? prField : pr.propertyName)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 10,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 98,
                        "startLineNumber": 184,
                        "startColumnNumber": 33,
                        "endLineNumber": 185,
                        "endColumnNumber": 54
                    },
                    "nodeContext": "fieldName=partialEscape(prField != null ? prField : pr.propertyName)",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 12,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 112,
                        "startLineNumber": 184,
                        "startColumnNumber": 20,
                        "endLineNumber": 185,
                        "endColumnNumber": 55
                    },
                    "nodeContext": "CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 15,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 2798,
                        "startLineNumber": 164,
                        "startColumnNumber": 23,
                        "endLineNumber": 211,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  if (pr.propertyName.contains(\"/\")) {\n    continue;\n  }\n  if (\"rep:excerpt\".equals(pr.propertyName)) {\n    continue;\n  }\n  String first=null;\n  if (pr.first != null) {\n    first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n  }\n  String last=null;\n  if (pr.last != null) {\n    last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n  }\n  String prField=configuration.getFieldForPropertyRestriction(pr);\n  CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n  if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n    queryBuilder.append(configuration.getPathField());\n    queryBuilder.append(':');\n    queryBuilder.append(first);\n  }\n else {\n    if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(first);\n    }\n else     if (pr.first == null && pr.last == null) {\n      if (!queryBuilder.toString().contains(fieldName + \":\")) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append('*');\n      }\n    }\n else     if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n    }\n else     if (pr.isLike) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n    }\n else {\n      throw new RuntimeException(\"[unexpected!] not handled case\");\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 312,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 5508,
                        "startLineNumber": 124,
                        "startColumnNumber": 16,
                        "endLineNumber": 211,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n  String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n  if (isSupportedHttpRequest(nativeQueryString)) {\n    String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n    if (!\"select\".equals(requestHandlerString)) {\n      if (requestHandlerString.charAt(0) != '/') {\n        requestHandlerString=\"/\" + requestHandlerString;\n      }\n      solrQuery.setRequestHandler(requestHandlerString);\n    }\n    String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n    for (    String param : parameterString.split(\"&\")) {\n      String[] kv=param.split(\"=\");\n      if (kv.length != 2) {\n        throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n      }\n else {\n        if (\"stream.body\".equals(kv[0])) {\n          kv[0]=\"q\";\n          String mltFlString=\"mlt.fl=\";\n          int mltFlIndex=parameterString.indexOf(mltFlString);\n          if (mltFlIndex > -1) {\n            int beginIndex=mltFlIndex + mltFlString.length();\n            int endIndex=parameterString.indexOf('&',beginIndex);\n            String fields;\n            if (endIndex > beginIndex) {\n              fields=parameterString.substring(beginIndex,endIndex);\n            }\n else {\n              fields=parameterString.substring(beginIndex);\n            }\n            kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n          }\n        }\n        solrQuery.setParam(kv[0],kv[1]);\n      }\n    }\n    return solrQuery;\n  }\n else {\n    queryBuilder.append(nativeQueryString);\n  }\n}\n else {\n  if (pr.propertyName.contains(\"/\")) {\n    continue;\n  }\n  if (\"rep:excerpt\".equals(pr.propertyName)) {\n    continue;\n  }\n  String first=null;\n  if (pr.first != null) {\n    first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n  }\n  String last=null;\n  if (pr.last != null) {\n    last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n  }\n  String prField=configuration.getFieldForPropertyRestriction(pr);\n  CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n  if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n    queryBuilder.append(configuration.getPathField());\n    queryBuilder.append(':');\n    queryBuilder.append(first);\n  }\n else {\n    if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(first);\n    }\n else     if (pr.first == null && pr.last == null) {\n      if (!queryBuilder.toString().contains(fieldName + \":\")) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append('*');\n      }\n    }\n else     if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n    }\n else     if (pr.isLike) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n    }\n else {\n      throw new RuntimeException(\"[unexpected!] not handled case\");\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 546,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 5622,
                        "startLineNumber": 122,
                        "startColumnNumber": 71,
                        "endLineNumber": 213,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n    String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n    if (isSupportedHttpRequest(nativeQueryString)) {\n      String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n      if (!\"select\".equals(requestHandlerString)) {\n        if (requestHandlerString.charAt(0) != '/') {\n          requestHandlerString=\"/\" + requestHandlerString;\n        }\n        solrQuery.setRequestHandler(requestHandlerString);\n      }\n      String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n      for (      String param : parameterString.split(\"&\")) {\n        String[] kv=param.split(\"=\");\n        if (kv.length != 2) {\n          throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n        }\n else {\n          if (\"stream.body\".equals(kv[0])) {\n            kv[0]=\"q\";\n            String mltFlString=\"mlt.fl=\";\n            int mltFlIndex=parameterString.indexOf(mltFlString);\n            if (mltFlIndex > -1) {\n              int beginIndex=mltFlIndex + mltFlString.length();\n              int endIndex=parameterString.indexOf('&',beginIndex);\n              String fields;\n              if (endIndex > beginIndex) {\n                fields=parameterString.substring(beginIndex,endIndex);\n              }\n else {\n                fields=parameterString.substring(beginIndex);\n              }\n              kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n            }\n          }\n          solrQuery.setParam(kv[0],kv[1]);\n        }\n      }\n      return solrQuery;\n    }\n else {\n      queryBuilder.append(nativeQueryString);\n    }\n  }\n else {\n    if (pr.propertyName.contains(\"/\")) {\n      continue;\n    }\n    if (\"rep:excerpt\".equals(pr.propertyName)) {\n      continue;\n    }\n    String first=null;\n    if (pr.first != null) {\n      first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n    }\n    String last=null;\n    if (pr.last != null) {\n      last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n    }\n    String prField=configuration.getFieldForPropertyRestriction(pr);\n    CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n    if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n      queryBuilder.append(configuration.getPathField());\n      queryBuilder.append(':');\n      queryBuilder.append(first);\n    }\n else {\n      if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(first);\n      }\n else       if (pr.first == null && pr.last == null) {\n        if (!queryBuilder.toString().contains(fieldName + \":\")) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append('*');\n        }\n      }\n else       if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n      }\n else       if (pr.isLike) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n      }\n else {\n        throw new RuntimeException(\"[unexpected!] not handled case\");\n      }\n    }\n  }\n  queryBuilder.append(\" \");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 552,
                    "astHeight": 20
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 5681,
                        "startLineNumber": 122,
                        "startColumnNumber": 12,
                        "endLineNumber": 213,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (Filter.PropertyRestriction pr : propertyRestrictions) {\n  if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n    String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n    if (isSupportedHttpRequest(nativeQueryString)) {\n      String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n      if (!\"select\".equals(requestHandlerString)) {\n        if (requestHandlerString.charAt(0) != '/') {\n          requestHandlerString=\"/\" + requestHandlerString;\n        }\n        solrQuery.setRequestHandler(requestHandlerString);\n      }\n      String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n      for (      String param : parameterString.split(\"&\")) {\n        String[] kv=param.split(\"=\");\n        if (kv.length != 2) {\n          throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n        }\n else {\n          if (\"stream.body\".equals(kv[0])) {\n            kv[0]=\"q\";\n            String mltFlString=\"mlt.fl=\";\n            int mltFlIndex=parameterString.indexOf(mltFlString);\n            if (mltFlIndex > -1) {\n              int beginIndex=mltFlIndex + mltFlString.length();\n              int endIndex=parameterString.indexOf('&',beginIndex);\n              String fields;\n              if (endIndex > beginIndex) {\n                fields=parameterString.substring(beginIndex,endIndex);\n              }\n else {\n                fields=parameterString.substring(beginIndex);\n              }\n              kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n            }\n          }\n          solrQuery.setParam(kv[0],kv[1]);\n        }\n      }\n      return solrQuery;\n    }\n else {\n      queryBuilder.append(nativeQueryString);\n    }\n  }\n else {\n    if (pr.propertyName.contains(\"/\")) {\n      continue;\n    }\n    if (\"rep:excerpt\".equals(pr.propertyName)) {\n      continue;\n    }\n    String first=null;\n    if (pr.first != null) {\n      first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n    }\n    String last=null;\n    if (pr.last != null) {\n      last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n    }\n    String prField=configuration.getFieldForPropertyRestriction(pr);\n    CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n    if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n      queryBuilder.append(configuration.getPathField());\n      queryBuilder.append(':');\n      queryBuilder.append(first);\n    }\n else {\n      if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(first);\n      }\n else       if (pr.first == null && pr.last == null) {\n        if (!queryBuilder.toString().contains(fieldName + \":\")) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append('*');\n        }\n      }\n else       if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n      }\n else       if (pr.isLike) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n      }\n else {\n        throw new RuntimeException(\"[unexpected!] not handled case\");\n      }\n    }\n  }\n  queryBuilder.append(\" \");\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 560,
                    "astHeight": 21
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 5705,
                        "startLineNumber": 121,
                        "startColumnNumber": 77,
                        "endLineNumber": 214,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  for (  Filter.PropertyRestriction pr : propertyRestrictions) {\n    if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n      String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n      if (isSupportedHttpRequest(nativeQueryString)) {\n        String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n        if (!\"select\".equals(requestHandlerString)) {\n          if (requestHandlerString.charAt(0) != '/') {\n            requestHandlerString=\"/\" + requestHandlerString;\n          }\n          solrQuery.setRequestHandler(requestHandlerString);\n        }\n        String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n        for (        String param : parameterString.split(\"&\")) {\n          String[] kv=param.split(\"=\");\n          if (kv.length != 2) {\n            throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n          }\n else {\n            if (\"stream.body\".equals(kv[0])) {\n              kv[0]=\"q\";\n              String mltFlString=\"mlt.fl=\";\n              int mltFlIndex=parameterString.indexOf(mltFlString);\n              if (mltFlIndex > -1) {\n                int beginIndex=mltFlIndex + mltFlString.length();\n                int endIndex=parameterString.indexOf('&',beginIndex);\n                String fields;\n                if (endIndex > beginIndex) {\n                  fields=parameterString.substring(beginIndex,endIndex);\n                }\n else {\n                  fields=parameterString.substring(beginIndex);\n                }\n                kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n              }\n            }\n            solrQuery.setParam(kv[0],kv[1]);\n          }\n        }\n        return solrQuery;\n      }\n else {\n        queryBuilder.append(nativeQueryString);\n      }\n    }\n else {\n      if (pr.propertyName.contains(\"/\")) {\n        continue;\n      }\n      if (\"rep:excerpt\".equals(pr.propertyName)) {\n        continue;\n      }\n      String first=null;\n      if (pr.first != null) {\n        first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n      }\n      String last=null;\n      if (pr.last != null) {\n        last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n      }\n      String prField=configuration.getFieldForPropertyRestriction(pr);\n      CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n      if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n        queryBuilder.append(configuration.getPathField());\n        queryBuilder.append(':');\n        queryBuilder.append(first);\n      }\n else {\n        if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(first);\n        }\n else         if (pr.first == null && pr.last == null) {\n          if (!queryBuilder.toString().contains(fieldName + \":\")) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append('*');\n          }\n        }\n else         if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n        }\n else         if (pr.isLike) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n        }\n else {\n          throw new RuntimeException(\"[unexpected!] not handled case\");\n        }\n      }\n    }\n    queryBuilder.append(\" \");\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 561,
                    "astHeight": 22
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 5774,
                        "startLineNumber": 121,
                        "startColumnNumber": 8,
                        "endLineNumber": 214,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (propertyRestrictions != null && !propertyRestrictions.isEmpty()) {\n  for (  Filter.PropertyRestriction pr : propertyRestrictions) {\n    if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n      String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n      if (isSupportedHttpRequest(nativeQueryString)) {\n        String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n        if (!\"select\".equals(requestHandlerString)) {\n          if (requestHandlerString.charAt(0) != '/') {\n            requestHandlerString=\"/\" + requestHandlerString;\n          }\n          solrQuery.setRequestHandler(requestHandlerString);\n        }\n        String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n        for (        String param : parameterString.split(\"&\")) {\n          String[] kv=param.split(\"=\");\n          if (kv.length != 2) {\n            throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n          }\n else {\n            if (\"stream.body\".equals(kv[0])) {\n              kv[0]=\"q\";\n              String mltFlString=\"mlt.fl=\";\n              int mltFlIndex=parameterString.indexOf(mltFlString);\n              if (mltFlIndex > -1) {\n                int beginIndex=mltFlIndex + mltFlString.length();\n                int endIndex=parameterString.indexOf('&',beginIndex);\n                String fields;\n                if (endIndex > beginIndex) {\n                  fields=parameterString.substring(beginIndex,endIndex);\n                }\n else {\n                  fields=parameterString.substring(beginIndex);\n                }\n                kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n              }\n            }\n            solrQuery.setParam(kv[0],kv[1]);\n          }\n        }\n        return solrQuery;\n      }\n else {\n        queryBuilder.append(nativeQueryString);\n      }\n    }\n else {\n      if (pr.propertyName.contains(\"/\")) {\n        continue;\n      }\n      if (\"rep:excerpt\".equals(pr.propertyName)) {\n        continue;\n      }\n      String first=null;\n      if (pr.first != null) {\n        first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n      }\n      String last=null;\n      if (pr.last != null) {\n        last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n      }\n      String prField=configuration.getFieldForPropertyRestriction(pr);\n      CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n      if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n        queryBuilder.append(configuration.getPathField());\n        queryBuilder.append(':');\n        queryBuilder.append(first);\n      }\n else {\n        if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(first);\n        }\n else         if (pr.first == null && pr.last == null) {\n          if (!queryBuilder.toString().contains(fieldName + \":\")) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append('*');\n          }\n        }\n else         if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n        }\n else         if (pr.isLike) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n        }\n else {\n          throw new RuntimeException(\"[unexpected!] not handled case\");\n        }\n      }\n    }\n    queryBuilder.append(\" \");\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 570,
                    "astHeight": 23
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 7985,
                        "startLineNumber": 103,
                        "startColumnNumber": 46,
                        "endLineNumber": 255,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  SolrQuery solrQuery=new SolrQuery();\n  setDefaults(solrQuery);\n  StringBuilder queryBuilder=new StringBuilder();\n  if (filter.getFullTextConstraint() != null) {\n    queryBuilder.append(getFullTextQuery(filter.getFullTextConstraint()));\n    queryBuilder.append(' ');\n  }\n else   if (filter.getFulltextConditions() != null) {\n    Collection<String> fulltextConditions=filter.getFulltextConditions();\n    for (    String fulltextCondition : fulltextConditions) {\n      queryBuilder.append(fulltextCondition).append(\" \");\n    }\n  }\n  Collection<Filter.PropertyRestriction> propertyRestrictions=filter.getPropertyRestrictions();\n  if (propertyRestrictions != null && !propertyRestrictions.isEmpty()) {\n    for (    Filter.PropertyRestriction pr : propertyRestrictions) {\n      if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n        String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n        if (isSupportedHttpRequest(nativeQueryString)) {\n          String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n          if (!\"select\".equals(requestHandlerString)) {\n            if (requestHandlerString.charAt(0) != '/') {\n              requestHandlerString=\"/\" + requestHandlerString;\n            }\n            solrQuery.setRequestHandler(requestHandlerString);\n          }\n          String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n          for (          String param : parameterString.split(\"&\")) {\n            String[] kv=param.split(\"=\");\n            if (kv.length != 2) {\n              throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n            }\n else {\n              if (\"stream.body\".equals(kv[0])) {\n                kv[0]=\"q\";\n                String mltFlString=\"mlt.fl=\";\n                int mltFlIndex=parameterString.indexOf(mltFlString);\n                if (mltFlIndex > -1) {\n                  int beginIndex=mltFlIndex + mltFlString.length();\n                  int endIndex=parameterString.indexOf('&',beginIndex);\n                  String fields;\n                  if (endIndex > beginIndex) {\n                    fields=parameterString.substring(beginIndex,endIndex);\n                  }\n else {\n                    fields=parameterString.substring(beginIndex);\n                  }\n                  kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n                }\n              }\n              solrQuery.setParam(kv[0],kv[1]);\n            }\n          }\n          return solrQuery;\n        }\n else {\n          queryBuilder.append(nativeQueryString);\n        }\n      }\n else {\n        if (pr.propertyName.contains(\"/\")) {\n          continue;\n        }\n        if (\"rep:excerpt\".equals(pr.propertyName)) {\n          continue;\n        }\n        String first=null;\n        if (pr.first != null) {\n          first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n        }\n        String last=null;\n        if (pr.last != null) {\n          last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n        }\n        String prField=configuration.getFieldForPropertyRestriction(pr);\n        CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n        if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n          queryBuilder.append(configuration.getPathField());\n          queryBuilder.append(':');\n          queryBuilder.append(first);\n        }\n else {\n          if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(first);\n          }\n else           if (pr.first == null && pr.last == null) {\n            if (!queryBuilder.toString().contains(fieldName + \":\")) {\n              queryBuilder.append(fieldName).append(':');\n              queryBuilder.append('*');\n            }\n          }\n else           if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n          }\n else           if (pr.isLike) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n          }\n else {\n            throw new RuntimeException(\"[unexpected!] not handled case\");\n          }\n        }\n      }\n      queryBuilder.append(\" \");\n    }\n  }\n  String[] pts=filter.getPrimaryTypes().toArray(new String[filter.getPrimaryTypes().size()]);\n  for (int i=0; i < pts.length; i++) {\n    String pt=pts[i];\n    if (i == 0) {\n      queryBuilder.append(\"(\");\n    }\n    if (i > 0 && i < pts.length) {\n      queryBuilder.append(\"OR \");\n    }\n    queryBuilder.append(\"jcr\\\\:primaryType\").append(':').append(partialEscape(pt)).append(\" \");\n    if (i == pts.length - 1) {\n      queryBuilder.append(\")\");\n      queryBuilder.append(' ');\n    }\n  }\n  Filter.PathRestriction pathRestriction=filter.getPathRestriction();\n  if (pathRestriction != null) {\n    String path=purgePath(filter);\n    String fieldName=configuration.getFieldForPathRestriction(pathRestriction);\n    if (fieldName != null) {\n      queryBuilder.append(fieldName);\n      queryBuilder.append(':');\n      queryBuilder.append(path);\n    }\n  }\n  if (queryBuilder.length() == 0) {\n    queryBuilder.append(\"*:*\");\n  }\n  String escapedQuery=queryBuilder.toString();\n  solrQuery.setQuery(escapedQuery);\n  if (log.isDebugEnabled()) {\n    log.debug(\"JCR query {} has been converted to Solr query {}\",filter.getQueryStatement(),solrQuery.toString());\n  }\n  return solrQuery;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 858,
                    "astHeight": 24
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8027,
                        "startLineNumber": 103,
                        "startColumnNumber": 4,
                        "endLineNumber": 255,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private SolrQuery getQuery(Filter filter){\n  SolrQuery solrQuery=new SolrQuery();\n  setDefaults(solrQuery);\n  StringBuilder queryBuilder=new StringBuilder();\n  if (filter.getFullTextConstraint() != null) {\n    queryBuilder.append(getFullTextQuery(filter.getFullTextConstraint()));\n    queryBuilder.append(' ');\n  }\n else   if (filter.getFulltextConditions() != null) {\n    Collection<String> fulltextConditions=filter.getFulltextConditions();\n    for (    String fulltextCondition : fulltextConditions) {\n      queryBuilder.append(fulltextCondition).append(\" \");\n    }\n  }\n  Collection<Filter.PropertyRestriction> propertyRestrictions=filter.getPropertyRestrictions();\n  if (propertyRestrictions != null && !propertyRestrictions.isEmpty()) {\n    for (    Filter.PropertyRestriction pr : propertyRestrictions) {\n      if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n        String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n        if (isSupportedHttpRequest(nativeQueryString)) {\n          String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n          if (!\"select\".equals(requestHandlerString)) {\n            if (requestHandlerString.charAt(0) != '/') {\n              requestHandlerString=\"/\" + requestHandlerString;\n            }\n            solrQuery.setRequestHandler(requestHandlerString);\n          }\n          String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n          for (          String param : parameterString.split(\"&\")) {\n            String[] kv=param.split(\"=\");\n            if (kv.length != 2) {\n              throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n            }\n else {\n              if (\"stream.body\".equals(kv[0])) {\n                kv[0]=\"q\";\n                String mltFlString=\"mlt.fl=\";\n                int mltFlIndex=parameterString.indexOf(mltFlString);\n                if (mltFlIndex > -1) {\n                  int beginIndex=mltFlIndex + mltFlString.length();\n                  int endIndex=parameterString.indexOf('&',beginIndex);\n                  String fields;\n                  if (endIndex > beginIndex) {\n                    fields=parameterString.substring(beginIndex,endIndex);\n                  }\n else {\n                    fields=parameterString.substring(beginIndex);\n                  }\n                  kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n                }\n              }\n              solrQuery.setParam(kv[0],kv[1]);\n            }\n          }\n          return solrQuery;\n        }\n else {\n          queryBuilder.append(nativeQueryString);\n        }\n      }\n else {\n        if (pr.propertyName.contains(\"/\")) {\n          continue;\n        }\n        if (\"rep:excerpt\".equals(pr.propertyName)) {\n          continue;\n        }\n        String first=null;\n        if (pr.first != null) {\n          first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n        }\n        String last=null;\n        if (pr.last != null) {\n          last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n        }\n        String prField=configuration.getFieldForPropertyRestriction(pr);\n        CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n        if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n          queryBuilder.append(configuration.getPathField());\n          queryBuilder.append(':');\n          queryBuilder.append(first);\n        }\n else {\n          if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(first);\n          }\n else           if (pr.first == null && pr.last == null) {\n            if (!queryBuilder.toString().contains(fieldName + \":\")) {\n              queryBuilder.append(fieldName).append(':');\n              queryBuilder.append('*');\n            }\n          }\n else           if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n          }\n else           if (pr.isLike) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n          }\n else {\n            throw new RuntimeException(\"[unexpected!] not handled case\");\n          }\n        }\n      }\n      queryBuilder.append(\" \");\n    }\n  }\n  String[] pts=filter.getPrimaryTypes().toArray(new String[filter.getPrimaryTypes().size()]);\n  for (int i=0; i < pts.length; i++) {\n    String pt=pts[i];\n    if (i == 0) {\n      queryBuilder.append(\"(\");\n    }\n    if (i > 0 && i < pts.length) {\n      queryBuilder.append(\"OR \");\n    }\n    queryBuilder.append(\"jcr\\\\:primaryType\").append(':').append(partialEscape(pt)).append(\" \");\n    if (i == pts.length - 1) {\n      queryBuilder.append(\")\");\n      queryBuilder.append(' ');\n    }\n  }\n  Filter.PathRestriction pathRestriction=filter.getPathRestriction();\n  if (pathRestriction != null) {\n    String path=purgePath(filter);\n    String fieldName=configuration.getFieldForPathRestriction(pathRestriction);\n    if (fieldName != null) {\n      queryBuilder.append(fieldName);\n      queryBuilder.append(':');\n      queryBuilder.append(path);\n    }\n  }\n  if (queryBuilder.length() == 0) {\n    queryBuilder.append(\"*:*\");\n  }\n  String escapedQuery=queryBuilder.toString();\n  solrQuery.setQuery(escapedQuery);\n  if (log.isDebugEnabled()) {\n    log.debug(\"JCR query {} has been converted to Solr query {}\",filter.getQueryStatement(),solrQuery.toString());\n  }\n  return solrQuery;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 867,
                    "astHeight": 25
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,expression]",
                "nodePosition": {
                    "charLength": 15,
                    "startLineNumber": 184,
                    "startColumnNumber": 59,
                    "endLineNumber": 184,
                    "endColumnNumber": 74
                },
                "nodeContext": "prField != null",
                "nodeType": "InfixExpression",
                "astNodeNumber": 3,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "null"
        },
        {
            "nodeContext": "null",
            "nodeType": "NullLiteral",
            "nodePosition": {
                "charLength": 4,
                "startLineNumber": 191,
                "startColumnNumber": 40,
                "endLineNumber": 191,
                "endColumnNumber": 44
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 16,
                        "startLineNumber": 191,
                        "startColumnNumber": 28,
                        "endLineNumber": 191,
                        "endColumnNumber": 44
                    },
                    "nodeContext": "pr.first != null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 35,
                        "startLineNumber": 191,
                        "startColumnNumber": 28,
                        "endLineNumber": 191,
                        "endColumnNumber": 63
                    },
                    "nodeContext": "pr.first != null && pr.last != null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 63,
                        "startLineNumber": 191,
                        "startColumnNumber": 28,
                        "endLineNumber": 191,
                        "endColumnNumber": 91
                    },
                    "nodeContext": "pr.first != null && pr.last != null && pr.first.equals(pr.last)",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 20,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1490,
                        "startLineNumber": 191,
                        "startColumnNumber": 24,
                        "endLineNumber": 209,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n  queryBuilder.append(fieldName).append(':');\n  queryBuilder.append(first);\n}\n else if (pr.first == null && pr.last == null) {\n  if (!queryBuilder.toString().contains(fieldName + \":\")) {\n    queryBuilder.append(fieldName).append(':');\n    queryBuilder.append('*');\n  }\n}\n else if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n  queryBuilder.append(fieldName).append(':');\n  queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n}\n else if (pr.isLike) {\n  queryBuilder.append(fieldName).append(':');\n  queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n}\n else {\n  throw new RuntimeException(\"[unexpected!] not handled case\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 177,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1538,
                        "startLineNumber": 190,
                        "startColumnNumber": 27,
                        "endLineNumber": 210,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n    queryBuilder.append(fieldName).append(':');\n    queryBuilder.append(first);\n  }\n else   if (pr.first == null && pr.last == null) {\n    if (!queryBuilder.toString().contains(fieldName + \":\")) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append('*');\n    }\n  }\n else   if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n    queryBuilder.append(fieldName).append(':');\n    queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n  }\n else   if (pr.isLike) {\n    queryBuilder.append(fieldName).append(':');\n    queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n  }\n else {\n    throw new RuntimeException(\"[unexpected!] not handled case\");\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 178,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1791,
                        "startLineNumber": 186,
                        "startColumnNumber": 20,
                        "endLineNumber": 210,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n  queryBuilder.append(configuration.getPathField());\n  queryBuilder.append(':');\n  queryBuilder.append(first);\n}\n else {\n  if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n    queryBuilder.append(fieldName).append(':');\n    queryBuilder.append(first);\n  }\n else   if (pr.first == null && pr.last == null) {\n    if (!queryBuilder.toString().contains(fieldName + \":\")) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append('*');\n    }\n  }\n else   if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n    queryBuilder.append(fieldName).append(':');\n    queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n  }\n else   if (pr.isLike) {\n    queryBuilder.append(fieldName).append(':');\n    queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n  }\n else {\n    throw new RuntimeException(\"[unexpected!] not handled case\");\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 203,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 2798,
                        "startLineNumber": 164,
                        "startColumnNumber": 23,
                        "endLineNumber": 211,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  if (pr.propertyName.contains(\"/\")) {\n    continue;\n  }\n  if (\"rep:excerpt\".equals(pr.propertyName)) {\n    continue;\n  }\n  String first=null;\n  if (pr.first != null) {\n    first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n  }\n  String last=null;\n  if (pr.last != null) {\n    last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n  }\n  String prField=configuration.getFieldForPropertyRestriction(pr);\n  CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n  if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n    queryBuilder.append(configuration.getPathField());\n    queryBuilder.append(':');\n    queryBuilder.append(first);\n  }\n else {\n    if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(first);\n    }\n else     if (pr.first == null && pr.last == null) {\n      if (!queryBuilder.toString().contains(fieldName + \":\")) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append('*');\n      }\n    }\n else     if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n    }\n else     if (pr.isLike) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n    }\n else {\n      throw new RuntimeException(\"[unexpected!] not handled case\");\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 312,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 5508,
                        "startLineNumber": 124,
                        "startColumnNumber": 16,
                        "endLineNumber": 211,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n  String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n  if (isSupportedHttpRequest(nativeQueryString)) {\n    String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n    if (!\"select\".equals(requestHandlerString)) {\n      if (requestHandlerString.charAt(0) != '/') {\n        requestHandlerString=\"/\" + requestHandlerString;\n      }\n      solrQuery.setRequestHandler(requestHandlerString);\n    }\n    String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n    for (    String param : parameterString.split(\"&\")) {\n      String[] kv=param.split(\"=\");\n      if (kv.length != 2) {\n        throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n      }\n else {\n        if (\"stream.body\".equals(kv[0])) {\n          kv[0]=\"q\";\n          String mltFlString=\"mlt.fl=\";\n          int mltFlIndex=parameterString.indexOf(mltFlString);\n          if (mltFlIndex > -1) {\n            int beginIndex=mltFlIndex + mltFlString.length();\n            int endIndex=parameterString.indexOf('&',beginIndex);\n            String fields;\n            if (endIndex > beginIndex) {\n              fields=parameterString.substring(beginIndex,endIndex);\n            }\n else {\n              fields=parameterString.substring(beginIndex);\n            }\n            kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n          }\n        }\n        solrQuery.setParam(kv[0],kv[1]);\n      }\n    }\n    return solrQuery;\n  }\n else {\n    queryBuilder.append(nativeQueryString);\n  }\n}\n else {\n  if (pr.propertyName.contains(\"/\")) {\n    continue;\n  }\n  if (\"rep:excerpt\".equals(pr.propertyName)) {\n    continue;\n  }\n  String first=null;\n  if (pr.first != null) {\n    first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n  }\n  String last=null;\n  if (pr.last != null) {\n    last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n  }\n  String prField=configuration.getFieldForPropertyRestriction(pr);\n  CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n  if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n    queryBuilder.append(configuration.getPathField());\n    queryBuilder.append(':');\n    queryBuilder.append(first);\n  }\n else {\n    if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(first);\n    }\n else     if (pr.first == null && pr.last == null) {\n      if (!queryBuilder.toString().contains(fieldName + \":\")) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append('*');\n      }\n    }\n else     if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n    }\n else     if (pr.isLike) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n    }\n else {\n      throw new RuntimeException(\"[unexpected!] not handled case\");\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 546,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 5622,
                        "startLineNumber": 122,
                        "startColumnNumber": 71,
                        "endLineNumber": 213,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n    String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n    if (isSupportedHttpRequest(nativeQueryString)) {\n      String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n      if (!\"select\".equals(requestHandlerString)) {\n        if (requestHandlerString.charAt(0) != '/') {\n          requestHandlerString=\"/\" + requestHandlerString;\n        }\n        solrQuery.setRequestHandler(requestHandlerString);\n      }\n      String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n      for (      String param : parameterString.split(\"&\")) {\n        String[] kv=param.split(\"=\");\n        if (kv.length != 2) {\n          throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n        }\n else {\n          if (\"stream.body\".equals(kv[0])) {\n            kv[0]=\"q\";\n            String mltFlString=\"mlt.fl=\";\n            int mltFlIndex=parameterString.indexOf(mltFlString);\n            if (mltFlIndex > -1) {\n              int beginIndex=mltFlIndex + mltFlString.length();\n              int endIndex=parameterString.indexOf('&',beginIndex);\n              String fields;\n              if (endIndex > beginIndex) {\n                fields=parameterString.substring(beginIndex,endIndex);\n              }\n else {\n                fields=parameterString.substring(beginIndex);\n              }\n              kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n            }\n          }\n          solrQuery.setParam(kv[0],kv[1]);\n        }\n      }\n      return solrQuery;\n    }\n else {\n      queryBuilder.append(nativeQueryString);\n    }\n  }\n else {\n    if (pr.propertyName.contains(\"/\")) {\n      continue;\n    }\n    if (\"rep:excerpt\".equals(pr.propertyName)) {\n      continue;\n    }\n    String first=null;\n    if (pr.first != null) {\n      first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n    }\n    String last=null;\n    if (pr.last != null) {\n      last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n    }\n    String prField=configuration.getFieldForPropertyRestriction(pr);\n    CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n    if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n      queryBuilder.append(configuration.getPathField());\n      queryBuilder.append(':');\n      queryBuilder.append(first);\n    }\n else {\n      if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(first);\n      }\n else       if (pr.first == null && pr.last == null) {\n        if (!queryBuilder.toString().contains(fieldName + \":\")) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append('*');\n        }\n      }\n else       if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n      }\n else       if (pr.isLike) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n      }\n else {\n        throw new RuntimeException(\"[unexpected!] not handled case\");\n      }\n    }\n  }\n  queryBuilder.append(\" \");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 552,
                    "astHeight": 20
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 5681,
                        "startLineNumber": 122,
                        "startColumnNumber": 12,
                        "endLineNumber": 213,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (Filter.PropertyRestriction pr : propertyRestrictions) {\n  if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n    String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n    if (isSupportedHttpRequest(nativeQueryString)) {\n      String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n      if (!\"select\".equals(requestHandlerString)) {\n        if (requestHandlerString.charAt(0) != '/') {\n          requestHandlerString=\"/\" + requestHandlerString;\n        }\n        solrQuery.setRequestHandler(requestHandlerString);\n      }\n      String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n      for (      String param : parameterString.split(\"&\")) {\n        String[] kv=param.split(\"=\");\n        if (kv.length != 2) {\n          throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n        }\n else {\n          if (\"stream.body\".equals(kv[0])) {\n            kv[0]=\"q\";\n            String mltFlString=\"mlt.fl=\";\n            int mltFlIndex=parameterString.indexOf(mltFlString);\n            if (mltFlIndex > -1) {\n              int beginIndex=mltFlIndex + mltFlString.length();\n              int endIndex=parameterString.indexOf('&',beginIndex);\n              String fields;\n              if (endIndex > beginIndex) {\n                fields=parameterString.substring(beginIndex,endIndex);\n              }\n else {\n                fields=parameterString.substring(beginIndex);\n              }\n              kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n            }\n          }\n          solrQuery.setParam(kv[0],kv[1]);\n        }\n      }\n      return solrQuery;\n    }\n else {\n      queryBuilder.append(nativeQueryString);\n    }\n  }\n else {\n    if (pr.propertyName.contains(\"/\")) {\n      continue;\n    }\n    if (\"rep:excerpt\".equals(pr.propertyName)) {\n      continue;\n    }\n    String first=null;\n    if (pr.first != null) {\n      first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n    }\n    String last=null;\n    if (pr.last != null) {\n      last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n    }\n    String prField=configuration.getFieldForPropertyRestriction(pr);\n    CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n    if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n      queryBuilder.append(configuration.getPathField());\n      queryBuilder.append(':');\n      queryBuilder.append(first);\n    }\n else {\n      if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(first);\n      }\n else       if (pr.first == null && pr.last == null) {\n        if (!queryBuilder.toString().contains(fieldName + \":\")) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append('*');\n        }\n      }\n else       if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n      }\n else       if (pr.isLike) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n      }\n else {\n        throw new RuntimeException(\"[unexpected!] not handled case\");\n      }\n    }\n  }\n  queryBuilder.append(\" \");\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 560,
                    "astHeight": 21
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 5705,
                        "startLineNumber": 121,
                        "startColumnNumber": 77,
                        "endLineNumber": 214,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  for (  Filter.PropertyRestriction pr : propertyRestrictions) {\n    if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n      String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n      if (isSupportedHttpRequest(nativeQueryString)) {\n        String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n        if (!\"select\".equals(requestHandlerString)) {\n          if (requestHandlerString.charAt(0) != '/') {\n            requestHandlerString=\"/\" + requestHandlerString;\n          }\n          solrQuery.setRequestHandler(requestHandlerString);\n        }\n        String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n        for (        String param : parameterString.split(\"&\")) {\n          String[] kv=param.split(\"=\");\n          if (kv.length != 2) {\n            throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n          }\n else {\n            if (\"stream.body\".equals(kv[0])) {\n              kv[0]=\"q\";\n              String mltFlString=\"mlt.fl=\";\n              int mltFlIndex=parameterString.indexOf(mltFlString);\n              if (mltFlIndex > -1) {\n                int beginIndex=mltFlIndex + mltFlString.length();\n                int endIndex=parameterString.indexOf('&',beginIndex);\n                String fields;\n                if (endIndex > beginIndex) {\n                  fields=parameterString.substring(beginIndex,endIndex);\n                }\n else {\n                  fields=parameterString.substring(beginIndex);\n                }\n                kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n              }\n            }\n            solrQuery.setParam(kv[0],kv[1]);\n          }\n        }\n        return solrQuery;\n      }\n else {\n        queryBuilder.append(nativeQueryString);\n      }\n    }\n else {\n      if (pr.propertyName.contains(\"/\")) {\n        continue;\n      }\n      if (\"rep:excerpt\".equals(pr.propertyName)) {\n        continue;\n      }\n      String first=null;\n      if (pr.first != null) {\n        first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n      }\n      String last=null;\n      if (pr.last != null) {\n        last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n      }\n      String prField=configuration.getFieldForPropertyRestriction(pr);\n      CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n      if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n        queryBuilder.append(configuration.getPathField());\n        queryBuilder.append(':');\n        queryBuilder.append(first);\n      }\n else {\n        if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(first);\n        }\n else         if (pr.first == null && pr.last == null) {\n          if (!queryBuilder.toString().contains(fieldName + \":\")) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append('*');\n          }\n        }\n else         if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n        }\n else         if (pr.isLike) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n        }\n else {\n          throw new RuntimeException(\"[unexpected!] not handled case\");\n        }\n      }\n    }\n    queryBuilder.append(\" \");\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 561,
                    "astHeight": 22
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 5774,
                        "startLineNumber": 121,
                        "startColumnNumber": 8,
                        "endLineNumber": 214,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (propertyRestrictions != null && !propertyRestrictions.isEmpty()) {\n  for (  Filter.PropertyRestriction pr : propertyRestrictions) {\n    if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n      String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n      if (isSupportedHttpRequest(nativeQueryString)) {\n        String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n        if (!\"select\".equals(requestHandlerString)) {\n          if (requestHandlerString.charAt(0) != '/') {\n            requestHandlerString=\"/\" + requestHandlerString;\n          }\n          solrQuery.setRequestHandler(requestHandlerString);\n        }\n        String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n        for (        String param : parameterString.split(\"&\")) {\n          String[] kv=param.split(\"=\");\n          if (kv.length != 2) {\n            throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n          }\n else {\n            if (\"stream.body\".equals(kv[0])) {\n              kv[0]=\"q\";\n              String mltFlString=\"mlt.fl=\";\n              int mltFlIndex=parameterString.indexOf(mltFlString);\n              if (mltFlIndex > -1) {\n                int beginIndex=mltFlIndex + mltFlString.length();\n                int endIndex=parameterString.indexOf('&',beginIndex);\n                String fields;\n                if (endIndex > beginIndex) {\n                  fields=parameterString.substring(beginIndex,endIndex);\n                }\n else {\n                  fields=parameterString.substring(beginIndex);\n                }\n                kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n              }\n            }\n            solrQuery.setParam(kv[0],kv[1]);\n          }\n        }\n        return solrQuery;\n      }\n else {\n        queryBuilder.append(nativeQueryString);\n      }\n    }\n else {\n      if (pr.propertyName.contains(\"/\")) {\n        continue;\n      }\n      if (\"rep:excerpt\".equals(pr.propertyName)) {\n        continue;\n      }\n      String first=null;\n      if (pr.first != null) {\n        first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n      }\n      String last=null;\n      if (pr.last != null) {\n        last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n      }\n      String prField=configuration.getFieldForPropertyRestriction(pr);\n      CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n      if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n        queryBuilder.append(configuration.getPathField());\n        queryBuilder.append(':');\n        queryBuilder.append(first);\n      }\n else {\n        if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(first);\n        }\n else         if (pr.first == null && pr.last == null) {\n          if (!queryBuilder.toString().contains(fieldName + \":\")) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append('*');\n          }\n        }\n else         if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n        }\n else         if (pr.isLike) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n        }\n else {\n          throw new RuntimeException(\"[unexpected!] not handled case\");\n        }\n      }\n    }\n    queryBuilder.append(\" \");\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 570,
                    "astHeight": 23
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 7985,
                        "startLineNumber": 103,
                        "startColumnNumber": 46,
                        "endLineNumber": 255,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  SolrQuery solrQuery=new SolrQuery();\n  setDefaults(solrQuery);\n  StringBuilder queryBuilder=new StringBuilder();\n  if (filter.getFullTextConstraint() != null) {\n    queryBuilder.append(getFullTextQuery(filter.getFullTextConstraint()));\n    queryBuilder.append(' ');\n  }\n else   if (filter.getFulltextConditions() != null) {\n    Collection<String> fulltextConditions=filter.getFulltextConditions();\n    for (    String fulltextCondition : fulltextConditions) {\n      queryBuilder.append(fulltextCondition).append(\" \");\n    }\n  }\n  Collection<Filter.PropertyRestriction> propertyRestrictions=filter.getPropertyRestrictions();\n  if (propertyRestrictions != null && !propertyRestrictions.isEmpty()) {\n    for (    Filter.PropertyRestriction pr : propertyRestrictions) {\n      if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n        String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n        if (isSupportedHttpRequest(nativeQueryString)) {\n          String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n          if (!\"select\".equals(requestHandlerString)) {\n            if (requestHandlerString.charAt(0) != '/') {\n              requestHandlerString=\"/\" + requestHandlerString;\n            }\n            solrQuery.setRequestHandler(requestHandlerString);\n          }\n          String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n          for (          String param : parameterString.split(\"&\")) {\n            String[] kv=param.split(\"=\");\n            if (kv.length != 2) {\n              throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n            }\n else {\n              if (\"stream.body\".equals(kv[0])) {\n                kv[0]=\"q\";\n                String mltFlString=\"mlt.fl=\";\n                int mltFlIndex=parameterString.indexOf(mltFlString);\n                if (mltFlIndex > -1) {\n                  int beginIndex=mltFlIndex + mltFlString.length();\n                  int endIndex=parameterString.indexOf('&',beginIndex);\n                  String fields;\n                  if (endIndex > beginIndex) {\n                    fields=parameterString.substring(beginIndex,endIndex);\n                  }\n else {\n                    fields=parameterString.substring(beginIndex);\n                  }\n                  kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n                }\n              }\n              solrQuery.setParam(kv[0],kv[1]);\n            }\n          }\n          return solrQuery;\n        }\n else {\n          queryBuilder.append(nativeQueryString);\n        }\n      }\n else {\n        if (pr.propertyName.contains(\"/\")) {\n          continue;\n        }\n        if (\"rep:excerpt\".equals(pr.propertyName)) {\n          continue;\n        }\n        String first=null;\n        if (pr.first != null) {\n          first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n        }\n        String last=null;\n        if (pr.last != null) {\n          last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n        }\n        String prField=configuration.getFieldForPropertyRestriction(pr);\n        CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n        if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n          queryBuilder.append(configuration.getPathField());\n          queryBuilder.append(':');\n          queryBuilder.append(first);\n        }\n else {\n          if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(first);\n          }\n else           if (pr.first == null && pr.last == null) {\n            if (!queryBuilder.toString().contains(fieldName + \":\")) {\n              queryBuilder.append(fieldName).append(':');\n              queryBuilder.append('*');\n            }\n          }\n else           if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n          }\n else           if (pr.isLike) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n          }\n else {\n            throw new RuntimeException(\"[unexpected!] not handled case\");\n          }\n        }\n      }\n      queryBuilder.append(\" \");\n    }\n  }\n  String[] pts=filter.getPrimaryTypes().toArray(new String[filter.getPrimaryTypes().size()]);\n  for (int i=0; i < pts.length; i++) {\n    String pt=pts[i];\n    if (i == 0) {\n      queryBuilder.append(\"(\");\n    }\n    if (i > 0 && i < pts.length) {\n      queryBuilder.append(\"OR \");\n    }\n    queryBuilder.append(\"jcr\\\\:primaryType\").append(':').append(partialEscape(pt)).append(\" \");\n    if (i == pts.length - 1) {\n      queryBuilder.append(\")\");\n      queryBuilder.append(' ');\n    }\n  }\n  Filter.PathRestriction pathRestriction=filter.getPathRestriction();\n  if (pathRestriction != null) {\n    String path=purgePath(filter);\n    String fieldName=configuration.getFieldForPathRestriction(pathRestriction);\n    if (fieldName != null) {\n      queryBuilder.append(fieldName);\n      queryBuilder.append(':');\n      queryBuilder.append(path);\n    }\n  }\n  if (queryBuilder.length() == 0) {\n    queryBuilder.append(\"*:*\");\n  }\n  String escapedQuery=queryBuilder.toString();\n  solrQuery.setQuery(escapedQuery);\n  if (log.isDebugEnabled()) {\n    log.debug(\"JCR query {} has been converted to Solr query {}\",filter.getQueryStatement(),solrQuery.toString());\n  }\n  return solrQuery;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 858,
                    "astHeight": 24
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8027,
                        "startLineNumber": 103,
                        "startColumnNumber": 4,
                        "endLineNumber": 255,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private SolrQuery getQuery(Filter filter){\n  SolrQuery solrQuery=new SolrQuery();\n  setDefaults(solrQuery);\n  StringBuilder queryBuilder=new StringBuilder();\n  if (filter.getFullTextConstraint() != null) {\n    queryBuilder.append(getFullTextQuery(filter.getFullTextConstraint()));\n    queryBuilder.append(' ');\n  }\n else   if (filter.getFulltextConditions() != null) {\n    Collection<String> fulltextConditions=filter.getFulltextConditions();\n    for (    String fulltextCondition : fulltextConditions) {\n      queryBuilder.append(fulltextCondition).append(\" \");\n    }\n  }\n  Collection<Filter.PropertyRestriction> propertyRestrictions=filter.getPropertyRestrictions();\n  if (propertyRestrictions != null && !propertyRestrictions.isEmpty()) {\n    for (    Filter.PropertyRestriction pr : propertyRestrictions) {\n      if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n        String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n        if (isSupportedHttpRequest(nativeQueryString)) {\n          String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n          if (!\"select\".equals(requestHandlerString)) {\n            if (requestHandlerString.charAt(0) != '/') {\n              requestHandlerString=\"/\" + requestHandlerString;\n            }\n            solrQuery.setRequestHandler(requestHandlerString);\n          }\n          String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n          for (          String param : parameterString.split(\"&\")) {\n            String[] kv=param.split(\"=\");\n            if (kv.length != 2) {\n              throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n            }\n else {\n              if (\"stream.body\".equals(kv[0])) {\n                kv[0]=\"q\";\n                String mltFlString=\"mlt.fl=\";\n                int mltFlIndex=parameterString.indexOf(mltFlString);\n                if (mltFlIndex > -1) {\n                  int beginIndex=mltFlIndex + mltFlString.length();\n                  int endIndex=parameterString.indexOf('&',beginIndex);\n                  String fields;\n                  if (endIndex > beginIndex) {\n                    fields=parameterString.substring(beginIndex,endIndex);\n                  }\n else {\n                    fields=parameterString.substring(beginIndex);\n                  }\n                  kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n                }\n              }\n              solrQuery.setParam(kv[0],kv[1]);\n            }\n          }\n          return solrQuery;\n        }\n else {\n          queryBuilder.append(nativeQueryString);\n        }\n      }\n else {\n        if (pr.propertyName.contains(\"/\")) {\n          continue;\n        }\n        if (\"rep:excerpt\".equals(pr.propertyName)) {\n          continue;\n        }\n        String first=null;\n        if (pr.first != null) {\n          first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n        }\n        String last=null;\n        if (pr.last != null) {\n          last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n        }\n        String prField=configuration.getFieldForPropertyRestriction(pr);\n        CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n        if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n          queryBuilder.append(configuration.getPathField());\n          queryBuilder.append(':');\n          queryBuilder.append(first);\n        }\n else {\n          if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(first);\n          }\n else           if (pr.first == null && pr.last == null) {\n            if (!queryBuilder.toString().contains(fieldName + \":\")) {\n              queryBuilder.append(fieldName).append(':');\n              queryBuilder.append('*');\n            }\n          }\n else           if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n          }\n else           if (pr.isLike) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n          }\n else {\n            throw new RuntimeException(\"[unexpected!] not handled case\");\n          }\n        }\n      }\n      queryBuilder.append(\" \");\n    }\n  }\n  String[] pts=filter.getPrimaryTypes().toArray(new String[filter.getPrimaryTypes().size()]);\n  for (int i=0; i < pts.length; i++) {\n    String pt=pts[i];\n    if (i == 0) {\n      queryBuilder.append(\"(\");\n    }\n    if (i > 0 && i < pts.length) {\n      queryBuilder.append(\"OR \");\n    }\n    queryBuilder.append(\"jcr\\\\:primaryType\").append(':').append(partialEscape(pt)).append(\" \");\n    if (i == pts.length - 1) {\n      queryBuilder.append(\")\");\n      queryBuilder.append(' ');\n    }\n  }\n  Filter.PathRestriction pathRestriction=filter.getPathRestriction();\n  if (pathRestriction != null) {\n    String path=purgePath(filter);\n    String fieldName=configuration.getFieldForPathRestriction(pathRestriction);\n    if (fieldName != null) {\n      queryBuilder.append(fieldName);\n      queryBuilder.append(':');\n      queryBuilder.append(path);\n    }\n  }\n  if (queryBuilder.length() == 0) {\n    queryBuilder.append(\"*:*\");\n  }\n  String escapedQuery=queryBuilder.toString();\n  solrQuery.setQuery(escapedQuery);\n  if (log.isDebugEnabled()) {\n    log.debug(\"JCR query {} has been converted to Solr query {}\",filter.getQueryStatement(),solrQuery.toString());\n  }\n  return solrQuery;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 867,
                    "astHeight": 25
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 63,
                    "startLineNumber": 191,
                    "startColumnNumber": 28,
                    "endLineNumber": 191,
                    "endColumnNumber": 91
                },
                "nodeContext": "pr.first != null && pr.last != null && pr.first.equals(pr.last)",
                "nodeType": "InfixExpression",
                "astNodeNumber": 20,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "null"
        },
        {
            "nodeContext": "null",
            "nodeType": "NullLiteral",
            "nodePosition": {
                "charLength": 4,
                "startLineNumber": 191,
                "startColumnNumber": 59,
                "endLineNumber": 191,
                "endColumnNumber": 63
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 15,
                        "startLineNumber": 191,
                        "startColumnNumber": 48,
                        "endLineNumber": 191,
                        "endColumnNumber": 63
                    },
                    "nodeContext": "pr.last != null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 35,
                        "startLineNumber": 191,
                        "startColumnNumber": 28,
                        "endLineNumber": 191,
                        "endColumnNumber": 63
                    },
                    "nodeContext": "pr.first != null && pr.last != null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 63,
                        "startLineNumber": 191,
                        "startColumnNumber": 28,
                        "endLineNumber": 191,
                        "endColumnNumber": 91
                    },
                    "nodeContext": "pr.first != null && pr.last != null && pr.first.equals(pr.last)",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 20,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1490,
                        "startLineNumber": 191,
                        "startColumnNumber": 24,
                        "endLineNumber": 209,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n  queryBuilder.append(fieldName).append(':');\n  queryBuilder.append(first);\n}\n else if (pr.first == null && pr.last == null) {\n  if (!queryBuilder.toString().contains(fieldName + \":\")) {\n    queryBuilder.append(fieldName).append(':');\n    queryBuilder.append('*');\n  }\n}\n else if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n  queryBuilder.append(fieldName).append(':');\n  queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n}\n else if (pr.isLike) {\n  queryBuilder.append(fieldName).append(':');\n  queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n}\n else {\n  throw new RuntimeException(\"[unexpected!] not handled case\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 177,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1538,
                        "startLineNumber": 190,
                        "startColumnNumber": 27,
                        "endLineNumber": 210,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n    queryBuilder.append(fieldName).append(':');\n    queryBuilder.append(first);\n  }\n else   if (pr.first == null && pr.last == null) {\n    if (!queryBuilder.toString().contains(fieldName + \":\")) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append('*');\n    }\n  }\n else   if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n    queryBuilder.append(fieldName).append(':');\n    queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n  }\n else   if (pr.isLike) {\n    queryBuilder.append(fieldName).append(':');\n    queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n  }\n else {\n    throw new RuntimeException(\"[unexpected!] not handled case\");\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 178,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1791,
                        "startLineNumber": 186,
                        "startColumnNumber": 20,
                        "endLineNumber": 210,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n  queryBuilder.append(configuration.getPathField());\n  queryBuilder.append(':');\n  queryBuilder.append(first);\n}\n else {\n  if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n    queryBuilder.append(fieldName).append(':');\n    queryBuilder.append(first);\n  }\n else   if (pr.first == null && pr.last == null) {\n    if (!queryBuilder.toString().contains(fieldName + \":\")) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append('*');\n    }\n  }\n else   if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n    queryBuilder.append(fieldName).append(':');\n    queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n  }\n else   if (pr.isLike) {\n    queryBuilder.append(fieldName).append(':');\n    queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n  }\n else {\n    throw new RuntimeException(\"[unexpected!] not handled case\");\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 203,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 2798,
                        "startLineNumber": 164,
                        "startColumnNumber": 23,
                        "endLineNumber": 211,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  if (pr.propertyName.contains(\"/\")) {\n    continue;\n  }\n  if (\"rep:excerpt\".equals(pr.propertyName)) {\n    continue;\n  }\n  String first=null;\n  if (pr.first != null) {\n    first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n  }\n  String last=null;\n  if (pr.last != null) {\n    last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n  }\n  String prField=configuration.getFieldForPropertyRestriction(pr);\n  CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n  if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n    queryBuilder.append(configuration.getPathField());\n    queryBuilder.append(':');\n    queryBuilder.append(first);\n  }\n else {\n    if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(first);\n    }\n else     if (pr.first == null && pr.last == null) {\n      if (!queryBuilder.toString().contains(fieldName + \":\")) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append('*');\n      }\n    }\n else     if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n    }\n else     if (pr.isLike) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n    }\n else {\n      throw new RuntimeException(\"[unexpected!] not handled case\");\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 312,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 5508,
                        "startLineNumber": 124,
                        "startColumnNumber": 16,
                        "endLineNumber": 211,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n  String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n  if (isSupportedHttpRequest(nativeQueryString)) {\n    String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n    if (!\"select\".equals(requestHandlerString)) {\n      if (requestHandlerString.charAt(0) != '/') {\n        requestHandlerString=\"/\" + requestHandlerString;\n      }\n      solrQuery.setRequestHandler(requestHandlerString);\n    }\n    String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n    for (    String param : parameterString.split(\"&\")) {\n      String[] kv=param.split(\"=\");\n      if (kv.length != 2) {\n        throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n      }\n else {\n        if (\"stream.body\".equals(kv[0])) {\n          kv[0]=\"q\";\n          String mltFlString=\"mlt.fl=\";\n          int mltFlIndex=parameterString.indexOf(mltFlString);\n          if (mltFlIndex > -1) {\n            int beginIndex=mltFlIndex + mltFlString.length();\n            int endIndex=parameterString.indexOf('&',beginIndex);\n            String fields;\n            if (endIndex > beginIndex) {\n              fields=parameterString.substring(beginIndex,endIndex);\n            }\n else {\n              fields=parameterString.substring(beginIndex);\n            }\n            kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n          }\n        }\n        solrQuery.setParam(kv[0],kv[1]);\n      }\n    }\n    return solrQuery;\n  }\n else {\n    queryBuilder.append(nativeQueryString);\n  }\n}\n else {\n  if (pr.propertyName.contains(\"/\")) {\n    continue;\n  }\n  if (\"rep:excerpt\".equals(pr.propertyName)) {\n    continue;\n  }\n  String first=null;\n  if (pr.first != null) {\n    first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n  }\n  String last=null;\n  if (pr.last != null) {\n    last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n  }\n  String prField=configuration.getFieldForPropertyRestriction(pr);\n  CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n  if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n    queryBuilder.append(configuration.getPathField());\n    queryBuilder.append(':');\n    queryBuilder.append(first);\n  }\n else {\n    if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(first);\n    }\n else     if (pr.first == null && pr.last == null) {\n      if (!queryBuilder.toString().contains(fieldName + \":\")) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append('*');\n      }\n    }\n else     if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n    }\n else     if (pr.isLike) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n    }\n else {\n      throw new RuntimeException(\"[unexpected!] not handled case\");\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 546,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 5622,
                        "startLineNumber": 122,
                        "startColumnNumber": 71,
                        "endLineNumber": 213,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n    String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n    if (isSupportedHttpRequest(nativeQueryString)) {\n      String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n      if (!\"select\".equals(requestHandlerString)) {\n        if (requestHandlerString.charAt(0) != '/') {\n          requestHandlerString=\"/\" + requestHandlerString;\n        }\n        solrQuery.setRequestHandler(requestHandlerString);\n      }\n      String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n      for (      String param : parameterString.split(\"&\")) {\n        String[] kv=param.split(\"=\");\n        if (kv.length != 2) {\n          throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n        }\n else {\n          if (\"stream.body\".equals(kv[0])) {\n            kv[0]=\"q\";\n            String mltFlString=\"mlt.fl=\";\n            int mltFlIndex=parameterString.indexOf(mltFlString);\n            if (mltFlIndex > -1) {\n              int beginIndex=mltFlIndex + mltFlString.length();\n              int endIndex=parameterString.indexOf('&',beginIndex);\n              String fields;\n              if (endIndex > beginIndex) {\n                fields=parameterString.substring(beginIndex,endIndex);\n              }\n else {\n                fields=parameterString.substring(beginIndex);\n              }\n              kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n            }\n          }\n          solrQuery.setParam(kv[0],kv[1]);\n        }\n      }\n      return solrQuery;\n    }\n else {\n      queryBuilder.append(nativeQueryString);\n    }\n  }\n else {\n    if (pr.propertyName.contains(\"/\")) {\n      continue;\n    }\n    if (\"rep:excerpt\".equals(pr.propertyName)) {\n      continue;\n    }\n    String first=null;\n    if (pr.first != null) {\n      first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n    }\n    String last=null;\n    if (pr.last != null) {\n      last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n    }\n    String prField=configuration.getFieldForPropertyRestriction(pr);\n    CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n    if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n      queryBuilder.append(configuration.getPathField());\n      queryBuilder.append(':');\n      queryBuilder.append(first);\n    }\n else {\n      if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(first);\n      }\n else       if (pr.first == null && pr.last == null) {\n        if (!queryBuilder.toString().contains(fieldName + \":\")) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append('*');\n        }\n      }\n else       if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n      }\n else       if (pr.isLike) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n      }\n else {\n        throw new RuntimeException(\"[unexpected!] not handled case\");\n      }\n    }\n  }\n  queryBuilder.append(\" \");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 552,
                    "astHeight": 20
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 5681,
                        "startLineNumber": 122,
                        "startColumnNumber": 12,
                        "endLineNumber": 213,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (Filter.PropertyRestriction pr : propertyRestrictions) {\n  if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n    String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n    if (isSupportedHttpRequest(nativeQueryString)) {\n      String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n      if (!\"select\".equals(requestHandlerString)) {\n        if (requestHandlerString.charAt(0) != '/') {\n          requestHandlerString=\"/\" + requestHandlerString;\n        }\n        solrQuery.setRequestHandler(requestHandlerString);\n      }\n      String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n      for (      String param : parameterString.split(\"&\")) {\n        String[] kv=param.split(\"=\");\n        if (kv.length != 2) {\n          throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n        }\n else {\n          if (\"stream.body\".equals(kv[0])) {\n            kv[0]=\"q\";\n            String mltFlString=\"mlt.fl=\";\n            int mltFlIndex=parameterString.indexOf(mltFlString);\n            if (mltFlIndex > -1) {\n              int beginIndex=mltFlIndex + mltFlString.length();\n              int endIndex=parameterString.indexOf('&',beginIndex);\n              String fields;\n              if (endIndex > beginIndex) {\n                fields=parameterString.substring(beginIndex,endIndex);\n              }\n else {\n                fields=parameterString.substring(beginIndex);\n              }\n              kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n            }\n          }\n          solrQuery.setParam(kv[0],kv[1]);\n        }\n      }\n      return solrQuery;\n    }\n else {\n      queryBuilder.append(nativeQueryString);\n    }\n  }\n else {\n    if (pr.propertyName.contains(\"/\")) {\n      continue;\n    }\n    if (\"rep:excerpt\".equals(pr.propertyName)) {\n      continue;\n    }\n    String first=null;\n    if (pr.first != null) {\n      first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n    }\n    String last=null;\n    if (pr.last != null) {\n      last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n    }\n    String prField=configuration.getFieldForPropertyRestriction(pr);\n    CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n    if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n      queryBuilder.append(configuration.getPathField());\n      queryBuilder.append(':');\n      queryBuilder.append(first);\n    }\n else {\n      if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(first);\n      }\n else       if (pr.first == null && pr.last == null) {\n        if (!queryBuilder.toString().contains(fieldName + \":\")) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append('*');\n        }\n      }\n else       if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n      }\n else       if (pr.isLike) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n      }\n else {\n        throw new RuntimeException(\"[unexpected!] not handled case\");\n      }\n    }\n  }\n  queryBuilder.append(\" \");\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 560,
                    "astHeight": 21
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 5705,
                        "startLineNumber": 121,
                        "startColumnNumber": 77,
                        "endLineNumber": 214,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  for (  Filter.PropertyRestriction pr : propertyRestrictions) {\n    if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n      String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n      if (isSupportedHttpRequest(nativeQueryString)) {\n        String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n        if (!\"select\".equals(requestHandlerString)) {\n          if (requestHandlerString.charAt(0) != '/') {\n            requestHandlerString=\"/\" + requestHandlerString;\n          }\n          solrQuery.setRequestHandler(requestHandlerString);\n        }\n        String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n        for (        String param : parameterString.split(\"&\")) {\n          String[] kv=param.split(\"=\");\n          if (kv.length != 2) {\n            throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n          }\n else {\n            if (\"stream.body\".equals(kv[0])) {\n              kv[0]=\"q\";\n              String mltFlString=\"mlt.fl=\";\n              int mltFlIndex=parameterString.indexOf(mltFlString);\n              if (mltFlIndex > -1) {\n                int beginIndex=mltFlIndex + mltFlString.length();\n                int endIndex=parameterString.indexOf('&',beginIndex);\n                String fields;\n                if (endIndex > beginIndex) {\n                  fields=parameterString.substring(beginIndex,endIndex);\n                }\n else {\n                  fields=parameterString.substring(beginIndex);\n                }\n                kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n              }\n            }\n            solrQuery.setParam(kv[0],kv[1]);\n          }\n        }\n        return solrQuery;\n      }\n else {\n        queryBuilder.append(nativeQueryString);\n      }\n    }\n else {\n      if (pr.propertyName.contains(\"/\")) {\n        continue;\n      }\n      if (\"rep:excerpt\".equals(pr.propertyName)) {\n        continue;\n      }\n      String first=null;\n      if (pr.first != null) {\n        first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n      }\n      String last=null;\n      if (pr.last != null) {\n        last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n      }\n      String prField=configuration.getFieldForPropertyRestriction(pr);\n      CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n      if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n        queryBuilder.append(configuration.getPathField());\n        queryBuilder.append(':');\n        queryBuilder.append(first);\n      }\n else {\n        if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(first);\n        }\n else         if (pr.first == null && pr.last == null) {\n          if (!queryBuilder.toString().contains(fieldName + \":\")) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append('*');\n          }\n        }\n else         if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n        }\n else         if (pr.isLike) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n        }\n else {\n          throw new RuntimeException(\"[unexpected!] not handled case\");\n        }\n      }\n    }\n    queryBuilder.append(\" \");\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 561,
                    "astHeight": 22
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 5774,
                        "startLineNumber": 121,
                        "startColumnNumber": 8,
                        "endLineNumber": 214,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (propertyRestrictions != null && !propertyRestrictions.isEmpty()) {\n  for (  Filter.PropertyRestriction pr : propertyRestrictions) {\n    if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n      String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n      if (isSupportedHttpRequest(nativeQueryString)) {\n        String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n        if (!\"select\".equals(requestHandlerString)) {\n          if (requestHandlerString.charAt(0) != '/') {\n            requestHandlerString=\"/\" + requestHandlerString;\n          }\n          solrQuery.setRequestHandler(requestHandlerString);\n        }\n        String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n        for (        String param : parameterString.split(\"&\")) {\n          String[] kv=param.split(\"=\");\n          if (kv.length != 2) {\n            throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n          }\n else {\n            if (\"stream.body\".equals(kv[0])) {\n              kv[0]=\"q\";\n              String mltFlString=\"mlt.fl=\";\n              int mltFlIndex=parameterString.indexOf(mltFlString);\n              if (mltFlIndex > -1) {\n                int beginIndex=mltFlIndex + mltFlString.length();\n                int endIndex=parameterString.indexOf('&',beginIndex);\n                String fields;\n                if (endIndex > beginIndex) {\n                  fields=parameterString.substring(beginIndex,endIndex);\n                }\n else {\n                  fields=parameterString.substring(beginIndex);\n                }\n                kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n              }\n            }\n            solrQuery.setParam(kv[0],kv[1]);\n          }\n        }\n        return solrQuery;\n      }\n else {\n        queryBuilder.append(nativeQueryString);\n      }\n    }\n else {\n      if (pr.propertyName.contains(\"/\")) {\n        continue;\n      }\n      if (\"rep:excerpt\".equals(pr.propertyName)) {\n        continue;\n      }\n      String first=null;\n      if (pr.first != null) {\n        first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n      }\n      String last=null;\n      if (pr.last != null) {\n        last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n      }\n      String prField=configuration.getFieldForPropertyRestriction(pr);\n      CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n      if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n        queryBuilder.append(configuration.getPathField());\n        queryBuilder.append(':');\n        queryBuilder.append(first);\n      }\n else {\n        if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(first);\n        }\n else         if (pr.first == null && pr.last == null) {\n          if (!queryBuilder.toString().contains(fieldName + \":\")) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append('*');\n          }\n        }\n else         if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n        }\n else         if (pr.isLike) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n        }\n else {\n          throw new RuntimeException(\"[unexpected!] not handled case\");\n        }\n      }\n    }\n    queryBuilder.append(\" \");\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 570,
                    "astHeight": 23
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 7985,
                        "startLineNumber": 103,
                        "startColumnNumber": 46,
                        "endLineNumber": 255,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  SolrQuery solrQuery=new SolrQuery();\n  setDefaults(solrQuery);\n  StringBuilder queryBuilder=new StringBuilder();\n  if (filter.getFullTextConstraint() != null) {\n    queryBuilder.append(getFullTextQuery(filter.getFullTextConstraint()));\n    queryBuilder.append(' ');\n  }\n else   if (filter.getFulltextConditions() != null) {\n    Collection<String> fulltextConditions=filter.getFulltextConditions();\n    for (    String fulltextCondition : fulltextConditions) {\n      queryBuilder.append(fulltextCondition).append(\" \");\n    }\n  }\n  Collection<Filter.PropertyRestriction> propertyRestrictions=filter.getPropertyRestrictions();\n  if (propertyRestrictions != null && !propertyRestrictions.isEmpty()) {\n    for (    Filter.PropertyRestriction pr : propertyRestrictions) {\n      if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n        String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n        if (isSupportedHttpRequest(nativeQueryString)) {\n          String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n          if (!\"select\".equals(requestHandlerString)) {\n            if (requestHandlerString.charAt(0) != '/') {\n              requestHandlerString=\"/\" + requestHandlerString;\n            }\n            solrQuery.setRequestHandler(requestHandlerString);\n          }\n          String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n          for (          String param : parameterString.split(\"&\")) {\n            String[] kv=param.split(\"=\");\n            if (kv.length != 2) {\n              throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n            }\n else {\n              if (\"stream.body\".equals(kv[0])) {\n                kv[0]=\"q\";\n                String mltFlString=\"mlt.fl=\";\n                int mltFlIndex=parameterString.indexOf(mltFlString);\n                if (mltFlIndex > -1) {\n                  int beginIndex=mltFlIndex + mltFlString.length();\n                  int endIndex=parameterString.indexOf('&',beginIndex);\n                  String fields;\n                  if (endIndex > beginIndex) {\n                    fields=parameterString.substring(beginIndex,endIndex);\n                  }\n else {\n                    fields=parameterString.substring(beginIndex);\n                  }\n                  kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n                }\n              }\n              solrQuery.setParam(kv[0],kv[1]);\n            }\n          }\n          return solrQuery;\n        }\n else {\n          queryBuilder.append(nativeQueryString);\n        }\n      }\n else {\n        if (pr.propertyName.contains(\"/\")) {\n          continue;\n        }\n        if (\"rep:excerpt\".equals(pr.propertyName)) {\n          continue;\n        }\n        String first=null;\n        if (pr.first != null) {\n          first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n        }\n        String last=null;\n        if (pr.last != null) {\n          last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n        }\n        String prField=configuration.getFieldForPropertyRestriction(pr);\n        CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n        if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n          queryBuilder.append(configuration.getPathField());\n          queryBuilder.append(':');\n          queryBuilder.append(first);\n        }\n else {\n          if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(first);\n          }\n else           if (pr.first == null && pr.last == null) {\n            if (!queryBuilder.toString().contains(fieldName + \":\")) {\n              queryBuilder.append(fieldName).append(':');\n              queryBuilder.append('*');\n            }\n          }\n else           if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n          }\n else           if (pr.isLike) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n          }\n else {\n            throw new RuntimeException(\"[unexpected!] not handled case\");\n          }\n        }\n      }\n      queryBuilder.append(\" \");\n    }\n  }\n  String[] pts=filter.getPrimaryTypes().toArray(new String[filter.getPrimaryTypes().size()]);\n  for (int i=0; i < pts.length; i++) {\n    String pt=pts[i];\n    if (i == 0) {\n      queryBuilder.append(\"(\");\n    }\n    if (i > 0 && i < pts.length) {\n      queryBuilder.append(\"OR \");\n    }\n    queryBuilder.append(\"jcr\\\\:primaryType\").append(':').append(partialEscape(pt)).append(\" \");\n    if (i == pts.length - 1) {\n      queryBuilder.append(\")\");\n      queryBuilder.append(' ');\n    }\n  }\n  Filter.PathRestriction pathRestriction=filter.getPathRestriction();\n  if (pathRestriction != null) {\n    String path=purgePath(filter);\n    String fieldName=configuration.getFieldForPathRestriction(pathRestriction);\n    if (fieldName != null) {\n      queryBuilder.append(fieldName);\n      queryBuilder.append(':');\n      queryBuilder.append(path);\n    }\n  }\n  if (queryBuilder.length() == 0) {\n    queryBuilder.append(\"*:*\");\n  }\n  String escapedQuery=queryBuilder.toString();\n  solrQuery.setQuery(escapedQuery);\n  if (log.isDebugEnabled()) {\n    log.debug(\"JCR query {} has been converted to Solr query {}\",filter.getQueryStatement(),solrQuery.toString());\n  }\n  return solrQuery;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 858,
                    "astHeight": 24
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8027,
                        "startLineNumber": 103,
                        "startColumnNumber": 4,
                        "endLineNumber": 255,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private SolrQuery getQuery(Filter filter){\n  SolrQuery solrQuery=new SolrQuery();\n  setDefaults(solrQuery);\n  StringBuilder queryBuilder=new StringBuilder();\n  if (filter.getFullTextConstraint() != null) {\n    queryBuilder.append(getFullTextQuery(filter.getFullTextConstraint()));\n    queryBuilder.append(' ');\n  }\n else   if (filter.getFulltextConditions() != null) {\n    Collection<String> fulltextConditions=filter.getFulltextConditions();\n    for (    String fulltextCondition : fulltextConditions) {\n      queryBuilder.append(fulltextCondition).append(\" \");\n    }\n  }\n  Collection<Filter.PropertyRestriction> propertyRestrictions=filter.getPropertyRestrictions();\n  if (propertyRestrictions != null && !propertyRestrictions.isEmpty()) {\n    for (    Filter.PropertyRestriction pr : propertyRestrictions) {\n      if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n        String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n        if (isSupportedHttpRequest(nativeQueryString)) {\n          String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n          if (!\"select\".equals(requestHandlerString)) {\n            if (requestHandlerString.charAt(0) != '/') {\n              requestHandlerString=\"/\" + requestHandlerString;\n            }\n            solrQuery.setRequestHandler(requestHandlerString);\n          }\n          String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n          for (          String param : parameterString.split(\"&\")) {\n            String[] kv=param.split(\"=\");\n            if (kv.length != 2) {\n              throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n            }\n else {\n              if (\"stream.body\".equals(kv[0])) {\n                kv[0]=\"q\";\n                String mltFlString=\"mlt.fl=\";\n                int mltFlIndex=parameterString.indexOf(mltFlString);\n                if (mltFlIndex > -1) {\n                  int beginIndex=mltFlIndex + mltFlString.length();\n                  int endIndex=parameterString.indexOf('&',beginIndex);\n                  String fields;\n                  if (endIndex > beginIndex) {\n                    fields=parameterString.substring(beginIndex,endIndex);\n                  }\n else {\n                    fields=parameterString.substring(beginIndex);\n                  }\n                  kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n                }\n              }\n              solrQuery.setParam(kv[0],kv[1]);\n            }\n          }\n          return solrQuery;\n        }\n else {\n          queryBuilder.append(nativeQueryString);\n        }\n      }\n else {\n        if (pr.propertyName.contains(\"/\")) {\n          continue;\n        }\n        if (\"rep:excerpt\".equals(pr.propertyName)) {\n          continue;\n        }\n        String first=null;\n        if (pr.first != null) {\n          first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n        }\n        String last=null;\n        if (pr.last != null) {\n          last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n        }\n        String prField=configuration.getFieldForPropertyRestriction(pr);\n        CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n        if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n          queryBuilder.append(configuration.getPathField());\n          queryBuilder.append(':');\n          queryBuilder.append(first);\n        }\n else {\n          if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(first);\n          }\n else           if (pr.first == null && pr.last == null) {\n            if (!queryBuilder.toString().contains(fieldName + \":\")) {\n              queryBuilder.append(fieldName).append(':');\n              queryBuilder.append('*');\n            }\n          }\n else           if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n          }\n else           if (pr.isLike) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n          }\n else {\n            throw new RuntimeException(\"[unexpected!] not handled case\");\n          }\n        }\n      }\n      queryBuilder.append(\" \");\n    }\n  }\n  String[] pts=filter.getPrimaryTypes().toArray(new String[filter.getPrimaryTypes().size()]);\n  for (int i=0; i < pts.length; i++) {\n    String pt=pts[i];\n    if (i == 0) {\n      queryBuilder.append(\"(\");\n    }\n    if (i > 0 && i < pts.length) {\n      queryBuilder.append(\"OR \");\n    }\n    queryBuilder.append(\"jcr\\\\:primaryType\").append(':').append(partialEscape(pt)).append(\" \");\n    if (i == pts.length - 1) {\n      queryBuilder.append(\")\");\n      queryBuilder.append(' ');\n    }\n  }\n  Filter.PathRestriction pathRestriction=filter.getPathRestriction();\n  if (pathRestriction != null) {\n    String path=purgePath(filter);\n    String fieldName=configuration.getFieldForPathRestriction(pathRestriction);\n    if (fieldName != null) {\n      queryBuilder.append(fieldName);\n      queryBuilder.append(':');\n      queryBuilder.append(path);\n    }\n  }\n  if (queryBuilder.length() == 0) {\n    queryBuilder.append(\"*:*\");\n  }\n  String escapedQuery=queryBuilder.toString();\n  solrQuery.setQuery(escapedQuery);\n  if (log.isDebugEnabled()) {\n    log.debug(\"JCR query {} has been converted to Solr query {}\",filter.getQueryStatement(),solrQuery.toString());\n  }\n  return solrQuery;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 867,
                    "astHeight": 25
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 63,
                    "startLineNumber": 191,
                    "startColumnNumber": 28,
                    "endLineNumber": 191,
                    "endColumnNumber": 91
                },
                "nodeContext": "pr.first != null && pr.last != null && pr.first.equals(pr.last)",
                "nodeType": "InfixExpression",
                "astNodeNumber": 20,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "null"
        },
        {
            "nodeContext": "null",
            "nodeType": "NullLiteral",
            "nodePosition": {
                "charLength": 4,
                "startLineNumber": 194,
                "startColumnNumber": 47,
                "endLineNumber": 194,
                "endColumnNumber": 51
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 16,
                        "startLineNumber": 194,
                        "startColumnNumber": 35,
                        "endLineNumber": 194,
                        "endColumnNumber": 51
                    },
                    "nodeContext": "pr.first == null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 35,
                        "startLineNumber": 194,
                        "startColumnNumber": 35,
                        "endLineNumber": 194,
                        "endColumnNumber": 70
                    },
                    "nodeContext": "pr.first == null && pr.last == null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1260,
                        "startLineNumber": 194,
                        "startColumnNumber": 31,
                        "endLineNumber": 209,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "if (pr.first == null && pr.last == null) {\n  if (!queryBuilder.toString().contains(fieldName + \":\")) {\n    queryBuilder.append(fieldName).append(':');\n    queryBuilder.append('*');\n  }\n}\n else if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n  queryBuilder.append(fieldName).append(':');\n  queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n}\n else if (pr.isLike) {\n  queryBuilder.append(fieldName).append(':');\n  queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n}\n else {\n  throw new RuntimeException(\"[unexpected!] not handled case\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 142,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1490,
                        "startLineNumber": 191,
                        "startColumnNumber": 24,
                        "endLineNumber": 209,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n  queryBuilder.append(fieldName).append(':');\n  queryBuilder.append(first);\n}\n else if (pr.first == null && pr.last == null) {\n  if (!queryBuilder.toString().contains(fieldName + \":\")) {\n    queryBuilder.append(fieldName).append(':');\n    queryBuilder.append('*');\n  }\n}\n else if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n  queryBuilder.append(fieldName).append(':');\n  queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n}\n else if (pr.isLike) {\n  queryBuilder.append(fieldName).append(':');\n  queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n}\n else {\n  throw new RuntimeException(\"[unexpected!] not handled case\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 177,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1538,
                        "startLineNumber": 190,
                        "startColumnNumber": 27,
                        "endLineNumber": 210,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n    queryBuilder.append(fieldName).append(':');\n    queryBuilder.append(first);\n  }\n else   if (pr.first == null && pr.last == null) {\n    if (!queryBuilder.toString().contains(fieldName + \":\")) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append('*');\n    }\n  }\n else   if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n    queryBuilder.append(fieldName).append(':');\n    queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n  }\n else   if (pr.isLike) {\n    queryBuilder.append(fieldName).append(':');\n    queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n  }\n else {\n    throw new RuntimeException(\"[unexpected!] not handled case\");\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 178,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1791,
                        "startLineNumber": 186,
                        "startColumnNumber": 20,
                        "endLineNumber": 210,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n  queryBuilder.append(configuration.getPathField());\n  queryBuilder.append(':');\n  queryBuilder.append(first);\n}\n else {\n  if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n    queryBuilder.append(fieldName).append(':');\n    queryBuilder.append(first);\n  }\n else   if (pr.first == null && pr.last == null) {\n    if (!queryBuilder.toString().contains(fieldName + \":\")) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append('*');\n    }\n  }\n else   if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n    queryBuilder.append(fieldName).append(':');\n    queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n  }\n else   if (pr.isLike) {\n    queryBuilder.append(fieldName).append(':');\n    queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n  }\n else {\n    throw new RuntimeException(\"[unexpected!] not handled case\");\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 203,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 2798,
                        "startLineNumber": 164,
                        "startColumnNumber": 23,
                        "endLineNumber": 211,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  if (pr.propertyName.contains(\"/\")) {\n    continue;\n  }\n  if (\"rep:excerpt\".equals(pr.propertyName)) {\n    continue;\n  }\n  String first=null;\n  if (pr.first != null) {\n    first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n  }\n  String last=null;\n  if (pr.last != null) {\n    last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n  }\n  String prField=configuration.getFieldForPropertyRestriction(pr);\n  CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n  if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n    queryBuilder.append(configuration.getPathField());\n    queryBuilder.append(':');\n    queryBuilder.append(first);\n  }\n else {\n    if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(first);\n    }\n else     if (pr.first == null && pr.last == null) {\n      if (!queryBuilder.toString().contains(fieldName + \":\")) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append('*');\n      }\n    }\n else     if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n    }\n else     if (pr.isLike) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n    }\n else {\n      throw new RuntimeException(\"[unexpected!] not handled case\");\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 312,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 5508,
                        "startLineNumber": 124,
                        "startColumnNumber": 16,
                        "endLineNumber": 211,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n  String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n  if (isSupportedHttpRequest(nativeQueryString)) {\n    String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n    if (!\"select\".equals(requestHandlerString)) {\n      if (requestHandlerString.charAt(0) != '/') {\n        requestHandlerString=\"/\" + requestHandlerString;\n      }\n      solrQuery.setRequestHandler(requestHandlerString);\n    }\n    String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n    for (    String param : parameterString.split(\"&\")) {\n      String[] kv=param.split(\"=\");\n      if (kv.length != 2) {\n        throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n      }\n else {\n        if (\"stream.body\".equals(kv[0])) {\n          kv[0]=\"q\";\n          String mltFlString=\"mlt.fl=\";\n          int mltFlIndex=parameterString.indexOf(mltFlString);\n          if (mltFlIndex > -1) {\n            int beginIndex=mltFlIndex + mltFlString.length();\n            int endIndex=parameterString.indexOf('&',beginIndex);\n            String fields;\n            if (endIndex > beginIndex) {\n              fields=parameterString.substring(beginIndex,endIndex);\n            }\n else {\n              fields=parameterString.substring(beginIndex);\n            }\n            kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n          }\n        }\n        solrQuery.setParam(kv[0],kv[1]);\n      }\n    }\n    return solrQuery;\n  }\n else {\n    queryBuilder.append(nativeQueryString);\n  }\n}\n else {\n  if (pr.propertyName.contains(\"/\")) {\n    continue;\n  }\n  if (\"rep:excerpt\".equals(pr.propertyName)) {\n    continue;\n  }\n  String first=null;\n  if (pr.first != null) {\n    first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n  }\n  String last=null;\n  if (pr.last != null) {\n    last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n  }\n  String prField=configuration.getFieldForPropertyRestriction(pr);\n  CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n  if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n    queryBuilder.append(configuration.getPathField());\n    queryBuilder.append(':');\n    queryBuilder.append(first);\n  }\n else {\n    if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(first);\n    }\n else     if (pr.first == null && pr.last == null) {\n      if (!queryBuilder.toString().contains(fieldName + \":\")) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append('*');\n      }\n    }\n else     if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n    }\n else     if (pr.isLike) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n    }\n else {\n      throw new RuntimeException(\"[unexpected!] not handled case\");\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 546,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 5622,
                        "startLineNumber": 122,
                        "startColumnNumber": 71,
                        "endLineNumber": 213,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n    String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n    if (isSupportedHttpRequest(nativeQueryString)) {\n      String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n      if (!\"select\".equals(requestHandlerString)) {\n        if (requestHandlerString.charAt(0) != '/') {\n          requestHandlerString=\"/\" + requestHandlerString;\n        }\n        solrQuery.setRequestHandler(requestHandlerString);\n      }\n      String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n      for (      String param : parameterString.split(\"&\")) {\n        String[] kv=param.split(\"=\");\n        if (kv.length != 2) {\n          throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n        }\n else {\n          if (\"stream.body\".equals(kv[0])) {\n            kv[0]=\"q\";\n            String mltFlString=\"mlt.fl=\";\n            int mltFlIndex=parameterString.indexOf(mltFlString);\n            if (mltFlIndex > -1) {\n              int beginIndex=mltFlIndex + mltFlString.length();\n              int endIndex=parameterString.indexOf('&',beginIndex);\n              String fields;\n              if (endIndex > beginIndex) {\n                fields=parameterString.substring(beginIndex,endIndex);\n              }\n else {\n                fields=parameterString.substring(beginIndex);\n              }\n              kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n            }\n          }\n          solrQuery.setParam(kv[0],kv[1]);\n        }\n      }\n      return solrQuery;\n    }\n else {\n      queryBuilder.append(nativeQueryString);\n    }\n  }\n else {\n    if (pr.propertyName.contains(\"/\")) {\n      continue;\n    }\n    if (\"rep:excerpt\".equals(pr.propertyName)) {\n      continue;\n    }\n    String first=null;\n    if (pr.first != null) {\n      first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n    }\n    String last=null;\n    if (pr.last != null) {\n      last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n    }\n    String prField=configuration.getFieldForPropertyRestriction(pr);\n    CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n    if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n      queryBuilder.append(configuration.getPathField());\n      queryBuilder.append(':');\n      queryBuilder.append(first);\n    }\n else {\n      if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(first);\n      }\n else       if (pr.first == null && pr.last == null) {\n        if (!queryBuilder.toString().contains(fieldName + \":\")) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append('*');\n        }\n      }\n else       if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n      }\n else       if (pr.isLike) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n      }\n else {\n        throw new RuntimeException(\"[unexpected!] not handled case\");\n      }\n    }\n  }\n  queryBuilder.append(\" \");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 552,
                    "astHeight": 20
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 5681,
                        "startLineNumber": 122,
                        "startColumnNumber": 12,
                        "endLineNumber": 213,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (Filter.PropertyRestriction pr : propertyRestrictions) {\n  if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n    String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n    if (isSupportedHttpRequest(nativeQueryString)) {\n      String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n      if (!\"select\".equals(requestHandlerString)) {\n        if (requestHandlerString.charAt(0) != '/') {\n          requestHandlerString=\"/\" + requestHandlerString;\n        }\n        solrQuery.setRequestHandler(requestHandlerString);\n      }\n      String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n      for (      String param : parameterString.split(\"&\")) {\n        String[] kv=param.split(\"=\");\n        if (kv.length != 2) {\n          throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n        }\n else {\n          if (\"stream.body\".equals(kv[0])) {\n            kv[0]=\"q\";\n            String mltFlString=\"mlt.fl=\";\n            int mltFlIndex=parameterString.indexOf(mltFlString);\n            if (mltFlIndex > -1) {\n              int beginIndex=mltFlIndex + mltFlString.length();\n              int endIndex=parameterString.indexOf('&',beginIndex);\n              String fields;\n              if (endIndex > beginIndex) {\n                fields=parameterString.substring(beginIndex,endIndex);\n              }\n else {\n                fields=parameterString.substring(beginIndex);\n              }\n              kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n            }\n          }\n          solrQuery.setParam(kv[0],kv[1]);\n        }\n      }\n      return solrQuery;\n    }\n else {\n      queryBuilder.append(nativeQueryString);\n    }\n  }\n else {\n    if (pr.propertyName.contains(\"/\")) {\n      continue;\n    }\n    if (\"rep:excerpt\".equals(pr.propertyName)) {\n      continue;\n    }\n    String first=null;\n    if (pr.first != null) {\n      first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n    }\n    String last=null;\n    if (pr.last != null) {\n      last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n    }\n    String prField=configuration.getFieldForPropertyRestriction(pr);\n    CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n    if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n      queryBuilder.append(configuration.getPathField());\n      queryBuilder.append(':');\n      queryBuilder.append(first);\n    }\n else {\n      if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(first);\n      }\n else       if (pr.first == null && pr.last == null) {\n        if (!queryBuilder.toString().contains(fieldName + \":\")) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append('*');\n        }\n      }\n else       if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n      }\n else       if (pr.isLike) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n      }\n else {\n        throw new RuntimeException(\"[unexpected!] not handled case\");\n      }\n    }\n  }\n  queryBuilder.append(\" \");\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 560,
                    "astHeight": 21
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 5705,
                        "startLineNumber": 121,
                        "startColumnNumber": 77,
                        "endLineNumber": 214,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  for (  Filter.PropertyRestriction pr : propertyRestrictions) {\n    if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n      String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n      if (isSupportedHttpRequest(nativeQueryString)) {\n        String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n        if (!\"select\".equals(requestHandlerString)) {\n          if (requestHandlerString.charAt(0) != '/') {\n            requestHandlerString=\"/\" + requestHandlerString;\n          }\n          solrQuery.setRequestHandler(requestHandlerString);\n        }\n        String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n        for (        String param : parameterString.split(\"&\")) {\n          String[] kv=param.split(\"=\");\n          if (kv.length != 2) {\n            throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n          }\n else {\n            if (\"stream.body\".equals(kv[0])) {\n              kv[0]=\"q\";\n              String mltFlString=\"mlt.fl=\";\n              int mltFlIndex=parameterString.indexOf(mltFlString);\n              if (mltFlIndex > -1) {\n                int beginIndex=mltFlIndex + mltFlString.length();\n                int endIndex=parameterString.indexOf('&',beginIndex);\n                String fields;\n                if (endIndex > beginIndex) {\n                  fields=parameterString.substring(beginIndex,endIndex);\n                }\n else {\n                  fields=parameterString.substring(beginIndex);\n                }\n                kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n              }\n            }\n            solrQuery.setParam(kv[0],kv[1]);\n          }\n        }\n        return solrQuery;\n      }\n else {\n        queryBuilder.append(nativeQueryString);\n      }\n    }\n else {\n      if (pr.propertyName.contains(\"/\")) {\n        continue;\n      }\n      if (\"rep:excerpt\".equals(pr.propertyName)) {\n        continue;\n      }\n      String first=null;\n      if (pr.first != null) {\n        first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n      }\n      String last=null;\n      if (pr.last != null) {\n        last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n      }\n      String prField=configuration.getFieldForPropertyRestriction(pr);\n      CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n      if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n        queryBuilder.append(configuration.getPathField());\n        queryBuilder.append(':');\n        queryBuilder.append(first);\n      }\n else {\n        if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(first);\n        }\n else         if (pr.first == null && pr.last == null) {\n          if (!queryBuilder.toString().contains(fieldName + \":\")) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append('*');\n          }\n        }\n else         if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n        }\n else         if (pr.isLike) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n        }\n else {\n          throw new RuntimeException(\"[unexpected!] not handled case\");\n        }\n      }\n    }\n    queryBuilder.append(\" \");\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 561,
                    "astHeight": 22
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 5774,
                        "startLineNumber": 121,
                        "startColumnNumber": 8,
                        "endLineNumber": 214,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (propertyRestrictions != null && !propertyRestrictions.isEmpty()) {\n  for (  Filter.PropertyRestriction pr : propertyRestrictions) {\n    if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n      String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n      if (isSupportedHttpRequest(nativeQueryString)) {\n        String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n        if (!\"select\".equals(requestHandlerString)) {\n          if (requestHandlerString.charAt(0) != '/') {\n            requestHandlerString=\"/\" + requestHandlerString;\n          }\n          solrQuery.setRequestHandler(requestHandlerString);\n        }\n        String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n        for (        String param : parameterString.split(\"&\")) {\n          String[] kv=param.split(\"=\");\n          if (kv.length != 2) {\n            throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n          }\n else {\n            if (\"stream.body\".equals(kv[0])) {\n              kv[0]=\"q\";\n              String mltFlString=\"mlt.fl=\";\n              int mltFlIndex=parameterString.indexOf(mltFlString);\n              if (mltFlIndex > -1) {\n                int beginIndex=mltFlIndex + mltFlString.length();\n                int endIndex=parameterString.indexOf('&',beginIndex);\n                String fields;\n                if (endIndex > beginIndex) {\n                  fields=parameterString.substring(beginIndex,endIndex);\n                }\n else {\n                  fields=parameterString.substring(beginIndex);\n                }\n                kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n              }\n            }\n            solrQuery.setParam(kv[0],kv[1]);\n          }\n        }\n        return solrQuery;\n      }\n else {\n        queryBuilder.append(nativeQueryString);\n      }\n    }\n else {\n      if (pr.propertyName.contains(\"/\")) {\n        continue;\n      }\n      if (\"rep:excerpt\".equals(pr.propertyName)) {\n        continue;\n      }\n      String first=null;\n      if (pr.first != null) {\n        first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n      }\n      String last=null;\n      if (pr.last != null) {\n        last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n      }\n      String prField=configuration.getFieldForPropertyRestriction(pr);\n      CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n      if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n        queryBuilder.append(configuration.getPathField());\n        queryBuilder.append(':');\n        queryBuilder.append(first);\n      }\n else {\n        if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(first);\n        }\n else         if (pr.first == null && pr.last == null) {\n          if (!queryBuilder.toString().contains(fieldName + \":\")) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append('*');\n          }\n        }\n else         if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n        }\n else         if (pr.isLike) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n        }\n else {\n          throw new RuntimeException(\"[unexpected!] not handled case\");\n        }\n      }\n    }\n    queryBuilder.append(\" \");\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 570,
                    "astHeight": 23
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 7985,
                        "startLineNumber": 103,
                        "startColumnNumber": 46,
                        "endLineNumber": 255,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  SolrQuery solrQuery=new SolrQuery();\n  setDefaults(solrQuery);\n  StringBuilder queryBuilder=new StringBuilder();\n  if (filter.getFullTextConstraint() != null) {\n    queryBuilder.append(getFullTextQuery(filter.getFullTextConstraint()));\n    queryBuilder.append(' ');\n  }\n else   if (filter.getFulltextConditions() != null) {\n    Collection<String> fulltextConditions=filter.getFulltextConditions();\n    for (    String fulltextCondition : fulltextConditions) {\n      queryBuilder.append(fulltextCondition).append(\" \");\n    }\n  }\n  Collection<Filter.PropertyRestriction> propertyRestrictions=filter.getPropertyRestrictions();\n  if (propertyRestrictions != null && !propertyRestrictions.isEmpty()) {\n    for (    Filter.PropertyRestriction pr : propertyRestrictions) {\n      if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n        String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n        if (isSupportedHttpRequest(nativeQueryString)) {\n          String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n          if (!\"select\".equals(requestHandlerString)) {\n            if (requestHandlerString.charAt(0) != '/') {\n              requestHandlerString=\"/\" + requestHandlerString;\n            }\n            solrQuery.setRequestHandler(requestHandlerString);\n          }\n          String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n          for (          String param : parameterString.split(\"&\")) {\n            String[] kv=param.split(\"=\");\n            if (kv.length != 2) {\n              throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n            }\n else {\n              if (\"stream.body\".equals(kv[0])) {\n                kv[0]=\"q\";\n                String mltFlString=\"mlt.fl=\";\n                int mltFlIndex=parameterString.indexOf(mltFlString);\n                if (mltFlIndex > -1) {\n                  int beginIndex=mltFlIndex + mltFlString.length();\n                  int endIndex=parameterString.indexOf('&',beginIndex);\n                  String fields;\n                  if (endIndex > beginIndex) {\n                    fields=parameterString.substring(beginIndex,endIndex);\n                  }\n else {\n                    fields=parameterString.substring(beginIndex);\n                  }\n                  kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n                }\n              }\n              solrQuery.setParam(kv[0],kv[1]);\n            }\n          }\n          return solrQuery;\n        }\n else {\n          queryBuilder.append(nativeQueryString);\n        }\n      }\n else {\n        if (pr.propertyName.contains(\"/\")) {\n          continue;\n        }\n        if (\"rep:excerpt\".equals(pr.propertyName)) {\n          continue;\n        }\n        String first=null;\n        if (pr.first != null) {\n          first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n        }\n        String last=null;\n        if (pr.last != null) {\n          last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n        }\n        String prField=configuration.getFieldForPropertyRestriction(pr);\n        CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n        if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n          queryBuilder.append(configuration.getPathField());\n          queryBuilder.append(':');\n          queryBuilder.append(first);\n        }\n else {\n          if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(first);\n          }\n else           if (pr.first == null && pr.last == null) {\n            if (!queryBuilder.toString().contains(fieldName + \":\")) {\n              queryBuilder.append(fieldName).append(':');\n              queryBuilder.append('*');\n            }\n          }\n else           if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n          }\n else           if (pr.isLike) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n          }\n else {\n            throw new RuntimeException(\"[unexpected!] not handled case\");\n          }\n        }\n      }\n      queryBuilder.append(\" \");\n    }\n  }\n  String[] pts=filter.getPrimaryTypes().toArray(new String[filter.getPrimaryTypes().size()]);\n  for (int i=0; i < pts.length; i++) {\n    String pt=pts[i];\n    if (i == 0) {\n      queryBuilder.append(\"(\");\n    }\n    if (i > 0 && i < pts.length) {\n      queryBuilder.append(\"OR \");\n    }\n    queryBuilder.append(\"jcr\\\\:primaryType\").append(':').append(partialEscape(pt)).append(\" \");\n    if (i == pts.length - 1) {\n      queryBuilder.append(\")\");\n      queryBuilder.append(' ');\n    }\n  }\n  Filter.PathRestriction pathRestriction=filter.getPathRestriction();\n  if (pathRestriction != null) {\n    String path=purgePath(filter);\n    String fieldName=configuration.getFieldForPathRestriction(pathRestriction);\n    if (fieldName != null) {\n      queryBuilder.append(fieldName);\n      queryBuilder.append(':');\n      queryBuilder.append(path);\n    }\n  }\n  if (queryBuilder.length() == 0) {\n    queryBuilder.append(\"*:*\");\n  }\n  String escapedQuery=queryBuilder.toString();\n  solrQuery.setQuery(escapedQuery);\n  if (log.isDebugEnabled()) {\n    log.debug(\"JCR query {} has been converted to Solr query {}\",filter.getQueryStatement(),solrQuery.toString());\n  }\n  return solrQuery;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 858,
                    "astHeight": 24
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8027,
                        "startLineNumber": 103,
                        "startColumnNumber": 4,
                        "endLineNumber": 255,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private SolrQuery getQuery(Filter filter){\n  SolrQuery solrQuery=new SolrQuery();\n  setDefaults(solrQuery);\n  StringBuilder queryBuilder=new StringBuilder();\n  if (filter.getFullTextConstraint() != null) {\n    queryBuilder.append(getFullTextQuery(filter.getFullTextConstraint()));\n    queryBuilder.append(' ');\n  }\n else   if (filter.getFulltextConditions() != null) {\n    Collection<String> fulltextConditions=filter.getFulltextConditions();\n    for (    String fulltextCondition : fulltextConditions) {\n      queryBuilder.append(fulltextCondition).append(\" \");\n    }\n  }\n  Collection<Filter.PropertyRestriction> propertyRestrictions=filter.getPropertyRestrictions();\n  if (propertyRestrictions != null && !propertyRestrictions.isEmpty()) {\n    for (    Filter.PropertyRestriction pr : propertyRestrictions) {\n      if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n        String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n        if (isSupportedHttpRequest(nativeQueryString)) {\n          String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n          if (!\"select\".equals(requestHandlerString)) {\n            if (requestHandlerString.charAt(0) != '/') {\n              requestHandlerString=\"/\" + requestHandlerString;\n            }\n            solrQuery.setRequestHandler(requestHandlerString);\n          }\n          String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n          for (          String param : parameterString.split(\"&\")) {\n            String[] kv=param.split(\"=\");\n            if (kv.length != 2) {\n              throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n            }\n else {\n              if (\"stream.body\".equals(kv[0])) {\n                kv[0]=\"q\";\n                String mltFlString=\"mlt.fl=\";\n                int mltFlIndex=parameterString.indexOf(mltFlString);\n                if (mltFlIndex > -1) {\n                  int beginIndex=mltFlIndex + mltFlString.length();\n                  int endIndex=parameterString.indexOf('&',beginIndex);\n                  String fields;\n                  if (endIndex > beginIndex) {\n                    fields=parameterString.substring(beginIndex,endIndex);\n                  }\n else {\n                    fields=parameterString.substring(beginIndex);\n                  }\n                  kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n                }\n              }\n              solrQuery.setParam(kv[0],kv[1]);\n            }\n          }\n          return solrQuery;\n        }\n else {\n          queryBuilder.append(nativeQueryString);\n        }\n      }\n else {\n        if (pr.propertyName.contains(\"/\")) {\n          continue;\n        }\n        if (\"rep:excerpt\".equals(pr.propertyName)) {\n          continue;\n        }\n        String first=null;\n        if (pr.first != null) {\n          first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n        }\n        String last=null;\n        if (pr.last != null) {\n          last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n        }\n        String prField=configuration.getFieldForPropertyRestriction(pr);\n        CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n        if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n          queryBuilder.append(configuration.getPathField());\n          queryBuilder.append(':');\n          queryBuilder.append(first);\n        }\n else {\n          if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(first);\n          }\n else           if (pr.first == null && pr.last == null) {\n            if (!queryBuilder.toString().contains(fieldName + \":\")) {\n              queryBuilder.append(fieldName).append(':');\n              queryBuilder.append('*');\n            }\n          }\n else           if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n          }\n else           if (pr.isLike) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n          }\n else {\n            throw new RuntimeException(\"[unexpected!] not handled case\");\n          }\n        }\n      }\n      queryBuilder.append(\" \");\n    }\n  }\n  String[] pts=filter.getPrimaryTypes().toArray(new String[filter.getPrimaryTypes().size()]);\n  for (int i=0; i < pts.length; i++) {\n    String pt=pts[i];\n    if (i == 0) {\n      queryBuilder.append(\"(\");\n    }\n    if (i > 0 && i < pts.length) {\n      queryBuilder.append(\"OR \");\n    }\n    queryBuilder.append(\"jcr\\\\:primaryType\").append(':').append(partialEscape(pt)).append(\" \");\n    if (i == pts.length - 1) {\n      queryBuilder.append(\")\");\n      queryBuilder.append(' ');\n    }\n  }\n  Filter.PathRestriction pathRestriction=filter.getPathRestriction();\n  if (pathRestriction != null) {\n    String path=purgePath(filter);\n    String fieldName=configuration.getFieldForPathRestriction(pathRestriction);\n    if (fieldName != null) {\n      queryBuilder.append(fieldName);\n      queryBuilder.append(':');\n      queryBuilder.append(path);\n    }\n  }\n  if (queryBuilder.length() == 0) {\n    queryBuilder.append(\"*:*\");\n  }\n  String escapedQuery=queryBuilder.toString();\n  solrQuery.setQuery(escapedQuery);\n  if (log.isDebugEnabled()) {\n    log.debug(\"JCR query {} has been converted to Solr query {}\",filter.getQueryStatement(),solrQuery.toString());\n  }\n  return solrQuery;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 867,
                    "astHeight": 25
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 35,
                    "startLineNumber": 194,
                    "startColumnNumber": 35,
                    "endLineNumber": 194,
                    "endColumnNumber": 70
                },
                "nodeContext": "pr.first == null && pr.last == null",
                "nodeType": "InfixExpression",
                "astNodeNumber": 11,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "null"
        },
        {
            "nodeContext": "null",
            "nodeType": "NullLiteral",
            "nodePosition": {
                "charLength": 4,
                "startLineNumber": 194,
                "startColumnNumber": 66,
                "endLineNumber": 194,
                "endColumnNumber": 70
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 15,
                        "startLineNumber": 194,
                        "startColumnNumber": 55,
                        "endLineNumber": 194,
                        "endColumnNumber": 70
                    },
                    "nodeContext": "pr.last == null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 35,
                        "startLineNumber": 194,
                        "startColumnNumber": 35,
                        "endLineNumber": 194,
                        "endColumnNumber": 70
                    },
                    "nodeContext": "pr.first == null && pr.last == null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1260,
                        "startLineNumber": 194,
                        "startColumnNumber": 31,
                        "endLineNumber": 209,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "if (pr.first == null && pr.last == null) {\n  if (!queryBuilder.toString().contains(fieldName + \":\")) {\n    queryBuilder.append(fieldName).append(':');\n    queryBuilder.append('*');\n  }\n}\n else if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n  queryBuilder.append(fieldName).append(':');\n  queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n}\n else if (pr.isLike) {\n  queryBuilder.append(fieldName).append(':');\n  queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n}\n else {\n  throw new RuntimeException(\"[unexpected!] not handled case\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 142,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1490,
                        "startLineNumber": 191,
                        "startColumnNumber": 24,
                        "endLineNumber": 209,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n  queryBuilder.append(fieldName).append(':');\n  queryBuilder.append(first);\n}\n else if (pr.first == null && pr.last == null) {\n  if (!queryBuilder.toString().contains(fieldName + \":\")) {\n    queryBuilder.append(fieldName).append(':');\n    queryBuilder.append('*');\n  }\n}\n else if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n  queryBuilder.append(fieldName).append(':');\n  queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n}\n else if (pr.isLike) {\n  queryBuilder.append(fieldName).append(':');\n  queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n}\n else {\n  throw new RuntimeException(\"[unexpected!] not handled case\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 177,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1538,
                        "startLineNumber": 190,
                        "startColumnNumber": 27,
                        "endLineNumber": 210,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n    queryBuilder.append(fieldName).append(':');\n    queryBuilder.append(first);\n  }\n else   if (pr.first == null && pr.last == null) {\n    if (!queryBuilder.toString().contains(fieldName + \":\")) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append('*');\n    }\n  }\n else   if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n    queryBuilder.append(fieldName).append(':');\n    queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n  }\n else   if (pr.isLike) {\n    queryBuilder.append(fieldName).append(':');\n    queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n  }\n else {\n    throw new RuntimeException(\"[unexpected!] not handled case\");\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 178,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1791,
                        "startLineNumber": 186,
                        "startColumnNumber": 20,
                        "endLineNumber": 210,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n  queryBuilder.append(configuration.getPathField());\n  queryBuilder.append(':');\n  queryBuilder.append(first);\n}\n else {\n  if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n    queryBuilder.append(fieldName).append(':');\n    queryBuilder.append(first);\n  }\n else   if (pr.first == null && pr.last == null) {\n    if (!queryBuilder.toString().contains(fieldName + \":\")) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append('*');\n    }\n  }\n else   if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n    queryBuilder.append(fieldName).append(':');\n    queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n  }\n else   if (pr.isLike) {\n    queryBuilder.append(fieldName).append(':');\n    queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n  }\n else {\n    throw new RuntimeException(\"[unexpected!] not handled case\");\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 203,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 2798,
                        "startLineNumber": 164,
                        "startColumnNumber": 23,
                        "endLineNumber": 211,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  if (pr.propertyName.contains(\"/\")) {\n    continue;\n  }\n  if (\"rep:excerpt\".equals(pr.propertyName)) {\n    continue;\n  }\n  String first=null;\n  if (pr.first != null) {\n    first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n  }\n  String last=null;\n  if (pr.last != null) {\n    last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n  }\n  String prField=configuration.getFieldForPropertyRestriction(pr);\n  CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n  if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n    queryBuilder.append(configuration.getPathField());\n    queryBuilder.append(':');\n    queryBuilder.append(first);\n  }\n else {\n    if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(first);\n    }\n else     if (pr.first == null && pr.last == null) {\n      if (!queryBuilder.toString().contains(fieldName + \":\")) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append('*');\n      }\n    }\n else     if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n    }\n else     if (pr.isLike) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n    }\n else {\n      throw new RuntimeException(\"[unexpected!] not handled case\");\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 312,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 5508,
                        "startLineNumber": 124,
                        "startColumnNumber": 16,
                        "endLineNumber": 211,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n  String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n  if (isSupportedHttpRequest(nativeQueryString)) {\n    String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n    if (!\"select\".equals(requestHandlerString)) {\n      if (requestHandlerString.charAt(0) != '/') {\n        requestHandlerString=\"/\" + requestHandlerString;\n      }\n      solrQuery.setRequestHandler(requestHandlerString);\n    }\n    String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n    for (    String param : parameterString.split(\"&\")) {\n      String[] kv=param.split(\"=\");\n      if (kv.length != 2) {\n        throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n      }\n else {\n        if (\"stream.body\".equals(kv[0])) {\n          kv[0]=\"q\";\n          String mltFlString=\"mlt.fl=\";\n          int mltFlIndex=parameterString.indexOf(mltFlString);\n          if (mltFlIndex > -1) {\n            int beginIndex=mltFlIndex + mltFlString.length();\n            int endIndex=parameterString.indexOf('&',beginIndex);\n            String fields;\n            if (endIndex > beginIndex) {\n              fields=parameterString.substring(beginIndex,endIndex);\n            }\n else {\n              fields=parameterString.substring(beginIndex);\n            }\n            kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n          }\n        }\n        solrQuery.setParam(kv[0],kv[1]);\n      }\n    }\n    return solrQuery;\n  }\n else {\n    queryBuilder.append(nativeQueryString);\n  }\n}\n else {\n  if (pr.propertyName.contains(\"/\")) {\n    continue;\n  }\n  if (\"rep:excerpt\".equals(pr.propertyName)) {\n    continue;\n  }\n  String first=null;\n  if (pr.first != null) {\n    first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n  }\n  String last=null;\n  if (pr.last != null) {\n    last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n  }\n  String prField=configuration.getFieldForPropertyRestriction(pr);\n  CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n  if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n    queryBuilder.append(configuration.getPathField());\n    queryBuilder.append(':');\n    queryBuilder.append(first);\n  }\n else {\n    if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(first);\n    }\n else     if (pr.first == null && pr.last == null) {\n      if (!queryBuilder.toString().contains(fieldName + \":\")) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append('*');\n      }\n    }\n else     if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n    }\n else     if (pr.isLike) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n    }\n else {\n      throw new RuntimeException(\"[unexpected!] not handled case\");\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 546,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 5622,
                        "startLineNumber": 122,
                        "startColumnNumber": 71,
                        "endLineNumber": 213,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n    String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n    if (isSupportedHttpRequest(nativeQueryString)) {\n      String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n      if (!\"select\".equals(requestHandlerString)) {\n        if (requestHandlerString.charAt(0) != '/') {\n          requestHandlerString=\"/\" + requestHandlerString;\n        }\n        solrQuery.setRequestHandler(requestHandlerString);\n      }\n      String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n      for (      String param : parameterString.split(\"&\")) {\n        String[] kv=param.split(\"=\");\n        if (kv.length != 2) {\n          throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n        }\n else {\n          if (\"stream.body\".equals(kv[0])) {\n            kv[0]=\"q\";\n            String mltFlString=\"mlt.fl=\";\n            int mltFlIndex=parameterString.indexOf(mltFlString);\n            if (mltFlIndex > -1) {\n              int beginIndex=mltFlIndex + mltFlString.length();\n              int endIndex=parameterString.indexOf('&',beginIndex);\n              String fields;\n              if (endIndex > beginIndex) {\n                fields=parameterString.substring(beginIndex,endIndex);\n              }\n else {\n                fields=parameterString.substring(beginIndex);\n              }\n              kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n            }\n          }\n          solrQuery.setParam(kv[0],kv[1]);\n        }\n      }\n      return solrQuery;\n    }\n else {\n      queryBuilder.append(nativeQueryString);\n    }\n  }\n else {\n    if (pr.propertyName.contains(\"/\")) {\n      continue;\n    }\n    if (\"rep:excerpt\".equals(pr.propertyName)) {\n      continue;\n    }\n    String first=null;\n    if (pr.first != null) {\n      first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n    }\n    String last=null;\n    if (pr.last != null) {\n      last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n    }\n    String prField=configuration.getFieldForPropertyRestriction(pr);\n    CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n    if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n      queryBuilder.append(configuration.getPathField());\n      queryBuilder.append(':');\n      queryBuilder.append(first);\n    }\n else {\n      if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(first);\n      }\n else       if (pr.first == null && pr.last == null) {\n        if (!queryBuilder.toString().contains(fieldName + \":\")) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append('*');\n        }\n      }\n else       if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n      }\n else       if (pr.isLike) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n      }\n else {\n        throw new RuntimeException(\"[unexpected!] not handled case\");\n      }\n    }\n  }\n  queryBuilder.append(\" \");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 552,
                    "astHeight": 20
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 5681,
                        "startLineNumber": 122,
                        "startColumnNumber": 12,
                        "endLineNumber": 213,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (Filter.PropertyRestriction pr : propertyRestrictions) {\n  if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n    String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n    if (isSupportedHttpRequest(nativeQueryString)) {\n      String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n      if (!\"select\".equals(requestHandlerString)) {\n        if (requestHandlerString.charAt(0) != '/') {\n          requestHandlerString=\"/\" + requestHandlerString;\n        }\n        solrQuery.setRequestHandler(requestHandlerString);\n      }\n      String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n      for (      String param : parameterString.split(\"&\")) {\n        String[] kv=param.split(\"=\");\n        if (kv.length != 2) {\n          throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n        }\n else {\n          if (\"stream.body\".equals(kv[0])) {\n            kv[0]=\"q\";\n            String mltFlString=\"mlt.fl=\";\n            int mltFlIndex=parameterString.indexOf(mltFlString);\n            if (mltFlIndex > -1) {\n              int beginIndex=mltFlIndex + mltFlString.length();\n              int endIndex=parameterString.indexOf('&',beginIndex);\n              String fields;\n              if (endIndex > beginIndex) {\n                fields=parameterString.substring(beginIndex,endIndex);\n              }\n else {\n                fields=parameterString.substring(beginIndex);\n              }\n              kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n            }\n          }\n          solrQuery.setParam(kv[0],kv[1]);\n        }\n      }\n      return solrQuery;\n    }\n else {\n      queryBuilder.append(nativeQueryString);\n    }\n  }\n else {\n    if (pr.propertyName.contains(\"/\")) {\n      continue;\n    }\n    if (\"rep:excerpt\".equals(pr.propertyName)) {\n      continue;\n    }\n    String first=null;\n    if (pr.first != null) {\n      first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n    }\n    String last=null;\n    if (pr.last != null) {\n      last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n    }\n    String prField=configuration.getFieldForPropertyRestriction(pr);\n    CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n    if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n      queryBuilder.append(configuration.getPathField());\n      queryBuilder.append(':');\n      queryBuilder.append(first);\n    }\n else {\n      if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(first);\n      }\n else       if (pr.first == null && pr.last == null) {\n        if (!queryBuilder.toString().contains(fieldName + \":\")) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append('*');\n        }\n      }\n else       if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n      }\n else       if (pr.isLike) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n      }\n else {\n        throw new RuntimeException(\"[unexpected!] not handled case\");\n      }\n    }\n  }\n  queryBuilder.append(\" \");\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 560,
                    "astHeight": 21
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 5705,
                        "startLineNumber": 121,
                        "startColumnNumber": 77,
                        "endLineNumber": 214,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  for (  Filter.PropertyRestriction pr : propertyRestrictions) {\n    if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n      String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n      if (isSupportedHttpRequest(nativeQueryString)) {\n        String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n        if (!\"select\".equals(requestHandlerString)) {\n          if (requestHandlerString.charAt(0) != '/') {\n            requestHandlerString=\"/\" + requestHandlerString;\n          }\n          solrQuery.setRequestHandler(requestHandlerString);\n        }\n        String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n        for (        String param : parameterString.split(\"&\")) {\n          String[] kv=param.split(\"=\");\n          if (kv.length != 2) {\n            throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n          }\n else {\n            if (\"stream.body\".equals(kv[0])) {\n              kv[0]=\"q\";\n              String mltFlString=\"mlt.fl=\";\n              int mltFlIndex=parameterString.indexOf(mltFlString);\n              if (mltFlIndex > -1) {\n                int beginIndex=mltFlIndex + mltFlString.length();\n                int endIndex=parameterString.indexOf('&',beginIndex);\n                String fields;\n                if (endIndex > beginIndex) {\n                  fields=parameterString.substring(beginIndex,endIndex);\n                }\n else {\n                  fields=parameterString.substring(beginIndex);\n                }\n                kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n              }\n            }\n            solrQuery.setParam(kv[0],kv[1]);\n          }\n        }\n        return solrQuery;\n      }\n else {\n        queryBuilder.append(nativeQueryString);\n      }\n    }\n else {\n      if (pr.propertyName.contains(\"/\")) {\n        continue;\n      }\n      if (\"rep:excerpt\".equals(pr.propertyName)) {\n        continue;\n      }\n      String first=null;\n      if (pr.first != null) {\n        first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n      }\n      String last=null;\n      if (pr.last != null) {\n        last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n      }\n      String prField=configuration.getFieldForPropertyRestriction(pr);\n      CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n      if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n        queryBuilder.append(configuration.getPathField());\n        queryBuilder.append(':');\n        queryBuilder.append(first);\n      }\n else {\n        if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(first);\n        }\n else         if (pr.first == null && pr.last == null) {\n          if (!queryBuilder.toString().contains(fieldName + \":\")) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append('*');\n          }\n        }\n else         if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n        }\n else         if (pr.isLike) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n        }\n else {\n          throw new RuntimeException(\"[unexpected!] not handled case\");\n        }\n      }\n    }\n    queryBuilder.append(\" \");\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 561,
                    "astHeight": 22
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 5774,
                        "startLineNumber": 121,
                        "startColumnNumber": 8,
                        "endLineNumber": 214,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (propertyRestrictions != null && !propertyRestrictions.isEmpty()) {\n  for (  Filter.PropertyRestriction pr : propertyRestrictions) {\n    if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n      String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n      if (isSupportedHttpRequest(nativeQueryString)) {\n        String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n        if (!\"select\".equals(requestHandlerString)) {\n          if (requestHandlerString.charAt(0) != '/') {\n            requestHandlerString=\"/\" + requestHandlerString;\n          }\n          solrQuery.setRequestHandler(requestHandlerString);\n        }\n        String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n        for (        String param : parameterString.split(\"&\")) {\n          String[] kv=param.split(\"=\");\n          if (kv.length != 2) {\n            throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n          }\n else {\n            if (\"stream.body\".equals(kv[0])) {\n              kv[0]=\"q\";\n              String mltFlString=\"mlt.fl=\";\n              int mltFlIndex=parameterString.indexOf(mltFlString);\n              if (mltFlIndex > -1) {\n                int beginIndex=mltFlIndex + mltFlString.length();\n                int endIndex=parameterString.indexOf('&',beginIndex);\n                String fields;\n                if (endIndex > beginIndex) {\n                  fields=parameterString.substring(beginIndex,endIndex);\n                }\n else {\n                  fields=parameterString.substring(beginIndex);\n                }\n                kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n              }\n            }\n            solrQuery.setParam(kv[0],kv[1]);\n          }\n        }\n        return solrQuery;\n      }\n else {\n        queryBuilder.append(nativeQueryString);\n      }\n    }\n else {\n      if (pr.propertyName.contains(\"/\")) {\n        continue;\n      }\n      if (\"rep:excerpt\".equals(pr.propertyName)) {\n        continue;\n      }\n      String first=null;\n      if (pr.first != null) {\n        first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n      }\n      String last=null;\n      if (pr.last != null) {\n        last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n      }\n      String prField=configuration.getFieldForPropertyRestriction(pr);\n      CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n      if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n        queryBuilder.append(configuration.getPathField());\n        queryBuilder.append(':');\n        queryBuilder.append(first);\n      }\n else {\n        if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(first);\n        }\n else         if (pr.first == null && pr.last == null) {\n          if (!queryBuilder.toString().contains(fieldName + \":\")) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append('*');\n          }\n        }\n else         if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n        }\n else         if (pr.isLike) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n        }\n else {\n          throw new RuntimeException(\"[unexpected!] not handled case\");\n        }\n      }\n    }\n    queryBuilder.append(\" \");\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 570,
                    "astHeight": 23
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 7985,
                        "startLineNumber": 103,
                        "startColumnNumber": 46,
                        "endLineNumber": 255,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  SolrQuery solrQuery=new SolrQuery();\n  setDefaults(solrQuery);\n  StringBuilder queryBuilder=new StringBuilder();\n  if (filter.getFullTextConstraint() != null) {\n    queryBuilder.append(getFullTextQuery(filter.getFullTextConstraint()));\n    queryBuilder.append(' ');\n  }\n else   if (filter.getFulltextConditions() != null) {\n    Collection<String> fulltextConditions=filter.getFulltextConditions();\n    for (    String fulltextCondition : fulltextConditions) {\n      queryBuilder.append(fulltextCondition).append(\" \");\n    }\n  }\n  Collection<Filter.PropertyRestriction> propertyRestrictions=filter.getPropertyRestrictions();\n  if (propertyRestrictions != null && !propertyRestrictions.isEmpty()) {\n    for (    Filter.PropertyRestriction pr : propertyRestrictions) {\n      if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n        String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n        if (isSupportedHttpRequest(nativeQueryString)) {\n          String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n          if (!\"select\".equals(requestHandlerString)) {\n            if (requestHandlerString.charAt(0) != '/') {\n              requestHandlerString=\"/\" + requestHandlerString;\n            }\n            solrQuery.setRequestHandler(requestHandlerString);\n          }\n          String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n          for (          String param : parameterString.split(\"&\")) {\n            String[] kv=param.split(\"=\");\n            if (kv.length != 2) {\n              throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n            }\n else {\n              if (\"stream.body\".equals(kv[0])) {\n                kv[0]=\"q\";\n                String mltFlString=\"mlt.fl=\";\n                int mltFlIndex=parameterString.indexOf(mltFlString);\n                if (mltFlIndex > -1) {\n                  int beginIndex=mltFlIndex + mltFlString.length();\n                  int endIndex=parameterString.indexOf('&',beginIndex);\n                  String fields;\n                  if (endIndex > beginIndex) {\n                    fields=parameterString.substring(beginIndex,endIndex);\n                  }\n else {\n                    fields=parameterString.substring(beginIndex);\n                  }\n                  kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n                }\n              }\n              solrQuery.setParam(kv[0],kv[1]);\n            }\n          }\n          return solrQuery;\n        }\n else {\n          queryBuilder.append(nativeQueryString);\n        }\n      }\n else {\n        if (pr.propertyName.contains(\"/\")) {\n          continue;\n        }\n        if (\"rep:excerpt\".equals(pr.propertyName)) {\n          continue;\n        }\n        String first=null;\n        if (pr.first != null) {\n          first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n        }\n        String last=null;\n        if (pr.last != null) {\n          last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n        }\n        String prField=configuration.getFieldForPropertyRestriction(pr);\n        CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n        if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n          queryBuilder.append(configuration.getPathField());\n          queryBuilder.append(':');\n          queryBuilder.append(first);\n        }\n else {\n          if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(first);\n          }\n else           if (pr.first == null && pr.last == null) {\n            if (!queryBuilder.toString().contains(fieldName + \":\")) {\n              queryBuilder.append(fieldName).append(':');\n              queryBuilder.append('*');\n            }\n          }\n else           if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n          }\n else           if (pr.isLike) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n          }\n else {\n            throw new RuntimeException(\"[unexpected!] not handled case\");\n          }\n        }\n      }\n      queryBuilder.append(\" \");\n    }\n  }\n  String[] pts=filter.getPrimaryTypes().toArray(new String[filter.getPrimaryTypes().size()]);\n  for (int i=0; i < pts.length; i++) {\n    String pt=pts[i];\n    if (i == 0) {\n      queryBuilder.append(\"(\");\n    }\n    if (i > 0 && i < pts.length) {\n      queryBuilder.append(\"OR \");\n    }\n    queryBuilder.append(\"jcr\\\\:primaryType\").append(':').append(partialEscape(pt)).append(\" \");\n    if (i == pts.length - 1) {\n      queryBuilder.append(\")\");\n      queryBuilder.append(' ');\n    }\n  }\n  Filter.PathRestriction pathRestriction=filter.getPathRestriction();\n  if (pathRestriction != null) {\n    String path=purgePath(filter);\n    String fieldName=configuration.getFieldForPathRestriction(pathRestriction);\n    if (fieldName != null) {\n      queryBuilder.append(fieldName);\n      queryBuilder.append(':');\n      queryBuilder.append(path);\n    }\n  }\n  if (queryBuilder.length() == 0) {\n    queryBuilder.append(\"*:*\");\n  }\n  String escapedQuery=queryBuilder.toString();\n  solrQuery.setQuery(escapedQuery);\n  if (log.isDebugEnabled()) {\n    log.debug(\"JCR query {} has been converted to Solr query {}\",filter.getQueryStatement(),solrQuery.toString());\n  }\n  return solrQuery;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 858,
                    "astHeight": 24
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8027,
                        "startLineNumber": 103,
                        "startColumnNumber": 4,
                        "endLineNumber": 255,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private SolrQuery getQuery(Filter filter){\n  SolrQuery solrQuery=new SolrQuery();\n  setDefaults(solrQuery);\n  StringBuilder queryBuilder=new StringBuilder();\n  if (filter.getFullTextConstraint() != null) {\n    queryBuilder.append(getFullTextQuery(filter.getFullTextConstraint()));\n    queryBuilder.append(' ');\n  }\n else   if (filter.getFulltextConditions() != null) {\n    Collection<String> fulltextConditions=filter.getFulltextConditions();\n    for (    String fulltextCondition : fulltextConditions) {\n      queryBuilder.append(fulltextCondition).append(\" \");\n    }\n  }\n  Collection<Filter.PropertyRestriction> propertyRestrictions=filter.getPropertyRestrictions();\n  if (propertyRestrictions != null && !propertyRestrictions.isEmpty()) {\n    for (    Filter.PropertyRestriction pr : propertyRestrictions) {\n      if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n        String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n        if (isSupportedHttpRequest(nativeQueryString)) {\n          String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n          if (!\"select\".equals(requestHandlerString)) {\n            if (requestHandlerString.charAt(0) != '/') {\n              requestHandlerString=\"/\" + requestHandlerString;\n            }\n            solrQuery.setRequestHandler(requestHandlerString);\n          }\n          String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n          for (          String param : parameterString.split(\"&\")) {\n            String[] kv=param.split(\"=\");\n            if (kv.length != 2) {\n              throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n            }\n else {\n              if (\"stream.body\".equals(kv[0])) {\n                kv[0]=\"q\";\n                String mltFlString=\"mlt.fl=\";\n                int mltFlIndex=parameterString.indexOf(mltFlString);\n                if (mltFlIndex > -1) {\n                  int beginIndex=mltFlIndex + mltFlString.length();\n                  int endIndex=parameterString.indexOf('&',beginIndex);\n                  String fields;\n                  if (endIndex > beginIndex) {\n                    fields=parameterString.substring(beginIndex,endIndex);\n                  }\n else {\n                    fields=parameterString.substring(beginIndex);\n                  }\n                  kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n                }\n              }\n              solrQuery.setParam(kv[0],kv[1]);\n            }\n          }\n          return solrQuery;\n        }\n else {\n          queryBuilder.append(nativeQueryString);\n        }\n      }\n else {\n        if (pr.propertyName.contains(\"/\")) {\n          continue;\n        }\n        if (\"rep:excerpt\".equals(pr.propertyName)) {\n          continue;\n        }\n        String first=null;\n        if (pr.first != null) {\n          first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n        }\n        String last=null;\n        if (pr.last != null) {\n          last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n        }\n        String prField=configuration.getFieldForPropertyRestriction(pr);\n        CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n        if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n          queryBuilder.append(configuration.getPathField());\n          queryBuilder.append(':');\n          queryBuilder.append(first);\n        }\n else {\n          if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(first);\n          }\n else           if (pr.first == null && pr.last == null) {\n            if (!queryBuilder.toString().contains(fieldName + \":\")) {\n              queryBuilder.append(fieldName).append(':');\n              queryBuilder.append('*');\n            }\n          }\n else           if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n          }\n else           if (pr.isLike) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n          }\n else {\n            throw new RuntimeException(\"[unexpected!] not handled case\");\n          }\n        }\n      }\n      queryBuilder.append(\" \");\n    }\n  }\n  String[] pts=filter.getPrimaryTypes().toArray(new String[filter.getPrimaryTypes().size()]);\n  for (int i=0; i < pts.length; i++) {\n    String pt=pts[i];\n    if (i == 0) {\n      queryBuilder.append(\"(\");\n    }\n    if (i > 0 && i < pts.length) {\n      queryBuilder.append(\"OR \");\n    }\n    queryBuilder.append(\"jcr\\\\:primaryType\").append(':').append(partialEscape(pt)).append(\" \");\n    if (i == pts.length - 1) {\n      queryBuilder.append(\")\");\n      queryBuilder.append(' ');\n    }\n  }\n  Filter.PathRestriction pathRestriction=filter.getPathRestriction();\n  if (pathRestriction != null) {\n    String path=purgePath(filter);\n    String fieldName=configuration.getFieldForPathRestriction(pathRestriction);\n    if (fieldName != null) {\n      queryBuilder.append(fieldName);\n      queryBuilder.append(':');\n      queryBuilder.append(path);\n    }\n  }\n  if (queryBuilder.length() == 0) {\n    queryBuilder.append(\"*:*\");\n  }\n  String escapedQuery=queryBuilder.toString();\n  solrQuery.setQuery(escapedQuery);\n  if (log.isDebugEnabled()) {\n    log.debug(\"JCR query {} has been converted to Solr query {}\",filter.getQueryStatement(),solrQuery.toString());\n  }\n  return solrQuery;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 867,
                    "astHeight": 25
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 35,
                    "startLineNumber": 194,
                    "startColumnNumber": 35,
                    "endLineNumber": 194,
                    "endColumnNumber": 70
                },
                "nodeContext": "pr.first == null && pr.last == null",
                "nodeType": "InfixExpression",
                "astNodeNumber": 11,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "null"
        },
        {
            "nodeContext": "null",
            "nodeType": "NullLiteral",
            "nodePosition": {
                "charLength": 4,
                "startLineNumber": 199,
                "startColumnNumber": 48,
                "endLineNumber": 199,
                "endColumnNumber": 52
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 16,
                        "startLineNumber": 199,
                        "startColumnNumber": 36,
                        "endLineNumber": 199,
                        "endColumnNumber": 52
                    },
                    "nodeContext": "pr.first != null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
                    "nodePosition": {
                        "charLength": 35,
                        "startLineNumber": 199,
                        "startColumnNumber": 36,
                        "endLineNumber": 199,
                        "endColumnNumber": 71
                    },
                    "nodeContext": "pr.first != null && pr.last == null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 37,
                        "startLineNumber": 199,
                        "startColumnNumber": 35,
                        "endLineNumber": 199,
                        "endColumnNumber": 72
                    },
                    "nodeContext": "(pr.first != null && pr.last == null)",
                    "nodeType": "ParenthesizedExpression",
                    "astNodeNumber": 12,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 109,
                        "startLineNumber": 199,
                        "startColumnNumber": 35,
                        "endLineNumber": 199,
                        "endColumnNumber": 144
                    },
                    "nodeContext": "(pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 35,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 936,
                        "startLineNumber": 199,
                        "startColumnNumber": 31,
                        "endLineNumber": 209,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n  queryBuilder.append(fieldName).append(':');\n  queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n}\n else if (pr.isLike) {\n  queryBuilder.append(fieldName).append(':');\n  queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n}\n else {\n  throw new RuntimeException(\"[unexpected!] not handled case\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 105,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1260,
                        "startLineNumber": 194,
                        "startColumnNumber": 31,
                        "endLineNumber": 209,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "if (pr.first == null && pr.last == null) {\n  if (!queryBuilder.toString().contains(fieldName + \":\")) {\n    queryBuilder.append(fieldName).append(':');\n    queryBuilder.append('*');\n  }\n}\n else if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n  queryBuilder.append(fieldName).append(':');\n  queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n}\n else if (pr.isLike) {\n  queryBuilder.append(fieldName).append(':');\n  queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n}\n else {\n  throw new RuntimeException(\"[unexpected!] not handled case\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 142,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1490,
                        "startLineNumber": 191,
                        "startColumnNumber": 24,
                        "endLineNumber": 209,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n  queryBuilder.append(fieldName).append(':');\n  queryBuilder.append(first);\n}\n else if (pr.first == null && pr.last == null) {\n  if (!queryBuilder.toString().contains(fieldName + \":\")) {\n    queryBuilder.append(fieldName).append(':');\n    queryBuilder.append('*');\n  }\n}\n else if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n  queryBuilder.append(fieldName).append(':');\n  queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n}\n else if (pr.isLike) {\n  queryBuilder.append(fieldName).append(':');\n  queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n}\n else {\n  throw new RuntimeException(\"[unexpected!] not handled case\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 177,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1538,
                        "startLineNumber": 190,
                        "startColumnNumber": 27,
                        "endLineNumber": 210,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n    queryBuilder.append(fieldName).append(':');\n    queryBuilder.append(first);\n  }\n else   if (pr.first == null && pr.last == null) {\n    if (!queryBuilder.toString().contains(fieldName + \":\")) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append('*');\n    }\n  }\n else   if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n    queryBuilder.append(fieldName).append(':');\n    queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n  }\n else   if (pr.isLike) {\n    queryBuilder.append(fieldName).append(':');\n    queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n  }\n else {\n    throw new RuntimeException(\"[unexpected!] not handled case\");\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 178,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1791,
                        "startLineNumber": 186,
                        "startColumnNumber": 20,
                        "endLineNumber": 210,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n  queryBuilder.append(configuration.getPathField());\n  queryBuilder.append(':');\n  queryBuilder.append(first);\n}\n else {\n  if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n    queryBuilder.append(fieldName).append(':');\n    queryBuilder.append(first);\n  }\n else   if (pr.first == null && pr.last == null) {\n    if (!queryBuilder.toString().contains(fieldName + \":\")) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append('*');\n    }\n  }\n else   if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n    queryBuilder.append(fieldName).append(':');\n    queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n  }\n else   if (pr.isLike) {\n    queryBuilder.append(fieldName).append(':');\n    queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n  }\n else {\n    throw new RuntimeException(\"[unexpected!] not handled case\");\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 203,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 2798,
                        "startLineNumber": 164,
                        "startColumnNumber": 23,
                        "endLineNumber": 211,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  if (pr.propertyName.contains(\"/\")) {\n    continue;\n  }\n  if (\"rep:excerpt\".equals(pr.propertyName)) {\n    continue;\n  }\n  String first=null;\n  if (pr.first != null) {\n    first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n  }\n  String last=null;\n  if (pr.last != null) {\n    last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n  }\n  String prField=configuration.getFieldForPropertyRestriction(pr);\n  CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n  if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n    queryBuilder.append(configuration.getPathField());\n    queryBuilder.append(':');\n    queryBuilder.append(first);\n  }\n else {\n    if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(first);\n    }\n else     if (pr.first == null && pr.last == null) {\n      if (!queryBuilder.toString().contains(fieldName + \":\")) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append('*');\n      }\n    }\n else     if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n    }\n else     if (pr.isLike) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n    }\n else {\n      throw new RuntimeException(\"[unexpected!] not handled case\");\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 312,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 5508,
                        "startLineNumber": 124,
                        "startColumnNumber": 16,
                        "endLineNumber": 211,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n  String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n  if (isSupportedHttpRequest(nativeQueryString)) {\n    String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n    if (!\"select\".equals(requestHandlerString)) {\n      if (requestHandlerString.charAt(0) != '/') {\n        requestHandlerString=\"/\" + requestHandlerString;\n      }\n      solrQuery.setRequestHandler(requestHandlerString);\n    }\n    String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n    for (    String param : parameterString.split(\"&\")) {\n      String[] kv=param.split(\"=\");\n      if (kv.length != 2) {\n        throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n      }\n else {\n        if (\"stream.body\".equals(kv[0])) {\n          kv[0]=\"q\";\n          String mltFlString=\"mlt.fl=\";\n          int mltFlIndex=parameterString.indexOf(mltFlString);\n          if (mltFlIndex > -1) {\n            int beginIndex=mltFlIndex + mltFlString.length();\n            int endIndex=parameterString.indexOf('&',beginIndex);\n            String fields;\n            if (endIndex > beginIndex) {\n              fields=parameterString.substring(beginIndex,endIndex);\n            }\n else {\n              fields=parameterString.substring(beginIndex);\n            }\n            kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n          }\n        }\n        solrQuery.setParam(kv[0],kv[1]);\n      }\n    }\n    return solrQuery;\n  }\n else {\n    queryBuilder.append(nativeQueryString);\n  }\n}\n else {\n  if (pr.propertyName.contains(\"/\")) {\n    continue;\n  }\n  if (\"rep:excerpt\".equals(pr.propertyName)) {\n    continue;\n  }\n  String first=null;\n  if (pr.first != null) {\n    first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n  }\n  String last=null;\n  if (pr.last != null) {\n    last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n  }\n  String prField=configuration.getFieldForPropertyRestriction(pr);\n  CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n  if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n    queryBuilder.append(configuration.getPathField());\n    queryBuilder.append(':');\n    queryBuilder.append(first);\n  }\n else {\n    if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(first);\n    }\n else     if (pr.first == null && pr.last == null) {\n      if (!queryBuilder.toString().contains(fieldName + \":\")) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append('*');\n      }\n    }\n else     if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n    }\n else     if (pr.isLike) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n    }\n else {\n      throw new RuntimeException(\"[unexpected!] not handled case\");\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 546,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 5622,
                        "startLineNumber": 122,
                        "startColumnNumber": 71,
                        "endLineNumber": 213,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n    String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n    if (isSupportedHttpRequest(nativeQueryString)) {\n      String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n      if (!\"select\".equals(requestHandlerString)) {\n        if (requestHandlerString.charAt(0) != '/') {\n          requestHandlerString=\"/\" + requestHandlerString;\n        }\n        solrQuery.setRequestHandler(requestHandlerString);\n      }\n      String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n      for (      String param : parameterString.split(\"&\")) {\n        String[] kv=param.split(\"=\");\n        if (kv.length != 2) {\n          throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n        }\n else {\n          if (\"stream.body\".equals(kv[0])) {\n            kv[0]=\"q\";\n            String mltFlString=\"mlt.fl=\";\n            int mltFlIndex=parameterString.indexOf(mltFlString);\n            if (mltFlIndex > -1) {\n              int beginIndex=mltFlIndex + mltFlString.length();\n              int endIndex=parameterString.indexOf('&',beginIndex);\n              String fields;\n              if (endIndex > beginIndex) {\n                fields=parameterString.substring(beginIndex,endIndex);\n              }\n else {\n                fields=parameterString.substring(beginIndex);\n              }\n              kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n            }\n          }\n          solrQuery.setParam(kv[0],kv[1]);\n        }\n      }\n      return solrQuery;\n    }\n else {\n      queryBuilder.append(nativeQueryString);\n    }\n  }\n else {\n    if (pr.propertyName.contains(\"/\")) {\n      continue;\n    }\n    if (\"rep:excerpt\".equals(pr.propertyName)) {\n      continue;\n    }\n    String first=null;\n    if (pr.first != null) {\n      first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n    }\n    String last=null;\n    if (pr.last != null) {\n      last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n    }\n    String prField=configuration.getFieldForPropertyRestriction(pr);\n    CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n    if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n      queryBuilder.append(configuration.getPathField());\n      queryBuilder.append(':');\n      queryBuilder.append(first);\n    }\n else {\n      if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(first);\n      }\n else       if (pr.first == null && pr.last == null) {\n        if (!queryBuilder.toString().contains(fieldName + \":\")) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append('*');\n        }\n      }\n else       if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n      }\n else       if (pr.isLike) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n      }\n else {\n        throw new RuntimeException(\"[unexpected!] not handled case\");\n      }\n    }\n  }\n  queryBuilder.append(\" \");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 552,
                    "astHeight": 20
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 5681,
                        "startLineNumber": 122,
                        "startColumnNumber": 12,
                        "endLineNumber": 213,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (Filter.PropertyRestriction pr : propertyRestrictions) {\n  if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n    String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n    if (isSupportedHttpRequest(nativeQueryString)) {\n      String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n      if (!\"select\".equals(requestHandlerString)) {\n        if (requestHandlerString.charAt(0) != '/') {\n          requestHandlerString=\"/\" + requestHandlerString;\n        }\n        solrQuery.setRequestHandler(requestHandlerString);\n      }\n      String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n      for (      String param : parameterString.split(\"&\")) {\n        String[] kv=param.split(\"=\");\n        if (kv.length != 2) {\n          throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n        }\n else {\n          if (\"stream.body\".equals(kv[0])) {\n            kv[0]=\"q\";\n            String mltFlString=\"mlt.fl=\";\n            int mltFlIndex=parameterString.indexOf(mltFlString);\n            if (mltFlIndex > -1) {\n              int beginIndex=mltFlIndex + mltFlString.length();\n              int endIndex=parameterString.indexOf('&',beginIndex);\n              String fields;\n              if (endIndex > beginIndex) {\n                fields=parameterString.substring(beginIndex,endIndex);\n              }\n else {\n                fields=parameterString.substring(beginIndex);\n              }\n              kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n            }\n          }\n          solrQuery.setParam(kv[0],kv[1]);\n        }\n      }\n      return solrQuery;\n    }\n else {\n      queryBuilder.append(nativeQueryString);\n    }\n  }\n else {\n    if (pr.propertyName.contains(\"/\")) {\n      continue;\n    }\n    if (\"rep:excerpt\".equals(pr.propertyName)) {\n      continue;\n    }\n    String first=null;\n    if (pr.first != null) {\n      first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n    }\n    String last=null;\n    if (pr.last != null) {\n      last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n    }\n    String prField=configuration.getFieldForPropertyRestriction(pr);\n    CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n    if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n      queryBuilder.append(configuration.getPathField());\n      queryBuilder.append(':');\n      queryBuilder.append(first);\n    }\n else {\n      if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(first);\n      }\n else       if (pr.first == null && pr.last == null) {\n        if (!queryBuilder.toString().contains(fieldName + \":\")) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append('*');\n        }\n      }\n else       if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n      }\n else       if (pr.isLike) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n      }\n else {\n        throw new RuntimeException(\"[unexpected!] not handled case\");\n      }\n    }\n  }\n  queryBuilder.append(\" \");\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 560,
                    "astHeight": 21
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 5705,
                        "startLineNumber": 121,
                        "startColumnNumber": 77,
                        "endLineNumber": 214,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  for (  Filter.PropertyRestriction pr : propertyRestrictions) {\n    if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n      String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n      if (isSupportedHttpRequest(nativeQueryString)) {\n        String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n        if (!\"select\".equals(requestHandlerString)) {\n          if (requestHandlerString.charAt(0) != '/') {\n            requestHandlerString=\"/\" + requestHandlerString;\n          }\n          solrQuery.setRequestHandler(requestHandlerString);\n        }\n        String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n        for (        String param : parameterString.split(\"&\")) {\n          String[] kv=param.split(\"=\");\n          if (kv.length != 2) {\n            throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n          }\n else {\n            if (\"stream.body\".equals(kv[0])) {\n              kv[0]=\"q\";\n              String mltFlString=\"mlt.fl=\";\n              int mltFlIndex=parameterString.indexOf(mltFlString);\n              if (mltFlIndex > -1) {\n                int beginIndex=mltFlIndex + mltFlString.length();\n                int endIndex=parameterString.indexOf('&',beginIndex);\n                String fields;\n                if (endIndex > beginIndex) {\n                  fields=parameterString.substring(beginIndex,endIndex);\n                }\n else {\n                  fields=parameterString.substring(beginIndex);\n                }\n                kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n              }\n            }\n            solrQuery.setParam(kv[0],kv[1]);\n          }\n        }\n        return solrQuery;\n      }\n else {\n        queryBuilder.append(nativeQueryString);\n      }\n    }\n else {\n      if (pr.propertyName.contains(\"/\")) {\n        continue;\n      }\n      if (\"rep:excerpt\".equals(pr.propertyName)) {\n        continue;\n      }\n      String first=null;\n      if (pr.first != null) {\n        first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n      }\n      String last=null;\n      if (pr.last != null) {\n        last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n      }\n      String prField=configuration.getFieldForPropertyRestriction(pr);\n      CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n      if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n        queryBuilder.append(configuration.getPathField());\n        queryBuilder.append(':');\n        queryBuilder.append(first);\n      }\n else {\n        if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(first);\n        }\n else         if (pr.first == null && pr.last == null) {\n          if (!queryBuilder.toString().contains(fieldName + \":\")) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append('*');\n          }\n        }\n else         if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n        }\n else         if (pr.isLike) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n        }\n else {\n          throw new RuntimeException(\"[unexpected!] not handled case\");\n        }\n      }\n    }\n    queryBuilder.append(\" \");\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 561,
                    "astHeight": 22
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 5774,
                        "startLineNumber": 121,
                        "startColumnNumber": 8,
                        "endLineNumber": 214,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (propertyRestrictions != null && !propertyRestrictions.isEmpty()) {\n  for (  Filter.PropertyRestriction pr : propertyRestrictions) {\n    if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n      String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n      if (isSupportedHttpRequest(nativeQueryString)) {\n        String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n        if (!\"select\".equals(requestHandlerString)) {\n          if (requestHandlerString.charAt(0) != '/') {\n            requestHandlerString=\"/\" + requestHandlerString;\n          }\n          solrQuery.setRequestHandler(requestHandlerString);\n        }\n        String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n        for (        String param : parameterString.split(\"&\")) {\n          String[] kv=param.split(\"=\");\n          if (kv.length != 2) {\n            throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n          }\n else {\n            if (\"stream.body\".equals(kv[0])) {\n              kv[0]=\"q\";\n              String mltFlString=\"mlt.fl=\";\n              int mltFlIndex=parameterString.indexOf(mltFlString);\n              if (mltFlIndex > -1) {\n                int beginIndex=mltFlIndex + mltFlString.length();\n                int endIndex=parameterString.indexOf('&',beginIndex);\n                String fields;\n                if (endIndex > beginIndex) {\n                  fields=parameterString.substring(beginIndex,endIndex);\n                }\n else {\n                  fields=parameterString.substring(beginIndex);\n                }\n                kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n              }\n            }\n            solrQuery.setParam(kv[0],kv[1]);\n          }\n        }\n        return solrQuery;\n      }\n else {\n        queryBuilder.append(nativeQueryString);\n      }\n    }\n else {\n      if (pr.propertyName.contains(\"/\")) {\n        continue;\n      }\n      if (\"rep:excerpt\".equals(pr.propertyName)) {\n        continue;\n      }\n      String first=null;\n      if (pr.first != null) {\n        first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n      }\n      String last=null;\n      if (pr.last != null) {\n        last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n      }\n      String prField=configuration.getFieldForPropertyRestriction(pr);\n      CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n      if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n        queryBuilder.append(configuration.getPathField());\n        queryBuilder.append(':');\n        queryBuilder.append(first);\n      }\n else {\n        if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(first);\n        }\n else         if (pr.first == null && pr.last == null) {\n          if (!queryBuilder.toString().contains(fieldName + \":\")) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append('*');\n          }\n        }\n else         if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n        }\n else         if (pr.isLike) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n        }\n else {\n          throw new RuntimeException(\"[unexpected!] not handled case\");\n        }\n      }\n    }\n    queryBuilder.append(\" \");\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 570,
                    "astHeight": 23
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 7985,
                        "startLineNumber": 103,
                        "startColumnNumber": 46,
                        "endLineNumber": 255,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  SolrQuery solrQuery=new SolrQuery();\n  setDefaults(solrQuery);\n  StringBuilder queryBuilder=new StringBuilder();\n  if (filter.getFullTextConstraint() != null) {\n    queryBuilder.append(getFullTextQuery(filter.getFullTextConstraint()));\n    queryBuilder.append(' ');\n  }\n else   if (filter.getFulltextConditions() != null) {\n    Collection<String> fulltextConditions=filter.getFulltextConditions();\n    for (    String fulltextCondition : fulltextConditions) {\n      queryBuilder.append(fulltextCondition).append(\" \");\n    }\n  }\n  Collection<Filter.PropertyRestriction> propertyRestrictions=filter.getPropertyRestrictions();\n  if (propertyRestrictions != null && !propertyRestrictions.isEmpty()) {\n    for (    Filter.PropertyRestriction pr : propertyRestrictions) {\n      if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n        String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n        if (isSupportedHttpRequest(nativeQueryString)) {\n          String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n          if (!\"select\".equals(requestHandlerString)) {\n            if (requestHandlerString.charAt(0) != '/') {\n              requestHandlerString=\"/\" + requestHandlerString;\n            }\n            solrQuery.setRequestHandler(requestHandlerString);\n          }\n          String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n          for (          String param : parameterString.split(\"&\")) {\n            String[] kv=param.split(\"=\");\n            if (kv.length != 2) {\n              throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n            }\n else {\n              if (\"stream.body\".equals(kv[0])) {\n                kv[0]=\"q\";\n                String mltFlString=\"mlt.fl=\";\n                int mltFlIndex=parameterString.indexOf(mltFlString);\n                if (mltFlIndex > -1) {\n                  int beginIndex=mltFlIndex + mltFlString.length();\n                  int endIndex=parameterString.indexOf('&',beginIndex);\n                  String fields;\n                  if (endIndex > beginIndex) {\n                    fields=parameterString.substring(beginIndex,endIndex);\n                  }\n else {\n                    fields=parameterString.substring(beginIndex);\n                  }\n                  kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n                }\n              }\n              solrQuery.setParam(kv[0],kv[1]);\n            }\n          }\n          return solrQuery;\n        }\n else {\n          queryBuilder.append(nativeQueryString);\n        }\n      }\n else {\n        if (pr.propertyName.contains(\"/\")) {\n          continue;\n        }\n        if (\"rep:excerpt\".equals(pr.propertyName)) {\n          continue;\n        }\n        String first=null;\n        if (pr.first != null) {\n          first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n        }\n        String last=null;\n        if (pr.last != null) {\n          last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n        }\n        String prField=configuration.getFieldForPropertyRestriction(pr);\n        CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n        if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n          queryBuilder.append(configuration.getPathField());\n          queryBuilder.append(':');\n          queryBuilder.append(first);\n        }\n else {\n          if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(first);\n          }\n else           if (pr.first == null && pr.last == null) {\n            if (!queryBuilder.toString().contains(fieldName + \":\")) {\n              queryBuilder.append(fieldName).append(':');\n              queryBuilder.append('*');\n            }\n          }\n else           if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n          }\n else           if (pr.isLike) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n          }\n else {\n            throw new RuntimeException(\"[unexpected!] not handled case\");\n          }\n        }\n      }\n      queryBuilder.append(\" \");\n    }\n  }\n  String[] pts=filter.getPrimaryTypes().toArray(new String[filter.getPrimaryTypes().size()]);\n  for (int i=0; i < pts.length; i++) {\n    String pt=pts[i];\n    if (i == 0) {\n      queryBuilder.append(\"(\");\n    }\n    if (i > 0 && i < pts.length) {\n      queryBuilder.append(\"OR \");\n    }\n    queryBuilder.append(\"jcr\\\\:primaryType\").append(':').append(partialEscape(pt)).append(\" \");\n    if (i == pts.length - 1) {\n      queryBuilder.append(\")\");\n      queryBuilder.append(' ');\n    }\n  }\n  Filter.PathRestriction pathRestriction=filter.getPathRestriction();\n  if (pathRestriction != null) {\n    String path=purgePath(filter);\n    String fieldName=configuration.getFieldForPathRestriction(pathRestriction);\n    if (fieldName != null) {\n      queryBuilder.append(fieldName);\n      queryBuilder.append(':');\n      queryBuilder.append(path);\n    }\n  }\n  if (queryBuilder.length() == 0) {\n    queryBuilder.append(\"*:*\");\n  }\n  String escapedQuery=queryBuilder.toString();\n  solrQuery.setQuery(escapedQuery);\n  if (log.isDebugEnabled()) {\n    log.debug(\"JCR query {} has been converted to Solr query {}\",filter.getQueryStatement(),solrQuery.toString());\n  }\n  return solrQuery;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 858,
                    "astHeight": 24
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8027,
                        "startLineNumber": 103,
                        "startColumnNumber": 4,
                        "endLineNumber": 255,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private SolrQuery getQuery(Filter filter){\n  SolrQuery solrQuery=new SolrQuery();\n  setDefaults(solrQuery);\n  StringBuilder queryBuilder=new StringBuilder();\n  if (filter.getFullTextConstraint() != null) {\n    queryBuilder.append(getFullTextQuery(filter.getFullTextConstraint()));\n    queryBuilder.append(' ');\n  }\n else   if (filter.getFulltextConditions() != null) {\n    Collection<String> fulltextConditions=filter.getFulltextConditions();\n    for (    String fulltextCondition : fulltextConditions) {\n      queryBuilder.append(fulltextCondition).append(\" \");\n    }\n  }\n  Collection<Filter.PropertyRestriction> propertyRestrictions=filter.getPropertyRestrictions();\n  if (propertyRestrictions != null && !propertyRestrictions.isEmpty()) {\n    for (    Filter.PropertyRestriction pr : propertyRestrictions) {\n      if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n        String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n        if (isSupportedHttpRequest(nativeQueryString)) {\n          String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n          if (!\"select\".equals(requestHandlerString)) {\n            if (requestHandlerString.charAt(0) != '/') {\n              requestHandlerString=\"/\" + requestHandlerString;\n            }\n            solrQuery.setRequestHandler(requestHandlerString);\n          }\n          String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n          for (          String param : parameterString.split(\"&\")) {\n            String[] kv=param.split(\"=\");\n            if (kv.length != 2) {\n              throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n            }\n else {\n              if (\"stream.body\".equals(kv[0])) {\n                kv[0]=\"q\";\n                String mltFlString=\"mlt.fl=\";\n                int mltFlIndex=parameterString.indexOf(mltFlString);\n                if (mltFlIndex > -1) {\n                  int beginIndex=mltFlIndex + mltFlString.length();\n                  int endIndex=parameterString.indexOf('&',beginIndex);\n                  String fields;\n                  if (endIndex > beginIndex) {\n                    fields=parameterString.substring(beginIndex,endIndex);\n                  }\n else {\n                    fields=parameterString.substring(beginIndex);\n                  }\n                  kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n                }\n              }\n              solrQuery.setParam(kv[0],kv[1]);\n            }\n          }\n          return solrQuery;\n        }\n else {\n          queryBuilder.append(nativeQueryString);\n        }\n      }\n else {\n        if (pr.propertyName.contains(\"/\")) {\n          continue;\n        }\n        if (\"rep:excerpt\".equals(pr.propertyName)) {\n          continue;\n        }\n        String first=null;\n        if (pr.first != null) {\n          first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n        }\n        String last=null;\n        if (pr.last != null) {\n          last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n        }\n        String prField=configuration.getFieldForPropertyRestriction(pr);\n        CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n        if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n          queryBuilder.append(configuration.getPathField());\n          queryBuilder.append(':');\n          queryBuilder.append(first);\n        }\n else {\n          if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(first);\n          }\n else           if (pr.first == null && pr.last == null) {\n            if (!queryBuilder.toString().contains(fieldName + \":\")) {\n              queryBuilder.append(fieldName).append(':');\n              queryBuilder.append('*');\n            }\n          }\n else           if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n          }\n else           if (pr.isLike) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n          }\n else {\n            throw new RuntimeException(\"[unexpected!] not handled case\");\n          }\n        }\n      }\n      queryBuilder.append(\" \");\n    }\n  }\n  String[] pts=filter.getPrimaryTypes().toArray(new String[filter.getPrimaryTypes().size()]);\n  for (int i=0; i < pts.length; i++) {\n    String pt=pts[i];\n    if (i == 0) {\n      queryBuilder.append(\"(\");\n    }\n    if (i > 0 && i < pts.length) {\n      queryBuilder.append(\"OR \");\n    }\n    queryBuilder.append(\"jcr\\\\:primaryType\").append(':').append(partialEscape(pt)).append(\" \");\n    if (i == pts.length - 1) {\n      queryBuilder.append(\")\");\n      queryBuilder.append(' ');\n    }\n  }\n  Filter.PathRestriction pathRestriction=filter.getPathRestriction();\n  if (pathRestriction != null) {\n    String path=purgePath(filter);\n    String fieldName=configuration.getFieldForPathRestriction(pathRestriction);\n    if (fieldName != null) {\n      queryBuilder.append(fieldName);\n      queryBuilder.append(':');\n      queryBuilder.append(path);\n    }\n  }\n  if (queryBuilder.length() == 0) {\n    queryBuilder.append(\"*:*\");\n  }\n  String escapedQuery=queryBuilder.toString();\n  solrQuery.setQuery(escapedQuery);\n  if (log.isDebugEnabled()) {\n    log.debug(\"JCR query {} has been converted to Solr query {}\",filter.getQueryStatement(),solrQuery.toString());\n  }\n  return solrQuery;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 867,
                    "astHeight": 25
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 109,
                    "startLineNumber": 199,
                    "startColumnNumber": 35,
                    "endLineNumber": 199,
                    "endColumnNumber": 144
                },
                "nodeContext": "(pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))",
                "nodeType": "InfixExpression",
                "astNodeNumber": 35,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "null"
        },
        {
            "nodeContext": "null",
            "nodeType": "NullLiteral",
            "nodePosition": {
                "charLength": 4,
                "startLineNumber": 199,
                "startColumnNumber": 67,
                "endLineNumber": 199,
                "endColumnNumber": 71
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 15,
                        "startLineNumber": 199,
                        "startColumnNumber": 56,
                        "endLineNumber": 199,
                        "endColumnNumber": 71
                    },
                    "nodeContext": "pr.last == null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
                    "nodePosition": {
                        "charLength": 35,
                        "startLineNumber": 199,
                        "startColumnNumber": 36,
                        "endLineNumber": 199,
                        "endColumnNumber": 71
                    },
                    "nodeContext": "pr.first != null && pr.last == null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 37,
                        "startLineNumber": 199,
                        "startColumnNumber": 35,
                        "endLineNumber": 199,
                        "endColumnNumber": 72
                    },
                    "nodeContext": "(pr.first != null && pr.last == null)",
                    "nodeType": "ParenthesizedExpression",
                    "astNodeNumber": 12,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 109,
                        "startLineNumber": 199,
                        "startColumnNumber": 35,
                        "endLineNumber": 199,
                        "endColumnNumber": 144
                    },
                    "nodeContext": "(pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 35,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 936,
                        "startLineNumber": 199,
                        "startColumnNumber": 31,
                        "endLineNumber": 209,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n  queryBuilder.append(fieldName).append(':');\n  queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n}\n else if (pr.isLike) {\n  queryBuilder.append(fieldName).append(':');\n  queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n}\n else {\n  throw new RuntimeException(\"[unexpected!] not handled case\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 105,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1260,
                        "startLineNumber": 194,
                        "startColumnNumber": 31,
                        "endLineNumber": 209,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "if (pr.first == null && pr.last == null) {\n  if (!queryBuilder.toString().contains(fieldName + \":\")) {\n    queryBuilder.append(fieldName).append(':');\n    queryBuilder.append('*');\n  }\n}\n else if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n  queryBuilder.append(fieldName).append(':');\n  queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n}\n else if (pr.isLike) {\n  queryBuilder.append(fieldName).append(':');\n  queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n}\n else {\n  throw new RuntimeException(\"[unexpected!] not handled case\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 142,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1490,
                        "startLineNumber": 191,
                        "startColumnNumber": 24,
                        "endLineNumber": 209,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n  queryBuilder.append(fieldName).append(':');\n  queryBuilder.append(first);\n}\n else if (pr.first == null && pr.last == null) {\n  if (!queryBuilder.toString().contains(fieldName + \":\")) {\n    queryBuilder.append(fieldName).append(':');\n    queryBuilder.append('*');\n  }\n}\n else if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n  queryBuilder.append(fieldName).append(':');\n  queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n}\n else if (pr.isLike) {\n  queryBuilder.append(fieldName).append(':');\n  queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n}\n else {\n  throw new RuntimeException(\"[unexpected!] not handled case\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 177,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1538,
                        "startLineNumber": 190,
                        "startColumnNumber": 27,
                        "endLineNumber": 210,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n    queryBuilder.append(fieldName).append(':');\n    queryBuilder.append(first);\n  }\n else   if (pr.first == null && pr.last == null) {\n    if (!queryBuilder.toString().contains(fieldName + \":\")) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append('*');\n    }\n  }\n else   if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n    queryBuilder.append(fieldName).append(':');\n    queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n  }\n else   if (pr.isLike) {\n    queryBuilder.append(fieldName).append(':');\n    queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n  }\n else {\n    throw new RuntimeException(\"[unexpected!] not handled case\");\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 178,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1791,
                        "startLineNumber": 186,
                        "startColumnNumber": 20,
                        "endLineNumber": 210,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n  queryBuilder.append(configuration.getPathField());\n  queryBuilder.append(':');\n  queryBuilder.append(first);\n}\n else {\n  if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n    queryBuilder.append(fieldName).append(':');\n    queryBuilder.append(first);\n  }\n else   if (pr.first == null && pr.last == null) {\n    if (!queryBuilder.toString().contains(fieldName + \":\")) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append('*');\n    }\n  }\n else   if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n    queryBuilder.append(fieldName).append(':');\n    queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n  }\n else   if (pr.isLike) {\n    queryBuilder.append(fieldName).append(':');\n    queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n  }\n else {\n    throw new RuntimeException(\"[unexpected!] not handled case\");\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 203,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 2798,
                        "startLineNumber": 164,
                        "startColumnNumber": 23,
                        "endLineNumber": 211,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  if (pr.propertyName.contains(\"/\")) {\n    continue;\n  }\n  if (\"rep:excerpt\".equals(pr.propertyName)) {\n    continue;\n  }\n  String first=null;\n  if (pr.first != null) {\n    first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n  }\n  String last=null;\n  if (pr.last != null) {\n    last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n  }\n  String prField=configuration.getFieldForPropertyRestriction(pr);\n  CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n  if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n    queryBuilder.append(configuration.getPathField());\n    queryBuilder.append(':');\n    queryBuilder.append(first);\n  }\n else {\n    if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(first);\n    }\n else     if (pr.first == null && pr.last == null) {\n      if (!queryBuilder.toString().contains(fieldName + \":\")) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append('*');\n      }\n    }\n else     if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n    }\n else     if (pr.isLike) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n    }\n else {\n      throw new RuntimeException(\"[unexpected!] not handled case\");\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 312,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 5508,
                        "startLineNumber": 124,
                        "startColumnNumber": 16,
                        "endLineNumber": 211,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n  String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n  if (isSupportedHttpRequest(nativeQueryString)) {\n    String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n    if (!\"select\".equals(requestHandlerString)) {\n      if (requestHandlerString.charAt(0) != '/') {\n        requestHandlerString=\"/\" + requestHandlerString;\n      }\n      solrQuery.setRequestHandler(requestHandlerString);\n    }\n    String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n    for (    String param : parameterString.split(\"&\")) {\n      String[] kv=param.split(\"=\");\n      if (kv.length != 2) {\n        throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n      }\n else {\n        if (\"stream.body\".equals(kv[0])) {\n          kv[0]=\"q\";\n          String mltFlString=\"mlt.fl=\";\n          int mltFlIndex=parameterString.indexOf(mltFlString);\n          if (mltFlIndex > -1) {\n            int beginIndex=mltFlIndex + mltFlString.length();\n            int endIndex=parameterString.indexOf('&',beginIndex);\n            String fields;\n            if (endIndex > beginIndex) {\n              fields=parameterString.substring(beginIndex,endIndex);\n            }\n else {\n              fields=parameterString.substring(beginIndex);\n            }\n            kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n          }\n        }\n        solrQuery.setParam(kv[0],kv[1]);\n      }\n    }\n    return solrQuery;\n  }\n else {\n    queryBuilder.append(nativeQueryString);\n  }\n}\n else {\n  if (pr.propertyName.contains(\"/\")) {\n    continue;\n  }\n  if (\"rep:excerpt\".equals(pr.propertyName)) {\n    continue;\n  }\n  String first=null;\n  if (pr.first != null) {\n    first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n  }\n  String last=null;\n  if (pr.last != null) {\n    last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n  }\n  String prField=configuration.getFieldForPropertyRestriction(pr);\n  CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n  if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n    queryBuilder.append(configuration.getPathField());\n    queryBuilder.append(':');\n    queryBuilder.append(first);\n  }\n else {\n    if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(first);\n    }\n else     if (pr.first == null && pr.last == null) {\n      if (!queryBuilder.toString().contains(fieldName + \":\")) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append('*');\n      }\n    }\n else     if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n    }\n else     if (pr.isLike) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n    }\n else {\n      throw new RuntimeException(\"[unexpected!] not handled case\");\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 546,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 5622,
                        "startLineNumber": 122,
                        "startColumnNumber": 71,
                        "endLineNumber": 213,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n    String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n    if (isSupportedHttpRequest(nativeQueryString)) {\n      String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n      if (!\"select\".equals(requestHandlerString)) {\n        if (requestHandlerString.charAt(0) != '/') {\n          requestHandlerString=\"/\" + requestHandlerString;\n        }\n        solrQuery.setRequestHandler(requestHandlerString);\n      }\n      String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n      for (      String param : parameterString.split(\"&\")) {\n        String[] kv=param.split(\"=\");\n        if (kv.length != 2) {\n          throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n        }\n else {\n          if (\"stream.body\".equals(kv[0])) {\n            kv[0]=\"q\";\n            String mltFlString=\"mlt.fl=\";\n            int mltFlIndex=parameterString.indexOf(mltFlString);\n            if (mltFlIndex > -1) {\n              int beginIndex=mltFlIndex + mltFlString.length();\n              int endIndex=parameterString.indexOf('&',beginIndex);\n              String fields;\n              if (endIndex > beginIndex) {\n                fields=parameterString.substring(beginIndex,endIndex);\n              }\n else {\n                fields=parameterString.substring(beginIndex);\n              }\n              kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n            }\n          }\n          solrQuery.setParam(kv[0],kv[1]);\n        }\n      }\n      return solrQuery;\n    }\n else {\n      queryBuilder.append(nativeQueryString);\n    }\n  }\n else {\n    if (pr.propertyName.contains(\"/\")) {\n      continue;\n    }\n    if (\"rep:excerpt\".equals(pr.propertyName)) {\n      continue;\n    }\n    String first=null;\n    if (pr.first != null) {\n      first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n    }\n    String last=null;\n    if (pr.last != null) {\n      last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n    }\n    String prField=configuration.getFieldForPropertyRestriction(pr);\n    CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n    if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n      queryBuilder.append(configuration.getPathField());\n      queryBuilder.append(':');\n      queryBuilder.append(first);\n    }\n else {\n      if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(first);\n      }\n else       if (pr.first == null && pr.last == null) {\n        if (!queryBuilder.toString().contains(fieldName + \":\")) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append('*');\n        }\n      }\n else       if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n      }\n else       if (pr.isLike) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n      }\n else {\n        throw new RuntimeException(\"[unexpected!] not handled case\");\n      }\n    }\n  }\n  queryBuilder.append(\" \");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 552,
                    "astHeight": 20
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 5681,
                        "startLineNumber": 122,
                        "startColumnNumber": 12,
                        "endLineNumber": 213,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (Filter.PropertyRestriction pr : propertyRestrictions) {\n  if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n    String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n    if (isSupportedHttpRequest(nativeQueryString)) {\n      String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n      if (!\"select\".equals(requestHandlerString)) {\n        if (requestHandlerString.charAt(0) != '/') {\n          requestHandlerString=\"/\" + requestHandlerString;\n        }\n        solrQuery.setRequestHandler(requestHandlerString);\n      }\n      String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n      for (      String param : parameterString.split(\"&\")) {\n        String[] kv=param.split(\"=\");\n        if (kv.length != 2) {\n          throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n        }\n else {\n          if (\"stream.body\".equals(kv[0])) {\n            kv[0]=\"q\";\n            String mltFlString=\"mlt.fl=\";\n            int mltFlIndex=parameterString.indexOf(mltFlString);\n            if (mltFlIndex > -1) {\n              int beginIndex=mltFlIndex + mltFlString.length();\n              int endIndex=parameterString.indexOf('&',beginIndex);\n              String fields;\n              if (endIndex > beginIndex) {\n                fields=parameterString.substring(beginIndex,endIndex);\n              }\n else {\n                fields=parameterString.substring(beginIndex);\n              }\n              kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n            }\n          }\n          solrQuery.setParam(kv[0],kv[1]);\n        }\n      }\n      return solrQuery;\n    }\n else {\n      queryBuilder.append(nativeQueryString);\n    }\n  }\n else {\n    if (pr.propertyName.contains(\"/\")) {\n      continue;\n    }\n    if (\"rep:excerpt\".equals(pr.propertyName)) {\n      continue;\n    }\n    String first=null;\n    if (pr.first != null) {\n      first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n    }\n    String last=null;\n    if (pr.last != null) {\n      last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n    }\n    String prField=configuration.getFieldForPropertyRestriction(pr);\n    CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n    if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n      queryBuilder.append(configuration.getPathField());\n      queryBuilder.append(':');\n      queryBuilder.append(first);\n    }\n else {\n      if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(first);\n      }\n else       if (pr.first == null && pr.last == null) {\n        if (!queryBuilder.toString().contains(fieldName + \":\")) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append('*');\n        }\n      }\n else       if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n      }\n else       if (pr.isLike) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n      }\n else {\n        throw new RuntimeException(\"[unexpected!] not handled case\");\n      }\n    }\n  }\n  queryBuilder.append(\" \");\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 560,
                    "astHeight": 21
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 5705,
                        "startLineNumber": 121,
                        "startColumnNumber": 77,
                        "endLineNumber": 214,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  for (  Filter.PropertyRestriction pr : propertyRestrictions) {\n    if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n      String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n      if (isSupportedHttpRequest(nativeQueryString)) {\n        String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n        if (!\"select\".equals(requestHandlerString)) {\n          if (requestHandlerString.charAt(0) != '/') {\n            requestHandlerString=\"/\" + requestHandlerString;\n          }\n          solrQuery.setRequestHandler(requestHandlerString);\n        }\n        String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n        for (        String param : parameterString.split(\"&\")) {\n          String[] kv=param.split(\"=\");\n          if (kv.length != 2) {\n            throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n          }\n else {\n            if (\"stream.body\".equals(kv[0])) {\n              kv[0]=\"q\";\n              String mltFlString=\"mlt.fl=\";\n              int mltFlIndex=parameterString.indexOf(mltFlString);\n              if (mltFlIndex > -1) {\n                int beginIndex=mltFlIndex + mltFlString.length();\n                int endIndex=parameterString.indexOf('&',beginIndex);\n                String fields;\n                if (endIndex > beginIndex) {\n                  fields=parameterString.substring(beginIndex,endIndex);\n                }\n else {\n                  fields=parameterString.substring(beginIndex);\n                }\n                kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n              }\n            }\n            solrQuery.setParam(kv[0],kv[1]);\n          }\n        }\n        return solrQuery;\n      }\n else {\n        queryBuilder.append(nativeQueryString);\n      }\n    }\n else {\n      if (pr.propertyName.contains(\"/\")) {\n        continue;\n      }\n      if (\"rep:excerpt\".equals(pr.propertyName)) {\n        continue;\n      }\n      String first=null;\n      if (pr.first != null) {\n        first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n      }\n      String last=null;\n      if (pr.last != null) {\n        last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n      }\n      String prField=configuration.getFieldForPropertyRestriction(pr);\n      CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n      if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n        queryBuilder.append(configuration.getPathField());\n        queryBuilder.append(':');\n        queryBuilder.append(first);\n      }\n else {\n        if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(first);\n        }\n else         if (pr.first == null && pr.last == null) {\n          if (!queryBuilder.toString().contains(fieldName + \":\")) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append('*');\n          }\n        }\n else         if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n        }\n else         if (pr.isLike) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n        }\n else {\n          throw new RuntimeException(\"[unexpected!] not handled case\");\n        }\n      }\n    }\n    queryBuilder.append(\" \");\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 561,
                    "astHeight": 22
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 5774,
                        "startLineNumber": 121,
                        "startColumnNumber": 8,
                        "endLineNumber": 214,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (propertyRestrictions != null && !propertyRestrictions.isEmpty()) {\n  for (  Filter.PropertyRestriction pr : propertyRestrictions) {\n    if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n      String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n      if (isSupportedHttpRequest(nativeQueryString)) {\n        String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n        if (!\"select\".equals(requestHandlerString)) {\n          if (requestHandlerString.charAt(0) != '/') {\n            requestHandlerString=\"/\" + requestHandlerString;\n          }\n          solrQuery.setRequestHandler(requestHandlerString);\n        }\n        String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n        for (        String param : parameterString.split(\"&\")) {\n          String[] kv=param.split(\"=\");\n          if (kv.length != 2) {\n            throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n          }\n else {\n            if (\"stream.body\".equals(kv[0])) {\n              kv[0]=\"q\";\n              String mltFlString=\"mlt.fl=\";\n              int mltFlIndex=parameterString.indexOf(mltFlString);\n              if (mltFlIndex > -1) {\n                int beginIndex=mltFlIndex + mltFlString.length();\n                int endIndex=parameterString.indexOf('&',beginIndex);\n                String fields;\n                if (endIndex > beginIndex) {\n                  fields=parameterString.substring(beginIndex,endIndex);\n                }\n else {\n                  fields=parameterString.substring(beginIndex);\n                }\n                kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n              }\n            }\n            solrQuery.setParam(kv[0],kv[1]);\n          }\n        }\n        return solrQuery;\n      }\n else {\n        queryBuilder.append(nativeQueryString);\n      }\n    }\n else {\n      if (pr.propertyName.contains(\"/\")) {\n        continue;\n      }\n      if (\"rep:excerpt\".equals(pr.propertyName)) {\n        continue;\n      }\n      String first=null;\n      if (pr.first != null) {\n        first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n      }\n      String last=null;\n      if (pr.last != null) {\n        last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n      }\n      String prField=configuration.getFieldForPropertyRestriction(pr);\n      CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n      if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n        queryBuilder.append(configuration.getPathField());\n        queryBuilder.append(':');\n        queryBuilder.append(first);\n      }\n else {\n        if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(first);\n        }\n else         if (pr.first == null && pr.last == null) {\n          if (!queryBuilder.toString().contains(fieldName + \":\")) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append('*');\n          }\n        }\n else         if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n        }\n else         if (pr.isLike) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n        }\n else {\n          throw new RuntimeException(\"[unexpected!] not handled case\");\n        }\n      }\n    }\n    queryBuilder.append(\" \");\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 570,
                    "astHeight": 23
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 7985,
                        "startLineNumber": 103,
                        "startColumnNumber": 46,
                        "endLineNumber": 255,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  SolrQuery solrQuery=new SolrQuery();\n  setDefaults(solrQuery);\n  StringBuilder queryBuilder=new StringBuilder();\n  if (filter.getFullTextConstraint() != null) {\n    queryBuilder.append(getFullTextQuery(filter.getFullTextConstraint()));\n    queryBuilder.append(' ');\n  }\n else   if (filter.getFulltextConditions() != null) {\n    Collection<String> fulltextConditions=filter.getFulltextConditions();\n    for (    String fulltextCondition : fulltextConditions) {\n      queryBuilder.append(fulltextCondition).append(\" \");\n    }\n  }\n  Collection<Filter.PropertyRestriction> propertyRestrictions=filter.getPropertyRestrictions();\n  if (propertyRestrictions != null && !propertyRestrictions.isEmpty()) {\n    for (    Filter.PropertyRestriction pr : propertyRestrictions) {\n      if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n        String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n        if (isSupportedHttpRequest(nativeQueryString)) {\n          String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n          if (!\"select\".equals(requestHandlerString)) {\n            if (requestHandlerString.charAt(0) != '/') {\n              requestHandlerString=\"/\" + requestHandlerString;\n            }\n            solrQuery.setRequestHandler(requestHandlerString);\n          }\n          String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n          for (          String param : parameterString.split(\"&\")) {\n            String[] kv=param.split(\"=\");\n            if (kv.length != 2) {\n              throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n            }\n else {\n              if (\"stream.body\".equals(kv[0])) {\n                kv[0]=\"q\";\n                String mltFlString=\"mlt.fl=\";\n                int mltFlIndex=parameterString.indexOf(mltFlString);\n                if (mltFlIndex > -1) {\n                  int beginIndex=mltFlIndex + mltFlString.length();\n                  int endIndex=parameterString.indexOf('&',beginIndex);\n                  String fields;\n                  if (endIndex > beginIndex) {\n                    fields=parameterString.substring(beginIndex,endIndex);\n                  }\n else {\n                    fields=parameterString.substring(beginIndex);\n                  }\n                  kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n                }\n              }\n              solrQuery.setParam(kv[0],kv[1]);\n            }\n          }\n          return solrQuery;\n        }\n else {\n          queryBuilder.append(nativeQueryString);\n        }\n      }\n else {\n        if (pr.propertyName.contains(\"/\")) {\n          continue;\n        }\n        if (\"rep:excerpt\".equals(pr.propertyName)) {\n          continue;\n        }\n        String first=null;\n        if (pr.first != null) {\n          first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n        }\n        String last=null;\n        if (pr.last != null) {\n          last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n        }\n        String prField=configuration.getFieldForPropertyRestriction(pr);\n        CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n        if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n          queryBuilder.append(configuration.getPathField());\n          queryBuilder.append(':');\n          queryBuilder.append(first);\n        }\n else {\n          if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(first);\n          }\n else           if (pr.first == null && pr.last == null) {\n            if (!queryBuilder.toString().contains(fieldName + \":\")) {\n              queryBuilder.append(fieldName).append(':');\n              queryBuilder.append('*');\n            }\n          }\n else           if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n          }\n else           if (pr.isLike) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n          }\n else {\n            throw new RuntimeException(\"[unexpected!] not handled case\");\n          }\n        }\n      }\n      queryBuilder.append(\" \");\n    }\n  }\n  String[] pts=filter.getPrimaryTypes().toArray(new String[filter.getPrimaryTypes().size()]);\n  for (int i=0; i < pts.length; i++) {\n    String pt=pts[i];\n    if (i == 0) {\n      queryBuilder.append(\"(\");\n    }\n    if (i > 0 && i < pts.length) {\n      queryBuilder.append(\"OR \");\n    }\n    queryBuilder.append(\"jcr\\\\:primaryType\").append(':').append(partialEscape(pt)).append(\" \");\n    if (i == pts.length - 1) {\n      queryBuilder.append(\")\");\n      queryBuilder.append(' ');\n    }\n  }\n  Filter.PathRestriction pathRestriction=filter.getPathRestriction();\n  if (pathRestriction != null) {\n    String path=purgePath(filter);\n    String fieldName=configuration.getFieldForPathRestriction(pathRestriction);\n    if (fieldName != null) {\n      queryBuilder.append(fieldName);\n      queryBuilder.append(':');\n      queryBuilder.append(path);\n    }\n  }\n  if (queryBuilder.length() == 0) {\n    queryBuilder.append(\"*:*\");\n  }\n  String escapedQuery=queryBuilder.toString();\n  solrQuery.setQuery(escapedQuery);\n  if (log.isDebugEnabled()) {\n    log.debug(\"JCR query {} has been converted to Solr query {}\",filter.getQueryStatement(),solrQuery.toString());\n  }\n  return solrQuery;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 858,
                    "astHeight": 24
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8027,
                        "startLineNumber": 103,
                        "startColumnNumber": 4,
                        "endLineNumber": 255,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private SolrQuery getQuery(Filter filter){\n  SolrQuery solrQuery=new SolrQuery();\n  setDefaults(solrQuery);\n  StringBuilder queryBuilder=new StringBuilder();\n  if (filter.getFullTextConstraint() != null) {\n    queryBuilder.append(getFullTextQuery(filter.getFullTextConstraint()));\n    queryBuilder.append(' ');\n  }\n else   if (filter.getFulltextConditions() != null) {\n    Collection<String> fulltextConditions=filter.getFulltextConditions();\n    for (    String fulltextCondition : fulltextConditions) {\n      queryBuilder.append(fulltextCondition).append(\" \");\n    }\n  }\n  Collection<Filter.PropertyRestriction> propertyRestrictions=filter.getPropertyRestrictions();\n  if (propertyRestrictions != null && !propertyRestrictions.isEmpty()) {\n    for (    Filter.PropertyRestriction pr : propertyRestrictions) {\n      if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n        String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n        if (isSupportedHttpRequest(nativeQueryString)) {\n          String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n          if (!\"select\".equals(requestHandlerString)) {\n            if (requestHandlerString.charAt(0) != '/') {\n              requestHandlerString=\"/\" + requestHandlerString;\n            }\n            solrQuery.setRequestHandler(requestHandlerString);\n          }\n          String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n          for (          String param : parameterString.split(\"&\")) {\n            String[] kv=param.split(\"=\");\n            if (kv.length != 2) {\n              throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n            }\n else {\n              if (\"stream.body\".equals(kv[0])) {\n                kv[0]=\"q\";\n                String mltFlString=\"mlt.fl=\";\n                int mltFlIndex=parameterString.indexOf(mltFlString);\n                if (mltFlIndex > -1) {\n                  int beginIndex=mltFlIndex + mltFlString.length();\n                  int endIndex=parameterString.indexOf('&',beginIndex);\n                  String fields;\n                  if (endIndex > beginIndex) {\n                    fields=parameterString.substring(beginIndex,endIndex);\n                  }\n else {\n                    fields=parameterString.substring(beginIndex);\n                  }\n                  kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n                }\n              }\n              solrQuery.setParam(kv[0],kv[1]);\n            }\n          }\n          return solrQuery;\n        }\n else {\n          queryBuilder.append(nativeQueryString);\n        }\n      }\n else {\n        if (pr.propertyName.contains(\"/\")) {\n          continue;\n        }\n        if (\"rep:excerpt\".equals(pr.propertyName)) {\n          continue;\n        }\n        String first=null;\n        if (pr.first != null) {\n          first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n        }\n        String last=null;\n        if (pr.last != null) {\n          last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n        }\n        String prField=configuration.getFieldForPropertyRestriction(pr);\n        CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n        if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n          queryBuilder.append(configuration.getPathField());\n          queryBuilder.append(':');\n          queryBuilder.append(first);\n        }\n else {\n          if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(first);\n          }\n else           if (pr.first == null && pr.last == null) {\n            if (!queryBuilder.toString().contains(fieldName + \":\")) {\n              queryBuilder.append(fieldName).append(':');\n              queryBuilder.append('*');\n            }\n          }\n else           if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n          }\n else           if (pr.isLike) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n          }\n else {\n            throw new RuntimeException(\"[unexpected!] not handled case\");\n          }\n        }\n      }\n      queryBuilder.append(\" \");\n    }\n  }\n  String[] pts=filter.getPrimaryTypes().toArray(new String[filter.getPrimaryTypes().size()]);\n  for (int i=0; i < pts.length; i++) {\n    String pt=pts[i];\n    if (i == 0) {\n      queryBuilder.append(\"(\");\n    }\n    if (i > 0 && i < pts.length) {\n      queryBuilder.append(\"OR \");\n    }\n    queryBuilder.append(\"jcr\\\\:primaryType\").append(':').append(partialEscape(pt)).append(\" \");\n    if (i == pts.length - 1) {\n      queryBuilder.append(\")\");\n      queryBuilder.append(' ');\n    }\n  }\n  Filter.PathRestriction pathRestriction=filter.getPathRestriction();\n  if (pathRestriction != null) {\n    String path=purgePath(filter);\n    String fieldName=configuration.getFieldForPathRestriction(pathRestriction);\n    if (fieldName != null) {\n      queryBuilder.append(fieldName);\n      queryBuilder.append(':');\n      queryBuilder.append(path);\n    }\n  }\n  if (queryBuilder.length() == 0) {\n    queryBuilder.append(\"*:*\");\n  }\n  String escapedQuery=queryBuilder.toString();\n  solrQuery.setQuery(escapedQuery);\n  if (log.isDebugEnabled()) {\n    log.debug(\"JCR query {} has been converted to Solr query {}\",filter.getQueryStatement(),solrQuery.toString());\n  }\n  return solrQuery;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 867,
                    "astHeight": 25
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 109,
                    "startLineNumber": 199,
                    "startColumnNumber": 35,
                    "endLineNumber": 199,
                    "endColumnNumber": 144
                },
                "nodeContext": "(pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))",
                "nodeType": "InfixExpression",
                "astNodeNumber": 35,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "null"
        },
        {
            "nodeContext": "null",
            "nodeType": "NullLiteral",
            "nodePosition": {
                "charLength": 4,
                "startLineNumber": 199,
                "startColumnNumber": 88,
                "endLineNumber": 199,
                "endColumnNumber": 92
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 15,
                        "startLineNumber": 199,
                        "startColumnNumber": 77,
                        "endLineNumber": 199,
                        "endColumnNumber": 92
                    },
                    "nodeContext": "pr.last != null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
                    "nodePosition": {
                        "charLength": 35,
                        "startLineNumber": 199,
                        "startColumnNumber": 77,
                        "endLineNumber": 199,
                        "endColumnNumber": 112
                    },
                    "nodeContext": "pr.last != null && pr.first == null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 37,
                        "startLineNumber": 199,
                        "startColumnNumber": 76,
                        "endLineNumber": 199,
                        "endColumnNumber": 113
                    },
                    "nodeContext": "(pr.last != null && pr.first == null)",
                    "nodeType": "ParenthesizedExpression",
                    "astNodeNumber": 12,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 109,
                        "startLineNumber": 199,
                        "startColumnNumber": 35,
                        "endLineNumber": 199,
                        "endColumnNumber": 144
                    },
                    "nodeContext": "(pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 35,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 936,
                        "startLineNumber": 199,
                        "startColumnNumber": 31,
                        "endLineNumber": 209,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n  queryBuilder.append(fieldName).append(':');\n  queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n}\n else if (pr.isLike) {\n  queryBuilder.append(fieldName).append(':');\n  queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n}\n else {\n  throw new RuntimeException(\"[unexpected!] not handled case\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 105,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1260,
                        "startLineNumber": 194,
                        "startColumnNumber": 31,
                        "endLineNumber": 209,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "if (pr.first == null && pr.last == null) {\n  if (!queryBuilder.toString().contains(fieldName + \":\")) {\n    queryBuilder.append(fieldName).append(':');\n    queryBuilder.append('*');\n  }\n}\n else if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n  queryBuilder.append(fieldName).append(':');\n  queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n}\n else if (pr.isLike) {\n  queryBuilder.append(fieldName).append(':');\n  queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n}\n else {\n  throw new RuntimeException(\"[unexpected!] not handled case\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 142,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1490,
                        "startLineNumber": 191,
                        "startColumnNumber": 24,
                        "endLineNumber": 209,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n  queryBuilder.append(fieldName).append(':');\n  queryBuilder.append(first);\n}\n else if (pr.first == null && pr.last == null) {\n  if (!queryBuilder.toString().contains(fieldName + \":\")) {\n    queryBuilder.append(fieldName).append(':');\n    queryBuilder.append('*');\n  }\n}\n else if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n  queryBuilder.append(fieldName).append(':');\n  queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n}\n else if (pr.isLike) {\n  queryBuilder.append(fieldName).append(':');\n  queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n}\n else {\n  throw new RuntimeException(\"[unexpected!] not handled case\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 177,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1538,
                        "startLineNumber": 190,
                        "startColumnNumber": 27,
                        "endLineNumber": 210,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n    queryBuilder.append(fieldName).append(':');\n    queryBuilder.append(first);\n  }\n else   if (pr.first == null && pr.last == null) {\n    if (!queryBuilder.toString().contains(fieldName + \":\")) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append('*');\n    }\n  }\n else   if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n    queryBuilder.append(fieldName).append(':');\n    queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n  }\n else   if (pr.isLike) {\n    queryBuilder.append(fieldName).append(':');\n    queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n  }\n else {\n    throw new RuntimeException(\"[unexpected!] not handled case\");\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 178,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1791,
                        "startLineNumber": 186,
                        "startColumnNumber": 20,
                        "endLineNumber": 210,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n  queryBuilder.append(configuration.getPathField());\n  queryBuilder.append(':');\n  queryBuilder.append(first);\n}\n else {\n  if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n    queryBuilder.append(fieldName).append(':');\n    queryBuilder.append(first);\n  }\n else   if (pr.first == null && pr.last == null) {\n    if (!queryBuilder.toString().contains(fieldName + \":\")) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append('*');\n    }\n  }\n else   if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n    queryBuilder.append(fieldName).append(':');\n    queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n  }\n else   if (pr.isLike) {\n    queryBuilder.append(fieldName).append(':');\n    queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n  }\n else {\n    throw new RuntimeException(\"[unexpected!] not handled case\");\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 203,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 2798,
                        "startLineNumber": 164,
                        "startColumnNumber": 23,
                        "endLineNumber": 211,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  if (pr.propertyName.contains(\"/\")) {\n    continue;\n  }\n  if (\"rep:excerpt\".equals(pr.propertyName)) {\n    continue;\n  }\n  String first=null;\n  if (pr.first != null) {\n    first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n  }\n  String last=null;\n  if (pr.last != null) {\n    last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n  }\n  String prField=configuration.getFieldForPropertyRestriction(pr);\n  CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n  if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n    queryBuilder.append(configuration.getPathField());\n    queryBuilder.append(':');\n    queryBuilder.append(first);\n  }\n else {\n    if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(first);\n    }\n else     if (pr.first == null && pr.last == null) {\n      if (!queryBuilder.toString().contains(fieldName + \":\")) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append('*');\n      }\n    }\n else     if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n    }\n else     if (pr.isLike) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n    }\n else {\n      throw new RuntimeException(\"[unexpected!] not handled case\");\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 312,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 5508,
                        "startLineNumber": 124,
                        "startColumnNumber": 16,
                        "endLineNumber": 211,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n  String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n  if (isSupportedHttpRequest(nativeQueryString)) {\n    String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n    if (!\"select\".equals(requestHandlerString)) {\n      if (requestHandlerString.charAt(0) != '/') {\n        requestHandlerString=\"/\" + requestHandlerString;\n      }\n      solrQuery.setRequestHandler(requestHandlerString);\n    }\n    String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n    for (    String param : parameterString.split(\"&\")) {\n      String[] kv=param.split(\"=\");\n      if (kv.length != 2) {\n        throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n      }\n else {\n        if (\"stream.body\".equals(kv[0])) {\n          kv[0]=\"q\";\n          String mltFlString=\"mlt.fl=\";\n          int mltFlIndex=parameterString.indexOf(mltFlString);\n          if (mltFlIndex > -1) {\n            int beginIndex=mltFlIndex + mltFlString.length();\n            int endIndex=parameterString.indexOf('&',beginIndex);\n            String fields;\n            if (endIndex > beginIndex) {\n              fields=parameterString.substring(beginIndex,endIndex);\n            }\n else {\n              fields=parameterString.substring(beginIndex);\n            }\n            kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n          }\n        }\n        solrQuery.setParam(kv[0],kv[1]);\n      }\n    }\n    return solrQuery;\n  }\n else {\n    queryBuilder.append(nativeQueryString);\n  }\n}\n else {\n  if (pr.propertyName.contains(\"/\")) {\n    continue;\n  }\n  if (\"rep:excerpt\".equals(pr.propertyName)) {\n    continue;\n  }\n  String first=null;\n  if (pr.first != null) {\n    first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n  }\n  String last=null;\n  if (pr.last != null) {\n    last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n  }\n  String prField=configuration.getFieldForPropertyRestriction(pr);\n  CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n  if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n    queryBuilder.append(configuration.getPathField());\n    queryBuilder.append(':');\n    queryBuilder.append(first);\n  }\n else {\n    if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(first);\n    }\n else     if (pr.first == null && pr.last == null) {\n      if (!queryBuilder.toString().contains(fieldName + \":\")) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append('*');\n      }\n    }\n else     if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n    }\n else     if (pr.isLike) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n    }\n else {\n      throw new RuntimeException(\"[unexpected!] not handled case\");\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 546,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 5622,
                        "startLineNumber": 122,
                        "startColumnNumber": 71,
                        "endLineNumber": 213,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n    String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n    if (isSupportedHttpRequest(nativeQueryString)) {\n      String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n      if (!\"select\".equals(requestHandlerString)) {\n        if (requestHandlerString.charAt(0) != '/') {\n          requestHandlerString=\"/\" + requestHandlerString;\n        }\n        solrQuery.setRequestHandler(requestHandlerString);\n      }\n      String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n      for (      String param : parameterString.split(\"&\")) {\n        String[] kv=param.split(\"=\");\n        if (kv.length != 2) {\n          throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n        }\n else {\n          if (\"stream.body\".equals(kv[0])) {\n            kv[0]=\"q\";\n            String mltFlString=\"mlt.fl=\";\n            int mltFlIndex=parameterString.indexOf(mltFlString);\n            if (mltFlIndex > -1) {\n              int beginIndex=mltFlIndex + mltFlString.length();\n              int endIndex=parameterString.indexOf('&',beginIndex);\n              String fields;\n              if (endIndex > beginIndex) {\n                fields=parameterString.substring(beginIndex,endIndex);\n              }\n else {\n                fields=parameterString.substring(beginIndex);\n              }\n              kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n            }\n          }\n          solrQuery.setParam(kv[0],kv[1]);\n        }\n      }\n      return solrQuery;\n    }\n else {\n      queryBuilder.append(nativeQueryString);\n    }\n  }\n else {\n    if (pr.propertyName.contains(\"/\")) {\n      continue;\n    }\n    if (\"rep:excerpt\".equals(pr.propertyName)) {\n      continue;\n    }\n    String first=null;\n    if (pr.first != null) {\n      first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n    }\n    String last=null;\n    if (pr.last != null) {\n      last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n    }\n    String prField=configuration.getFieldForPropertyRestriction(pr);\n    CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n    if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n      queryBuilder.append(configuration.getPathField());\n      queryBuilder.append(':');\n      queryBuilder.append(first);\n    }\n else {\n      if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(first);\n      }\n else       if (pr.first == null && pr.last == null) {\n        if (!queryBuilder.toString().contains(fieldName + \":\")) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append('*');\n        }\n      }\n else       if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n      }\n else       if (pr.isLike) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n      }\n else {\n        throw new RuntimeException(\"[unexpected!] not handled case\");\n      }\n    }\n  }\n  queryBuilder.append(\" \");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 552,
                    "astHeight": 20
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 5681,
                        "startLineNumber": 122,
                        "startColumnNumber": 12,
                        "endLineNumber": 213,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (Filter.PropertyRestriction pr : propertyRestrictions) {\n  if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n    String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n    if (isSupportedHttpRequest(nativeQueryString)) {\n      String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n      if (!\"select\".equals(requestHandlerString)) {\n        if (requestHandlerString.charAt(0) != '/') {\n          requestHandlerString=\"/\" + requestHandlerString;\n        }\n        solrQuery.setRequestHandler(requestHandlerString);\n      }\n      String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n      for (      String param : parameterString.split(\"&\")) {\n        String[] kv=param.split(\"=\");\n        if (kv.length != 2) {\n          throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n        }\n else {\n          if (\"stream.body\".equals(kv[0])) {\n            kv[0]=\"q\";\n            String mltFlString=\"mlt.fl=\";\n            int mltFlIndex=parameterString.indexOf(mltFlString);\n            if (mltFlIndex > -1) {\n              int beginIndex=mltFlIndex + mltFlString.length();\n              int endIndex=parameterString.indexOf('&',beginIndex);\n              String fields;\n              if (endIndex > beginIndex) {\n                fields=parameterString.substring(beginIndex,endIndex);\n              }\n else {\n                fields=parameterString.substring(beginIndex);\n              }\n              kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n            }\n          }\n          solrQuery.setParam(kv[0],kv[1]);\n        }\n      }\n      return solrQuery;\n    }\n else {\n      queryBuilder.append(nativeQueryString);\n    }\n  }\n else {\n    if (pr.propertyName.contains(\"/\")) {\n      continue;\n    }\n    if (\"rep:excerpt\".equals(pr.propertyName)) {\n      continue;\n    }\n    String first=null;\n    if (pr.first != null) {\n      first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n    }\n    String last=null;\n    if (pr.last != null) {\n      last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n    }\n    String prField=configuration.getFieldForPropertyRestriction(pr);\n    CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n    if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n      queryBuilder.append(configuration.getPathField());\n      queryBuilder.append(':');\n      queryBuilder.append(first);\n    }\n else {\n      if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(first);\n      }\n else       if (pr.first == null && pr.last == null) {\n        if (!queryBuilder.toString().contains(fieldName + \":\")) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append('*');\n        }\n      }\n else       if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n      }\n else       if (pr.isLike) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n      }\n else {\n        throw new RuntimeException(\"[unexpected!] not handled case\");\n      }\n    }\n  }\n  queryBuilder.append(\" \");\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 560,
                    "astHeight": 21
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 5705,
                        "startLineNumber": 121,
                        "startColumnNumber": 77,
                        "endLineNumber": 214,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  for (  Filter.PropertyRestriction pr : propertyRestrictions) {\n    if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n      String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n      if (isSupportedHttpRequest(nativeQueryString)) {\n        String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n        if (!\"select\".equals(requestHandlerString)) {\n          if (requestHandlerString.charAt(0) != '/') {\n            requestHandlerString=\"/\" + requestHandlerString;\n          }\n          solrQuery.setRequestHandler(requestHandlerString);\n        }\n        String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n        for (        String param : parameterString.split(\"&\")) {\n          String[] kv=param.split(\"=\");\n          if (kv.length != 2) {\n            throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n          }\n else {\n            if (\"stream.body\".equals(kv[0])) {\n              kv[0]=\"q\";\n              String mltFlString=\"mlt.fl=\";\n              int mltFlIndex=parameterString.indexOf(mltFlString);\n              if (mltFlIndex > -1) {\n                int beginIndex=mltFlIndex + mltFlString.length();\n                int endIndex=parameterString.indexOf('&',beginIndex);\n                String fields;\n                if (endIndex > beginIndex) {\n                  fields=parameterString.substring(beginIndex,endIndex);\n                }\n else {\n                  fields=parameterString.substring(beginIndex);\n                }\n                kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n              }\n            }\n            solrQuery.setParam(kv[0],kv[1]);\n          }\n        }\n        return solrQuery;\n      }\n else {\n        queryBuilder.append(nativeQueryString);\n      }\n    }\n else {\n      if (pr.propertyName.contains(\"/\")) {\n        continue;\n      }\n      if (\"rep:excerpt\".equals(pr.propertyName)) {\n        continue;\n      }\n      String first=null;\n      if (pr.first != null) {\n        first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n      }\n      String last=null;\n      if (pr.last != null) {\n        last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n      }\n      String prField=configuration.getFieldForPropertyRestriction(pr);\n      CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n      if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n        queryBuilder.append(configuration.getPathField());\n        queryBuilder.append(':');\n        queryBuilder.append(first);\n      }\n else {\n        if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(first);\n        }\n else         if (pr.first == null && pr.last == null) {\n          if (!queryBuilder.toString().contains(fieldName + \":\")) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append('*');\n          }\n        }\n else         if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n        }\n else         if (pr.isLike) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n        }\n else {\n          throw new RuntimeException(\"[unexpected!] not handled case\");\n        }\n      }\n    }\n    queryBuilder.append(\" \");\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 561,
                    "astHeight": 22
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 5774,
                        "startLineNumber": 121,
                        "startColumnNumber": 8,
                        "endLineNumber": 214,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (propertyRestrictions != null && !propertyRestrictions.isEmpty()) {\n  for (  Filter.PropertyRestriction pr : propertyRestrictions) {\n    if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n      String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n      if (isSupportedHttpRequest(nativeQueryString)) {\n        String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n        if (!\"select\".equals(requestHandlerString)) {\n          if (requestHandlerString.charAt(0) != '/') {\n            requestHandlerString=\"/\" + requestHandlerString;\n          }\n          solrQuery.setRequestHandler(requestHandlerString);\n        }\n        String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n        for (        String param : parameterString.split(\"&\")) {\n          String[] kv=param.split(\"=\");\n          if (kv.length != 2) {\n            throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n          }\n else {\n            if (\"stream.body\".equals(kv[0])) {\n              kv[0]=\"q\";\n              String mltFlString=\"mlt.fl=\";\n              int mltFlIndex=parameterString.indexOf(mltFlString);\n              if (mltFlIndex > -1) {\n                int beginIndex=mltFlIndex + mltFlString.length();\n                int endIndex=parameterString.indexOf('&',beginIndex);\n                String fields;\n                if (endIndex > beginIndex) {\n                  fields=parameterString.substring(beginIndex,endIndex);\n                }\n else {\n                  fields=parameterString.substring(beginIndex);\n                }\n                kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n              }\n            }\n            solrQuery.setParam(kv[0],kv[1]);\n          }\n        }\n        return solrQuery;\n      }\n else {\n        queryBuilder.append(nativeQueryString);\n      }\n    }\n else {\n      if (pr.propertyName.contains(\"/\")) {\n        continue;\n      }\n      if (\"rep:excerpt\".equals(pr.propertyName)) {\n        continue;\n      }\n      String first=null;\n      if (pr.first != null) {\n        first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n      }\n      String last=null;\n      if (pr.last != null) {\n        last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n      }\n      String prField=configuration.getFieldForPropertyRestriction(pr);\n      CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n      if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n        queryBuilder.append(configuration.getPathField());\n        queryBuilder.append(':');\n        queryBuilder.append(first);\n      }\n else {\n        if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(first);\n        }\n else         if (pr.first == null && pr.last == null) {\n          if (!queryBuilder.toString().contains(fieldName + \":\")) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append('*');\n          }\n        }\n else         if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n        }\n else         if (pr.isLike) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n        }\n else {\n          throw new RuntimeException(\"[unexpected!] not handled case\");\n        }\n      }\n    }\n    queryBuilder.append(\" \");\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 570,
                    "astHeight": 23
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 7985,
                        "startLineNumber": 103,
                        "startColumnNumber": 46,
                        "endLineNumber": 255,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  SolrQuery solrQuery=new SolrQuery();\n  setDefaults(solrQuery);\n  StringBuilder queryBuilder=new StringBuilder();\n  if (filter.getFullTextConstraint() != null) {\n    queryBuilder.append(getFullTextQuery(filter.getFullTextConstraint()));\n    queryBuilder.append(' ');\n  }\n else   if (filter.getFulltextConditions() != null) {\n    Collection<String> fulltextConditions=filter.getFulltextConditions();\n    for (    String fulltextCondition : fulltextConditions) {\n      queryBuilder.append(fulltextCondition).append(\" \");\n    }\n  }\n  Collection<Filter.PropertyRestriction> propertyRestrictions=filter.getPropertyRestrictions();\n  if (propertyRestrictions != null && !propertyRestrictions.isEmpty()) {\n    for (    Filter.PropertyRestriction pr : propertyRestrictions) {\n      if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n        String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n        if (isSupportedHttpRequest(nativeQueryString)) {\n          String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n          if (!\"select\".equals(requestHandlerString)) {\n            if (requestHandlerString.charAt(0) != '/') {\n              requestHandlerString=\"/\" + requestHandlerString;\n            }\n            solrQuery.setRequestHandler(requestHandlerString);\n          }\n          String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n          for (          String param : parameterString.split(\"&\")) {\n            String[] kv=param.split(\"=\");\n            if (kv.length != 2) {\n              throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n            }\n else {\n              if (\"stream.body\".equals(kv[0])) {\n                kv[0]=\"q\";\n                String mltFlString=\"mlt.fl=\";\n                int mltFlIndex=parameterString.indexOf(mltFlString);\n                if (mltFlIndex > -1) {\n                  int beginIndex=mltFlIndex + mltFlString.length();\n                  int endIndex=parameterString.indexOf('&',beginIndex);\n                  String fields;\n                  if (endIndex > beginIndex) {\n                    fields=parameterString.substring(beginIndex,endIndex);\n                  }\n else {\n                    fields=parameterString.substring(beginIndex);\n                  }\n                  kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n                }\n              }\n              solrQuery.setParam(kv[0],kv[1]);\n            }\n          }\n          return solrQuery;\n        }\n else {\n          queryBuilder.append(nativeQueryString);\n        }\n      }\n else {\n        if (pr.propertyName.contains(\"/\")) {\n          continue;\n        }\n        if (\"rep:excerpt\".equals(pr.propertyName)) {\n          continue;\n        }\n        String first=null;\n        if (pr.first != null) {\n          first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n        }\n        String last=null;\n        if (pr.last != null) {\n          last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n        }\n        String prField=configuration.getFieldForPropertyRestriction(pr);\n        CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n        if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n          queryBuilder.append(configuration.getPathField());\n          queryBuilder.append(':');\n          queryBuilder.append(first);\n        }\n else {\n          if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(first);\n          }\n else           if (pr.first == null && pr.last == null) {\n            if (!queryBuilder.toString().contains(fieldName + \":\")) {\n              queryBuilder.append(fieldName).append(':');\n              queryBuilder.append('*');\n            }\n          }\n else           if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n          }\n else           if (pr.isLike) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n          }\n else {\n            throw new RuntimeException(\"[unexpected!] not handled case\");\n          }\n        }\n      }\n      queryBuilder.append(\" \");\n    }\n  }\n  String[] pts=filter.getPrimaryTypes().toArray(new String[filter.getPrimaryTypes().size()]);\n  for (int i=0; i < pts.length; i++) {\n    String pt=pts[i];\n    if (i == 0) {\n      queryBuilder.append(\"(\");\n    }\n    if (i > 0 && i < pts.length) {\n      queryBuilder.append(\"OR \");\n    }\n    queryBuilder.append(\"jcr\\\\:primaryType\").append(':').append(partialEscape(pt)).append(\" \");\n    if (i == pts.length - 1) {\n      queryBuilder.append(\")\");\n      queryBuilder.append(' ');\n    }\n  }\n  Filter.PathRestriction pathRestriction=filter.getPathRestriction();\n  if (pathRestriction != null) {\n    String path=purgePath(filter);\n    String fieldName=configuration.getFieldForPathRestriction(pathRestriction);\n    if (fieldName != null) {\n      queryBuilder.append(fieldName);\n      queryBuilder.append(':');\n      queryBuilder.append(path);\n    }\n  }\n  if (queryBuilder.length() == 0) {\n    queryBuilder.append(\"*:*\");\n  }\n  String escapedQuery=queryBuilder.toString();\n  solrQuery.setQuery(escapedQuery);\n  if (log.isDebugEnabled()) {\n    log.debug(\"JCR query {} has been converted to Solr query {}\",filter.getQueryStatement(),solrQuery.toString());\n  }\n  return solrQuery;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 858,
                    "astHeight": 24
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8027,
                        "startLineNumber": 103,
                        "startColumnNumber": 4,
                        "endLineNumber": 255,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private SolrQuery getQuery(Filter filter){\n  SolrQuery solrQuery=new SolrQuery();\n  setDefaults(solrQuery);\n  StringBuilder queryBuilder=new StringBuilder();\n  if (filter.getFullTextConstraint() != null) {\n    queryBuilder.append(getFullTextQuery(filter.getFullTextConstraint()));\n    queryBuilder.append(' ');\n  }\n else   if (filter.getFulltextConditions() != null) {\n    Collection<String> fulltextConditions=filter.getFulltextConditions();\n    for (    String fulltextCondition : fulltextConditions) {\n      queryBuilder.append(fulltextCondition).append(\" \");\n    }\n  }\n  Collection<Filter.PropertyRestriction> propertyRestrictions=filter.getPropertyRestrictions();\n  if (propertyRestrictions != null && !propertyRestrictions.isEmpty()) {\n    for (    Filter.PropertyRestriction pr : propertyRestrictions) {\n      if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n        String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n        if (isSupportedHttpRequest(nativeQueryString)) {\n          String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n          if (!\"select\".equals(requestHandlerString)) {\n            if (requestHandlerString.charAt(0) != '/') {\n              requestHandlerString=\"/\" + requestHandlerString;\n            }\n            solrQuery.setRequestHandler(requestHandlerString);\n          }\n          String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n          for (          String param : parameterString.split(\"&\")) {\n            String[] kv=param.split(\"=\");\n            if (kv.length != 2) {\n              throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n            }\n else {\n              if (\"stream.body\".equals(kv[0])) {\n                kv[0]=\"q\";\n                String mltFlString=\"mlt.fl=\";\n                int mltFlIndex=parameterString.indexOf(mltFlString);\n                if (mltFlIndex > -1) {\n                  int beginIndex=mltFlIndex + mltFlString.length();\n                  int endIndex=parameterString.indexOf('&',beginIndex);\n                  String fields;\n                  if (endIndex > beginIndex) {\n                    fields=parameterString.substring(beginIndex,endIndex);\n                  }\n else {\n                    fields=parameterString.substring(beginIndex);\n                  }\n                  kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n                }\n              }\n              solrQuery.setParam(kv[0],kv[1]);\n            }\n          }\n          return solrQuery;\n        }\n else {\n          queryBuilder.append(nativeQueryString);\n        }\n      }\n else {\n        if (pr.propertyName.contains(\"/\")) {\n          continue;\n        }\n        if (\"rep:excerpt\".equals(pr.propertyName)) {\n          continue;\n        }\n        String first=null;\n        if (pr.first != null) {\n          first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n        }\n        String last=null;\n        if (pr.last != null) {\n          last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n        }\n        String prField=configuration.getFieldForPropertyRestriction(pr);\n        CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n        if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n          queryBuilder.append(configuration.getPathField());\n          queryBuilder.append(':');\n          queryBuilder.append(first);\n        }\n else {\n          if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(first);\n          }\n else           if (pr.first == null && pr.last == null) {\n            if (!queryBuilder.toString().contains(fieldName + \":\")) {\n              queryBuilder.append(fieldName).append(':');\n              queryBuilder.append('*');\n            }\n          }\n else           if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n          }\n else           if (pr.isLike) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n          }\n else {\n            throw new RuntimeException(\"[unexpected!] not handled case\");\n          }\n        }\n      }\n      queryBuilder.append(\" \");\n    }\n  }\n  String[] pts=filter.getPrimaryTypes().toArray(new String[filter.getPrimaryTypes().size()]);\n  for (int i=0; i < pts.length; i++) {\n    String pt=pts[i];\n    if (i == 0) {\n      queryBuilder.append(\"(\");\n    }\n    if (i > 0 && i < pts.length) {\n      queryBuilder.append(\"OR \");\n    }\n    queryBuilder.append(\"jcr\\\\:primaryType\").append(':').append(partialEscape(pt)).append(\" \");\n    if (i == pts.length - 1) {\n      queryBuilder.append(\")\");\n      queryBuilder.append(' ');\n    }\n  }\n  Filter.PathRestriction pathRestriction=filter.getPathRestriction();\n  if (pathRestriction != null) {\n    String path=purgePath(filter);\n    String fieldName=configuration.getFieldForPathRestriction(pathRestriction);\n    if (fieldName != null) {\n      queryBuilder.append(fieldName);\n      queryBuilder.append(':');\n      queryBuilder.append(path);\n    }\n  }\n  if (queryBuilder.length() == 0) {\n    queryBuilder.append(\"*:*\");\n  }\n  String escapedQuery=queryBuilder.toString();\n  solrQuery.setQuery(escapedQuery);\n  if (log.isDebugEnabled()) {\n    log.debug(\"JCR query {} has been converted to Solr query {}\",filter.getQueryStatement(),solrQuery.toString());\n  }\n  return solrQuery;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 867,
                    "astHeight": 25
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 109,
                    "startLineNumber": 199,
                    "startColumnNumber": 35,
                    "endLineNumber": 199,
                    "endColumnNumber": 144
                },
                "nodeContext": "(pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))",
                "nodeType": "InfixExpression",
                "astNodeNumber": 35,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "null"
        },
        {
            "nodeContext": "null",
            "nodeType": "NullLiteral",
            "nodePosition": {
                "charLength": 4,
                "startLineNumber": 199,
                "startColumnNumber": 108,
                "endLineNumber": 199,
                "endColumnNumber": 112
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 16,
                        "startLineNumber": 199,
                        "startColumnNumber": 96,
                        "endLineNumber": 199,
                        "endColumnNumber": 112
                    },
                    "nodeContext": "pr.first == null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
                    "nodePosition": {
                        "charLength": 35,
                        "startLineNumber": 199,
                        "startColumnNumber": 77,
                        "endLineNumber": 199,
                        "endColumnNumber": 112
                    },
                    "nodeContext": "pr.last != null && pr.first == null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 37,
                        "startLineNumber": 199,
                        "startColumnNumber": 76,
                        "endLineNumber": 199,
                        "endColumnNumber": 113
                    },
                    "nodeContext": "(pr.last != null && pr.first == null)",
                    "nodeType": "ParenthesizedExpression",
                    "astNodeNumber": 12,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 109,
                        "startLineNumber": 199,
                        "startColumnNumber": 35,
                        "endLineNumber": 199,
                        "endColumnNumber": 144
                    },
                    "nodeContext": "(pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 35,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 936,
                        "startLineNumber": 199,
                        "startColumnNumber": 31,
                        "endLineNumber": 209,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n  queryBuilder.append(fieldName).append(':');\n  queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n}\n else if (pr.isLike) {\n  queryBuilder.append(fieldName).append(':');\n  queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n}\n else {\n  throw new RuntimeException(\"[unexpected!] not handled case\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 105,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1260,
                        "startLineNumber": 194,
                        "startColumnNumber": 31,
                        "endLineNumber": 209,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "if (pr.first == null && pr.last == null) {\n  if (!queryBuilder.toString().contains(fieldName + \":\")) {\n    queryBuilder.append(fieldName).append(':');\n    queryBuilder.append('*');\n  }\n}\n else if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n  queryBuilder.append(fieldName).append(':');\n  queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n}\n else if (pr.isLike) {\n  queryBuilder.append(fieldName).append(':');\n  queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n}\n else {\n  throw new RuntimeException(\"[unexpected!] not handled case\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 142,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1490,
                        "startLineNumber": 191,
                        "startColumnNumber": 24,
                        "endLineNumber": 209,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n  queryBuilder.append(fieldName).append(':');\n  queryBuilder.append(first);\n}\n else if (pr.first == null && pr.last == null) {\n  if (!queryBuilder.toString().contains(fieldName + \":\")) {\n    queryBuilder.append(fieldName).append(':');\n    queryBuilder.append('*');\n  }\n}\n else if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n  queryBuilder.append(fieldName).append(':');\n  queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n}\n else if (pr.isLike) {\n  queryBuilder.append(fieldName).append(':');\n  queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n}\n else {\n  throw new RuntimeException(\"[unexpected!] not handled case\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 177,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1538,
                        "startLineNumber": 190,
                        "startColumnNumber": 27,
                        "endLineNumber": 210,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n    queryBuilder.append(fieldName).append(':');\n    queryBuilder.append(first);\n  }\n else   if (pr.first == null && pr.last == null) {\n    if (!queryBuilder.toString().contains(fieldName + \":\")) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append('*');\n    }\n  }\n else   if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n    queryBuilder.append(fieldName).append(':');\n    queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n  }\n else   if (pr.isLike) {\n    queryBuilder.append(fieldName).append(':');\n    queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n  }\n else {\n    throw new RuntimeException(\"[unexpected!] not handled case\");\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 178,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1791,
                        "startLineNumber": 186,
                        "startColumnNumber": 20,
                        "endLineNumber": 210,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n  queryBuilder.append(configuration.getPathField());\n  queryBuilder.append(':');\n  queryBuilder.append(first);\n}\n else {\n  if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n    queryBuilder.append(fieldName).append(':');\n    queryBuilder.append(first);\n  }\n else   if (pr.first == null && pr.last == null) {\n    if (!queryBuilder.toString().contains(fieldName + \":\")) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append('*');\n    }\n  }\n else   if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n    queryBuilder.append(fieldName).append(':');\n    queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n  }\n else   if (pr.isLike) {\n    queryBuilder.append(fieldName).append(':');\n    queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n  }\n else {\n    throw new RuntimeException(\"[unexpected!] not handled case\");\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 203,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 2798,
                        "startLineNumber": 164,
                        "startColumnNumber": 23,
                        "endLineNumber": 211,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  if (pr.propertyName.contains(\"/\")) {\n    continue;\n  }\n  if (\"rep:excerpt\".equals(pr.propertyName)) {\n    continue;\n  }\n  String first=null;\n  if (pr.first != null) {\n    first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n  }\n  String last=null;\n  if (pr.last != null) {\n    last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n  }\n  String prField=configuration.getFieldForPropertyRestriction(pr);\n  CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n  if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n    queryBuilder.append(configuration.getPathField());\n    queryBuilder.append(':');\n    queryBuilder.append(first);\n  }\n else {\n    if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(first);\n    }\n else     if (pr.first == null && pr.last == null) {\n      if (!queryBuilder.toString().contains(fieldName + \":\")) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append('*');\n      }\n    }\n else     if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n    }\n else     if (pr.isLike) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n    }\n else {\n      throw new RuntimeException(\"[unexpected!] not handled case\");\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 312,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 5508,
                        "startLineNumber": 124,
                        "startColumnNumber": 16,
                        "endLineNumber": 211,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n  String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n  if (isSupportedHttpRequest(nativeQueryString)) {\n    String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n    if (!\"select\".equals(requestHandlerString)) {\n      if (requestHandlerString.charAt(0) != '/') {\n        requestHandlerString=\"/\" + requestHandlerString;\n      }\n      solrQuery.setRequestHandler(requestHandlerString);\n    }\n    String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n    for (    String param : parameterString.split(\"&\")) {\n      String[] kv=param.split(\"=\");\n      if (kv.length != 2) {\n        throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n      }\n else {\n        if (\"stream.body\".equals(kv[0])) {\n          kv[0]=\"q\";\n          String mltFlString=\"mlt.fl=\";\n          int mltFlIndex=parameterString.indexOf(mltFlString);\n          if (mltFlIndex > -1) {\n            int beginIndex=mltFlIndex + mltFlString.length();\n            int endIndex=parameterString.indexOf('&',beginIndex);\n            String fields;\n            if (endIndex > beginIndex) {\n              fields=parameterString.substring(beginIndex,endIndex);\n            }\n else {\n              fields=parameterString.substring(beginIndex);\n            }\n            kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n          }\n        }\n        solrQuery.setParam(kv[0],kv[1]);\n      }\n    }\n    return solrQuery;\n  }\n else {\n    queryBuilder.append(nativeQueryString);\n  }\n}\n else {\n  if (pr.propertyName.contains(\"/\")) {\n    continue;\n  }\n  if (\"rep:excerpt\".equals(pr.propertyName)) {\n    continue;\n  }\n  String first=null;\n  if (pr.first != null) {\n    first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n  }\n  String last=null;\n  if (pr.last != null) {\n    last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n  }\n  String prField=configuration.getFieldForPropertyRestriction(pr);\n  CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n  if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n    queryBuilder.append(configuration.getPathField());\n    queryBuilder.append(':');\n    queryBuilder.append(first);\n  }\n else {\n    if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(first);\n    }\n else     if (pr.first == null && pr.last == null) {\n      if (!queryBuilder.toString().contains(fieldName + \":\")) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append('*');\n      }\n    }\n else     if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n    }\n else     if (pr.isLike) {\n      queryBuilder.append(fieldName).append(':');\n      queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n    }\n else {\n      throw new RuntimeException(\"[unexpected!] not handled case\");\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 546,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 5622,
                        "startLineNumber": 122,
                        "startColumnNumber": 71,
                        "endLineNumber": 213,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n    String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n    if (isSupportedHttpRequest(nativeQueryString)) {\n      String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n      if (!\"select\".equals(requestHandlerString)) {\n        if (requestHandlerString.charAt(0) != '/') {\n          requestHandlerString=\"/\" + requestHandlerString;\n        }\n        solrQuery.setRequestHandler(requestHandlerString);\n      }\n      String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n      for (      String param : parameterString.split(\"&\")) {\n        String[] kv=param.split(\"=\");\n        if (kv.length != 2) {\n          throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n        }\n else {\n          if (\"stream.body\".equals(kv[0])) {\n            kv[0]=\"q\";\n            String mltFlString=\"mlt.fl=\";\n            int mltFlIndex=parameterString.indexOf(mltFlString);\n            if (mltFlIndex > -1) {\n              int beginIndex=mltFlIndex + mltFlString.length();\n              int endIndex=parameterString.indexOf('&',beginIndex);\n              String fields;\n              if (endIndex > beginIndex) {\n                fields=parameterString.substring(beginIndex,endIndex);\n              }\n else {\n                fields=parameterString.substring(beginIndex);\n              }\n              kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n            }\n          }\n          solrQuery.setParam(kv[0],kv[1]);\n        }\n      }\n      return solrQuery;\n    }\n else {\n      queryBuilder.append(nativeQueryString);\n    }\n  }\n else {\n    if (pr.propertyName.contains(\"/\")) {\n      continue;\n    }\n    if (\"rep:excerpt\".equals(pr.propertyName)) {\n      continue;\n    }\n    String first=null;\n    if (pr.first != null) {\n      first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n    }\n    String last=null;\n    if (pr.last != null) {\n      last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n    }\n    String prField=configuration.getFieldForPropertyRestriction(pr);\n    CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n    if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n      queryBuilder.append(configuration.getPathField());\n      queryBuilder.append(':');\n      queryBuilder.append(first);\n    }\n else {\n      if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(first);\n      }\n else       if (pr.first == null && pr.last == null) {\n        if (!queryBuilder.toString().contains(fieldName + \":\")) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append('*');\n        }\n      }\n else       if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n      }\n else       if (pr.isLike) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n      }\n else {\n        throw new RuntimeException(\"[unexpected!] not handled case\");\n      }\n    }\n  }\n  queryBuilder.append(\" \");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 552,
                    "astHeight": 20
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 5681,
                        "startLineNumber": 122,
                        "startColumnNumber": 12,
                        "endLineNumber": 213,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (Filter.PropertyRestriction pr : propertyRestrictions) {\n  if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n    String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n    if (isSupportedHttpRequest(nativeQueryString)) {\n      String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n      if (!\"select\".equals(requestHandlerString)) {\n        if (requestHandlerString.charAt(0) != '/') {\n          requestHandlerString=\"/\" + requestHandlerString;\n        }\n        solrQuery.setRequestHandler(requestHandlerString);\n      }\n      String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n      for (      String param : parameterString.split(\"&\")) {\n        String[] kv=param.split(\"=\");\n        if (kv.length != 2) {\n          throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n        }\n else {\n          if (\"stream.body\".equals(kv[0])) {\n            kv[0]=\"q\";\n            String mltFlString=\"mlt.fl=\";\n            int mltFlIndex=parameterString.indexOf(mltFlString);\n            if (mltFlIndex > -1) {\n              int beginIndex=mltFlIndex + mltFlString.length();\n              int endIndex=parameterString.indexOf('&',beginIndex);\n              String fields;\n              if (endIndex > beginIndex) {\n                fields=parameterString.substring(beginIndex,endIndex);\n              }\n else {\n                fields=parameterString.substring(beginIndex);\n              }\n              kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n            }\n          }\n          solrQuery.setParam(kv[0],kv[1]);\n        }\n      }\n      return solrQuery;\n    }\n else {\n      queryBuilder.append(nativeQueryString);\n    }\n  }\n else {\n    if (pr.propertyName.contains(\"/\")) {\n      continue;\n    }\n    if (\"rep:excerpt\".equals(pr.propertyName)) {\n      continue;\n    }\n    String first=null;\n    if (pr.first != null) {\n      first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n    }\n    String last=null;\n    if (pr.last != null) {\n      last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n    }\n    String prField=configuration.getFieldForPropertyRestriction(pr);\n    CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n    if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n      queryBuilder.append(configuration.getPathField());\n      queryBuilder.append(':');\n      queryBuilder.append(first);\n    }\n else {\n      if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(first);\n      }\n else       if (pr.first == null && pr.last == null) {\n        if (!queryBuilder.toString().contains(fieldName + \":\")) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append('*');\n        }\n      }\n else       if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n      }\n else       if (pr.isLike) {\n        queryBuilder.append(fieldName).append(':');\n        queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n      }\n else {\n        throw new RuntimeException(\"[unexpected!] not handled case\");\n      }\n    }\n  }\n  queryBuilder.append(\" \");\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 560,
                    "astHeight": 21
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 5705,
                        "startLineNumber": 121,
                        "startColumnNumber": 77,
                        "endLineNumber": 214,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  for (  Filter.PropertyRestriction pr : propertyRestrictions) {\n    if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n      String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n      if (isSupportedHttpRequest(nativeQueryString)) {\n        String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n        if (!\"select\".equals(requestHandlerString)) {\n          if (requestHandlerString.charAt(0) != '/') {\n            requestHandlerString=\"/\" + requestHandlerString;\n          }\n          solrQuery.setRequestHandler(requestHandlerString);\n        }\n        String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n        for (        String param : parameterString.split(\"&\")) {\n          String[] kv=param.split(\"=\");\n          if (kv.length != 2) {\n            throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n          }\n else {\n            if (\"stream.body\".equals(kv[0])) {\n              kv[0]=\"q\";\n              String mltFlString=\"mlt.fl=\";\n              int mltFlIndex=parameterString.indexOf(mltFlString);\n              if (mltFlIndex > -1) {\n                int beginIndex=mltFlIndex + mltFlString.length();\n                int endIndex=parameterString.indexOf('&',beginIndex);\n                String fields;\n                if (endIndex > beginIndex) {\n                  fields=parameterString.substring(beginIndex,endIndex);\n                }\n else {\n                  fields=parameterString.substring(beginIndex);\n                }\n                kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n              }\n            }\n            solrQuery.setParam(kv[0],kv[1]);\n          }\n        }\n        return solrQuery;\n      }\n else {\n        queryBuilder.append(nativeQueryString);\n      }\n    }\n else {\n      if (pr.propertyName.contains(\"/\")) {\n        continue;\n      }\n      if (\"rep:excerpt\".equals(pr.propertyName)) {\n        continue;\n      }\n      String first=null;\n      if (pr.first != null) {\n        first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n      }\n      String last=null;\n      if (pr.last != null) {\n        last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n      }\n      String prField=configuration.getFieldForPropertyRestriction(pr);\n      CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n      if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n        queryBuilder.append(configuration.getPathField());\n        queryBuilder.append(':');\n        queryBuilder.append(first);\n      }\n else {\n        if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(first);\n        }\n else         if (pr.first == null && pr.last == null) {\n          if (!queryBuilder.toString().contains(fieldName + \":\")) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append('*');\n          }\n        }\n else         if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n        }\n else         if (pr.isLike) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n        }\n else {\n          throw new RuntimeException(\"[unexpected!] not handled case\");\n        }\n      }\n    }\n    queryBuilder.append(\" \");\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 561,
                    "astHeight": 22
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 5774,
                        "startLineNumber": 121,
                        "startColumnNumber": 8,
                        "endLineNumber": 214,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (propertyRestrictions != null && !propertyRestrictions.isEmpty()) {\n  for (  Filter.PropertyRestriction pr : propertyRestrictions) {\n    if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n      String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n      if (isSupportedHttpRequest(nativeQueryString)) {\n        String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n        if (!\"select\".equals(requestHandlerString)) {\n          if (requestHandlerString.charAt(0) != '/') {\n            requestHandlerString=\"/\" + requestHandlerString;\n          }\n          solrQuery.setRequestHandler(requestHandlerString);\n        }\n        String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n        for (        String param : parameterString.split(\"&\")) {\n          String[] kv=param.split(\"=\");\n          if (kv.length != 2) {\n            throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n          }\n else {\n            if (\"stream.body\".equals(kv[0])) {\n              kv[0]=\"q\";\n              String mltFlString=\"mlt.fl=\";\n              int mltFlIndex=parameterString.indexOf(mltFlString);\n              if (mltFlIndex > -1) {\n                int beginIndex=mltFlIndex + mltFlString.length();\n                int endIndex=parameterString.indexOf('&',beginIndex);\n                String fields;\n                if (endIndex > beginIndex) {\n                  fields=parameterString.substring(beginIndex,endIndex);\n                }\n else {\n                  fields=parameterString.substring(beginIndex);\n                }\n                kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n              }\n            }\n            solrQuery.setParam(kv[0],kv[1]);\n          }\n        }\n        return solrQuery;\n      }\n else {\n        queryBuilder.append(nativeQueryString);\n      }\n    }\n else {\n      if (pr.propertyName.contains(\"/\")) {\n        continue;\n      }\n      if (\"rep:excerpt\".equals(pr.propertyName)) {\n        continue;\n      }\n      String first=null;\n      if (pr.first != null) {\n        first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n      }\n      String last=null;\n      if (pr.last != null) {\n        last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n      }\n      String prField=configuration.getFieldForPropertyRestriction(pr);\n      CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n      if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n        queryBuilder.append(configuration.getPathField());\n        queryBuilder.append(':');\n        queryBuilder.append(first);\n      }\n else {\n        if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(first);\n        }\n else         if (pr.first == null && pr.last == null) {\n          if (!queryBuilder.toString().contains(fieldName + \":\")) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append('*');\n          }\n        }\n else         if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n        }\n else         if (pr.isLike) {\n          queryBuilder.append(fieldName).append(':');\n          queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n        }\n else {\n          throw new RuntimeException(\"[unexpected!] not handled case\");\n        }\n      }\n    }\n    queryBuilder.append(\" \");\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 570,
                    "astHeight": 23
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 7985,
                        "startLineNumber": 103,
                        "startColumnNumber": 46,
                        "endLineNumber": 255,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  SolrQuery solrQuery=new SolrQuery();\n  setDefaults(solrQuery);\n  StringBuilder queryBuilder=new StringBuilder();\n  if (filter.getFullTextConstraint() != null) {\n    queryBuilder.append(getFullTextQuery(filter.getFullTextConstraint()));\n    queryBuilder.append(' ');\n  }\n else   if (filter.getFulltextConditions() != null) {\n    Collection<String> fulltextConditions=filter.getFulltextConditions();\n    for (    String fulltextCondition : fulltextConditions) {\n      queryBuilder.append(fulltextCondition).append(\" \");\n    }\n  }\n  Collection<Filter.PropertyRestriction> propertyRestrictions=filter.getPropertyRestrictions();\n  if (propertyRestrictions != null && !propertyRestrictions.isEmpty()) {\n    for (    Filter.PropertyRestriction pr : propertyRestrictions) {\n      if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n        String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n        if (isSupportedHttpRequest(nativeQueryString)) {\n          String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n          if (!\"select\".equals(requestHandlerString)) {\n            if (requestHandlerString.charAt(0) != '/') {\n              requestHandlerString=\"/\" + requestHandlerString;\n            }\n            solrQuery.setRequestHandler(requestHandlerString);\n          }\n          String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n          for (          String param : parameterString.split(\"&\")) {\n            String[] kv=param.split(\"=\");\n            if (kv.length != 2) {\n              throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n            }\n else {\n              if (\"stream.body\".equals(kv[0])) {\n                kv[0]=\"q\";\n                String mltFlString=\"mlt.fl=\";\n                int mltFlIndex=parameterString.indexOf(mltFlString);\n                if (mltFlIndex > -1) {\n                  int beginIndex=mltFlIndex + mltFlString.length();\n                  int endIndex=parameterString.indexOf('&',beginIndex);\n                  String fields;\n                  if (endIndex > beginIndex) {\n                    fields=parameterString.substring(beginIndex,endIndex);\n                  }\n else {\n                    fields=parameterString.substring(beginIndex);\n                  }\n                  kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n                }\n              }\n              solrQuery.setParam(kv[0],kv[1]);\n            }\n          }\n          return solrQuery;\n        }\n else {\n          queryBuilder.append(nativeQueryString);\n        }\n      }\n else {\n        if (pr.propertyName.contains(\"/\")) {\n          continue;\n        }\n        if (\"rep:excerpt\".equals(pr.propertyName)) {\n          continue;\n        }\n        String first=null;\n        if (pr.first != null) {\n          first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n        }\n        String last=null;\n        if (pr.last != null) {\n          last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n        }\n        String prField=configuration.getFieldForPropertyRestriction(pr);\n        CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n        if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n          queryBuilder.append(configuration.getPathField());\n          queryBuilder.append(':');\n          queryBuilder.append(first);\n        }\n else {\n          if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(first);\n          }\n else           if (pr.first == null && pr.last == null) {\n            if (!queryBuilder.toString().contains(fieldName + \":\")) {\n              queryBuilder.append(fieldName).append(':');\n              queryBuilder.append('*');\n            }\n          }\n else           if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n          }\n else           if (pr.isLike) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n          }\n else {\n            throw new RuntimeException(\"[unexpected!] not handled case\");\n          }\n        }\n      }\n      queryBuilder.append(\" \");\n    }\n  }\n  String[] pts=filter.getPrimaryTypes().toArray(new String[filter.getPrimaryTypes().size()]);\n  for (int i=0; i < pts.length; i++) {\n    String pt=pts[i];\n    if (i == 0) {\n      queryBuilder.append(\"(\");\n    }\n    if (i > 0 && i < pts.length) {\n      queryBuilder.append(\"OR \");\n    }\n    queryBuilder.append(\"jcr\\\\:primaryType\").append(':').append(partialEscape(pt)).append(\" \");\n    if (i == pts.length - 1) {\n      queryBuilder.append(\")\");\n      queryBuilder.append(' ');\n    }\n  }\n  Filter.PathRestriction pathRestriction=filter.getPathRestriction();\n  if (pathRestriction != null) {\n    String path=purgePath(filter);\n    String fieldName=configuration.getFieldForPathRestriction(pathRestriction);\n    if (fieldName != null) {\n      queryBuilder.append(fieldName);\n      queryBuilder.append(':');\n      queryBuilder.append(path);\n    }\n  }\n  if (queryBuilder.length() == 0) {\n    queryBuilder.append(\"*:*\");\n  }\n  String escapedQuery=queryBuilder.toString();\n  solrQuery.setQuery(escapedQuery);\n  if (log.isDebugEnabled()) {\n    log.debug(\"JCR query {} has been converted to Solr query {}\",filter.getQueryStatement(),solrQuery.toString());\n  }\n  return solrQuery;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 858,
                    "astHeight": 24
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8027,
                        "startLineNumber": 103,
                        "startColumnNumber": 4,
                        "endLineNumber": 255,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private SolrQuery getQuery(Filter filter){\n  SolrQuery solrQuery=new SolrQuery();\n  setDefaults(solrQuery);\n  StringBuilder queryBuilder=new StringBuilder();\n  if (filter.getFullTextConstraint() != null) {\n    queryBuilder.append(getFullTextQuery(filter.getFullTextConstraint()));\n    queryBuilder.append(' ');\n  }\n else   if (filter.getFulltextConditions() != null) {\n    Collection<String> fulltextConditions=filter.getFulltextConditions();\n    for (    String fulltextCondition : fulltextConditions) {\n      queryBuilder.append(fulltextCondition).append(\" \");\n    }\n  }\n  Collection<Filter.PropertyRestriction> propertyRestrictions=filter.getPropertyRestrictions();\n  if (propertyRestrictions != null && !propertyRestrictions.isEmpty()) {\n    for (    Filter.PropertyRestriction pr : propertyRestrictions) {\n      if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n        String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n        if (isSupportedHttpRequest(nativeQueryString)) {\n          String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n          if (!\"select\".equals(requestHandlerString)) {\n            if (requestHandlerString.charAt(0) != '/') {\n              requestHandlerString=\"/\" + requestHandlerString;\n            }\n            solrQuery.setRequestHandler(requestHandlerString);\n          }\n          String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n          for (          String param : parameterString.split(\"&\")) {\n            String[] kv=param.split(\"=\");\n            if (kv.length != 2) {\n              throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n            }\n else {\n              if (\"stream.body\".equals(kv[0])) {\n                kv[0]=\"q\";\n                String mltFlString=\"mlt.fl=\";\n                int mltFlIndex=parameterString.indexOf(mltFlString);\n                if (mltFlIndex > -1) {\n                  int beginIndex=mltFlIndex + mltFlString.length();\n                  int endIndex=parameterString.indexOf('&',beginIndex);\n                  String fields;\n                  if (endIndex > beginIndex) {\n                    fields=parameterString.substring(beginIndex,endIndex);\n                  }\n else {\n                    fields=parameterString.substring(beginIndex);\n                  }\n                  kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n                }\n              }\n              solrQuery.setParam(kv[0],kv[1]);\n            }\n          }\n          return solrQuery;\n        }\n else {\n          queryBuilder.append(nativeQueryString);\n        }\n      }\n else {\n        if (pr.propertyName.contains(\"/\")) {\n          continue;\n        }\n        if (\"rep:excerpt\".equals(pr.propertyName)) {\n          continue;\n        }\n        String first=null;\n        if (pr.first != null) {\n          first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n        }\n        String last=null;\n        if (pr.last != null) {\n          last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n        }\n        String prField=configuration.getFieldForPropertyRestriction(pr);\n        CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n        if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n          queryBuilder.append(configuration.getPathField());\n          queryBuilder.append(':');\n          queryBuilder.append(first);\n        }\n else {\n          if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(first);\n          }\n else           if (pr.first == null && pr.last == null) {\n            if (!queryBuilder.toString().contains(fieldName + \":\")) {\n              queryBuilder.append(fieldName).append(':');\n              queryBuilder.append('*');\n            }\n          }\n else           if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n          }\n else           if (pr.isLike) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n          }\n else {\n            throw new RuntimeException(\"[unexpected!] not handled case\");\n          }\n        }\n      }\n      queryBuilder.append(\" \");\n    }\n  }\n  String[] pts=filter.getPrimaryTypes().toArray(new String[filter.getPrimaryTypes().size()]);\n  for (int i=0; i < pts.length; i++) {\n    String pt=pts[i];\n    if (i == 0) {\n      queryBuilder.append(\"(\");\n    }\n    if (i > 0 && i < pts.length) {\n      queryBuilder.append(\"OR \");\n    }\n    queryBuilder.append(\"jcr\\\\:primaryType\").append(':').append(partialEscape(pt)).append(\" \");\n    if (i == pts.length - 1) {\n      queryBuilder.append(\")\");\n      queryBuilder.append(' ');\n    }\n  }\n  Filter.PathRestriction pathRestriction=filter.getPathRestriction();\n  if (pathRestriction != null) {\n    String path=purgePath(filter);\n    String fieldName=configuration.getFieldForPathRestriction(pathRestriction);\n    if (fieldName != null) {\n      queryBuilder.append(fieldName);\n      queryBuilder.append(':');\n      queryBuilder.append(path);\n    }\n  }\n  if (queryBuilder.length() == 0) {\n    queryBuilder.append(\"*:*\");\n  }\n  String escapedQuery=queryBuilder.toString();\n  solrQuery.setQuery(escapedQuery);\n  if (log.isDebugEnabled()) {\n    log.debug(\"JCR query {} has been converted to Solr query {}\",filter.getQueryStatement(),solrQuery.toString());\n  }\n  return solrQuery;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 867,
                    "astHeight": 25
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 109,
                    "startLineNumber": 199,
                    "startColumnNumber": 35,
                    "endLineNumber": 199,
                    "endColumnNumber": 144
                },
                "nodeContext": "(pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))",
                "nodeType": "InfixExpression",
                "astNodeNumber": 35,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "null"
        },
        {
            "nodeContext": "null",
            "nodeType": "NullLiteral",
            "nodePosition": {
                "charLength": 4,
                "startLineNumber": 233,
                "startColumnNumber": 31,
                "endLineNumber": 233,
                "endColumnNumber": 35
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 23,
                        "startLineNumber": 233,
                        "startColumnNumber": 12,
                        "endLineNumber": 233,
                        "endColumnNumber": 35
                    },
                    "nodeContext": "pathRestriction != null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 359,
                        "startLineNumber": 233,
                        "startColumnNumber": 8,
                        "endLineNumber": 241,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (pathRestriction != null) {\n  String path=purgePath(filter);\n  String fieldName=configuration.getFieldForPathRestriction(pathRestriction);\n  if (fieldName != null) {\n    queryBuilder.append(fieldName);\n    queryBuilder.append(':');\n    queryBuilder.append(path);\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 42,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 7985,
                        "startLineNumber": 103,
                        "startColumnNumber": 46,
                        "endLineNumber": 255,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  SolrQuery solrQuery=new SolrQuery();\n  setDefaults(solrQuery);\n  StringBuilder queryBuilder=new StringBuilder();\n  if (filter.getFullTextConstraint() != null) {\n    queryBuilder.append(getFullTextQuery(filter.getFullTextConstraint()));\n    queryBuilder.append(' ');\n  }\n else   if (filter.getFulltextConditions() != null) {\n    Collection<String> fulltextConditions=filter.getFulltextConditions();\n    for (    String fulltextCondition : fulltextConditions) {\n      queryBuilder.append(fulltextCondition).append(\" \");\n    }\n  }\n  Collection<Filter.PropertyRestriction> propertyRestrictions=filter.getPropertyRestrictions();\n  if (propertyRestrictions != null && !propertyRestrictions.isEmpty()) {\n    for (    Filter.PropertyRestriction pr : propertyRestrictions) {\n      if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n        String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n        if (isSupportedHttpRequest(nativeQueryString)) {\n          String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n          if (!\"select\".equals(requestHandlerString)) {\n            if (requestHandlerString.charAt(0) != '/') {\n              requestHandlerString=\"/\" + requestHandlerString;\n            }\n            solrQuery.setRequestHandler(requestHandlerString);\n          }\n          String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n          for (          String param : parameterString.split(\"&\")) {\n            String[] kv=param.split(\"=\");\n            if (kv.length != 2) {\n              throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n            }\n else {\n              if (\"stream.body\".equals(kv[0])) {\n                kv[0]=\"q\";\n                String mltFlString=\"mlt.fl=\";\n                int mltFlIndex=parameterString.indexOf(mltFlString);\n                if (mltFlIndex > -1) {\n                  int beginIndex=mltFlIndex + mltFlString.length();\n                  int endIndex=parameterString.indexOf('&',beginIndex);\n                  String fields;\n                  if (endIndex > beginIndex) {\n                    fields=parameterString.substring(beginIndex,endIndex);\n                  }\n else {\n                    fields=parameterString.substring(beginIndex);\n                  }\n                  kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n                }\n              }\n              solrQuery.setParam(kv[0],kv[1]);\n            }\n          }\n          return solrQuery;\n        }\n else {\n          queryBuilder.append(nativeQueryString);\n        }\n      }\n else {\n        if (pr.propertyName.contains(\"/\")) {\n          continue;\n        }\n        if (\"rep:excerpt\".equals(pr.propertyName)) {\n          continue;\n        }\n        String first=null;\n        if (pr.first != null) {\n          first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n        }\n        String last=null;\n        if (pr.last != null) {\n          last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n        }\n        String prField=configuration.getFieldForPropertyRestriction(pr);\n        CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n        if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n          queryBuilder.append(configuration.getPathField());\n          queryBuilder.append(':');\n          queryBuilder.append(first);\n        }\n else {\n          if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(first);\n          }\n else           if (pr.first == null && pr.last == null) {\n            if (!queryBuilder.toString().contains(fieldName + \":\")) {\n              queryBuilder.append(fieldName).append(':');\n              queryBuilder.append('*');\n            }\n          }\n else           if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n          }\n else           if (pr.isLike) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n          }\n else {\n            throw new RuntimeException(\"[unexpected!] not handled case\");\n          }\n        }\n      }\n      queryBuilder.append(\" \");\n    }\n  }\n  String[] pts=filter.getPrimaryTypes().toArray(new String[filter.getPrimaryTypes().size()]);\n  for (int i=0; i < pts.length; i++) {\n    String pt=pts[i];\n    if (i == 0) {\n      queryBuilder.append(\"(\");\n    }\n    if (i > 0 && i < pts.length) {\n      queryBuilder.append(\"OR \");\n    }\n    queryBuilder.append(\"jcr\\\\:primaryType\").append(':').append(partialEscape(pt)).append(\" \");\n    if (i == pts.length - 1) {\n      queryBuilder.append(\")\");\n      queryBuilder.append(' ');\n    }\n  }\n  Filter.PathRestriction pathRestriction=filter.getPathRestriction();\n  if (pathRestriction != null) {\n    String path=purgePath(filter);\n    String fieldName=configuration.getFieldForPathRestriction(pathRestriction);\n    if (fieldName != null) {\n      queryBuilder.append(fieldName);\n      queryBuilder.append(':');\n      queryBuilder.append(path);\n    }\n  }\n  if (queryBuilder.length() == 0) {\n    queryBuilder.append(\"*:*\");\n  }\n  String escapedQuery=queryBuilder.toString();\n  solrQuery.setQuery(escapedQuery);\n  if (log.isDebugEnabled()) {\n    log.debug(\"JCR query {} has been converted to Solr query {}\",filter.getQueryStatement(),solrQuery.toString());\n  }\n  return solrQuery;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 858,
                    "astHeight": 24
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8027,
                        "startLineNumber": 103,
                        "startColumnNumber": 4,
                        "endLineNumber": 255,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private SolrQuery getQuery(Filter filter){\n  SolrQuery solrQuery=new SolrQuery();\n  setDefaults(solrQuery);\n  StringBuilder queryBuilder=new StringBuilder();\n  if (filter.getFullTextConstraint() != null) {\n    queryBuilder.append(getFullTextQuery(filter.getFullTextConstraint()));\n    queryBuilder.append(' ');\n  }\n else   if (filter.getFulltextConditions() != null) {\n    Collection<String> fulltextConditions=filter.getFulltextConditions();\n    for (    String fulltextCondition : fulltextConditions) {\n      queryBuilder.append(fulltextCondition).append(\" \");\n    }\n  }\n  Collection<Filter.PropertyRestriction> propertyRestrictions=filter.getPropertyRestrictions();\n  if (propertyRestrictions != null && !propertyRestrictions.isEmpty()) {\n    for (    Filter.PropertyRestriction pr : propertyRestrictions) {\n      if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n        String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n        if (isSupportedHttpRequest(nativeQueryString)) {\n          String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n          if (!\"select\".equals(requestHandlerString)) {\n            if (requestHandlerString.charAt(0) != '/') {\n              requestHandlerString=\"/\" + requestHandlerString;\n            }\n            solrQuery.setRequestHandler(requestHandlerString);\n          }\n          String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n          for (          String param : parameterString.split(\"&\")) {\n            String[] kv=param.split(\"=\");\n            if (kv.length != 2) {\n              throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n            }\n else {\n              if (\"stream.body\".equals(kv[0])) {\n                kv[0]=\"q\";\n                String mltFlString=\"mlt.fl=\";\n                int mltFlIndex=parameterString.indexOf(mltFlString);\n                if (mltFlIndex > -1) {\n                  int beginIndex=mltFlIndex + mltFlString.length();\n                  int endIndex=parameterString.indexOf('&',beginIndex);\n                  String fields;\n                  if (endIndex > beginIndex) {\n                    fields=parameterString.substring(beginIndex,endIndex);\n                  }\n else {\n                    fields=parameterString.substring(beginIndex);\n                  }\n                  kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n                }\n              }\n              solrQuery.setParam(kv[0],kv[1]);\n            }\n          }\n          return solrQuery;\n        }\n else {\n          queryBuilder.append(nativeQueryString);\n        }\n      }\n else {\n        if (pr.propertyName.contains(\"/\")) {\n          continue;\n        }\n        if (\"rep:excerpt\".equals(pr.propertyName)) {\n          continue;\n        }\n        String first=null;\n        if (pr.first != null) {\n          first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n        }\n        String last=null;\n        if (pr.last != null) {\n          last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n        }\n        String prField=configuration.getFieldForPropertyRestriction(pr);\n        CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n        if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n          queryBuilder.append(configuration.getPathField());\n          queryBuilder.append(':');\n          queryBuilder.append(first);\n        }\n else {\n          if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(first);\n          }\n else           if (pr.first == null && pr.last == null) {\n            if (!queryBuilder.toString().contains(fieldName + \":\")) {\n              queryBuilder.append(fieldName).append(':');\n              queryBuilder.append('*');\n            }\n          }\n else           if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n          }\n else           if (pr.isLike) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n          }\n else {\n            throw new RuntimeException(\"[unexpected!] not handled case\");\n          }\n        }\n      }\n      queryBuilder.append(\" \");\n    }\n  }\n  String[] pts=filter.getPrimaryTypes().toArray(new String[filter.getPrimaryTypes().size()]);\n  for (int i=0; i < pts.length; i++) {\n    String pt=pts[i];\n    if (i == 0) {\n      queryBuilder.append(\"(\");\n    }\n    if (i > 0 && i < pts.length) {\n      queryBuilder.append(\"OR \");\n    }\n    queryBuilder.append(\"jcr\\\\:primaryType\").append(':').append(partialEscape(pt)).append(\" \");\n    if (i == pts.length - 1) {\n      queryBuilder.append(\")\");\n      queryBuilder.append(' ');\n    }\n  }\n  Filter.PathRestriction pathRestriction=filter.getPathRestriction();\n  if (pathRestriction != null) {\n    String path=purgePath(filter);\n    String fieldName=configuration.getFieldForPathRestriction(pathRestriction);\n    if (fieldName != null) {\n      queryBuilder.append(fieldName);\n      queryBuilder.append(':');\n      queryBuilder.append(path);\n    }\n  }\n  if (queryBuilder.length() == 0) {\n    queryBuilder.append(\"*:*\");\n  }\n  String escapedQuery=queryBuilder.toString();\n  solrQuery.setQuery(escapedQuery);\n  if (log.isDebugEnabled()) {\n    log.debug(\"JCR query {} has been converted to Solr query {}\",filter.getQueryStatement(),solrQuery.toString());\n  }\n  return solrQuery;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 867,
                    "astHeight": 25
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 23,
                    "startLineNumber": 233,
                    "startColumnNumber": 12,
                    "endLineNumber": 233,
                    "endColumnNumber": 35
                },
                "nodeContext": "pathRestriction != null",
                "nodeType": "InfixExpression",
                "astNodeNumber": 3,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "null"
        },
        {
            "nodeContext": "null",
            "nodeType": "NullLiteral",
            "nodePosition": {
                "charLength": 4,
                "startLineNumber": 236,
                "startColumnNumber": 29,
                "endLineNumber": 236,
                "endColumnNumber": 33
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 17,
                        "startLineNumber": 236,
                        "startColumnNumber": 16,
                        "endLineNumber": 236,
                        "endColumnNumber": 33
                    },
                    "nodeContext": "fieldName != null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 171,
                        "startLineNumber": 236,
                        "startColumnNumber": 12,
                        "endLineNumber": 240,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (fieldName != null) {\n  queryBuilder.append(fieldName);\n  queryBuilder.append(':');\n  queryBuilder.append(path);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 20,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 330,
                        "startLineNumber": 233,
                        "startColumnNumber": 37,
                        "endLineNumber": 241,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  String path=purgePath(filter);\n  String fieldName=configuration.getFieldForPathRestriction(pathRestriction);\n  if (fieldName != null) {\n    queryBuilder.append(fieldName);\n    queryBuilder.append(':');\n    queryBuilder.append(path);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 38,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 359,
                        "startLineNumber": 233,
                        "startColumnNumber": 8,
                        "endLineNumber": 241,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (pathRestriction != null) {\n  String path=purgePath(filter);\n  String fieldName=configuration.getFieldForPathRestriction(pathRestriction);\n  if (fieldName != null) {\n    queryBuilder.append(fieldName);\n    queryBuilder.append(':');\n    queryBuilder.append(path);\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 42,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 7985,
                        "startLineNumber": 103,
                        "startColumnNumber": 46,
                        "endLineNumber": 255,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  SolrQuery solrQuery=new SolrQuery();\n  setDefaults(solrQuery);\n  StringBuilder queryBuilder=new StringBuilder();\n  if (filter.getFullTextConstraint() != null) {\n    queryBuilder.append(getFullTextQuery(filter.getFullTextConstraint()));\n    queryBuilder.append(' ');\n  }\n else   if (filter.getFulltextConditions() != null) {\n    Collection<String> fulltextConditions=filter.getFulltextConditions();\n    for (    String fulltextCondition : fulltextConditions) {\n      queryBuilder.append(fulltextCondition).append(\" \");\n    }\n  }\n  Collection<Filter.PropertyRestriction> propertyRestrictions=filter.getPropertyRestrictions();\n  if (propertyRestrictions != null && !propertyRestrictions.isEmpty()) {\n    for (    Filter.PropertyRestriction pr : propertyRestrictions) {\n      if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n        String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n        if (isSupportedHttpRequest(nativeQueryString)) {\n          String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n          if (!\"select\".equals(requestHandlerString)) {\n            if (requestHandlerString.charAt(0) != '/') {\n              requestHandlerString=\"/\" + requestHandlerString;\n            }\n            solrQuery.setRequestHandler(requestHandlerString);\n          }\n          String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n          for (          String param : parameterString.split(\"&\")) {\n            String[] kv=param.split(\"=\");\n            if (kv.length != 2) {\n              throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n            }\n else {\n              if (\"stream.body\".equals(kv[0])) {\n                kv[0]=\"q\";\n                String mltFlString=\"mlt.fl=\";\n                int mltFlIndex=parameterString.indexOf(mltFlString);\n                if (mltFlIndex > -1) {\n                  int beginIndex=mltFlIndex + mltFlString.length();\n                  int endIndex=parameterString.indexOf('&',beginIndex);\n                  String fields;\n                  if (endIndex > beginIndex) {\n                    fields=parameterString.substring(beginIndex,endIndex);\n                  }\n else {\n                    fields=parameterString.substring(beginIndex);\n                  }\n                  kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n                }\n              }\n              solrQuery.setParam(kv[0],kv[1]);\n            }\n          }\n          return solrQuery;\n        }\n else {\n          queryBuilder.append(nativeQueryString);\n        }\n      }\n else {\n        if (pr.propertyName.contains(\"/\")) {\n          continue;\n        }\n        if (\"rep:excerpt\".equals(pr.propertyName)) {\n          continue;\n        }\n        String first=null;\n        if (pr.first != null) {\n          first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n        }\n        String last=null;\n        if (pr.last != null) {\n          last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n        }\n        String prField=configuration.getFieldForPropertyRestriction(pr);\n        CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n        if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n          queryBuilder.append(configuration.getPathField());\n          queryBuilder.append(':');\n          queryBuilder.append(first);\n        }\n else {\n          if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(first);\n          }\n else           if (pr.first == null && pr.last == null) {\n            if (!queryBuilder.toString().contains(fieldName + \":\")) {\n              queryBuilder.append(fieldName).append(':');\n              queryBuilder.append('*');\n            }\n          }\n else           if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n          }\n else           if (pr.isLike) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n          }\n else {\n            throw new RuntimeException(\"[unexpected!] not handled case\");\n          }\n        }\n      }\n      queryBuilder.append(\" \");\n    }\n  }\n  String[] pts=filter.getPrimaryTypes().toArray(new String[filter.getPrimaryTypes().size()]);\n  for (int i=0; i < pts.length; i++) {\n    String pt=pts[i];\n    if (i == 0) {\n      queryBuilder.append(\"(\");\n    }\n    if (i > 0 && i < pts.length) {\n      queryBuilder.append(\"OR \");\n    }\n    queryBuilder.append(\"jcr\\\\:primaryType\").append(':').append(partialEscape(pt)).append(\" \");\n    if (i == pts.length - 1) {\n      queryBuilder.append(\")\");\n      queryBuilder.append(' ');\n    }\n  }\n  Filter.PathRestriction pathRestriction=filter.getPathRestriction();\n  if (pathRestriction != null) {\n    String path=purgePath(filter);\n    String fieldName=configuration.getFieldForPathRestriction(pathRestriction);\n    if (fieldName != null) {\n      queryBuilder.append(fieldName);\n      queryBuilder.append(':');\n      queryBuilder.append(path);\n    }\n  }\n  if (queryBuilder.length() == 0) {\n    queryBuilder.append(\"*:*\");\n  }\n  String escapedQuery=queryBuilder.toString();\n  solrQuery.setQuery(escapedQuery);\n  if (log.isDebugEnabled()) {\n    log.debug(\"JCR query {} has been converted to Solr query {}\",filter.getQueryStatement(),solrQuery.toString());\n  }\n  return solrQuery;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 858,
                    "astHeight": 24
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8027,
                        "startLineNumber": 103,
                        "startColumnNumber": 4,
                        "endLineNumber": 255,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private SolrQuery getQuery(Filter filter){\n  SolrQuery solrQuery=new SolrQuery();\n  setDefaults(solrQuery);\n  StringBuilder queryBuilder=new StringBuilder();\n  if (filter.getFullTextConstraint() != null) {\n    queryBuilder.append(getFullTextQuery(filter.getFullTextConstraint()));\n    queryBuilder.append(' ');\n  }\n else   if (filter.getFulltextConditions() != null) {\n    Collection<String> fulltextConditions=filter.getFulltextConditions();\n    for (    String fulltextCondition : fulltextConditions) {\n      queryBuilder.append(fulltextCondition).append(\" \");\n    }\n  }\n  Collection<Filter.PropertyRestriction> propertyRestrictions=filter.getPropertyRestrictions();\n  if (propertyRestrictions != null && !propertyRestrictions.isEmpty()) {\n    for (    Filter.PropertyRestriction pr : propertyRestrictions) {\n      if (NATIVE_SOLR_QUERY.equals(pr.propertyName) || NATIVE_LUCENE_QUERY.equals(pr.propertyName)) {\n        String nativeQueryString=String.valueOf(pr.first.getValue(pr.first.getType()));\n        if (isSupportedHttpRequest(nativeQueryString)) {\n          String requestHandlerString=nativeQueryString.substring(0,nativeQueryString.indexOf('?'));\n          if (!\"select\".equals(requestHandlerString)) {\n            if (requestHandlerString.charAt(0) != '/') {\n              requestHandlerString=\"/\" + requestHandlerString;\n            }\n            solrQuery.setRequestHandler(requestHandlerString);\n          }\n          String parameterString=nativeQueryString.substring(nativeQueryString.indexOf('?') + 1);\n          for (          String param : parameterString.split(\"&\")) {\n            String[] kv=param.split(\"=\");\n            if (kv.length != 2) {\n              throw new RuntimeException(\"Unparsable native HTTP Solr query\");\n            }\n else {\n              if (\"stream.body\".equals(kv[0])) {\n                kv[0]=\"q\";\n                String mltFlString=\"mlt.fl=\";\n                int mltFlIndex=parameterString.indexOf(mltFlString);\n                if (mltFlIndex > -1) {\n                  int beginIndex=mltFlIndex + mltFlString.length();\n                  int endIndex=parameterString.indexOf('&',beginIndex);\n                  String fields;\n                  if (endIndex > beginIndex) {\n                    fields=parameterString.substring(beginIndex,endIndex);\n                  }\n else {\n                    fields=parameterString.substring(beginIndex);\n                  }\n                  kv[1]=\"_query_:\\\"{!dismax qf=\" + fields + \" q.op=OR}\"+ kv[1]+ \"\\\"\";\n                }\n              }\n              solrQuery.setParam(kv[0],kv[1]);\n            }\n          }\n          return solrQuery;\n        }\n else {\n          queryBuilder.append(nativeQueryString);\n        }\n      }\n else {\n        if (pr.propertyName.contains(\"/\")) {\n          continue;\n        }\n        if (\"rep:excerpt\".equals(pr.propertyName)) {\n          continue;\n        }\n        String first=null;\n        if (pr.first != null) {\n          first=partialEscape(String.valueOf(pr.first.getValue(pr.first.getType()))).toString();\n        }\n        String last=null;\n        if (pr.last != null) {\n          last=partialEscape(String.valueOf(pr.last.getValue(pr.last.getType()))).toString();\n        }\n        String prField=configuration.getFieldForPropertyRestriction(pr);\n        CharSequence fieldName=partialEscape(prField != null ? prField : pr.propertyName);\n        if (\"jcr\\\\:path\".equals(fieldName.toString())) {\n          queryBuilder.append(configuration.getPathField());\n          queryBuilder.append(':');\n          queryBuilder.append(first);\n        }\n else {\n          if (pr.first != null && pr.last != null && pr.first.equals(pr.last)) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(first);\n          }\n else           if (pr.first == null && pr.last == null) {\n            if (!queryBuilder.toString().contains(fieldName + \":\")) {\n              queryBuilder.append(fieldName).append(':');\n              queryBuilder.append('*');\n            }\n          }\n else           if ((pr.first != null && pr.last == null) || (pr.last != null && pr.first == null) || (!pr.first.equals(pr.last))) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(createRangeQuery(first,last,pr.firstIncluding,pr.lastIncluding));\n          }\n else           if (pr.isLike) {\n            queryBuilder.append(fieldName).append(':');\n            queryBuilder.append(partialEscape(String.valueOf(pr.first.getValue(pr.first.getType())).replace('%','*').replace('_','?')));\n          }\n else {\n            throw new RuntimeException(\"[unexpected!] not handled case\");\n          }\n        }\n      }\n      queryBuilder.append(\" \");\n    }\n  }\n  String[] pts=filter.getPrimaryTypes().toArray(new String[filter.getPrimaryTypes().size()]);\n  for (int i=0; i < pts.length; i++) {\n    String pt=pts[i];\n    if (i == 0) {\n      queryBuilder.append(\"(\");\n    }\n    if (i > 0 && i < pts.length) {\n      queryBuilder.append(\"OR \");\n    }\n    queryBuilder.append(\"jcr\\\\:primaryType\").append(':').append(partialEscape(pt)).append(\" \");\n    if (i == pts.length - 1) {\n      queryBuilder.append(\")\");\n      queryBuilder.append(' ');\n    }\n  }\n  Filter.PathRestriction pathRestriction=filter.getPathRestriction();\n  if (pathRestriction != null) {\n    String path=purgePath(filter);\n    String fieldName=configuration.getFieldForPathRestriction(pathRestriction);\n    if (fieldName != null) {\n      queryBuilder.append(fieldName);\n      queryBuilder.append(':');\n      queryBuilder.append(path);\n    }\n  }\n  if (queryBuilder.length() == 0) {\n    queryBuilder.append(\"*:*\");\n  }\n  String escapedQuery=queryBuilder.toString();\n  solrQuery.setQuery(escapedQuery);\n  if (log.isDebugEnabled()) {\n    log.debug(\"JCR query {} has been converted to Solr query {}\",filter.getQueryStatement(),solrQuery.toString());\n  }\n  return solrQuery;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 867,
                    "astHeight": 25
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 17,
                    "startLineNumber": 236,
                    "startColumnNumber": 16,
                    "endLineNumber": 236,
                    "endColumnNumber": 33
                },
                "nodeContext": "fieldName != null",
                "nodeType": "InfixExpression",
                "astNodeNumber": 3,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "null"
        }
    ],
    "positionList": [
        {
            "charLength": 4,
            "startLineNumber": 110,
            "startColumnNumber": 46,
            "endLineNumber": 110,
            "endColumnNumber": 50
        },
        {
            "charLength": 4,
            "startLineNumber": 113,
            "startColumnNumber": 53,
            "endLineNumber": 113,
            "endColumnNumber": 57
        },
        {
            "charLength": 4,
            "startLineNumber": 121,
            "startColumnNumber": 36,
            "endLineNumber": 121,
            "endColumnNumber": 40
        },
        {
            "charLength": 4,
            "startLineNumber": 174,
            "startColumnNumber": 35,
            "endLineNumber": 174,
            "endColumnNumber": 39
        },
        {
            "charLength": 4,
            "startLineNumber": 175,
            "startColumnNumber": 36,
            "endLineNumber": 175,
            "endColumnNumber": 40
        },
        {
            "charLength": 4,
            "startLineNumber": 178,
            "startColumnNumber": 34,
            "endLineNumber": 178,
            "endColumnNumber": 38
        },
        {
            "charLength": 4,
            "startLineNumber": 179,
            "startColumnNumber": 35,
            "endLineNumber": 179,
            "endColumnNumber": 39
        },
        {
            "charLength": 4,
            "startLineNumber": 184,
            "startColumnNumber": 70,
            "endLineNumber": 184,
            "endColumnNumber": 74
        },
        {
            "charLength": 4,
            "startLineNumber": 191,
            "startColumnNumber": 40,
            "endLineNumber": 191,
            "endColumnNumber": 44
        },
        {
            "charLength": 4,
            "startLineNumber": 191,
            "startColumnNumber": 59,
            "endLineNumber": 191,
            "endColumnNumber": 63
        },
        {
            "charLength": 4,
            "startLineNumber": 194,
            "startColumnNumber": 47,
            "endLineNumber": 194,
            "endColumnNumber": 51
        },
        {
            "charLength": 4,
            "startLineNumber": 194,
            "startColumnNumber": 66,
            "endLineNumber": 194,
            "endColumnNumber": 70
        },
        {
            "charLength": 4,
            "startLineNumber": 199,
            "startColumnNumber": 48,
            "endLineNumber": 199,
            "endColumnNumber": 52
        },
        {
            "charLength": 4,
            "startLineNumber": 199,
            "startColumnNumber": 67,
            "endLineNumber": 199,
            "endColumnNumber": 71
        },
        {
            "charLength": 4,
            "startLineNumber": 199,
            "startColumnNumber": 88,
            "endLineNumber": 199,
            "endColumnNumber": 92
        },
        {
            "charLength": 4,
            "startLineNumber": 199,
            "startColumnNumber": 108,
            "endLineNumber": 199,
            "endColumnNumber": 112
        },
        {
            "charLength": 4,
            "startLineNumber": 233,
            "startColumnNumber": 31,
            "endLineNumber": 233,
            "endColumnNumber": 35
        },
        {
            "charLength": 4,
            "startLineNumber": 236,
            "startColumnNumber": 29,
            "endLineNumber": 236,
            "endColumnNumber": 33
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 1
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 16,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 17,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 8
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 7
        },
        {
            "firstKey": 3,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 16,
            "layout": 8
        },
        {
            "firstKey": 3,
            "secondKey": 17,
            "layout": 8
        },
        {
            "firstKey": 4,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 4,
            "secondKey": 1,
            "layout": 8
        },
        {
            "firstKey": 4,
            "secondKey": 2,
            "layout": 7
        },
        {
            "firstKey": 4,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 16,
            "layout": 8
        },
        {
            "firstKey": 4,
            "secondKey": 17,
            "layout": 8
        },
        {
            "firstKey": 5,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 5,
            "secondKey": 1,
            "layout": 8
        },
        {
            "firstKey": 5,
            "secondKey": 2,
            "layout": 7
        },
        {
            "firstKey": 5,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 16,
            "layout": 8
        },
        {
            "firstKey": 5,
            "secondKey": 17,
            "layout": 8
        },
        {
            "firstKey": 6,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 6,
            "secondKey": 1,
            "layout": 8
        },
        {
            "firstKey": 6,
            "secondKey": 2,
            "layout": 7
        },
        {
            "firstKey": 6,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 16,
            "layout": 8
        },
        {
            "firstKey": 6,
            "secondKey": 17,
            "layout": 8
        },
        {
            "firstKey": 7,
            "secondKey": 0,
            "layout": 11
        },
        {
            "firstKey": 7,
            "secondKey": 1,
            "layout": 11
        },
        {
            "firstKey": 7,
            "secondKey": 2,
            "layout": 10
        },
        {
            "firstKey": 7,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 8,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 9,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 10,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 11,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 12,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 13,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 14,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 15,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 16,
            "layout": 11
        },
        {
            "firstKey": 7,
            "secondKey": 17,
            "layout": 11
        },
        {
            "firstKey": 8,
            "secondKey": 0,
            "layout": 12
        },
        {
            "firstKey": 8,
            "secondKey": 1,
            "layout": 12
        },
        {
            "firstKey": 8,
            "secondKey": 2,
            "layout": 11
        },
        {
            "firstKey": 8,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 5,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 6,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 7,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 9,
            "layout": 1
        },
        {
            "firstKey": 8,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 16,
            "layout": 12
        },
        {
            "firstKey": 8,
            "secondKey": 17,
            "layout": 12
        },
        {
            "firstKey": 9,
            "secondKey": 0,
            "layout": 12
        },
        {
            "firstKey": 9,
            "secondKey": 1,
            "layout": 12
        },
        {
            "firstKey": 9,
            "secondKey": 2,
            "layout": 11
        },
        {
            "firstKey": 9,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 9,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 9,
            "secondKey": 5,
            "layout": 6
        },
        {
            "firstKey": 9,
            "secondKey": 6,
            "layout": 6
        },
        {
            "firstKey": 9,
            "secondKey": 7,
            "layout": 6
        },
        {
            "firstKey": 9,
            "secondKey": 8,
            "layout": 1
        },
        {
            "firstKey": 9,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 16,
            "layout": 12
        },
        {
            "firstKey": 9,
            "secondKey": 17,
            "layout": 12
        },
        {
            "firstKey": 10,
            "secondKey": 0,
            "layout": 12
        },
        {
            "firstKey": 10,
            "secondKey": 1,
            "layout": 12
        },
        {
            "firstKey": 10,
            "secondKey": 2,
            "layout": 11
        },
        {
            "firstKey": 10,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 5,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 6,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 7,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 11,
            "layout": 1
        },
        {
            "firstKey": 10,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 16,
            "layout": 12
        },
        {
            "firstKey": 10,
            "secondKey": 17,
            "layout": 12
        },
        {
            "firstKey": 11,
            "secondKey": 0,
            "layout": 12
        },
        {
            "firstKey": 11,
            "secondKey": 1,
            "layout": 12
        },
        {
            "firstKey": 11,
            "secondKey": 2,
            "layout": 11
        },
        {
            "firstKey": 11,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 11,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 11,
            "secondKey": 5,
            "layout": 6
        },
        {
            "firstKey": 11,
            "secondKey": 6,
            "layout": 6
        },
        {
            "firstKey": 11,
            "secondKey": 7,
            "layout": 6
        },
        {
            "firstKey": 11,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 11,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 11,
            "secondKey": 10,
            "layout": 1
        },
        {
            "firstKey": 11,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 16,
            "layout": 12
        },
        {
            "firstKey": 11,
            "secondKey": 17,
            "layout": 12
        },
        {
            "firstKey": 12,
            "secondKey": 0,
            "layout": 15
        },
        {
            "firstKey": 12,
            "secondKey": 1,
            "layout": 15
        },
        {
            "firstKey": 12,
            "secondKey": 2,
            "layout": 14
        },
        {
            "firstKey": 12,
            "secondKey": 3,
            "layout": 9
        },
        {
            "firstKey": 12,
            "secondKey": 4,
            "layout": 9
        },
        {
            "firstKey": 12,
            "secondKey": 5,
            "layout": 9
        },
        {
            "firstKey": 12,
            "secondKey": 6,
            "layout": 9
        },
        {
            "firstKey": 12,
            "secondKey": 7,
            "layout": 9
        },
        {
            "firstKey": 12,
            "secondKey": 8,
            "layout": 6
        },
        {
            "firstKey": 12,
            "secondKey": 9,
            "layout": 6
        },
        {
            "firstKey": 12,
            "secondKey": 10,
            "layout": 5
        },
        {
            "firstKey": 12,
            "secondKey": 11,
            "layout": 5
        },
        {
            "firstKey": 12,
            "secondKey": 13,
            "layout": 1
        },
        {
            "firstKey": 12,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 12,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 12,
            "secondKey": 16,
            "layout": 15
        },
        {
            "firstKey": 12,
            "secondKey": 17,
            "layout": 15
        },
        {
            "firstKey": 13,
            "secondKey": 0,
            "layout": 15
        },
        {
            "firstKey": 13,
            "secondKey": 1,
            "layout": 15
        },
        {
            "firstKey": 13,
            "secondKey": 2,
            "layout": 14
        },
        {
            "firstKey": 13,
            "secondKey": 3,
            "layout": 9
        },
        {
            "firstKey": 13,
            "secondKey": 4,
            "layout": 9
        },
        {
            "firstKey": 13,
            "secondKey": 5,
            "layout": 9
        },
        {
            "firstKey": 13,
            "secondKey": 6,
            "layout": 9
        },
        {
            "firstKey": 13,
            "secondKey": 7,
            "layout": 9
        },
        {
            "firstKey": 13,
            "secondKey": 8,
            "layout": 6
        },
        {
            "firstKey": 13,
            "secondKey": 9,
            "layout": 6
        },
        {
            "firstKey": 13,
            "secondKey": 10,
            "layout": 5
        },
        {
            "firstKey": 13,
            "secondKey": 11,
            "layout": 5
        },
        {
            "firstKey": 13,
            "secondKey": 12,
            "layout": 1
        },
        {
            "firstKey": 13,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 16,
            "layout": 15
        },
        {
            "firstKey": 13,
            "secondKey": 17,
            "layout": 15
        },
        {
            "firstKey": 14,
            "secondKey": 0,
            "layout": 15
        },
        {
            "firstKey": 14,
            "secondKey": 1,
            "layout": 15
        },
        {
            "firstKey": 14,
            "secondKey": 2,
            "layout": 14
        },
        {
            "firstKey": 14,
            "secondKey": 3,
            "layout": 9
        },
        {
            "firstKey": 14,
            "secondKey": 4,
            "layout": 9
        },
        {
            "firstKey": 14,
            "secondKey": 5,
            "layout": 9
        },
        {
            "firstKey": 14,
            "secondKey": 6,
            "layout": 9
        },
        {
            "firstKey": 14,
            "secondKey": 7,
            "layout": 9
        },
        {
            "firstKey": 14,
            "secondKey": 8,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 9,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 10,
            "layout": 5
        },
        {
            "firstKey": 14,
            "secondKey": 11,
            "layout": 5
        },
        {
            "firstKey": 14,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 14,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 14,
            "secondKey": 15,
            "layout": 1
        },
        {
            "firstKey": 14,
            "secondKey": 16,
            "layout": 15
        },
        {
            "firstKey": 14,
            "secondKey": 17,
            "layout": 15
        },
        {
            "firstKey": 15,
            "secondKey": 0,
            "layout": 15
        },
        {
            "firstKey": 15,
            "secondKey": 1,
            "layout": 15
        },
        {
            "firstKey": 15,
            "secondKey": 2,
            "layout": 14
        },
        {
            "firstKey": 15,
            "secondKey": 3,
            "layout": 9
        },
        {
            "firstKey": 15,
            "secondKey": 4,
            "layout": 9
        },
        {
            "firstKey": 15,
            "secondKey": 5,
            "layout": 9
        },
        {
            "firstKey": 15,
            "secondKey": 6,
            "layout": 9
        },
        {
            "firstKey": 15,
            "secondKey": 7,
            "layout": 9
        },
        {
            "firstKey": 15,
            "secondKey": 8,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 9,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 10,
            "layout": 5
        },
        {
            "firstKey": 15,
            "secondKey": 11,
            "layout": 5
        },
        {
            "firstKey": 15,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 15,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 15,
            "secondKey": 14,
            "layout": 1
        },
        {
            "firstKey": 15,
            "secondKey": 16,
            "layout": 15
        },
        {
            "firstKey": 15,
            "secondKey": 17,
            "layout": 15
        },
        {
            "firstKey": 16,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 16,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 16,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 16,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 16,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 16,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 16,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 16,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 16,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 16,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 16,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 16,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 16,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 16,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 16,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 16,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 16,
            "secondKey": 17,
            "layout": 1
        },
        {
            "firstKey": 17,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 17,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 17,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 17,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 17,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 17,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 17,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 17,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 17,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 17,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 17,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 17,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 17,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 17,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 17,
            "secondKey": 14,
            "layout": 4
        },
        {
            "firstKey": 17,
            "secondKey": 15,
            "layout": 4
        },
        {
            "firstKey": 17,
            "secondKey": 16,
            "layout": 3
        }
    ]
}