{
    "id": 358,
    "expression": "entry",
    "projectName": "java-decompiler@jd-gui",
    "commitID": "3fe11bf2c97823cbaba60b305338bc44a993daa5",
    "filePath": "services/src/main/java/org/jd/gui/service/sourcesaver/ClassFileSourceSaverProvider.java",
    "occurrences": 3,
    "isArithmeticExpression": 0,
    "isGetTypeMethod": 0,
    "expressionList": [
        {
            "nodeContext": "entry",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 5,
                "startLineNumber": 99,
                "startColumnNumber": 28,
                "endLineNumber": 99,
                "endColumnNumber": 33
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 22,
                        "startLineNumber": 99,
                        "startColumnNumber": 12,
                        "endLineNumber": 99,
                        "endColumnNumber": 34
                    },
                    "nodeContext": "loader.setEntry(entry)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 23,
                        "startLineNumber": 99,
                        "startColumnNumber": 12,
                        "endLineNumber": 99,
                        "endColumnNumber": 35
                    },
                    "nodeContext": "loader.setEntry(entry);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 2681,
                        "startLineNumber": 85,
                        "startColumnNumber": 12,
                        "endLineNumber": 147,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> p=api.getPreferences();\n  preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n  preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n  preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n  preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n  preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n  loader.setEntry(entry);\n  baos.reset();\n  PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n  printer.setPrintStream(ps);\n  printer.setPreferences(preferences);\n  DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n  if (getPreferenceValue(p,WRITE_METADATA,true)) {\n    String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    ps.print(\"\\n\\n/* Location:              \");\n    ps.print(location);\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      ps.print(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        ps.print(majorVersion - (49 - 5));\n      }\n else {\n        ps.print(majorVersion - (45 - 1));\n      }\n      ps.print(\" (\");\n      ps.print(majorVersion);\n      ps.print('.');\n      ps.print(printer.getMinorVersion());\n      ps.print(')');\n    }\n    ps.print(\"\\n * JD-Core Version:       \");\n    ps.print(CoreConstants.JD_CORE_VERSION);\n    ps.print(\"\\n */\");\n  }\n  try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n    baos.writeTo(os);\n  }\n catch (  IOException ignore) {\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 262,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2943,
                        "startLineNumber": 85,
                        "startColumnNumber": 8,
                        "endLineNumber": 152,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> p=api.getPreferences();\n  preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n  preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n  preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n  preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n  preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n  loader.setEntry(entry);\n  baos.reset();\n  PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n  printer.setPrintStream(ps);\n  printer.setPreferences(preferences);\n  DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n  if (getPreferenceValue(p,WRITE_METADATA,true)) {\n    String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    ps.print(\"\\n\\n/* Location:              \");\n    ps.print(location);\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      ps.print(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        ps.print(majorVersion - (49 - 5));\n      }\n else {\n        ps.print(majorVersion - (45 - 1));\n      }\n      ps.print(\" (\");\n      ps.print(majorVersion);\n      ps.print('.');\n      ps.print(printer.getMinorVersion());\n      ps.print(')');\n    }\n    ps.print(\"\\n * JD-Core Version:       \");\n    ps.print(CoreConstants.JD_CORE_VERSION);\n    ps.print(\"\\n */\");\n  }\n  try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n    baos.writeTo(os);\n  }\n catch (  IOException ignore) {\n  }\n}\n catch (Exception ignore) {\n  try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n    writer.write(\"// INTERNAL ERROR //\");\n  }\n catch (  IOException ignoreAgain) {\n  }\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 294,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2961,
                        "startLineNumber": 84,
                        "startColumnNumber": 128,
                        "endLineNumber": 153,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> p=api.getPreferences();\n    preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n    preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n    preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n    preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n    preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n    loader.setEntry(entry);\n    baos.reset();\n    PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n    printer.setPrintStream(ps);\n    printer.setPreferences(preferences);\n    DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n    if (getPreferenceValue(p,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      ps.print(\"\\n\\n/* Location:              \");\n      ps.print(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        ps.print(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          ps.print(majorVersion - (49 - 5));\n        }\n else {\n          ps.print(majorVersion - (45 - 1));\n        }\n        ps.print(\" (\");\n        ps.print(majorVersion);\n        ps.print('.');\n        ps.print(printer.getMinorVersion());\n        ps.print(')');\n      }\n      ps.print(\"\\n * JD-Core Version:       \");\n      ps.print(CoreConstants.JD_CORE_VERSION);\n      ps.print(\"\\n */\");\n    }\n    try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n      baos.writeTo(os);\n    }\n catch (    IOException ignore) {\n    }\n  }\n catch (  Exception ignore) {\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ignoreAgain) {\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 295,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3100,
                        "startLineNumber": 83,
                        "startColumnNumber": 4,
                        "endLineNumber": 153,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void saveContent(API api,Controller controller,Listener listener,Path rootPath,Path path,Container.Entry entry){\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> p=api.getPreferences();\n    preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n    preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n    preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n    preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n    preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n    loader.setEntry(entry);\n    baos.reset();\n    PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n    printer.setPrintStream(ps);\n    printer.setPreferences(preferences);\n    DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n    if (getPreferenceValue(p,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      ps.print(\"\\n\\n/* Location:              \");\n      ps.print(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        ps.print(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          ps.print(majorVersion - (49 - 5));\n        }\n else {\n          ps.print(majorVersion - (45 - 1));\n        }\n        ps.print(\" (\");\n        ps.print(majorVersion);\n        ps.print('.');\n        ps.print(printer.getMinorVersion());\n        ps.print(')');\n      }\n      ps.print(\"\\n * JD-Core Version:       \");\n      ps.print(CoreConstants.JD_CORE_VERSION);\n      ps.print(\"\\n */\");\n    }\n    try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n      baos.writeTo(os);\n    }\n catch (    IOException ignore) {\n    }\n  }\n catch (  Exception ignore) {\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ignoreAgain) {\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 327,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 23,
                    "startLineNumber": 99,
                    "startColumnNumber": 12,
                    "endLineNumber": 99,
                    "endColumnNumber": 35
                },
                "nodeContext": "loader.setEntry(entry);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "org.jd.gui.api.model.Container.Entry"
        },
        {
            "nodeContext": "entry",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 5,
                "startLineNumber": 108,
                "startColumnNumber": 63,
                "endLineNumber": 108,
                "endColumnNumber": 68
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 15,
                        "startLineNumber": 108,
                        "startColumnNumber": 63,
                        "endLineNumber": 108,
                        "endColumnNumber": 78
                    },
                    "nodeContext": "entry.getPath()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 67,
                        "startLineNumber": 108,
                        "startColumnNumber": 12,
                        "endLineNumber": 108,
                        "endColumnNumber": 79
                    },
                    "nodeContext": "DECOMPILER.decompile(preferences,loader,printer,entry.getPath())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 9,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 68,
                        "startLineNumber": 108,
                        "startColumnNumber": 12,
                        "endLineNumber": 108,
                        "endColumnNumber": 80
                    },
                    "nodeContext": "DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 10,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 2681,
                        "startLineNumber": 85,
                        "startColumnNumber": 12,
                        "endLineNumber": 147,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> p=api.getPreferences();\n  preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n  preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n  preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n  preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n  preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n  loader.setEntry(entry);\n  baos.reset();\n  PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n  printer.setPrintStream(ps);\n  printer.setPreferences(preferences);\n  DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n  if (getPreferenceValue(p,WRITE_METADATA,true)) {\n    String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    ps.print(\"\\n\\n/* Location:              \");\n    ps.print(location);\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      ps.print(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        ps.print(majorVersion - (49 - 5));\n      }\n else {\n        ps.print(majorVersion - (45 - 1));\n      }\n      ps.print(\" (\");\n      ps.print(majorVersion);\n      ps.print('.');\n      ps.print(printer.getMinorVersion());\n      ps.print(')');\n    }\n    ps.print(\"\\n * JD-Core Version:       \");\n    ps.print(CoreConstants.JD_CORE_VERSION);\n    ps.print(\"\\n */\");\n  }\n  try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n    baos.writeTo(os);\n  }\n catch (  IOException ignore) {\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 262,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2943,
                        "startLineNumber": 85,
                        "startColumnNumber": 8,
                        "endLineNumber": 152,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> p=api.getPreferences();\n  preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n  preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n  preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n  preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n  preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n  loader.setEntry(entry);\n  baos.reset();\n  PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n  printer.setPrintStream(ps);\n  printer.setPreferences(preferences);\n  DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n  if (getPreferenceValue(p,WRITE_METADATA,true)) {\n    String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    ps.print(\"\\n\\n/* Location:              \");\n    ps.print(location);\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      ps.print(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        ps.print(majorVersion - (49 - 5));\n      }\n else {\n        ps.print(majorVersion - (45 - 1));\n      }\n      ps.print(\" (\");\n      ps.print(majorVersion);\n      ps.print('.');\n      ps.print(printer.getMinorVersion());\n      ps.print(')');\n    }\n    ps.print(\"\\n * JD-Core Version:       \");\n    ps.print(CoreConstants.JD_CORE_VERSION);\n    ps.print(\"\\n */\");\n  }\n  try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n    baos.writeTo(os);\n  }\n catch (  IOException ignore) {\n  }\n}\n catch (Exception ignore) {\n  try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n    writer.write(\"// INTERNAL ERROR //\");\n  }\n catch (  IOException ignoreAgain) {\n  }\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 294,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2961,
                        "startLineNumber": 84,
                        "startColumnNumber": 128,
                        "endLineNumber": 153,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> p=api.getPreferences();\n    preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n    preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n    preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n    preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n    preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n    loader.setEntry(entry);\n    baos.reset();\n    PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n    printer.setPrintStream(ps);\n    printer.setPreferences(preferences);\n    DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n    if (getPreferenceValue(p,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      ps.print(\"\\n\\n/* Location:              \");\n      ps.print(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        ps.print(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          ps.print(majorVersion - (49 - 5));\n        }\n else {\n          ps.print(majorVersion - (45 - 1));\n        }\n        ps.print(\" (\");\n        ps.print(majorVersion);\n        ps.print('.');\n        ps.print(printer.getMinorVersion());\n        ps.print(')');\n      }\n      ps.print(\"\\n * JD-Core Version:       \");\n      ps.print(CoreConstants.JD_CORE_VERSION);\n      ps.print(\"\\n */\");\n    }\n    try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n      baos.writeTo(os);\n    }\n catch (    IOException ignore) {\n    }\n  }\n catch (  Exception ignore) {\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ignoreAgain) {\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 295,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3100,
                        "startLineNumber": 83,
                        "startColumnNumber": 4,
                        "endLineNumber": 153,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void saveContent(API api,Controller controller,Listener listener,Path rootPath,Path path,Container.Entry entry){\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> p=api.getPreferences();\n    preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n    preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n    preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n    preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n    preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n    loader.setEntry(entry);\n    baos.reset();\n    PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n    printer.setPrintStream(ps);\n    printer.setPreferences(preferences);\n    DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n    if (getPreferenceValue(p,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      ps.print(\"\\n\\n/* Location:              \");\n      ps.print(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        ps.print(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          ps.print(majorVersion - (49 - 5));\n        }\n else {\n          ps.print(majorVersion - (45 - 1));\n        }\n        ps.print(\" (\");\n        ps.print(majorVersion);\n        ps.print('.');\n        ps.print(printer.getMinorVersion());\n        ps.print(')');\n      }\n      ps.print(\"\\n * JD-Core Version:       \");\n      ps.print(CoreConstants.JD_CORE_VERSION);\n      ps.print(\"\\n */\");\n    }\n    try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n      baos.writeTo(os);\n    }\n catch (    IOException ignore) {\n    }\n  }\n catch (  Exception ignore) {\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ignoreAgain) {\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 327,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 68,
                    "startLineNumber": 108,
                    "startColumnNumber": 12,
                    "endLineNumber": 108,
                    "endColumnNumber": 80
                },
                "nodeContext": "DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 10,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.jd.gui.api.model.Container.Entry"
        },
        {
            "nodeContext": "entry",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 5,
                "startLineNumber": 114,
                "startColumnNumber": 29,
                "endLineNumber": 114,
                "endColumnNumber": 34
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
                    "nodePosition": {
                        "charLength": 14,
                        "startLineNumber": 114,
                        "startColumnNumber": 29,
                        "endLineNumber": 114,
                        "endColumnNumber": 43
                    },
                    "nodeContext": "entry.getUri()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 24,
                        "startLineNumber": 114,
                        "startColumnNumber": 20,
                        "endLineNumber": 114,
                        "endColumnNumber": 44
                    },
                    "nodeContext": "new File(entry.getUri())",
                    "nodeType": "ClassInstanceCreation",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 34,
                        "startLineNumber": 114,
                        "startColumnNumber": 20,
                        "endLineNumber": 114,
                        "endColumnNumber": 54
                    },
                    "nodeContext": "new File(entry.getUri()).getPath()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 182,
                        "startLineNumber": 114,
                        "startColumnNumber": 20,
                        "endLineNumber": 116,
                        "endColumnNumber": 64
                    },
                    "nodeContext": "new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\")",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 12,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 214,
                        "startLineNumber": 113,
                        "startColumnNumber": 23,
                        "endLineNumber": 116,
                        "endColumnNumber": 64
                    },
                    "nodeContext": "location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\")",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 14,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 222,
                        "startLineNumber": 113,
                        "startColumnNumber": 16,
                        "endLineNumber": 116,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 17,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1252,
                        "startLineNumber": 111,
                        "startColumnNumber": 61,
                        "endLineNumber": 141,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n  ps.print(\"\\n\\n/* Location:              \");\n  ps.print(location);\n  int majorVersion=printer.getMajorVersion();\n  if (majorVersion >= 45) {\n    ps.print(\"\\n * Java compiler version: \");\n    if (majorVersion >= 49) {\n      ps.print(majorVersion - (49 - 5));\n    }\n else {\n      ps.print(majorVersion - (45 - 1));\n    }\n    ps.print(\" (\");\n    ps.print(majorVersion);\n    ps.print('.');\n    ps.print(printer.getMinorVersion());\n    ps.print(')');\n  }\n  ps.print(\"\\n * JD-Core Version:       \");\n  ps.print(CoreConstants.JD_CORE_VERSION);\n  ps.print(\"\\n */\");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 115,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1301,
                        "startLineNumber": 111,
                        "startColumnNumber": 12,
                        "endLineNumber": 141,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (getPreferenceValue(p,WRITE_METADATA,true)) {\n  String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n  ps.print(\"\\n\\n/* Location:              \");\n  ps.print(location);\n  int majorVersion=printer.getMajorVersion();\n  if (majorVersion >= 45) {\n    ps.print(\"\\n * Java compiler version: \");\n    if (majorVersion >= 49) {\n      ps.print(majorVersion - (49 - 5));\n    }\n else {\n      ps.print(majorVersion - (45 - 1));\n    }\n    ps.print(\" (\");\n    ps.print(majorVersion);\n    ps.print('.');\n    ps.print(printer.getMinorVersion());\n    ps.print(')');\n  }\n  ps.print(\"\\n * JD-Core Version:       \");\n  ps.print(CoreConstants.JD_CORE_VERSION);\n  ps.print(\"\\n */\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 121,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 2681,
                        "startLineNumber": 85,
                        "startColumnNumber": 12,
                        "endLineNumber": 147,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> p=api.getPreferences();\n  preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n  preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n  preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n  preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n  preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n  loader.setEntry(entry);\n  baos.reset();\n  PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n  printer.setPrintStream(ps);\n  printer.setPreferences(preferences);\n  DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n  if (getPreferenceValue(p,WRITE_METADATA,true)) {\n    String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    ps.print(\"\\n\\n/* Location:              \");\n    ps.print(location);\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      ps.print(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        ps.print(majorVersion - (49 - 5));\n      }\n else {\n        ps.print(majorVersion - (45 - 1));\n      }\n      ps.print(\" (\");\n      ps.print(majorVersion);\n      ps.print('.');\n      ps.print(printer.getMinorVersion());\n      ps.print(')');\n    }\n    ps.print(\"\\n * JD-Core Version:       \");\n    ps.print(CoreConstants.JD_CORE_VERSION);\n    ps.print(\"\\n */\");\n  }\n  try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n    baos.writeTo(os);\n  }\n catch (  IOException ignore) {\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 262,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2943,
                        "startLineNumber": 85,
                        "startColumnNumber": 8,
                        "endLineNumber": 152,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  if (path.toString().indexOf('$') == -1) {\n    listener.pathSaved(path);\n  }\n  Map<String,String> p=api.getPreferences();\n  preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n  preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n  preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n  preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n  preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n  loader.setEntry(entry);\n  baos.reset();\n  PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n  printer.setPrintStream(ps);\n  printer.setPreferences(preferences);\n  DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n  if (getPreferenceValue(p,WRITE_METADATA,true)) {\n    String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n    ps.print(\"\\n\\n/* Location:              \");\n    ps.print(location);\n    int majorVersion=printer.getMajorVersion();\n    if (majorVersion >= 45) {\n      ps.print(\"\\n * Java compiler version: \");\n      if (majorVersion >= 49) {\n        ps.print(majorVersion - (49 - 5));\n      }\n else {\n        ps.print(majorVersion - (45 - 1));\n      }\n      ps.print(\" (\");\n      ps.print(majorVersion);\n      ps.print('.');\n      ps.print(printer.getMinorVersion());\n      ps.print(')');\n    }\n    ps.print(\"\\n * JD-Core Version:       \");\n    ps.print(CoreConstants.JD_CORE_VERSION);\n    ps.print(\"\\n */\");\n  }\n  try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n    baos.writeTo(os);\n  }\n catch (  IOException ignore) {\n  }\n}\n catch (Exception ignore) {\n  try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n    writer.write(\"// INTERNAL ERROR //\");\n  }\n catch (  IOException ignoreAgain) {\n  }\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 294,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2961,
                        "startLineNumber": 84,
                        "startColumnNumber": 128,
                        "endLineNumber": 153,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> p=api.getPreferences();\n    preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n    preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n    preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n    preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n    preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n    loader.setEntry(entry);\n    baos.reset();\n    PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n    printer.setPrintStream(ps);\n    printer.setPreferences(preferences);\n    DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n    if (getPreferenceValue(p,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      ps.print(\"\\n\\n/* Location:              \");\n      ps.print(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        ps.print(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          ps.print(majorVersion - (49 - 5));\n        }\n else {\n          ps.print(majorVersion - (45 - 1));\n        }\n        ps.print(\" (\");\n        ps.print(majorVersion);\n        ps.print('.');\n        ps.print(printer.getMinorVersion());\n        ps.print(')');\n      }\n      ps.print(\"\\n * JD-Core Version:       \");\n      ps.print(CoreConstants.JD_CORE_VERSION);\n      ps.print(\"\\n */\");\n    }\n    try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n      baos.writeTo(os);\n    }\n catch (    IOException ignore) {\n    }\n  }\n catch (  Exception ignore) {\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ignoreAgain) {\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 295,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3100,
                        "startLineNumber": 83,
                        "startColumnNumber": 4,
                        "endLineNumber": 153,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public void saveContent(API api,Controller controller,Listener listener,Path rootPath,Path path,Container.Entry entry){\n  try {\n    if (path.toString().indexOf('$') == -1) {\n      listener.pathSaved(path);\n    }\n    Map<String,String> p=api.getPreferences();\n    preferences.setUnicodeEscape(getPreferenceValue(p,ESCAPE_UNICODE_CHARACTERS,false));\n    preferences.setShowPrefixThis(!getPreferenceValue(p,OMIT_THIS_PREFIX,false));\n    preferences.setShowDefaultConstructor(getPreferenceValue(p,WRITE_DEFAULT_CONSTRUCTOR,false));\n    preferences.setRealignmentLineNumber(getPreferenceValue(p,REALIGN_LINE_NUMBERS,true));\n    preferences.setShowLineNumbers(getPreferenceValue(p,WRITE_LINE_NUMBERS,true));\n    loader.setEntry(entry);\n    baos.reset();\n    PrintStream ps=new PrintStream(baos,true,\"UTF-8\");\n    printer.setPrintStream(ps);\n    printer.setPreferences(preferences);\n    DECOMPILER.decompile(preferences,loader,printer,entry.getPath());\n    if (getPreferenceValue(p,WRITE_METADATA,true)) {\n      String location=new File(entry.getUri()).getPath().replaceAll(\"(^|[^\\\\\\\\])\\\\\\\\u\",\"\\\\\\\\\\\\\\\\u\");\n      ps.print(\"\\n\\n/* Location:              \");\n      ps.print(location);\n      int majorVersion=printer.getMajorVersion();\n      if (majorVersion >= 45) {\n        ps.print(\"\\n * Java compiler version: \");\n        if (majorVersion >= 49) {\n          ps.print(majorVersion - (49 - 5));\n        }\n else {\n          ps.print(majorVersion - (45 - 1));\n        }\n        ps.print(\" (\");\n        ps.print(majorVersion);\n        ps.print('.');\n        ps.print(printer.getMinorVersion());\n        ps.print(')');\n      }\n      ps.print(\"\\n * JD-Core Version:       \");\n      ps.print(CoreConstants.JD_CORE_VERSION);\n      ps.print(\"\\n */\");\n    }\n    try (OutputStream os=new NewlineOutputStream(Files.newOutputStream(path))){\n      baos.writeTo(os);\n    }\n catch (    IOException ignore) {\n    }\n  }\n catch (  Exception ignore) {\n    try (BufferedWriter writer=Files.newBufferedWriter(path,Charset.defaultCharset())){\n      writer.write(\"// INTERNAL ERROR //\");\n    }\n catch (    IOException ignoreAgain) {\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 327,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                "nodePosition": {
                    "charLength": 34,
                    "startLineNumber": 114,
                    "startColumnNumber": 20,
                    "endLineNumber": 114,
                    "endColumnNumber": 54
                },
                "nodeContext": "new File(entry.getUri()).getPath()",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.jd.gui.api.model.Container.Entry"
        }
    ],
    "positionList": [
        {
            "charLength": 5,
            "startLineNumber": 99,
            "startColumnNumber": 28,
            "endLineNumber": 99,
            "endColumnNumber": 33
        },
        {
            "charLength": 5,
            "startLineNumber": 108,
            "startColumnNumber": 63,
            "endLineNumber": 108,
            "endColumnNumber": 68
        },
        {
            "charLength": 5,
            "startLineNumber": 114,
            "startColumnNumber": 29,
            "endLineNumber": 114,
            "endColumnNumber": 34
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 8
        }
    ]
}