{
    "id": 1748,
    "expression": "sessionContext.getOakPathKeepIndex(absPath)",
    "projectName": "jackrabbit-oak",
    "commitID": "aca6ac3d2b75559b899c335ecfd4661f2fce5959",
    "filePath": "oak-jcr/src/main/java/org/apache/jackrabbit/oak/jcr/xml/ImporterImpl.java",
    "occurrences": 1,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "sessionContext.getOakPathKeepIndex(absPath)",
            "nodeType": "MethodInvocation",
            "nodePosition": {
                "charLength": 43,
                "startLineNumber": 136,
                "startColumnNumber": 25,
                "endLineNumber": 136,
                "endColumnNumber": 68
            },
            "astNodeNumber": 4,
            "astHeight": 2,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 53,
                        "startLineNumber": 136,
                        "startColumnNumber": 15,
                        "endLineNumber": 136,
                        "endColumnNumber": 68
                    },
                    "nodeContext": "oakPath=sessionContext.getOakPathKeepIndex(absPath)",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 61,
                        "startLineNumber": 136,
                        "startColumnNumber": 8,
                        "endLineNumber": 136,
                        "endColumnNumber": 69
                    },
                    "nodeContext": "String oakPath=sessionContext.getOakPathKeepIndex(absPath);\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2354,
                        "startLineNumber": 132,
                        "startColumnNumber": 78,
                        "endLineNumber": 182,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (!PathUtils.isAbsolute(absPath)) {\n    throw new RepositoryException(\"Not an absolute path: \" + absPath);\n  }\n  String oakPath=sessionContext.getOakPathKeepIndex(absPath);\n  if (oakPath == null) {\n    throw new RepositoryException(\"Invalid name or path: \" + absPath);\n  }\n  if (isWorkspaceImport && sessionContext.getSessionDelegate().hasPendingChanges()) {\n    throw new RepositoryException(\"Pending changes on session. Cannot run workspace import.\");\n  }\n  this.uuidBehavior=uuidBehavior;\n  userID=sessionContext.getSessionDelegate().getAuthInfo().getUserID();\n  importTargetTree=root.getTree(absPath);\n  if (!importTargetTree.exists()) {\n    throw new PathNotFoundException(absPath);\n  }\n  VersionManager vMgr=sessionContext.getWorkspace().getVersionManager();\n  if (!vMgr.isCheckedOut(absPath)) {\n    throw new VersionException(\"Target node is checked in.\");\n  }\n  if (importTargetTree.getStatus() != Tree.Status.NEW && sessionContext.getWorkspace().getLockManager().isLocked(absPath)) {\n    throw new LockException(\"Target node is locked.\");\n  }\n  ntTypesRoot=root.getTree(NODE_TYPES_PATH);\n  accessManager=sessionContext.getAccessManager();\n  baseStateIdManager=new IdentifierManager(initialRoot);\n  currentStateIdManager=new IdentifierManager(root);\n  effectiveNodeTypeProvider=sessionContext.getWorkspace().getNodeTypeManager();\n  definitionProvider=sessionContext.getWorkspace().getNodeTypeManager();\n  refTracker=new ReferenceChangeTracker();\n  parents=new Stack<Tree>();\n  parents.push(importTargetTree);\n  pItemImporters.clear();\n  for (  ProtectedItemImporter importer : sessionContext.getProtectedItemImporters()) {\n    if (importer.init(sessionContext.getSession(),root,sessionContext,isWorkspaceImport,uuidBehavior,refTracker,sessionContext.getSecurityProvider())) {\n      pItemImporters.add(importer);\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 228,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3310,
                        "startLineNumber": 114,
                        "startColumnNumber": 4,
                        "endLineNumber": 182,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Creates a new importer instance.\n * @param absPath  The absolute JCR paths such as passed to the JCR call.\n * @param sessionContext The context of the editing session\n * @param root The write {@code Root}, which in case of a workspace import is different from the  {@code Root} associated with the editing session.\n * @param initialRoot\n * @param uuidBehavior The uuid behavior\n * @param isWorkspaceImport {@code true} if this is a workspace import,{@code false} otherwise.\n * @throws javax.jcr.RepositoryException If the initial validation of thepath or the state of target node/session fails.\n */\npublic ImporterImpl(String absPath,SessionContext sessionContext,Root root,Root initialRoot,int uuidBehavior,boolean isWorkspaceImport) throws RepositoryException {\n  if (!PathUtils.isAbsolute(absPath)) {\n    throw new RepositoryException(\"Not an absolute path: \" + absPath);\n  }\n  String oakPath=sessionContext.getOakPathKeepIndex(absPath);\n  if (oakPath == null) {\n    throw new RepositoryException(\"Invalid name or path: \" + absPath);\n  }\n  if (isWorkspaceImport && sessionContext.getSessionDelegate().hasPendingChanges()) {\n    throw new RepositoryException(\"Pending changes on session. Cannot run workspace import.\");\n  }\n  this.uuidBehavior=uuidBehavior;\n  userID=sessionContext.getSessionDelegate().getAuthInfo().getUserID();\n  importTargetTree=root.getTree(absPath);\n  if (!importTargetTree.exists()) {\n    throw new PathNotFoundException(absPath);\n  }\n  VersionManager vMgr=sessionContext.getWorkspace().getVersionManager();\n  if (!vMgr.isCheckedOut(absPath)) {\n    throw new VersionException(\"Target node is checked in.\");\n  }\n  if (importTargetTree.getStatus() != Tree.Status.NEW && sessionContext.getWorkspace().getLockManager().isLocked(absPath)) {\n    throw new LockException(\"Target node is locked.\");\n  }\n  ntTypesRoot=root.getTree(NODE_TYPES_PATH);\n  accessManager=sessionContext.getAccessManager();\n  baseStateIdManager=new IdentifierManager(initialRoot);\n  currentStateIdManager=new IdentifierManager(root);\n  effectiveNodeTypeProvider=sessionContext.getWorkspace().getNodeTypeManager();\n  definitionProvider=sessionContext.getWorkspace().getNodeTypeManager();\n  refTracker=new ReferenceChangeTracker();\n  parents=new Stack<Tree>();\n  parents.push(importTargetTree);\n  pItemImporters.clear();\n  for (  ProtectedItemImporter importer : sessionContext.getProtectedItemImporters()) {\n    if (importer.init(sessionContext.getSession(),root,sessionContext,isWorkspaceImport,uuidBehavior,refTracker,sessionContext.getSecurityProvider())) {\n      pItemImporters.add(importer);\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 256,
                    "astHeight": 9
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 61,
                    "startLineNumber": 136,
                    "startColumnNumber": 8,
                    "endLineNumber": 136,
                    "endColumnNumber": 69
                },
                "nodeContext": "String oakPath=sessionContext.getOakPathKeepIndex(absPath);\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 9,
                "astHeight": 4
            },
            "tokenLength": 3,
            "type": "java.lang.String"
        }
    ],
    "positionList": [
        {
            "charLength": 43,
            "startLineNumber": 136,
            "startColumnNumber": 25,
            "endLineNumber": 136,
            "endColumnNumber": 68
        }
    ],
    "layoutRelationDataList": []
}