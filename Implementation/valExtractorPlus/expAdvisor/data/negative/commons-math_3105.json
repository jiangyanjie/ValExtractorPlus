{
    "id": 3105,
    "expression": "a",
    "projectName": "commons-math",
    "commitID": "07e312f0c3688894f3840b2f5cea67d1a29725d5",
    "filePath": "src/java/org/apache/commons/math/linear/QRDecompositionImpl.java",
    "occurrences": 5,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "a",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 89,
                "startColumnNumber": 43,
                "endLineNumber": 89,
                "endColumnNumber": 44
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 2,
                        "startLineNumber": 89,
                        "startColumnNumber": 42,
                        "endLineNumber": 89,
                        "endColumnNumber": 44
                    },
                    "nodeContext": "-a",
                    "nodeType": "PrefixExpression",
                    "astNodeNumber": 2,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 6,
                        "startLineNumber": 89,
                        "startColumnNumber": 38,
                        "endLineNumber": 89,
                        "endColumnNumber": 44
                    },
                    "nodeContext": "a=-a",
                    "nodeType": "Assignment",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 89,
                        "startColumnNumber": 38,
                        "endLineNumber": 89,
                        "endColumnNumber": 45
                    },
                    "nodeContext": "a=-a;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 5,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 33,
                        "startLineNumber": 89,
                        "startColumnNumber": 12,
                        "endLineNumber": 89,
                        "endColumnNumber": 45
                    },
                    "nodeContext": "if (qr[minor][minor] > 0) a=-a;\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 13,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 2408,
                        "startLineNumber": 76,
                        "startColumnNumber": 61,
                        "endLineNumber": 129,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  double xNormSqr=0;\n  for (int row=minor; row < m; row++) {\n    xNormSqr+=qr[row][minor] * qr[row][minor];\n  }\n  double a=Math.sqrt(xNormSqr);\n  if (qr[minor][minor] > 0)   a=-a;\n  rDiag[minor]=a;\n  if (a != 0.0) {\n    qr[minor][minor]-=a;\n    for (int col=minor + 1; col < n; col++) {\n      double alpha=0;\n      for (int row=minor; row < m; row++) {\n        alpha-=qr[row][col] * qr[row][minor];\n      }\n      alpha/=a * qr[minor][minor];\n      for (int row=minor; row < m; row++) {\n        qr[row][col]-=alpha * qr[row][minor];\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 153,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2461,
                        "startLineNumber": 76,
                        "startColumnNumber": 8,
                        "endLineNumber": 129,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int minor=0; minor < Math.min(m,n); minor++) {\n  double xNormSqr=0;\n  for (int row=minor; row < m; row++) {\n    xNormSqr+=qr[row][minor] * qr[row][minor];\n  }\n  double a=Math.sqrt(xNormSqr);\n  if (qr[minor][minor] > 0)   a=-a;\n  rDiag[minor]=a;\n  if (a != 0.0) {\n    qr[minor][minor]-=a;\n    for (int col=minor + 1; col < n; col++) {\n      double alpha=0;\n      for (int row=minor; row < m; row++) {\n        alpha-=qr[row][col] * qr[row][minor];\n      }\n      alpha/=a * qr[minor][minor];\n      for (int row=minor; row < m; row++) {\n        qr[row][col]-=alpha * qr[row][minor];\n      }\n    }\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 168,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2826,
                        "startLineNumber": 65,
                        "startColumnNumber": 50,
                        "endLineNumber": 130,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  m=matrix.getRowDimension();\n  n=matrix.getColumnDimension();\n  qr=matrix.getData();\n  rDiag=new double[n];\n  for (int minor=0; minor < Math.min(m,n); minor++) {\n    double xNormSqr=0;\n    for (int row=minor; row < m; row++) {\n      xNormSqr+=qr[row][minor] * qr[row][minor];\n    }\n    double a=Math.sqrt(xNormSqr);\n    if (qr[minor][minor] > 0)     a=-a;\n    rDiag[minor]=a;\n    if (a != 0.0) {\n      qr[minor][minor]-=a;\n      for (int col=minor + 1; col < n; col++) {\n        double alpha=0;\n        for (int row=minor; row < m; row++) {\n          alpha-=qr[row][col] * qr[row][minor];\n        }\n        alpha/=a * qr[minor][minor];\n        for (int row=minor; row < m; row++) {\n          qr[row][col]-=alpha * qr[row][minor];\n        }\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 195,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3003,
                        "startLineNumber": 60,
                        "startColumnNumber": 4,
                        "endLineNumber": 130,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Calculates the QR decomposition of the given matrix. \n * @param matrix The matrix to decompose.\n */\npublic QRDecompositionImpl(RealMatrix matrix){\n  m=matrix.getRowDimension();\n  n=matrix.getColumnDimension();\n  qr=matrix.getData();\n  rDiag=new double[n];\n  for (int minor=0; minor < Math.min(m,n); minor++) {\n    double xNormSqr=0;\n    for (int row=minor; row < m; row++) {\n      xNormSqr+=qr[row][minor] * qr[row][minor];\n    }\n    double a=Math.sqrt(xNormSqr);\n    if (qr[minor][minor] > 0)     a=-a;\n    rDiag[minor]=a;\n    if (a != 0.0) {\n      qr[minor][minor]-=a;\n      for (int col=minor + 1; col < n; col++) {\n        double alpha=0;\n        for (int row=minor; row < m; row++) {\n          alpha-=qr[row][col] * qr[row][minor];\n        }\n        alpha/=a * qr[minor][minor];\n        for (int row=minor; row < m; row++) {\n          qr[row][col]-=alpha * qr[row][minor];\n        }\n      }\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 203,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 33,
                    "startLineNumber": 89,
                    "startColumnNumber": 12,
                    "endLineNumber": 89,
                    "endColumnNumber": 45
                },
                "nodeContext": "if (qr[minor][minor] > 0) a=-a;\n",
                "nodeType": "IfStatement",
                "astNodeNumber": 13,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "double"
        },
        {
            "nodeContext": "a",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 90,
                "startColumnNumber": 27,
                "endLineNumber": 90,
                "endColumnNumber": 28
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 16,
                        "startLineNumber": 90,
                        "startColumnNumber": 12,
                        "endLineNumber": 90,
                        "endColumnNumber": 28
                    },
                    "nodeContext": "rDiag[minor]=a",
                    "nodeType": "Assignment",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 17,
                        "startLineNumber": 90,
                        "startColumnNumber": 12,
                        "endLineNumber": 90,
                        "endColumnNumber": 29
                    },
                    "nodeContext": "rDiag[minor]=a;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 6,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 2408,
                        "startLineNumber": 76,
                        "startColumnNumber": 61,
                        "endLineNumber": 129,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  double xNormSqr=0;\n  for (int row=minor; row < m; row++) {\n    xNormSqr+=qr[row][minor] * qr[row][minor];\n  }\n  double a=Math.sqrt(xNormSqr);\n  if (qr[minor][minor] > 0)   a=-a;\n  rDiag[minor]=a;\n  if (a != 0.0) {\n    qr[minor][minor]-=a;\n    for (int col=minor + 1; col < n; col++) {\n      double alpha=0;\n      for (int row=minor; row < m; row++) {\n        alpha-=qr[row][col] * qr[row][minor];\n      }\n      alpha/=a * qr[minor][minor];\n      for (int row=minor; row < m; row++) {\n        qr[row][col]-=alpha * qr[row][minor];\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 153,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2461,
                        "startLineNumber": 76,
                        "startColumnNumber": 8,
                        "endLineNumber": 129,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int minor=0; minor < Math.min(m,n); minor++) {\n  double xNormSqr=0;\n  for (int row=minor; row < m; row++) {\n    xNormSqr+=qr[row][minor] * qr[row][minor];\n  }\n  double a=Math.sqrt(xNormSqr);\n  if (qr[minor][minor] > 0)   a=-a;\n  rDiag[minor]=a;\n  if (a != 0.0) {\n    qr[minor][minor]-=a;\n    for (int col=minor + 1; col < n; col++) {\n      double alpha=0;\n      for (int row=minor; row < m; row++) {\n        alpha-=qr[row][col] * qr[row][minor];\n      }\n      alpha/=a * qr[minor][minor];\n      for (int row=minor; row < m; row++) {\n        qr[row][col]-=alpha * qr[row][minor];\n      }\n    }\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 168,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2826,
                        "startLineNumber": 65,
                        "startColumnNumber": 50,
                        "endLineNumber": 130,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  m=matrix.getRowDimension();\n  n=matrix.getColumnDimension();\n  qr=matrix.getData();\n  rDiag=new double[n];\n  for (int minor=0; minor < Math.min(m,n); minor++) {\n    double xNormSqr=0;\n    for (int row=minor; row < m; row++) {\n      xNormSqr+=qr[row][minor] * qr[row][minor];\n    }\n    double a=Math.sqrt(xNormSqr);\n    if (qr[minor][minor] > 0)     a=-a;\n    rDiag[minor]=a;\n    if (a != 0.0) {\n      qr[minor][minor]-=a;\n      for (int col=minor + 1; col < n; col++) {\n        double alpha=0;\n        for (int row=minor; row < m; row++) {\n          alpha-=qr[row][col] * qr[row][minor];\n        }\n        alpha/=a * qr[minor][minor];\n        for (int row=minor; row < m; row++) {\n          qr[row][col]-=alpha * qr[row][minor];\n        }\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 195,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3003,
                        "startLineNumber": 60,
                        "startColumnNumber": 4,
                        "endLineNumber": 130,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Calculates the QR decomposition of the given matrix. \n * @param matrix The matrix to decompose.\n */\npublic QRDecompositionImpl(RealMatrix matrix){\n  m=matrix.getRowDimension();\n  n=matrix.getColumnDimension();\n  qr=matrix.getData();\n  rDiag=new double[n];\n  for (int minor=0; minor < Math.min(m,n); minor++) {\n    double xNormSqr=0;\n    for (int row=minor; row < m; row++) {\n      xNormSqr+=qr[row][minor] * qr[row][minor];\n    }\n    double a=Math.sqrt(xNormSqr);\n    if (qr[minor][minor] > 0)     a=-a;\n    rDiag[minor]=a;\n    if (a != 0.0) {\n      qr[minor][minor]-=a;\n      for (int col=minor + 1; col < n; col++) {\n        double alpha=0;\n        for (int row=minor; row < m; row++) {\n          alpha-=qr[row][col] * qr[row][minor];\n        }\n        alpha/=a * qr[minor][minor];\n        for (int row=minor; row < m; row++) {\n          qr[row][col]-=alpha * qr[row][minor];\n        }\n      }\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 203,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 17,
                    "startLineNumber": 90,
                    "startColumnNumber": 12,
                    "endLineNumber": 90,
                    "endColumnNumber": 29
                },
                "nodeContext": "rDiag[minor]=a;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 6,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "double"
        },
        {
            "nodeContext": "a",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 92,
                "startColumnNumber": 16,
                "endLineNumber": 92,
                "endColumnNumber": 17
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 8,
                        "startLineNumber": 92,
                        "startColumnNumber": 16,
                        "endLineNumber": 92,
                        "endColumnNumber": 24
                    },
                    "nodeContext": "a != 0.0",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1720,
                        "startLineNumber": 92,
                        "startColumnNumber": 12,
                        "endLineNumber": 128,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (a != 0.0) {\n  qr[minor][minor]-=a;\n  for (int col=minor + 1; col < n; col++) {\n    double alpha=0;\n    for (int row=minor; row < m; row++) {\n      alpha-=qr[row][col] * qr[row][minor];\n    }\n    alpha/=a * qr[minor][minor];\n    for (int row=minor; row < m; row++) {\n      qr[row][col]-=alpha * qr[row][minor];\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 94,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 2408,
                        "startLineNumber": 76,
                        "startColumnNumber": 61,
                        "endLineNumber": 129,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  double xNormSqr=0;\n  for (int row=minor; row < m; row++) {\n    xNormSqr+=qr[row][minor] * qr[row][minor];\n  }\n  double a=Math.sqrt(xNormSqr);\n  if (qr[minor][minor] > 0)   a=-a;\n  rDiag[minor]=a;\n  if (a != 0.0) {\n    qr[minor][minor]-=a;\n    for (int col=minor + 1; col < n; col++) {\n      double alpha=0;\n      for (int row=minor; row < m; row++) {\n        alpha-=qr[row][col] * qr[row][minor];\n      }\n      alpha/=a * qr[minor][minor];\n      for (int row=minor; row < m; row++) {\n        qr[row][col]-=alpha * qr[row][minor];\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 153,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2461,
                        "startLineNumber": 76,
                        "startColumnNumber": 8,
                        "endLineNumber": 129,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int minor=0; minor < Math.min(m,n); minor++) {\n  double xNormSqr=0;\n  for (int row=minor; row < m; row++) {\n    xNormSqr+=qr[row][minor] * qr[row][minor];\n  }\n  double a=Math.sqrt(xNormSqr);\n  if (qr[minor][minor] > 0)   a=-a;\n  rDiag[minor]=a;\n  if (a != 0.0) {\n    qr[minor][minor]-=a;\n    for (int col=minor + 1; col < n; col++) {\n      double alpha=0;\n      for (int row=minor; row < m; row++) {\n        alpha-=qr[row][col] * qr[row][minor];\n      }\n      alpha/=a * qr[minor][minor];\n      for (int row=minor; row < m; row++) {\n        qr[row][col]-=alpha * qr[row][minor];\n      }\n    }\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 168,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2826,
                        "startLineNumber": 65,
                        "startColumnNumber": 50,
                        "endLineNumber": 130,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  m=matrix.getRowDimension();\n  n=matrix.getColumnDimension();\n  qr=matrix.getData();\n  rDiag=new double[n];\n  for (int minor=0; minor < Math.min(m,n); minor++) {\n    double xNormSqr=0;\n    for (int row=minor; row < m; row++) {\n      xNormSqr+=qr[row][minor] * qr[row][minor];\n    }\n    double a=Math.sqrt(xNormSqr);\n    if (qr[minor][minor] > 0)     a=-a;\n    rDiag[minor]=a;\n    if (a != 0.0) {\n      qr[minor][minor]-=a;\n      for (int col=minor + 1; col < n; col++) {\n        double alpha=0;\n        for (int row=minor; row < m; row++) {\n          alpha-=qr[row][col] * qr[row][minor];\n        }\n        alpha/=a * qr[minor][minor];\n        for (int row=minor; row < m; row++) {\n          qr[row][col]-=alpha * qr[row][minor];\n        }\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 195,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3003,
                        "startLineNumber": 60,
                        "startColumnNumber": 4,
                        "endLineNumber": 130,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Calculates the QR decomposition of the given matrix. \n * @param matrix The matrix to decompose.\n */\npublic QRDecompositionImpl(RealMatrix matrix){\n  m=matrix.getRowDimension();\n  n=matrix.getColumnDimension();\n  qr=matrix.getData();\n  rDiag=new double[n];\n  for (int minor=0; minor < Math.min(m,n); minor++) {\n    double xNormSqr=0;\n    for (int row=minor; row < m; row++) {\n      xNormSqr+=qr[row][minor] * qr[row][minor];\n    }\n    double a=Math.sqrt(xNormSqr);\n    if (qr[minor][minor] > 0)     a=-a;\n    rDiag[minor]=a;\n    if (a != 0.0) {\n      qr[minor][minor]-=a;\n      for (int col=minor + 1; col < n; col++) {\n        double alpha=0;\n        for (int row=minor; row < m; row++) {\n          alpha-=qr[row][col] * qr[row][minor];\n        }\n        alpha/=a * qr[minor][minor];\n        for (int row=minor; row < m; row++) {\n          qr[row][col]-=alpha * qr[row][minor];\n        }\n      }\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 203,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 8,
                    "startLineNumber": 92,
                    "startColumnNumber": 16,
                    "endLineNumber": 92,
                    "endColumnNumber": 24
                },
                "nodeContext": "a != 0.0",
                "nodeType": "InfixExpression",
                "astNodeNumber": 3,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "double"
        },
        {
            "nodeContext": "a",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 102,
                "startColumnNumber": 36,
                "endLineNumber": 102,
                "endColumnNumber": 37
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 21,
                        "startLineNumber": 102,
                        "startColumnNumber": 16,
                        "endLineNumber": 102,
                        "endColumnNumber": 37
                    },
                    "nodeContext": "qr[minor][minor]-=a",
                    "nodeType": "Assignment",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 22,
                        "startLineNumber": 102,
                        "startColumnNumber": 16,
                        "endLineNumber": 102,
                        "endColumnNumber": 38
                    },
                    "nodeContext": "qr[minor][minor]-=a;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1706,
                        "startLineNumber": 92,
                        "startColumnNumber": 26,
                        "endLineNumber": 128,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  qr[minor][minor]-=a;\n  for (int col=minor + 1; col < n; col++) {\n    double alpha=0;\n    for (int row=minor; row < m; row++) {\n      alpha-=qr[row][col] * qr[row][minor];\n    }\n    alpha/=a * qr[minor][minor];\n    for (int row=minor; row < m; row++) {\n      qr[row][col]-=alpha * qr[row][minor];\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 90,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1720,
                        "startLineNumber": 92,
                        "startColumnNumber": 12,
                        "endLineNumber": 128,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (a != 0.0) {\n  qr[minor][minor]-=a;\n  for (int col=minor + 1; col < n; col++) {\n    double alpha=0;\n    for (int row=minor; row < m; row++) {\n      alpha-=qr[row][col] * qr[row][minor];\n    }\n    alpha/=a * qr[minor][minor];\n    for (int row=minor; row < m; row++) {\n      qr[row][col]-=alpha * qr[row][minor];\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 94,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 2408,
                        "startLineNumber": 76,
                        "startColumnNumber": 61,
                        "endLineNumber": 129,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  double xNormSqr=0;\n  for (int row=minor; row < m; row++) {\n    xNormSqr+=qr[row][minor] * qr[row][minor];\n  }\n  double a=Math.sqrt(xNormSqr);\n  if (qr[minor][minor] > 0)   a=-a;\n  rDiag[minor]=a;\n  if (a != 0.0) {\n    qr[minor][minor]-=a;\n    for (int col=minor + 1; col < n; col++) {\n      double alpha=0;\n      for (int row=minor; row < m; row++) {\n        alpha-=qr[row][col] * qr[row][minor];\n      }\n      alpha/=a * qr[minor][minor];\n      for (int row=minor; row < m; row++) {\n        qr[row][col]-=alpha * qr[row][minor];\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 153,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2461,
                        "startLineNumber": 76,
                        "startColumnNumber": 8,
                        "endLineNumber": 129,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int minor=0; minor < Math.min(m,n); minor++) {\n  double xNormSqr=0;\n  for (int row=minor; row < m; row++) {\n    xNormSqr+=qr[row][minor] * qr[row][minor];\n  }\n  double a=Math.sqrt(xNormSqr);\n  if (qr[minor][minor] > 0)   a=-a;\n  rDiag[minor]=a;\n  if (a != 0.0) {\n    qr[minor][minor]-=a;\n    for (int col=minor + 1; col < n; col++) {\n      double alpha=0;\n      for (int row=minor; row < m; row++) {\n        alpha-=qr[row][col] * qr[row][minor];\n      }\n      alpha/=a * qr[minor][minor];\n      for (int row=minor; row < m; row++) {\n        qr[row][col]-=alpha * qr[row][minor];\n      }\n    }\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 168,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2826,
                        "startLineNumber": 65,
                        "startColumnNumber": 50,
                        "endLineNumber": 130,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  m=matrix.getRowDimension();\n  n=matrix.getColumnDimension();\n  qr=matrix.getData();\n  rDiag=new double[n];\n  for (int minor=0; minor < Math.min(m,n); minor++) {\n    double xNormSqr=0;\n    for (int row=minor; row < m; row++) {\n      xNormSqr+=qr[row][minor] * qr[row][minor];\n    }\n    double a=Math.sqrt(xNormSqr);\n    if (qr[minor][minor] > 0)     a=-a;\n    rDiag[minor]=a;\n    if (a != 0.0) {\n      qr[minor][minor]-=a;\n      for (int col=minor + 1; col < n; col++) {\n        double alpha=0;\n        for (int row=minor; row < m; row++) {\n          alpha-=qr[row][col] * qr[row][minor];\n        }\n        alpha/=a * qr[minor][minor];\n        for (int row=minor; row < m; row++) {\n          qr[row][col]-=alpha * qr[row][minor];\n        }\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 195,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3003,
                        "startLineNumber": 60,
                        "startColumnNumber": 4,
                        "endLineNumber": 130,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Calculates the QR decomposition of the given matrix. \n * @param matrix The matrix to decompose.\n */\npublic QRDecompositionImpl(RealMatrix matrix){\n  m=matrix.getRowDimension();\n  n=matrix.getColumnDimension();\n  qr=matrix.getData();\n  rDiag=new double[n];\n  for (int minor=0; minor < Math.min(m,n); minor++) {\n    double xNormSqr=0;\n    for (int row=minor; row < m; row++) {\n      xNormSqr+=qr[row][minor] * qr[row][minor];\n    }\n    double a=Math.sqrt(xNormSqr);\n    if (qr[minor][minor] > 0)     a=-a;\n    rDiag[minor]=a;\n    if (a != 0.0) {\n      qr[minor][minor]-=a;\n      for (int col=minor + 1; col < n; col++) {\n        double alpha=0;\n        for (int row=minor; row < m; row++) {\n          alpha-=qr[row][col] * qr[row][minor];\n        }\n        alpha/=a * qr[minor][minor];\n        for (int row=minor; row < m; row++) {\n          qr[row][col]-=alpha * qr[row][minor];\n        }\n      }\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 203,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 22,
                    "startLineNumber": 102,
                    "startColumnNumber": 16,
                    "endLineNumber": 102,
                    "endColumnNumber": 38
                },
                "nodeContext": "qr[minor][minor]-=a;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "double"
        },
        {
            "nodeContext": "a",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 121,
                "startColumnNumber": 29,
                "endLineNumber": 121,
                "endColumnNumber": 30
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 18,
                        "startLineNumber": 121,
                        "startColumnNumber": 29,
                        "endLineNumber": 121,
                        "endColumnNumber": 47
                    },
                    "nodeContext": "a * qr[minor][minor]",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 27,
                        "startLineNumber": 121,
                        "startColumnNumber": 20,
                        "endLineNumber": 121,
                        "endColumnNumber": 47
                    },
                    "nodeContext": "alpha/=a * qr[minor][minor]",
                    "nodeType": "Assignment",
                    "astNodeNumber": 9,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 28,
                        "startLineNumber": 121,
                        "startColumnNumber": 20,
                        "endLineNumber": 121,
                        "endColumnNumber": 48
                    },
                    "nodeContext": "alpha/=a * qr[minor][minor];\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 10,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 461,
                        "startLineNumber": 116,
                        "startColumnNumber": 56,
                        "endLineNumber": 127,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  double alpha=0;\n  for (int row=minor; row < m; row++) {\n    alpha-=qr[row][col] * qr[row][minor];\n  }\n  alpha/=a * qr[minor][minor];\n  for (int row=minor; row < m; row++) {\n    qr[row][col]-=alpha * qr[row][minor];\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 68,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 501,
                        "startLineNumber": 116,
                        "startColumnNumber": 16,
                        "endLineNumber": 127,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "for (int col=minor + 1; col < n; col++) {\n  double alpha=0;\n  for (int row=minor; row < m; row++) {\n    alpha-=qr[row][col] * qr[row][minor];\n  }\n  alpha/=a * qr[minor][minor];\n  for (int row=minor; row < m; row++) {\n    qr[row][col]-=alpha * qr[row][minor];\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 81,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1706,
                        "startLineNumber": 92,
                        "startColumnNumber": 26,
                        "endLineNumber": 128,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  qr[minor][minor]-=a;\n  for (int col=minor + 1; col < n; col++) {\n    double alpha=0;\n    for (int row=minor; row < m; row++) {\n      alpha-=qr[row][col] * qr[row][minor];\n    }\n    alpha/=a * qr[minor][minor];\n    for (int row=minor; row < m; row++) {\n      qr[row][col]-=alpha * qr[row][minor];\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 90,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1720,
                        "startLineNumber": 92,
                        "startColumnNumber": 12,
                        "endLineNumber": 128,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (a != 0.0) {\n  qr[minor][minor]-=a;\n  for (int col=minor + 1; col < n; col++) {\n    double alpha=0;\n    for (int row=minor; row < m; row++) {\n      alpha-=qr[row][col] * qr[row][minor];\n    }\n    alpha/=a * qr[minor][minor];\n    for (int row=minor; row < m; row++) {\n      qr[row][col]-=alpha * qr[row][minor];\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 94,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 2408,
                        "startLineNumber": 76,
                        "startColumnNumber": 61,
                        "endLineNumber": 129,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  double xNormSqr=0;\n  for (int row=minor; row < m; row++) {\n    xNormSqr+=qr[row][minor] * qr[row][minor];\n  }\n  double a=Math.sqrt(xNormSqr);\n  if (qr[minor][minor] > 0)   a=-a;\n  rDiag[minor]=a;\n  if (a != 0.0) {\n    qr[minor][minor]-=a;\n    for (int col=minor + 1; col < n; col++) {\n      double alpha=0;\n      for (int row=minor; row < m; row++) {\n        alpha-=qr[row][col] * qr[row][minor];\n      }\n      alpha/=a * qr[minor][minor];\n      for (int row=minor; row < m; row++) {\n        qr[row][col]-=alpha * qr[row][minor];\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 153,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2461,
                        "startLineNumber": 76,
                        "startColumnNumber": 8,
                        "endLineNumber": 129,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int minor=0; minor < Math.min(m,n); minor++) {\n  double xNormSqr=0;\n  for (int row=minor; row < m; row++) {\n    xNormSqr+=qr[row][minor] * qr[row][minor];\n  }\n  double a=Math.sqrt(xNormSqr);\n  if (qr[minor][minor] > 0)   a=-a;\n  rDiag[minor]=a;\n  if (a != 0.0) {\n    qr[minor][minor]-=a;\n    for (int col=minor + 1; col < n; col++) {\n      double alpha=0;\n      for (int row=minor; row < m; row++) {\n        alpha-=qr[row][col] * qr[row][minor];\n      }\n      alpha/=a * qr[minor][minor];\n      for (int row=minor; row < m; row++) {\n        qr[row][col]-=alpha * qr[row][minor];\n      }\n    }\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 168,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2826,
                        "startLineNumber": 65,
                        "startColumnNumber": 50,
                        "endLineNumber": 130,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  m=matrix.getRowDimension();\n  n=matrix.getColumnDimension();\n  qr=matrix.getData();\n  rDiag=new double[n];\n  for (int minor=0; minor < Math.min(m,n); minor++) {\n    double xNormSqr=0;\n    for (int row=minor; row < m; row++) {\n      xNormSqr+=qr[row][minor] * qr[row][minor];\n    }\n    double a=Math.sqrt(xNormSqr);\n    if (qr[minor][minor] > 0)     a=-a;\n    rDiag[minor]=a;\n    if (a != 0.0) {\n      qr[minor][minor]-=a;\n      for (int col=minor + 1; col < n; col++) {\n        double alpha=0;\n        for (int row=minor; row < m; row++) {\n          alpha-=qr[row][col] * qr[row][minor];\n        }\n        alpha/=a * qr[minor][minor];\n        for (int row=minor; row < m; row++) {\n          qr[row][col]-=alpha * qr[row][minor];\n        }\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 195,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3003,
                        "startLineNumber": 60,
                        "startColumnNumber": 4,
                        "endLineNumber": 130,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Calculates the QR decomposition of the given matrix. \n * @param matrix The matrix to decompose.\n */\npublic QRDecompositionImpl(RealMatrix matrix){\n  m=matrix.getRowDimension();\n  n=matrix.getColumnDimension();\n  qr=matrix.getData();\n  rDiag=new double[n];\n  for (int minor=0; minor < Math.min(m,n); minor++) {\n    double xNormSqr=0;\n    for (int row=minor; row < m; row++) {\n      xNormSqr+=qr[row][minor] * qr[row][minor];\n    }\n    double a=Math.sqrt(xNormSqr);\n    if (qr[minor][minor] > 0)     a=-a;\n    rDiag[minor]=a;\n    if (a != 0.0) {\n      qr[minor][minor]-=a;\n      for (int col=minor + 1; col < n; col++) {\n        double alpha=0;\n        for (int row=minor; row < m; row++) {\n          alpha-=qr[row][col] * qr[row][minor];\n        }\n        alpha/=a * qr[minor][minor];\n        for (int row=minor; row < m; row++) {\n          qr[row][col]-=alpha * qr[row][minor];\n        }\n      }\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 203,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 28,
                    "startLineNumber": 121,
                    "startColumnNumber": 20,
                    "endLineNumber": 121,
                    "endColumnNumber": 48
                },
                "nodeContext": "alpha/=a * qr[minor][minor];\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 10,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "double"
        }
    ],
    "positionList": [
        {
            "charLength": 1,
            "startLineNumber": 89,
            "startColumnNumber": 43,
            "endLineNumber": 89,
            "endColumnNumber": 44
        },
        {
            "charLength": 1,
            "startLineNumber": 90,
            "startColumnNumber": 27,
            "endLineNumber": 90,
            "endColumnNumber": 28
        },
        {
            "charLength": 1,
            "startLineNumber": 92,
            "startColumnNumber": 16,
            "endLineNumber": 92,
            "endColumnNumber": 17
        },
        {
            "charLength": 1,
            "startLineNumber": 102,
            "startColumnNumber": 36,
            "endLineNumber": 102,
            "endColumnNumber": 37
        },
        {
            "charLength": 1,
            "startLineNumber": 121,
            "startColumnNumber": 29,
            "endLineNumber": 121,
            "endColumnNumber": 30
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 0,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 1
        },
        {
            "firstKey": 2,
            "secondKey": 4,
            "layout": 1
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 4,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 4,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 4,
            "secondKey": 3,
            "layout": 5
        }
    ]
}