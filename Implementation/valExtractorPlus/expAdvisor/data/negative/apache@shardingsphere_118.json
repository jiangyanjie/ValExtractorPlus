{
    "id": 118,
    "expression": "each",
    "projectName": "apache@shardingsphere",
    "commitID": "2e33b07fd41a1e5fd64e83334ae8cfbcc69c9563",
    "filePath": "shardingsphere-features/shardingsphere-encrypt/shardingsphere-encrypt-core/src/main/java/org/apache/shardingsphere/encrypt/rewrite/token/generator/impl/EncryptAlterTableTokenGenerator.java",
    "occurrences": 5,
    "isArithmeticExpression": 0,
    "isGetTypeMethod": 0,
    "expressionList": [
        {
            "nodeContext": "each",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 4,
                "startLineNumber": 187,
                "startColumnNumber": 61,
                "endLineNumber": 187,
                "endColumnNumber": 65
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 40,
                        "startLineNumber": 187,
                        "startColumnNumber": 26,
                        "endLineNumber": 187,
                        "endColumnNumber": 66
                    },
                    "nodeContext": "getPreviousColumnTokens(tableName,each)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 55,
                        "startLineNumber": 187,
                        "startColumnNumber": 12,
                        "endLineNumber": 187,
                        "endColumnNumber": 67
                    },
                    "nodeContext": "result.addAll(getPreviousColumnTokens(tableName,each))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 56,
                        "startLineNumber": 187,
                        "startColumnNumber": 12,
                        "endLineNumber": 187,
                        "endColumnNumber": 68
                    },
                    "nodeContext": "result.addAll(getPreviousColumnTokens(tableName,each));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 1269,
                        "startLineNumber": 186,
                        "startColumnNumber": 75,
                        "endLineNumber": 199,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  result.addAll(getPreviousColumnTokens(tableName,each));\n  result.addAll(getColumnTokens(tableName,each));\n  each.getColumnPosition().flatMap(columnPositionSegment -> getColumnPositionToken(tableName,columnPositionSegment)).ifPresent(result::add);\n  if (null != each.getPreviousColumn()) {\n    String previousColumnName=each.getPreviousColumn().getIdentifier().getValue();\n    getEncryptRule().findAssistedQueryColumn(tableName,previousColumnName).map(optional -> new EncryptAlterTableToken(each.getStopIndex() + 1,each.getColumnDefinition().getColumnName().getStopIndex(),each.getColumnDefinition().getColumnName().getIdentifier().getValue() + \"_assisted\",\", CHANGE COLUMN \" + optional)).ifPresent(result::add);\n    getEncryptRule().findPlainColumn(tableName,previousColumnName).map(optional -> new EncryptAlterTableToken(each.getStopIndex() + 1,each.getColumnDefinition().getColumnName().getStopIndex(),each.getColumnDefinition().getColumnName().getIdentifier().getValue() + \"_plain\",\", CHANGE COLUMN \" + optional)).ifPresent(result::add);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 146,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1336,
                        "startLineNumber": 186,
                        "startColumnNumber": 8,
                        "endLineNumber": 199,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (ChangeColumnDefinitionSegment each : changeColumnDefinitions) {\n  result.addAll(getPreviousColumnTokens(tableName,each));\n  result.addAll(getColumnTokens(tableName,each));\n  each.getColumnPosition().flatMap(columnPositionSegment -> getColumnPositionToken(tableName,columnPositionSegment)).ifPresent(result::add);\n  if (null != each.getPreviousColumn()) {\n    String previousColumnName=each.getPreviousColumn().getIdentifier().getValue();\n    getEncryptRule().findAssistedQueryColumn(tableName,previousColumnName).map(optional -> new EncryptAlterTableToken(each.getStopIndex() + 1,each.getColumnDefinition().getColumnName().getStopIndex(),each.getColumnDefinition().getColumnName().getIdentifier().getValue() + \"_assisted\",\", CHANGE COLUMN \" + optional)).ifPresent(result::add);\n    getEncryptRule().findPlainColumn(tableName,previousColumnName).map(optional -> new EncryptAlterTableToken(each.getStopIndex() + 1,each.getColumnDefinition().getColumnName().getStopIndex(),each.getColumnDefinition().getColumnName().getIdentifier().getValue() + \"_plain\",\", CHANGE COLUMN \" + optional)).ifPresent(result::add);\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 152,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1433,
                        "startLineNumber": 184,
                        "startColumnNumber": 152,
                        "endLineNumber": 201,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  Collection<SQLToken> result=new LinkedList<>();\n  for (  ChangeColumnDefinitionSegment each : changeColumnDefinitions) {\n    result.addAll(getPreviousColumnTokens(tableName,each));\n    result.addAll(getColumnTokens(tableName,each));\n    each.getColumnPosition().flatMap(columnPositionSegment -> getColumnPositionToken(tableName,columnPositionSegment)).ifPresent(result::add);\n    if (null != each.getPreviousColumn()) {\n      String previousColumnName=each.getPreviousColumn().getIdentifier().getValue();\n      getEncryptRule().findAssistedQueryColumn(tableName,previousColumnName).map(optional -> new EncryptAlterTableToken(each.getStopIndex() + 1,each.getColumnDefinition().getColumnName().getStopIndex(),each.getColumnDefinition().getColumnName().getIdentifier().getValue() + \"_assisted\",\", CHANGE COLUMN \" + optional)).ifPresent(result::add);\n      getEncryptRule().findPlainColumn(tableName,previousColumnName).map(optional -> new EncryptAlterTableToken(each.getStopIndex() + 1,each.getColumnDefinition().getColumnName().getStopIndex(),each.getColumnDefinition().getColumnName().getIdentifier().getValue() + \"_plain\",\", CHANGE COLUMN \" + optional)).ifPresent(result::add);\n    }\n  }\n  return result;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 167,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1581,
                        "startLineNumber": 184,
                        "startColumnNumber": 4,
                        "endLineNumber": 201,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private Collection<SQLToken> getChangeColumnTokens(final String tableName,final Collection<ChangeColumnDefinitionSegment> changeColumnDefinitions){\n  Collection<SQLToken> result=new LinkedList<>();\n  for (  ChangeColumnDefinitionSegment each : changeColumnDefinitions) {\n    result.addAll(getPreviousColumnTokens(tableName,each));\n    result.addAll(getColumnTokens(tableName,each));\n    each.getColumnPosition().flatMap(columnPositionSegment -> getColumnPositionToken(tableName,columnPositionSegment)).ifPresent(result::add);\n    if (null != each.getPreviousColumn()) {\n      String previousColumnName=each.getPreviousColumn().getIdentifier().getValue();\n      getEncryptRule().findAssistedQueryColumn(tableName,previousColumnName).map(optional -> new EncryptAlterTableToken(each.getStopIndex() + 1,each.getColumnDefinition().getColumnName().getStopIndex(),each.getColumnDefinition().getColumnName().getIdentifier().getValue() + \"_assisted\",\", CHANGE COLUMN \" + optional)).ifPresent(result::add);\n      getEncryptRule().findPlainColumn(tableName,previousColumnName).map(optional -> new EncryptAlterTableToken(each.getStopIndex() + 1,each.getColumnDefinition().getColumnName().getStopIndex(),each.getColumnDefinition().getColumnName().getIdentifier().getValue() + \"_plain\",\", CHANGE COLUMN \" + optional)).ifPresent(result::add);\n    }\n  }\n  return result;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 188,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 56,
                    "startLineNumber": 187,
                    "startColumnNumber": 12,
                    "endLineNumber": 187,
                    "endColumnNumber": 68
                },
                "nodeContext": "result.addAll(getPreviousColumnTokens(tableName,each));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.shardingsphere.sql.parser.sql.common.segment.ddl.column.alter.ChangeColumnDefinitionSegment"
        },
        {
            "nodeContext": "each",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 4,
                "startLineNumber": 188,
                "startColumnNumber": 53,
                "endLineNumber": 188,
                "endColumnNumber": 57
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 32,
                        "startLineNumber": 188,
                        "startColumnNumber": 26,
                        "endLineNumber": 188,
                        "endColumnNumber": 58
                    },
                    "nodeContext": "getColumnTokens(tableName,each)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 47,
                        "startLineNumber": 188,
                        "startColumnNumber": 12,
                        "endLineNumber": 188,
                        "endColumnNumber": 59
                    },
                    "nodeContext": "result.addAll(getColumnTokens(tableName,each))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 48,
                        "startLineNumber": 188,
                        "startColumnNumber": 12,
                        "endLineNumber": 188,
                        "endColumnNumber": 60
                    },
                    "nodeContext": "result.addAll(getColumnTokens(tableName,each));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 1269,
                        "startLineNumber": 186,
                        "startColumnNumber": 75,
                        "endLineNumber": 199,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  result.addAll(getPreviousColumnTokens(tableName,each));\n  result.addAll(getColumnTokens(tableName,each));\n  each.getColumnPosition().flatMap(columnPositionSegment -> getColumnPositionToken(tableName,columnPositionSegment)).ifPresent(result::add);\n  if (null != each.getPreviousColumn()) {\n    String previousColumnName=each.getPreviousColumn().getIdentifier().getValue();\n    getEncryptRule().findAssistedQueryColumn(tableName,previousColumnName).map(optional -> new EncryptAlterTableToken(each.getStopIndex() + 1,each.getColumnDefinition().getColumnName().getStopIndex(),each.getColumnDefinition().getColumnName().getIdentifier().getValue() + \"_assisted\",\", CHANGE COLUMN \" + optional)).ifPresent(result::add);\n    getEncryptRule().findPlainColumn(tableName,previousColumnName).map(optional -> new EncryptAlterTableToken(each.getStopIndex() + 1,each.getColumnDefinition().getColumnName().getStopIndex(),each.getColumnDefinition().getColumnName().getIdentifier().getValue() + \"_plain\",\", CHANGE COLUMN \" + optional)).ifPresent(result::add);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 146,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1336,
                        "startLineNumber": 186,
                        "startColumnNumber": 8,
                        "endLineNumber": 199,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (ChangeColumnDefinitionSegment each : changeColumnDefinitions) {\n  result.addAll(getPreviousColumnTokens(tableName,each));\n  result.addAll(getColumnTokens(tableName,each));\n  each.getColumnPosition().flatMap(columnPositionSegment -> getColumnPositionToken(tableName,columnPositionSegment)).ifPresent(result::add);\n  if (null != each.getPreviousColumn()) {\n    String previousColumnName=each.getPreviousColumn().getIdentifier().getValue();\n    getEncryptRule().findAssistedQueryColumn(tableName,previousColumnName).map(optional -> new EncryptAlterTableToken(each.getStopIndex() + 1,each.getColumnDefinition().getColumnName().getStopIndex(),each.getColumnDefinition().getColumnName().getIdentifier().getValue() + \"_assisted\",\", CHANGE COLUMN \" + optional)).ifPresent(result::add);\n    getEncryptRule().findPlainColumn(tableName,previousColumnName).map(optional -> new EncryptAlterTableToken(each.getStopIndex() + 1,each.getColumnDefinition().getColumnName().getStopIndex(),each.getColumnDefinition().getColumnName().getIdentifier().getValue() + \"_plain\",\", CHANGE COLUMN \" + optional)).ifPresent(result::add);\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 152,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1433,
                        "startLineNumber": 184,
                        "startColumnNumber": 152,
                        "endLineNumber": 201,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  Collection<SQLToken> result=new LinkedList<>();\n  for (  ChangeColumnDefinitionSegment each : changeColumnDefinitions) {\n    result.addAll(getPreviousColumnTokens(tableName,each));\n    result.addAll(getColumnTokens(tableName,each));\n    each.getColumnPosition().flatMap(columnPositionSegment -> getColumnPositionToken(tableName,columnPositionSegment)).ifPresent(result::add);\n    if (null != each.getPreviousColumn()) {\n      String previousColumnName=each.getPreviousColumn().getIdentifier().getValue();\n      getEncryptRule().findAssistedQueryColumn(tableName,previousColumnName).map(optional -> new EncryptAlterTableToken(each.getStopIndex() + 1,each.getColumnDefinition().getColumnName().getStopIndex(),each.getColumnDefinition().getColumnName().getIdentifier().getValue() + \"_assisted\",\", CHANGE COLUMN \" + optional)).ifPresent(result::add);\n      getEncryptRule().findPlainColumn(tableName,previousColumnName).map(optional -> new EncryptAlterTableToken(each.getStopIndex() + 1,each.getColumnDefinition().getColumnName().getStopIndex(),each.getColumnDefinition().getColumnName().getIdentifier().getValue() + \"_plain\",\", CHANGE COLUMN \" + optional)).ifPresent(result::add);\n    }\n  }\n  return result;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 167,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1581,
                        "startLineNumber": 184,
                        "startColumnNumber": 4,
                        "endLineNumber": 201,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private Collection<SQLToken> getChangeColumnTokens(final String tableName,final Collection<ChangeColumnDefinitionSegment> changeColumnDefinitions){\n  Collection<SQLToken> result=new LinkedList<>();\n  for (  ChangeColumnDefinitionSegment each : changeColumnDefinitions) {\n    result.addAll(getPreviousColumnTokens(tableName,each));\n    result.addAll(getColumnTokens(tableName,each));\n    each.getColumnPosition().flatMap(columnPositionSegment -> getColumnPositionToken(tableName,columnPositionSegment)).ifPresent(result::add);\n    if (null != each.getPreviousColumn()) {\n      String previousColumnName=each.getPreviousColumn().getIdentifier().getValue();\n      getEncryptRule().findAssistedQueryColumn(tableName,previousColumnName).map(optional -> new EncryptAlterTableToken(each.getStopIndex() + 1,each.getColumnDefinition().getColumnName().getStopIndex(),each.getColumnDefinition().getColumnName().getIdentifier().getValue() + \"_assisted\",\", CHANGE COLUMN \" + optional)).ifPresent(result::add);\n      getEncryptRule().findPlainColumn(tableName,previousColumnName).map(optional -> new EncryptAlterTableToken(each.getStopIndex() + 1,each.getColumnDefinition().getColumnName().getStopIndex(),each.getColumnDefinition().getColumnName().getIdentifier().getValue() + \"_plain\",\", CHANGE COLUMN \" + optional)).ifPresent(result::add);\n    }\n  }\n  return result;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 188,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 48,
                    "startLineNumber": 188,
                    "startColumnNumber": 12,
                    "endLineNumber": 188,
                    "endColumnNumber": 60
                },
                "nodeContext": "result.addAll(getColumnTokens(tableName,each));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.shardingsphere.sql.parser.sql.common.segment.ddl.column.alter.ChangeColumnDefinitionSegment"
        },
        {
            "nodeContext": "each",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 4,
                "startLineNumber": 189,
                "startColumnNumber": 12,
                "endLineNumber": 189,
                "endColumnNumber": 16
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 24,
                        "startLineNumber": 189,
                        "startColumnNumber": 12,
                        "endLineNumber": 189,
                        "endColumnNumber": 36
                    },
                    "nodeContext": "each.getColumnPosition()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 115,
                        "startLineNumber": 189,
                        "startColumnNumber": 12,
                        "endLineNumber": 189,
                        "endColumnNumber": 127
                    },
                    "nodeContext": "each.getColumnPosition().flatMap(columnPositionSegment -> getColumnPositionToken(tableName,columnPositionSegment))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 12,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 138,
                        "startLineNumber": 189,
                        "startColumnNumber": 12,
                        "endLineNumber": 189,
                        "endColumnNumber": 150
                    },
                    "nodeContext": "each.getColumnPosition().flatMap(columnPositionSegment -> getColumnPositionToken(tableName,columnPositionSegment)).ifPresent(result::add)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 17,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 139,
                        "startLineNumber": 189,
                        "startColumnNumber": 12,
                        "endLineNumber": 189,
                        "endColumnNumber": 151
                    },
                    "nodeContext": "each.getColumnPosition().flatMap(columnPositionSegment -> getColumnPositionToken(tableName,columnPositionSegment)).ifPresent(result::add);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 18,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 1269,
                        "startLineNumber": 186,
                        "startColumnNumber": 75,
                        "endLineNumber": 199,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  result.addAll(getPreviousColumnTokens(tableName,each));\n  result.addAll(getColumnTokens(tableName,each));\n  each.getColumnPosition().flatMap(columnPositionSegment -> getColumnPositionToken(tableName,columnPositionSegment)).ifPresent(result::add);\n  if (null != each.getPreviousColumn()) {\n    String previousColumnName=each.getPreviousColumn().getIdentifier().getValue();\n    getEncryptRule().findAssistedQueryColumn(tableName,previousColumnName).map(optional -> new EncryptAlterTableToken(each.getStopIndex() + 1,each.getColumnDefinition().getColumnName().getStopIndex(),each.getColumnDefinition().getColumnName().getIdentifier().getValue() + \"_assisted\",\", CHANGE COLUMN \" + optional)).ifPresent(result::add);\n    getEncryptRule().findPlainColumn(tableName,previousColumnName).map(optional -> new EncryptAlterTableToken(each.getStopIndex() + 1,each.getColumnDefinition().getColumnName().getStopIndex(),each.getColumnDefinition().getColumnName().getIdentifier().getValue() + \"_plain\",\", CHANGE COLUMN \" + optional)).ifPresent(result::add);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 146,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1336,
                        "startLineNumber": 186,
                        "startColumnNumber": 8,
                        "endLineNumber": 199,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (ChangeColumnDefinitionSegment each : changeColumnDefinitions) {\n  result.addAll(getPreviousColumnTokens(tableName,each));\n  result.addAll(getColumnTokens(tableName,each));\n  each.getColumnPosition().flatMap(columnPositionSegment -> getColumnPositionToken(tableName,columnPositionSegment)).ifPresent(result::add);\n  if (null != each.getPreviousColumn()) {\n    String previousColumnName=each.getPreviousColumn().getIdentifier().getValue();\n    getEncryptRule().findAssistedQueryColumn(tableName,previousColumnName).map(optional -> new EncryptAlterTableToken(each.getStopIndex() + 1,each.getColumnDefinition().getColumnName().getStopIndex(),each.getColumnDefinition().getColumnName().getIdentifier().getValue() + \"_assisted\",\", CHANGE COLUMN \" + optional)).ifPresent(result::add);\n    getEncryptRule().findPlainColumn(tableName,previousColumnName).map(optional -> new EncryptAlterTableToken(each.getStopIndex() + 1,each.getColumnDefinition().getColumnName().getStopIndex(),each.getColumnDefinition().getColumnName().getIdentifier().getValue() + \"_plain\",\", CHANGE COLUMN \" + optional)).ifPresent(result::add);\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 152,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1433,
                        "startLineNumber": 184,
                        "startColumnNumber": 152,
                        "endLineNumber": 201,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  Collection<SQLToken> result=new LinkedList<>();\n  for (  ChangeColumnDefinitionSegment each : changeColumnDefinitions) {\n    result.addAll(getPreviousColumnTokens(tableName,each));\n    result.addAll(getColumnTokens(tableName,each));\n    each.getColumnPosition().flatMap(columnPositionSegment -> getColumnPositionToken(tableName,columnPositionSegment)).ifPresent(result::add);\n    if (null != each.getPreviousColumn()) {\n      String previousColumnName=each.getPreviousColumn().getIdentifier().getValue();\n      getEncryptRule().findAssistedQueryColumn(tableName,previousColumnName).map(optional -> new EncryptAlterTableToken(each.getStopIndex() + 1,each.getColumnDefinition().getColumnName().getStopIndex(),each.getColumnDefinition().getColumnName().getIdentifier().getValue() + \"_assisted\",\", CHANGE COLUMN \" + optional)).ifPresent(result::add);\n      getEncryptRule().findPlainColumn(tableName,previousColumnName).map(optional -> new EncryptAlterTableToken(each.getStopIndex() + 1,each.getColumnDefinition().getColumnName().getStopIndex(),each.getColumnDefinition().getColumnName().getIdentifier().getValue() + \"_plain\",\", CHANGE COLUMN \" + optional)).ifPresent(result::add);\n    }\n  }\n  return result;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 167,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1581,
                        "startLineNumber": 184,
                        "startColumnNumber": 4,
                        "endLineNumber": 201,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private Collection<SQLToken> getChangeColumnTokens(final String tableName,final Collection<ChangeColumnDefinitionSegment> changeColumnDefinitions){\n  Collection<SQLToken> result=new LinkedList<>();\n  for (  ChangeColumnDefinitionSegment each : changeColumnDefinitions) {\n    result.addAll(getPreviousColumnTokens(tableName,each));\n    result.addAll(getColumnTokens(tableName,each));\n    each.getColumnPosition().flatMap(columnPositionSegment -> getColumnPositionToken(tableName,columnPositionSegment)).ifPresent(result::add);\n    if (null != each.getPreviousColumn()) {\n      String previousColumnName=each.getPreviousColumn().getIdentifier().getValue();\n      getEncryptRule().findAssistedQueryColumn(tableName,previousColumnName).map(optional -> new EncryptAlterTableToken(each.getStopIndex() + 1,each.getColumnDefinition().getColumnName().getStopIndex(),each.getColumnDefinition().getColumnName().getIdentifier().getValue() + \"_assisted\",\", CHANGE COLUMN \" + optional)).ifPresent(result::add);\n      getEncryptRule().findPlainColumn(tableName,previousColumnName).map(optional -> new EncryptAlterTableToken(each.getStopIndex() + 1,each.getColumnDefinition().getColumnName().getStopIndex(),each.getColumnDefinition().getColumnName().getIdentifier().getValue() + \"_plain\",\", CHANGE COLUMN \" + optional)).ifPresent(result::add);\n    }\n  }\n  return result;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 188,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 139,
                    "startLineNumber": 189,
                    "startColumnNumber": 12,
                    "endLineNumber": 189,
                    "endColumnNumber": 151
                },
                "nodeContext": "each.getColumnPosition().flatMap(columnPositionSegment -> getColumnPositionToken(tableName,columnPositionSegment)).ifPresent(result::add);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 18,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "org.apache.shardingsphere.sql.parser.sql.common.segment.ddl.column.alter.ChangeColumnDefinitionSegment"
        },
        {
            "nodeContext": "each",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 4,
                "startLineNumber": 190,
                "startColumnNumber": 24,
                "endLineNumber": 190,
                "endColumnNumber": 28
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 24,
                        "startLineNumber": 190,
                        "startColumnNumber": 24,
                        "endLineNumber": 190,
                        "endColumnNumber": 48
                    },
                    "nodeContext": "each.getPreviousColumn()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 32,
                        "startLineNumber": 190,
                        "startColumnNumber": 16,
                        "endLineNumber": 190,
                        "endColumnNumber": 48
                    },
                    "nodeContext": "null != each.getPreviousColumn()",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 963,
                        "startLineNumber": 190,
                        "startColumnNumber": 12,
                        "endLineNumber": 198,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (null != each.getPreviousColumn()) {\n  String previousColumnName=each.getPreviousColumn().getIdentifier().getValue();\n  getEncryptRule().findAssistedQueryColumn(tableName,previousColumnName).map(optional -> new EncryptAlterTableToken(each.getStopIndex() + 1,each.getColumnDefinition().getColumnName().getStopIndex(),each.getColumnDefinition().getColumnName().getIdentifier().getValue() + \"_assisted\",\", CHANGE COLUMN \" + optional)).ifPresent(result::add);\n  getEncryptRule().findPlainColumn(tableName,previousColumnName).map(optional -> new EncryptAlterTableToken(each.getStopIndex() + 1,each.getColumnDefinition().getColumnName().getStopIndex(),each.getColumnDefinition().getColumnName().getIdentifier().getValue() + \"_plain\",\", CHANGE COLUMN \" + optional)).ifPresent(result::add);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 111,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 1269,
                        "startLineNumber": 186,
                        "startColumnNumber": 75,
                        "endLineNumber": 199,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  result.addAll(getPreviousColumnTokens(tableName,each));\n  result.addAll(getColumnTokens(tableName,each));\n  each.getColumnPosition().flatMap(columnPositionSegment -> getColumnPositionToken(tableName,columnPositionSegment)).ifPresent(result::add);\n  if (null != each.getPreviousColumn()) {\n    String previousColumnName=each.getPreviousColumn().getIdentifier().getValue();\n    getEncryptRule().findAssistedQueryColumn(tableName,previousColumnName).map(optional -> new EncryptAlterTableToken(each.getStopIndex() + 1,each.getColumnDefinition().getColumnName().getStopIndex(),each.getColumnDefinition().getColumnName().getIdentifier().getValue() + \"_assisted\",\", CHANGE COLUMN \" + optional)).ifPresent(result::add);\n    getEncryptRule().findPlainColumn(tableName,previousColumnName).map(optional -> new EncryptAlterTableToken(each.getStopIndex() + 1,each.getColumnDefinition().getColumnName().getStopIndex(),each.getColumnDefinition().getColumnName().getIdentifier().getValue() + \"_plain\",\", CHANGE COLUMN \" + optional)).ifPresent(result::add);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 146,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1336,
                        "startLineNumber": 186,
                        "startColumnNumber": 8,
                        "endLineNumber": 199,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (ChangeColumnDefinitionSegment each : changeColumnDefinitions) {\n  result.addAll(getPreviousColumnTokens(tableName,each));\n  result.addAll(getColumnTokens(tableName,each));\n  each.getColumnPosition().flatMap(columnPositionSegment -> getColumnPositionToken(tableName,columnPositionSegment)).ifPresent(result::add);\n  if (null != each.getPreviousColumn()) {\n    String previousColumnName=each.getPreviousColumn().getIdentifier().getValue();\n    getEncryptRule().findAssistedQueryColumn(tableName,previousColumnName).map(optional -> new EncryptAlterTableToken(each.getStopIndex() + 1,each.getColumnDefinition().getColumnName().getStopIndex(),each.getColumnDefinition().getColumnName().getIdentifier().getValue() + \"_assisted\",\", CHANGE COLUMN \" + optional)).ifPresent(result::add);\n    getEncryptRule().findPlainColumn(tableName,previousColumnName).map(optional -> new EncryptAlterTableToken(each.getStopIndex() + 1,each.getColumnDefinition().getColumnName().getStopIndex(),each.getColumnDefinition().getColumnName().getIdentifier().getValue() + \"_plain\",\", CHANGE COLUMN \" + optional)).ifPresent(result::add);\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 152,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1433,
                        "startLineNumber": 184,
                        "startColumnNumber": 152,
                        "endLineNumber": 201,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  Collection<SQLToken> result=new LinkedList<>();\n  for (  ChangeColumnDefinitionSegment each : changeColumnDefinitions) {\n    result.addAll(getPreviousColumnTokens(tableName,each));\n    result.addAll(getColumnTokens(tableName,each));\n    each.getColumnPosition().flatMap(columnPositionSegment -> getColumnPositionToken(tableName,columnPositionSegment)).ifPresent(result::add);\n    if (null != each.getPreviousColumn()) {\n      String previousColumnName=each.getPreviousColumn().getIdentifier().getValue();\n      getEncryptRule().findAssistedQueryColumn(tableName,previousColumnName).map(optional -> new EncryptAlterTableToken(each.getStopIndex() + 1,each.getColumnDefinition().getColumnName().getStopIndex(),each.getColumnDefinition().getColumnName().getIdentifier().getValue() + \"_assisted\",\", CHANGE COLUMN \" + optional)).ifPresent(result::add);\n      getEncryptRule().findPlainColumn(tableName,previousColumnName).map(optional -> new EncryptAlterTableToken(each.getStopIndex() + 1,each.getColumnDefinition().getColumnName().getStopIndex(),each.getColumnDefinition().getColumnName().getIdentifier().getValue() + \"_plain\",\", CHANGE COLUMN \" + optional)).ifPresent(result::add);\n    }\n  }\n  return result;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 167,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1581,
                        "startLineNumber": 184,
                        "startColumnNumber": 4,
                        "endLineNumber": 201,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private Collection<SQLToken> getChangeColumnTokens(final String tableName,final Collection<ChangeColumnDefinitionSegment> changeColumnDefinitions){\n  Collection<SQLToken> result=new LinkedList<>();\n  for (  ChangeColumnDefinitionSegment each : changeColumnDefinitions) {\n    result.addAll(getPreviousColumnTokens(tableName,each));\n    result.addAll(getColumnTokens(tableName,each));\n    each.getColumnPosition().flatMap(columnPositionSegment -> getColumnPositionToken(tableName,columnPositionSegment)).ifPresent(result::add);\n    if (null != each.getPreviousColumn()) {\n      String previousColumnName=each.getPreviousColumn().getIdentifier().getValue();\n      getEncryptRule().findAssistedQueryColumn(tableName,previousColumnName).map(optional -> new EncryptAlterTableToken(each.getStopIndex() + 1,each.getColumnDefinition().getColumnName().getStopIndex(),each.getColumnDefinition().getColumnName().getIdentifier().getValue() + \"_assisted\",\", CHANGE COLUMN \" + optional)).ifPresent(result::add);\n      getEncryptRule().findPlainColumn(tableName,previousColumnName).map(optional -> new EncryptAlterTableToken(each.getStopIndex() + 1,each.getColumnDefinition().getColumnName().getStopIndex(),each.getColumnDefinition().getColumnName().getIdentifier().getValue() + \"_plain\",\", CHANGE COLUMN \" + optional)).ifPresent(result::add);\n    }\n  }\n  return result;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 188,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 32,
                    "startLineNumber": 190,
                    "startColumnNumber": 16,
                    "endLineNumber": 190,
                    "endColumnNumber": 48
                },
                "nodeContext": "null != each.getPreviousColumn()",
                "nodeType": "InfixExpression",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "org.apache.shardingsphere.sql.parser.sql.common.segment.ddl.column.alter.ChangeColumnDefinitionSegment"
        },
        {
            "nodeContext": "each",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 4,
                "startLineNumber": 191,
                "startColumnNumber": 44,
                "endLineNumber": 191,
                "endColumnNumber": 48
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 24,
                        "startLineNumber": 191,
                        "startColumnNumber": 44,
                        "endLineNumber": 191,
                        "endColumnNumber": 68
                    },
                    "nodeContext": "each.getPreviousColumn()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 40,
                        "startLineNumber": 191,
                        "startColumnNumber": 44,
                        "endLineNumber": 191,
                        "endColumnNumber": 84
                    },
                    "nodeContext": "each.getPreviousColumn().getIdentifier()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 51,
                        "startLineNumber": 191,
                        "startColumnNumber": 44,
                        "endLineNumber": 191,
                        "endColumnNumber": 95
                    },
                    "nodeContext": "each.getPreviousColumn().getIdentifier().getValue()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 72,
                        "startLineNumber": 191,
                        "startColumnNumber": 23,
                        "endLineNumber": 191,
                        "endColumnNumber": 95
                    },
                    "nodeContext": "previousColumnName=each.getPreviousColumn().getIdentifier().getValue()",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 9,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 80,
                        "startLineNumber": 191,
                        "startColumnNumber": 16,
                        "endLineNumber": 191,
                        "endColumnNumber": 96
                    },
                    "nodeContext": "String previousColumnName=each.getPreviousColumn().getIdentifier().getValue();\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 12,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 925,
                        "startLineNumber": 190,
                        "startColumnNumber": 50,
                        "endLineNumber": 198,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  String previousColumnName=each.getPreviousColumn().getIdentifier().getValue();\n  getEncryptRule().findAssistedQueryColumn(tableName,previousColumnName).map(optional -> new EncryptAlterTableToken(each.getStopIndex() + 1,each.getColumnDefinition().getColumnName().getStopIndex(),each.getColumnDefinition().getColumnName().getIdentifier().getValue() + \"_assisted\",\", CHANGE COLUMN \" + optional)).ifPresent(result::add);\n  getEncryptRule().findPlainColumn(tableName,previousColumnName).map(optional -> new EncryptAlterTableToken(each.getStopIndex() + 1,each.getColumnDefinition().getColumnName().getStopIndex(),each.getColumnDefinition().getColumnName().getIdentifier().getValue() + \"_plain\",\", CHANGE COLUMN \" + optional)).ifPresent(result::add);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 105,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 963,
                        "startLineNumber": 190,
                        "startColumnNumber": 12,
                        "endLineNumber": 198,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (null != each.getPreviousColumn()) {\n  String previousColumnName=each.getPreviousColumn().getIdentifier().getValue();\n  getEncryptRule().findAssistedQueryColumn(tableName,previousColumnName).map(optional -> new EncryptAlterTableToken(each.getStopIndex() + 1,each.getColumnDefinition().getColumnName().getStopIndex(),each.getColumnDefinition().getColumnName().getIdentifier().getValue() + \"_assisted\",\", CHANGE COLUMN \" + optional)).ifPresent(result::add);\n  getEncryptRule().findPlainColumn(tableName,previousColumnName).map(optional -> new EncryptAlterTableToken(each.getStopIndex() + 1,each.getColumnDefinition().getColumnName().getStopIndex(),each.getColumnDefinition().getColumnName().getIdentifier().getValue() + \"_plain\",\", CHANGE COLUMN \" + optional)).ifPresent(result::add);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 111,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 1269,
                        "startLineNumber": 186,
                        "startColumnNumber": 75,
                        "endLineNumber": 199,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  result.addAll(getPreviousColumnTokens(tableName,each));\n  result.addAll(getColumnTokens(tableName,each));\n  each.getColumnPosition().flatMap(columnPositionSegment -> getColumnPositionToken(tableName,columnPositionSegment)).ifPresent(result::add);\n  if (null != each.getPreviousColumn()) {\n    String previousColumnName=each.getPreviousColumn().getIdentifier().getValue();\n    getEncryptRule().findAssistedQueryColumn(tableName,previousColumnName).map(optional -> new EncryptAlterTableToken(each.getStopIndex() + 1,each.getColumnDefinition().getColumnName().getStopIndex(),each.getColumnDefinition().getColumnName().getIdentifier().getValue() + \"_assisted\",\", CHANGE COLUMN \" + optional)).ifPresent(result::add);\n    getEncryptRule().findPlainColumn(tableName,previousColumnName).map(optional -> new EncryptAlterTableToken(each.getStopIndex() + 1,each.getColumnDefinition().getColumnName().getStopIndex(),each.getColumnDefinition().getColumnName().getIdentifier().getValue() + \"_plain\",\", CHANGE COLUMN \" + optional)).ifPresent(result::add);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 146,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1336,
                        "startLineNumber": 186,
                        "startColumnNumber": 8,
                        "endLineNumber": 199,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (ChangeColumnDefinitionSegment each : changeColumnDefinitions) {\n  result.addAll(getPreviousColumnTokens(tableName,each));\n  result.addAll(getColumnTokens(tableName,each));\n  each.getColumnPosition().flatMap(columnPositionSegment -> getColumnPositionToken(tableName,columnPositionSegment)).ifPresent(result::add);\n  if (null != each.getPreviousColumn()) {\n    String previousColumnName=each.getPreviousColumn().getIdentifier().getValue();\n    getEncryptRule().findAssistedQueryColumn(tableName,previousColumnName).map(optional -> new EncryptAlterTableToken(each.getStopIndex() + 1,each.getColumnDefinition().getColumnName().getStopIndex(),each.getColumnDefinition().getColumnName().getIdentifier().getValue() + \"_assisted\",\", CHANGE COLUMN \" + optional)).ifPresent(result::add);\n    getEncryptRule().findPlainColumn(tableName,previousColumnName).map(optional -> new EncryptAlterTableToken(each.getStopIndex() + 1,each.getColumnDefinition().getColumnName().getStopIndex(),each.getColumnDefinition().getColumnName().getIdentifier().getValue() + \"_plain\",\", CHANGE COLUMN \" + optional)).ifPresent(result::add);\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 152,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1433,
                        "startLineNumber": 184,
                        "startColumnNumber": 152,
                        "endLineNumber": 201,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  Collection<SQLToken> result=new LinkedList<>();\n  for (  ChangeColumnDefinitionSegment each : changeColumnDefinitions) {\n    result.addAll(getPreviousColumnTokens(tableName,each));\n    result.addAll(getColumnTokens(tableName,each));\n    each.getColumnPosition().flatMap(columnPositionSegment -> getColumnPositionToken(tableName,columnPositionSegment)).ifPresent(result::add);\n    if (null != each.getPreviousColumn()) {\n      String previousColumnName=each.getPreviousColumn().getIdentifier().getValue();\n      getEncryptRule().findAssistedQueryColumn(tableName,previousColumnName).map(optional -> new EncryptAlterTableToken(each.getStopIndex() + 1,each.getColumnDefinition().getColumnName().getStopIndex(),each.getColumnDefinition().getColumnName().getIdentifier().getValue() + \"_assisted\",\", CHANGE COLUMN \" + optional)).ifPresent(result::add);\n      getEncryptRule().findPlainColumn(tableName,previousColumnName).map(optional -> new EncryptAlterTableToken(each.getStopIndex() + 1,each.getColumnDefinition().getColumnName().getStopIndex(),each.getColumnDefinition().getColumnName().getIdentifier().getValue() + \"_plain\",\", CHANGE COLUMN \" + optional)).ifPresent(result::add);\n    }\n  }\n  return result;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 167,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1581,
                        "startLineNumber": 184,
                        "startColumnNumber": 4,
                        "endLineNumber": 201,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private Collection<SQLToken> getChangeColumnTokens(final String tableName,final Collection<ChangeColumnDefinitionSegment> changeColumnDefinitions){\n  Collection<SQLToken> result=new LinkedList<>();\n  for (  ChangeColumnDefinitionSegment each : changeColumnDefinitions) {\n    result.addAll(getPreviousColumnTokens(tableName,each));\n    result.addAll(getColumnTokens(tableName,each));\n    each.getColumnPosition().flatMap(columnPositionSegment -> getColumnPositionToken(tableName,columnPositionSegment)).ifPresent(result::add);\n    if (null != each.getPreviousColumn()) {\n      String previousColumnName=each.getPreviousColumn().getIdentifier().getValue();\n      getEncryptRule().findAssistedQueryColumn(tableName,previousColumnName).map(optional -> new EncryptAlterTableToken(each.getStopIndex() + 1,each.getColumnDefinition().getColumnName().getStopIndex(),each.getColumnDefinition().getColumnName().getIdentifier().getValue() + \"_assisted\",\", CHANGE COLUMN \" + optional)).ifPresent(result::add);\n      getEncryptRule().findPlainColumn(tableName,previousColumnName).map(optional -> new EncryptAlterTableToken(each.getStopIndex() + 1,each.getColumnDefinition().getColumnName().getStopIndex(),each.getColumnDefinition().getColumnName().getIdentifier().getValue() + \"_plain\",\", CHANGE COLUMN \" + optional)).ifPresent(result::add);\n    }\n  }\n  return result;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 188,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 80,
                    "startLineNumber": 191,
                    "startColumnNumber": 16,
                    "endLineNumber": 191,
                    "endColumnNumber": 96
                },
                "nodeContext": "String previousColumnName=each.getPreviousColumn().getIdentifier().getValue();\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 12,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "org.apache.shardingsphere.sql.parser.sql.common.segment.ddl.column.alter.ChangeColumnDefinitionSegment"
        }
    ],
    "positionList": [
        {
            "charLength": 4,
            "startLineNumber": 187,
            "startColumnNumber": 61,
            "endLineNumber": 187,
            "endColumnNumber": 65
        },
        {
            "charLength": 4,
            "startLineNumber": 188,
            "startColumnNumber": 53,
            "endLineNumber": 188,
            "endColumnNumber": 57
        },
        {
            "charLength": 4,
            "startLineNumber": 189,
            "startColumnNumber": 12,
            "endLineNumber": 189,
            "endColumnNumber": 16
        },
        {
            "charLength": 4,
            "startLineNumber": 190,
            "startColumnNumber": 24,
            "endLineNumber": 190,
            "endColumnNumber": 28
        },
        {
            "charLength": 4,
            "startLineNumber": 191,
            "startColumnNumber": 44,
            "endLineNumber": 191,
            "endColumnNumber": 48
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 4,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 4,
            "secondKey": 2,
            "layout": 7
        },
        {
            "firstKey": 4,
            "secondKey": 3,
            "layout": 6
        }
    ]
}