{
    "id": 1244,
    "expression": "reportingTaskEntity",
    "projectName": "nifi",
    "commitID": "2a92747046b39d7b3f7604258c1d3bb81a9447bd",
    "filePath": "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ControllerResource.java",
    "occurrences": 12,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "reportingTaskEntity",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 19,
                "startLineNumber": 251,
                "startColumnNumber": 12,
                "endLineNumber": 251,
                "endColumnNumber": 31
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 27,
                        "startLineNumber": 251,
                        "startColumnNumber": 12,
                        "endLineNumber": 251,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "reportingTaskEntity == null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 73,
                        "startLineNumber": 251,
                        "startColumnNumber": 12,
                        "endLineNumber": 251,
                        "endColumnNumber": 85
                    },
                    "nodeContext": "reportingTaskEntity == null || reportingTaskEntity.getComponent() == null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 183,
                        "startLineNumber": 251,
                        "startColumnNumber": 8,
                        "endLineNumber": 253,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (reportingTaskEntity == null || reportingTaskEntity.getComponent() == null) {\n  throw new IllegalArgumentException(\"Reporting task details must be specified.\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 16,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2098,
                        "startLineNumber": 249,
                        "startColumnNumber": 61,
                        "endLineNumber": 293,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (reportingTaskEntity == null || reportingTaskEntity.getComponent() == null) {\n    throw new IllegalArgumentException(\"Reporting task details must be specified.\");\n  }\n  if (reportingTaskEntity.getRevision() == null || (reportingTaskEntity.getRevision().getVersion() == null || reportingTaskEntity.getRevision().getVersion() != 0)) {\n    throw new IllegalArgumentException(\"A revision of 0 must be specified when creating a new Reporting task.\");\n  }\n  if (reportingTaskEntity.getComponent().getId() != null) {\n    throw new IllegalArgumentException(\"Reporting task ID cannot be specified.\");\n  }\n  if (StringUtils.isBlank(reportingTaskEntity.getComponent().getType())) {\n    throw new IllegalArgumentException(\"The type of reporting task to create must be specified.\");\n  }\n  if (isReplicateRequest()) {\n    return replicate(HttpMethod.POST,reportingTaskEntity);\n  }\n  final boolean validationPhase=isValidationPhase(httpServletRequest);\n  if (validationPhase || !isTwoPhaseRequest(httpServletRequest)) {\n    serviceFacade.authorizeAccess(lookup -> {\n      authorizeController(RequestAction.WRITE);\n    }\n);\n  }\n  if (validationPhase) {\n    return generateContinueResponse().build();\n  }\n  reportingTaskEntity.getComponent().setId(generateUuid());\n  final Revision revision=getRevision(reportingTaskEntity,reportingTaskEntity.getComponent().getId());\n  final ReportingTaskEntity entity=serviceFacade.createReportingTask(revision,reportingTaskEntity.getComponent());\n  reportingTaskResource.populateRemainingReportingTaskEntityContent(entity);\n  return clusterContext(generateCreatedResponse(URI.create(entity.getUri()),entity)).build();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 178,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3591,
                        "startLineNumber": 218,
                        "startColumnNumber": 4,
                        "endLineNumber": 293,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Creates a new Reporting Task.\n * @param httpServletRequest  request\n * @param reportingTaskEntity A reportingTaskEntity.\n * @return A reportingTaskEntity.\n */\n@POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @Path(\"reporting-tasks\") @ApiOperation(value=\"Creates a new reporting task\",response=ReportingTaskEntity.class,authorizations={@Authorization(value=\"Write - /controller\",type=\"\")}) @ApiResponses(value={@ApiResponse(code=400,message=\"NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.\"),@ApiResponse(code=401,message=\"Client could not be authenticated.\"),@ApiResponse(code=403,message=\"Client is not authorized to make this request.\"),@ApiResponse(code=409,message=\"The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.\")}) public Response createReportingTask(@Context final HttpServletRequest httpServletRequest,@ApiParam(value=\"The reporting task configuration details.\",required=true) final ReportingTaskEntity reportingTaskEntity){\n  if (reportingTaskEntity == null || reportingTaskEntity.getComponent() == null) {\n    throw new IllegalArgumentException(\"Reporting task details must be specified.\");\n  }\n  if (reportingTaskEntity.getRevision() == null || (reportingTaskEntity.getRevision().getVersion() == null || reportingTaskEntity.getRevision().getVersion() != 0)) {\n    throw new IllegalArgumentException(\"A revision of 0 must be specified when creating a new Reporting task.\");\n  }\n  if (reportingTaskEntity.getComponent().getId() != null) {\n    throw new IllegalArgumentException(\"Reporting task ID cannot be specified.\");\n  }\n  if (StringUtils.isBlank(reportingTaskEntity.getComponent().getType())) {\n    throw new IllegalArgumentException(\"The type of reporting task to create must be specified.\");\n  }\n  if (isReplicateRequest()) {\n    return replicate(HttpMethod.POST,reportingTaskEntity);\n  }\n  final boolean validationPhase=isValidationPhase(httpServletRequest);\n  if (validationPhase || !isTwoPhaseRequest(httpServletRequest)) {\n    serviceFacade.authorizeAccess(lookup -> {\n      authorizeController(RequestAction.WRITE);\n    }\n);\n  }\n  if (validationPhase) {\n    return generateContinueResponse().build();\n  }\n  reportingTaskEntity.getComponent().setId(generateUuid());\n  final Revision revision=getRevision(reportingTaskEntity,reportingTaskEntity.getComponent().getId());\n  final ReportingTaskEntity entity=serviceFacade.createReportingTask(revision,reportingTaskEntity.getComponent());\n  reportingTaskResource.populateRemainingReportingTaskEntityContent(entity);\n  return clusterContext(generateCreatedResponse(URI.create(entity.getUri()),entity)).build();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 277,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 73,
                    "startLineNumber": 251,
                    "startColumnNumber": 12,
                    "endLineNumber": 251,
                    "endColumnNumber": 85
                },
                "nodeContext": "reportingTaskEntity == null || reportingTaskEntity.getComponent() == null",
                "nodeType": "InfixExpression",
                "astNodeNumber": 9,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.web.api.entity.ReportingTaskEntity"
        },
        {
            "nodeContext": "reportingTaskEntity",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 19,
                "startLineNumber": 251,
                "startColumnNumber": 43,
                "endLineNumber": 251,
                "endColumnNumber": 62
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 34,
                        "startLineNumber": 251,
                        "startColumnNumber": 43,
                        "endLineNumber": 251,
                        "endColumnNumber": 77
                    },
                    "nodeContext": "reportingTaskEntity.getComponent()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 42,
                        "startLineNumber": 251,
                        "startColumnNumber": 43,
                        "endLineNumber": 251,
                        "endColumnNumber": 85
                    },
                    "nodeContext": "reportingTaskEntity.getComponent() == null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 73,
                        "startLineNumber": 251,
                        "startColumnNumber": 12,
                        "endLineNumber": 251,
                        "endColumnNumber": 85
                    },
                    "nodeContext": "reportingTaskEntity == null || reportingTaskEntity.getComponent() == null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 183,
                        "startLineNumber": 251,
                        "startColumnNumber": 8,
                        "endLineNumber": 253,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (reportingTaskEntity == null || reportingTaskEntity.getComponent() == null) {\n  throw new IllegalArgumentException(\"Reporting task details must be specified.\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 16,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2098,
                        "startLineNumber": 249,
                        "startColumnNumber": 61,
                        "endLineNumber": 293,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (reportingTaskEntity == null || reportingTaskEntity.getComponent() == null) {\n    throw new IllegalArgumentException(\"Reporting task details must be specified.\");\n  }\n  if (reportingTaskEntity.getRevision() == null || (reportingTaskEntity.getRevision().getVersion() == null || reportingTaskEntity.getRevision().getVersion() != 0)) {\n    throw new IllegalArgumentException(\"A revision of 0 must be specified when creating a new Reporting task.\");\n  }\n  if (reportingTaskEntity.getComponent().getId() != null) {\n    throw new IllegalArgumentException(\"Reporting task ID cannot be specified.\");\n  }\n  if (StringUtils.isBlank(reportingTaskEntity.getComponent().getType())) {\n    throw new IllegalArgumentException(\"The type of reporting task to create must be specified.\");\n  }\n  if (isReplicateRequest()) {\n    return replicate(HttpMethod.POST,reportingTaskEntity);\n  }\n  final boolean validationPhase=isValidationPhase(httpServletRequest);\n  if (validationPhase || !isTwoPhaseRequest(httpServletRequest)) {\n    serviceFacade.authorizeAccess(lookup -> {\n      authorizeController(RequestAction.WRITE);\n    }\n);\n  }\n  if (validationPhase) {\n    return generateContinueResponse().build();\n  }\n  reportingTaskEntity.getComponent().setId(generateUuid());\n  final Revision revision=getRevision(reportingTaskEntity,reportingTaskEntity.getComponent().getId());\n  final ReportingTaskEntity entity=serviceFacade.createReportingTask(revision,reportingTaskEntity.getComponent());\n  reportingTaskResource.populateRemainingReportingTaskEntityContent(entity);\n  return clusterContext(generateCreatedResponse(URI.create(entity.getUri()),entity)).build();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 178,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3591,
                        "startLineNumber": 218,
                        "startColumnNumber": 4,
                        "endLineNumber": 293,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Creates a new Reporting Task.\n * @param httpServletRequest  request\n * @param reportingTaskEntity A reportingTaskEntity.\n * @return A reportingTaskEntity.\n */\n@POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @Path(\"reporting-tasks\") @ApiOperation(value=\"Creates a new reporting task\",response=ReportingTaskEntity.class,authorizations={@Authorization(value=\"Write - /controller\",type=\"\")}) @ApiResponses(value={@ApiResponse(code=400,message=\"NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.\"),@ApiResponse(code=401,message=\"Client could not be authenticated.\"),@ApiResponse(code=403,message=\"Client is not authorized to make this request.\"),@ApiResponse(code=409,message=\"The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.\")}) public Response createReportingTask(@Context final HttpServletRequest httpServletRequest,@ApiParam(value=\"The reporting task configuration details.\",required=true) final ReportingTaskEntity reportingTaskEntity){\n  if (reportingTaskEntity == null || reportingTaskEntity.getComponent() == null) {\n    throw new IllegalArgumentException(\"Reporting task details must be specified.\");\n  }\n  if (reportingTaskEntity.getRevision() == null || (reportingTaskEntity.getRevision().getVersion() == null || reportingTaskEntity.getRevision().getVersion() != 0)) {\n    throw new IllegalArgumentException(\"A revision of 0 must be specified when creating a new Reporting task.\");\n  }\n  if (reportingTaskEntity.getComponent().getId() != null) {\n    throw new IllegalArgumentException(\"Reporting task ID cannot be specified.\");\n  }\n  if (StringUtils.isBlank(reportingTaskEntity.getComponent().getType())) {\n    throw new IllegalArgumentException(\"The type of reporting task to create must be specified.\");\n  }\n  if (isReplicateRequest()) {\n    return replicate(HttpMethod.POST,reportingTaskEntity);\n  }\n  final boolean validationPhase=isValidationPhase(httpServletRequest);\n  if (validationPhase || !isTwoPhaseRequest(httpServletRequest)) {\n    serviceFacade.authorizeAccess(lookup -> {\n      authorizeController(RequestAction.WRITE);\n    }\n);\n  }\n  if (validationPhase) {\n    return generateContinueResponse().build();\n  }\n  reportingTaskEntity.getComponent().setId(generateUuid());\n  final Revision revision=getRevision(reportingTaskEntity,reportingTaskEntity.getComponent().getId());\n  final ReportingTaskEntity entity=serviceFacade.createReportingTask(revision,reportingTaskEntity.getComponent());\n  reportingTaskResource.populateRemainingReportingTaskEntityContent(entity);\n  return clusterContext(generateCreatedResponse(URI.create(entity.getUri()),entity)).build();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 277,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 73,
                    "startLineNumber": 251,
                    "startColumnNumber": 12,
                    "endLineNumber": 251,
                    "endColumnNumber": 85
                },
                "nodeContext": "reportingTaskEntity == null || reportingTaskEntity.getComponent() == null",
                "nodeType": "InfixExpression",
                "astNodeNumber": 9,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.web.api.entity.ReportingTaskEntity"
        },
        {
            "nodeContext": "reportingTaskEntity",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 19,
                "startLineNumber": 255,
                "startColumnNumber": 12,
                "endLineNumber": 255,
                "endColumnNumber": 31
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 33,
                        "startLineNumber": 255,
                        "startColumnNumber": 12,
                        "endLineNumber": 255,
                        "endColumnNumber": 45
                    },
                    "nodeContext": "reportingTaskEntity.getRevision()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 41,
                        "startLineNumber": 255,
                        "startColumnNumber": 12,
                        "endLineNumber": 255,
                        "endColumnNumber": 53
                    },
                    "nodeContext": "reportingTaskEntity.getRevision() == null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 156,
                        "startLineNumber": 255,
                        "startColumnNumber": 12,
                        "endLineNumber": 255,
                        "endColumnNumber": 168
                    },
                    "nodeContext": "reportingTaskEntity.getRevision() == null || (reportingTaskEntity.getRevision().getVersion() == null || reportingTaskEntity.getRevision().getVersion() != 0)",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 22,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 294,
                        "startLineNumber": 255,
                        "startColumnNumber": 8,
                        "endLineNumber": 257,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (reportingTaskEntity.getRevision() == null || (reportingTaskEntity.getRevision().getVersion() == null || reportingTaskEntity.getRevision().getVersion() != 0)) {\n  throw new IllegalArgumentException(\"A revision of 0 must be specified when creating a new Reporting task.\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 29,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2098,
                        "startLineNumber": 249,
                        "startColumnNumber": 61,
                        "endLineNumber": 293,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (reportingTaskEntity == null || reportingTaskEntity.getComponent() == null) {\n    throw new IllegalArgumentException(\"Reporting task details must be specified.\");\n  }\n  if (reportingTaskEntity.getRevision() == null || (reportingTaskEntity.getRevision().getVersion() == null || reportingTaskEntity.getRevision().getVersion() != 0)) {\n    throw new IllegalArgumentException(\"A revision of 0 must be specified when creating a new Reporting task.\");\n  }\n  if (reportingTaskEntity.getComponent().getId() != null) {\n    throw new IllegalArgumentException(\"Reporting task ID cannot be specified.\");\n  }\n  if (StringUtils.isBlank(reportingTaskEntity.getComponent().getType())) {\n    throw new IllegalArgumentException(\"The type of reporting task to create must be specified.\");\n  }\n  if (isReplicateRequest()) {\n    return replicate(HttpMethod.POST,reportingTaskEntity);\n  }\n  final boolean validationPhase=isValidationPhase(httpServletRequest);\n  if (validationPhase || !isTwoPhaseRequest(httpServletRequest)) {\n    serviceFacade.authorizeAccess(lookup -> {\n      authorizeController(RequestAction.WRITE);\n    }\n);\n  }\n  if (validationPhase) {\n    return generateContinueResponse().build();\n  }\n  reportingTaskEntity.getComponent().setId(generateUuid());\n  final Revision revision=getRevision(reportingTaskEntity,reportingTaskEntity.getComponent().getId());\n  final ReportingTaskEntity entity=serviceFacade.createReportingTask(revision,reportingTaskEntity.getComponent());\n  reportingTaskResource.populateRemainingReportingTaskEntityContent(entity);\n  return clusterContext(generateCreatedResponse(URI.create(entity.getUri()),entity)).build();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 178,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3591,
                        "startLineNumber": 218,
                        "startColumnNumber": 4,
                        "endLineNumber": 293,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Creates a new Reporting Task.\n * @param httpServletRequest  request\n * @param reportingTaskEntity A reportingTaskEntity.\n * @return A reportingTaskEntity.\n */\n@POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @Path(\"reporting-tasks\") @ApiOperation(value=\"Creates a new reporting task\",response=ReportingTaskEntity.class,authorizations={@Authorization(value=\"Write - /controller\",type=\"\")}) @ApiResponses(value={@ApiResponse(code=400,message=\"NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.\"),@ApiResponse(code=401,message=\"Client could not be authenticated.\"),@ApiResponse(code=403,message=\"Client is not authorized to make this request.\"),@ApiResponse(code=409,message=\"The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.\")}) public Response createReportingTask(@Context final HttpServletRequest httpServletRequest,@ApiParam(value=\"The reporting task configuration details.\",required=true) final ReportingTaskEntity reportingTaskEntity){\n  if (reportingTaskEntity == null || reportingTaskEntity.getComponent() == null) {\n    throw new IllegalArgumentException(\"Reporting task details must be specified.\");\n  }\n  if (reportingTaskEntity.getRevision() == null || (reportingTaskEntity.getRevision().getVersion() == null || reportingTaskEntity.getRevision().getVersion() != 0)) {\n    throw new IllegalArgumentException(\"A revision of 0 must be specified when creating a new Reporting task.\");\n  }\n  if (reportingTaskEntity.getComponent().getId() != null) {\n    throw new IllegalArgumentException(\"Reporting task ID cannot be specified.\");\n  }\n  if (StringUtils.isBlank(reportingTaskEntity.getComponent().getType())) {\n    throw new IllegalArgumentException(\"The type of reporting task to create must be specified.\");\n  }\n  if (isReplicateRequest()) {\n    return replicate(HttpMethod.POST,reportingTaskEntity);\n  }\n  final boolean validationPhase=isValidationPhase(httpServletRequest);\n  if (validationPhase || !isTwoPhaseRequest(httpServletRequest)) {\n    serviceFacade.authorizeAccess(lookup -> {\n      authorizeController(RequestAction.WRITE);\n    }\n);\n  }\n  if (validationPhase) {\n    return generateContinueResponse().build();\n  }\n  reportingTaskEntity.getComponent().setId(generateUuid());\n  final Revision revision=getRevision(reportingTaskEntity,reportingTaskEntity.getComponent().getId());\n  final ReportingTaskEntity entity=serviceFacade.createReportingTask(revision,reportingTaskEntity.getComponent());\n  reportingTaskResource.populateRemainingReportingTaskEntityContent(entity);\n  return clusterContext(generateCreatedResponse(URI.create(entity.getUri()),entity)).build();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 277,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 156,
                    "startLineNumber": 255,
                    "startColumnNumber": 12,
                    "endLineNumber": 255,
                    "endColumnNumber": 168
                },
                "nodeContext": "reportingTaskEntity.getRevision() == null || (reportingTaskEntity.getRevision().getVersion() == null || reportingTaskEntity.getRevision().getVersion() != 0)",
                "nodeType": "InfixExpression",
                "astNodeNumber": 22,
                "astHeight": 7
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.web.api.entity.ReportingTaskEntity"
        },
        {
            "nodeContext": "reportingTaskEntity",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 19,
                "startLineNumber": 255,
                "startColumnNumber": 58,
                "endLineNumber": 255,
                "endColumnNumber": 77
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 33,
                        "startLineNumber": 255,
                        "startColumnNumber": 58,
                        "endLineNumber": 255,
                        "endColumnNumber": 91
                    },
                    "nodeContext": "reportingTaskEntity.getRevision()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 46,
                        "startLineNumber": 255,
                        "startColumnNumber": 58,
                        "endLineNumber": 255,
                        "endColumnNumber": 104
                    },
                    "nodeContext": "reportingTaskEntity.getRevision().getVersion()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 54,
                        "startLineNumber": 255,
                        "startColumnNumber": 58,
                        "endLineNumber": 255,
                        "endColumnNumber": 112
                    },
                    "nodeContext": "reportingTaskEntity.getRevision().getVersion() == null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
                    "nodePosition": {
                        "charLength": 109,
                        "startLineNumber": 255,
                        "startColumnNumber": 58,
                        "endLineNumber": 255,
                        "endColumnNumber": 167
                    },
                    "nodeContext": "reportingTaskEntity.getRevision().getVersion() == null || reportingTaskEntity.getRevision().getVersion() != 0",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 15,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 111,
                        "startLineNumber": 255,
                        "startColumnNumber": 57,
                        "endLineNumber": 255,
                        "endColumnNumber": 168
                    },
                    "nodeContext": "(reportingTaskEntity.getRevision().getVersion() == null || reportingTaskEntity.getRevision().getVersion() != 0)",
                    "nodeType": "ParenthesizedExpression",
                    "astNodeNumber": 16,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 156,
                        "startLineNumber": 255,
                        "startColumnNumber": 12,
                        "endLineNumber": 255,
                        "endColumnNumber": 168
                    },
                    "nodeContext": "reportingTaskEntity.getRevision() == null || (reportingTaskEntity.getRevision().getVersion() == null || reportingTaskEntity.getRevision().getVersion() != 0)",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 22,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 294,
                        "startLineNumber": 255,
                        "startColumnNumber": 8,
                        "endLineNumber": 257,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (reportingTaskEntity.getRevision() == null || (reportingTaskEntity.getRevision().getVersion() == null || reportingTaskEntity.getRevision().getVersion() != 0)) {\n  throw new IllegalArgumentException(\"A revision of 0 must be specified when creating a new Reporting task.\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 29,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2098,
                        "startLineNumber": 249,
                        "startColumnNumber": 61,
                        "endLineNumber": 293,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (reportingTaskEntity == null || reportingTaskEntity.getComponent() == null) {\n    throw new IllegalArgumentException(\"Reporting task details must be specified.\");\n  }\n  if (reportingTaskEntity.getRevision() == null || (reportingTaskEntity.getRevision().getVersion() == null || reportingTaskEntity.getRevision().getVersion() != 0)) {\n    throw new IllegalArgumentException(\"A revision of 0 must be specified when creating a new Reporting task.\");\n  }\n  if (reportingTaskEntity.getComponent().getId() != null) {\n    throw new IllegalArgumentException(\"Reporting task ID cannot be specified.\");\n  }\n  if (StringUtils.isBlank(reportingTaskEntity.getComponent().getType())) {\n    throw new IllegalArgumentException(\"The type of reporting task to create must be specified.\");\n  }\n  if (isReplicateRequest()) {\n    return replicate(HttpMethod.POST,reportingTaskEntity);\n  }\n  final boolean validationPhase=isValidationPhase(httpServletRequest);\n  if (validationPhase || !isTwoPhaseRequest(httpServletRequest)) {\n    serviceFacade.authorizeAccess(lookup -> {\n      authorizeController(RequestAction.WRITE);\n    }\n);\n  }\n  if (validationPhase) {\n    return generateContinueResponse().build();\n  }\n  reportingTaskEntity.getComponent().setId(generateUuid());\n  final Revision revision=getRevision(reportingTaskEntity,reportingTaskEntity.getComponent().getId());\n  final ReportingTaskEntity entity=serviceFacade.createReportingTask(revision,reportingTaskEntity.getComponent());\n  reportingTaskResource.populateRemainingReportingTaskEntityContent(entity);\n  return clusterContext(generateCreatedResponse(URI.create(entity.getUri()),entity)).build();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 178,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3591,
                        "startLineNumber": 218,
                        "startColumnNumber": 4,
                        "endLineNumber": 293,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Creates a new Reporting Task.\n * @param httpServletRequest  request\n * @param reportingTaskEntity A reportingTaskEntity.\n * @return A reportingTaskEntity.\n */\n@POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @Path(\"reporting-tasks\") @ApiOperation(value=\"Creates a new reporting task\",response=ReportingTaskEntity.class,authorizations={@Authorization(value=\"Write - /controller\",type=\"\")}) @ApiResponses(value={@ApiResponse(code=400,message=\"NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.\"),@ApiResponse(code=401,message=\"Client could not be authenticated.\"),@ApiResponse(code=403,message=\"Client is not authorized to make this request.\"),@ApiResponse(code=409,message=\"The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.\")}) public Response createReportingTask(@Context final HttpServletRequest httpServletRequest,@ApiParam(value=\"The reporting task configuration details.\",required=true) final ReportingTaskEntity reportingTaskEntity){\n  if (reportingTaskEntity == null || reportingTaskEntity.getComponent() == null) {\n    throw new IllegalArgumentException(\"Reporting task details must be specified.\");\n  }\n  if (reportingTaskEntity.getRevision() == null || (reportingTaskEntity.getRevision().getVersion() == null || reportingTaskEntity.getRevision().getVersion() != 0)) {\n    throw new IllegalArgumentException(\"A revision of 0 must be specified when creating a new Reporting task.\");\n  }\n  if (reportingTaskEntity.getComponent().getId() != null) {\n    throw new IllegalArgumentException(\"Reporting task ID cannot be specified.\");\n  }\n  if (StringUtils.isBlank(reportingTaskEntity.getComponent().getType())) {\n    throw new IllegalArgumentException(\"The type of reporting task to create must be specified.\");\n  }\n  if (isReplicateRequest()) {\n    return replicate(HttpMethod.POST,reportingTaskEntity);\n  }\n  final boolean validationPhase=isValidationPhase(httpServletRequest);\n  if (validationPhase || !isTwoPhaseRequest(httpServletRequest)) {\n    serviceFacade.authorizeAccess(lookup -> {\n      authorizeController(RequestAction.WRITE);\n    }\n);\n  }\n  if (validationPhase) {\n    return generateContinueResponse().build();\n  }\n  reportingTaskEntity.getComponent().setId(generateUuid());\n  final Revision revision=getRevision(reportingTaskEntity,reportingTaskEntity.getComponent().getId());\n  final ReportingTaskEntity entity=serviceFacade.createReportingTask(revision,reportingTaskEntity.getComponent());\n  reportingTaskResource.populateRemainingReportingTaskEntityContent(entity);\n  return clusterContext(generateCreatedResponse(URI.create(entity.getUri()),entity)).build();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 277,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 156,
                    "startLineNumber": 255,
                    "startColumnNumber": 12,
                    "endLineNumber": 255,
                    "endColumnNumber": 168
                },
                "nodeContext": "reportingTaskEntity.getRevision() == null || (reportingTaskEntity.getRevision().getVersion() == null || reportingTaskEntity.getRevision().getVersion() != 0)",
                "nodeType": "InfixExpression",
                "astNodeNumber": 22,
                "astHeight": 7
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.web.api.entity.ReportingTaskEntity"
        },
        {
            "nodeContext": "reportingTaskEntity",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 19,
                "startLineNumber": 255,
                "startColumnNumber": 116,
                "endLineNumber": 255,
                "endColumnNumber": 135
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 33,
                        "startLineNumber": 255,
                        "startColumnNumber": 116,
                        "endLineNumber": 255,
                        "endColumnNumber": 149
                    },
                    "nodeContext": "reportingTaskEntity.getRevision()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 46,
                        "startLineNumber": 255,
                        "startColumnNumber": 116,
                        "endLineNumber": 255,
                        "endColumnNumber": 162
                    },
                    "nodeContext": "reportingTaskEntity.getRevision().getVersion()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 51,
                        "startLineNumber": 255,
                        "startColumnNumber": 116,
                        "endLineNumber": 255,
                        "endColumnNumber": 167
                    },
                    "nodeContext": "reportingTaskEntity.getRevision().getVersion() != 0",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
                    "nodePosition": {
                        "charLength": 109,
                        "startLineNumber": 255,
                        "startColumnNumber": 58,
                        "endLineNumber": 255,
                        "endColumnNumber": 167
                    },
                    "nodeContext": "reportingTaskEntity.getRevision().getVersion() == null || reportingTaskEntity.getRevision().getVersion() != 0",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 15,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 111,
                        "startLineNumber": 255,
                        "startColumnNumber": 57,
                        "endLineNumber": 255,
                        "endColumnNumber": 168
                    },
                    "nodeContext": "(reportingTaskEntity.getRevision().getVersion() == null || reportingTaskEntity.getRevision().getVersion() != 0)",
                    "nodeType": "ParenthesizedExpression",
                    "astNodeNumber": 16,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 156,
                        "startLineNumber": 255,
                        "startColumnNumber": 12,
                        "endLineNumber": 255,
                        "endColumnNumber": 168
                    },
                    "nodeContext": "reportingTaskEntity.getRevision() == null || (reportingTaskEntity.getRevision().getVersion() == null || reportingTaskEntity.getRevision().getVersion() != 0)",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 22,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 294,
                        "startLineNumber": 255,
                        "startColumnNumber": 8,
                        "endLineNumber": 257,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (reportingTaskEntity.getRevision() == null || (reportingTaskEntity.getRevision().getVersion() == null || reportingTaskEntity.getRevision().getVersion() != 0)) {\n  throw new IllegalArgumentException(\"A revision of 0 must be specified when creating a new Reporting task.\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 29,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2098,
                        "startLineNumber": 249,
                        "startColumnNumber": 61,
                        "endLineNumber": 293,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (reportingTaskEntity == null || reportingTaskEntity.getComponent() == null) {\n    throw new IllegalArgumentException(\"Reporting task details must be specified.\");\n  }\n  if (reportingTaskEntity.getRevision() == null || (reportingTaskEntity.getRevision().getVersion() == null || reportingTaskEntity.getRevision().getVersion() != 0)) {\n    throw new IllegalArgumentException(\"A revision of 0 must be specified when creating a new Reporting task.\");\n  }\n  if (reportingTaskEntity.getComponent().getId() != null) {\n    throw new IllegalArgumentException(\"Reporting task ID cannot be specified.\");\n  }\n  if (StringUtils.isBlank(reportingTaskEntity.getComponent().getType())) {\n    throw new IllegalArgumentException(\"The type of reporting task to create must be specified.\");\n  }\n  if (isReplicateRequest()) {\n    return replicate(HttpMethod.POST,reportingTaskEntity);\n  }\n  final boolean validationPhase=isValidationPhase(httpServletRequest);\n  if (validationPhase || !isTwoPhaseRequest(httpServletRequest)) {\n    serviceFacade.authorizeAccess(lookup -> {\n      authorizeController(RequestAction.WRITE);\n    }\n);\n  }\n  if (validationPhase) {\n    return generateContinueResponse().build();\n  }\n  reportingTaskEntity.getComponent().setId(generateUuid());\n  final Revision revision=getRevision(reportingTaskEntity,reportingTaskEntity.getComponent().getId());\n  final ReportingTaskEntity entity=serviceFacade.createReportingTask(revision,reportingTaskEntity.getComponent());\n  reportingTaskResource.populateRemainingReportingTaskEntityContent(entity);\n  return clusterContext(generateCreatedResponse(URI.create(entity.getUri()),entity)).build();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 178,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3591,
                        "startLineNumber": 218,
                        "startColumnNumber": 4,
                        "endLineNumber": 293,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Creates a new Reporting Task.\n * @param httpServletRequest  request\n * @param reportingTaskEntity A reportingTaskEntity.\n * @return A reportingTaskEntity.\n */\n@POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @Path(\"reporting-tasks\") @ApiOperation(value=\"Creates a new reporting task\",response=ReportingTaskEntity.class,authorizations={@Authorization(value=\"Write - /controller\",type=\"\")}) @ApiResponses(value={@ApiResponse(code=400,message=\"NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.\"),@ApiResponse(code=401,message=\"Client could not be authenticated.\"),@ApiResponse(code=403,message=\"Client is not authorized to make this request.\"),@ApiResponse(code=409,message=\"The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.\")}) public Response createReportingTask(@Context final HttpServletRequest httpServletRequest,@ApiParam(value=\"The reporting task configuration details.\",required=true) final ReportingTaskEntity reportingTaskEntity){\n  if (reportingTaskEntity == null || reportingTaskEntity.getComponent() == null) {\n    throw new IllegalArgumentException(\"Reporting task details must be specified.\");\n  }\n  if (reportingTaskEntity.getRevision() == null || (reportingTaskEntity.getRevision().getVersion() == null || reportingTaskEntity.getRevision().getVersion() != 0)) {\n    throw new IllegalArgumentException(\"A revision of 0 must be specified when creating a new Reporting task.\");\n  }\n  if (reportingTaskEntity.getComponent().getId() != null) {\n    throw new IllegalArgumentException(\"Reporting task ID cannot be specified.\");\n  }\n  if (StringUtils.isBlank(reportingTaskEntity.getComponent().getType())) {\n    throw new IllegalArgumentException(\"The type of reporting task to create must be specified.\");\n  }\n  if (isReplicateRequest()) {\n    return replicate(HttpMethod.POST,reportingTaskEntity);\n  }\n  final boolean validationPhase=isValidationPhase(httpServletRequest);\n  if (validationPhase || !isTwoPhaseRequest(httpServletRequest)) {\n    serviceFacade.authorizeAccess(lookup -> {\n      authorizeController(RequestAction.WRITE);\n    }\n);\n  }\n  if (validationPhase) {\n    return generateContinueResponse().build();\n  }\n  reportingTaskEntity.getComponent().setId(generateUuid());\n  final Revision revision=getRevision(reportingTaskEntity,reportingTaskEntity.getComponent().getId());\n  final ReportingTaskEntity entity=serviceFacade.createReportingTask(revision,reportingTaskEntity.getComponent());\n  reportingTaskResource.populateRemainingReportingTaskEntityContent(entity);\n  return clusterContext(generateCreatedResponse(URI.create(entity.getUri()),entity)).build();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 277,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 156,
                    "startLineNumber": 255,
                    "startColumnNumber": 12,
                    "endLineNumber": 255,
                    "endColumnNumber": 168
                },
                "nodeContext": "reportingTaskEntity.getRevision() == null || (reportingTaskEntity.getRevision().getVersion() == null || reportingTaskEntity.getRevision().getVersion() != 0)",
                "nodeType": "InfixExpression",
                "astNodeNumber": 22,
                "astHeight": 7
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.web.api.entity.ReportingTaskEntity"
        },
        {
            "nodeContext": "reportingTaskEntity",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 19,
                "startLineNumber": 259,
                "startColumnNumber": 12,
                "endLineNumber": 259,
                "endColumnNumber": 31
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 34,
                        "startLineNumber": 259,
                        "startColumnNumber": 12,
                        "endLineNumber": 259,
                        "endColumnNumber": 46
                    },
                    "nodeContext": "reportingTaskEntity.getComponent()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 42,
                        "startLineNumber": 259,
                        "startColumnNumber": 12,
                        "endLineNumber": 259,
                        "endColumnNumber": 54
                    },
                    "nodeContext": "reportingTaskEntity.getComponent().getId()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 50,
                        "startLineNumber": 259,
                        "startColumnNumber": 12,
                        "endLineNumber": 259,
                        "endColumnNumber": 62
                    },
                    "nodeContext": "reportingTaskEntity.getComponent().getId() != null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 157,
                        "startLineNumber": 259,
                        "startColumnNumber": 8,
                        "endLineNumber": 261,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (reportingTaskEntity.getComponent().getId() != null) {\n  throw new IllegalArgumentException(\"Reporting task ID cannot be specified.\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 14,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2098,
                        "startLineNumber": 249,
                        "startColumnNumber": 61,
                        "endLineNumber": 293,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (reportingTaskEntity == null || reportingTaskEntity.getComponent() == null) {\n    throw new IllegalArgumentException(\"Reporting task details must be specified.\");\n  }\n  if (reportingTaskEntity.getRevision() == null || (reportingTaskEntity.getRevision().getVersion() == null || reportingTaskEntity.getRevision().getVersion() != 0)) {\n    throw new IllegalArgumentException(\"A revision of 0 must be specified when creating a new Reporting task.\");\n  }\n  if (reportingTaskEntity.getComponent().getId() != null) {\n    throw new IllegalArgumentException(\"Reporting task ID cannot be specified.\");\n  }\n  if (StringUtils.isBlank(reportingTaskEntity.getComponent().getType())) {\n    throw new IllegalArgumentException(\"The type of reporting task to create must be specified.\");\n  }\n  if (isReplicateRequest()) {\n    return replicate(HttpMethod.POST,reportingTaskEntity);\n  }\n  final boolean validationPhase=isValidationPhase(httpServletRequest);\n  if (validationPhase || !isTwoPhaseRequest(httpServletRequest)) {\n    serviceFacade.authorizeAccess(lookup -> {\n      authorizeController(RequestAction.WRITE);\n    }\n);\n  }\n  if (validationPhase) {\n    return generateContinueResponse().build();\n  }\n  reportingTaskEntity.getComponent().setId(generateUuid());\n  final Revision revision=getRevision(reportingTaskEntity,reportingTaskEntity.getComponent().getId());\n  final ReportingTaskEntity entity=serviceFacade.createReportingTask(revision,reportingTaskEntity.getComponent());\n  reportingTaskResource.populateRemainingReportingTaskEntityContent(entity);\n  return clusterContext(generateCreatedResponse(URI.create(entity.getUri()),entity)).build();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 178,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3591,
                        "startLineNumber": 218,
                        "startColumnNumber": 4,
                        "endLineNumber": 293,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Creates a new Reporting Task.\n * @param httpServletRequest  request\n * @param reportingTaskEntity A reportingTaskEntity.\n * @return A reportingTaskEntity.\n */\n@POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @Path(\"reporting-tasks\") @ApiOperation(value=\"Creates a new reporting task\",response=ReportingTaskEntity.class,authorizations={@Authorization(value=\"Write - /controller\",type=\"\")}) @ApiResponses(value={@ApiResponse(code=400,message=\"NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.\"),@ApiResponse(code=401,message=\"Client could not be authenticated.\"),@ApiResponse(code=403,message=\"Client is not authorized to make this request.\"),@ApiResponse(code=409,message=\"The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.\")}) public Response createReportingTask(@Context final HttpServletRequest httpServletRequest,@ApiParam(value=\"The reporting task configuration details.\",required=true) final ReportingTaskEntity reportingTaskEntity){\n  if (reportingTaskEntity == null || reportingTaskEntity.getComponent() == null) {\n    throw new IllegalArgumentException(\"Reporting task details must be specified.\");\n  }\n  if (reportingTaskEntity.getRevision() == null || (reportingTaskEntity.getRevision().getVersion() == null || reportingTaskEntity.getRevision().getVersion() != 0)) {\n    throw new IllegalArgumentException(\"A revision of 0 must be specified when creating a new Reporting task.\");\n  }\n  if (reportingTaskEntity.getComponent().getId() != null) {\n    throw new IllegalArgumentException(\"Reporting task ID cannot be specified.\");\n  }\n  if (StringUtils.isBlank(reportingTaskEntity.getComponent().getType())) {\n    throw new IllegalArgumentException(\"The type of reporting task to create must be specified.\");\n  }\n  if (isReplicateRequest()) {\n    return replicate(HttpMethod.POST,reportingTaskEntity);\n  }\n  final boolean validationPhase=isValidationPhase(httpServletRequest);\n  if (validationPhase || !isTwoPhaseRequest(httpServletRequest)) {\n    serviceFacade.authorizeAccess(lookup -> {\n      authorizeController(RequestAction.WRITE);\n    }\n);\n  }\n  if (validationPhase) {\n    return generateContinueResponse().build();\n  }\n  reportingTaskEntity.getComponent().setId(generateUuid());\n  final Revision revision=getRevision(reportingTaskEntity,reportingTaskEntity.getComponent().getId());\n  final ReportingTaskEntity entity=serviceFacade.createReportingTask(revision,reportingTaskEntity.getComponent());\n  reportingTaskResource.populateRemainingReportingTaskEntityContent(entity);\n  return clusterContext(generateCreatedResponse(URI.create(entity.getUri()),entity)).build();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 277,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 50,
                    "startLineNumber": 259,
                    "startColumnNumber": 12,
                    "endLineNumber": 259,
                    "endColumnNumber": 62
                },
                "nodeContext": "reportingTaskEntity.getComponent().getId() != null",
                "nodeType": "InfixExpression",
                "astNodeNumber": 7,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.web.api.entity.ReportingTaskEntity"
        },
        {
            "nodeContext": "reportingTaskEntity",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 19,
                "startLineNumber": 263,
                "startColumnNumber": 32,
                "endLineNumber": 263,
                "endColumnNumber": 51
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 34,
                        "startLineNumber": 263,
                        "startColumnNumber": 32,
                        "endLineNumber": 263,
                        "endColumnNumber": 66
                    },
                    "nodeContext": "reportingTaskEntity.getComponent()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 44,
                        "startLineNumber": 263,
                        "startColumnNumber": 32,
                        "endLineNumber": 263,
                        "endColumnNumber": 76
                    },
                    "nodeContext": "reportingTaskEntity.getComponent().getType()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 65,
                        "startLineNumber": 263,
                        "startColumnNumber": 12,
                        "endLineNumber": 263,
                        "endColumnNumber": 77
                    },
                    "nodeContext": "StringUtils.isBlank(reportingTaskEntity.getComponent().getType())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 189,
                        "startLineNumber": 263,
                        "startColumnNumber": 8,
                        "endLineNumber": 265,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (StringUtils.isBlank(reportingTaskEntity.getComponent().getType())) {\n  throw new IllegalArgumentException(\"The type of reporting task to create must be specified.\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 15,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2098,
                        "startLineNumber": 249,
                        "startColumnNumber": 61,
                        "endLineNumber": 293,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (reportingTaskEntity == null || reportingTaskEntity.getComponent() == null) {\n    throw new IllegalArgumentException(\"Reporting task details must be specified.\");\n  }\n  if (reportingTaskEntity.getRevision() == null || (reportingTaskEntity.getRevision().getVersion() == null || reportingTaskEntity.getRevision().getVersion() != 0)) {\n    throw new IllegalArgumentException(\"A revision of 0 must be specified when creating a new Reporting task.\");\n  }\n  if (reportingTaskEntity.getComponent().getId() != null) {\n    throw new IllegalArgumentException(\"Reporting task ID cannot be specified.\");\n  }\n  if (StringUtils.isBlank(reportingTaskEntity.getComponent().getType())) {\n    throw new IllegalArgumentException(\"The type of reporting task to create must be specified.\");\n  }\n  if (isReplicateRequest()) {\n    return replicate(HttpMethod.POST,reportingTaskEntity);\n  }\n  final boolean validationPhase=isValidationPhase(httpServletRequest);\n  if (validationPhase || !isTwoPhaseRequest(httpServletRequest)) {\n    serviceFacade.authorizeAccess(lookup -> {\n      authorizeController(RequestAction.WRITE);\n    }\n);\n  }\n  if (validationPhase) {\n    return generateContinueResponse().build();\n  }\n  reportingTaskEntity.getComponent().setId(generateUuid());\n  final Revision revision=getRevision(reportingTaskEntity,reportingTaskEntity.getComponent().getId());\n  final ReportingTaskEntity entity=serviceFacade.createReportingTask(revision,reportingTaskEntity.getComponent());\n  reportingTaskResource.populateRemainingReportingTaskEntityContent(entity);\n  return clusterContext(generateCreatedResponse(URI.create(entity.getUri()),entity)).build();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 178,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3591,
                        "startLineNumber": 218,
                        "startColumnNumber": 4,
                        "endLineNumber": 293,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Creates a new Reporting Task.\n * @param httpServletRequest  request\n * @param reportingTaskEntity A reportingTaskEntity.\n * @return A reportingTaskEntity.\n */\n@POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @Path(\"reporting-tasks\") @ApiOperation(value=\"Creates a new reporting task\",response=ReportingTaskEntity.class,authorizations={@Authorization(value=\"Write - /controller\",type=\"\")}) @ApiResponses(value={@ApiResponse(code=400,message=\"NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.\"),@ApiResponse(code=401,message=\"Client could not be authenticated.\"),@ApiResponse(code=403,message=\"Client is not authorized to make this request.\"),@ApiResponse(code=409,message=\"The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.\")}) public Response createReportingTask(@Context final HttpServletRequest httpServletRequest,@ApiParam(value=\"The reporting task configuration details.\",required=true) final ReportingTaskEntity reportingTaskEntity){\n  if (reportingTaskEntity == null || reportingTaskEntity.getComponent() == null) {\n    throw new IllegalArgumentException(\"Reporting task details must be specified.\");\n  }\n  if (reportingTaskEntity.getRevision() == null || (reportingTaskEntity.getRevision().getVersion() == null || reportingTaskEntity.getRevision().getVersion() != 0)) {\n    throw new IllegalArgumentException(\"A revision of 0 must be specified when creating a new Reporting task.\");\n  }\n  if (reportingTaskEntity.getComponent().getId() != null) {\n    throw new IllegalArgumentException(\"Reporting task ID cannot be specified.\");\n  }\n  if (StringUtils.isBlank(reportingTaskEntity.getComponent().getType())) {\n    throw new IllegalArgumentException(\"The type of reporting task to create must be specified.\");\n  }\n  if (isReplicateRequest()) {\n    return replicate(HttpMethod.POST,reportingTaskEntity);\n  }\n  final boolean validationPhase=isValidationPhase(httpServletRequest);\n  if (validationPhase || !isTwoPhaseRequest(httpServletRequest)) {\n    serviceFacade.authorizeAccess(lookup -> {\n      authorizeController(RequestAction.WRITE);\n    }\n);\n  }\n  if (validationPhase) {\n    return generateContinueResponse().build();\n  }\n  reportingTaskEntity.getComponent().setId(generateUuid());\n  final Revision revision=getRevision(reportingTaskEntity,reportingTaskEntity.getComponent().getId());\n  final ReportingTaskEntity entity=serviceFacade.createReportingTask(revision,reportingTaskEntity.getComponent());\n  reportingTaskResource.populateRemainingReportingTaskEntityContent(entity);\n  return clusterContext(generateCreatedResponse(URI.create(entity.getUri()),entity)).build();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 277,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 65,
                    "startLineNumber": 263,
                    "startColumnNumber": 12,
                    "endLineNumber": 263,
                    "endColumnNumber": 77
                },
                "nodeContext": "StringUtils.isBlank(reportingTaskEntity.getComponent().getType())",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.web.api.entity.ReportingTaskEntity"
        },
        {
            "nodeContext": "reportingTaskEntity",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 19,
                "startLineNumber": 268,
                "startColumnNumber": 46,
                "endLineNumber": 268,
                "endColumnNumber": 65
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
                    "nodePosition": {
                        "charLength": 47,
                        "startLineNumber": 268,
                        "startColumnNumber": 19,
                        "endLineNumber": 268,
                        "endColumnNumber": 66
                    },
                    "nodeContext": "replicate(HttpMethod.POST,reportingTaskEntity)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 55,
                        "startLineNumber": 268,
                        "startColumnNumber": 12,
                        "endLineNumber": 268,
                        "endColumnNumber": 67
                    },
                    "nodeContext": "return replicate(HttpMethod.POST,reportingTaskEntity);\n",
                    "nodeType": "ReturnStatement",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 79,
                        "startLineNumber": 267,
                        "startColumnNumber": 34,
                        "endLineNumber": 269,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  return replicate(HttpMethod.POST,reportingTaskEntity);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 105,
                        "startLineNumber": 267,
                        "startColumnNumber": 8,
                        "endLineNumber": 269,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (isReplicateRequest()) {\n  return replicate(HttpMethod.POST,reportingTaskEntity);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 11,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2098,
                        "startLineNumber": 249,
                        "startColumnNumber": 61,
                        "endLineNumber": 293,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (reportingTaskEntity == null || reportingTaskEntity.getComponent() == null) {\n    throw new IllegalArgumentException(\"Reporting task details must be specified.\");\n  }\n  if (reportingTaskEntity.getRevision() == null || (reportingTaskEntity.getRevision().getVersion() == null || reportingTaskEntity.getRevision().getVersion() != 0)) {\n    throw new IllegalArgumentException(\"A revision of 0 must be specified when creating a new Reporting task.\");\n  }\n  if (reportingTaskEntity.getComponent().getId() != null) {\n    throw new IllegalArgumentException(\"Reporting task ID cannot be specified.\");\n  }\n  if (StringUtils.isBlank(reportingTaskEntity.getComponent().getType())) {\n    throw new IllegalArgumentException(\"The type of reporting task to create must be specified.\");\n  }\n  if (isReplicateRequest()) {\n    return replicate(HttpMethod.POST,reportingTaskEntity);\n  }\n  final boolean validationPhase=isValidationPhase(httpServletRequest);\n  if (validationPhase || !isTwoPhaseRequest(httpServletRequest)) {\n    serviceFacade.authorizeAccess(lookup -> {\n      authorizeController(RequestAction.WRITE);\n    }\n);\n  }\n  if (validationPhase) {\n    return generateContinueResponse().build();\n  }\n  reportingTaskEntity.getComponent().setId(generateUuid());\n  final Revision revision=getRevision(reportingTaskEntity,reportingTaskEntity.getComponent().getId());\n  final ReportingTaskEntity entity=serviceFacade.createReportingTask(revision,reportingTaskEntity.getComponent());\n  reportingTaskResource.populateRemainingReportingTaskEntityContent(entity);\n  return clusterContext(generateCreatedResponse(URI.create(entity.getUri()),entity)).build();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 178,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3591,
                        "startLineNumber": 218,
                        "startColumnNumber": 4,
                        "endLineNumber": 293,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Creates a new Reporting Task.\n * @param httpServletRequest  request\n * @param reportingTaskEntity A reportingTaskEntity.\n * @return A reportingTaskEntity.\n */\n@POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @Path(\"reporting-tasks\") @ApiOperation(value=\"Creates a new reporting task\",response=ReportingTaskEntity.class,authorizations={@Authorization(value=\"Write - /controller\",type=\"\")}) @ApiResponses(value={@ApiResponse(code=400,message=\"NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.\"),@ApiResponse(code=401,message=\"Client could not be authenticated.\"),@ApiResponse(code=403,message=\"Client is not authorized to make this request.\"),@ApiResponse(code=409,message=\"The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.\")}) public Response createReportingTask(@Context final HttpServletRequest httpServletRequest,@ApiParam(value=\"The reporting task configuration details.\",required=true) final ReportingTaskEntity reportingTaskEntity){\n  if (reportingTaskEntity == null || reportingTaskEntity.getComponent() == null) {\n    throw new IllegalArgumentException(\"Reporting task details must be specified.\");\n  }\n  if (reportingTaskEntity.getRevision() == null || (reportingTaskEntity.getRevision().getVersion() == null || reportingTaskEntity.getRevision().getVersion() != 0)) {\n    throw new IllegalArgumentException(\"A revision of 0 must be specified when creating a new Reporting task.\");\n  }\n  if (reportingTaskEntity.getComponent().getId() != null) {\n    throw new IllegalArgumentException(\"Reporting task ID cannot be specified.\");\n  }\n  if (StringUtils.isBlank(reportingTaskEntity.getComponent().getType())) {\n    throw new IllegalArgumentException(\"The type of reporting task to create must be specified.\");\n  }\n  if (isReplicateRequest()) {\n    return replicate(HttpMethod.POST,reportingTaskEntity);\n  }\n  final boolean validationPhase=isValidationPhase(httpServletRequest);\n  if (validationPhase || !isTwoPhaseRequest(httpServletRequest)) {\n    serviceFacade.authorizeAccess(lookup -> {\n      authorizeController(RequestAction.WRITE);\n    }\n);\n  }\n  if (validationPhase) {\n    return generateContinueResponse().build();\n  }\n  reportingTaskEntity.getComponent().setId(generateUuid());\n  final Revision revision=getRevision(reportingTaskEntity,reportingTaskEntity.getComponent().getId());\n  final ReportingTaskEntity entity=serviceFacade.createReportingTask(revision,reportingTaskEntity.getComponent());\n  reportingTaskResource.populateRemainingReportingTaskEntityContent(entity);\n  return clusterContext(generateCreatedResponse(URI.create(entity.getUri()),entity)).build();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 277,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 55,
                    "startLineNumber": 268,
                    "startColumnNumber": 12,
                    "endLineNumber": 268,
                    "endColumnNumber": 67
                },
                "nodeContext": "return replicate(HttpMethod.POST,reportingTaskEntity);\n",
                "nodeType": "ReturnStatement",
                "astNodeNumber": 7,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.web.api.entity.ReportingTaskEntity"
        },
        {
            "nodeContext": "reportingTaskEntity",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 19,
                "startLineNumber": 284,
                "startColumnNumber": 8,
                "endLineNumber": 284,
                "endColumnNumber": 27
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 34,
                        "startLineNumber": 284,
                        "startColumnNumber": 8,
                        "endLineNumber": 284,
                        "endColumnNumber": 42
                    },
                    "nodeContext": "reportingTaskEntity.getComponent()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 56,
                        "startLineNumber": 284,
                        "startColumnNumber": 8,
                        "endLineNumber": 284,
                        "endColumnNumber": 64
                    },
                    "nodeContext": "reportingTaskEntity.getComponent().setId(generateUuid())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 57,
                        "startLineNumber": 284,
                        "startColumnNumber": 8,
                        "endLineNumber": 284,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "reportingTaskEntity.getComponent().setId(generateUuid());\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2098,
                        "startLineNumber": 249,
                        "startColumnNumber": 61,
                        "endLineNumber": 293,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (reportingTaskEntity == null || reportingTaskEntity.getComponent() == null) {\n    throw new IllegalArgumentException(\"Reporting task details must be specified.\");\n  }\n  if (reportingTaskEntity.getRevision() == null || (reportingTaskEntity.getRevision().getVersion() == null || reportingTaskEntity.getRevision().getVersion() != 0)) {\n    throw new IllegalArgumentException(\"A revision of 0 must be specified when creating a new Reporting task.\");\n  }\n  if (reportingTaskEntity.getComponent().getId() != null) {\n    throw new IllegalArgumentException(\"Reporting task ID cannot be specified.\");\n  }\n  if (StringUtils.isBlank(reportingTaskEntity.getComponent().getType())) {\n    throw new IllegalArgumentException(\"The type of reporting task to create must be specified.\");\n  }\n  if (isReplicateRequest()) {\n    return replicate(HttpMethod.POST,reportingTaskEntity);\n  }\n  final boolean validationPhase=isValidationPhase(httpServletRequest);\n  if (validationPhase || !isTwoPhaseRequest(httpServletRequest)) {\n    serviceFacade.authorizeAccess(lookup -> {\n      authorizeController(RequestAction.WRITE);\n    }\n);\n  }\n  if (validationPhase) {\n    return generateContinueResponse().build();\n  }\n  reportingTaskEntity.getComponent().setId(generateUuid());\n  final Revision revision=getRevision(reportingTaskEntity,reportingTaskEntity.getComponent().getId());\n  final ReportingTaskEntity entity=serviceFacade.createReportingTask(revision,reportingTaskEntity.getComponent());\n  reportingTaskResource.populateRemainingReportingTaskEntityContent(entity);\n  return clusterContext(generateCreatedResponse(URI.create(entity.getUri()),entity)).build();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 178,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3591,
                        "startLineNumber": 218,
                        "startColumnNumber": 4,
                        "endLineNumber": 293,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Creates a new Reporting Task.\n * @param httpServletRequest  request\n * @param reportingTaskEntity A reportingTaskEntity.\n * @return A reportingTaskEntity.\n */\n@POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @Path(\"reporting-tasks\") @ApiOperation(value=\"Creates a new reporting task\",response=ReportingTaskEntity.class,authorizations={@Authorization(value=\"Write - /controller\",type=\"\")}) @ApiResponses(value={@ApiResponse(code=400,message=\"NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.\"),@ApiResponse(code=401,message=\"Client could not be authenticated.\"),@ApiResponse(code=403,message=\"Client is not authorized to make this request.\"),@ApiResponse(code=409,message=\"The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.\")}) public Response createReportingTask(@Context final HttpServletRequest httpServletRequest,@ApiParam(value=\"The reporting task configuration details.\",required=true) final ReportingTaskEntity reportingTaskEntity){\n  if (reportingTaskEntity == null || reportingTaskEntity.getComponent() == null) {\n    throw new IllegalArgumentException(\"Reporting task details must be specified.\");\n  }\n  if (reportingTaskEntity.getRevision() == null || (reportingTaskEntity.getRevision().getVersion() == null || reportingTaskEntity.getRevision().getVersion() != 0)) {\n    throw new IllegalArgumentException(\"A revision of 0 must be specified when creating a new Reporting task.\");\n  }\n  if (reportingTaskEntity.getComponent().getId() != null) {\n    throw new IllegalArgumentException(\"Reporting task ID cannot be specified.\");\n  }\n  if (StringUtils.isBlank(reportingTaskEntity.getComponent().getType())) {\n    throw new IllegalArgumentException(\"The type of reporting task to create must be specified.\");\n  }\n  if (isReplicateRequest()) {\n    return replicate(HttpMethod.POST,reportingTaskEntity);\n  }\n  final boolean validationPhase=isValidationPhase(httpServletRequest);\n  if (validationPhase || !isTwoPhaseRequest(httpServletRequest)) {\n    serviceFacade.authorizeAccess(lookup -> {\n      authorizeController(RequestAction.WRITE);\n    }\n);\n  }\n  if (validationPhase) {\n    return generateContinueResponse().build();\n  }\n  reportingTaskEntity.getComponent().setId(generateUuid());\n  final Revision revision=getRevision(reportingTaskEntity,reportingTaskEntity.getComponent().getId());\n  final ReportingTaskEntity entity=serviceFacade.createReportingTask(revision,reportingTaskEntity.getComponent());\n  reportingTaskResource.populateRemainingReportingTaskEntityContent(entity);\n  return clusterContext(generateCreatedResponse(URI.create(entity.getUri()),entity)).build();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 277,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 57,
                    "startLineNumber": 284,
                    "startColumnNumber": 8,
                    "endLineNumber": 284,
                    "endColumnNumber": 65
                },
                "nodeContext": "reportingTaskEntity.getComponent().setId(generateUuid());\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.web.api.entity.ReportingTaskEntity"
        },
        {
            "nodeContext": "reportingTaskEntity",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 19,
                "startLineNumber": 287,
                "startColumnNumber": 46,
                "endLineNumber": 287,
                "endColumnNumber": 65
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 76,
                        "startLineNumber": 287,
                        "startColumnNumber": 34,
                        "endLineNumber": 287,
                        "endColumnNumber": 110
                    },
                    "nodeContext": "getRevision(reportingTaskEntity,reportingTaskEntity.getComponent().getId())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 87,
                        "startLineNumber": 287,
                        "startColumnNumber": 23,
                        "endLineNumber": 287,
                        "endColumnNumber": 110
                    },
                    "nodeContext": "revision=getRevision(reportingTaskEntity,reportingTaskEntity.getComponent().getId())",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 10,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 103,
                        "startLineNumber": 287,
                        "startColumnNumber": 8,
                        "endLineNumber": 287,
                        "endColumnNumber": 111
                    },
                    "nodeContext": "final Revision revision=getRevision(reportingTaskEntity,reportingTaskEntity.getComponent().getId());\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 14,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2098,
                        "startLineNumber": 249,
                        "startColumnNumber": 61,
                        "endLineNumber": 293,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (reportingTaskEntity == null || reportingTaskEntity.getComponent() == null) {\n    throw new IllegalArgumentException(\"Reporting task details must be specified.\");\n  }\n  if (reportingTaskEntity.getRevision() == null || (reportingTaskEntity.getRevision().getVersion() == null || reportingTaskEntity.getRevision().getVersion() != 0)) {\n    throw new IllegalArgumentException(\"A revision of 0 must be specified when creating a new Reporting task.\");\n  }\n  if (reportingTaskEntity.getComponent().getId() != null) {\n    throw new IllegalArgumentException(\"Reporting task ID cannot be specified.\");\n  }\n  if (StringUtils.isBlank(reportingTaskEntity.getComponent().getType())) {\n    throw new IllegalArgumentException(\"The type of reporting task to create must be specified.\");\n  }\n  if (isReplicateRequest()) {\n    return replicate(HttpMethod.POST,reportingTaskEntity);\n  }\n  final boolean validationPhase=isValidationPhase(httpServletRequest);\n  if (validationPhase || !isTwoPhaseRequest(httpServletRequest)) {\n    serviceFacade.authorizeAccess(lookup -> {\n      authorizeController(RequestAction.WRITE);\n    }\n);\n  }\n  if (validationPhase) {\n    return generateContinueResponse().build();\n  }\n  reportingTaskEntity.getComponent().setId(generateUuid());\n  final Revision revision=getRevision(reportingTaskEntity,reportingTaskEntity.getComponent().getId());\n  final ReportingTaskEntity entity=serviceFacade.createReportingTask(revision,reportingTaskEntity.getComponent());\n  reportingTaskResource.populateRemainingReportingTaskEntityContent(entity);\n  return clusterContext(generateCreatedResponse(URI.create(entity.getUri()),entity)).build();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 178,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3591,
                        "startLineNumber": 218,
                        "startColumnNumber": 4,
                        "endLineNumber": 293,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Creates a new Reporting Task.\n * @param httpServletRequest  request\n * @param reportingTaskEntity A reportingTaskEntity.\n * @return A reportingTaskEntity.\n */\n@POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @Path(\"reporting-tasks\") @ApiOperation(value=\"Creates a new reporting task\",response=ReportingTaskEntity.class,authorizations={@Authorization(value=\"Write - /controller\",type=\"\")}) @ApiResponses(value={@ApiResponse(code=400,message=\"NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.\"),@ApiResponse(code=401,message=\"Client could not be authenticated.\"),@ApiResponse(code=403,message=\"Client is not authorized to make this request.\"),@ApiResponse(code=409,message=\"The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.\")}) public Response createReportingTask(@Context final HttpServletRequest httpServletRequest,@ApiParam(value=\"The reporting task configuration details.\",required=true) final ReportingTaskEntity reportingTaskEntity){\n  if (reportingTaskEntity == null || reportingTaskEntity.getComponent() == null) {\n    throw new IllegalArgumentException(\"Reporting task details must be specified.\");\n  }\n  if (reportingTaskEntity.getRevision() == null || (reportingTaskEntity.getRevision().getVersion() == null || reportingTaskEntity.getRevision().getVersion() != 0)) {\n    throw new IllegalArgumentException(\"A revision of 0 must be specified when creating a new Reporting task.\");\n  }\n  if (reportingTaskEntity.getComponent().getId() != null) {\n    throw new IllegalArgumentException(\"Reporting task ID cannot be specified.\");\n  }\n  if (StringUtils.isBlank(reportingTaskEntity.getComponent().getType())) {\n    throw new IllegalArgumentException(\"The type of reporting task to create must be specified.\");\n  }\n  if (isReplicateRequest()) {\n    return replicate(HttpMethod.POST,reportingTaskEntity);\n  }\n  final boolean validationPhase=isValidationPhase(httpServletRequest);\n  if (validationPhase || !isTwoPhaseRequest(httpServletRequest)) {\n    serviceFacade.authorizeAccess(lookup -> {\n      authorizeController(RequestAction.WRITE);\n    }\n);\n  }\n  if (validationPhase) {\n    return generateContinueResponse().build();\n  }\n  reportingTaskEntity.getComponent().setId(generateUuid());\n  final Revision revision=getRevision(reportingTaskEntity,reportingTaskEntity.getComponent().getId());\n  final ReportingTaskEntity entity=serviceFacade.createReportingTask(revision,reportingTaskEntity.getComponent());\n  reportingTaskResource.populateRemainingReportingTaskEntityContent(entity);\n  return clusterContext(generateCreatedResponse(URI.create(entity.getUri()),entity)).build();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 277,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 103,
                    "startLineNumber": 287,
                    "startColumnNumber": 8,
                    "endLineNumber": 287,
                    "endColumnNumber": 111
                },
                "nodeContext": "final Revision revision=getRevision(reportingTaskEntity,reportingTaskEntity.getComponent().getId());\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 14,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.web.api.entity.ReportingTaskEntity"
        },
        {
            "nodeContext": "reportingTaskEntity",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 19,
                "startLineNumber": 287,
                "startColumnNumber": 67,
                "endLineNumber": 287,
                "endColumnNumber": 86
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 34,
                        "startLineNumber": 287,
                        "startColumnNumber": 67,
                        "endLineNumber": 287,
                        "endColumnNumber": 101
                    },
                    "nodeContext": "reportingTaskEntity.getComponent()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 42,
                        "startLineNumber": 287,
                        "startColumnNumber": 67,
                        "endLineNumber": 287,
                        "endColumnNumber": 109
                    },
                    "nodeContext": "reportingTaskEntity.getComponent().getId()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 76,
                        "startLineNumber": 287,
                        "startColumnNumber": 34,
                        "endLineNumber": 287,
                        "endColumnNumber": 110
                    },
                    "nodeContext": "getRevision(reportingTaskEntity,reportingTaskEntity.getComponent().getId())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 87,
                        "startLineNumber": 287,
                        "startColumnNumber": 23,
                        "endLineNumber": 287,
                        "endColumnNumber": 110
                    },
                    "nodeContext": "revision=getRevision(reportingTaskEntity,reportingTaskEntity.getComponent().getId())",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 10,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 103,
                        "startLineNumber": 287,
                        "startColumnNumber": 8,
                        "endLineNumber": 287,
                        "endColumnNumber": 111
                    },
                    "nodeContext": "final Revision revision=getRevision(reportingTaskEntity,reportingTaskEntity.getComponent().getId());\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 14,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2098,
                        "startLineNumber": 249,
                        "startColumnNumber": 61,
                        "endLineNumber": 293,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (reportingTaskEntity == null || reportingTaskEntity.getComponent() == null) {\n    throw new IllegalArgumentException(\"Reporting task details must be specified.\");\n  }\n  if (reportingTaskEntity.getRevision() == null || (reportingTaskEntity.getRevision().getVersion() == null || reportingTaskEntity.getRevision().getVersion() != 0)) {\n    throw new IllegalArgumentException(\"A revision of 0 must be specified when creating a new Reporting task.\");\n  }\n  if (reportingTaskEntity.getComponent().getId() != null) {\n    throw new IllegalArgumentException(\"Reporting task ID cannot be specified.\");\n  }\n  if (StringUtils.isBlank(reportingTaskEntity.getComponent().getType())) {\n    throw new IllegalArgumentException(\"The type of reporting task to create must be specified.\");\n  }\n  if (isReplicateRequest()) {\n    return replicate(HttpMethod.POST,reportingTaskEntity);\n  }\n  final boolean validationPhase=isValidationPhase(httpServletRequest);\n  if (validationPhase || !isTwoPhaseRequest(httpServletRequest)) {\n    serviceFacade.authorizeAccess(lookup -> {\n      authorizeController(RequestAction.WRITE);\n    }\n);\n  }\n  if (validationPhase) {\n    return generateContinueResponse().build();\n  }\n  reportingTaskEntity.getComponent().setId(generateUuid());\n  final Revision revision=getRevision(reportingTaskEntity,reportingTaskEntity.getComponent().getId());\n  final ReportingTaskEntity entity=serviceFacade.createReportingTask(revision,reportingTaskEntity.getComponent());\n  reportingTaskResource.populateRemainingReportingTaskEntityContent(entity);\n  return clusterContext(generateCreatedResponse(URI.create(entity.getUri()),entity)).build();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 178,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3591,
                        "startLineNumber": 218,
                        "startColumnNumber": 4,
                        "endLineNumber": 293,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Creates a new Reporting Task.\n * @param httpServletRequest  request\n * @param reportingTaskEntity A reportingTaskEntity.\n * @return A reportingTaskEntity.\n */\n@POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @Path(\"reporting-tasks\") @ApiOperation(value=\"Creates a new reporting task\",response=ReportingTaskEntity.class,authorizations={@Authorization(value=\"Write - /controller\",type=\"\")}) @ApiResponses(value={@ApiResponse(code=400,message=\"NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.\"),@ApiResponse(code=401,message=\"Client could not be authenticated.\"),@ApiResponse(code=403,message=\"Client is not authorized to make this request.\"),@ApiResponse(code=409,message=\"The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.\")}) public Response createReportingTask(@Context final HttpServletRequest httpServletRequest,@ApiParam(value=\"The reporting task configuration details.\",required=true) final ReportingTaskEntity reportingTaskEntity){\n  if (reportingTaskEntity == null || reportingTaskEntity.getComponent() == null) {\n    throw new IllegalArgumentException(\"Reporting task details must be specified.\");\n  }\n  if (reportingTaskEntity.getRevision() == null || (reportingTaskEntity.getRevision().getVersion() == null || reportingTaskEntity.getRevision().getVersion() != 0)) {\n    throw new IllegalArgumentException(\"A revision of 0 must be specified when creating a new Reporting task.\");\n  }\n  if (reportingTaskEntity.getComponent().getId() != null) {\n    throw new IllegalArgumentException(\"Reporting task ID cannot be specified.\");\n  }\n  if (StringUtils.isBlank(reportingTaskEntity.getComponent().getType())) {\n    throw new IllegalArgumentException(\"The type of reporting task to create must be specified.\");\n  }\n  if (isReplicateRequest()) {\n    return replicate(HttpMethod.POST,reportingTaskEntity);\n  }\n  final boolean validationPhase=isValidationPhase(httpServletRequest);\n  if (validationPhase || !isTwoPhaseRequest(httpServletRequest)) {\n    serviceFacade.authorizeAccess(lookup -> {\n      authorizeController(RequestAction.WRITE);\n    }\n);\n  }\n  if (validationPhase) {\n    return generateContinueResponse().build();\n  }\n  reportingTaskEntity.getComponent().setId(generateUuid());\n  final Revision revision=getRevision(reportingTaskEntity,reportingTaskEntity.getComponent().getId());\n  final ReportingTaskEntity entity=serviceFacade.createReportingTask(revision,reportingTaskEntity.getComponent());\n  reportingTaskResource.populateRemainingReportingTaskEntityContent(entity);\n  return clusterContext(generateCreatedResponse(URI.create(entity.getUri()),entity)).build();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 277,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 103,
                    "startLineNumber": 287,
                    "startColumnNumber": 8,
                    "endLineNumber": 287,
                    "endColumnNumber": 111
                },
                "nodeContext": "final Revision revision=getRevision(reportingTaskEntity,reportingTaskEntity.getComponent().getId());\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 14,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.web.api.entity.ReportingTaskEntity"
        },
        {
            "nodeContext": "reportingTaskEntity",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 19,
                "startLineNumber": 288,
                "startColumnNumber": 87,
                "endLineNumber": 288,
                "endColumnNumber": 106
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 34,
                        "startLineNumber": 288,
                        "startColumnNumber": 87,
                        "endLineNumber": 288,
                        "endColumnNumber": 121
                    },
                    "nodeContext": "reportingTaskEntity.getComponent()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 79,
                        "startLineNumber": 288,
                        "startColumnNumber": 43,
                        "endLineNumber": 288,
                        "endColumnNumber": 122
                    },
                    "nodeContext": "serviceFacade.createReportingTask(revision,reportingTaskEntity.getComponent())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 88,
                        "startLineNumber": 288,
                        "startColumnNumber": 34,
                        "endLineNumber": 288,
                        "endColumnNumber": 122
                    },
                    "nodeContext": "entity=serviceFacade.createReportingTask(revision,reportingTaskEntity.getComponent())",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 115,
                        "startLineNumber": 288,
                        "startColumnNumber": 8,
                        "endLineNumber": 288,
                        "endColumnNumber": 123
                    },
                    "nodeContext": "final ReportingTaskEntity entity=serviceFacade.createReportingTask(revision,reportingTaskEntity.getComponent());\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 13,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2098,
                        "startLineNumber": 249,
                        "startColumnNumber": 61,
                        "endLineNumber": 293,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (reportingTaskEntity == null || reportingTaskEntity.getComponent() == null) {\n    throw new IllegalArgumentException(\"Reporting task details must be specified.\");\n  }\n  if (reportingTaskEntity.getRevision() == null || (reportingTaskEntity.getRevision().getVersion() == null || reportingTaskEntity.getRevision().getVersion() != 0)) {\n    throw new IllegalArgumentException(\"A revision of 0 must be specified when creating a new Reporting task.\");\n  }\n  if (reportingTaskEntity.getComponent().getId() != null) {\n    throw new IllegalArgumentException(\"Reporting task ID cannot be specified.\");\n  }\n  if (StringUtils.isBlank(reportingTaskEntity.getComponent().getType())) {\n    throw new IllegalArgumentException(\"The type of reporting task to create must be specified.\");\n  }\n  if (isReplicateRequest()) {\n    return replicate(HttpMethod.POST,reportingTaskEntity);\n  }\n  final boolean validationPhase=isValidationPhase(httpServletRequest);\n  if (validationPhase || !isTwoPhaseRequest(httpServletRequest)) {\n    serviceFacade.authorizeAccess(lookup -> {\n      authorizeController(RequestAction.WRITE);\n    }\n);\n  }\n  if (validationPhase) {\n    return generateContinueResponse().build();\n  }\n  reportingTaskEntity.getComponent().setId(generateUuid());\n  final Revision revision=getRevision(reportingTaskEntity,reportingTaskEntity.getComponent().getId());\n  final ReportingTaskEntity entity=serviceFacade.createReportingTask(revision,reportingTaskEntity.getComponent());\n  reportingTaskResource.populateRemainingReportingTaskEntityContent(entity);\n  return clusterContext(generateCreatedResponse(URI.create(entity.getUri()),entity)).build();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 178,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3591,
                        "startLineNumber": 218,
                        "startColumnNumber": 4,
                        "endLineNumber": 293,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Creates a new Reporting Task.\n * @param httpServletRequest  request\n * @param reportingTaskEntity A reportingTaskEntity.\n * @return A reportingTaskEntity.\n */\n@POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @Path(\"reporting-tasks\") @ApiOperation(value=\"Creates a new reporting task\",response=ReportingTaskEntity.class,authorizations={@Authorization(value=\"Write - /controller\",type=\"\")}) @ApiResponses(value={@ApiResponse(code=400,message=\"NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.\"),@ApiResponse(code=401,message=\"Client could not be authenticated.\"),@ApiResponse(code=403,message=\"Client is not authorized to make this request.\"),@ApiResponse(code=409,message=\"The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.\")}) public Response createReportingTask(@Context final HttpServletRequest httpServletRequest,@ApiParam(value=\"The reporting task configuration details.\",required=true) final ReportingTaskEntity reportingTaskEntity){\n  if (reportingTaskEntity == null || reportingTaskEntity.getComponent() == null) {\n    throw new IllegalArgumentException(\"Reporting task details must be specified.\");\n  }\n  if (reportingTaskEntity.getRevision() == null || (reportingTaskEntity.getRevision().getVersion() == null || reportingTaskEntity.getRevision().getVersion() != 0)) {\n    throw new IllegalArgumentException(\"A revision of 0 must be specified when creating a new Reporting task.\");\n  }\n  if (reportingTaskEntity.getComponent().getId() != null) {\n    throw new IllegalArgumentException(\"Reporting task ID cannot be specified.\");\n  }\n  if (StringUtils.isBlank(reportingTaskEntity.getComponent().getType())) {\n    throw new IllegalArgumentException(\"The type of reporting task to create must be specified.\");\n  }\n  if (isReplicateRequest()) {\n    return replicate(HttpMethod.POST,reportingTaskEntity);\n  }\n  final boolean validationPhase=isValidationPhase(httpServletRequest);\n  if (validationPhase || !isTwoPhaseRequest(httpServletRequest)) {\n    serviceFacade.authorizeAccess(lookup -> {\n      authorizeController(RequestAction.WRITE);\n    }\n);\n  }\n  if (validationPhase) {\n    return generateContinueResponse().build();\n  }\n  reportingTaskEntity.getComponent().setId(generateUuid());\n  final Revision revision=getRevision(reportingTaskEntity,reportingTaskEntity.getComponent().getId());\n  final ReportingTaskEntity entity=serviceFacade.createReportingTask(revision,reportingTaskEntity.getComponent());\n  reportingTaskResource.populateRemainingReportingTaskEntityContent(entity);\n  return clusterContext(generateCreatedResponse(URI.create(entity.getUri()),entity)).build();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 277,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 115,
                    "startLineNumber": 288,
                    "startColumnNumber": 8,
                    "endLineNumber": 288,
                    "endColumnNumber": 123
                },
                "nodeContext": "final ReportingTaskEntity entity=serviceFacade.createReportingTask(revision,reportingTaskEntity.getComponent());\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 13,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.web.api.entity.ReportingTaskEntity"
        }
    ],
    "positionList": [
        {
            "charLength": 19,
            "startLineNumber": 251,
            "startColumnNumber": 12,
            "endLineNumber": 251,
            "endColumnNumber": 31
        },
        {
            "charLength": 19,
            "startLineNumber": 251,
            "startColumnNumber": 43,
            "endLineNumber": 251,
            "endColumnNumber": 62
        },
        {
            "charLength": 19,
            "startLineNumber": 255,
            "startColumnNumber": 12,
            "endLineNumber": 255,
            "endColumnNumber": 31
        },
        {
            "charLength": 19,
            "startLineNumber": 255,
            "startColumnNumber": 58,
            "endLineNumber": 255,
            "endColumnNumber": 77
        },
        {
            "charLength": 19,
            "startLineNumber": 255,
            "startColumnNumber": 116,
            "endLineNumber": 255,
            "endColumnNumber": 135
        },
        {
            "charLength": 19,
            "startLineNumber": 259,
            "startColumnNumber": 12,
            "endLineNumber": 259,
            "endColumnNumber": 31
        },
        {
            "charLength": 19,
            "startLineNumber": 263,
            "startColumnNumber": 32,
            "endLineNumber": 263,
            "endColumnNumber": 51
        },
        {
            "charLength": 19,
            "startLineNumber": 268,
            "startColumnNumber": 46,
            "endLineNumber": 268,
            "endColumnNumber": 65
        },
        {
            "charLength": 19,
            "startLineNumber": 284,
            "startColumnNumber": 8,
            "endLineNumber": 284,
            "endColumnNumber": 27
        },
        {
            "charLength": 19,
            "startLineNumber": 287,
            "startColumnNumber": 46,
            "endLineNumber": 287,
            "endColumnNumber": 65
        },
        {
            "charLength": 19,
            "startLineNumber": 287,
            "startColumnNumber": 67,
            "endLineNumber": 287,
            "endColumnNumber": 86
        },
        {
            "charLength": 19,
            "startLineNumber": 288,
            "startColumnNumber": 87,
            "endLineNumber": 288,
            "endColumnNumber": 106
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 1
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 3,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 5,
            "layout": 7
        },
        {
            "firstKey": 3,
            "secondKey": 6,
            "layout": 7
        },
        {
            "firstKey": 3,
            "secondKey": 7,
            "layout": 7
        },
        {
            "firstKey": 3,
            "secondKey": 8,
            "layout": 7
        },
        {
            "firstKey": 3,
            "secondKey": 9,
            "layout": 7
        },
        {
            "firstKey": 3,
            "secondKey": 10,
            "layout": 7
        },
        {
            "firstKey": 3,
            "secondKey": 11,
            "layout": 7
        },
        {
            "firstKey": 4,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 4,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 4,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 5,
            "layout": 7
        },
        {
            "firstKey": 4,
            "secondKey": 6,
            "layout": 7
        },
        {
            "firstKey": 4,
            "secondKey": 7,
            "layout": 7
        },
        {
            "firstKey": 4,
            "secondKey": 8,
            "layout": 7
        },
        {
            "firstKey": 4,
            "secondKey": 9,
            "layout": 7
        },
        {
            "firstKey": 4,
            "secondKey": 10,
            "layout": 7
        },
        {
            "firstKey": 4,
            "secondKey": 11,
            "layout": 7
        },
        {
            "firstKey": 5,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 10,
            "layout": 0
        },
        {
            "firstKey": 9,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 8,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 10,
            "secondKey": 11,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 11,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 11,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 11,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 11,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 11,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 11,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 11,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 11,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 11,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 11,
            "secondKey": 10,
            "layout": 4
        }
    ]
}