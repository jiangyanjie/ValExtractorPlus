{
    "id": 1483,
    "expression": "pk",
    "projectName": "commons-math",
    "commitID": "a8045be9dd5c809edf2437132ab777f78b788b44",
    "filePath": "src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java",
    "occurrences": 7,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 0,
    "expressionList": [
        {
            "nodeContext": "pk",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 863,
                "startColumnNumber": 38,
                "endLineNumber": 863,
                "endColumnNumber": 40
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 28,
                        "startLineNumber": 863,
                        "startColumnNumber": 12,
                        "endLineNumber": 863,
                        "endColumnNumber": 40
                    },
                    "nodeContext": "permutation[k]=pk",
                    "nodeType": "Assignment",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 29,
                        "startLineNumber": 863,
                        "startColumnNumber": 12,
                        "endLineNumber": 863,
                        "endColumnNumber": 41
                    },
                    "nodeContext": "permutation[k]=pk;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 6,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 2140,
                        "startLineNumber": 837,
                        "startColumnNumber": 39,
                        "endLineNumber": 886,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  int nextColumn=-1;\n  double ak2=Double.NEGATIVE_INFINITY;\n  for (int i=k; i < cols; ++i) {\n    double norm2=0;\n    for (int j=k; j < weightedResidualJacobian.length; ++j) {\n      double aki=weightedResidualJacobian[j][permutation[i]];\n      norm2+=aki * aki;\n    }\n    if (Double.isInfinite(norm2) || Double.isNaN(norm2)) {\n      throw new ConvergenceException(LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN,rows,cols);\n    }\n    if (norm2 > ak2) {\n      nextColumn=i;\n      ak2=norm2;\n    }\n  }\n  if (ak2 <= qrRankingThreshold) {\n    rank=k;\n    return;\n  }\n  int pk=permutation[nextColumn];\n  permutation[nextColumn]=permutation[k];\n  permutation[k]=pk;\n  double akk=weightedResidualJacobian[k][pk];\n  double alpha=(akk > 0) ? -FastMath.sqrt(ak2) : FastMath.sqrt(ak2);\n  double betak=1.0 / (ak2 - akk * alpha);\n  beta[pk]=betak;\n  diagR[pk]=alpha;\n  weightedResidualJacobian[k][pk]-=alpha;\n  for (int dk=cols - 1 - k; dk > 0; --dk) {\n    double gamma=0;\n    for (int j=k; j < weightedResidualJacobian.length; ++j) {\n      gamma+=weightedResidualJacobian[j][pk] * weightedResidualJacobian[j][permutation[k + dk]];\n    }\n    gamma*=betak;\n    for (int j=k; j < weightedResidualJacobian.length; ++j) {\n      weightedResidualJacobian[j][permutation[k + dk]]-=gamma * weightedResidualJacobian[j][pk];\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 273,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2171,
                        "startLineNumber": 837,
                        "startColumnNumber": 8,
                        "endLineNumber": 886,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int k=0; k < cols; ++k) {\n  int nextColumn=-1;\n  double ak2=Double.NEGATIVE_INFINITY;\n  for (int i=k; i < cols; ++i) {\n    double norm2=0;\n    for (int j=k; j < weightedResidualJacobian.length; ++j) {\n      double aki=weightedResidualJacobian[j][permutation[i]];\n      norm2+=aki * aki;\n    }\n    if (Double.isInfinite(norm2) || Double.isNaN(norm2)) {\n      throw new ConvergenceException(LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN,rows,cols);\n    }\n    if (norm2 > ak2) {\n      nextColumn=i;\n      ak2=norm2;\n    }\n  }\n  if (ak2 <= qrRankingThreshold) {\n    rank=k;\n    return;\n  }\n  int pk=permutation[nextColumn];\n  permutation[nextColumn]=permutation[k];\n  permutation[k]=pk;\n  double akk=weightedResidualJacobian[k][pk];\n  double alpha=(akk > 0) ? -FastMath.sqrt(ak2) : FastMath.sqrt(ak2);\n  double betak=1.0 / (ak2 - akk * alpha);\n  beta[pk]=betak;\n  diagR[pk]=alpha;\n  weightedResidualJacobian[k][pk]-=alpha;\n  for (int dk=cols - 1 - k; dk > 0; --dk) {\n    double gamma=0;\n    for (int j=k; j < weightedResidualJacobian.length; ++j) {\n      gamma+=weightedResidualJacobian[j][pk] * weightedResidualJacobian[j][permutation[k + dk]];\n    }\n    gamma*=betak;\n    for (int j=k; j < weightedResidualJacobian.length; ++j) {\n      weightedResidualJacobian[j][permutation[k + dk]]-=gamma * weightedResidualJacobian[j][pk];\n    }\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 284,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2638,
                        "startLineNumber": 823,
                        "startColumnNumber": 63,
                        "endLineNumber": 888,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  for (int k=0; k < cols; ++k) {\n    permutation[k]=k;\n    double norm2=0;\n    for (int i=0; i < weightedResidualJacobian.length; ++i) {\n      double akk=weightedResidualJacobian[i][k];\n      norm2+=akk * akk;\n    }\n    jacNorm[k]=FastMath.sqrt(norm2);\n  }\n  for (int k=0; k < cols; ++k) {\n    int nextColumn=-1;\n    double ak2=Double.NEGATIVE_INFINITY;\n    for (int i=k; i < cols; ++i) {\n      double norm2=0;\n      for (int j=k; j < weightedResidualJacobian.length; ++j) {\n        double aki=weightedResidualJacobian[j][permutation[i]];\n        norm2+=aki * aki;\n      }\n      if (Double.isInfinite(norm2) || Double.isNaN(norm2)) {\n        throw new ConvergenceException(LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN,rows,cols);\n      }\n      if (norm2 > ak2) {\n        nextColumn=i;\n        ak2=norm2;\n      }\n    }\n    if (ak2 <= qrRankingThreshold) {\n      rank=k;\n      return;\n    }\n    int pk=permutation[nextColumn];\n    permutation[nextColumn]=permutation[k];\n    permutation[k]=pk;\n    double akk=weightedResidualJacobian[k][pk];\n    double alpha=(akk > 0) ? -FastMath.sqrt(ak2) : FastMath.sqrt(ak2);\n    double betak=1.0 / (ak2 - akk * alpha);\n    beta[pk]=betak;\n    diagR[pk]=alpha;\n    weightedResidualJacobian[k][pk]-=alpha;\n    for (int dk=cols - 1 - k; dk > 0; --dk) {\n      double gamma=0;\n      for (int j=k; j < weightedResidualJacobian.length; ++j) {\n        gamma+=weightedResidualJacobian[j][pk] * weightedResidualJacobian[j][permutation[k + dk]];\n      }\n      gamma*=betak;\n      for (int j=k; j < weightedResidualJacobian.length; ++j) {\n        weightedResidualJacobian[j][permutation[k + dk]]-=gamma * weightedResidualJacobian[j][pk];\n      }\n    }\n  }\n  rank=solvedCols;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 350,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3921,
                        "startLineNumber": 801,
                        "startColumnNumber": 4,
                        "endLineNumber": 888,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Decompose a matrix A as A.P = Q.R using Householder transforms. <p>As suggested in the P. Lascaux and R. Theodor book <i>Analyse num&eacute;rique matricielle appliqu&eacute;e &agrave; l'art de l'ing&eacute;nieur</i> (Masson, 1986), instead of representing the Householder transforms with u<sub>k</sub> unit vectors such that: <pre> H<sub>k</sub> = I - 2u<sub>k</sub>.u<sub>k</sub><sup>t</sup> </pre> we use <sub>k</sub> non-unit vectors such that: <pre> H<sub>k</sub> = I - beta<sub>k</sub>v<sub>k</sub>.v<sub>k</sub><sup>t</sup> </pre> where v<sub>k</sub> = a<sub>k</sub> - alpha<sub>k</sub> e<sub>k</sub>. The beta<sub>k</sub> coefficients are provided upon exit as recomputing them from the v<sub>k</sub> vectors would be costly.</p> <p>This decomposition handles rank deficient cases since the tranformations are performed in non-increasing columns norms order thanks to columns pivoting. The diagonal elements of the R matrix are therefore also in non-increasing absolute values order.</p>\n * @exception ConvergenceException if the decomposition cannot be performed\n */\nprivate void qrDecomposition() throws ConvergenceException {\n  for (int k=0; k < cols; ++k) {\n    permutation[k]=k;\n    double norm2=0;\n    for (int i=0; i < weightedResidualJacobian.length; ++i) {\n      double akk=weightedResidualJacobian[i][k];\n      norm2+=akk * akk;\n    }\n    jacNorm[k]=FastMath.sqrt(norm2);\n  }\n  for (int k=0; k < cols; ++k) {\n    int nextColumn=-1;\n    double ak2=Double.NEGATIVE_INFINITY;\n    for (int i=k; i < cols; ++i) {\n      double norm2=0;\n      for (int j=k; j < weightedResidualJacobian.length; ++j) {\n        double aki=weightedResidualJacobian[j][permutation[i]];\n        norm2+=aki * aki;\n      }\n      if (Double.isInfinite(norm2) || Double.isNaN(norm2)) {\n        throw new ConvergenceException(LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN,rows,cols);\n      }\n      if (norm2 > ak2) {\n        nextColumn=i;\n        ak2=norm2;\n      }\n    }\n    if (ak2 <= qrRankingThreshold) {\n      rank=k;\n      return;\n    }\n    int pk=permutation[nextColumn];\n    permutation[nextColumn]=permutation[k];\n    permutation[k]=pk;\n    double akk=weightedResidualJacobian[k][pk];\n    double alpha=(akk > 0) ? -FastMath.sqrt(ak2) : FastMath.sqrt(ak2);\n    double betak=1.0 / (ak2 - akk * alpha);\n    beta[pk]=betak;\n    diagR[pk]=alpha;\n    weightedResidualJacobian[k][pk]-=alpha;\n    for (int dk=cols - 1 - k; dk > 0; --dk) {\n      double gamma=0;\n      for (int j=k; j < weightedResidualJacobian.length; ++j) {\n        gamma+=weightedResidualJacobian[j][pk] * weightedResidualJacobian[j][permutation[k + dk]];\n      }\n      gamma*=betak;\n      for (int j=k; j < weightedResidualJacobian.length; ++j) {\n        weightedResidualJacobian[j][permutation[k + dk]]-=gamma * weightedResidualJacobian[j][pk];\n      }\n    }\n  }\n  rank=solvedCols;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 357,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 29,
                    "startLineNumber": 863,
                    "startColumnNumber": 12,
                    "endLineNumber": 863,
                    "endColumnNumber": 41
                },
                "nodeContext": "permutation[k]=pk;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 6,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "pk",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 866,
                "startColumnNumber": 55,
                "endLineNumber": 866,
                "endColumnNumber": 57
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 31,
                        "startLineNumber": 866,
                        "startColumnNumber": 27,
                        "endLineNumber": 866,
                        "endColumnNumber": 58
                    },
                    "nodeContext": "weightedResidualJacobian[k][pk]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 39,
                        "startLineNumber": 866,
                        "startColumnNumber": 19,
                        "endLineNumber": 866,
                        "endColumnNumber": 58
                    },
                    "nodeContext": "akk=weightedResidualJacobian[k][pk]",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 47,
                        "startLineNumber": 866,
                        "startColumnNumber": 12,
                        "endLineNumber": 866,
                        "endColumnNumber": 59
                    },
                    "nodeContext": "double akk=weightedResidualJacobian[k][pk];\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 9,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 2140,
                        "startLineNumber": 837,
                        "startColumnNumber": 39,
                        "endLineNumber": 886,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  int nextColumn=-1;\n  double ak2=Double.NEGATIVE_INFINITY;\n  for (int i=k; i < cols; ++i) {\n    double norm2=0;\n    for (int j=k; j < weightedResidualJacobian.length; ++j) {\n      double aki=weightedResidualJacobian[j][permutation[i]];\n      norm2+=aki * aki;\n    }\n    if (Double.isInfinite(norm2) || Double.isNaN(norm2)) {\n      throw new ConvergenceException(LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN,rows,cols);\n    }\n    if (norm2 > ak2) {\n      nextColumn=i;\n      ak2=norm2;\n    }\n  }\n  if (ak2 <= qrRankingThreshold) {\n    rank=k;\n    return;\n  }\n  int pk=permutation[nextColumn];\n  permutation[nextColumn]=permutation[k];\n  permutation[k]=pk;\n  double akk=weightedResidualJacobian[k][pk];\n  double alpha=(akk > 0) ? -FastMath.sqrt(ak2) : FastMath.sqrt(ak2);\n  double betak=1.0 / (ak2 - akk * alpha);\n  beta[pk]=betak;\n  diagR[pk]=alpha;\n  weightedResidualJacobian[k][pk]-=alpha;\n  for (int dk=cols - 1 - k; dk > 0; --dk) {\n    double gamma=0;\n    for (int j=k; j < weightedResidualJacobian.length; ++j) {\n      gamma+=weightedResidualJacobian[j][pk] * weightedResidualJacobian[j][permutation[k + dk]];\n    }\n    gamma*=betak;\n    for (int j=k; j < weightedResidualJacobian.length; ++j) {\n      weightedResidualJacobian[j][permutation[k + dk]]-=gamma * weightedResidualJacobian[j][pk];\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 273,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2171,
                        "startLineNumber": 837,
                        "startColumnNumber": 8,
                        "endLineNumber": 886,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int k=0; k < cols; ++k) {\n  int nextColumn=-1;\n  double ak2=Double.NEGATIVE_INFINITY;\n  for (int i=k; i < cols; ++i) {\n    double norm2=0;\n    for (int j=k; j < weightedResidualJacobian.length; ++j) {\n      double aki=weightedResidualJacobian[j][permutation[i]];\n      norm2+=aki * aki;\n    }\n    if (Double.isInfinite(norm2) || Double.isNaN(norm2)) {\n      throw new ConvergenceException(LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN,rows,cols);\n    }\n    if (norm2 > ak2) {\n      nextColumn=i;\n      ak2=norm2;\n    }\n  }\n  if (ak2 <= qrRankingThreshold) {\n    rank=k;\n    return;\n  }\n  int pk=permutation[nextColumn];\n  permutation[nextColumn]=permutation[k];\n  permutation[k]=pk;\n  double akk=weightedResidualJacobian[k][pk];\n  double alpha=(akk > 0) ? -FastMath.sqrt(ak2) : FastMath.sqrt(ak2);\n  double betak=1.0 / (ak2 - akk * alpha);\n  beta[pk]=betak;\n  diagR[pk]=alpha;\n  weightedResidualJacobian[k][pk]-=alpha;\n  for (int dk=cols - 1 - k; dk > 0; --dk) {\n    double gamma=0;\n    for (int j=k; j < weightedResidualJacobian.length; ++j) {\n      gamma+=weightedResidualJacobian[j][pk] * weightedResidualJacobian[j][permutation[k + dk]];\n    }\n    gamma*=betak;\n    for (int j=k; j < weightedResidualJacobian.length; ++j) {\n      weightedResidualJacobian[j][permutation[k + dk]]-=gamma * weightedResidualJacobian[j][pk];\n    }\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 284,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2638,
                        "startLineNumber": 823,
                        "startColumnNumber": 63,
                        "endLineNumber": 888,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  for (int k=0; k < cols; ++k) {\n    permutation[k]=k;\n    double norm2=0;\n    for (int i=0; i < weightedResidualJacobian.length; ++i) {\n      double akk=weightedResidualJacobian[i][k];\n      norm2+=akk * akk;\n    }\n    jacNorm[k]=FastMath.sqrt(norm2);\n  }\n  for (int k=0; k < cols; ++k) {\n    int nextColumn=-1;\n    double ak2=Double.NEGATIVE_INFINITY;\n    for (int i=k; i < cols; ++i) {\n      double norm2=0;\n      for (int j=k; j < weightedResidualJacobian.length; ++j) {\n        double aki=weightedResidualJacobian[j][permutation[i]];\n        norm2+=aki * aki;\n      }\n      if (Double.isInfinite(norm2) || Double.isNaN(norm2)) {\n        throw new ConvergenceException(LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN,rows,cols);\n      }\n      if (norm2 > ak2) {\n        nextColumn=i;\n        ak2=norm2;\n      }\n    }\n    if (ak2 <= qrRankingThreshold) {\n      rank=k;\n      return;\n    }\n    int pk=permutation[nextColumn];\n    permutation[nextColumn]=permutation[k];\n    permutation[k]=pk;\n    double akk=weightedResidualJacobian[k][pk];\n    double alpha=(akk > 0) ? -FastMath.sqrt(ak2) : FastMath.sqrt(ak2);\n    double betak=1.0 / (ak2 - akk * alpha);\n    beta[pk]=betak;\n    diagR[pk]=alpha;\n    weightedResidualJacobian[k][pk]-=alpha;\n    for (int dk=cols - 1 - k; dk > 0; --dk) {\n      double gamma=0;\n      for (int j=k; j < weightedResidualJacobian.length; ++j) {\n        gamma+=weightedResidualJacobian[j][pk] * weightedResidualJacobian[j][permutation[k + dk]];\n      }\n      gamma*=betak;\n      for (int j=k; j < weightedResidualJacobian.length; ++j) {\n        weightedResidualJacobian[j][permutation[k + dk]]-=gamma * weightedResidualJacobian[j][pk];\n      }\n    }\n  }\n  rank=solvedCols;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 350,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3921,
                        "startLineNumber": 801,
                        "startColumnNumber": 4,
                        "endLineNumber": 888,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Decompose a matrix A as A.P = Q.R using Householder transforms. <p>As suggested in the P. Lascaux and R. Theodor book <i>Analyse num&eacute;rique matricielle appliqu&eacute;e &agrave; l'art de l'ing&eacute;nieur</i> (Masson, 1986), instead of representing the Householder transforms with u<sub>k</sub> unit vectors such that: <pre> H<sub>k</sub> = I - 2u<sub>k</sub>.u<sub>k</sub><sup>t</sup> </pre> we use <sub>k</sub> non-unit vectors such that: <pre> H<sub>k</sub> = I - beta<sub>k</sub>v<sub>k</sub>.v<sub>k</sub><sup>t</sup> </pre> where v<sub>k</sub> = a<sub>k</sub> - alpha<sub>k</sub> e<sub>k</sub>. The beta<sub>k</sub> coefficients are provided upon exit as recomputing them from the v<sub>k</sub> vectors would be costly.</p> <p>This decomposition handles rank deficient cases since the tranformations are performed in non-increasing columns norms order thanks to columns pivoting. The diagonal elements of the R matrix are therefore also in non-increasing absolute values order.</p>\n * @exception ConvergenceException if the decomposition cannot be performed\n */\nprivate void qrDecomposition() throws ConvergenceException {\n  for (int k=0; k < cols; ++k) {\n    permutation[k]=k;\n    double norm2=0;\n    for (int i=0; i < weightedResidualJacobian.length; ++i) {\n      double akk=weightedResidualJacobian[i][k];\n      norm2+=akk * akk;\n    }\n    jacNorm[k]=FastMath.sqrt(norm2);\n  }\n  for (int k=0; k < cols; ++k) {\n    int nextColumn=-1;\n    double ak2=Double.NEGATIVE_INFINITY;\n    for (int i=k; i < cols; ++i) {\n      double norm2=0;\n      for (int j=k; j < weightedResidualJacobian.length; ++j) {\n        double aki=weightedResidualJacobian[j][permutation[i]];\n        norm2+=aki * aki;\n      }\n      if (Double.isInfinite(norm2) || Double.isNaN(norm2)) {\n        throw new ConvergenceException(LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN,rows,cols);\n      }\n      if (norm2 > ak2) {\n        nextColumn=i;\n        ak2=norm2;\n      }\n    }\n    if (ak2 <= qrRankingThreshold) {\n      rank=k;\n      return;\n    }\n    int pk=permutation[nextColumn];\n    permutation[nextColumn]=permutation[k];\n    permutation[k]=pk;\n    double akk=weightedResidualJacobian[k][pk];\n    double alpha=(akk > 0) ? -FastMath.sqrt(ak2) : FastMath.sqrt(ak2);\n    double betak=1.0 / (ak2 - akk * alpha);\n    beta[pk]=betak;\n    diagR[pk]=alpha;\n    weightedResidualJacobian[k][pk]-=alpha;\n    for (int dk=cols - 1 - k; dk > 0; --dk) {\n      double gamma=0;\n      for (int j=k; j < weightedResidualJacobian.length; ++j) {\n        gamma+=weightedResidualJacobian[j][pk] * weightedResidualJacobian[j][permutation[k + dk]];\n      }\n      gamma*=betak;\n      for (int j=k; j < weightedResidualJacobian.length; ++j) {\n        weightedResidualJacobian[j][permutation[k + dk]]-=gamma * weightedResidualJacobian[j][pk];\n      }\n    }\n  }\n  rank=solvedCols;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 357,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 47,
                    "startLineNumber": 866,
                    "startColumnNumber": 12,
                    "endLineNumber": 866,
                    "endColumnNumber": 59
                },
                "nodeContext": "double akk=weightedResidualJacobian[k][pk];\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 9,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "pk",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 869,
                "startColumnNumber": 17,
                "endLineNumber": 869,
                "endColumnNumber": 19
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
                    "nodePosition": {
                        "charLength": 8,
                        "startLineNumber": 869,
                        "startColumnNumber": 12,
                        "endLineNumber": 869,
                        "endColumnNumber": 20
                    },
                    "nodeContext": "beta[pk]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 20,
                        "startLineNumber": 869,
                        "startColumnNumber": 12,
                        "endLineNumber": 869,
                        "endColumnNumber": 32
                    },
                    "nodeContext": "beta[pk]=betak",
                    "nodeType": "Assignment",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 21,
                        "startLineNumber": 869,
                        "startColumnNumber": 12,
                        "endLineNumber": 869,
                        "endColumnNumber": 33
                    },
                    "nodeContext": "beta[pk]=betak;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 6,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 2140,
                        "startLineNumber": 837,
                        "startColumnNumber": 39,
                        "endLineNumber": 886,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  int nextColumn=-1;\n  double ak2=Double.NEGATIVE_INFINITY;\n  for (int i=k; i < cols; ++i) {\n    double norm2=0;\n    for (int j=k; j < weightedResidualJacobian.length; ++j) {\n      double aki=weightedResidualJacobian[j][permutation[i]];\n      norm2+=aki * aki;\n    }\n    if (Double.isInfinite(norm2) || Double.isNaN(norm2)) {\n      throw new ConvergenceException(LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN,rows,cols);\n    }\n    if (norm2 > ak2) {\n      nextColumn=i;\n      ak2=norm2;\n    }\n  }\n  if (ak2 <= qrRankingThreshold) {\n    rank=k;\n    return;\n  }\n  int pk=permutation[nextColumn];\n  permutation[nextColumn]=permutation[k];\n  permutation[k]=pk;\n  double akk=weightedResidualJacobian[k][pk];\n  double alpha=(akk > 0) ? -FastMath.sqrt(ak2) : FastMath.sqrt(ak2);\n  double betak=1.0 / (ak2 - akk * alpha);\n  beta[pk]=betak;\n  diagR[pk]=alpha;\n  weightedResidualJacobian[k][pk]-=alpha;\n  for (int dk=cols - 1 - k; dk > 0; --dk) {\n    double gamma=0;\n    for (int j=k; j < weightedResidualJacobian.length; ++j) {\n      gamma+=weightedResidualJacobian[j][pk] * weightedResidualJacobian[j][permutation[k + dk]];\n    }\n    gamma*=betak;\n    for (int j=k; j < weightedResidualJacobian.length; ++j) {\n      weightedResidualJacobian[j][permutation[k + dk]]-=gamma * weightedResidualJacobian[j][pk];\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 273,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2171,
                        "startLineNumber": 837,
                        "startColumnNumber": 8,
                        "endLineNumber": 886,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int k=0; k < cols; ++k) {\n  int nextColumn=-1;\n  double ak2=Double.NEGATIVE_INFINITY;\n  for (int i=k; i < cols; ++i) {\n    double norm2=0;\n    for (int j=k; j < weightedResidualJacobian.length; ++j) {\n      double aki=weightedResidualJacobian[j][permutation[i]];\n      norm2+=aki * aki;\n    }\n    if (Double.isInfinite(norm2) || Double.isNaN(norm2)) {\n      throw new ConvergenceException(LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN,rows,cols);\n    }\n    if (norm2 > ak2) {\n      nextColumn=i;\n      ak2=norm2;\n    }\n  }\n  if (ak2 <= qrRankingThreshold) {\n    rank=k;\n    return;\n  }\n  int pk=permutation[nextColumn];\n  permutation[nextColumn]=permutation[k];\n  permutation[k]=pk;\n  double akk=weightedResidualJacobian[k][pk];\n  double alpha=(akk > 0) ? -FastMath.sqrt(ak2) : FastMath.sqrt(ak2);\n  double betak=1.0 / (ak2 - akk * alpha);\n  beta[pk]=betak;\n  diagR[pk]=alpha;\n  weightedResidualJacobian[k][pk]-=alpha;\n  for (int dk=cols - 1 - k; dk > 0; --dk) {\n    double gamma=0;\n    for (int j=k; j < weightedResidualJacobian.length; ++j) {\n      gamma+=weightedResidualJacobian[j][pk] * weightedResidualJacobian[j][permutation[k + dk]];\n    }\n    gamma*=betak;\n    for (int j=k; j < weightedResidualJacobian.length; ++j) {\n      weightedResidualJacobian[j][permutation[k + dk]]-=gamma * weightedResidualJacobian[j][pk];\n    }\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 284,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2638,
                        "startLineNumber": 823,
                        "startColumnNumber": 63,
                        "endLineNumber": 888,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  for (int k=0; k < cols; ++k) {\n    permutation[k]=k;\n    double norm2=0;\n    for (int i=0; i < weightedResidualJacobian.length; ++i) {\n      double akk=weightedResidualJacobian[i][k];\n      norm2+=akk * akk;\n    }\n    jacNorm[k]=FastMath.sqrt(norm2);\n  }\n  for (int k=0; k < cols; ++k) {\n    int nextColumn=-1;\n    double ak2=Double.NEGATIVE_INFINITY;\n    for (int i=k; i < cols; ++i) {\n      double norm2=0;\n      for (int j=k; j < weightedResidualJacobian.length; ++j) {\n        double aki=weightedResidualJacobian[j][permutation[i]];\n        norm2+=aki * aki;\n      }\n      if (Double.isInfinite(norm2) || Double.isNaN(norm2)) {\n        throw new ConvergenceException(LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN,rows,cols);\n      }\n      if (norm2 > ak2) {\n        nextColumn=i;\n        ak2=norm2;\n      }\n    }\n    if (ak2 <= qrRankingThreshold) {\n      rank=k;\n      return;\n    }\n    int pk=permutation[nextColumn];\n    permutation[nextColumn]=permutation[k];\n    permutation[k]=pk;\n    double akk=weightedResidualJacobian[k][pk];\n    double alpha=(akk > 0) ? -FastMath.sqrt(ak2) : FastMath.sqrt(ak2);\n    double betak=1.0 / (ak2 - akk * alpha);\n    beta[pk]=betak;\n    diagR[pk]=alpha;\n    weightedResidualJacobian[k][pk]-=alpha;\n    for (int dk=cols - 1 - k; dk > 0; --dk) {\n      double gamma=0;\n      for (int j=k; j < weightedResidualJacobian.length; ++j) {\n        gamma+=weightedResidualJacobian[j][pk] * weightedResidualJacobian[j][permutation[k + dk]];\n      }\n      gamma*=betak;\n      for (int j=k; j < weightedResidualJacobian.length; ++j) {\n        weightedResidualJacobian[j][permutation[k + dk]]-=gamma * weightedResidualJacobian[j][pk];\n      }\n    }\n  }\n  rank=solvedCols;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 350,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3921,
                        "startLineNumber": 801,
                        "startColumnNumber": 4,
                        "endLineNumber": 888,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Decompose a matrix A as A.P = Q.R using Householder transforms. <p>As suggested in the P. Lascaux and R. Theodor book <i>Analyse num&eacute;rique matricielle appliqu&eacute;e &agrave; l'art de l'ing&eacute;nieur</i> (Masson, 1986), instead of representing the Householder transforms with u<sub>k</sub> unit vectors such that: <pre> H<sub>k</sub> = I - 2u<sub>k</sub>.u<sub>k</sub><sup>t</sup> </pre> we use <sub>k</sub> non-unit vectors such that: <pre> H<sub>k</sub> = I - beta<sub>k</sub>v<sub>k</sub>.v<sub>k</sub><sup>t</sup> </pre> where v<sub>k</sub> = a<sub>k</sub> - alpha<sub>k</sub> e<sub>k</sub>. The beta<sub>k</sub> coefficients are provided upon exit as recomputing them from the v<sub>k</sub> vectors would be costly.</p> <p>This decomposition handles rank deficient cases since the tranformations are performed in non-increasing columns norms order thanks to columns pivoting. The diagonal elements of the R matrix are therefore also in non-increasing absolute values order.</p>\n * @exception ConvergenceException if the decomposition cannot be performed\n */\nprivate void qrDecomposition() throws ConvergenceException {\n  for (int k=0; k < cols; ++k) {\n    permutation[k]=k;\n    double norm2=0;\n    for (int i=0; i < weightedResidualJacobian.length; ++i) {\n      double akk=weightedResidualJacobian[i][k];\n      norm2+=akk * akk;\n    }\n    jacNorm[k]=FastMath.sqrt(norm2);\n  }\n  for (int k=0; k < cols; ++k) {\n    int nextColumn=-1;\n    double ak2=Double.NEGATIVE_INFINITY;\n    for (int i=k; i < cols; ++i) {\n      double norm2=0;\n      for (int j=k; j < weightedResidualJacobian.length; ++j) {\n        double aki=weightedResidualJacobian[j][permutation[i]];\n        norm2+=aki * aki;\n      }\n      if (Double.isInfinite(norm2) || Double.isNaN(norm2)) {\n        throw new ConvergenceException(LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN,rows,cols);\n      }\n      if (norm2 > ak2) {\n        nextColumn=i;\n        ak2=norm2;\n      }\n    }\n    if (ak2 <= qrRankingThreshold) {\n      rank=k;\n      return;\n    }\n    int pk=permutation[nextColumn];\n    permutation[nextColumn]=permutation[k];\n    permutation[k]=pk;\n    double akk=weightedResidualJacobian[k][pk];\n    double alpha=(akk > 0) ? -FastMath.sqrt(ak2) : FastMath.sqrt(ak2);\n    double betak=1.0 / (ak2 - akk * alpha);\n    beta[pk]=betak;\n    diagR[pk]=alpha;\n    weightedResidualJacobian[k][pk]-=alpha;\n    for (int dk=cols - 1 - k; dk > 0; --dk) {\n      double gamma=0;\n      for (int j=k; j < weightedResidualJacobian.length; ++j) {\n        gamma+=weightedResidualJacobian[j][pk] * weightedResidualJacobian[j][permutation[k + dk]];\n      }\n      gamma*=betak;\n      for (int j=k; j < weightedResidualJacobian.length; ++j) {\n        weightedResidualJacobian[j][permutation[k + dk]]-=gamma * weightedResidualJacobian[j][pk];\n      }\n    }\n  }\n  rank=solvedCols;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 357,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 21,
                    "startLineNumber": 869,
                    "startColumnNumber": 12,
                    "endLineNumber": 869,
                    "endColumnNumber": 33
                },
                "nodeContext": "beta[pk]=betak;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 6,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "pk",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 872,
                "startColumnNumber": 18,
                "endLineNumber": 872,
                "endColumnNumber": 20
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
                    "nodePosition": {
                        "charLength": 9,
                        "startLineNumber": 872,
                        "startColumnNumber": 12,
                        "endLineNumber": 872,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "diagR[pk]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 24,
                        "startLineNumber": 872,
                        "startColumnNumber": 12,
                        "endLineNumber": 872,
                        "endColumnNumber": 36
                    },
                    "nodeContext": "diagR[pk]=alpha",
                    "nodeType": "Assignment",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 25,
                        "startLineNumber": 872,
                        "startColumnNumber": 12,
                        "endLineNumber": 872,
                        "endColumnNumber": 37
                    },
                    "nodeContext": "diagR[pk]=alpha;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 6,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 2140,
                        "startLineNumber": 837,
                        "startColumnNumber": 39,
                        "endLineNumber": 886,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  int nextColumn=-1;\n  double ak2=Double.NEGATIVE_INFINITY;\n  for (int i=k; i < cols; ++i) {\n    double norm2=0;\n    for (int j=k; j < weightedResidualJacobian.length; ++j) {\n      double aki=weightedResidualJacobian[j][permutation[i]];\n      norm2+=aki * aki;\n    }\n    if (Double.isInfinite(norm2) || Double.isNaN(norm2)) {\n      throw new ConvergenceException(LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN,rows,cols);\n    }\n    if (norm2 > ak2) {\n      nextColumn=i;\n      ak2=norm2;\n    }\n  }\n  if (ak2 <= qrRankingThreshold) {\n    rank=k;\n    return;\n  }\n  int pk=permutation[nextColumn];\n  permutation[nextColumn]=permutation[k];\n  permutation[k]=pk;\n  double akk=weightedResidualJacobian[k][pk];\n  double alpha=(akk > 0) ? -FastMath.sqrt(ak2) : FastMath.sqrt(ak2);\n  double betak=1.0 / (ak2 - akk * alpha);\n  beta[pk]=betak;\n  diagR[pk]=alpha;\n  weightedResidualJacobian[k][pk]-=alpha;\n  for (int dk=cols - 1 - k; dk > 0; --dk) {\n    double gamma=0;\n    for (int j=k; j < weightedResidualJacobian.length; ++j) {\n      gamma+=weightedResidualJacobian[j][pk] * weightedResidualJacobian[j][permutation[k + dk]];\n    }\n    gamma*=betak;\n    for (int j=k; j < weightedResidualJacobian.length; ++j) {\n      weightedResidualJacobian[j][permutation[k + dk]]-=gamma * weightedResidualJacobian[j][pk];\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 273,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2171,
                        "startLineNumber": 837,
                        "startColumnNumber": 8,
                        "endLineNumber": 886,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int k=0; k < cols; ++k) {\n  int nextColumn=-1;\n  double ak2=Double.NEGATIVE_INFINITY;\n  for (int i=k; i < cols; ++i) {\n    double norm2=0;\n    for (int j=k; j < weightedResidualJacobian.length; ++j) {\n      double aki=weightedResidualJacobian[j][permutation[i]];\n      norm2+=aki * aki;\n    }\n    if (Double.isInfinite(norm2) || Double.isNaN(norm2)) {\n      throw new ConvergenceException(LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN,rows,cols);\n    }\n    if (norm2 > ak2) {\n      nextColumn=i;\n      ak2=norm2;\n    }\n  }\n  if (ak2 <= qrRankingThreshold) {\n    rank=k;\n    return;\n  }\n  int pk=permutation[nextColumn];\n  permutation[nextColumn]=permutation[k];\n  permutation[k]=pk;\n  double akk=weightedResidualJacobian[k][pk];\n  double alpha=(akk > 0) ? -FastMath.sqrt(ak2) : FastMath.sqrt(ak2);\n  double betak=1.0 / (ak2 - akk * alpha);\n  beta[pk]=betak;\n  diagR[pk]=alpha;\n  weightedResidualJacobian[k][pk]-=alpha;\n  for (int dk=cols - 1 - k; dk > 0; --dk) {\n    double gamma=0;\n    for (int j=k; j < weightedResidualJacobian.length; ++j) {\n      gamma+=weightedResidualJacobian[j][pk] * weightedResidualJacobian[j][permutation[k + dk]];\n    }\n    gamma*=betak;\n    for (int j=k; j < weightedResidualJacobian.length; ++j) {\n      weightedResidualJacobian[j][permutation[k + dk]]-=gamma * weightedResidualJacobian[j][pk];\n    }\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 284,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2638,
                        "startLineNumber": 823,
                        "startColumnNumber": 63,
                        "endLineNumber": 888,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  for (int k=0; k < cols; ++k) {\n    permutation[k]=k;\n    double norm2=0;\n    for (int i=0; i < weightedResidualJacobian.length; ++i) {\n      double akk=weightedResidualJacobian[i][k];\n      norm2+=akk * akk;\n    }\n    jacNorm[k]=FastMath.sqrt(norm2);\n  }\n  for (int k=0; k < cols; ++k) {\n    int nextColumn=-1;\n    double ak2=Double.NEGATIVE_INFINITY;\n    for (int i=k; i < cols; ++i) {\n      double norm2=0;\n      for (int j=k; j < weightedResidualJacobian.length; ++j) {\n        double aki=weightedResidualJacobian[j][permutation[i]];\n        norm2+=aki * aki;\n      }\n      if (Double.isInfinite(norm2) || Double.isNaN(norm2)) {\n        throw new ConvergenceException(LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN,rows,cols);\n      }\n      if (norm2 > ak2) {\n        nextColumn=i;\n        ak2=norm2;\n      }\n    }\n    if (ak2 <= qrRankingThreshold) {\n      rank=k;\n      return;\n    }\n    int pk=permutation[nextColumn];\n    permutation[nextColumn]=permutation[k];\n    permutation[k]=pk;\n    double akk=weightedResidualJacobian[k][pk];\n    double alpha=(akk > 0) ? -FastMath.sqrt(ak2) : FastMath.sqrt(ak2);\n    double betak=1.0 / (ak2 - akk * alpha);\n    beta[pk]=betak;\n    diagR[pk]=alpha;\n    weightedResidualJacobian[k][pk]-=alpha;\n    for (int dk=cols - 1 - k; dk > 0; --dk) {\n      double gamma=0;\n      for (int j=k; j < weightedResidualJacobian.length; ++j) {\n        gamma+=weightedResidualJacobian[j][pk] * weightedResidualJacobian[j][permutation[k + dk]];\n      }\n      gamma*=betak;\n      for (int j=k; j < weightedResidualJacobian.length; ++j) {\n        weightedResidualJacobian[j][permutation[k + dk]]-=gamma * weightedResidualJacobian[j][pk];\n      }\n    }\n  }\n  rank=solvedCols;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 350,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3921,
                        "startLineNumber": 801,
                        "startColumnNumber": 4,
                        "endLineNumber": 888,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Decompose a matrix A as A.P = Q.R using Householder transforms. <p>As suggested in the P. Lascaux and R. Theodor book <i>Analyse num&eacute;rique matricielle appliqu&eacute;e &agrave; l'art de l'ing&eacute;nieur</i> (Masson, 1986), instead of representing the Householder transforms with u<sub>k</sub> unit vectors such that: <pre> H<sub>k</sub> = I - 2u<sub>k</sub>.u<sub>k</sub><sup>t</sup> </pre> we use <sub>k</sub> non-unit vectors such that: <pre> H<sub>k</sub> = I - beta<sub>k</sub>v<sub>k</sub>.v<sub>k</sub><sup>t</sup> </pre> where v<sub>k</sub> = a<sub>k</sub> - alpha<sub>k</sub> e<sub>k</sub>. The beta<sub>k</sub> coefficients are provided upon exit as recomputing them from the v<sub>k</sub> vectors would be costly.</p> <p>This decomposition handles rank deficient cases since the tranformations are performed in non-increasing columns norms order thanks to columns pivoting. The diagonal elements of the R matrix are therefore also in non-increasing absolute values order.</p>\n * @exception ConvergenceException if the decomposition cannot be performed\n */\nprivate void qrDecomposition() throws ConvergenceException {\n  for (int k=0; k < cols; ++k) {\n    permutation[k]=k;\n    double norm2=0;\n    for (int i=0; i < weightedResidualJacobian.length; ++i) {\n      double akk=weightedResidualJacobian[i][k];\n      norm2+=akk * akk;\n    }\n    jacNorm[k]=FastMath.sqrt(norm2);\n  }\n  for (int k=0; k < cols; ++k) {\n    int nextColumn=-1;\n    double ak2=Double.NEGATIVE_INFINITY;\n    for (int i=k; i < cols; ++i) {\n      double norm2=0;\n      for (int j=k; j < weightedResidualJacobian.length; ++j) {\n        double aki=weightedResidualJacobian[j][permutation[i]];\n        norm2+=aki * aki;\n      }\n      if (Double.isInfinite(norm2) || Double.isNaN(norm2)) {\n        throw new ConvergenceException(LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN,rows,cols);\n      }\n      if (norm2 > ak2) {\n        nextColumn=i;\n        ak2=norm2;\n      }\n    }\n    if (ak2 <= qrRankingThreshold) {\n      rank=k;\n      return;\n    }\n    int pk=permutation[nextColumn];\n    permutation[nextColumn]=permutation[k];\n    permutation[k]=pk;\n    double akk=weightedResidualJacobian[k][pk];\n    double alpha=(akk > 0) ? -FastMath.sqrt(ak2) : FastMath.sqrt(ak2);\n    double betak=1.0 / (ak2 - akk * alpha);\n    beta[pk]=betak;\n    diagR[pk]=alpha;\n    weightedResidualJacobian[k][pk]-=alpha;\n    for (int dk=cols - 1 - k; dk > 0; --dk) {\n      double gamma=0;\n      for (int j=k; j < weightedResidualJacobian.length; ++j) {\n        gamma+=weightedResidualJacobian[j][pk] * weightedResidualJacobian[j][permutation[k + dk]];\n      }\n      gamma*=betak;\n      for (int j=k; j < weightedResidualJacobian.length; ++j) {\n        weightedResidualJacobian[j][permutation[k + dk]]-=gamma * weightedResidualJacobian[j][pk];\n      }\n    }\n  }\n  rank=solvedCols;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 357,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 25,
                    "startLineNumber": 872,
                    "startColumnNumber": 12,
                    "endLineNumber": 872,
                    "endColumnNumber": 37
                },
                "nodeContext": "diagR[pk]=alpha;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 6,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "pk",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 873,
                "startColumnNumber": 40,
                "endLineNumber": 873,
                "endColumnNumber": 42
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
                    "nodePosition": {
                        "charLength": 31,
                        "startLineNumber": 873,
                        "startColumnNumber": 12,
                        "endLineNumber": 873,
                        "endColumnNumber": 43
                    },
                    "nodeContext": "weightedResidualJacobian[k][pk]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 40,
                        "startLineNumber": 873,
                        "startColumnNumber": 12,
                        "endLineNumber": 873,
                        "endColumnNumber": 52
                    },
                    "nodeContext": "weightedResidualJacobian[k][pk]-=alpha",
                    "nodeType": "Assignment",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 41,
                        "startLineNumber": 873,
                        "startColumnNumber": 12,
                        "endLineNumber": 873,
                        "endColumnNumber": 53
                    },
                    "nodeContext": "weightedResidualJacobian[k][pk]-=alpha;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 2140,
                        "startLineNumber": 837,
                        "startColumnNumber": 39,
                        "endLineNumber": 886,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  int nextColumn=-1;\n  double ak2=Double.NEGATIVE_INFINITY;\n  for (int i=k; i < cols; ++i) {\n    double norm2=0;\n    for (int j=k; j < weightedResidualJacobian.length; ++j) {\n      double aki=weightedResidualJacobian[j][permutation[i]];\n      norm2+=aki * aki;\n    }\n    if (Double.isInfinite(norm2) || Double.isNaN(norm2)) {\n      throw new ConvergenceException(LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN,rows,cols);\n    }\n    if (norm2 > ak2) {\n      nextColumn=i;\n      ak2=norm2;\n    }\n  }\n  if (ak2 <= qrRankingThreshold) {\n    rank=k;\n    return;\n  }\n  int pk=permutation[nextColumn];\n  permutation[nextColumn]=permutation[k];\n  permutation[k]=pk;\n  double akk=weightedResidualJacobian[k][pk];\n  double alpha=(akk > 0) ? -FastMath.sqrt(ak2) : FastMath.sqrt(ak2);\n  double betak=1.0 / (ak2 - akk * alpha);\n  beta[pk]=betak;\n  diagR[pk]=alpha;\n  weightedResidualJacobian[k][pk]-=alpha;\n  for (int dk=cols - 1 - k; dk > 0; --dk) {\n    double gamma=0;\n    for (int j=k; j < weightedResidualJacobian.length; ++j) {\n      gamma+=weightedResidualJacobian[j][pk] * weightedResidualJacobian[j][permutation[k + dk]];\n    }\n    gamma*=betak;\n    for (int j=k; j < weightedResidualJacobian.length; ++j) {\n      weightedResidualJacobian[j][permutation[k + dk]]-=gamma * weightedResidualJacobian[j][pk];\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 273,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2171,
                        "startLineNumber": 837,
                        "startColumnNumber": 8,
                        "endLineNumber": 886,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int k=0; k < cols; ++k) {\n  int nextColumn=-1;\n  double ak2=Double.NEGATIVE_INFINITY;\n  for (int i=k; i < cols; ++i) {\n    double norm2=0;\n    for (int j=k; j < weightedResidualJacobian.length; ++j) {\n      double aki=weightedResidualJacobian[j][permutation[i]];\n      norm2+=aki * aki;\n    }\n    if (Double.isInfinite(norm2) || Double.isNaN(norm2)) {\n      throw new ConvergenceException(LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN,rows,cols);\n    }\n    if (norm2 > ak2) {\n      nextColumn=i;\n      ak2=norm2;\n    }\n  }\n  if (ak2 <= qrRankingThreshold) {\n    rank=k;\n    return;\n  }\n  int pk=permutation[nextColumn];\n  permutation[nextColumn]=permutation[k];\n  permutation[k]=pk;\n  double akk=weightedResidualJacobian[k][pk];\n  double alpha=(akk > 0) ? -FastMath.sqrt(ak2) : FastMath.sqrt(ak2);\n  double betak=1.0 / (ak2 - akk * alpha);\n  beta[pk]=betak;\n  diagR[pk]=alpha;\n  weightedResidualJacobian[k][pk]-=alpha;\n  for (int dk=cols - 1 - k; dk > 0; --dk) {\n    double gamma=0;\n    for (int j=k; j < weightedResidualJacobian.length; ++j) {\n      gamma+=weightedResidualJacobian[j][pk] * weightedResidualJacobian[j][permutation[k + dk]];\n    }\n    gamma*=betak;\n    for (int j=k; j < weightedResidualJacobian.length; ++j) {\n      weightedResidualJacobian[j][permutation[k + dk]]-=gamma * weightedResidualJacobian[j][pk];\n    }\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 284,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2638,
                        "startLineNumber": 823,
                        "startColumnNumber": 63,
                        "endLineNumber": 888,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  for (int k=0; k < cols; ++k) {\n    permutation[k]=k;\n    double norm2=0;\n    for (int i=0; i < weightedResidualJacobian.length; ++i) {\n      double akk=weightedResidualJacobian[i][k];\n      norm2+=akk * akk;\n    }\n    jacNorm[k]=FastMath.sqrt(norm2);\n  }\n  for (int k=0; k < cols; ++k) {\n    int nextColumn=-1;\n    double ak2=Double.NEGATIVE_INFINITY;\n    for (int i=k; i < cols; ++i) {\n      double norm2=0;\n      for (int j=k; j < weightedResidualJacobian.length; ++j) {\n        double aki=weightedResidualJacobian[j][permutation[i]];\n        norm2+=aki * aki;\n      }\n      if (Double.isInfinite(norm2) || Double.isNaN(norm2)) {\n        throw new ConvergenceException(LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN,rows,cols);\n      }\n      if (norm2 > ak2) {\n        nextColumn=i;\n        ak2=norm2;\n      }\n    }\n    if (ak2 <= qrRankingThreshold) {\n      rank=k;\n      return;\n    }\n    int pk=permutation[nextColumn];\n    permutation[nextColumn]=permutation[k];\n    permutation[k]=pk;\n    double akk=weightedResidualJacobian[k][pk];\n    double alpha=(akk > 0) ? -FastMath.sqrt(ak2) : FastMath.sqrt(ak2);\n    double betak=1.0 / (ak2 - akk * alpha);\n    beta[pk]=betak;\n    diagR[pk]=alpha;\n    weightedResidualJacobian[k][pk]-=alpha;\n    for (int dk=cols - 1 - k; dk > 0; --dk) {\n      double gamma=0;\n      for (int j=k; j < weightedResidualJacobian.length; ++j) {\n        gamma+=weightedResidualJacobian[j][pk] * weightedResidualJacobian[j][permutation[k + dk]];\n      }\n      gamma*=betak;\n      for (int j=k; j < weightedResidualJacobian.length; ++j) {\n        weightedResidualJacobian[j][permutation[k + dk]]-=gamma * weightedResidualJacobian[j][pk];\n      }\n    }\n  }\n  rank=solvedCols;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 350,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3921,
                        "startLineNumber": 801,
                        "startColumnNumber": 4,
                        "endLineNumber": 888,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Decompose a matrix A as A.P = Q.R using Householder transforms. <p>As suggested in the P. Lascaux and R. Theodor book <i>Analyse num&eacute;rique matricielle appliqu&eacute;e &agrave; l'art de l'ing&eacute;nieur</i> (Masson, 1986), instead of representing the Householder transforms with u<sub>k</sub> unit vectors such that: <pre> H<sub>k</sub> = I - 2u<sub>k</sub>.u<sub>k</sub><sup>t</sup> </pre> we use <sub>k</sub> non-unit vectors such that: <pre> H<sub>k</sub> = I - beta<sub>k</sub>v<sub>k</sub>.v<sub>k</sub><sup>t</sup> </pre> where v<sub>k</sub> = a<sub>k</sub> - alpha<sub>k</sub> e<sub>k</sub>. The beta<sub>k</sub> coefficients are provided upon exit as recomputing them from the v<sub>k</sub> vectors would be costly.</p> <p>This decomposition handles rank deficient cases since the tranformations are performed in non-increasing columns norms order thanks to columns pivoting. The diagonal elements of the R matrix are therefore also in non-increasing absolute values order.</p>\n * @exception ConvergenceException if the decomposition cannot be performed\n */\nprivate void qrDecomposition() throws ConvergenceException {\n  for (int k=0; k < cols; ++k) {\n    permutation[k]=k;\n    double norm2=0;\n    for (int i=0; i < weightedResidualJacobian.length; ++i) {\n      double akk=weightedResidualJacobian[i][k];\n      norm2+=akk * akk;\n    }\n    jacNorm[k]=FastMath.sqrt(norm2);\n  }\n  for (int k=0; k < cols; ++k) {\n    int nextColumn=-1;\n    double ak2=Double.NEGATIVE_INFINITY;\n    for (int i=k; i < cols; ++i) {\n      double norm2=0;\n      for (int j=k; j < weightedResidualJacobian.length; ++j) {\n        double aki=weightedResidualJacobian[j][permutation[i]];\n        norm2+=aki * aki;\n      }\n      if (Double.isInfinite(norm2) || Double.isNaN(norm2)) {\n        throw new ConvergenceException(LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN,rows,cols);\n      }\n      if (norm2 > ak2) {\n        nextColumn=i;\n        ak2=norm2;\n      }\n    }\n    if (ak2 <= qrRankingThreshold) {\n      rank=k;\n      return;\n    }\n    int pk=permutation[nextColumn];\n    permutation[nextColumn]=permutation[k];\n    permutation[k]=pk;\n    double akk=weightedResidualJacobian[k][pk];\n    double alpha=(akk > 0) ? -FastMath.sqrt(ak2) : FastMath.sqrt(ak2);\n    double betak=1.0 / (ak2 - akk * alpha);\n    beta[pk]=betak;\n    diagR[pk]=alpha;\n    weightedResidualJacobian[k][pk]-=alpha;\n    for (int dk=cols - 1 - k; dk > 0; --dk) {\n      double gamma=0;\n      for (int j=k; j < weightedResidualJacobian.length; ++j) {\n        gamma+=weightedResidualJacobian[j][pk] * weightedResidualJacobian[j][permutation[k + dk]];\n      }\n      gamma*=betak;\n      for (int j=k; j < weightedResidualJacobian.length; ++j) {\n        weightedResidualJacobian[j][permutation[k + dk]]-=gamma * weightedResidualJacobian[j][pk];\n      }\n    }\n  }\n  rank=solvedCols;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 357,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 41,
                    "startLineNumber": 873,
                    "startColumnNumber": 12,
                    "endLineNumber": 873,
                    "endColumnNumber": 53
                },
                "nodeContext": "weightedResidualJacobian[k][pk]-=alpha;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "pk",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 879,
                "startColumnNumber": 57,
                "endLineNumber": 879,
                "endColumnNumber": 59
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 31,
                        "startLineNumber": 879,
                        "startColumnNumber": 29,
                        "endLineNumber": 879,
                        "endColumnNumber": 60
                    },
                    "nodeContext": "weightedResidualJacobian[j][pk]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 82,
                        "startLineNumber": 879,
                        "startColumnNumber": 29,
                        "endLineNumber": 879,
                        "endColumnNumber": 111
                    },
                    "nodeContext": "weightedResidualJacobian[j][pk] * weightedResidualJacobian[j][permutation[k + dk]]",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 15,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 91,
                        "startLineNumber": 879,
                        "startColumnNumber": 20,
                        "endLineNumber": 879,
                        "endColumnNumber": 111
                    },
                    "nodeContext": "gamma+=weightedResidualJacobian[j][pk] * weightedResidualJacobian[j][permutation[k + dk]]",
                    "nodeType": "Assignment",
                    "astNodeNumber": 17,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 92,
                        "startLineNumber": 879,
                        "startColumnNumber": 20,
                        "endLineNumber": 879,
                        "endColumnNumber": 112
                    },
                    "nodeContext": "gamma+=weightedResidualJacobian[j][pk] * weightedResidualJacobian[j][permutation[k + dk]];\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 18,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 132,
                        "startLineNumber": 878,
                        "startColumnNumber": 74,
                        "endLineNumber": 880,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  gamma+=weightedResidualJacobian[j][pk] * weightedResidualJacobian[j][permutation[k + dk]];\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 19,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 190,
                        "startLineNumber": 878,
                        "startColumnNumber": 16,
                        "endLineNumber": 880,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "for (int j=k; j < weightedResidualJacobian.length; ++j) {\n  gamma+=weightedResidualJacobian[j][pk] * weightedResidualJacobian[j][permutation[k + dk]];\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 32,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 495,
                        "startLineNumber": 876,
                        "startColumnNumber": 54,
                        "endLineNumber": 885,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  double gamma=0;\n  for (int j=k; j < weightedResidualJacobian.length; ++j) {\n    gamma+=weightedResidualJacobian[j][pk] * weightedResidualJacobian[j][permutation[k + dk]];\n  }\n  gamma*=betak;\n  for (int j=k; j < weightedResidualJacobian.length; ++j) {\n    weightedResidualJacobian[j][permutation[k + dk]]-=gamma * weightedResidualJacobian[j][pk];\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 74,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 537,
                        "startLineNumber": 876,
                        "startColumnNumber": 12,
                        "endLineNumber": 885,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (int dk=cols - 1 - k; dk > 0; --dk) {\n  double gamma=0;\n  for (int j=k; j < weightedResidualJacobian.length; ++j) {\n    gamma+=weightedResidualJacobian[j][pk] * weightedResidualJacobian[j][permutation[k + dk]];\n  }\n  gamma*=betak;\n  for (int j=k; j < weightedResidualJacobian.length; ++j) {\n    weightedResidualJacobian[j][permutation[k + dk]]-=gamma * weightedResidualJacobian[j][pk];\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 88,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 2140,
                        "startLineNumber": 837,
                        "startColumnNumber": 39,
                        "endLineNumber": 886,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  int nextColumn=-1;\n  double ak2=Double.NEGATIVE_INFINITY;\n  for (int i=k; i < cols; ++i) {\n    double norm2=0;\n    for (int j=k; j < weightedResidualJacobian.length; ++j) {\n      double aki=weightedResidualJacobian[j][permutation[i]];\n      norm2+=aki * aki;\n    }\n    if (Double.isInfinite(norm2) || Double.isNaN(norm2)) {\n      throw new ConvergenceException(LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN,rows,cols);\n    }\n    if (norm2 > ak2) {\n      nextColumn=i;\n      ak2=norm2;\n    }\n  }\n  if (ak2 <= qrRankingThreshold) {\n    rank=k;\n    return;\n  }\n  int pk=permutation[nextColumn];\n  permutation[nextColumn]=permutation[k];\n  permutation[k]=pk;\n  double akk=weightedResidualJacobian[k][pk];\n  double alpha=(akk > 0) ? -FastMath.sqrt(ak2) : FastMath.sqrt(ak2);\n  double betak=1.0 / (ak2 - akk * alpha);\n  beta[pk]=betak;\n  diagR[pk]=alpha;\n  weightedResidualJacobian[k][pk]-=alpha;\n  for (int dk=cols - 1 - k; dk > 0; --dk) {\n    double gamma=0;\n    for (int j=k; j < weightedResidualJacobian.length; ++j) {\n      gamma+=weightedResidualJacobian[j][pk] * weightedResidualJacobian[j][permutation[k + dk]];\n    }\n    gamma*=betak;\n    for (int j=k; j < weightedResidualJacobian.length; ++j) {\n      weightedResidualJacobian[j][permutation[k + dk]]-=gamma * weightedResidualJacobian[j][pk];\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 273,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2171,
                        "startLineNumber": 837,
                        "startColumnNumber": 8,
                        "endLineNumber": 886,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int k=0; k < cols; ++k) {\n  int nextColumn=-1;\n  double ak2=Double.NEGATIVE_INFINITY;\n  for (int i=k; i < cols; ++i) {\n    double norm2=0;\n    for (int j=k; j < weightedResidualJacobian.length; ++j) {\n      double aki=weightedResidualJacobian[j][permutation[i]];\n      norm2+=aki * aki;\n    }\n    if (Double.isInfinite(norm2) || Double.isNaN(norm2)) {\n      throw new ConvergenceException(LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN,rows,cols);\n    }\n    if (norm2 > ak2) {\n      nextColumn=i;\n      ak2=norm2;\n    }\n  }\n  if (ak2 <= qrRankingThreshold) {\n    rank=k;\n    return;\n  }\n  int pk=permutation[nextColumn];\n  permutation[nextColumn]=permutation[k];\n  permutation[k]=pk;\n  double akk=weightedResidualJacobian[k][pk];\n  double alpha=(akk > 0) ? -FastMath.sqrt(ak2) : FastMath.sqrt(ak2);\n  double betak=1.0 / (ak2 - akk * alpha);\n  beta[pk]=betak;\n  diagR[pk]=alpha;\n  weightedResidualJacobian[k][pk]-=alpha;\n  for (int dk=cols - 1 - k; dk > 0; --dk) {\n    double gamma=0;\n    for (int j=k; j < weightedResidualJacobian.length; ++j) {\n      gamma+=weightedResidualJacobian[j][pk] * weightedResidualJacobian[j][permutation[k + dk]];\n    }\n    gamma*=betak;\n    for (int j=k; j < weightedResidualJacobian.length; ++j) {\n      weightedResidualJacobian[j][permutation[k + dk]]-=gamma * weightedResidualJacobian[j][pk];\n    }\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 284,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2638,
                        "startLineNumber": 823,
                        "startColumnNumber": 63,
                        "endLineNumber": 888,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  for (int k=0; k < cols; ++k) {\n    permutation[k]=k;\n    double norm2=0;\n    for (int i=0; i < weightedResidualJacobian.length; ++i) {\n      double akk=weightedResidualJacobian[i][k];\n      norm2+=akk * akk;\n    }\n    jacNorm[k]=FastMath.sqrt(norm2);\n  }\n  for (int k=0; k < cols; ++k) {\n    int nextColumn=-1;\n    double ak2=Double.NEGATIVE_INFINITY;\n    for (int i=k; i < cols; ++i) {\n      double norm2=0;\n      for (int j=k; j < weightedResidualJacobian.length; ++j) {\n        double aki=weightedResidualJacobian[j][permutation[i]];\n        norm2+=aki * aki;\n      }\n      if (Double.isInfinite(norm2) || Double.isNaN(norm2)) {\n        throw new ConvergenceException(LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN,rows,cols);\n      }\n      if (norm2 > ak2) {\n        nextColumn=i;\n        ak2=norm2;\n      }\n    }\n    if (ak2 <= qrRankingThreshold) {\n      rank=k;\n      return;\n    }\n    int pk=permutation[nextColumn];\n    permutation[nextColumn]=permutation[k];\n    permutation[k]=pk;\n    double akk=weightedResidualJacobian[k][pk];\n    double alpha=(akk > 0) ? -FastMath.sqrt(ak2) : FastMath.sqrt(ak2);\n    double betak=1.0 / (ak2 - akk * alpha);\n    beta[pk]=betak;\n    diagR[pk]=alpha;\n    weightedResidualJacobian[k][pk]-=alpha;\n    for (int dk=cols - 1 - k; dk > 0; --dk) {\n      double gamma=0;\n      for (int j=k; j < weightedResidualJacobian.length; ++j) {\n        gamma+=weightedResidualJacobian[j][pk] * weightedResidualJacobian[j][permutation[k + dk]];\n      }\n      gamma*=betak;\n      for (int j=k; j < weightedResidualJacobian.length; ++j) {\n        weightedResidualJacobian[j][permutation[k + dk]]-=gamma * weightedResidualJacobian[j][pk];\n      }\n    }\n  }\n  rank=solvedCols;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 350,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3921,
                        "startLineNumber": 801,
                        "startColumnNumber": 4,
                        "endLineNumber": 888,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Decompose a matrix A as A.P = Q.R using Householder transforms. <p>As suggested in the P. Lascaux and R. Theodor book <i>Analyse num&eacute;rique matricielle appliqu&eacute;e &agrave; l'art de l'ing&eacute;nieur</i> (Masson, 1986), instead of representing the Householder transforms with u<sub>k</sub> unit vectors such that: <pre> H<sub>k</sub> = I - 2u<sub>k</sub>.u<sub>k</sub><sup>t</sup> </pre> we use <sub>k</sub> non-unit vectors such that: <pre> H<sub>k</sub> = I - beta<sub>k</sub>v<sub>k</sub>.v<sub>k</sub><sup>t</sup> </pre> where v<sub>k</sub> = a<sub>k</sub> - alpha<sub>k</sub> e<sub>k</sub>. The beta<sub>k</sub> coefficients are provided upon exit as recomputing them from the v<sub>k</sub> vectors would be costly.</p> <p>This decomposition handles rank deficient cases since the tranformations are performed in non-increasing columns norms order thanks to columns pivoting. The diagonal elements of the R matrix are therefore also in non-increasing absolute values order.</p>\n * @exception ConvergenceException if the decomposition cannot be performed\n */\nprivate void qrDecomposition() throws ConvergenceException {\n  for (int k=0; k < cols; ++k) {\n    permutation[k]=k;\n    double norm2=0;\n    for (int i=0; i < weightedResidualJacobian.length; ++i) {\n      double akk=weightedResidualJacobian[i][k];\n      norm2+=akk * akk;\n    }\n    jacNorm[k]=FastMath.sqrt(norm2);\n  }\n  for (int k=0; k < cols; ++k) {\n    int nextColumn=-1;\n    double ak2=Double.NEGATIVE_INFINITY;\n    for (int i=k; i < cols; ++i) {\n      double norm2=0;\n      for (int j=k; j < weightedResidualJacobian.length; ++j) {\n        double aki=weightedResidualJacobian[j][permutation[i]];\n        norm2+=aki * aki;\n      }\n      if (Double.isInfinite(norm2) || Double.isNaN(norm2)) {\n        throw new ConvergenceException(LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN,rows,cols);\n      }\n      if (norm2 > ak2) {\n        nextColumn=i;\n        ak2=norm2;\n      }\n    }\n    if (ak2 <= qrRankingThreshold) {\n      rank=k;\n      return;\n    }\n    int pk=permutation[nextColumn];\n    permutation[nextColumn]=permutation[k];\n    permutation[k]=pk;\n    double akk=weightedResidualJacobian[k][pk];\n    double alpha=(akk > 0) ? -FastMath.sqrt(ak2) : FastMath.sqrt(ak2);\n    double betak=1.0 / (ak2 - akk * alpha);\n    beta[pk]=betak;\n    diagR[pk]=alpha;\n    weightedResidualJacobian[k][pk]-=alpha;\n    for (int dk=cols - 1 - k; dk > 0; --dk) {\n      double gamma=0;\n      for (int j=k; j < weightedResidualJacobian.length; ++j) {\n        gamma+=weightedResidualJacobian[j][pk] * weightedResidualJacobian[j][permutation[k + dk]];\n      }\n      gamma*=betak;\n      for (int j=k; j < weightedResidualJacobian.length; ++j) {\n        weightedResidualJacobian[j][permutation[k + dk]]-=gamma * weightedResidualJacobian[j][pk];\n      }\n    }\n  }\n  rank=solvedCols;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 357,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 92,
                    "startLineNumber": 879,
                    "startColumnNumber": 20,
                    "endLineNumber": 879,
                    "endColumnNumber": 112
                },
                "nodeContext": "gamma+=weightedResidualJacobian[j][pk] * weightedResidualJacobian[j][permutation[k + dk]];\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 18,
                "astHeight": 7
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "pk",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 2,
                "startLineNumber": 883,
                "startColumnNumber": 108,
                "endLineNumber": 883,
                "endColumnNumber": 110
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 31,
                        "startLineNumber": 883,
                        "startColumnNumber": 80,
                        "endLineNumber": 883,
                        "endColumnNumber": 111
                    },
                    "nodeContext": "weightedResidualJacobian[j][pk]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 39,
                        "startLineNumber": 883,
                        "startColumnNumber": 72,
                        "endLineNumber": 883,
                        "endColumnNumber": 111
                    },
                    "nodeContext": "gamma * weightedResidualJacobian[j][pk]",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 91,
                        "startLineNumber": 883,
                        "startColumnNumber": 20,
                        "endLineNumber": 883,
                        "endColumnNumber": 111
                    },
                    "nodeContext": "weightedResidualJacobian[j][permutation[k + dk]]-=gamma * weightedResidualJacobian[j][pk]",
                    "nodeType": "Assignment",
                    "astNodeNumber": 17,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 92,
                        "startLineNumber": 883,
                        "startColumnNumber": 20,
                        "endLineNumber": 883,
                        "endColumnNumber": 112
                    },
                    "nodeContext": "weightedResidualJacobian[j][permutation[k + dk]]-=gamma * weightedResidualJacobian[j][pk];\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 18,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 132,
                        "startLineNumber": 882,
                        "startColumnNumber": 74,
                        "endLineNumber": 884,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  weightedResidualJacobian[j][permutation[k + dk]]-=gamma * weightedResidualJacobian[j][pk];\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 19,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 190,
                        "startLineNumber": 882,
                        "startColumnNumber": 16,
                        "endLineNumber": 884,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "for (int j=k; j < weightedResidualJacobian.length; ++j) {\n  weightedResidualJacobian[j][permutation[k + dk]]-=gamma * weightedResidualJacobian[j][pk];\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 32,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 495,
                        "startLineNumber": 876,
                        "startColumnNumber": 54,
                        "endLineNumber": 885,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  double gamma=0;\n  for (int j=k; j < weightedResidualJacobian.length; ++j) {\n    gamma+=weightedResidualJacobian[j][pk] * weightedResidualJacobian[j][permutation[k + dk]];\n  }\n  gamma*=betak;\n  for (int j=k; j < weightedResidualJacobian.length; ++j) {\n    weightedResidualJacobian[j][permutation[k + dk]]-=gamma * weightedResidualJacobian[j][pk];\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 74,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 537,
                        "startLineNumber": 876,
                        "startColumnNumber": 12,
                        "endLineNumber": 885,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (int dk=cols - 1 - k; dk > 0; --dk) {\n  double gamma=0;\n  for (int j=k; j < weightedResidualJacobian.length; ++j) {\n    gamma+=weightedResidualJacobian[j][pk] * weightedResidualJacobian[j][permutation[k + dk]];\n  }\n  gamma*=betak;\n  for (int j=k; j < weightedResidualJacobian.length; ++j) {\n    weightedResidualJacobian[j][permutation[k + dk]]-=gamma * weightedResidualJacobian[j][pk];\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 88,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 2140,
                        "startLineNumber": 837,
                        "startColumnNumber": 39,
                        "endLineNumber": 886,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  int nextColumn=-1;\n  double ak2=Double.NEGATIVE_INFINITY;\n  for (int i=k; i < cols; ++i) {\n    double norm2=0;\n    for (int j=k; j < weightedResidualJacobian.length; ++j) {\n      double aki=weightedResidualJacobian[j][permutation[i]];\n      norm2+=aki * aki;\n    }\n    if (Double.isInfinite(norm2) || Double.isNaN(norm2)) {\n      throw new ConvergenceException(LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN,rows,cols);\n    }\n    if (norm2 > ak2) {\n      nextColumn=i;\n      ak2=norm2;\n    }\n  }\n  if (ak2 <= qrRankingThreshold) {\n    rank=k;\n    return;\n  }\n  int pk=permutation[nextColumn];\n  permutation[nextColumn]=permutation[k];\n  permutation[k]=pk;\n  double akk=weightedResidualJacobian[k][pk];\n  double alpha=(akk > 0) ? -FastMath.sqrt(ak2) : FastMath.sqrt(ak2);\n  double betak=1.0 / (ak2 - akk * alpha);\n  beta[pk]=betak;\n  diagR[pk]=alpha;\n  weightedResidualJacobian[k][pk]-=alpha;\n  for (int dk=cols - 1 - k; dk > 0; --dk) {\n    double gamma=0;\n    for (int j=k; j < weightedResidualJacobian.length; ++j) {\n      gamma+=weightedResidualJacobian[j][pk] * weightedResidualJacobian[j][permutation[k + dk]];\n    }\n    gamma*=betak;\n    for (int j=k; j < weightedResidualJacobian.length; ++j) {\n      weightedResidualJacobian[j][permutation[k + dk]]-=gamma * weightedResidualJacobian[j][pk];\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 273,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2171,
                        "startLineNumber": 837,
                        "startColumnNumber": 8,
                        "endLineNumber": 886,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int k=0; k < cols; ++k) {\n  int nextColumn=-1;\n  double ak2=Double.NEGATIVE_INFINITY;\n  for (int i=k; i < cols; ++i) {\n    double norm2=0;\n    for (int j=k; j < weightedResidualJacobian.length; ++j) {\n      double aki=weightedResidualJacobian[j][permutation[i]];\n      norm2+=aki * aki;\n    }\n    if (Double.isInfinite(norm2) || Double.isNaN(norm2)) {\n      throw new ConvergenceException(LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN,rows,cols);\n    }\n    if (norm2 > ak2) {\n      nextColumn=i;\n      ak2=norm2;\n    }\n  }\n  if (ak2 <= qrRankingThreshold) {\n    rank=k;\n    return;\n  }\n  int pk=permutation[nextColumn];\n  permutation[nextColumn]=permutation[k];\n  permutation[k]=pk;\n  double akk=weightedResidualJacobian[k][pk];\n  double alpha=(akk > 0) ? -FastMath.sqrt(ak2) : FastMath.sqrt(ak2);\n  double betak=1.0 / (ak2 - akk * alpha);\n  beta[pk]=betak;\n  diagR[pk]=alpha;\n  weightedResidualJacobian[k][pk]-=alpha;\n  for (int dk=cols - 1 - k; dk > 0; --dk) {\n    double gamma=0;\n    for (int j=k; j < weightedResidualJacobian.length; ++j) {\n      gamma+=weightedResidualJacobian[j][pk] * weightedResidualJacobian[j][permutation[k + dk]];\n    }\n    gamma*=betak;\n    for (int j=k; j < weightedResidualJacobian.length; ++j) {\n      weightedResidualJacobian[j][permutation[k + dk]]-=gamma * weightedResidualJacobian[j][pk];\n    }\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 284,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2638,
                        "startLineNumber": 823,
                        "startColumnNumber": 63,
                        "endLineNumber": 888,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  for (int k=0; k < cols; ++k) {\n    permutation[k]=k;\n    double norm2=0;\n    for (int i=0; i < weightedResidualJacobian.length; ++i) {\n      double akk=weightedResidualJacobian[i][k];\n      norm2+=akk * akk;\n    }\n    jacNorm[k]=FastMath.sqrt(norm2);\n  }\n  for (int k=0; k < cols; ++k) {\n    int nextColumn=-1;\n    double ak2=Double.NEGATIVE_INFINITY;\n    for (int i=k; i < cols; ++i) {\n      double norm2=0;\n      for (int j=k; j < weightedResidualJacobian.length; ++j) {\n        double aki=weightedResidualJacobian[j][permutation[i]];\n        norm2+=aki * aki;\n      }\n      if (Double.isInfinite(norm2) || Double.isNaN(norm2)) {\n        throw new ConvergenceException(LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN,rows,cols);\n      }\n      if (norm2 > ak2) {\n        nextColumn=i;\n        ak2=norm2;\n      }\n    }\n    if (ak2 <= qrRankingThreshold) {\n      rank=k;\n      return;\n    }\n    int pk=permutation[nextColumn];\n    permutation[nextColumn]=permutation[k];\n    permutation[k]=pk;\n    double akk=weightedResidualJacobian[k][pk];\n    double alpha=(akk > 0) ? -FastMath.sqrt(ak2) : FastMath.sqrt(ak2);\n    double betak=1.0 / (ak2 - akk * alpha);\n    beta[pk]=betak;\n    diagR[pk]=alpha;\n    weightedResidualJacobian[k][pk]-=alpha;\n    for (int dk=cols - 1 - k; dk > 0; --dk) {\n      double gamma=0;\n      for (int j=k; j < weightedResidualJacobian.length; ++j) {\n        gamma+=weightedResidualJacobian[j][pk] * weightedResidualJacobian[j][permutation[k + dk]];\n      }\n      gamma*=betak;\n      for (int j=k; j < weightedResidualJacobian.length; ++j) {\n        weightedResidualJacobian[j][permutation[k + dk]]-=gamma * weightedResidualJacobian[j][pk];\n      }\n    }\n  }\n  rank=solvedCols;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 350,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3921,
                        "startLineNumber": 801,
                        "startColumnNumber": 4,
                        "endLineNumber": 888,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Decompose a matrix A as A.P = Q.R using Householder transforms. <p>As suggested in the P. Lascaux and R. Theodor book <i>Analyse num&eacute;rique matricielle appliqu&eacute;e &agrave; l'art de l'ing&eacute;nieur</i> (Masson, 1986), instead of representing the Householder transforms with u<sub>k</sub> unit vectors such that: <pre> H<sub>k</sub> = I - 2u<sub>k</sub>.u<sub>k</sub><sup>t</sup> </pre> we use <sub>k</sub> non-unit vectors such that: <pre> H<sub>k</sub> = I - beta<sub>k</sub>v<sub>k</sub>.v<sub>k</sub><sup>t</sup> </pre> where v<sub>k</sub> = a<sub>k</sub> - alpha<sub>k</sub> e<sub>k</sub>. The beta<sub>k</sub> coefficients are provided upon exit as recomputing them from the v<sub>k</sub> vectors would be costly.</p> <p>This decomposition handles rank deficient cases since the tranformations are performed in non-increasing columns norms order thanks to columns pivoting. The diagonal elements of the R matrix are therefore also in non-increasing absolute values order.</p>\n * @exception ConvergenceException if the decomposition cannot be performed\n */\nprivate void qrDecomposition() throws ConvergenceException {\n  for (int k=0; k < cols; ++k) {\n    permutation[k]=k;\n    double norm2=0;\n    for (int i=0; i < weightedResidualJacobian.length; ++i) {\n      double akk=weightedResidualJacobian[i][k];\n      norm2+=akk * akk;\n    }\n    jacNorm[k]=FastMath.sqrt(norm2);\n  }\n  for (int k=0; k < cols; ++k) {\n    int nextColumn=-1;\n    double ak2=Double.NEGATIVE_INFINITY;\n    for (int i=k; i < cols; ++i) {\n      double norm2=0;\n      for (int j=k; j < weightedResidualJacobian.length; ++j) {\n        double aki=weightedResidualJacobian[j][permutation[i]];\n        norm2+=aki * aki;\n      }\n      if (Double.isInfinite(norm2) || Double.isNaN(norm2)) {\n        throw new ConvergenceException(LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN,rows,cols);\n      }\n      if (norm2 > ak2) {\n        nextColumn=i;\n        ak2=norm2;\n      }\n    }\n    if (ak2 <= qrRankingThreshold) {\n      rank=k;\n      return;\n    }\n    int pk=permutation[nextColumn];\n    permutation[nextColumn]=permutation[k];\n    permutation[k]=pk;\n    double akk=weightedResidualJacobian[k][pk];\n    double alpha=(akk > 0) ? -FastMath.sqrt(ak2) : FastMath.sqrt(ak2);\n    double betak=1.0 / (ak2 - akk * alpha);\n    beta[pk]=betak;\n    diagR[pk]=alpha;\n    weightedResidualJacobian[k][pk]-=alpha;\n    for (int dk=cols - 1 - k; dk > 0; --dk) {\n      double gamma=0;\n      for (int j=k; j < weightedResidualJacobian.length; ++j) {\n        gamma+=weightedResidualJacobian[j][pk] * weightedResidualJacobian[j][permutation[k + dk]];\n      }\n      gamma*=betak;\n      for (int j=k; j < weightedResidualJacobian.length; ++j) {\n        weightedResidualJacobian[j][permutation[k + dk]]-=gamma * weightedResidualJacobian[j][pk];\n      }\n    }\n  }\n  rank=solvedCols;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 357,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 92,
                    "startLineNumber": 883,
                    "startColumnNumber": 20,
                    "endLineNumber": 883,
                    "endColumnNumber": 112
                },
                "nodeContext": "weightedResidualJacobian[j][permutation[k + dk]]-=gamma * weightedResidualJacobian[j][pk];\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 18,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "int"
        }
    ],
    "positionList": [
        {
            "charLength": 2,
            "startLineNumber": 863,
            "startColumnNumber": 38,
            "endLineNumber": 863,
            "endColumnNumber": 40
        },
        {
            "charLength": 2,
            "startLineNumber": 866,
            "startColumnNumber": 55,
            "endLineNumber": 866,
            "endColumnNumber": 57
        },
        {
            "charLength": 2,
            "startLineNumber": 869,
            "startColumnNumber": 17,
            "endLineNumber": 869,
            "endColumnNumber": 19
        },
        {
            "charLength": 2,
            "startLineNumber": 872,
            "startColumnNumber": 18,
            "endLineNumber": 872,
            "endColumnNumber": 20
        },
        {
            "charLength": 2,
            "startLineNumber": 873,
            "startColumnNumber": 40,
            "endLineNumber": 873,
            "endColumnNumber": 42
        },
        {
            "charLength": 2,
            "startLineNumber": 879,
            "startColumnNumber": 57,
            "endLineNumber": 879,
            "endColumnNumber": 59
        },
        {
            "charLength": 2,
            "startLineNumber": 883,
            "startColumnNumber": 108,
            "endLineNumber": 883,
            "endColumnNumber": 110
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 5,
            "secondKey": 1,
            "layout": 8
        },
        {
            "firstKey": 5,
            "secondKey": 2,
            "layout": 8
        },
        {
            "firstKey": 5,
            "secondKey": 3,
            "layout": 8
        },
        {
            "firstKey": 5,
            "secondKey": 4,
            "layout": 8
        },
        {
            "firstKey": 5,
            "secondKey": 6,
            "layout": 6
        },
        {
            "firstKey": 6,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 6,
            "secondKey": 1,
            "layout": 8
        },
        {
            "firstKey": 6,
            "secondKey": 2,
            "layout": 8
        },
        {
            "firstKey": 6,
            "secondKey": 3,
            "layout": 8
        },
        {
            "firstKey": 6,
            "secondKey": 4,
            "layout": 8
        },
        {
            "firstKey": 6,
            "secondKey": 5,
            "layout": 6
        }
    ]
}