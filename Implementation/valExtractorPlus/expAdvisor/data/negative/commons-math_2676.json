{
    "id": 2676,
    "expression": "m",
    "projectName": "commons-math",
    "commitID": "d60149c7f8a840f9a21556aabfbc0d33e1d58eb5",
    "filePath": "src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java",
    "occurrences": 7,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "m",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 316,
                "startColumnNumber": 40,
                "endLineNumber": 316,
                "endColumnNumber": 41
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 21,
                        "startLineNumber": 316,
                        "startColumnNumber": 20,
                        "endLineNumber": 316,
                        "endColumnNumber": 41
                    },
                    "nodeContext": "b.getDimension() != m",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 255,
                        "startLineNumber": 316,
                        "startColumnNumber": 16,
                        "endLineNumber": 320,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (b.getDimension() != m) {\n  throw MathRuntimeException.createIllegalArgumentException(\"vector length mismatch: got {0} but expected {1}\",b.getDimension(),m);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 16,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
                    "nodePosition": {
                        "charLength": 1233,
                        "startLineNumber": 313,
                        "startColumnNumber": 45,
                        "endLineNumber": 349,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  final int m=pivot.length;\n  if (b.getDimension() != m) {\n    throw MathRuntimeException.createIllegalArgumentException(\"vector length mismatch: got {0} but expected {1}\",b.getDimension(),m);\n  }\n  if (singular) {\n    throw new SingularMatrixException();\n  }\n  final double[] bp=new double[m];\n  for (int row=0; row < m; row++) {\n    bp[row]=b.getEntry(pivot[row]);\n  }\n  for (int col=0; col < m; col++) {\n    for (int i=col + 1; i < m; i++) {\n      bp[i]-=bp[col] * lu[i][col];\n    }\n  }\n  for (int col=m - 1; col >= 0; col--) {\n    bp[col]/=lu[col][col];\n    for (int i=0; i < col; i++) {\n      bp[i]-=bp[col] * lu[i][col];\n    }\n  }\n  return new RealVectorImpl(bp,false);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 163,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
                    "nodePosition": {
                        "charLength": 1264,
                        "startLineNumber": 313,
                        "startColumnNumber": 14,
                        "endLineNumber": 349,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "catch (ClassCastException cce) {\n  final int m=pivot.length;\n  if (b.getDimension() != m) {\n    throw MathRuntimeException.createIllegalArgumentException(\"vector length mismatch: got {0} but expected {1}\",b.getDimension(),m);\n  }\n  if (singular) {\n    throw new SingularMatrixException();\n  }\n  final double[] bp=new double[m];\n  for (int row=0; row < m; row++) {\n    bp[row]=b.getEntry(pivot[row]);\n  }\n  for (int col=0; col < m; col++) {\n    for (int i=col + 1; i < m; i++) {\n      bp[i]-=bp[col] * lu[i][col];\n    }\n  }\n  for (int col=m - 1; col >= 0; col--) {\n    bp[col]/=lu[col][col];\n    for (int i=0; i < col; i++) {\n      bp[i]-=bp[col] * lu[i][col];\n    }\n  }\n  return new RealVectorImpl(bp,false);\n}\n",
                    "nodeType": "CatchClause",
                    "astNodeNumber": 168,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1334,
                        "startLineNumber": 311,
                        "startColumnNumber": 12,
                        "endLineNumber": 349,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "try {\n  return solve((RealVectorImpl)b);\n}\n catch (ClassCastException cce) {\n  final int m=pivot.length;\n  if (b.getDimension() != m) {\n    throw MathRuntimeException.createIllegalArgumentException(\"vector length mismatch: got {0} but expected {1}\",b.getDimension(),m);\n  }\n  if (singular) {\n    throw new SingularMatrixException();\n  }\n  final double[] bp=new double[m];\n  for (int row=0; row < m; row++) {\n    bp[row]=b.getEntry(pivot[row]);\n  }\n  for (int col=0; col < m; col++) {\n    for (int i=col + 1; i < m; i++) {\n      bp[i]-=bp[col] * lu[i][col];\n    }\n  }\n  for (int col=m - 1; col >= 0; col--) {\n    bp[col]/=lu[col][col];\n    for (int i=0; i < col; i++) {\n      bp[i]-=bp[col] * lu[i][col];\n    }\n  }\n  return new RealVectorImpl(bp,false);\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 177,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1358,
                        "startLineNumber": 310,
                        "startColumnNumber": 68,
                        "endLineNumber": 350,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  try {\n    return solve((RealVectorImpl)b);\n  }\n catch (  ClassCastException cce) {\n    final int m=pivot.length;\n    if (b.getDimension() != m) {\n      throw MathRuntimeException.createIllegalArgumentException(\"vector length mismatch: got {0} but expected {1}\",b.getDimension(),m);\n    }\n    if (singular) {\n      throw new SingularMatrixException();\n    }\n    final double[] bp=new double[m];\n    for (int row=0; row < m; row++) {\n      bp[row]=b.getEntry(pivot[row]);\n    }\n    for (int col=0; col < m; col++) {\n      for (int i=col + 1; i < m; i++) {\n        bp[i]-=bp[col] * lu[i][col];\n      }\n    }\n    for (int col=m - 1; col >= 0; col--) {\n      bp[col]/=lu[col][col];\n      for (int i=0; i < col; i++) {\n        bp[i]-=bp[col] * lu[i][col];\n      }\n    }\n    return new RealVectorImpl(bp,false);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 178,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1493,
                        "startLineNumber": 308,
                        "startColumnNumber": 8,
                        "endLineNumber": 350,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "/** \n * {@inheritDoc} \n */\npublic RealVector solve(RealVector b) throws IllegalArgumentException, InvalidMatrixException {\n  try {\n    return solve((RealVectorImpl)b);\n  }\n catch (  ClassCastException cce) {\n    final int m=pivot.length;\n    if (b.getDimension() != m) {\n      throw MathRuntimeException.createIllegalArgumentException(\"vector length mismatch: got {0} but expected {1}\",b.getDimension(),m);\n    }\n    if (singular) {\n      throw new SingularMatrixException();\n    }\n    final double[] bp=new double[m];\n    for (int row=0; row < m; row++) {\n      bp[row]=b.getEntry(pivot[row]);\n    }\n    for (int col=0; col < m; col++) {\n      for (int i=col + 1; i < m; i++) {\n        bp[i]-=bp[col] * lu[i][col];\n      }\n    }\n    for (int col=m - 1; col >= 0; col--) {\n      bp[col]/=lu[col][col];\n      for (int i=0; i < col; i++) {\n        bp[i]-=bp[col] * lu[i][col];\n      }\n    }\n    return new RealVectorImpl(bp,false);\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 192,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 21,
                    "startLineNumber": 316,
                    "startColumnNumber": 20,
                    "endLineNumber": 316,
                    "endColumnNumber": 41
                },
                "nodeContext": "b.getDimension() != m",
                "nodeType": "InfixExpression",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "m",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 319,
                "startColumnNumber": 46,
                "endLineNumber": 319,
                "endColumnNumber": 47
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
                    "nodePosition": {
                        "charLength": 181,
                        "startLineNumber": 317,
                        "startColumnNumber": 26,
                        "endLineNumber": 319,
                        "endColumnNumber": 48
                    },
                    "nodeContext": "MathRuntimeException.createIllegalArgumentException(\"vector length mismatch: got {0} but expected {1}\",b.getDimension(),m)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 8,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 188,
                        "startLineNumber": 317,
                        "startColumnNumber": 20,
                        "endLineNumber": 319,
                        "endColumnNumber": 49
                    },
                    "nodeContext": "throw MathRuntimeException.createIllegalArgumentException(\"vector length mismatch: got {0} but expected {1}\",b.getDimension(),m);\n",
                    "nodeType": "ThrowStatement",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 228,
                        "startLineNumber": 316,
                        "startColumnNumber": 43,
                        "endLineNumber": 320,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  throw MathRuntimeException.createIllegalArgumentException(\"vector length mismatch: got {0} but expected {1}\",b.getDimension(),m);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 10,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 255,
                        "startLineNumber": 316,
                        "startColumnNumber": 16,
                        "endLineNumber": 320,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (b.getDimension() != m) {\n  throw MathRuntimeException.createIllegalArgumentException(\"vector length mismatch: got {0} but expected {1}\",b.getDimension(),m);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 16,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
                    "nodePosition": {
                        "charLength": 1233,
                        "startLineNumber": 313,
                        "startColumnNumber": 45,
                        "endLineNumber": 349,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  final int m=pivot.length;\n  if (b.getDimension() != m) {\n    throw MathRuntimeException.createIllegalArgumentException(\"vector length mismatch: got {0} but expected {1}\",b.getDimension(),m);\n  }\n  if (singular) {\n    throw new SingularMatrixException();\n  }\n  final double[] bp=new double[m];\n  for (int row=0; row < m; row++) {\n    bp[row]=b.getEntry(pivot[row]);\n  }\n  for (int col=0; col < m; col++) {\n    for (int i=col + 1; i < m; i++) {\n      bp[i]-=bp[col] * lu[i][col];\n    }\n  }\n  for (int col=m - 1; col >= 0; col--) {\n    bp[col]/=lu[col][col];\n    for (int i=0; i < col; i++) {\n      bp[i]-=bp[col] * lu[i][col];\n    }\n  }\n  return new RealVectorImpl(bp,false);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 163,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
                    "nodePosition": {
                        "charLength": 1264,
                        "startLineNumber": 313,
                        "startColumnNumber": 14,
                        "endLineNumber": 349,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "catch (ClassCastException cce) {\n  final int m=pivot.length;\n  if (b.getDimension() != m) {\n    throw MathRuntimeException.createIllegalArgumentException(\"vector length mismatch: got {0} but expected {1}\",b.getDimension(),m);\n  }\n  if (singular) {\n    throw new SingularMatrixException();\n  }\n  final double[] bp=new double[m];\n  for (int row=0; row < m; row++) {\n    bp[row]=b.getEntry(pivot[row]);\n  }\n  for (int col=0; col < m; col++) {\n    for (int i=col + 1; i < m; i++) {\n      bp[i]-=bp[col] * lu[i][col];\n    }\n  }\n  for (int col=m - 1; col >= 0; col--) {\n    bp[col]/=lu[col][col];\n    for (int i=0; i < col; i++) {\n      bp[i]-=bp[col] * lu[i][col];\n    }\n  }\n  return new RealVectorImpl(bp,false);\n}\n",
                    "nodeType": "CatchClause",
                    "astNodeNumber": 168,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1334,
                        "startLineNumber": 311,
                        "startColumnNumber": 12,
                        "endLineNumber": 349,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "try {\n  return solve((RealVectorImpl)b);\n}\n catch (ClassCastException cce) {\n  final int m=pivot.length;\n  if (b.getDimension() != m) {\n    throw MathRuntimeException.createIllegalArgumentException(\"vector length mismatch: got {0} but expected {1}\",b.getDimension(),m);\n  }\n  if (singular) {\n    throw new SingularMatrixException();\n  }\n  final double[] bp=new double[m];\n  for (int row=0; row < m; row++) {\n    bp[row]=b.getEntry(pivot[row]);\n  }\n  for (int col=0; col < m; col++) {\n    for (int i=col + 1; i < m; i++) {\n      bp[i]-=bp[col] * lu[i][col];\n    }\n  }\n  for (int col=m - 1; col >= 0; col--) {\n    bp[col]/=lu[col][col];\n    for (int i=0; i < col; i++) {\n      bp[i]-=bp[col] * lu[i][col];\n    }\n  }\n  return new RealVectorImpl(bp,false);\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 177,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1358,
                        "startLineNumber": 310,
                        "startColumnNumber": 68,
                        "endLineNumber": 350,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  try {\n    return solve((RealVectorImpl)b);\n  }\n catch (  ClassCastException cce) {\n    final int m=pivot.length;\n    if (b.getDimension() != m) {\n      throw MathRuntimeException.createIllegalArgumentException(\"vector length mismatch: got {0} but expected {1}\",b.getDimension(),m);\n    }\n    if (singular) {\n      throw new SingularMatrixException();\n    }\n    final double[] bp=new double[m];\n    for (int row=0; row < m; row++) {\n      bp[row]=b.getEntry(pivot[row]);\n    }\n    for (int col=0; col < m; col++) {\n      for (int i=col + 1; i < m; i++) {\n        bp[i]-=bp[col] * lu[i][col];\n      }\n    }\n    for (int col=m - 1; col >= 0; col--) {\n      bp[col]/=lu[col][col];\n      for (int i=0; i < col; i++) {\n        bp[i]-=bp[col] * lu[i][col];\n      }\n    }\n    return new RealVectorImpl(bp,false);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 178,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1493,
                        "startLineNumber": 308,
                        "startColumnNumber": 8,
                        "endLineNumber": 350,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "/** \n * {@inheritDoc} \n */\npublic RealVector solve(RealVector b) throws IllegalArgumentException, InvalidMatrixException {\n  try {\n    return solve((RealVectorImpl)b);\n  }\n catch (  ClassCastException cce) {\n    final int m=pivot.length;\n    if (b.getDimension() != m) {\n      throw MathRuntimeException.createIllegalArgumentException(\"vector length mismatch: got {0} but expected {1}\",b.getDimension(),m);\n    }\n    if (singular) {\n      throw new SingularMatrixException();\n    }\n    final double[] bp=new double[m];\n    for (int row=0; row < m; row++) {\n      bp[row]=b.getEntry(pivot[row]);\n    }\n    for (int col=0; col < m; col++) {\n      for (int i=col + 1; i < m; i++) {\n        bp[i]-=bp[col] * lu[i][col];\n      }\n    }\n    for (int col=m - 1; col >= 0; col--) {\n      bp[col]/=lu[col][col];\n      for (int i=0; i < col; i++) {\n        bp[i]-=bp[col] * lu[i][col];\n      }\n    }\n    return new RealVectorImpl(bp,false);\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 192,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
                "nodePosition": {
                    "charLength": 181,
                    "startLineNumber": 317,
                    "startColumnNumber": 26,
                    "endLineNumber": 319,
                    "endColumnNumber": 48
                },
                "nodeContext": "MathRuntimeException.createIllegalArgumentException(\"vector length mismatch: got {0} but expected {1}\",b.getDimension(),m)",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 8,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "m",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 325,
                "startColumnNumber": 47,
                "endLineNumber": 325,
                "endColumnNumber": 48
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 13,
                        "startLineNumber": 325,
                        "startColumnNumber": 36,
                        "endLineNumber": 325,
                        "endColumnNumber": 49
                    },
                    "nodeContext": "new double[m]",
                    "nodeType": "ArrayCreation",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 18,
                        "startLineNumber": 325,
                        "startColumnNumber": 31,
                        "endLineNumber": 325,
                        "endColumnNumber": 49
                    },
                    "nodeContext": "bp=new double[m]",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 34,
                        "startLineNumber": 325,
                        "startColumnNumber": 16,
                        "endLineNumber": 325,
                        "endColumnNumber": 50
                    },
                    "nodeContext": "final double[] bp=new double[m];\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 12,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
                    "nodePosition": {
                        "charLength": 1233,
                        "startLineNumber": 313,
                        "startColumnNumber": 45,
                        "endLineNumber": 349,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  final int m=pivot.length;\n  if (b.getDimension() != m) {\n    throw MathRuntimeException.createIllegalArgumentException(\"vector length mismatch: got {0} but expected {1}\",b.getDimension(),m);\n  }\n  if (singular) {\n    throw new SingularMatrixException();\n  }\n  final double[] bp=new double[m];\n  for (int row=0; row < m; row++) {\n    bp[row]=b.getEntry(pivot[row]);\n  }\n  for (int col=0; col < m; col++) {\n    for (int i=col + 1; i < m; i++) {\n      bp[i]-=bp[col] * lu[i][col];\n    }\n  }\n  for (int col=m - 1; col >= 0; col--) {\n    bp[col]/=lu[col][col];\n    for (int i=0; i < col; i++) {\n      bp[i]-=bp[col] * lu[i][col];\n    }\n  }\n  return new RealVectorImpl(bp,false);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 163,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
                    "nodePosition": {
                        "charLength": 1264,
                        "startLineNumber": 313,
                        "startColumnNumber": 14,
                        "endLineNumber": 349,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "catch (ClassCastException cce) {\n  final int m=pivot.length;\n  if (b.getDimension() != m) {\n    throw MathRuntimeException.createIllegalArgumentException(\"vector length mismatch: got {0} but expected {1}\",b.getDimension(),m);\n  }\n  if (singular) {\n    throw new SingularMatrixException();\n  }\n  final double[] bp=new double[m];\n  for (int row=0; row < m; row++) {\n    bp[row]=b.getEntry(pivot[row]);\n  }\n  for (int col=0; col < m; col++) {\n    for (int i=col + 1; i < m; i++) {\n      bp[i]-=bp[col] * lu[i][col];\n    }\n  }\n  for (int col=m - 1; col >= 0; col--) {\n    bp[col]/=lu[col][col];\n    for (int i=0; i < col; i++) {\n      bp[i]-=bp[col] * lu[i][col];\n    }\n  }\n  return new RealVectorImpl(bp,false);\n}\n",
                    "nodeType": "CatchClause",
                    "astNodeNumber": 168,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1334,
                        "startLineNumber": 311,
                        "startColumnNumber": 12,
                        "endLineNumber": 349,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "try {\n  return solve((RealVectorImpl)b);\n}\n catch (ClassCastException cce) {\n  final int m=pivot.length;\n  if (b.getDimension() != m) {\n    throw MathRuntimeException.createIllegalArgumentException(\"vector length mismatch: got {0} but expected {1}\",b.getDimension(),m);\n  }\n  if (singular) {\n    throw new SingularMatrixException();\n  }\n  final double[] bp=new double[m];\n  for (int row=0; row < m; row++) {\n    bp[row]=b.getEntry(pivot[row]);\n  }\n  for (int col=0; col < m; col++) {\n    for (int i=col + 1; i < m; i++) {\n      bp[i]-=bp[col] * lu[i][col];\n    }\n  }\n  for (int col=m - 1; col >= 0; col--) {\n    bp[col]/=lu[col][col];\n    for (int i=0; i < col; i++) {\n      bp[i]-=bp[col] * lu[i][col];\n    }\n  }\n  return new RealVectorImpl(bp,false);\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 177,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1358,
                        "startLineNumber": 310,
                        "startColumnNumber": 68,
                        "endLineNumber": 350,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  try {\n    return solve((RealVectorImpl)b);\n  }\n catch (  ClassCastException cce) {\n    final int m=pivot.length;\n    if (b.getDimension() != m) {\n      throw MathRuntimeException.createIllegalArgumentException(\"vector length mismatch: got {0} but expected {1}\",b.getDimension(),m);\n    }\n    if (singular) {\n      throw new SingularMatrixException();\n    }\n    final double[] bp=new double[m];\n    for (int row=0; row < m; row++) {\n      bp[row]=b.getEntry(pivot[row]);\n    }\n    for (int col=0; col < m; col++) {\n      for (int i=col + 1; i < m; i++) {\n        bp[i]-=bp[col] * lu[i][col];\n      }\n    }\n    for (int col=m - 1; col >= 0; col--) {\n      bp[col]/=lu[col][col];\n      for (int i=0; i < col; i++) {\n        bp[i]-=bp[col] * lu[i][col];\n      }\n    }\n    return new RealVectorImpl(bp,false);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 178,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1493,
                        "startLineNumber": 308,
                        "startColumnNumber": 8,
                        "endLineNumber": 350,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "/** \n * {@inheritDoc} \n */\npublic RealVector solve(RealVector b) throws IllegalArgumentException, InvalidMatrixException {\n  try {\n    return solve((RealVectorImpl)b);\n  }\n catch (  ClassCastException cce) {\n    final int m=pivot.length;\n    if (b.getDimension() != m) {\n      throw MathRuntimeException.createIllegalArgumentException(\"vector length mismatch: got {0} but expected {1}\",b.getDimension(),m);\n    }\n    if (singular) {\n      throw new SingularMatrixException();\n    }\n    final double[] bp=new double[m];\n    for (int row=0; row < m; row++) {\n      bp[row]=b.getEntry(pivot[row]);\n    }\n    for (int col=0; col < m; col++) {\n      for (int i=col + 1; i < m; i++) {\n        bp[i]-=bp[col] * lu[i][col];\n      }\n    }\n    for (int col=m - 1; col >= 0; col--) {\n      bp[col]/=lu[col][col];\n      for (int i=0; i < col; i++) {\n        bp[i]-=bp[col] * lu[i][col];\n      }\n    }\n    return new RealVectorImpl(bp,false);\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 192,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 34,
                    "startLineNumber": 325,
                    "startColumnNumber": 16,
                    "endLineNumber": 325,
                    "endColumnNumber": 50
                },
                "nodeContext": "final double[] bp=new double[m];\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 12,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "m",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 328,
                "startColumnNumber": 40,
                "endLineNumber": 328,
                "endColumnNumber": 41
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 328,
                        "startColumnNumber": 34,
                        "endLineNumber": 328,
                        "endColumnNumber": 41
                    },
                    "nodeContext": "row < m",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 107,
                        "startLineNumber": 328,
                        "startColumnNumber": 16,
                        "endLineNumber": 330,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "for (int row=0; row < m; row++) {\n  bp[row]=b.getEntry(pivot[row]);\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 23,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
                    "nodePosition": {
                        "charLength": 1233,
                        "startLineNumber": 313,
                        "startColumnNumber": 45,
                        "endLineNumber": 349,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  final int m=pivot.length;\n  if (b.getDimension() != m) {\n    throw MathRuntimeException.createIllegalArgumentException(\"vector length mismatch: got {0} but expected {1}\",b.getDimension(),m);\n  }\n  if (singular) {\n    throw new SingularMatrixException();\n  }\n  final double[] bp=new double[m];\n  for (int row=0; row < m; row++) {\n    bp[row]=b.getEntry(pivot[row]);\n  }\n  for (int col=0; col < m; col++) {\n    for (int i=col + 1; i < m; i++) {\n      bp[i]-=bp[col] * lu[i][col];\n    }\n  }\n  for (int col=m - 1; col >= 0; col--) {\n    bp[col]/=lu[col][col];\n    for (int i=0; i < col; i++) {\n      bp[i]-=bp[col] * lu[i][col];\n    }\n  }\n  return new RealVectorImpl(bp,false);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 163,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
                    "nodePosition": {
                        "charLength": 1264,
                        "startLineNumber": 313,
                        "startColumnNumber": 14,
                        "endLineNumber": 349,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "catch (ClassCastException cce) {\n  final int m=pivot.length;\n  if (b.getDimension() != m) {\n    throw MathRuntimeException.createIllegalArgumentException(\"vector length mismatch: got {0} but expected {1}\",b.getDimension(),m);\n  }\n  if (singular) {\n    throw new SingularMatrixException();\n  }\n  final double[] bp=new double[m];\n  for (int row=0; row < m; row++) {\n    bp[row]=b.getEntry(pivot[row]);\n  }\n  for (int col=0; col < m; col++) {\n    for (int i=col + 1; i < m; i++) {\n      bp[i]-=bp[col] * lu[i][col];\n    }\n  }\n  for (int col=m - 1; col >= 0; col--) {\n    bp[col]/=lu[col][col];\n    for (int i=0; i < col; i++) {\n      bp[i]-=bp[col] * lu[i][col];\n    }\n  }\n  return new RealVectorImpl(bp,false);\n}\n",
                    "nodeType": "CatchClause",
                    "astNodeNumber": 168,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1334,
                        "startLineNumber": 311,
                        "startColumnNumber": 12,
                        "endLineNumber": 349,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "try {\n  return solve((RealVectorImpl)b);\n}\n catch (ClassCastException cce) {\n  final int m=pivot.length;\n  if (b.getDimension() != m) {\n    throw MathRuntimeException.createIllegalArgumentException(\"vector length mismatch: got {0} but expected {1}\",b.getDimension(),m);\n  }\n  if (singular) {\n    throw new SingularMatrixException();\n  }\n  final double[] bp=new double[m];\n  for (int row=0; row < m; row++) {\n    bp[row]=b.getEntry(pivot[row]);\n  }\n  for (int col=0; col < m; col++) {\n    for (int i=col + 1; i < m; i++) {\n      bp[i]-=bp[col] * lu[i][col];\n    }\n  }\n  for (int col=m - 1; col >= 0; col--) {\n    bp[col]/=lu[col][col];\n    for (int i=0; i < col; i++) {\n      bp[i]-=bp[col] * lu[i][col];\n    }\n  }\n  return new RealVectorImpl(bp,false);\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 177,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1358,
                        "startLineNumber": 310,
                        "startColumnNumber": 68,
                        "endLineNumber": 350,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  try {\n    return solve((RealVectorImpl)b);\n  }\n catch (  ClassCastException cce) {\n    final int m=pivot.length;\n    if (b.getDimension() != m) {\n      throw MathRuntimeException.createIllegalArgumentException(\"vector length mismatch: got {0} but expected {1}\",b.getDimension(),m);\n    }\n    if (singular) {\n      throw new SingularMatrixException();\n    }\n    final double[] bp=new double[m];\n    for (int row=0; row < m; row++) {\n      bp[row]=b.getEntry(pivot[row]);\n    }\n    for (int col=0; col < m; col++) {\n      for (int i=col + 1; i < m; i++) {\n        bp[i]-=bp[col] * lu[i][col];\n      }\n    }\n    for (int col=m - 1; col >= 0; col--) {\n      bp[col]/=lu[col][col];\n      for (int i=0; i < col; i++) {\n        bp[i]-=bp[col] * lu[i][col];\n      }\n    }\n    return new RealVectorImpl(bp,false);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 178,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1493,
                        "startLineNumber": 308,
                        "startColumnNumber": 8,
                        "endLineNumber": 350,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "/** \n * {@inheritDoc} \n */\npublic RealVector solve(RealVector b) throws IllegalArgumentException, InvalidMatrixException {\n  try {\n    return solve((RealVectorImpl)b);\n  }\n catch (  ClassCastException cce) {\n    final int m=pivot.length;\n    if (b.getDimension() != m) {\n      throw MathRuntimeException.createIllegalArgumentException(\"vector length mismatch: got {0} but expected {1}\",b.getDimension(),m);\n    }\n    if (singular) {\n      throw new SingularMatrixException();\n    }\n    final double[] bp=new double[m];\n    for (int row=0; row < m; row++) {\n      bp[row]=b.getEntry(pivot[row]);\n    }\n    for (int col=0; col < m; col++) {\n      for (int i=col + 1; i < m; i++) {\n        bp[i]-=bp[col] * lu[i][col];\n      }\n    }\n    for (int col=m - 1; col >= 0; col--) {\n      bp[col]/=lu[col][col];\n      for (int i=0; i < col; i++) {\n        bp[i]-=bp[col] * lu[i][col];\n      }\n    }\n    return new RealVectorImpl(bp,false);\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 192,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
                "nodePosition": {
                    "charLength": 7,
                    "startLineNumber": 328,
                    "startColumnNumber": 34,
                    "endLineNumber": 328,
                    "endColumnNumber": 41
                },
                "nodeContext": "row < m",
                "nodeType": "InfixExpression",
                "astNodeNumber": 3,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "m",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 333,
                "startColumnNumber": 40,
                "endLineNumber": 333,
                "endColumnNumber": 41
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 333,
                        "startColumnNumber": 34,
                        "endLineNumber": 333,
                        "endColumnNumber": 41
                    },
                    "nodeContext": "col < m",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 186,
                        "startLineNumber": 333,
                        "startColumnNumber": 16,
                        "endLineNumber": 337,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "for (int col=0; col < m; col++) {\n  for (int i=col + 1; i < m; i++) {\n    bp[i]-=bp[col] * lu[i][col];\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 40,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
                    "nodePosition": {
                        "charLength": 1233,
                        "startLineNumber": 313,
                        "startColumnNumber": 45,
                        "endLineNumber": 349,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  final int m=pivot.length;\n  if (b.getDimension() != m) {\n    throw MathRuntimeException.createIllegalArgumentException(\"vector length mismatch: got {0} but expected {1}\",b.getDimension(),m);\n  }\n  if (singular) {\n    throw new SingularMatrixException();\n  }\n  final double[] bp=new double[m];\n  for (int row=0; row < m; row++) {\n    bp[row]=b.getEntry(pivot[row]);\n  }\n  for (int col=0; col < m; col++) {\n    for (int i=col + 1; i < m; i++) {\n      bp[i]-=bp[col] * lu[i][col];\n    }\n  }\n  for (int col=m - 1; col >= 0; col--) {\n    bp[col]/=lu[col][col];\n    for (int i=0; i < col; i++) {\n      bp[i]-=bp[col] * lu[i][col];\n    }\n  }\n  return new RealVectorImpl(bp,false);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 163,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
                    "nodePosition": {
                        "charLength": 1264,
                        "startLineNumber": 313,
                        "startColumnNumber": 14,
                        "endLineNumber": 349,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "catch (ClassCastException cce) {\n  final int m=pivot.length;\n  if (b.getDimension() != m) {\n    throw MathRuntimeException.createIllegalArgumentException(\"vector length mismatch: got {0} but expected {1}\",b.getDimension(),m);\n  }\n  if (singular) {\n    throw new SingularMatrixException();\n  }\n  final double[] bp=new double[m];\n  for (int row=0; row < m; row++) {\n    bp[row]=b.getEntry(pivot[row]);\n  }\n  for (int col=0; col < m; col++) {\n    for (int i=col + 1; i < m; i++) {\n      bp[i]-=bp[col] * lu[i][col];\n    }\n  }\n  for (int col=m - 1; col >= 0; col--) {\n    bp[col]/=lu[col][col];\n    for (int i=0; i < col; i++) {\n      bp[i]-=bp[col] * lu[i][col];\n    }\n  }\n  return new RealVectorImpl(bp,false);\n}\n",
                    "nodeType": "CatchClause",
                    "astNodeNumber": 168,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1334,
                        "startLineNumber": 311,
                        "startColumnNumber": 12,
                        "endLineNumber": 349,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "try {\n  return solve((RealVectorImpl)b);\n}\n catch (ClassCastException cce) {\n  final int m=pivot.length;\n  if (b.getDimension() != m) {\n    throw MathRuntimeException.createIllegalArgumentException(\"vector length mismatch: got {0} but expected {1}\",b.getDimension(),m);\n  }\n  if (singular) {\n    throw new SingularMatrixException();\n  }\n  final double[] bp=new double[m];\n  for (int row=0; row < m; row++) {\n    bp[row]=b.getEntry(pivot[row]);\n  }\n  for (int col=0; col < m; col++) {\n    for (int i=col + 1; i < m; i++) {\n      bp[i]-=bp[col] * lu[i][col];\n    }\n  }\n  for (int col=m - 1; col >= 0; col--) {\n    bp[col]/=lu[col][col];\n    for (int i=0; i < col; i++) {\n      bp[i]-=bp[col] * lu[i][col];\n    }\n  }\n  return new RealVectorImpl(bp,false);\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 177,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1358,
                        "startLineNumber": 310,
                        "startColumnNumber": 68,
                        "endLineNumber": 350,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  try {\n    return solve((RealVectorImpl)b);\n  }\n catch (  ClassCastException cce) {\n    final int m=pivot.length;\n    if (b.getDimension() != m) {\n      throw MathRuntimeException.createIllegalArgumentException(\"vector length mismatch: got {0} but expected {1}\",b.getDimension(),m);\n    }\n    if (singular) {\n      throw new SingularMatrixException();\n    }\n    final double[] bp=new double[m];\n    for (int row=0; row < m; row++) {\n      bp[row]=b.getEntry(pivot[row]);\n    }\n    for (int col=0; col < m; col++) {\n      for (int i=col + 1; i < m; i++) {\n        bp[i]-=bp[col] * lu[i][col];\n      }\n    }\n    for (int col=m - 1; col >= 0; col--) {\n      bp[col]/=lu[col][col];\n      for (int i=0; i < col; i++) {\n        bp[i]-=bp[col] * lu[i][col];\n      }\n    }\n    return new RealVectorImpl(bp,false);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 178,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1493,
                        "startLineNumber": 308,
                        "startColumnNumber": 8,
                        "endLineNumber": 350,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "/** \n * {@inheritDoc} \n */\npublic RealVector solve(RealVector b) throws IllegalArgumentException, InvalidMatrixException {\n  try {\n    return solve((RealVectorImpl)b);\n  }\n catch (  ClassCastException cce) {\n    final int m=pivot.length;\n    if (b.getDimension() != m) {\n      throw MathRuntimeException.createIllegalArgumentException(\"vector length mismatch: got {0} but expected {1}\",b.getDimension(),m);\n    }\n    if (singular) {\n      throw new SingularMatrixException();\n    }\n    final double[] bp=new double[m];\n    for (int row=0; row < m; row++) {\n      bp[row]=b.getEntry(pivot[row]);\n    }\n    for (int col=0; col < m; col++) {\n      for (int i=col + 1; i < m; i++) {\n        bp[i]-=bp[col] * lu[i][col];\n      }\n    }\n    for (int col=m - 1; col >= 0; col--) {\n      bp[col]/=lu[col][col];\n      for (int i=0; i < col; i++) {\n        bp[i]-=bp[col] * lu[i][col];\n      }\n    }\n    return new RealVectorImpl(bp,false);\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 192,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
                "nodePosition": {
                    "charLength": 7,
                    "startLineNumber": 333,
                    "startColumnNumber": 34,
                    "endLineNumber": 333,
                    "endColumnNumber": 41
                },
                "nodeContext": "col < m",
                "nodeType": "InfixExpression",
                "astNodeNumber": 3,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "m",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 334,
                "startColumnNumber": 46,
                "endLineNumber": 334,
                "endColumnNumber": 47
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
                    "nodePosition": {
                        "charLength": 5,
                        "startLineNumber": 334,
                        "startColumnNumber": 42,
                        "endLineNumber": 334,
                        "endColumnNumber": 47
                    },
                    "nodeContext": "i < m",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 112,
                        "startLineNumber": 334,
                        "startColumnNumber": 20,
                        "endLineNumber": 336,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "for (int i=col + 1; i < m; i++) {\n  bp[i]-=bp[col] * lu[i][col];\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 28,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 152,
                        "startLineNumber": 333,
                        "startColumnNumber": 50,
                        "endLineNumber": 337,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  for (int i=col + 1; i < m; i++) {\n    bp[i]-=bp[col] * lu[i][col];\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 29,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 186,
                        "startLineNumber": 333,
                        "startColumnNumber": 16,
                        "endLineNumber": 337,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "for (int col=0; col < m; col++) {\n  for (int i=col + 1; i < m; i++) {\n    bp[i]-=bp[col] * lu[i][col];\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 40,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
                    "nodePosition": {
                        "charLength": 1233,
                        "startLineNumber": 313,
                        "startColumnNumber": 45,
                        "endLineNumber": 349,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  final int m=pivot.length;\n  if (b.getDimension() != m) {\n    throw MathRuntimeException.createIllegalArgumentException(\"vector length mismatch: got {0} but expected {1}\",b.getDimension(),m);\n  }\n  if (singular) {\n    throw new SingularMatrixException();\n  }\n  final double[] bp=new double[m];\n  for (int row=0; row < m; row++) {\n    bp[row]=b.getEntry(pivot[row]);\n  }\n  for (int col=0; col < m; col++) {\n    for (int i=col + 1; i < m; i++) {\n      bp[i]-=bp[col] * lu[i][col];\n    }\n  }\n  for (int col=m - 1; col >= 0; col--) {\n    bp[col]/=lu[col][col];\n    for (int i=0; i < col; i++) {\n      bp[i]-=bp[col] * lu[i][col];\n    }\n  }\n  return new RealVectorImpl(bp,false);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 163,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
                    "nodePosition": {
                        "charLength": 1264,
                        "startLineNumber": 313,
                        "startColumnNumber": 14,
                        "endLineNumber": 349,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "catch (ClassCastException cce) {\n  final int m=pivot.length;\n  if (b.getDimension() != m) {\n    throw MathRuntimeException.createIllegalArgumentException(\"vector length mismatch: got {0} but expected {1}\",b.getDimension(),m);\n  }\n  if (singular) {\n    throw new SingularMatrixException();\n  }\n  final double[] bp=new double[m];\n  for (int row=0; row < m; row++) {\n    bp[row]=b.getEntry(pivot[row]);\n  }\n  for (int col=0; col < m; col++) {\n    for (int i=col + 1; i < m; i++) {\n      bp[i]-=bp[col] * lu[i][col];\n    }\n  }\n  for (int col=m - 1; col >= 0; col--) {\n    bp[col]/=lu[col][col];\n    for (int i=0; i < col; i++) {\n      bp[i]-=bp[col] * lu[i][col];\n    }\n  }\n  return new RealVectorImpl(bp,false);\n}\n",
                    "nodeType": "CatchClause",
                    "astNodeNumber": 168,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1334,
                        "startLineNumber": 311,
                        "startColumnNumber": 12,
                        "endLineNumber": 349,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "try {\n  return solve((RealVectorImpl)b);\n}\n catch (ClassCastException cce) {\n  final int m=pivot.length;\n  if (b.getDimension() != m) {\n    throw MathRuntimeException.createIllegalArgumentException(\"vector length mismatch: got {0} but expected {1}\",b.getDimension(),m);\n  }\n  if (singular) {\n    throw new SingularMatrixException();\n  }\n  final double[] bp=new double[m];\n  for (int row=0; row < m; row++) {\n    bp[row]=b.getEntry(pivot[row]);\n  }\n  for (int col=0; col < m; col++) {\n    for (int i=col + 1; i < m; i++) {\n      bp[i]-=bp[col] * lu[i][col];\n    }\n  }\n  for (int col=m - 1; col >= 0; col--) {\n    bp[col]/=lu[col][col];\n    for (int i=0; i < col; i++) {\n      bp[i]-=bp[col] * lu[i][col];\n    }\n  }\n  return new RealVectorImpl(bp,false);\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 177,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1358,
                        "startLineNumber": 310,
                        "startColumnNumber": 68,
                        "endLineNumber": 350,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  try {\n    return solve((RealVectorImpl)b);\n  }\n catch (  ClassCastException cce) {\n    final int m=pivot.length;\n    if (b.getDimension() != m) {\n      throw MathRuntimeException.createIllegalArgumentException(\"vector length mismatch: got {0} but expected {1}\",b.getDimension(),m);\n    }\n    if (singular) {\n      throw new SingularMatrixException();\n    }\n    final double[] bp=new double[m];\n    for (int row=0; row < m; row++) {\n      bp[row]=b.getEntry(pivot[row]);\n    }\n    for (int col=0; col < m; col++) {\n      for (int i=col + 1; i < m; i++) {\n        bp[i]-=bp[col] * lu[i][col];\n      }\n    }\n    for (int col=m - 1; col >= 0; col--) {\n      bp[col]/=lu[col][col];\n      for (int i=0; i < col; i++) {\n        bp[i]-=bp[col] * lu[i][col];\n      }\n    }\n    return new RealVectorImpl(bp,false);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 178,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1493,
                        "startLineNumber": 308,
                        "startColumnNumber": 8,
                        "endLineNumber": 350,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "/** \n * {@inheritDoc} \n */\npublic RealVector solve(RealVector b) throws IllegalArgumentException, InvalidMatrixException {\n  try {\n    return solve((RealVectorImpl)b);\n  }\n catch (  ClassCastException cce) {\n    final int m=pivot.length;\n    if (b.getDimension() != m) {\n      throw MathRuntimeException.createIllegalArgumentException(\"vector length mismatch: got {0} but expected {1}\",b.getDimension(),m);\n    }\n    if (singular) {\n      throw new SingularMatrixException();\n    }\n    final double[] bp=new double[m];\n    for (int row=0; row < m; row++) {\n      bp[row]=b.getEntry(pivot[row]);\n    }\n    for (int col=0; col < m; col++) {\n      for (int i=col + 1; i < m; i++) {\n        bp[i]-=bp[col] * lu[i][col];\n      }\n    }\n    for (int col=m - 1; col >= 0; col--) {\n      bp[col]/=lu[col][col];\n      for (int i=0; i < col; i++) {\n        bp[i]-=bp[col] * lu[i][col];\n      }\n    }\n    return new RealVectorImpl(bp,false);\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 192,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
                "nodePosition": {
                    "charLength": 5,
                    "startLineNumber": 334,
                    "startColumnNumber": 42,
                    "endLineNumber": 334,
                    "endColumnNumber": 47
                },
                "nodeContext": "i < m",
                "nodeType": "InfixExpression",
                "astNodeNumber": 3,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "m",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 340,
                "startColumnNumber": 31,
                "endLineNumber": 340,
                "endColumnNumber": 32
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 5,
                        "startLineNumber": 340,
                        "startColumnNumber": 31,
                        "endLineNumber": 340,
                        "endColumnNumber": 36
                    },
                    "nodeContext": "m - 1",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationExpression,fragments]",
                    "nodePosition": {
                        "charLength": 11,
                        "startLineNumber": 340,
                        "startColumnNumber": 25,
                        "endLineNumber": 340,
                        "endColumnNumber": 36
                    },
                    "nodeContext": "col=m - 1",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
                    "nodePosition": {
                        "charLength": 15,
                        "startLineNumber": 340,
                        "startColumnNumber": 21,
                        "endLineNumber": 340,
                        "endColumnNumber": 36
                    },
                    "nodeContext": "int col=m - 1",
                    "nodeType": "VariableDeclarationExpression",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 232,
                        "startLineNumber": 340,
                        "startColumnNumber": 16,
                        "endLineNumber": 345,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "for (int col=m - 1; col >= 0; col--) {\n  bp[col]/=lu[col][col];\n  for (int i=0; i < col; i++) {\n    bp[i]-=bp[col] * lu[i][col];\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 50,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
                    "nodePosition": {
                        "charLength": 1233,
                        "startLineNumber": 313,
                        "startColumnNumber": 45,
                        "endLineNumber": 349,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  final int m=pivot.length;\n  if (b.getDimension() != m) {\n    throw MathRuntimeException.createIllegalArgumentException(\"vector length mismatch: got {0} but expected {1}\",b.getDimension(),m);\n  }\n  if (singular) {\n    throw new SingularMatrixException();\n  }\n  final double[] bp=new double[m];\n  for (int row=0; row < m; row++) {\n    bp[row]=b.getEntry(pivot[row]);\n  }\n  for (int col=0; col < m; col++) {\n    for (int i=col + 1; i < m; i++) {\n      bp[i]-=bp[col] * lu[i][col];\n    }\n  }\n  for (int col=m - 1; col >= 0; col--) {\n    bp[col]/=lu[col][col];\n    for (int i=0; i < col; i++) {\n      bp[i]-=bp[col] * lu[i][col];\n    }\n  }\n  return new RealVectorImpl(bp,false);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 163,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
                    "nodePosition": {
                        "charLength": 1264,
                        "startLineNumber": 313,
                        "startColumnNumber": 14,
                        "endLineNumber": 349,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "catch (ClassCastException cce) {\n  final int m=pivot.length;\n  if (b.getDimension() != m) {\n    throw MathRuntimeException.createIllegalArgumentException(\"vector length mismatch: got {0} but expected {1}\",b.getDimension(),m);\n  }\n  if (singular) {\n    throw new SingularMatrixException();\n  }\n  final double[] bp=new double[m];\n  for (int row=0; row < m; row++) {\n    bp[row]=b.getEntry(pivot[row]);\n  }\n  for (int col=0; col < m; col++) {\n    for (int i=col + 1; i < m; i++) {\n      bp[i]-=bp[col] * lu[i][col];\n    }\n  }\n  for (int col=m - 1; col >= 0; col--) {\n    bp[col]/=lu[col][col];\n    for (int i=0; i < col; i++) {\n      bp[i]-=bp[col] * lu[i][col];\n    }\n  }\n  return new RealVectorImpl(bp,false);\n}\n",
                    "nodeType": "CatchClause",
                    "astNodeNumber": 168,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1334,
                        "startLineNumber": 311,
                        "startColumnNumber": 12,
                        "endLineNumber": 349,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "try {\n  return solve((RealVectorImpl)b);\n}\n catch (ClassCastException cce) {\n  final int m=pivot.length;\n  if (b.getDimension() != m) {\n    throw MathRuntimeException.createIllegalArgumentException(\"vector length mismatch: got {0} but expected {1}\",b.getDimension(),m);\n  }\n  if (singular) {\n    throw new SingularMatrixException();\n  }\n  final double[] bp=new double[m];\n  for (int row=0; row < m; row++) {\n    bp[row]=b.getEntry(pivot[row]);\n  }\n  for (int col=0; col < m; col++) {\n    for (int i=col + 1; i < m; i++) {\n      bp[i]-=bp[col] * lu[i][col];\n    }\n  }\n  for (int col=m - 1; col >= 0; col--) {\n    bp[col]/=lu[col][col];\n    for (int i=0; i < col; i++) {\n      bp[i]-=bp[col] * lu[i][col];\n    }\n  }\n  return new RealVectorImpl(bp,false);\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 177,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1358,
                        "startLineNumber": 310,
                        "startColumnNumber": 68,
                        "endLineNumber": 350,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  try {\n    return solve((RealVectorImpl)b);\n  }\n catch (  ClassCastException cce) {\n    final int m=pivot.length;\n    if (b.getDimension() != m) {\n      throw MathRuntimeException.createIllegalArgumentException(\"vector length mismatch: got {0} but expected {1}\",b.getDimension(),m);\n    }\n    if (singular) {\n      throw new SingularMatrixException();\n    }\n    final double[] bp=new double[m];\n    for (int row=0; row < m; row++) {\n      bp[row]=b.getEntry(pivot[row]);\n    }\n    for (int col=0; col < m; col++) {\n      for (int i=col + 1; i < m; i++) {\n        bp[i]-=bp[col] * lu[i][col];\n      }\n    }\n    for (int col=m - 1; col >= 0; col--) {\n      bp[col]/=lu[col][col];\n      for (int i=0; i < col; i++) {\n        bp[i]-=bp[col] * lu[i][col];\n      }\n    }\n    return new RealVectorImpl(bp,false);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 178,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1493,
                        "startLineNumber": 308,
                        "startColumnNumber": 8,
                        "endLineNumber": 350,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "/** \n * {@inheritDoc} \n */\npublic RealVector solve(RealVector b) throws IllegalArgumentException, InvalidMatrixException {\n  try {\n    return solve((RealVectorImpl)b);\n  }\n catch (  ClassCastException cce) {\n    final int m=pivot.length;\n    if (b.getDimension() != m) {\n      throw MathRuntimeException.createIllegalArgumentException(\"vector length mismatch: got {0} but expected {1}\",b.getDimension(),m);\n    }\n    if (singular) {\n      throw new SingularMatrixException();\n    }\n    final double[] bp=new double[m];\n    for (int row=0; row < m; row++) {\n      bp[row]=b.getEntry(pivot[row]);\n    }\n    for (int col=0; col < m; col++) {\n      for (int i=col + 1; i < m; i++) {\n        bp[i]-=bp[col] * lu[i][col];\n      }\n    }\n    for (int col=m - 1; col >= 0; col--) {\n      bp[col]/=lu[col][col];\n      for (int i=0; i < col; i++) {\n        bp[i]-=bp[col] * lu[i][col];\n      }\n    }\n    return new RealVectorImpl(bp,false);\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 192,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
                "nodePosition": {
                    "charLength": 15,
                    "startLineNumber": 340,
                    "startColumnNumber": 21,
                    "endLineNumber": 340,
                    "endColumnNumber": 36
                },
                "nodeContext": "int col=m - 1",
                "nodeType": "VariableDeclarationExpression",
                "astNodeNumber": 7,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "int"
        }
    ],
    "positionList": [
        {
            "charLength": 1,
            "startLineNumber": 316,
            "startColumnNumber": 40,
            "endLineNumber": 316,
            "endColumnNumber": 41
        },
        {
            "charLength": 1,
            "startLineNumber": 319,
            "startColumnNumber": 46,
            "endLineNumber": 319,
            "endColumnNumber": 47
        },
        {
            "charLength": 1,
            "startLineNumber": 325,
            "startColumnNumber": 47,
            "endLineNumber": 325,
            "endColumnNumber": 48
        },
        {
            "charLength": 1,
            "startLineNumber": 328,
            "startColumnNumber": 40,
            "endLineNumber": 328,
            "endColumnNumber": 41
        },
        {
            "charLength": 1,
            "startLineNumber": 333,
            "startColumnNumber": 40,
            "endLineNumber": 333,
            "endColumnNumber": 41
        },
        {
            "charLength": 1,
            "startLineNumber": 334,
            "startColumnNumber": 46,
            "endLineNumber": 334,
            "endColumnNumber": 47
        },
        {
            "charLength": 1,
            "startLineNumber": 340,
            "startColumnNumber": 31,
            "endLineNumber": 340,
            "endColumnNumber": 32
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 1
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 5,
            "layout": 1
        },
        {
            "firstKey": 4,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 5,
            "layout": 4
        }
    ]
}