{
    "id": 352,
    "expression": "(char)c",
    "projectName": "antlr@antlr4",
    "commitID": "d59d1932521fff0564e84d9afebb780e6500ec6c",
    "filePath": "tool/src/org/antlr/v4/misc/CharSupport.java",
    "occurrences": 3,
    "isArithmeticExpression": 0,
    "isGetTypeMethod": 0,
    "expressionList": [
        {
            "nodeContext": "(char)c",
            "nodeType": "CastExpression",
            "nodePosition": {
                "charLength": 8,
                "startLineNumber": 52,
                "startColumnNumber": 38,
                "endLineNumber": 52,
                "endColumnNumber": 46
            },
            "astNodeNumber": 3,
            "astHeight": 2,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 35,
                        "startLineNumber": 52,
                        "startColumnNumber": 12,
                        "endLineNumber": 52,
                        "endColumnNumber": 47
                    },
                    "nodeContext": "Character.UnicodeBlock.of((char)c)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 8,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 73,
                        "startLineNumber": 52,
                        "startColumnNumber": 12,
                        "endLineNumber": 52,
                        "endColumnNumber": 85
                    },
                    "nodeContext": "Character.UnicodeBlock.of((char)c) == Character.UnicodeBlock.BASIC_LATIN",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 14,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 116,
                        "startLineNumber": 52,
                        "startColumnNumber": 12,
                        "endLineNumber": 53,
                        "endColumnNumber": 38
                    },
                    "nodeContext": "Character.UnicodeBlock.of((char)c) == Character.UnicodeBlock.BASIC_LATIN && !Character.isISOControl((char)c)",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 22,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 436,
                        "startLineNumber": 52,
                        "startColumnNumber": 8,
                        "endLineNumber": 68,
                        "endColumnNumber": 4
                    },
                    "nodeContext": "if (Character.UnicodeBlock.of((char)c) == Character.UnicodeBlock.BASIC_LATIN && !Character.isISOControl((char)c)) {\n  if (c == '\\\\') {\n    result=\"\\\\\\\\\";\n  }\n else   if (c == '\\'') {\n    result=\"\\\\'\";\n  }\n else {\n    result=Character.toString((char)c);\n  }\n}\n else if (c <= 0xFFFF) {\n  result=String.format(\"\\\\u%04X\",c);\n}\n else {\n  result=String.format(\"\\\\u{%06X}\",c);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 74,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 513,
                        "startLineNumber": 49,
                        "startColumnNumber": 3,
                        "endLineNumber": 68,
                        "endColumnNumber": 4
                    },
                    "nodeContext": "if (charValueEscape != null) {\n  result=charValueEscape;\n}\n else if (Character.UnicodeBlock.of((char)c) == Character.UnicodeBlock.BASIC_LATIN && !Character.isISOControl((char)c)) {\n  if (c == '\\\\') {\n    result=\"\\\\\\\\\";\n  }\n else   if (c == '\\'') {\n    result=\"\\\\'\";\n  }\n else {\n    result=Character.toString((char)c);\n  }\n}\n else if (c <= 0xFFFF) {\n  result=String.format(\"\\\\u%04X\",c);\n}\n else {\n  result=String.format(\"\\\\u{%06X}\",c);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 83,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 633,
                        "startLineNumber": 47,
                        "startColumnNumber": 7,
                        "endLineNumber": 69,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  String charValueEscape=c < ANTLRLiteralCharValueEscape.length ? ANTLRLiteralCharValueEscape[c] : null;\n  if (charValueEscape != null) {\n    result=charValueEscape;\n  }\n else   if (Character.UnicodeBlock.of((char)c) == Character.UnicodeBlock.BASIC_LATIN && !Character.isISOControl((char)c)) {\n    if (c == '\\\\') {\n      result=\"\\\\\\\\\";\n    }\n else     if (c == '\\'') {\n      result=\"\\\\'\";\n    }\n else {\n      result=Character.toString((char)c);\n    }\n  }\n else   if (c <= 0xFFFF) {\n    result=String.format(\"\\\\u%04X\",c);\n  }\n else {\n    result=String.format(\"\\\\u{%06X}\",c);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 99,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 706,
                        "startLineNumber": 44,
                        "startColumnNumber": 2,
                        "endLineNumber": 69,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (c < Lexer.MIN_CHAR_VALUE) {\n  result=\"<INVALID>\";\n}\n else {\n  String charValueEscape=c < ANTLRLiteralCharValueEscape.length ? ANTLRLiteralCharValueEscape[c] : null;\n  if (charValueEscape != null) {\n    result=charValueEscape;\n  }\n else   if (Character.UnicodeBlock.of((char)c) == Character.UnicodeBlock.BASIC_LATIN && !Character.isISOControl((char)c)) {\n    if (c == '\\\\') {\n      result=\"\\\\\\\\\";\n    }\n else     if (c == '\\'') {\n      result=\"\\\\'\";\n    }\n else {\n      result=Character.toString((char)c);\n    }\n  }\n else   if (c <= 0xFFFF) {\n    result=String.format(\"\\\\u%04X\",c);\n  }\n else {\n    result=String.format(\"\\\\u{%06X}\",c);\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 110,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 765,
                        "startLineNumber": 42,
                        "startColumnNumber": 56,
                        "endLineNumber": 71,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "{\n  String result;\n  if (c < Lexer.MIN_CHAR_VALUE) {\n    result=\"<INVALID>\";\n  }\n else {\n    String charValueEscape=c < ANTLRLiteralCharValueEscape.length ? ANTLRLiteralCharValueEscape[c] : null;\n    if (charValueEscape != null) {\n      result=charValueEscape;\n    }\n else     if (Character.UnicodeBlock.of((char)c) == Character.UnicodeBlock.BASIC_LATIN && !Character.isISOControl((char)c)) {\n      if (c == '\\\\') {\n        result=\"\\\\\\\\\";\n      }\n else       if (c == '\\'') {\n        result=\"\\\\'\";\n      }\n else {\n        result=Character.toString((char)c);\n      }\n    }\n else     if (c <= 0xFFFF) {\n      result=String.format(\"\\\\u%04X\",c);\n    }\n else {\n      result=String.format(\"\\\\u{%06X}\",c);\n    }\n  }\n  return '\\'' + result + '\\'';\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 121,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1084,
                        "startLineNumber": 37,
                        "startColumnNumber": 1,
                        "endLineNumber": 71,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "/** \n * Return a string representing the escaped char for code c.  E.g., If c has value 0x100, you will get \"\\\\u0100\".  ASCII gets the usual char (non-hex) representation.  Non-ASCII characters are spit out as \\\\uXXXX or \\\\u{XXXXXX} escapes.\n */\npublic static String getANTLRCharLiteralForChar(int c){\n  String result;\n  if (c < Lexer.MIN_CHAR_VALUE) {\n    result=\"<INVALID>\";\n  }\n else {\n    String charValueEscape=c < ANTLRLiteralCharValueEscape.length ? ANTLRLiteralCharValueEscape[c] : null;\n    if (charValueEscape != null) {\n      result=charValueEscape;\n    }\n else     if (Character.UnicodeBlock.of((char)c) == Character.UnicodeBlock.BASIC_LATIN && !Character.isISOControl((char)c)) {\n      if (c == '\\\\') {\n        result=\"\\\\\\\\\";\n      }\n else       if (c == '\\'') {\n        result=\"\\\\'\";\n      }\n else {\n        result=Character.toString((char)c);\n      }\n    }\n else     if (c <= 0xFFFF) {\n      result=String.format(\"\\\\u%04X\",c);\n    }\n else {\n      result=String.format(\"\\\\u{%06X}\",c);\n    }\n  }\n  return '\\'' + result + '\\'';\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 131,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                "nodePosition": {
                    "charLength": 73,
                    "startLineNumber": 52,
                    "startColumnNumber": 12,
                    "endLineNumber": 52,
                    "endColumnNumber": 85
                },
                "nodeContext": "Character.UnicodeBlock.of((char)c) == Character.UnicodeBlock.BASIC_LATIN",
                "nodeType": "InfixExpression",
                "astNodeNumber": 14,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "char"
        },
        {
            "nodeContext": "(char)c",
            "nodeType": "CastExpression",
            "nodePosition": {
                "charLength": 8,
                "startLineNumber": 53,
                "startColumnNumber": 29,
                "endLineNumber": 53,
                "endColumnNumber": 37
            },
            "astNodeNumber": 3,
            "astHeight": 2,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
                    "nodePosition": {
                        "charLength": 32,
                        "startLineNumber": 53,
                        "startColumnNumber": 6,
                        "endLineNumber": 53,
                        "endColumnNumber": 38
                    },
                    "nodeContext": "Character.isISOControl((char)c)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 33,
                        "startLineNumber": 53,
                        "startColumnNumber": 5,
                        "endLineNumber": 53,
                        "endColumnNumber": 38
                    },
                    "nodeContext": "!Character.isISOControl((char)c)",
                    "nodeType": "PrefixExpression",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 116,
                        "startLineNumber": 52,
                        "startColumnNumber": 12,
                        "endLineNumber": 53,
                        "endColumnNumber": 38
                    },
                    "nodeContext": "Character.UnicodeBlock.of((char)c) == Character.UnicodeBlock.BASIC_LATIN && !Character.isISOControl((char)c)",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 22,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 436,
                        "startLineNumber": 52,
                        "startColumnNumber": 8,
                        "endLineNumber": 68,
                        "endColumnNumber": 4
                    },
                    "nodeContext": "if (Character.UnicodeBlock.of((char)c) == Character.UnicodeBlock.BASIC_LATIN && !Character.isISOControl((char)c)) {\n  if (c == '\\\\') {\n    result=\"\\\\\\\\\";\n  }\n else   if (c == '\\'') {\n    result=\"\\\\'\";\n  }\n else {\n    result=Character.toString((char)c);\n  }\n}\n else if (c <= 0xFFFF) {\n  result=String.format(\"\\\\u%04X\",c);\n}\n else {\n  result=String.format(\"\\\\u{%06X}\",c);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 74,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 513,
                        "startLineNumber": 49,
                        "startColumnNumber": 3,
                        "endLineNumber": 68,
                        "endColumnNumber": 4
                    },
                    "nodeContext": "if (charValueEscape != null) {\n  result=charValueEscape;\n}\n else if (Character.UnicodeBlock.of((char)c) == Character.UnicodeBlock.BASIC_LATIN && !Character.isISOControl((char)c)) {\n  if (c == '\\\\') {\n    result=\"\\\\\\\\\";\n  }\n else   if (c == '\\'') {\n    result=\"\\\\'\";\n  }\n else {\n    result=Character.toString((char)c);\n  }\n}\n else if (c <= 0xFFFF) {\n  result=String.format(\"\\\\u%04X\",c);\n}\n else {\n  result=String.format(\"\\\\u{%06X}\",c);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 83,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 633,
                        "startLineNumber": 47,
                        "startColumnNumber": 7,
                        "endLineNumber": 69,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  String charValueEscape=c < ANTLRLiteralCharValueEscape.length ? ANTLRLiteralCharValueEscape[c] : null;\n  if (charValueEscape != null) {\n    result=charValueEscape;\n  }\n else   if (Character.UnicodeBlock.of((char)c) == Character.UnicodeBlock.BASIC_LATIN && !Character.isISOControl((char)c)) {\n    if (c == '\\\\') {\n      result=\"\\\\\\\\\";\n    }\n else     if (c == '\\'') {\n      result=\"\\\\'\";\n    }\n else {\n      result=Character.toString((char)c);\n    }\n  }\n else   if (c <= 0xFFFF) {\n    result=String.format(\"\\\\u%04X\",c);\n  }\n else {\n    result=String.format(\"\\\\u{%06X}\",c);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 99,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 706,
                        "startLineNumber": 44,
                        "startColumnNumber": 2,
                        "endLineNumber": 69,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (c < Lexer.MIN_CHAR_VALUE) {\n  result=\"<INVALID>\";\n}\n else {\n  String charValueEscape=c < ANTLRLiteralCharValueEscape.length ? ANTLRLiteralCharValueEscape[c] : null;\n  if (charValueEscape != null) {\n    result=charValueEscape;\n  }\n else   if (Character.UnicodeBlock.of((char)c) == Character.UnicodeBlock.BASIC_LATIN && !Character.isISOControl((char)c)) {\n    if (c == '\\\\') {\n      result=\"\\\\\\\\\";\n    }\n else     if (c == '\\'') {\n      result=\"\\\\'\";\n    }\n else {\n      result=Character.toString((char)c);\n    }\n  }\n else   if (c <= 0xFFFF) {\n    result=String.format(\"\\\\u%04X\",c);\n  }\n else {\n    result=String.format(\"\\\\u{%06X}\",c);\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 110,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 765,
                        "startLineNumber": 42,
                        "startColumnNumber": 56,
                        "endLineNumber": 71,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "{\n  String result;\n  if (c < Lexer.MIN_CHAR_VALUE) {\n    result=\"<INVALID>\";\n  }\n else {\n    String charValueEscape=c < ANTLRLiteralCharValueEscape.length ? ANTLRLiteralCharValueEscape[c] : null;\n    if (charValueEscape != null) {\n      result=charValueEscape;\n    }\n else     if (Character.UnicodeBlock.of((char)c) == Character.UnicodeBlock.BASIC_LATIN && !Character.isISOControl((char)c)) {\n      if (c == '\\\\') {\n        result=\"\\\\\\\\\";\n      }\n else       if (c == '\\'') {\n        result=\"\\\\'\";\n      }\n else {\n        result=Character.toString((char)c);\n      }\n    }\n else     if (c <= 0xFFFF) {\n      result=String.format(\"\\\\u%04X\",c);\n    }\n else {\n      result=String.format(\"\\\\u{%06X}\",c);\n    }\n  }\n  return '\\'' + result + '\\'';\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 121,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1084,
                        "startLineNumber": 37,
                        "startColumnNumber": 1,
                        "endLineNumber": 71,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "/** \n * Return a string representing the escaped char for code c.  E.g., If c has value 0x100, you will get \"\\\\u0100\".  ASCII gets the usual char (non-hex) representation.  Non-ASCII characters are spit out as \\\\uXXXX or \\\\u{XXXXXX} escapes.\n */\npublic static String getANTLRCharLiteralForChar(int c){\n  String result;\n  if (c < Lexer.MIN_CHAR_VALUE) {\n    result=\"<INVALID>\";\n  }\n else {\n    String charValueEscape=c < ANTLRLiteralCharValueEscape.length ? ANTLRLiteralCharValueEscape[c] : null;\n    if (charValueEscape != null) {\n      result=charValueEscape;\n    }\n else     if (Character.UnicodeBlock.of((char)c) == Character.UnicodeBlock.BASIC_LATIN && !Character.isISOControl((char)c)) {\n      if (c == '\\\\') {\n        result=\"\\\\\\\\\";\n      }\n else       if (c == '\\'') {\n        result=\"\\\\'\";\n      }\n else {\n        result=Character.toString((char)c);\n      }\n    }\n else     if (c <= 0xFFFF) {\n      result=String.format(\"\\\\u%04X\",c);\n    }\n else {\n      result=String.format(\"\\\\u{%06X}\",c);\n    }\n  }\n  return '\\'' + result + '\\'';\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 131,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                "nodePosition": {
                    "charLength": 33,
                    "startLineNumber": 53,
                    "startColumnNumber": 5,
                    "endLineNumber": 53,
                    "endColumnNumber": 38
                },
                "nodeContext": "!Character.isISOControl((char)c)",
                "nodeType": "PrefixExpression",
                "astNodeNumber": 7,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "char"
        },
        {
            "nodeContext": "(char)c",
            "nodeType": "CastExpression",
            "nodePosition": {
                "charLength": 8,
                "startLineNumber": 61,
                "startColumnNumber": 33,
                "endLineNumber": 61,
                "endColumnNumber": 41
            },
            "astNodeNumber": 3,
            "astHeight": 2,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 28,
                        "startLineNumber": 61,
                        "startColumnNumber": 14,
                        "endLineNumber": 61,
                        "endColumnNumber": 42
                    },
                    "nodeContext": "Character.toString((char)c)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 37,
                        "startLineNumber": 61,
                        "startColumnNumber": 5,
                        "endLineNumber": 61,
                        "endColumnNumber": 42
                    },
                    "nodeContext": "result=Character.toString((char)c)",
                    "nodeType": "Assignment",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 38,
                        "startLineNumber": 61,
                        "startColumnNumber": 5,
                        "endLineNumber": 61,
                        "endColumnNumber": 43
                    },
                    "nodeContext": "result=Character.toString((char)c);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 9,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 53,
                        "startLineNumber": 60,
                        "startColumnNumber": 9,
                        "endLineNumber": 62,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  result=Character.toString((char)c);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 10,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 109,
                        "startLineNumber": 57,
                        "startColumnNumber": 9,
                        "endLineNumber": 62,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "if (c == '\\'') {\n  result=\"\\\\'\";\n}\n else {\n  result=Character.toString((char)c);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 19,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 166,
                        "startLineNumber": 54,
                        "startColumnNumber": 4,
                        "endLineNumber": 62,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "if (c == '\\\\') {\n  result=\"\\\\\\\\\";\n}\n else if (c == '\\'') {\n  result=\"\\\\'\";\n}\n else {\n  result=Character.toString((char)c);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 28,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 179,
                        "startLineNumber": 53,
                        "startColumnNumber": 40,
                        "endLineNumber": 63,
                        "endColumnNumber": 4
                    },
                    "nodeContext": "{\n  if (c == '\\\\') {\n    result=\"\\\\\\\\\";\n  }\n else   if (c == '\\'') {\n    result=\"\\\\'\";\n  }\n else {\n    result=Character.toString((char)c);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 29,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 436,
                        "startLineNumber": 52,
                        "startColumnNumber": 8,
                        "endLineNumber": 68,
                        "endColumnNumber": 4
                    },
                    "nodeContext": "if (Character.UnicodeBlock.of((char)c) == Character.UnicodeBlock.BASIC_LATIN && !Character.isISOControl((char)c)) {\n  if (c == '\\\\') {\n    result=\"\\\\\\\\\";\n  }\n else   if (c == '\\'') {\n    result=\"\\\\'\";\n  }\n else {\n    result=Character.toString((char)c);\n  }\n}\n else if (c <= 0xFFFF) {\n  result=String.format(\"\\\\u%04X\",c);\n}\n else {\n  result=String.format(\"\\\\u{%06X}\",c);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 74,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 513,
                        "startLineNumber": 49,
                        "startColumnNumber": 3,
                        "endLineNumber": 68,
                        "endColumnNumber": 4
                    },
                    "nodeContext": "if (charValueEscape != null) {\n  result=charValueEscape;\n}\n else if (Character.UnicodeBlock.of((char)c) == Character.UnicodeBlock.BASIC_LATIN && !Character.isISOControl((char)c)) {\n  if (c == '\\\\') {\n    result=\"\\\\\\\\\";\n  }\n else   if (c == '\\'') {\n    result=\"\\\\'\";\n  }\n else {\n    result=Character.toString((char)c);\n  }\n}\n else if (c <= 0xFFFF) {\n  result=String.format(\"\\\\u%04X\",c);\n}\n else {\n  result=String.format(\"\\\\u{%06X}\",c);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 83,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 633,
                        "startLineNumber": 47,
                        "startColumnNumber": 7,
                        "endLineNumber": 69,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  String charValueEscape=c < ANTLRLiteralCharValueEscape.length ? ANTLRLiteralCharValueEscape[c] : null;\n  if (charValueEscape != null) {\n    result=charValueEscape;\n  }\n else   if (Character.UnicodeBlock.of((char)c) == Character.UnicodeBlock.BASIC_LATIN && !Character.isISOControl((char)c)) {\n    if (c == '\\\\') {\n      result=\"\\\\\\\\\";\n    }\n else     if (c == '\\'') {\n      result=\"\\\\'\";\n    }\n else {\n      result=Character.toString((char)c);\n    }\n  }\n else   if (c <= 0xFFFF) {\n    result=String.format(\"\\\\u%04X\",c);\n  }\n else {\n    result=String.format(\"\\\\u{%06X}\",c);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 99,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 706,
                        "startLineNumber": 44,
                        "startColumnNumber": 2,
                        "endLineNumber": 69,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (c < Lexer.MIN_CHAR_VALUE) {\n  result=\"<INVALID>\";\n}\n else {\n  String charValueEscape=c < ANTLRLiteralCharValueEscape.length ? ANTLRLiteralCharValueEscape[c] : null;\n  if (charValueEscape != null) {\n    result=charValueEscape;\n  }\n else   if (Character.UnicodeBlock.of((char)c) == Character.UnicodeBlock.BASIC_LATIN && !Character.isISOControl((char)c)) {\n    if (c == '\\\\') {\n      result=\"\\\\\\\\\";\n    }\n else     if (c == '\\'') {\n      result=\"\\\\'\";\n    }\n else {\n      result=Character.toString((char)c);\n    }\n  }\n else   if (c <= 0xFFFF) {\n    result=String.format(\"\\\\u%04X\",c);\n  }\n else {\n    result=String.format(\"\\\\u{%06X}\",c);\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 110,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 765,
                        "startLineNumber": 42,
                        "startColumnNumber": 56,
                        "endLineNumber": 71,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "{\n  String result;\n  if (c < Lexer.MIN_CHAR_VALUE) {\n    result=\"<INVALID>\";\n  }\n else {\n    String charValueEscape=c < ANTLRLiteralCharValueEscape.length ? ANTLRLiteralCharValueEscape[c] : null;\n    if (charValueEscape != null) {\n      result=charValueEscape;\n    }\n else     if (Character.UnicodeBlock.of((char)c) == Character.UnicodeBlock.BASIC_LATIN && !Character.isISOControl((char)c)) {\n      if (c == '\\\\') {\n        result=\"\\\\\\\\\";\n      }\n else       if (c == '\\'') {\n        result=\"\\\\'\";\n      }\n else {\n        result=Character.toString((char)c);\n      }\n    }\n else     if (c <= 0xFFFF) {\n      result=String.format(\"\\\\u%04X\",c);\n    }\n else {\n      result=String.format(\"\\\\u{%06X}\",c);\n    }\n  }\n  return '\\'' + result + '\\'';\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 121,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1084,
                        "startLineNumber": 37,
                        "startColumnNumber": 1,
                        "endLineNumber": 71,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "/** \n * Return a string representing the escaped char for code c.  E.g., If c has value 0x100, you will get \"\\\\u0100\".  ASCII gets the usual char (non-hex) representation.  Non-ASCII characters are spit out as \\\\uXXXX or \\\\u{XXXXXX} escapes.\n */\npublic static String getANTLRCharLiteralForChar(int c){\n  String result;\n  if (c < Lexer.MIN_CHAR_VALUE) {\n    result=\"<INVALID>\";\n  }\n else {\n    String charValueEscape=c < ANTLRLiteralCharValueEscape.length ? ANTLRLiteralCharValueEscape[c] : null;\n    if (charValueEscape != null) {\n      result=charValueEscape;\n    }\n else     if (Character.UnicodeBlock.of((char)c) == Character.UnicodeBlock.BASIC_LATIN && !Character.isISOControl((char)c)) {\n      if (c == '\\\\') {\n        result=\"\\\\\\\\\";\n      }\n else       if (c == '\\'') {\n        result=\"\\\\'\";\n      }\n else {\n        result=Character.toString((char)c);\n      }\n    }\n else     if (c <= 0xFFFF) {\n      result=String.format(\"\\\\u%04X\",c);\n    }\n else {\n      result=String.format(\"\\\\u{%06X}\",c);\n    }\n  }\n  return '\\'' + result + '\\'';\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 131,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 38,
                    "startLineNumber": 61,
                    "startColumnNumber": 5,
                    "endLineNumber": 61,
                    "endColumnNumber": 43
                },
                "nodeContext": "result=Character.toString((char)c);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 9,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "char"
        }
    ],
    "positionList": [
        {
            "charLength": 8,
            "startLineNumber": 52,
            "startColumnNumber": 38,
            "endLineNumber": 52,
            "endColumnNumber": 46
        },
        {
            "charLength": 8,
            "startLineNumber": 53,
            "startColumnNumber": 29,
            "endLineNumber": 53,
            "endColumnNumber": 37
        },
        {
            "charLength": 8,
            "startLineNumber": 61,
            "startColumnNumber": 33,
            "endLineNumber": 61,
            "endColumnNumber": 41
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 7
        }
    ]
}