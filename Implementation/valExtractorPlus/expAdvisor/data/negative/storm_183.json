{
    "id": 183,
    "expression": "mapper",
    "projectName": "storm",
    "commitID": "4986373c5ca8d8e3d6903dd479c4442451c49655",
    "filePath": "external/storm-kafka-client/src/main/java/org/apache/storm/kafka/trident/TridentKafkaState.java",
    "occurrences": 3,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 0,
    "expressionList": [
        {
            "nodeContext": "mapper",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 6,
                "startLineNumber": 84,
                "startColumnNumber": 28,
                "endLineNumber": 84,
                "endColumnNumber": 34
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
                    "nodePosition": {
                        "charLength": 29,
                        "startLineNumber": 84,
                        "startColumnNumber": 28,
                        "endLineNumber": 84,
                        "endColumnNumber": 57
                    },
                    "nodeContext": "mapper.getKeyFromTuple(tuple)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 119,
                        "startLineNumber": 83,
                        "startColumnNumber": 66,
                        "endLineNumber": 84,
                        "endColumnNumber": 93
                    },
                    "nodeContext": "new ProducerRecord(topic,mapper.getKeyFromTuple(tuple),mapper.getMessageFromTuple(tuple))",
                    "nodeType": "ClassInstanceCreation",
                    "astNodeNumber": 12,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 134,
                        "startLineNumber": 83,
                        "startColumnNumber": 52,
                        "endLineNumber": 84,
                        "endColumnNumber": 94
                    },
                    "nodeContext": "producer.send(new ProducerRecord(topic,mapper.getKeyFromTuple(tuple),mapper.getMessageFromTuple(tuple)))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 15,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 143,
                        "startLineNumber": 83,
                        "startColumnNumber": 43,
                        "endLineNumber": 84,
                        "endColumnNumber": 94
                    },
                    "nodeContext": "result=producer.send(new ProducerRecord(topic,mapper.getKeyFromTuple(tuple),mapper.getMessageFromTuple(tuple)))",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 17,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 167,
                        "startLineNumber": 83,
                        "startColumnNumber": 20,
                        "endLineNumber": 84,
                        "endColumnNumber": 95
                    },
                    "nodeContext": "Future<RecordMetadata> result=producer.send(new ProducerRecord(topic,mapper.getKeyFromTuple(tuple),mapper.getMessageFromTuple(tuple)));\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 23,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 248,
                        "startLineNumber": 82,
                        "startColumnNumber": 34,
                        "endLineNumber": 86,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  Future<RecordMetadata> result=producer.send(new ProducerRecord(topic,mapper.getKeyFromTuple(tuple),mapper.getMessageFromTuple(tuple)));\n  futures.add(result);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 29,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 408,
                        "startLineNumber": 82,
                        "startColumnNumber": 16,
                        "endLineNumber": 88,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (topic != null) {\n  Future<RecordMetadata> result=producer.send(new ProducerRecord(topic,mapper.getKeyFromTuple(tuple),mapper.getMessageFromTuple(tuple)));\n  futures.add(result);\n}\n else {\n  LOG.warn(\"skipping key = \" + mapper.getKeyFromTuple(tuple) + \", topic selector returned null.\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 45,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 496,
                        "startLineNumber": 79,
                        "startColumnNumber": 46,
                        "endLineNumber": 89,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  topic=topicSelector.getTopic(tuple);\n  if (topic != null) {\n    Future<RecordMetadata> result=producer.send(new ProducerRecord(topic,mapper.getKeyFromTuple(tuple),mapper.getMessageFromTuple(tuple)));\n    futures.add(result);\n  }\n else {\n    LOG.warn(\"skipping key = \" + mapper.getKeyFromTuple(tuple) + \", topic selector returned null.\");\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 53,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 530,
                        "startLineNumber": 79,
                        "startColumnNumber": 12,
                        "endLineNumber": 89,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (TridentTuple tuple : tuples) {\n  topic=topicSelector.getTopic(tuple);\n  if (topic != null) {\n    Future<RecordMetadata> result=producer.send(new ProducerRecord(topic,mapper.getKeyFromTuple(tuple),mapper.getMessageFromTuple(tuple)));\n    futures.add(result);\n  }\n else {\n    LOG.warn(\"skipping key = \" + mapper.getKeyFromTuple(tuple) + \", topic selector returned null.\");\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 59,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 1441,
                        "startLineNumber": 77,
                        "startColumnNumber": 12,
                        "endLineNumber": 109,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  List<Future<RecordMetadata>> futures=new ArrayList<>(tuples.size());\n  for (  TridentTuple tuple : tuples) {\n    topic=topicSelector.getTopic(tuple);\n    if (topic != null) {\n      Future<RecordMetadata> result=producer.send(new ProducerRecord(topic,mapper.getKeyFromTuple(tuple),mapper.getMessageFromTuple(tuple)));\n      futures.add(result);\n    }\n else {\n      LOG.warn(\"skipping key = \" + mapper.getKeyFromTuple(tuple) + \", topic selector returned null.\");\n    }\n  }\n  List<ExecutionException> exceptions=new ArrayList<>(futures.size());\n  for (  Future<RecordMetadata> future : futures) {\n    try {\n      future.get();\n    }\n catch (    ExecutionException e) {\n      exceptions.add(e);\n    }\n  }\n  if (exceptions.size() > 0) {\n    String errorMsg=\"Could not retrieve result for messages \" + tuples + \" from topic = \"+ topic+ \" because of the following exceptions: \\n\";\n    for (    ExecutionException exception : exceptions) {\n      errorMsg=errorMsg + exception.getMessage() + \"\\n\";\n    }\n    LOG.error(errorMsg);\n    throw new FailedException(errorMsg);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 164,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1659,
                        "startLineNumber": 77,
                        "startColumnNumber": 8,
                        "endLineNumber": 113,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  List<Future<RecordMetadata>> futures=new ArrayList<>(tuples.size());\n  for (  TridentTuple tuple : tuples) {\n    topic=topicSelector.getTopic(tuple);\n    if (topic != null) {\n      Future<RecordMetadata> result=producer.send(new ProducerRecord(topic,mapper.getKeyFromTuple(tuple),mapper.getMessageFromTuple(tuple)));\n      futures.add(result);\n    }\n else {\n      LOG.warn(\"skipping key = \" + mapper.getKeyFromTuple(tuple) + \", topic selector returned null.\");\n    }\n  }\n  List<ExecutionException> exceptions=new ArrayList<>(futures.size());\n  for (  Future<RecordMetadata> future : futures) {\n    try {\n      future.get();\n    }\n catch (    ExecutionException e) {\n      exceptions.add(e);\n    }\n  }\n  if (exceptions.size() > 0) {\n    String errorMsg=\"Could not retrieve result for messages \" + tuples + \" from topic = \"+ topic+ \" because of the following exceptions: \\n\";\n    for (    ExecutionException exception : exceptions) {\n      errorMsg=errorMsg + exception.getMessage() + \"\\n\";\n    }\n    LOG.error(errorMsg);\n    throw new FailedException(errorMsg);\n  }\n}\n catch (Exception ex) {\n  String errorMsg=\"Could not send messages \" + tuples + \" to topic = \"+ topic;\n  LOG.warn(errorMsg,ex);\n  throw new FailedException(errorMsg,ex);\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 193,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1704,
                        "startLineNumber": 75,
                        "startColumnNumber": 83,
                        "endLineNumber": 114,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  String topic=null;\n  try {\n    List<Future<RecordMetadata>> futures=new ArrayList<>(tuples.size());\n    for (    TridentTuple tuple : tuples) {\n      topic=topicSelector.getTopic(tuple);\n      if (topic != null) {\n        Future<RecordMetadata> result=producer.send(new ProducerRecord(topic,mapper.getKeyFromTuple(tuple),mapper.getMessageFromTuple(tuple)));\n        futures.add(result);\n      }\n else {\n        LOG.warn(\"skipping key = \" + mapper.getKeyFromTuple(tuple) + \", topic selector returned null.\");\n      }\n    }\n    List<ExecutionException> exceptions=new ArrayList<>(futures.size());\n    for (    Future<RecordMetadata> future : futures) {\n      try {\n        future.get();\n      }\n catch (      ExecutionException e) {\n        exceptions.add(e);\n      }\n    }\n    if (exceptions.size() > 0) {\n      String errorMsg=\"Could not retrieve result for messages \" + tuples + \" from topic = \"+ topic+ \" because of the following exceptions: \\n\";\n      for (      ExecutionException exception : exceptions) {\n        errorMsg=errorMsg + exception.getMessage() + \"\\n\";\n      }\n      LOG.error(errorMsg);\n      throw new FailedException(errorMsg);\n    }\n  }\n catch (  Exception ex) {\n    String errorMsg=\"Could not send messages \" + tuples + \" to topic = \"+ topic;\n    LOG.warn(errorMsg,ex);\n    throw new FailedException(errorMsg,ex);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 200,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1783,
                        "startLineNumber": 75,
                        "startColumnNumber": 4,
                        "endLineNumber": 114,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "public void updateState(List<TridentTuple> tuples,TridentCollector collector){\n  String topic=null;\n  try {\n    List<Future<RecordMetadata>> futures=new ArrayList<>(tuples.size());\n    for (    TridentTuple tuple : tuples) {\n      topic=topicSelector.getTopic(tuple);\n      if (topic != null) {\n        Future<RecordMetadata> result=producer.send(new ProducerRecord(topic,mapper.getKeyFromTuple(tuple),mapper.getMessageFromTuple(tuple)));\n        futures.add(result);\n      }\n else {\n        LOG.warn(\"skipping key = \" + mapper.getKeyFromTuple(tuple) + \", topic selector returned null.\");\n      }\n    }\n    List<ExecutionException> exceptions=new ArrayList<>(futures.size());\n    for (    Future<RecordMetadata> future : futures) {\n      try {\n        future.get();\n      }\n catch (      ExecutionException e) {\n        exceptions.add(e);\n      }\n    }\n    if (exceptions.size() > 0) {\n      String errorMsg=\"Could not retrieve result for messages \" + tuples + \" from topic = \"+ topic+ \" because of the following exceptions: \\n\";\n      for (      ExecutionException exception : exceptions) {\n        errorMsg=errorMsg + exception.getMessage() + \"\\n\";\n      }\n      LOG.error(errorMsg);\n      throw new FailedException(errorMsg);\n    }\n  }\n catch (  Exception ex) {\n    String errorMsg=\"Could not send messages \" + tuples + \" to topic = \"+ topic;\n    LOG.warn(errorMsg,ex);\n    throw new FailedException(errorMsg,ex);\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 215,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
                "nodePosition": {
                    "charLength": 29,
                    "startLineNumber": 84,
                    "startColumnNumber": 28,
                    "endLineNumber": 84,
                    "endColumnNumber": 57
                },
                "nodeContext": "mapper.getKeyFromTuple(tuple)",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 4,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "org.apache.storm.kafka.trident.mapper.TridentTupleToKafkaMapper"
        },
        {
            "nodeContext": "mapper",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 6,
                "startLineNumber": 84,
                "startColumnNumber": 59,
                "endLineNumber": 84,
                "endColumnNumber": 65
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
                    "nodePosition": {
                        "charLength": 33,
                        "startLineNumber": 84,
                        "startColumnNumber": 59,
                        "endLineNumber": 84,
                        "endColumnNumber": 92
                    },
                    "nodeContext": "mapper.getMessageFromTuple(tuple)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 119,
                        "startLineNumber": 83,
                        "startColumnNumber": 66,
                        "endLineNumber": 84,
                        "endColumnNumber": 93
                    },
                    "nodeContext": "new ProducerRecord(topic,mapper.getKeyFromTuple(tuple),mapper.getMessageFromTuple(tuple))",
                    "nodeType": "ClassInstanceCreation",
                    "astNodeNumber": 12,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 134,
                        "startLineNumber": 83,
                        "startColumnNumber": 52,
                        "endLineNumber": 84,
                        "endColumnNumber": 94
                    },
                    "nodeContext": "producer.send(new ProducerRecord(topic,mapper.getKeyFromTuple(tuple),mapper.getMessageFromTuple(tuple)))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 15,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 143,
                        "startLineNumber": 83,
                        "startColumnNumber": 43,
                        "endLineNumber": 84,
                        "endColumnNumber": 94
                    },
                    "nodeContext": "result=producer.send(new ProducerRecord(topic,mapper.getKeyFromTuple(tuple),mapper.getMessageFromTuple(tuple)))",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 17,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 167,
                        "startLineNumber": 83,
                        "startColumnNumber": 20,
                        "endLineNumber": 84,
                        "endColumnNumber": 95
                    },
                    "nodeContext": "Future<RecordMetadata> result=producer.send(new ProducerRecord(topic,mapper.getKeyFromTuple(tuple),mapper.getMessageFromTuple(tuple)));\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 23,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 248,
                        "startLineNumber": 82,
                        "startColumnNumber": 34,
                        "endLineNumber": 86,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  Future<RecordMetadata> result=producer.send(new ProducerRecord(topic,mapper.getKeyFromTuple(tuple),mapper.getMessageFromTuple(tuple)));\n  futures.add(result);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 29,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 408,
                        "startLineNumber": 82,
                        "startColumnNumber": 16,
                        "endLineNumber": 88,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (topic != null) {\n  Future<RecordMetadata> result=producer.send(new ProducerRecord(topic,mapper.getKeyFromTuple(tuple),mapper.getMessageFromTuple(tuple)));\n  futures.add(result);\n}\n else {\n  LOG.warn(\"skipping key = \" + mapper.getKeyFromTuple(tuple) + \", topic selector returned null.\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 45,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 496,
                        "startLineNumber": 79,
                        "startColumnNumber": 46,
                        "endLineNumber": 89,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  topic=topicSelector.getTopic(tuple);\n  if (topic != null) {\n    Future<RecordMetadata> result=producer.send(new ProducerRecord(topic,mapper.getKeyFromTuple(tuple),mapper.getMessageFromTuple(tuple)));\n    futures.add(result);\n  }\n else {\n    LOG.warn(\"skipping key = \" + mapper.getKeyFromTuple(tuple) + \", topic selector returned null.\");\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 53,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 530,
                        "startLineNumber": 79,
                        "startColumnNumber": 12,
                        "endLineNumber": 89,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (TridentTuple tuple : tuples) {\n  topic=topicSelector.getTopic(tuple);\n  if (topic != null) {\n    Future<RecordMetadata> result=producer.send(new ProducerRecord(topic,mapper.getKeyFromTuple(tuple),mapper.getMessageFromTuple(tuple)));\n    futures.add(result);\n  }\n else {\n    LOG.warn(\"skipping key = \" + mapper.getKeyFromTuple(tuple) + \", topic selector returned null.\");\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 59,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 1441,
                        "startLineNumber": 77,
                        "startColumnNumber": 12,
                        "endLineNumber": 109,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  List<Future<RecordMetadata>> futures=new ArrayList<>(tuples.size());\n  for (  TridentTuple tuple : tuples) {\n    topic=topicSelector.getTopic(tuple);\n    if (topic != null) {\n      Future<RecordMetadata> result=producer.send(new ProducerRecord(topic,mapper.getKeyFromTuple(tuple),mapper.getMessageFromTuple(tuple)));\n      futures.add(result);\n    }\n else {\n      LOG.warn(\"skipping key = \" + mapper.getKeyFromTuple(tuple) + \", topic selector returned null.\");\n    }\n  }\n  List<ExecutionException> exceptions=new ArrayList<>(futures.size());\n  for (  Future<RecordMetadata> future : futures) {\n    try {\n      future.get();\n    }\n catch (    ExecutionException e) {\n      exceptions.add(e);\n    }\n  }\n  if (exceptions.size() > 0) {\n    String errorMsg=\"Could not retrieve result for messages \" + tuples + \" from topic = \"+ topic+ \" because of the following exceptions: \\n\";\n    for (    ExecutionException exception : exceptions) {\n      errorMsg=errorMsg + exception.getMessage() + \"\\n\";\n    }\n    LOG.error(errorMsg);\n    throw new FailedException(errorMsg);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 164,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1659,
                        "startLineNumber": 77,
                        "startColumnNumber": 8,
                        "endLineNumber": 113,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  List<Future<RecordMetadata>> futures=new ArrayList<>(tuples.size());\n  for (  TridentTuple tuple : tuples) {\n    topic=topicSelector.getTopic(tuple);\n    if (topic != null) {\n      Future<RecordMetadata> result=producer.send(new ProducerRecord(topic,mapper.getKeyFromTuple(tuple),mapper.getMessageFromTuple(tuple)));\n      futures.add(result);\n    }\n else {\n      LOG.warn(\"skipping key = \" + mapper.getKeyFromTuple(tuple) + \", topic selector returned null.\");\n    }\n  }\n  List<ExecutionException> exceptions=new ArrayList<>(futures.size());\n  for (  Future<RecordMetadata> future : futures) {\n    try {\n      future.get();\n    }\n catch (    ExecutionException e) {\n      exceptions.add(e);\n    }\n  }\n  if (exceptions.size() > 0) {\n    String errorMsg=\"Could not retrieve result for messages \" + tuples + \" from topic = \"+ topic+ \" because of the following exceptions: \\n\";\n    for (    ExecutionException exception : exceptions) {\n      errorMsg=errorMsg + exception.getMessage() + \"\\n\";\n    }\n    LOG.error(errorMsg);\n    throw new FailedException(errorMsg);\n  }\n}\n catch (Exception ex) {\n  String errorMsg=\"Could not send messages \" + tuples + \" to topic = \"+ topic;\n  LOG.warn(errorMsg,ex);\n  throw new FailedException(errorMsg,ex);\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 193,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1704,
                        "startLineNumber": 75,
                        "startColumnNumber": 83,
                        "endLineNumber": 114,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  String topic=null;\n  try {\n    List<Future<RecordMetadata>> futures=new ArrayList<>(tuples.size());\n    for (    TridentTuple tuple : tuples) {\n      topic=topicSelector.getTopic(tuple);\n      if (topic != null) {\n        Future<RecordMetadata> result=producer.send(new ProducerRecord(topic,mapper.getKeyFromTuple(tuple),mapper.getMessageFromTuple(tuple)));\n        futures.add(result);\n      }\n else {\n        LOG.warn(\"skipping key = \" + mapper.getKeyFromTuple(tuple) + \", topic selector returned null.\");\n      }\n    }\n    List<ExecutionException> exceptions=new ArrayList<>(futures.size());\n    for (    Future<RecordMetadata> future : futures) {\n      try {\n        future.get();\n      }\n catch (      ExecutionException e) {\n        exceptions.add(e);\n      }\n    }\n    if (exceptions.size() > 0) {\n      String errorMsg=\"Could not retrieve result for messages \" + tuples + \" from topic = \"+ topic+ \" because of the following exceptions: \\n\";\n      for (      ExecutionException exception : exceptions) {\n        errorMsg=errorMsg + exception.getMessage() + \"\\n\";\n      }\n      LOG.error(errorMsg);\n      throw new FailedException(errorMsg);\n    }\n  }\n catch (  Exception ex) {\n    String errorMsg=\"Could not send messages \" + tuples + \" to topic = \"+ topic;\n    LOG.warn(errorMsg,ex);\n    throw new FailedException(errorMsg,ex);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 200,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1783,
                        "startLineNumber": 75,
                        "startColumnNumber": 4,
                        "endLineNumber": 114,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "public void updateState(List<TridentTuple> tuples,TridentCollector collector){\n  String topic=null;\n  try {\n    List<Future<RecordMetadata>> futures=new ArrayList<>(tuples.size());\n    for (    TridentTuple tuple : tuples) {\n      topic=topicSelector.getTopic(tuple);\n      if (topic != null) {\n        Future<RecordMetadata> result=producer.send(new ProducerRecord(topic,mapper.getKeyFromTuple(tuple),mapper.getMessageFromTuple(tuple)));\n        futures.add(result);\n      }\n else {\n        LOG.warn(\"skipping key = \" + mapper.getKeyFromTuple(tuple) + \", topic selector returned null.\");\n      }\n    }\n    List<ExecutionException> exceptions=new ArrayList<>(futures.size());\n    for (    Future<RecordMetadata> future : futures) {\n      try {\n        future.get();\n      }\n catch (      ExecutionException e) {\n        exceptions.add(e);\n      }\n    }\n    if (exceptions.size() > 0) {\n      String errorMsg=\"Could not retrieve result for messages \" + tuples + \" from topic = \"+ topic+ \" because of the following exceptions: \\n\";\n      for (      ExecutionException exception : exceptions) {\n        errorMsg=errorMsg + exception.getMessage() + \"\\n\";\n      }\n      LOG.error(errorMsg);\n      throw new FailedException(errorMsg);\n    }\n  }\n catch (  Exception ex) {\n    String errorMsg=\"Could not send messages \" + tuples + \" to topic = \"+ topic;\n    LOG.warn(errorMsg,ex);\n    throw new FailedException(errorMsg,ex);\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 215,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
                "nodePosition": {
                    "charLength": 33,
                    "startLineNumber": 84,
                    "startColumnNumber": 59,
                    "endLineNumber": 84,
                    "endColumnNumber": 92
                },
                "nodeContext": "mapper.getMessageFromTuple(tuple)",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 4,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "org.apache.storm.kafka.trident.mapper.TridentTupleToKafkaMapper"
        },
        {
            "nodeContext": "mapper",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 6,
                "startLineNumber": 87,
                "startColumnNumber": 49,
                "endLineNumber": 87,
                "endColumnNumber": 55
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 29,
                        "startLineNumber": 87,
                        "startColumnNumber": 49,
                        "endLineNumber": 87,
                        "endColumnNumber": 78
                    },
                    "nodeContext": "mapper.getKeyFromTuple(tuple)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 85,
                        "startLineNumber": 87,
                        "startColumnNumber": 29,
                        "endLineNumber": 87,
                        "endColumnNumber": 114
                    },
                    "nodeContext": "\"skipping key = \" + mapper.getKeyFromTuple(tuple) + \", topic selector returned null.\"",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 95,
                        "startLineNumber": 87,
                        "startColumnNumber": 20,
                        "endLineNumber": 87,
                        "endColumnNumber": 115
                    },
                    "nodeContext": "LOG.warn(\"skipping key = \" + mapper.getKeyFromTuple(tuple) + \", topic selector returned null.\")",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 10,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 96,
                        "startLineNumber": 87,
                        "startColumnNumber": 20,
                        "endLineNumber": 87,
                        "endColumnNumber": 116
                    },
                    "nodeContext": "LOG.warn(\"skipping key = \" + mapper.getKeyFromTuple(tuple) + \", topic selector returned null.\");\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 11,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 136,
                        "startLineNumber": 86,
                        "startColumnNumber": 23,
                        "endLineNumber": 88,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  LOG.warn(\"skipping key = \" + mapper.getKeyFromTuple(tuple) + \", topic selector returned null.\");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 12,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 408,
                        "startLineNumber": 82,
                        "startColumnNumber": 16,
                        "endLineNumber": 88,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (topic != null) {\n  Future<RecordMetadata> result=producer.send(new ProducerRecord(topic,mapper.getKeyFromTuple(tuple),mapper.getMessageFromTuple(tuple)));\n  futures.add(result);\n}\n else {\n  LOG.warn(\"skipping key = \" + mapper.getKeyFromTuple(tuple) + \", topic selector returned null.\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 45,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 496,
                        "startLineNumber": 79,
                        "startColumnNumber": 46,
                        "endLineNumber": 89,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  topic=topicSelector.getTopic(tuple);\n  if (topic != null) {\n    Future<RecordMetadata> result=producer.send(new ProducerRecord(topic,mapper.getKeyFromTuple(tuple),mapper.getMessageFromTuple(tuple)));\n    futures.add(result);\n  }\n else {\n    LOG.warn(\"skipping key = \" + mapper.getKeyFromTuple(tuple) + \", topic selector returned null.\");\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 53,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 530,
                        "startLineNumber": 79,
                        "startColumnNumber": 12,
                        "endLineNumber": 89,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (TridentTuple tuple : tuples) {\n  topic=topicSelector.getTopic(tuple);\n  if (topic != null) {\n    Future<RecordMetadata> result=producer.send(new ProducerRecord(topic,mapper.getKeyFromTuple(tuple),mapper.getMessageFromTuple(tuple)));\n    futures.add(result);\n  }\n else {\n    LOG.warn(\"skipping key = \" + mapper.getKeyFromTuple(tuple) + \", topic selector returned null.\");\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 59,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 1441,
                        "startLineNumber": 77,
                        "startColumnNumber": 12,
                        "endLineNumber": 109,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  List<Future<RecordMetadata>> futures=new ArrayList<>(tuples.size());\n  for (  TridentTuple tuple : tuples) {\n    topic=topicSelector.getTopic(tuple);\n    if (topic != null) {\n      Future<RecordMetadata> result=producer.send(new ProducerRecord(topic,mapper.getKeyFromTuple(tuple),mapper.getMessageFromTuple(tuple)));\n      futures.add(result);\n    }\n else {\n      LOG.warn(\"skipping key = \" + mapper.getKeyFromTuple(tuple) + \", topic selector returned null.\");\n    }\n  }\n  List<ExecutionException> exceptions=new ArrayList<>(futures.size());\n  for (  Future<RecordMetadata> future : futures) {\n    try {\n      future.get();\n    }\n catch (    ExecutionException e) {\n      exceptions.add(e);\n    }\n  }\n  if (exceptions.size() > 0) {\n    String errorMsg=\"Could not retrieve result for messages \" + tuples + \" from topic = \"+ topic+ \" because of the following exceptions: \\n\";\n    for (    ExecutionException exception : exceptions) {\n      errorMsg=errorMsg + exception.getMessage() + \"\\n\";\n    }\n    LOG.error(errorMsg);\n    throw new FailedException(errorMsg);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 164,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1659,
                        "startLineNumber": 77,
                        "startColumnNumber": 8,
                        "endLineNumber": 113,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  List<Future<RecordMetadata>> futures=new ArrayList<>(tuples.size());\n  for (  TridentTuple tuple : tuples) {\n    topic=topicSelector.getTopic(tuple);\n    if (topic != null) {\n      Future<RecordMetadata> result=producer.send(new ProducerRecord(topic,mapper.getKeyFromTuple(tuple),mapper.getMessageFromTuple(tuple)));\n      futures.add(result);\n    }\n else {\n      LOG.warn(\"skipping key = \" + mapper.getKeyFromTuple(tuple) + \", topic selector returned null.\");\n    }\n  }\n  List<ExecutionException> exceptions=new ArrayList<>(futures.size());\n  for (  Future<RecordMetadata> future : futures) {\n    try {\n      future.get();\n    }\n catch (    ExecutionException e) {\n      exceptions.add(e);\n    }\n  }\n  if (exceptions.size() > 0) {\n    String errorMsg=\"Could not retrieve result for messages \" + tuples + \" from topic = \"+ topic+ \" because of the following exceptions: \\n\";\n    for (    ExecutionException exception : exceptions) {\n      errorMsg=errorMsg + exception.getMessage() + \"\\n\";\n    }\n    LOG.error(errorMsg);\n    throw new FailedException(errorMsg);\n  }\n}\n catch (Exception ex) {\n  String errorMsg=\"Could not send messages \" + tuples + \" to topic = \"+ topic;\n  LOG.warn(errorMsg,ex);\n  throw new FailedException(errorMsg,ex);\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 193,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1704,
                        "startLineNumber": 75,
                        "startColumnNumber": 83,
                        "endLineNumber": 114,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  String topic=null;\n  try {\n    List<Future<RecordMetadata>> futures=new ArrayList<>(tuples.size());\n    for (    TridentTuple tuple : tuples) {\n      topic=topicSelector.getTopic(tuple);\n      if (topic != null) {\n        Future<RecordMetadata> result=producer.send(new ProducerRecord(topic,mapper.getKeyFromTuple(tuple),mapper.getMessageFromTuple(tuple)));\n        futures.add(result);\n      }\n else {\n        LOG.warn(\"skipping key = \" + mapper.getKeyFromTuple(tuple) + \", topic selector returned null.\");\n      }\n    }\n    List<ExecutionException> exceptions=new ArrayList<>(futures.size());\n    for (    Future<RecordMetadata> future : futures) {\n      try {\n        future.get();\n      }\n catch (      ExecutionException e) {\n        exceptions.add(e);\n      }\n    }\n    if (exceptions.size() > 0) {\n      String errorMsg=\"Could not retrieve result for messages \" + tuples + \" from topic = \"+ topic+ \" because of the following exceptions: \\n\";\n      for (      ExecutionException exception : exceptions) {\n        errorMsg=errorMsg + exception.getMessage() + \"\\n\";\n      }\n      LOG.error(errorMsg);\n      throw new FailedException(errorMsg);\n    }\n  }\n catch (  Exception ex) {\n    String errorMsg=\"Could not send messages \" + tuples + \" to topic = \"+ topic;\n    LOG.warn(errorMsg,ex);\n    throw new FailedException(errorMsg,ex);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 200,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1783,
                        "startLineNumber": 75,
                        "startColumnNumber": 4,
                        "endLineNumber": 114,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "public void updateState(List<TridentTuple> tuples,TridentCollector collector){\n  String topic=null;\n  try {\n    List<Future<RecordMetadata>> futures=new ArrayList<>(tuples.size());\n    for (    TridentTuple tuple : tuples) {\n      topic=topicSelector.getTopic(tuple);\n      if (topic != null) {\n        Future<RecordMetadata> result=producer.send(new ProducerRecord(topic,mapper.getKeyFromTuple(tuple),mapper.getMessageFromTuple(tuple)));\n        futures.add(result);\n      }\n else {\n        LOG.warn(\"skipping key = \" + mapper.getKeyFromTuple(tuple) + \", topic selector returned null.\");\n      }\n    }\n    List<ExecutionException> exceptions=new ArrayList<>(futures.size());\n    for (    Future<RecordMetadata> future : futures) {\n      try {\n        future.get();\n      }\n catch (      ExecutionException e) {\n        exceptions.add(e);\n      }\n    }\n    if (exceptions.size() > 0) {\n      String errorMsg=\"Could not retrieve result for messages \" + tuples + \" from topic = \"+ topic+ \" because of the following exceptions: \\n\";\n      for (      ExecutionException exception : exceptions) {\n        errorMsg=errorMsg + exception.getMessage() + \"\\n\";\n      }\n      LOG.error(errorMsg);\n      throw new FailedException(errorMsg);\n    }\n  }\n catch (  Exception ex) {\n    String errorMsg=\"Could not send messages \" + tuples + \" to topic = \"+ topic;\n    LOG.warn(errorMsg,ex);\n    throw new FailedException(errorMsg,ex);\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 215,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 96,
                    "startLineNumber": 87,
                    "startColumnNumber": 20,
                    "endLineNumber": 87,
                    "endColumnNumber": 116
                },
                "nodeContext": "LOG.warn(\"skipping key = \" + mapper.getKeyFromTuple(tuple) + \", topic selector returned null.\");\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 11,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "org.apache.storm.kafka.trident.mapper.TridentTupleToKafkaMapper"
        }
    ],
    "positionList": [
        {
            "charLength": 6,
            "startLineNumber": 84,
            "startColumnNumber": 28,
            "endLineNumber": 84,
            "endColumnNumber": 34
        },
        {
            "charLength": 6,
            "startLineNumber": 84,
            "startColumnNumber": 59,
            "endLineNumber": 84,
            "endColumnNumber": 65
        },
        {
            "charLength": 6,
            "startLineNumber": 87,
            "startColumnNumber": 49,
            "endLineNumber": 87,
            "endColumnNumber": 55
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 1
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 1
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 5
        }
    ]
}