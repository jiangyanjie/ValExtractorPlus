{
    "id": 6816,
    "expression": "NaN",
    "projectName": "commons-math",
    "commitID": "71fb92ebd4599c9e13d61f8e56cf1d9e473bb7f6",
    "filePath": "src/java/org/apache/commons/math/complex/Complex.java",
    "occurrences": 1,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 0,
    "expressionList": [
        {
            "nodeContext": "NaN",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 109,
                "startColumnNumber": 19,
                "endLineNumber": 109,
                "endColumnNumber": 22
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 11,
                        "startLineNumber": 109,
                        "startColumnNumber": 12,
                        "endLineNumber": 109,
                        "endColumnNumber": 23
                    },
                    "nodeContext": "return NaN;\n",
                    "nodeType": "ReturnStatement",
                    "astNodeNumber": 2,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 35,
                        "startLineNumber": 108,
                        "startColumnNumber": 36,
                        "endLineNumber": 110,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  return NaN;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 3,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 63,
                        "startLineNumber": 108,
                        "startColumnNumber": 8,
                        "endLineNumber": 110,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (isNaN() || rhs.isNaN()) {\n  return NaN;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 10,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 649,
                        "startLineNumber": 107,
                        "startColumnNumber": 39,
                        "endLineNumber": 123,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (isNaN() || rhs.isNaN()) {\n    return NaN;\n  }\n  if (Math.abs(rhs.getReal()) < Math.abs(rhs.getImaginary())) {\n    double q=rhs.getReal() / rhs.getImaginary();\n    double d=(rhs.getReal() * q) + rhs.getImaginary();\n    return new Complex(((real * q) + imaginary) / d,((imaginary * q) - real) / d);\n  }\n else {\n    double q=rhs.getImaginary() / rhs.getReal();\n    double d=(rhs.getImaginary() * q) + rhs.getReal();\n    return new Complex(((imaginary * q) + real) / d,(imaginary - (real * q)) / d);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 121,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 868,
                        "startLineNumber": 102,
                        "startColumnNumber": 4,
                        "endLineNumber": 123,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Return the quotient of this complex number and the given complex number.\n * @param rhs the other complex number.\n * @return the complex number quotient.\n */\npublic Complex divide(Complex rhs){\n  if (isNaN() || rhs.isNaN()) {\n    return NaN;\n  }\n  if (Math.abs(rhs.getReal()) < Math.abs(rhs.getImaginary())) {\n    double q=rhs.getReal() / rhs.getImaginary();\n    double d=(rhs.getReal() * q) + rhs.getImaginary();\n    return new Complex(((real * q) + imaginary) / d,((imaginary * q) - real) / d);\n  }\n else {\n    double q=rhs.getImaginary() / rhs.getReal();\n    double d=(rhs.getImaginary() * q) + rhs.getReal();\n    return new Complex(((imaginary * q) + real) / d,(imaginary - (real * q)) / d);\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 131,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 11,
                    "startLineNumber": 109,
                    "startColumnNumber": 12,
                    "endLineNumber": 109,
                    "endColumnNumber": 23
                },
                "nodeContext": "return NaN;\n",
                "nodeType": "ReturnStatement",
                "astNodeNumber": 2,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "org.apache.commons.math.complex.Complex"
        }
    ],
    "positionList": [
        {
            "charLength": 3,
            "startLineNumber": 109,
            "startColumnNumber": 19,
            "endLineNumber": 109,
            "endColumnNumber": 22
        }
    ],
    "layoutRelationDataList": []
}