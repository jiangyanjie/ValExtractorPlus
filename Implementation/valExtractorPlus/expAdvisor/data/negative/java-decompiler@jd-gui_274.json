{
    "id": 274,
    "expression": "rootTypes",
    "projectName": "java-decompiler@jd-gui",
    "commitID": "c2d7d4d2cb49c8b09607a51febf37ad0528a836e",
    "filePath": "services/src/main/java/jd/gui/service/type/JavaFileTypeFactoryProvider.java",
    "occurrences": 1,
    "isArithmeticExpression": 0,
    "isGetTypeMethod": 0,
    "expressionList": [
        {
            "nodeContext": "rootTypes",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 9,
                "startLineNumber": 228,
                "startColumnNumber": 16,
                "endLineNumber": 228,
                "endColumnNumber": 25
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 26,
                        "startLineNumber": 228,
                        "startColumnNumber": 16,
                        "endLineNumber": 228,
                        "endColumnNumber": 42
                    },
                    "nodeContext": "rootTypes.add(currentType)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 27,
                        "startLineNumber": 228,
                        "startColumnNumber": 16,
                        "endLineNumber": 228,
                        "endColumnNumber": 43
                    },
                    "nodeContext": "rootTypes.add(currentType);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1119,
                        "startLineNumber": 220,
                        "startColumnNumber": 37,
                        "endLineNumber": 243,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  String internalTypeName=packageName.isEmpty() ? name : packageName + \"/\" + name;\n  String outerName=null;\n  String displayTypeName=name;\n  String displayInnerTypeName=null;\n  currentType=new JavaType(access,internalTypeName,superQualifiedTypeName,outerName,displayTypeName,displayInnerTypeName,displayPackageName,null);\n  types.put(internalTypeName,currentType);\n  rootTypes.add(currentType);\n  nameToInternalTypeName.put(name,internalTypeName);\n  if (mainType == null) {\n    mainType=currentType;\n  }\n else {\n    String path=entry.getPath();\n    int index=path.lastIndexOf('/') + 1;\n    if (path.substring(index).startsWith(name + '.')) {\n      mainType=currentType;\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 107,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1858,
                        "startLineNumber": 220,
                        "startColumnNumber": 12,
                        "endLineNumber": 254,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (currentType == null) {\n  String internalTypeName=packageName.isEmpty() ? name : packageName + \"/\" + name;\n  String outerName=null;\n  String displayTypeName=name;\n  String displayInnerTypeName=null;\n  currentType=new JavaType(access,internalTypeName,superQualifiedTypeName,outerName,displayTypeName,displayInnerTypeName,displayPackageName,null);\n  types.put(internalTypeName,currentType);\n  rootTypes.add(currentType);\n  nameToInternalTypeName.put(name,internalTypeName);\n  if (mainType == null) {\n    mainType=currentType;\n  }\n else {\n    String path=entry.getPath();\n    int index=path.lastIndexOf('/') + 1;\n    if (path.substring(index).startsWith(name + '.')) {\n      mainType=currentType;\n    }\n  }\n}\n else {\n  String internalTypeName=currentType.getName() + '$' + name;\n  String outerName=currentType.getName();\n  String displayTypeName=currentType.getDisplayTypeName() + '.' + name;\n  String displayInnerTypeName=name;\n  JavaType subType=new JavaType(access,internalTypeName,superQualifiedTypeName,outerName,displayTypeName,displayInnerTypeName,displayPackageName,currentType);\n  currentType.getInnerTypes().add(subType);\n  currentType=subType;\n  types.put(internalTypeName,currentType);\n  nameToInternalTypeName.put(name,internalTypeName);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 187,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2778,
                        "startLineNumber": 201,
                        "startColumnNumber": 79,
                        "endLineNumber": 255,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  String name=ctx.getToken(JavaParser.Identifier,0).getText();\n  JavaParser.TypeContext superType=ctx.getRuleContext(JavaParser.TypeContext.class,0);\n  String superQualifiedTypeName;\n  if (superType == null) {\n    superQualifiedTypeName=((access & JavaType.FLAG_INTERFACE) == 0) ? \"java/lang/Object\" : \"\";\n  }\n else {\n    superQualifiedTypeName=resolveInternalTypeName(superType.classOrInterfaceType().Identifier());\n  }\n  ParserRuleContext parent=ctx.getParent();\n  if (parent instanceof JavaParser.TypeDeclarationContext)   access+=getTypeDeclarationContextAccessFlag(parent);\n else   if (parent instanceof JavaParser.MemberDeclarationContext)   access+=getMemberDeclarationContextAccessFlag(parent.getParent());\n  if (currentType == null) {\n    String internalTypeName=packageName.isEmpty() ? name : packageName + \"/\" + name;\n    String outerName=null;\n    String displayTypeName=name;\n    String displayInnerTypeName=null;\n    currentType=new JavaType(access,internalTypeName,superQualifiedTypeName,outerName,displayTypeName,displayInnerTypeName,displayPackageName,null);\n    types.put(internalTypeName,currentType);\n    rootTypes.add(currentType);\n    nameToInternalTypeName.put(name,internalTypeName);\n    if (mainType == null) {\n      mainType=currentType;\n    }\n else {\n      String path=entry.getPath();\n      int index=path.lastIndexOf('/') + 1;\n      if (path.substring(index).startsWith(name + '.')) {\n        mainType=currentType;\n      }\n    }\n  }\n else {\n    String internalTypeName=currentType.getName() + '$' + name;\n    String outerName=currentType.getName();\n    String displayTypeName=currentType.getDisplayTypeName() + '.' + name;\n    String displayInnerTypeName=name;\n    JavaType subType=new JavaType(access,internalTypeName,superQualifiedTypeName,outerName,displayTypeName,displayInnerTypeName,displayPackageName,currentType);\n    currentType.getInnerTypes().add(subType);\n    currentType=subType;\n    types.put(internalTypeName,currentType);\n    nameToInternalTypeName.put(name,internalTypeName);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 290,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2849,
                        "startLineNumber": 201,
                        "startColumnNumber": 8,
                        "endLineNumber": 255,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "protected void enterTypeDeclaration(ParserRuleContext ctx,int access){\n  String name=ctx.getToken(JavaParser.Identifier,0).getText();\n  JavaParser.TypeContext superType=ctx.getRuleContext(JavaParser.TypeContext.class,0);\n  String superQualifiedTypeName;\n  if (superType == null) {\n    superQualifiedTypeName=((access & JavaType.FLAG_INTERFACE) == 0) ? \"java/lang/Object\" : \"\";\n  }\n else {\n    superQualifiedTypeName=resolveInternalTypeName(superType.classOrInterfaceType().Identifier());\n  }\n  ParserRuleContext parent=ctx.getParent();\n  if (parent instanceof JavaParser.TypeDeclarationContext)   access+=getTypeDeclarationContextAccessFlag(parent);\n else   if (parent instanceof JavaParser.MemberDeclarationContext)   access+=getMemberDeclarationContextAccessFlag(parent.getParent());\n  if (currentType == null) {\n    String internalTypeName=packageName.isEmpty() ? name : packageName + \"/\" + name;\n    String outerName=null;\n    String displayTypeName=name;\n    String displayInnerTypeName=null;\n    currentType=new JavaType(access,internalTypeName,superQualifiedTypeName,outerName,displayTypeName,displayInnerTypeName,displayPackageName,null);\n    types.put(internalTypeName,currentType);\n    rootTypes.add(currentType);\n    nameToInternalTypeName.put(name,internalTypeName);\n    if (mainType == null) {\n      mainType=currentType;\n    }\n else {\n      String path=entry.getPath();\n      int index=path.lastIndexOf('/') + 1;\n      if (path.substring(index).startsWith(name + '.')) {\n        mainType=currentType;\n      }\n    }\n  }\n else {\n    String internalTypeName=currentType.getName() + '$' + name;\n    String outerName=currentType.getName();\n    String displayTypeName=currentType.getDisplayTypeName() + '.' + name;\n    String displayInnerTypeName=name;\n    JavaType subType=new JavaType(access,internalTypeName,superQualifiedTypeName,outerName,displayTypeName,displayInnerTypeName,displayPackageName,currentType);\n    currentType.getInnerTypes().add(subType);\n    currentType=subType;\n    types.put(internalTypeName,currentType);\n    nameToInternalTypeName.put(name,internalTypeName);\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 301,
                    "astHeight": 13
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 27,
                    "startLineNumber": 228,
                    "startColumnNumber": 16,
                    "endLineNumber": 228,
                    "endColumnNumber": 43
                },
                "nodeContext": "rootTypes.add(currentType);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.util.ArrayList<jd.gui.api.model.Type>"
        }
    ],
    "positionList": [
        {
            "charLength": 9,
            "startLineNumber": 228,
            "startColumnNumber": 16,
            "endLineNumber": 228,
            "endColumnNumber": 25
        }
    ],
    "layoutRelationDataList": []
}