{
    "id": 1141,
    "expression": "!sId.getExternalIdRef().getProviderName().equals(idp.getName())",
    "projectName": "jackrabbit-oak",
    "commitID": "f6f7ebd56aa6640f43fdbae23150f9663448c8e7",
    "filePath": "oak-auth-external/src/main/java/org/apache/jackrabbit/oak/spi/security/authentication/external/impl/ExternalLoginModule.java",
    "occurrences": 1,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "!sId.getExternalIdRef().getProviderName().equals(idp.getName())",
            "nodeType": "PrefixExpression",
            "nodePosition": {
                "charLength": 63,
                "startLineNumber": 195,
                "startColumnNumber": 24,
                "endLineNumber": 195,
                "endColumnNumber": 87
            },
            "astNodeNumber": 11,
            "astHeight": 5,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 340,
                        "startLineNumber": 195,
                        "startColumnNumber": 20,
                        "endLineNumber": 200,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (!sId.getExternalIdRef().getProviderName().equals(idp.getName())) {\n  if (log.isDebugEnabled()) {\n    log.debug(\"ignoring foreign identity: {} (idp={})\",sId.getExternalIdRef().getString(),idp.getName());\n  }\n  return false;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 33,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 573,
                        "startLineNumber": 190,
                        "startColumnNumber": 33,
                        "endLineNumber": 201,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  if (sId.getExternalIdRef() == null) {\n    log.debug(\"ignoring local user: {}\",sId.getId());\n    return false;\n  }\n  if (!sId.getExternalIdRef().getProviderName().equals(idp.getName())) {\n    if (log.isDebugEnabled()) {\n      log.debug(\"ignoring foreign identity: {} (idp={})\",sId.getExternalIdRef().getString(),idp.getName());\n    }\n    return false;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 51,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 590,
                        "startLineNumber": 190,
                        "startColumnNumber": 16,
                        "endLineNumber": 201,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (sId != null) {\n  if (sId.getExternalIdRef() == null) {\n    log.debug(\"ignoring local user: {}\",sId.getId());\n    return false;\n  }\n  if (!sId.getExternalIdRef().getProviderName().equals(idp.getName())) {\n    if (log.isDebugEnabled()) {\n      log.debug(\"ignoring foreign identity: {} (idp={})\",sId.getExternalIdRef().getString(),idp.getName());\n    }\n    return false;\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 55,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 867,
                        "startLineNumber": 186,
                        "startColumnNumber": 32,
                        "endLineNumber": 202,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  sId=syncHandler.findIdentity(getUserManager(),userId);\n  if (sId != null) {\n    if (sId.getExternalIdRef() == null) {\n      log.debug(\"ignoring local user: {}\",sId.getId());\n      return false;\n    }\n    if (!sId.getExternalIdRef().getProviderName().equals(idp.getName())) {\n      if (log.isDebugEnabled()) {\n        log.debug(\"ignoring foreign identity: {} (idp={})\",sId.getExternalIdRef().getString(),idp.getName());\n      }\n      return false;\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 65,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 887,
                        "startLineNumber": 186,
                        "startColumnNumber": 12,
                        "endLineNumber": 202,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (userId != null) {\n  sId=syncHandler.findIdentity(getUserManager(),userId);\n  if (sId != null) {\n    if (sId.getExternalIdRef() == null) {\n      log.debug(\"ignoring local user: {}\",sId.getId());\n      return false;\n    }\n    if (!sId.getExternalIdRef().getProviderName().equals(idp.getName())) {\n      if (log.isDebugEnabled()) {\n        log.debug(\"ignoring foreign identity: {} (idp={})\",sId.getExternalIdRef().getString(),idp.getName());\n      }\n      return false;\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 69,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 2344,
                        "startLineNumber": 184,
                        "startColumnNumber": 12,
                        "endLineNumber": 240,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  SyncedIdentity sId=null;\n  if (userId != null) {\n    sId=syncHandler.findIdentity(getUserManager(),userId);\n    if (sId != null) {\n      if (sId.getExternalIdRef() == null) {\n        log.debug(\"ignoring local user: {}\",sId.getId());\n        return false;\n      }\n      if (!sId.getExternalIdRef().getProviderName().equals(idp.getName())) {\n        if (log.isDebugEnabled()) {\n          log.debug(\"ignoring foreign identity: {} (idp={})\",sId.getExternalIdRef().getString(),idp.getName());\n        }\n        return false;\n      }\n    }\n  }\n  if (preAuthLogin != null) {\n    externalUser=idp.getUser(preAuthLogin.getUserId());\n  }\n else {\n    externalUser=idp.authenticate(credentials);\n  }\n  if (externalUser != null) {\n    log.debug(\"IDP {} returned valid user {}\",idp.getName(),externalUser);\n    if (credentials != null) {\n      sharedState.put(SHARED_KEY_CREDENTIALS,credentials);\n    }\n    sharedState.put(SHARED_KEY_LOGIN_NAME,externalUser.getId());\n    syncUser(externalUser);\n    return true;\n  }\n else {\n    if (log.isDebugEnabled()) {\n      if (userId != null) {\n        log.debug(\"IDP {} returned null for simple creds of {}\",idp.getName(),userId);\n      }\n else {\n        log.debug(\"IDP {} returned null for {}\",idp.getName(),credentials);\n      }\n    }\n    if (sId != null) {\n      log.debug(\"local user exists for '{}'. re-validating.\",sId.getId());\n      validateUser(sId.getId());\n    }\n    return false;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 188,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3103,
                        "startLineNumber": 184,
                        "startColumnNumber": 8,
                        "endLineNumber": 254,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  SyncedIdentity sId=null;\n  if (userId != null) {\n    sId=syncHandler.findIdentity(getUserManager(),userId);\n    if (sId != null) {\n      if (sId.getExternalIdRef() == null) {\n        log.debug(\"ignoring local user: {}\",sId.getId());\n        return false;\n      }\n      if (!sId.getExternalIdRef().getProviderName().equals(idp.getName())) {\n        if (log.isDebugEnabled()) {\n          log.debug(\"ignoring foreign identity: {} (idp={})\",sId.getExternalIdRef().getString(),idp.getName());\n        }\n        return false;\n      }\n    }\n  }\n  if (preAuthLogin != null) {\n    externalUser=idp.getUser(preAuthLogin.getUserId());\n  }\n else {\n    externalUser=idp.authenticate(credentials);\n  }\n  if (externalUser != null) {\n    log.debug(\"IDP {} returned valid user {}\",idp.getName(),externalUser);\n    if (credentials != null) {\n      sharedState.put(SHARED_KEY_CREDENTIALS,credentials);\n    }\n    sharedState.put(SHARED_KEY_LOGIN_NAME,externalUser.getId());\n    syncUser(externalUser);\n    return true;\n  }\n else {\n    if (log.isDebugEnabled()) {\n      if (userId != null) {\n        log.debug(\"IDP {} returned null for simple creds of {}\",idp.getName(),userId);\n      }\n else {\n        log.debug(\"IDP {} returned null for {}\",idp.getName(),credentials);\n      }\n    }\n    if (sId != null) {\n      log.debug(\"local user exists for '{}'. re-validating.\",sId.getId());\n      validateUser(sId.getId());\n    }\n    return false;\n  }\n}\n catch (ExternalIdentityException e) {\n  log.error(\"Error while authenticating '{}' with {}\",userId == null ? credentials : userId,idp.getName(),e);\n  return false;\n}\ncatch (LoginException e) {\n  log.debug(\"IDP {} throws login exception for '{}': {}\",idp.getName(),userId == null ? credentials : userId,e.getMessage());\n  throw e;\n}\ncatch (Exception e) {\n  log.debug(\"SyncHandler {} throws sync exception for '{}'\",syncHandler.getName(),userId == null ? credentials : userId,e);\n  LoginException le=new LoginException(\"Error while syncing user.\");\n  le.initCause(e);\n  throw le;\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 274,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3836,
                        "startLineNumber": 165,
                        "startColumnNumber": 49,
                        "endLineNumber": 255,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (idp == null || syncHandler == null) {\n    return false;\n  }\n  credentials=getCredentials();\n  final String userId;\n  final PreAuthenticatedLogin preAuthLogin=getSharedPreAuthLogin();\n  if (preAuthLogin != null) {\n    userId=preAuthLogin.getUserId();\n  }\n else {\n    userId=credentials instanceof SimpleCredentials ? ((SimpleCredentials)credentials).getUserID() : null;\n  }\n  if (userId == null && credentials == null) {\n    log.debug(\"No credentials found for external login module. ignoring.\");\n    return false;\n  }\n  try {\n    SyncedIdentity sId=null;\n    if (userId != null) {\n      sId=syncHandler.findIdentity(getUserManager(),userId);\n      if (sId != null) {\n        if (sId.getExternalIdRef() == null) {\n          log.debug(\"ignoring local user: {}\",sId.getId());\n          return false;\n        }\n        if (!sId.getExternalIdRef().getProviderName().equals(idp.getName())) {\n          if (log.isDebugEnabled()) {\n            log.debug(\"ignoring foreign identity: {} (idp={})\",sId.getExternalIdRef().getString(),idp.getName());\n          }\n          return false;\n        }\n      }\n    }\n    if (preAuthLogin != null) {\n      externalUser=idp.getUser(preAuthLogin.getUserId());\n    }\n else {\n      externalUser=idp.authenticate(credentials);\n    }\n    if (externalUser != null) {\n      log.debug(\"IDP {} returned valid user {}\",idp.getName(),externalUser);\n      if (credentials != null) {\n        sharedState.put(SHARED_KEY_CREDENTIALS,credentials);\n      }\n      sharedState.put(SHARED_KEY_LOGIN_NAME,externalUser.getId());\n      syncUser(externalUser);\n      return true;\n    }\n else {\n      if (log.isDebugEnabled()) {\n        if (userId != null) {\n          log.debug(\"IDP {} returned null for simple creds of {}\",idp.getName(),userId);\n        }\n else {\n          log.debug(\"IDP {} returned null for {}\",idp.getName(),credentials);\n        }\n      }\n      if (sId != null) {\n        log.debug(\"local user exists for '{}'. re-validating.\",sId.getId());\n        validateUser(sId.getId());\n      }\n      return false;\n    }\n  }\n catch (  ExternalIdentityException e) {\n    log.error(\"Error while authenticating '{}' with {}\",userId == null ? credentials : userId,idp.getName(),e);\n    return false;\n  }\ncatch (  LoginException e) {\n    log.debug(\"IDP {} throws login exception for '{}': {}\",idp.getName(),userId == null ? credentials : userId,e.getMessage());\n    throw e;\n  }\ncatch (  Exception e) {\n    log.debug(\"SyncHandler {} throws sync exception for '{}'\",syncHandler.getName(),userId == null ? credentials : userId,e);\n    LoginException le=new LoginException(\"Error while syncing user.\");\n    le.initCause(e);\n    throw le;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 349,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3895,
                        "startLineNumber": 164,
                        "startColumnNumber": 4,
                        "endLineNumber": 255,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public boolean login() throws LoginException {\n  if (idp == null || syncHandler == null) {\n    return false;\n  }\n  credentials=getCredentials();\n  final String userId;\n  final PreAuthenticatedLogin preAuthLogin=getSharedPreAuthLogin();\n  if (preAuthLogin != null) {\n    userId=preAuthLogin.getUserId();\n  }\n else {\n    userId=credentials instanceof SimpleCredentials ? ((SimpleCredentials)credentials).getUserID() : null;\n  }\n  if (userId == null && credentials == null) {\n    log.debug(\"No credentials found for external login module. ignoring.\");\n    return false;\n  }\n  try {\n    SyncedIdentity sId=null;\n    if (userId != null) {\n      sId=syncHandler.findIdentity(getUserManager(),userId);\n      if (sId != null) {\n        if (sId.getExternalIdRef() == null) {\n          log.debug(\"ignoring local user: {}\",sId.getId());\n          return false;\n        }\n        if (!sId.getExternalIdRef().getProviderName().equals(idp.getName())) {\n          if (log.isDebugEnabled()) {\n            log.debug(\"ignoring foreign identity: {} (idp={})\",sId.getExternalIdRef().getString(),idp.getName());\n          }\n          return false;\n        }\n      }\n    }\n    if (preAuthLogin != null) {\n      externalUser=idp.getUser(preAuthLogin.getUserId());\n    }\n else {\n      externalUser=idp.authenticate(credentials);\n    }\n    if (externalUser != null) {\n      log.debug(\"IDP {} returned valid user {}\",idp.getName(),externalUser);\n      if (credentials != null) {\n        sharedState.put(SHARED_KEY_CREDENTIALS,credentials);\n      }\n      sharedState.put(SHARED_KEY_LOGIN_NAME,externalUser.getId());\n      syncUser(externalUser);\n      return true;\n    }\n else {\n      if (log.isDebugEnabled()) {\n        if (userId != null) {\n          log.debug(\"IDP {} returned null for simple creds of {}\",idp.getName(),userId);\n        }\n else {\n          log.debug(\"IDP {} returned null for {}\",idp.getName(),credentials);\n        }\n      }\n      if (sId != null) {\n        log.debug(\"local user exists for '{}'. re-validating.\",sId.getId());\n        validateUser(sId.getId());\n      }\n      return false;\n    }\n  }\n catch (  ExternalIdentityException e) {\n    log.error(\"Error while authenticating '{}' with {}\",userId == null ? credentials : userId,idp.getName(),e);\n    return false;\n  }\ncatch (  LoginException e) {\n    log.debug(\"IDP {} throws login exception for '{}': {}\",idp.getName(),userId == null ? credentials : userId,e.getMessage());\n    throw e;\n  }\ncatch (  Exception e) {\n    log.debug(\"SyncHandler {} throws sync exception for '{}'\",syncHandler.getName(),userId == null ? credentials : userId,e);\n    LoginException le=new LoginException(\"Error while syncing user.\");\n    le.initCause(e);\n    throw le;\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 357,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 340,
                    "startLineNumber": 195,
                    "startColumnNumber": 20,
                    "endLineNumber": 200,
                    "endColumnNumber": 21
                },
                "nodeContext": "if (!sId.getExternalIdRef().getProviderName().equals(idp.getName())) {\n  if (log.isDebugEnabled()) {\n    log.debug(\"ignoring foreign identity: {} (idp={})\",sId.getExternalIdRef().getString(),idp.getName());\n  }\n  return false;\n}\n",
                "nodeType": "IfStatement",
                "astNodeNumber": 33,
                "astHeight": 9
            },
            "tokenLength": 6,
            "type": "boolean"
        }
    ],
    "positionList": [
        {
            "charLength": 63,
            "startLineNumber": 195,
            "startColumnNumber": 24,
            "endLineNumber": 195,
            "endColumnNumber": 87
        }
    ],
    "layoutRelationDataList": []
}