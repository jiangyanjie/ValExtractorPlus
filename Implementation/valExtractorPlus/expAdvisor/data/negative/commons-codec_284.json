{
    "id": 284,
    "expression": "0",
    "projectName": "commons-codec",
    "commitID": "d9d0eaca911ff6654c71b9eca9349cdffc3e5871",
    "filePath": "src/main/java/org/apache/commons/codec/language/Metaphone.java",
    "occurrences": 15,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 0,
    "expressionList": [
        {
            "nodeContext": "0",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 94,
                "startColumnNumber": 43,
                "endLineNumber": 94,
                "endColumnNumber": 44
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 17,
                        "startLineNumber": 94,
                        "startColumnNumber": 27,
                        "endLineNumber": 94,
                        "endColumnNumber": 44
                    },
                    "nodeContext": "txt.length() == 0",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 32,
                        "startLineNumber": 94,
                        "startColumnNumber": 12,
                        "endLineNumber": 94,
                        "endColumnNumber": 44
                    },
                    "nodeContext": "txt == null || txt.length() == 0",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 74,
                        "startLineNumber": 94,
                        "startColumnNumber": 8,
                        "endLineNumber": 96,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (txt == null || txt.length() == 0) {\n  return \"\";\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 13,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 9344,
                        "startLineNumber": 92,
                        "startColumnNumber": 46,
                        "endLineNumber": 335,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  boolean hard=false;\n  if (txt == null || txt.length() == 0) {\n    return \"\";\n  }\n  if (txt.length() == 1) {\n    return txt.toUpperCase(java.util.Locale.ENGLISH);\n  }\n  final char[] inwd=txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray();\n  final StringBuilder local=new StringBuilder(40);\n  final StringBuilder code=new StringBuilder(10);\nswitch (inwd[0]) {\ncase 'K':case 'G':case 'P':    if (inwd[1] == 'N') {\n      local.append(inwd,1,inwd.length - 1);\n    }\n else {\n      local.append(inwd);\n    }\n  break;\ncase 'A':if (inwd[1] == 'E') {\n  local.append(inwd,1,inwd.length - 1);\n}\n else {\n  local.append(inwd);\n}\nbreak;\ncase 'W':if (inwd[1] == 'R') {\nlocal.append(inwd,1,inwd.length - 1);\nbreak;\n}\nif (inwd[1] == 'H') {\nlocal.append(inwd,1,inwd.length - 1);\nlocal.setCharAt(0,'W');\n}\n else {\nlocal.append(inwd);\n}\nbreak;\ncase 'X':inwd[0]='S';\nlocal.append(inwd);\nbreak;\ndefault:local.append(inwd);\n}\nfinal int wdsz=local.length();\nint n=0;\nwhile (code.length() < this.getMaxCodeLen() && n < wdsz) {\nfinal char symb=local.charAt(n);\nif (symb != 'C' && isPreviousChar(local,n,symb)) {\nn++;\n}\n else {\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':if (n == 0) {\ncode.append(symb);\n}\nbreak;\ncase 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\nbreak;\n}\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\nif (code.length() > this.getMaxCodeLen()) {\ncode.setLength(this.getMaxCodeLen());\n}\n}\nreturn code.toString();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 853,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 9875,
                        "startLineNumber": 82,
                        "startColumnNumber": 4,
                        "endLineNumber": 335,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Find the metaphone value of a String. This is similar to the soundex algorithm, but better at finding similar sounding words. All input is converted to upper case. Limitations: Input format is expected to be a single ASCII word with only characters in the A - Z range, no punctuation or numbers.\n * @param txt String to find the metaphone code for\n * @return A metaphone code corresponding to the String supplied\n */\npublic String metaphone(final String txt){\n  boolean hard=false;\n  if (txt == null || txt.length() == 0) {\n    return \"\";\n  }\n  if (txt.length() == 1) {\n    return txt.toUpperCase(java.util.Locale.ENGLISH);\n  }\n  final char[] inwd=txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray();\n  final StringBuilder local=new StringBuilder(40);\n  final StringBuilder code=new StringBuilder(10);\nswitch (inwd[0]) {\ncase 'K':case 'G':case 'P':    if (inwd[1] == 'N') {\n      local.append(inwd,1,inwd.length - 1);\n    }\n else {\n      local.append(inwd);\n    }\n  break;\ncase 'A':if (inwd[1] == 'E') {\n  local.append(inwd,1,inwd.length - 1);\n}\n else {\n  local.append(inwd);\n}\nbreak;\ncase 'W':if (inwd[1] == 'R') {\nlocal.append(inwd,1,inwd.length - 1);\nbreak;\n}\nif (inwd[1] == 'H') {\nlocal.append(inwd,1,inwd.length - 1);\nlocal.setCharAt(0,'W');\n}\n else {\nlocal.append(inwd);\n}\nbreak;\ncase 'X':inwd[0]='S';\nlocal.append(inwd);\nbreak;\ndefault:local.append(inwd);\n}\nfinal int wdsz=local.length();\nint n=0;\nwhile (code.length() < this.getMaxCodeLen() && n < wdsz) {\nfinal char symb=local.charAt(n);\nif (symb != 'C' && isPreviousChar(local,n,symb)) {\nn++;\n}\n else {\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':if (n == 0) {\ncode.append(symb);\n}\nbreak;\ncase 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\nbreak;\n}\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\nif (code.length() > this.getMaxCodeLen()) {\ncode.setLength(this.getMaxCodeLen());\n}\n}\nreturn code.toString();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 864,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 32,
                    "startLineNumber": 94,
                    "startColumnNumber": 12,
                    "endLineNumber": 94,
                    "endColumnNumber": 44
                },
                "nodeContext": "txt == null || txt.length() == 0",
                "nodeType": "InfixExpression",
                "astNodeNumber": 9,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "0",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 107,
                "startColumnNumber": 20,
                "endLineNumber": 107,
                "endColumnNumber": 21
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.SwitchStatement,expression]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 107,
                        "startColumnNumber": 15,
                        "endLineNumber": 107,
                        "endColumnNumber": 22
                    },
                    "nodeContext": "inwd[0]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1128,
                        "startLineNumber": 107,
                        "startColumnNumber": 8,
                        "endLineNumber": 142,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "switch (inwd[0]) {\ncase 'K':case 'G':case 'P':  if (inwd[1] == 'N') {\n    local.append(inwd,1,inwd.length - 1);\n  }\n else {\n    local.append(inwd);\n  }\nbreak;\ncase 'A':if (inwd[1] == 'E') {\nlocal.append(inwd,1,inwd.length - 1);\n}\n else {\nlocal.append(inwd);\n}\nbreak;\ncase 'W':if (inwd[1] == 'R') {\nlocal.append(inwd,1,inwd.length - 1);\nbreak;\n}\nif (inwd[1] == 'H') {\nlocal.append(inwd,1,inwd.length - 1);\nlocal.setCharAt(0,'W');\n}\n else {\nlocal.append(inwd);\n}\nbreak;\ncase 'X':inwd[0]='S';\nlocal.append(inwd);\nbreak;\ndefault:local.append(inwd);\n}\n",
                    "nodeType": "SwitchStatement",
                    "astNodeNumber": 134,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 9344,
                        "startLineNumber": 92,
                        "startColumnNumber": 46,
                        "endLineNumber": 335,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  boolean hard=false;\n  if (txt == null || txt.length() == 0) {\n    return \"\";\n  }\n  if (txt.length() == 1) {\n    return txt.toUpperCase(java.util.Locale.ENGLISH);\n  }\n  final char[] inwd=txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray();\n  final StringBuilder local=new StringBuilder(40);\n  final StringBuilder code=new StringBuilder(10);\nswitch (inwd[0]) {\ncase 'K':case 'G':case 'P':    if (inwd[1] == 'N') {\n      local.append(inwd,1,inwd.length - 1);\n    }\n else {\n      local.append(inwd);\n    }\n  break;\ncase 'A':if (inwd[1] == 'E') {\n  local.append(inwd,1,inwd.length - 1);\n}\n else {\n  local.append(inwd);\n}\nbreak;\ncase 'W':if (inwd[1] == 'R') {\nlocal.append(inwd,1,inwd.length - 1);\nbreak;\n}\nif (inwd[1] == 'H') {\nlocal.append(inwd,1,inwd.length - 1);\nlocal.setCharAt(0,'W');\n}\n else {\nlocal.append(inwd);\n}\nbreak;\ncase 'X':inwd[0]='S';\nlocal.append(inwd);\nbreak;\ndefault:local.append(inwd);\n}\nfinal int wdsz=local.length();\nint n=0;\nwhile (code.length() < this.getMaxCodeLen() && n < wdsz) {\nfinal char symb=local.charAt(n);\nif (symb != 'C' && isPreviousChar(local,n,symb)) {\nn++;\n}\n else {\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':if (n == 0) {\ncode.append(symb);\n}\nbreak;\ncase 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\nbreak;\n}\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\nif (code.length() > this.getMaxCodeLen()) {\ncode.setLength(this.getMaxCodeLen());\n}\n}\nreturn code.toString();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 853,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 9875,
                        "startLineNumber": 82,
                        "startColumnNumber": 4,
                        "endLineNumber": 335,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Find the metaphone value of a String. This is similar to the soundex algorithm, but better at finding similar sounding words. All input is converted to upper case. Limitations: Input format is expected to be a single ASCII word with only characters in the A - Z range, no punctuation or numbers.\n * @param txt String to find the metaphone code for\n * @return A metaphone code corresponding to the String supplied\n */\npublic String metaphone(final String txt){\n  boolean hard=false;\n  if (txt == null || txt.length() == 0) {\n    return \"\";\n  }\n  if (txt.length() == 1) {\n    return txt.toUpperCase(java.util.Locale.ENGLISH);\n  }\n  final char[] inwd=txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray();\n  final StringBuilder local=new StringBuilder(40);\n  final StringBuilder code=new StringBuilder(10);\nswitch (inwd[0]) {\ncase 'K':case 'G':case 'P':    if (inwd[1] == 'N') {\n      local.append(inwd,1,inwd.length - 1);\n    }\n else {\n      local.append(inwd);\n    }\n  break;\ncase 'A':if (inwd[1] == 'E') {\n  local.append(inwd,1,inwd.length - 1);\n}\n else {\n  local.append(inwd);\n}\nbreak;\ncase 'W':if (inwd[1] == 'R') {\nlocal.append(inwd,1,inwd.length - 1);\nbreak;\n}\nif (inwd[1] == 'H') {\nlocal.append(inwd,1,inwd.length - 1);\nlocal.setCharAt(0,'W');\n}\n else {\nlocal.append(inwd);\n}\nbreak;\ncase 'X':inwd[0]='S';\nlocal.append(inwd);\nbreak;\ndefault:local.append(inwd);\n}\nfinal int wdsz=local.length();\nint n=0;\nwhile (code.length() < this.getMaxCodeLen() && n < wdsz) {\nfinal char symb=local.charAt(n);\nif (symb != 'C' && isPreviousChar(local,n,symb)) {\nn++;\n}\n else {\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':if (n == 0) {\ncode.append(symb);\n}\nbreak;\ncase 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\nbreak;\n}\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\nif (code.length() > this.getMaxCodeLen()) {\ncode.setLength(this.getMaxCodeLen());\n}\n}\nreturn code.toString();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 864,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.SwitchStatement,expression]",
                "nodePosition": {
                    "charLength": 7,
                    "startLineNumber": 107,
                    "startColumnNumber": 15,
                    "endLineNumber": 107,
                    "endColumnNumber": 22
                },
                "nodeContext": "inwd[0]",
                "nodeType": "ArrayAccess",
                "astNodeNumber": 3,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "0",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 131,
                "startColumnNumber": 32,
                "endLineNumber": 131,
                "endColumnNumber": 33
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 23,
                        "startLineNumber": 131,
                        "startColumnNumber": 16,
                        "endLineNumber": 131,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "local.setCharAt(0,'W')",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 24,
                        "startLineNumber": 131,
                        "startColumnNumber": 16,
                        "endLineNumber": 131,
                        "endColumnNumber": 40
                    },
                    "nodeContext": "local.setCharAt(0,'W');\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 126,
                        "startLineNumber": 129,
                        "startColumnNumber": 32,
                        "endLineNumber": 132,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  local.append(inwd,1,inwd.length - 1);\n  local.setCharAt(0,'W');\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 18,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
                    "nodePosition": {
                        "charLength": 205,
                        "startLineNumber": 129,
                        "startColumnNumber": 12,
                        "endLineNumber": 134,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (inwd[1] == 'H') {\n  local.append(inwd,1,inwd.length - 1);\n  local.setCharAt(0,'W');\n}\n else {\n  local.append(inwd);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 30,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1128,
                        "startLineNumber": 107,
                        "startColumnNumber": 8,
                        "endLineNumber": 142,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "switch (inwd[0]) {\ncase 'K':case 'G':case 'P':  if (inwd[1] == 'N') {\n    local.append(inwd,1,inwd.length - 1);\n  }\n else {\n    local.append(inwd);\n  }\nbreak;\ncase 'A':if (inwd[1] == 'E') {\nlocal.append(inwd,1,inwd.length - 1);\n}\n else {\nlocal.append(inwd);\n}\nbreak;\ncase 'W':if (inwd[1] == 'R') {\nlocal.append(inwd,1,inwd.length - 1);\nbreak;\n}\nif (inwd[1] == 'H') {\nlocal.append(inwd,1,inwd.length - 1);\nlocal.setCharAt(0,'W');\n}\n else {\nlocal.append(inwd);\n}\nbreak;\ncase 'X':inwd[0]='S';\nlocal.append(inwd);\nbreak;\ndefault:local.append(inwd);\n}\n",
                    "nodeType": "SwitchStatement",
                    "astNodeNumber": 134,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 9344,
                        "startLineNumber": 92,
                        "startColumnNumber": 46,
                        "endLineNumber": 335,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  boolean hard=false;\n  if (txt == null || txt.length() == 0) {\n    return \"\";\n  }\n  if (txt.length() == 1) {\n    return txt.toUpperCase(java.util.Locale.ENGLISH);\n  }\n  final char[] inwd=txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray();\n  final StringBuilder local=new StringBuilder(40);\n  final StringBuilder code=new StringBuilder(10);\nswitch (inwd[0]) {\ncase 'K':case 'G':case 'P':    if (inwd[1] == 'N') {\n      local.append(inwd,1,inwd.length - 1);\n    }\n else {\n      local.append(inwd);\n    }\n  break;\ncase 'A':if (inwd[1] == 'E') {\n  local.append(inwd,1,inwd.length - 1);\n}\n else {\n  local.append(inwd);\n}\nbreak;\ncase 'W':if (inwd[1] == 'R') {\nlocal.append(inwd,1,inwd.length - 1);\nbreak;\n}\nif (inwd[1] == 'H') {\nlocal.append(inwd,1,inwd.length - 1);\nlocal.setCharAt(0,'W');\n}\n else {\nlocal.append(inwd);\n}\nbreak;\ncase 'X':inwd[0]='S';\nlocal.append(inwd);\nbreak;\ndefault:local.append(inwd);\n}\nfinal int wdsz=local.length();\nint n=0;\nwhile (code.length() < this.getMaxCodeLen() && n < wdsz) {\nfinal char symb=local.charAt(n);\nif (symb != 'C' && isPreviousChar(local,n,symb)) {\nn++;\n}\n else {\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':if (n == 0) {\ncode.append(symb);\n}\nbreak;\ncase 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\nbreak;\n}\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\nif (code.length() > this.getMaxCodeLen()) {\ncode.setLength(this.getMaxCodeLen());\n}\n}\nreturn code.toString();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 853,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 9875,
                        "startLineNumber": 82,
                        "startColumnNumber": 4,
                        "endLineNumber": 335,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Find the metaphone value of a String. This is similar to the soundex algorithm, but better at finding similar sounding words. All input is converted to upper case. Limitations: Input format is expected to be a single ASCII word with only characters in the A - Z range, no punctuation or numbers.\n * @param txt String to find the metaphone code for\n * @return A metaphone code corresponding to the String supplied\n */\npublic String metaphone(final String txt){\n  boolean hard=false;\n  if (txt == null || txt.length() == 0) {\n    return \"\";\n  }\n  if (txt.length() == 1) {\n    return txt.toUpperCase(java.util.Locale.ENGLISH);\n  }\n  final char[] inwd=txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray();\n  final StringBuilder local=new StringBuilder(40);\n  final StringBuilder code=new StringBuilder(10);\nswitch (inwd[0]) {\ncase 'K':case 'G':case 'P':    if (inwd[1] == 'N') {\n      local.append(inwd,1,inwd.length - 1);\n    }\n else {\n      local.append(inwd);\n    }\n  break;\ncase 'A':if (inwd[1] == 'E') {\n  local.append(inwd,1,inwd.length - 1);\n}\n else {\n  local.append(inwd);\n}\nbreak;\ncase 'W':if (inwd[1] == 'R') {\nlocal.append(inwd,1,inwd.length - 1);\nbreak;\n}\nif (inwd[1] == 'H') {\nlocal.append(inwd,1,inwd.length - 1);\nlocal.setCharAt(0,'W');\n}\n else {\nlocal.append(inwd);\n}\nbreak;\ncase 'X':inwd[0]='S';\nlocal.append(inwd);\nbreak;\ndefault:local.append(inwd);\n}\nfinal int wdsz=local.length();\nint n=0;\nwhile (code.length() < this.getMaxCodeLen() && n < wdsz) {\nfinal char symb=local.charAt(n);\nif (symb != 'C' && isPreviousChar(local,n,symb)) {\nn++;\n}\n else {\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':if (n == 0) {\ncode.append(symb);\n}\nbreak;\ncase 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\nbreak;\n}\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\nif (code.length() > this.getMaxCodeLen()) {\ncode.setLength(this.getMaxCodeLen());\n}\n}\nreturn code.toString();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 864,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 24,
                    "startLineNumber": 131,
                    "startColumnNumber": 16,
                    "endLineNumber": 131,
                    "endColumnNumber": 40
                },
                "nodeContext": "local.setCharAt(0,'W');\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 6,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "0",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 137,
                "startColumnNumber": 17,
                "endLineNumber": 137,
                "endColumnNumber": 18
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 137,
                        "startColumnNumber": 12,
                        "endLineNumber": 137,
                        "endColumnNumber": 19
                    },
                    "nodeContext": "inwd[0]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 13,
                        "startLineNumber": 137,
                        "startColumnNumber": 12,
                        "endLineNumber": 137,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "inwd[0]='S'",
                    "nodeType": "Assignment",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
                    "nodePosition": {
                        "charLength": 14,
                        "startLineNumber": 137,
                        "startColumnNumber": 12,
                        "endLineNumber": 137,
                        "endColumnNumber": 26
                    },
                    "nodeContext": "inwd[0]='S';\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 6,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1128,
                        "startLineNumber": 107,
                        "startColumnNumber": 8,
                        "endLineNumber": 142,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "switch (inwd[0]) {\ncase 'K':case 'G':case 'P':  if (inwd[1] == 'N') {\n    local.append(inwd,1,inwd.length - 1);\n  }\n else {\n    local.append(inwd);\n  }\nbreak;\ncase 'A':if (inwd[1] == 'E') {\nlocal.append(inwd,1,inwd.length - 1);\n}\n else {\nlocal.append(inwd);\n}\nbreak;\ncase 'W':if (inwd[1] == 'R') {\nlocal.append(inwd,1,inwd.length - 1);\nbreak;\n}\nif (inwd[1] == 'H') {\nlocal.append(inwd,1,inwd.length - 1);\nlocal.setCharAt(0,'W');\n}\n else {\nlocal.append(inwd);\n}\nbreak;\ncase 'X':inwd[0]='S';\nlocal.append(inwd);\nbreak;\ndefault:local.append(inwd);\n}\n",
                    "nodeType": "SwitchStatement",
                    "astNodeNumber": 134,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 9344,
                        "startLineNumber": 92,
                        "startColumnNumber": 46,
                        "endLineNumber": 335,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  boolean hard=false;\n  if (txt == null || txt.length() == 0) {\n    return \"\";\n  }\n  if (txt.length() == 1) {\n    return txt.toUpperCase(java.util.Locale.ENGLISH);\n  }\n  final char[] inwd=txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray();\n  final StringBuilder local=new StringBuilder(40);\n  final StringBuilder code=new StringBuilder(10);\nswitch (inwd[0]) {\ncase 'K':case 'G':case 'P':    if (inwd[1] == 'N') {\n      local.append(inwd,1,inwd.length - 1);\n    }\n else {\n      local.append(inwd);\n    }\n  break;\ncase 'A':if (inwd[1] == 'E') {\n  local.append(inwd,1,inwd.length - 1);\n}\n else {\n  local.append(inwd);\n}\nbreak;\ncase 'W':if (inwd[1] == 'R') {\nlocal.append(inwd,1,inwd.length - 1);\nbreak;\n}\nif (inwd[1] == 'H') {\nlocal.append(inwd,1,inwd.length - 1);\nlocal.setCharAt(0,'W');\n}\n else {\nlocal.append(inwd);\n}\nbreak;\ncase 'X':inwd[0]='S';\nlocal.append(inwd);\nbreak;\ndefault:local.append(inwd);\n}\nfinal int wdsz=local.length();\nint n=0;\nwhile (code.length() < this.getMaxCodeLen() && n < wdsz) {\nfinal char symb=local.charAt(n);\nif (symb != 'C' && isPreviousChar(local,n,symb)) {\nn++;\n}\n else {\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':if (n == 0) {\ncode.append(symb);\n}\nbreak;\ncase 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\nbreak;\n}\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\nif (code.length() > this.getMaxCodeLen()) {\ncode.setLength(this.getMaxCodeLen());\n}\n}\nreturn code.toString();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 853,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 9875,
                        "startLineNumber": 82,
                        "startColumnNumber": 4,
                        "endLineNumber": 335,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Find the metaphone value of a String. This is similar to the soundex algorithm, but better at finding similar sounding words. All input is converted to upper case. Limitations: Input format is expected to be a single ASCII word with only characters in the A - Z range, no punctuation or numbers.\n * @param txt String to find the metaphone code for\n * @return A metaphone code corresponding to the String supplied\n */\npublic String metaphone(final String txt){\n  boolean hard=false;\n  if (txt == null || txt.length() == 0) {\n    return \"\";\n  }\n  if (txt.length() == 1) {\n    return txt.toUpperCase(java.util.Locale.ENGLISH);\n  }\n  final char[] inwd=txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray();\n  final StringBuilder local=new StringBuilder(40);\n  final StringBuilder code=new StringBuilder(10);\nswitch (inwd[0]) {\ncase 'K':case 'G':case 'P':    if (inwd[1] == 'N') {\n      local.append(inwd,1,inwd.length - 1);\n    }\n else {\n      local.append(inwd);\n    }\n  break;\ncase 'A':if (inwd[1] == 'E') {\n  local.append(inwd,1,inwd.length - 1);\n}\n else {\n  local.append(inwd);\n}\nbreak;\ncase 'W':if (inwd[1] == 'R') {\nlocal.append(inwd,1,inwd.length - 1);\nbreak;\n}\nif (inwd[1] == 'H') {\nlocal.append(inwd,1,inwd.length - 1);\nlocal.setCharAt(0,'W');\n}\n else {\nlocal.append(inwd);\n}\nbreak;\ncase 'X':inwd[0]='S';\nlocal.append(inwd);\nbreak;\ndefault:local.append(inwd);\n}\nfinal int wdsz=local.length();\nint n=0;\nwhile (code.length() < this.getMaxCodeLen() && n < wdsz) {\nfinal char symb=local.charAt(n);\nif (symb != 'C' && isPreviousChar(local,n,symb)) {\nn++;\n}\n else {\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':if (n == 0) {\ncode.append(symb);\n}\nbreak;\ncase 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\nbreak;\n}\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\nif (code.length() > this.getMaxCodeLen()) {\ncode.setLength(this.getMaxCodeLen());\n}\n}\nreturn code.toString();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 864,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
                "nodePosition": {
                    "charLength": 14,
                    "startLineNumber": 137,
                    "startColumnNumber": 12,
                    "endLineNumber": 137,
                    "endColumnNumber": 26
                },
                "nodeContext": "inwd[0]='S';\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 6,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "0",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 145,
                "startColumnNumber": 16,
                "endLineNumber": 145,
                "endColumnNumber": 17
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 5,
                        "startLineNumber": 145,
                        "startColumnNumber": 12,
                        "endLineNumber": 145,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "n=0",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 10,
                        "startLineNumber": 145,
                        "startColumnNumber": 8,
                        "endLineNumber": 145,
                        "endColumnNumber": 18
                    },
                    "nodeContext": "int n=0;\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 9344,
                        "startLineNumber": 92,
                        "startColumnNumber": 46,
                        "endLineNumber": 335,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  boolean hard=false;\n  if (txt == null || txt.length() == 0) {\n    return \"\";\n  }\n  if (txt.length() == 1) {\n    return txt.toUpperCase(java.util.Locale.ENGLISH);\n  }\n  final char[] inwd=txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray();\n  final StringBuilder local=new StringBuilder(40);\n  final StringBuilder code=new StringBuilder(10);\nswitch (inwd[0]) {\ncase 'K':case 'G':case 'P':    if (inwd[1] == 'N') {\n      local.append(inwd,1,inwd.length - 1);\n    }\n else {\n      local.append(inwd);\n    }\n  break;\ncase 'A':if (inwd[1] == 'E') {\n  local.append(inwd,1,inwd.length - 1);\n}\n else {\n  local.append(inwd);\n}\nbreak;\ncase 'W':if (inwd[1] == 'R') {\nlocal.append(inwd,1,inwd.length - 1);\nbreak;\n}\nif (inwd[1] == 'H') {\nlocal.append(inwd,1,inwd.length - 1);\nlocal.setCharAt(0,'W');\n}\n else {\nlocal.append(inwd);\n}\nbreak;\ncase 'X':inwd[0]='S';\nlocal.append(inwd);\nbreak;\ndefault:local.append(inwd);\n}\nfinal int wdsz=local.length();\nint n=0;\nwhile (code.length() < this.getMaxCodeLen() && n < wdsz) {\nfinal char symb=local.charAt(n);\nif (symb != 'C' && isPreviousChar(local,n,symb)) {\nn++;\n}\n else {\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':if (n == 0) {\ncode.append(symb);\n}\nbreak;\ncase 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\nbreak;\n}\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\nif (code.length() > this.getMaxCodeLen()) {\ncode.setLength(this.getMaxCodeLen());\n}\n}\nreturn code.toString();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 853,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 9875,
                        "startLineNumber": 82,
                        "startColumnNumber": 4,
                        "endLineNumber": 335,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Find the metaphone value of a String. This is similar to the soundex algorithm, but better at finding similar sounding words. All input is converted to upper case. Limitations: Input format is expected to be a single ASCII word with only characters in the A - Z range, no punctuation or numbers.\n * @param txt String to find the metaphone code for\n * @return A metaphone code corresponding to the String supplied\n */\npublic String metaphone(final String txt){\n  boolean hard=false;\n  if (txt == null || txt.length() == 0) {\n    return \"\";\n  }\n  if (txt.length() == 1) {\n    return txt.toUpperCase(java.util.Locale.ENGLISH);\n  }\n  final char[] inwd=txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray();\n  final StringBuilder local=new StringBuilder(40);\n  final StringBuilder code=new StringBuilder(10);\nswitch (inwd[0]) {\ncase 'K':case 'G':case 'P':    if (inwd[1] == 'N') {\n      local.append(inwd,1,inwd.length - 1);\n    }\n else {\n      local.append(inwd);\n    }\n  break;\ncase 'A':if (inwd[1] == 'E') {\n  local.append(inwd,1,inwd.length - 1);\n}\n else {\n  local.append(inwd);\n}\nbreak;\ncase 'W':if (inwd[1] == 'R') {\nlocal.append(inwd,1,inwd.length - 1);\nbreak;\n}\nif (inwd[1] == 'H') {\nlocal.append(inwd,1,inwd.length - 1);\nlocal.setCharAt(0,'W');\n}\n else {\nlocal.append(inwd);\n}\nbreak;\ncase 'X':inwd[0]='S';\nlocal.append(inwd);\nbreak;\ndefault:local.append(inwd);\n}\nfinal int wdsz=local.length();\nint n=0;\nwhile (code.length() < this.getMaxCodeLen() && n < wdsz) {\nfinal char symb=local.charAt(n);\nif (symb != 'C' && isPreviousChar(local,n,symb)) {\nn++;\n}\n else {\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':if (n == 0) {\ncode.append(symb);\n}\nbreak;\ncase 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\nbreak;\n}\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\nif (code.length() > this.getMaxCodeLen()) {\ncode.setLength(this.getMaxCodeLen());\n}\n}\nreturn code.toString();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 864,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 10,
                    "startLineNumber": 145,
                    "startColumnNumber": 8,
                    "endLineNumber": 145,
                    "endColumnNumber": 18
                },
                "nodeContext": "int n=0;\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "0",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 160,
                "startColumnNumber": 29,
                "endLineNumber": 160,
                "endColumnNumber": 30
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 6,
                        "startLineNumber": 160,
                        "startColumnNumber": 24,
                        "endLineNumber": 160,
                        "endColumnNumber": 30
                    },
                    "nodeContext": "n == 0",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
                    "nodePosition": {
                        "charLength": 80,
                        "startLineNumber": 160,
                        "startColumnNumber": 20,
                        "endLineNumber": 162,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (n == 0) {\n  code.append(symb);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 10,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6923,
                        "startLineNumber": 154,
                        "startColumnNumber": 16,
                        "endLineNumber": 327,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "switch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':  if (n == 0) {\n    code.append(symb);\n  }\nbreak;\ncase 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\nbreak;\n}\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\n",
                    "nodeType": "SwitchStatement",
                    "astNodeNumber": 570,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 7004,
                        "startLineNumber": 153,
                        "startColumnNumber": 19,
                        "endLineNumber": 329,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':    if (n == 0) {\n      code.append(symb);\n    }\n  break;\ncase 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\n  break;\n}\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 574,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 7102,
                        "startLineNumber": 151,
                        "startColumnNumber": 12,
                        "endLineNumber": 329,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (symb != 'C' && isPreviousChar(local,n,symb)) {\n  n++;\n}\n else {\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':    if (n == 0) {\n      code.append(symb);\n    }\n  break;\ncase 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\n  break;\n}\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 588,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 7415,
                        "startLineNumber": 148,
                        "startColumnNumber": 26,
                        "endLineNumber": 333,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final char symb=local.charAt(n);\n  if (symb != 'C' && isPreviousChar(local,n,symb)) {\n    n++;\n  }\n else {\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':      if (n == 0) {\n        code.append(symb);\n      }\n    break;\ncase 'B':  if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\n    break;\n  }\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\nif (code.length() > this.getMaxCodeLen()) {\ncode.setLength(this.getMaxCodeLen());\n}\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 614,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 7489,
                        "startLineNumber": 147,
                        "startColumnNumber": 8,
                        "endLineNumber": 333,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (code.length() < this.getMaxCodeLen() && n < wdsz) {\n  final char symb=local.charAt(n);\n  if (symb != 'C' && isPreviousChar(local,n,symb)) {\n    n++;\n  }\n else {\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':      if (n == 0) {\n        code.append(symb);\n      }\n    break;\ncase 'B':  if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\n    break;\n  }\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\nif (code.length() > this.getMaxCodeLen()) {\ncode.setLength(this.getMaxCodeLen());\n}\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 626,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 9344,
                        "startLineNumber": 92,
                        "startColumnNumber": 46,
                        "endLineNumber": 335,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  boolean hard=false;\n  if (txt == null || txt.length() == 0) {\n    return \"\";\n  }\n  if (txt.length() == 1) {\n    return txt.toUpperCase(java.util.Locale.ENGLISH);\n  }\n  final char[] inwd=txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray();\n  final StringBuilder local=new StringBuilder(40);\n  final StringBuilder code=new StringBuilder(10);\nswitch (inwd[0]) {\ncase 'K':case 'G':case 'P':    if (inwd[1] == 'N') {\n      local.append(inwd,1,inwd.length - 1);\n    }\n else {\n      local.append(inwd);\n    }\n  break;\ncase 'A':if (inwd[1] == 'E') {\n  local.append(inwd,1,inwd.length - 1);\n}\n else {\n  local.append(inwd);\n}\nbreak;\ncase 'W':if (inwd[1] == 'R') {\nlocal.append(inwd,1,inwd.length - 1);\nbreak;\n}\nif (inwd[1] == 'H') {\nlocal.append(inwd,1,inwd.length - 1);\nlocal.setCharAt(0,'W');\n}\n else {\nlocal.append(inwd);\n}\nbreak;\ncase 'X':inwd[0]='S';\nlocal.append(inwd);\nbreak;\ndefault:local.append(inwd);\n}\nfinal int wdsz=local.length();\nint n=0;\nwhile (code.length() < this.getMaxCodeLen() && n < wdsz) {\nfinal char symb=local.charAt(n);\nif (symb != 'C' && isPreviousChar(local,n,symb)) {\nn++;\n}\n else {\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':if (n == 0) {\ncode.append(symb);\n}\nbreak;\ncase 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\nbreak;\n}\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\nif (code.length() > this.getMaxCodeLen()) {\ncode.setLength(this.getMaxCodeLen());\n}\n}\nreturn code.toString();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 853,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 9875,
                        "startLineNumber": 82,
                        "startColumnNumber": 4,
                        "endLineNumber": 335,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Find the metaphone value of a String. This is similar to the soundex algorithm, but better at finding similar sounding words. All input is converted to upper case. Limitations: Input format is expected to be a single ASCII word with only characters in the A - Z range, no punctuation or numbers.\n * @param txt String to find the metaphone code for\n * @return A metaphone code corresponding to the String supplied\n */\npublic String metaphone(final String txt){\n  boolean hard=false;\n  if (txt == null || txt.length() == 0) {\n    return \"\";\n  }\n  if (txt.length() == 1) {\n    return txt.toUpperCase(java.util.Locale.ENGLISH);\n  }\n  final char[] inwd=txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray();\n  final StringBuilder local=new StringBuilder(40);\n  final StringBuilder code=new StringBuilder(10);\nswitch (inwd[0]) {\ncase 'K':case 'G':case 'P':    if (inwd[1] == 'N') {\n      local.append(inwd,1,inwd.length - 1);\n    }\n else {\n      local.append(inwd);\n    }\n  break;\ncase 'A':if (inwd[1] == 'E') {\n  local.append(inwd,1,inwd.length - 1);\n}\n else {\n  local.append(inwd);\n}\nbreak;\ncase 'W':if (inwd[1] == 'R') {\nlocal.append(inwd,1,inwd.length - 1);\nbreak;\n}\nif (inwd[1] == 'H') {\nlocal.append(inwd,1,inwd.length - 1);\nlocal.setCharAt(0,'W');\n}\n else {\nlocal.append(inwd);\n}\nbreak;\ncase 'X':inwd[0]='S';\nlocal.append(inwd);\nbreak;\ndefault:local.append(inwd);\n}\nfinal int wdsz=local.length();\nint n=0;\nwhile (code.length() < this.getMaxCodeLen() && n < wdsz) {\nfinal char symb=local.charAt(n);\nif (symb != 'C' && isPreviousChar(local,n,symb)) {\nn++;\n}\n else {\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':if (n == 0) {\ncode.append(symb);\n}\nbreak;\ncase 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\nbreak;\n}\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\nif (code.length() > this.getMaxCodeLen()) {\ncode.setLength(this.getMaxCodeLen());\n}\n}\nreturn code.toString();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 864,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 6,
                    "startLineNumber": 160,
                    "startColumnNumber": 24,
                    "endLineNumber": 160,
                    "endColumnNumber": 30
                },
                "nodeContext": "n == 0",
                "nodeType": "InfixExpression",
                "astNodeNumber": 3,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "0",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 175,
                "startColumnNumber": 64,
                "endLineNumber": 175,
                "endColumnNumber": 65
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.InfixExpression,extendedOperands]",
                    "nodePosition": {
                        "charLength": 40,
                        "startLineNumber": 175,
                        "startColumnNumber": 25,
                        "endLineNumber": 175,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "FRONTV.indexOf(local.charAt(n + 1)) >= 0",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 11,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 149,
                        "startLineNumber": 173,
                        "startColumnNumber": 25,
                        "endLineNumber": 175,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 22,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
                    "nodePosition": {
                        "charLength": 213,
                        "startLineNumber": 173,
                        "startColumnNumber": 20,
                        "endLineNumber": 177,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\n  break;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 25,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6923,
                        "startLineNumber": 154,
                        "startColumnNumber": 16,
                        "endLineNumber": 327,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "switch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':  if (n == 0) {\n    code.append(symb);\n  }\nbreak;\ncase 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\nbreak;\n}\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\n",
                    "nodeType": "SwitchStatement",
                    "astNodeNumber": 570,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 7004,
                        "startLineNumber": 153,
                        "startColumnNumber": 19,
                        "endLineNumber": 329,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':    if (n == 0) {\n      code.append(symb);\n    }\n  break;\ncase 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\n  break;\n}\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 574,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 7102,
                        "startLineNumber": 151,
                        "startColumnNumber": 12,
                        "endLineNumber": 329,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (symb != 'C' && isPreviousChar(local,n,symb)) {\n  n++;\n}\n else {\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':    if (n == 0) {\n      code.append(symb);\n    }\n  break;\ncase 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\n  break;\n}\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 588,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 7415,
                        "startLineNumber": 148,
                        "startColumnNumber": 26,
                        "endLineNumber": 333,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final char symb=local.charAt(n);\n  if (symb != 'C' && isPreviousChar(local,n,symb)) {\n    n++;\n  }\n else {\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':      if (n == 0) {\n        code.append(symb);\n      }\n    break;\ncase 'B':  if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\n    break;\n  }\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\nif (code.length() > this.getMaxCodeLen()) {\ncode.setLength(this.getMaxCodeLen());\n}\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 614,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 7489,
                        "startLineNumber": 147,
                        "startColumnNumber": 8,
                        "endLineNumber": 333,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (code.length() < this.getMaxCodeLen() && n < wdsz) {\n  final char symb=local.charAt(n);\n  if (symb != 'C' && isPreviousChar(local,n,symb)) {\n    n++;\n  }\n else {\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':      if (n == 0) {\n        code.append(symb);\n      }\n    break;\ncase 'B':  if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\n    break;\n  }\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\nif (code.length() > this.getMaxCodeLen()) {\ncode.setLength(this.getMaxCodeLen());\n}\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 626,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 9344,
                        "startLineNumber": 92,
                        "startColumnNumber": 46,
                        "endLineNumber": 335,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  boolean hard=false;\n  if (txt == null || txt.length() == 0) {\n    return \"\";\n  }\n  if (txt.length() == 1) {\n    return txt.toUpperCase(java.util.Locale.ENGLISH);\n  }\n  final char[] inwd=txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray();\n  final StringBuilder local=new StringBuilder(40);\n  final StringBuilder code=new StringBuilder(10);\nswitch (inwd[0]) {\ncase 'K':case 'G':case 'P':    if (inwd[1] == 'N') {\n      local.append(inwd,1,inwd.length - 1);\n    }\n else {\n      local.append(inwd);\n    }\n  break;\ncase 'A':if (inwd[1] == 'E') {\n  local.append(inwd,1,inwd.length - 1);\n}\n else {\n  local.append(inwd);\n}\nbreak;\ncase 'W':if (inwd[1] == 'R') {\nlocal.append(inwd,1,inwd.length - 1);\nbreak;\n}\nif (inwd[1] == 'H') {\nlocal.append(inwd,1,inwd.length - 1);\nlocal.setCharAt(0,'W');\n}\n else {\nlocal.append(inwd);\n}\nbreak;\ncase 'X':inwd[0]='S';\nlocal.append(inwd);\nbreak;\ndefault:local.append(inwd);\n}\nfinal int wdsz=local.length();\nint n=0;\nwhile (code.length() < this.getMaxCodeLen() && n < wdsz) {\nfinal char symb=local.charAt(n);\nif (symb != 'C' && isPreviousChar(local,n,symb)) {\nn++;\n}\n else {\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':if (n == 0) {\ncode.append(symb);\n}\nbreak;\ncase 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\nbreak;\n}\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\nif (code.length() > this.getMaxCodeLen()) {\ncode.setLength(this.getMaxCodeLen());\n}\n}\nreturn code.toString();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 853,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 9875,
                        "startLineNumber": 82,
                        "startColumnNumber": 4,
                        "endLineNumber": 335,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Find the metaphone value of a String. This is similar to the soundex algorithm, but better at finding similar sounding words. All input is converted to upper case. Limitations: Input format is expected to be a single ASCII word with only characters in the A - Z range, no punctuation or numbers.\n * @param txt String to find the metaphone code for\n * @return A metaphone code corresponding to the String supplied\n */\npublic String metaphone(final String txt){\n  boolean hard=false;\n  if (txt == null || txt.length() == 0) {\n    return \"\";\n  }\n  if (txt.length() == 1) {\n    return txt.toUpperCase(java.util.Locale.ENGLISH);\n  }\n  final char[] inwd=txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray();\n  final StringBuilder local=new StringBuilder(40);\n  final StringBuilder code=new StringBuilder(10);\nswitch (inwd[0]) {\ncase 'K':case 'G':case 'P':    if (inwd[1] == 'N') {\n      local.append(inwd,1,inwd.length - 1);\n    }\n else {\n      local.append(inwd);\n    }\n  break;\ncase 'A':if (inwd[1] == 'E') {\n  local.append(inwd,1,inwd.length - 1);\n}\n else {\n  local.append(inwd);\n}\nbreak;\ncase 'W':if (inwd[1] == 'R') {\nlocal.append(inwd,1,inwd.length - 1);\nbreak;\n}\nif (inwd[1] == 'H') {\nlocal.append(inwd,1,inwd.length - 1);\nlocal.setCharAt(0,'W');\n}\n else {\nlocal.append(inwd);\n}\nbreak;\ncase 'X':inwd[0]='S';\nlocal.append(inwd);\nbreak;\ndefault:local.append(inwd);\n}\nfinal int wdsz=local.length();\nint n=0;\nwhile (code.length() < this.getMaxCodeLen() && n < wdsz) {\nfinal char symb=local.charAt(n);\nif (symb != 'C' && isPreviousChar(local,n,symb)) {\nn++;\n}\n else {\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':if (n == 0) {\ncode.append(symb);\n}\nbreak;\ncase 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\nbreak;\n}\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\nif (code.length() > this.getMaxCodeLen()) {\ncode.setLength(this.getMaxCodeLen());\n}\n}\nreturn code.toString();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 864,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.InfixExpression,extendedOperands]",
                "nodePosition": {
                    "charLength": 40,
                    "startLineNumber": 175,
                    "startColumnNumber": 25,
                    "endLineNumber": 175,
                    "endColumnNumber": 65
                },
                "nodeContext": "FRONTV.indexOf(local.charAt(n + 1)) >= 0",
                "nodeType": "InfixExpression",
                "astNodeNumber": 11,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "0",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 183,
                "startColumnNumber": 63,
                "endLineNumber": 183,
                "endColumnNumber": 64
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 40,
                        "startLineNumber": 183,
                        "startColumnNumber": 24,
                        "endLineNumber": 183,
                        "endColumnNumber": 64
                    },
                    "nodeContext": "FRONTV.indexOf(local.charAt(n + 1)) >= 0",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 11,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 89,
                        "startLineNumber": 182,
                        "startColumnNumber": 24,
                        "endLineNumber": 183,
                        "endColumnNumber": 64
                    },
                    "nodeContext": "!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 17,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
                    "nodePosition": {
                        "charLength": 211,
                        "startLineNumber": 182,
                        "startColumnNumber": 20,
                        "endLineNumber": 186,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\n  code.append('S');\n  break;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 25,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6923,
                        "startLineNumber": 154,
                        "startColumnNumber": 16,
                        "endLineNumber": 327,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "switch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':  if (n == 0) {\n    code.append(symb);\n  }\nbreak;\ncase 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\nbreak;\n}\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\n",
                    "nodeType": "SwitchStatement",
                    "astNodeNumber": 570,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 7004,
                        "startLineNumber": 153,
                        "startColumnNumber": 19,
                        "endLineNumber": 329,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':    if (n == 0) {\n      code.append(symb);\n    }\n  break;\ncase 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\n  break;\n}\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 574,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 7102,
                        "startLineNumber": 151,
                        "startColumnNumber": 12,
                        "endLineNumber": 329,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (symb != 'C' && isPreviousChar(local,n,symb)) {\n  n++;\n}\n else {\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':    if (n == 0) {\n      code.append(symb);\n    }\n  break;\ncase 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\n  break;\n}\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 588,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 7415,
                        "startLineNumber": 148,
                        "startColumnNumber": 26,
                        "endLineNumber": 333,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final char symb=local.charAt(n);\n  if (symb != 'C' && isPreviousChar(local,n,symb)) {\n    n++;\n  }\n else {\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':      if (n == 0) {\n        code.append(symb);\n      }\n    break;\ncase 'B':  if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\n    break;\n  }\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\nif (code.length() > this.getMaxCodeLen()) {\ncode.setLength(this.getMaxCodeLen());\n}\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 614,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 7489,
                        "startLineNumber": 147,
                        "startColumnNumber": 8,
                        "endLineNumber": 333,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (code.length() < this.getMaxCodeLen() && n < wdsz) {\n  final char symb=local.charAt(n);\n  if (symb != 'C' && isPreviousChar(local,n,symb)) {\n    n++;\n  }\n else {\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':      if (n == 0) {\n        code.append(symb);\n      }\n    break;\ncase 'B':  if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\n    break;\n  }\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\nif (code.length() > this.getMaxCodeLen()) {\ncode.setLength(this.getMaxCodeLen());\n}\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 626,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 9344,
                        "startLineNumber": 92,
                        "startColumnNumber": 46,
                        "endLineNumber": 335,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  boolean hard=false;\n  if (txt == null || txt.length() == 0) {\n    return \"\";\n  }\n  if (txt.length() == 1) {\n    return txt.toUpperCase(java.util.Locale.ENGLISH);\n  }\n  final char[] inwd=txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray();\n  final StringBuilder local=new StringBuilder(40);\n  final StringBuilder code=new StringBuilder(10);\nswitch (inwd[0]) {\ncase 'K':case 'G':case 'P':    if (inwd[1] == 'N') {\n      local.append(inwd,1,inwd.length - 1);\n    }\n else {\n      local.append(inwd);\n    }\n  break;\ncase 'A':if (inwd[1] == 'E') {\n  local.append(inwd,1,inwd.length - 1);\n}\n else {\n  local.append(inwd);\n}\nbreak;\ncase 'W':if (inwd[1] == 'R') {\nlocal.append(inwd,1,inwd.length - 1);\nbreak;\n}\nif (inwd[1] == 'H') {\nlocal.append(inwd,1,inwd.length - 1);\nlocal.setCharAt(0,'W');\n}\n else {\nlocal.append(inwd);\n}\nbreak;\ncase 'X':inwd[0]='S';\nlocal.append(inwd);\nbreak;\ndefault:local.append(inwd);\n}\nfinal int wdsz=local.length();\nint n=0;\nwhile (code.length() < this.getMaxCodeLen() && n < wdsz) {\nfinal char symb=local.charAt(n);\nif (symb != 'C' && isPreviousChar(local,n,symb)) {\nn++;\n}\n else {\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':if (n == 0) {\ncode.append(symb);\n}\nbreak;\ncase 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\nbreak;\n}\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\nif (code.length() > this.getMaxCodeLen()) {\ncode.setLength(this.getMaxCodeLen());\n}\n}\nreturn code.toString();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 853,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 9875,
                        "startLineNumber": 82,
                        "startColumnNumber": 4,
                        "endLineNumber": 335,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Find the metaphone value of a String. This is similar to the soundex algorithm, but better at finding similar sounding words. All input is converted to upper case. Limitations: Input format is expected to be a single ASCII word with only characters in the A - Z range, no punctuation or numbers.\n * @param txt String to find the metaphone code for\n * @return A metaphone code corresponding to the String supplied\n */\npublic String metaphone(final String txt){\n  boolean hard=false;\n  if (txt == null || txt.length() == 0) {\n    return \"\";\n  }\n  if (txt.length() == 1) {\n    return txt.toUpperCase(java.util.Locale.ENGLISH);\n  }\n  final char[] inwd=txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray();\n  final StringBuilder local=new StringBuilder(40);\n  final StringBuilder code=new StringBuilder(10);\nswitch (inwd[0]) {\ncase 'K':case 'G':case 'P':    if (inwd[1] == 'N') {\n      local.append(inwd,1,inwd.length - 1);\n    }\n else {\n      local.append(inwd);\n    }\n  break;\ncase 'A':if (inwd[1] == 'E') {\n  local.append(inwd,1,inwd.length - 1);\n}\n else {\n  local.append(inwd);\n}\nbreak;\ncase 'W':if (inwd[1] == 'R') {\nlocal.append(inwd,1,inwd.length - 1);\nbreak;\n}\nif (inwd[1] == 'H') {\nlocal.append(inwd,1,inwd.length - 1);\nlocal.setCharAt(0,'W');\n}\n else {\nlocal.append(inwd);\n}\nbreak;\ncase 'X':inwd[0]='S';\nlocal.append(inwd);\nbreak;\ndefault:local.append(inwd);\n}\nfinal int wdsz=local.length();\nint n=0;\nwhile (code.length() < this.getMaxCodeLen() && n < wdsz) {\nfinal char symb=local.charAt(n);\nif (symb != 'C' && isPreviousChar(local,n,symb)) {\nn++;\n}\n else {\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':if (n == 0) {\ncode.append(symb);\n}\nbreak;\ncase 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\nbreak;\n}\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\nif (code.length() > this.getMaxCodeLen()) {\ncode.setLength(this.getMaxCodeLen());\n}\n}\nreturn code.toString();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 864,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                "nodePosition": {
                    "charLength": 40,
                    "startLineNumber": 183,
                    "startColumnNumber": 24,
                    "endLineNumber": 183,
                    "endColumnNumber": 64
                },
                "nodeContext": "FRONTV.indexOf(local.charAt(n + 1)) >= 0",
                "nodeType": "InfixExpression",
                "astNodeNumber": 11,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "0",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 193,
                "startColumnNumber": 33,
                "endLineNumber": 193,
                "endColumnNumber": 34
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 6,
                        "startLineNumber": 193,
                        "startColumnNumber": 28,
                        "endLineNumber": 193,
                        "endColumnNumber": 34
                    },
                    "nodeContext": "n == 0",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 48,
                        "startLineNumber": 193,
                        "startColumnNumber": 28,
                        "endLineNumber": 194,
                        "endColumnNumber": 37
                    },
                    "nodeContext": "n == 0 && wdsz >= 3",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 97,
                        "startLineNumber": 193,
                        "startColumnNumber": 28,
                        "endLineNumber": 195,
                        "endColumnNumber": 44
                    },
                    "nodeContext": "n == 0 && wdsz >= 3 && isVowel(local,2)",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 12,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 307,
                        "startLineNumber": 193,
                        "startColumnNumber": 24,
                        "endLineNumber": 199,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "if (n == 0 && wdsz >= 3 && isVowel(local,2)) {\n  code.append('K');\n}\n else {\n  code.append('X');\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 25,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 370,
                        "startLineNumber": 192,
                        "startColumnNumber": 51,
                        "endLineNumber": 200,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  if (n == 0 && wdsz >= 3 && isVowel(local,2)) {\n    code.append('K');\n  }\n else {\n    code.append('X');\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 26,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
                    "nodePosition": {
                        "charLength": 474,
                        "startLineNumber": 192,
                        "startColumnNumber": 20,
                        "endLineNumber": 202,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (isNextChar(local,n,'H')) {\n  if (n == 0 && wdsz >= 3 && isVowel(local,2)) {\n    code.append('K');\n  }\n else {\n    code.append('X');\n  }\n}\n else {\n  code.append('K');\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 38,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6923,
                        "startLineNumber": 154,
                        "startColumnNumber": 16,
                        "endLineNumber": 327,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "switch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':  if (n == 0) {\n    code.append(symb);\n  }\nbreak;\ncase 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\nbreak;\n}\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\n",
                    "nodeType": "SwitchStatement",
                    "astNodeNumber": 570,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 7004,
                        "startLineNumber": 153,
                        "startColumnNumber": 19,
                        "endLineNumber": 329,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':    if (n == 0) {\n      code.append(symb);\n    }\n  break;\ncase 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\n  break;\n}\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 574,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 7102,
                        "startLineNumber": 151,
                        "startColumnNumber": 12,
                        "endLineNumber": 329,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (symb != 'C' && isPreviousChar(local,n,symb)) {\n  n++;\n}\n else {\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':    if (n == 0) {\n      code.append(symb);\n    }\n  break;\ncase 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\n  break;\n}\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 588,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 7415,
                        "startLineNumber": 148,
                        "startColumnNumber": 26,
                        "endLineNumber": 333,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final char symb=local.charAt(n);\n  if (symb != 'C' && isPreviousChar(local,n,symb)) {\n    n++;\n  }\n else {\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':      if (n == 0) {\n        code.append(symb);\n      }\n    break;\ncase 'B':  if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\n    break;\n  }\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\nif (code.length() > this.getMaxCodeLen()) {\ncode.setLength(this.getMaxCodeLen());\n}\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 614,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 7489,
                        "startLineNumber": 147,
                        "startColumnNumber": 8,
                        "endLineNumber": 333,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (code.length() < this.getMaxCodeLen() && n < wdsz) {\n  final char symb=local.charAt(n);\n  if (symb != 'C' && isPreviousChar(local,n,symb)) {\n    n++;\n  }\n else {\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':      if (n == 0) {\n        code.append(symb);\n      }\n    break;\ncase 'B':  if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\n    break;\n  }\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\nif (code.length() > this.getMaxCodeLen()) {\ncode.setLength(this.getMaxCodeLen());\n}\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 626,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 9344,
                        "startLineNumber": 92,
                        "startColumnNumber": 46,
                        "endLineNumber": 335,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  boolean hard=false;\n  if (txt == null || txt.length() == 0) {\n    return \"\";\n  }\n  if (txt.length() == 1) {\n    return txt.toUpperCase(java.util.Locale.ENGLISH);\n  }\n  final char[] inwd=txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray();\n  final StringBuilder local=new StringBuilder(40);\n  final StringBuilder code=new StringBuilder(10);\nswitch (inwd[0]) {\ncase 'K':case 'G':case 'P':    if (inwd[1] == 'N') {\n      local.append(inwd,1,inwd.length - 1);\n    }\n else {\n      local.append(inwd);\n    }\n  break;\ncase 'A':if (inwd[1] == 'E') {\n  local.append(inwd,1,inwd.length - 1);\n}\n else {\n  local.append(inwd);\n}\nbreak;\ncase 'W':if (inwd[1] == 'R') {\nlocal.append(inwd,1,inwd.length - 1);\nbreak;\n}\nif (inwd[1] == 'H') {\nlocal.append(inwd,1,inwd.length - 1);\nlocal.setCharAt(0,'W');\n}\n else {\nlocal.append(inwd);\n}\nbreak;\ncase 'X':inwd[0]='S';\nlocal.append(inwd);\nbreak;\ndefault:local.append(inwd);\n}\nfinal int wdsz=local.length();\nint n=0;\nwhile (code.length() < this.getMaxCodeLen() && n < wdsz) {\nfinal char symb=local.charAt(n);\nif (symb != 'C' && isPreviousChar(local,n,symb)) {\nn++;\n}\n else {\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':if (n == 0) {\ncode.append(symb);\n}\nbreak;\ncase 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\nbreak;\n}\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\nif (code.length() > this.getMaxCodeLen()) {\ncode.setLength(this.getMaxCodeLen());\n}\n}\nreturn code.toString();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 853,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 9875,
                        "startLineNumber": 82,
                        "startColumnNumber": 4,
                        "endLineNumber": 335,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Find the metaphone value of a String. This is similar to the soundex algorithm, but better at finding similar sounding words. All input is converted to upper case. Limitations: Input format is expected to be a single ASCII word with only characters in the A - Z range, no punctuation or numbers.\n * @param txt String to find the metaphone code for\n * @return A metaphone code corresponding to the String supplied\n */\npublic String metaphone(final String txt){\n  boolean hard=false;\n  if (txt == null || txt.length() == 0) {\n    return \"\";\n  }\n  if (txt.length() == 1) {\n    return txt.toUpperCase(java.util.Locale.ENGLISH);\n  }\n  final char[] inwd=txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray();\n  final StringBuilder local=new StringBuilder(40);\n  final StringBuilder code=new StringBuilder(10);\nswitch (inwd[0]) {\ncase 'K':case 'G':case 'P':    if (inwd[1] == 'N') {\n      local.append(inwd,1,inwd.length - 1);\n    }\n else {\n      local.append(inwd);\n    }\n  break;\ncase 'A':if (inwd[1] == 'E') {\n  local.append(inwd,1,inwd.length - 1);\n}\n else {\n  local.append(inwd);\n}\nbreak;\ncase 'W':if (inwd[1] == 'R') {\nlocal.append(inwd,1,inwd.length - 1);\nbreak;\n}\nif (inwd[1] == 'H') {\nlocal.append(inwd,1,inwd.length - 1);\nlocal.setCharAt(0,'W');\n}\n else {\nlocal.append(inwd);\n}\nbreak;\ncase 'X':inwd[0]='S';\nlocal.append(inwd);\nbreak;\ndefault:local.append(inwd);\n}\nfinal int wdsz=local.length();\nint n=0;\nwhile (code.length() < this.getMaxCodeLen() && n < wdsz) {\nfinal char symb=local.charAt(n);\nif (symb != 'C' && isPreviousChar(local,n,symb)) {\nn++;\n}\n else {\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':if (n == 0) {\ncode.append(symb);\n}\nbreak;\ncase 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\nbreak;\n}\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\nif (code.length() > this.getMaxCodeLen()) {\ncode.setLength(this.getMaxCodeLen());\n}\n}\nreturn code.toString();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 864,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                "nodePosition": {
                    "charLength": 6,
                    "startLineNumber": 193,
                    "startColumnNumber": 28,
                    "endLineNumber": 193,
                    "endColumnNumber": 34
                },
                "nodeContext": "n == 0",
                "nodeType": "InfixExpression",
                "astNodeNumber": 3,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "0",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 207,
                "startColumnNumber": 63,
                "endLineNumber": 207,
                "endColumnNumber": 64
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.InfixExpression,extendedOperands]",
                    "nodePosition": {
                        "charLength": 40,
                        "startLineNumber": 207,
                        "startColumnNumber": 24,
                        "endLineNumber": 207,
                        "endColumnNumber": 64
                    },
                    "nodeContext": "FRONTV.indexOf(local.charAt(n + 2)) >= 0",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 11,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 147,
                        "startLineNumber": 205,
                        "startColumnNumber": 24,
                        "endLineNumber": 207,
                        "endColumnNumber": 64
                    },
                    "nodeContext": "!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 24,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
                    "nodePosition": {
                        "charLength": 321,
                        "startLineNumber": 205,
                        "startColumnNumber": 20,
                        "endLineNumber": 211,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\n  code.append('J');\n  n+=2;\n}\n else {\n  code.append('T');\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 41,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6923,
                        "startLineNumber": 154,
                        "startColumnNumber": 16,
                        "endLineNumber": 327,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "switch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':  if (n == 0) {\n    code.append(symb);\n  }\nbreak;\ncase 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\nbreak;\n}\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\n",
                    "nodeType": "SwitchStatement",
                    "astNodeNumber": 570,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 7004,
                        "startLineNumber": 153,
                        "startColumnNumber": 19,
                        "endLineNumber": 329,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':    if (n == 0) {\n      code.append(symb);\n    }\n  break;\ncase 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\n  break;\n}\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 574,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 7102,
                        "startLineNumber": 151,
                        "startColumnNumber": 12,
                        "endLineNumber": 329,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (symb != 'C' && isPreviousChar(local,n,symb)) {\n  n++;\n}\n else {\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':    if (n == 0) {\n      code.append(symb);\n    }\n  break;\ncase 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\n  break;\n}\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 588,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 7415,
                        "startLineNumber": 148,
                        "startColumnNumber": 26,
                        "endLineNumber": 333,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final char symb=local.charAt(n);\n  if (symb != 'C' && isPreviousChar(local,n,symb)) {\n    n++;\n  }\n else {\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':      if (n == 0) {\n        code.append(symb);\n      }\n    break;\ncase 'B':  if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\n    break;\n  }\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\nif (code.length() > this.getMaxCodeLen()) {\ncode.setLength(this.getMaxCodeLen());\n}\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 614,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 7489,
                        "startLineNumber": 147,
                        "startColumnNumber": 8,
                        "endLineNumber": 333,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (code.length() < this.getMaxCodeLen() && n < wdsz) {\n  final char symb=local.charAt(n);\n  if (symb != 'C' && isPreviousChar(local,n,symb)) {\n    n++;\n  }\n else {\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':      if (n == 0) {\n        code.append(symb);\n      }\n    break;\ncase 'B':  if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\n    break;\n  }\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\nif (code.length() > this.getMaxCodeLen()) {\ncode.setLength(this.getMaxCodeLen());\n}\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 626,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 9344,
                        "startLineNumber": 92,
                        "startColumnNumber": 46,
                        "endLineNumber": 335,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  boolean hard=false;\n  if (txt == null || txt.length() == 0) {\n    return \"\";\n  }\n  if (txt.length() == 1) {\n    return txt.toUpperCase(java.util.Locale.ENGLISH);\n  }\n  final char[] inwd=txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray();\n  final StringBuilder local=new StringBuilder(40);\n  final StringBuilder code=new StringBuilder(10);\nswitch (inwd[0]) {\ncase 'K':case 'G':case 'P':    if (inwd[1] == 'N') {\n      local.append(inwd,1,inwd.length - 1);\n    }\n else {\n      local.append(inwd);\n    }\n  break;\ncase 'A':if (inwd[1] == 'E') {\n  local.append(inwd,1,inwd.length - 1);\n}\n else {\n  local.append(inwd);\n}\nbreak;\ncase 'W':if (inwd[1] == 'R') {\nlocal.append(inwd,1,inwd.length - 1);\nbreak;\n}\nif (inwd[1] == 'H') {\nlocal.append(inwd,1,inwd.length - 1);\nlocal.setCharAt(0,'W');\n}\n else {\nlocal.append(inwd);\n}\nbreak;\ncase 'X':inwd[0]='S';\nlocal.append(inwd);\nbreak;\ndefault:local.append(inwd);\n}\nfinal int wdsz=local.length();\nint n=0;\nwhile (code.length() < this.getMaxCodeLen() && n < wdsz) {\nfinal char symb=local.charAt(n);\nif (symb != 'C' && isPreviousChar(local,n,symb)) {\nn++;\n}\n else {\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':if (n == 0) {\ncode.append(symb);\n}\nbreak;\ncase 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\nbreak;\n}\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\nif (code.length() > this.getMaxCodeLen()) {\ncode.setLength(this.getMaxCodeLen());\n}\n}\nreturn code.toString();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 853,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 9875,
                        "startLineNumber": 82,
                        "startColumnNumber": 4,
                        "endLineNumber": 335,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Find the metaphone value of a String. This is similar to the soundex algorithm, but better at finding similar sounding words. All input is converted to upper case. Limitations: Input format is expected to be a single ASCII word with only characters in the A - Z range, no punctuation or numbers.\n * @param txt String to find the metaphone code for\n * @return A metaphone code corresponding to the String supplied\n */\npublic String metaphone(final String txt){\n  boolean hard=false;\n  if (txt == null || txt.length() == 0) {\n    return \"\";\n  }\n  if (txt.length() == 1) {\n    return txt.toUpperCase(java.util.Locale.ENGLISH);\n  }\n  final char[] inwd=txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray();\n  final StringBuilder local=new StringBuilder(40);\n  final StringBuilder code=new StringBuilder(10);\nswitch (inwd[0]) {\ncase 'K':case 'G':case 'P':    if (inwd[1] == 'N') {\n      local.append(inwd,1,inwd.length - 1);\n    }\n else {\n      local.append(inwd);\n    }\n  break;\ncase 'A':if (inwd[1] == 'E') {\n  local.append(inwd,1,inwd.length - 1);\n}\n else {\n  local.append(inwd);\n}\nbreak;\ncase 'W':if (inwd[1] == 'R') {\nlocal.append(inwd,1,inwd.length - 1);\nbreak;\n}\nif (inwd[1] == 'H') {\nlocal.append(inwd,1,inwd.length - 1);\nlocal.setCharAt(0,'W');\n}\n else {\nlocal.append(inwd);\n}\nbreak;\ncase 'X':inwd[0]='S';\nlocal.append(inwd);\nbreak;\ndefault:local.append(inwd);\n}\nfinal int wdsz=local.length();\nint n=0;\nwhile (code.length() < this.getMaxCodeLen() && n < wdsz) {\nfinal char symb=local.charAt(n);\nif (symb != 'C' && isPreviousChar(local,n,symb)) {\nn++;\n}\n else {\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':if (n == 0) {\ncode.append(symb);\n}\nbreak;\ncase 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\nbreak;\n}\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\nif (code.length() > this.getMaxCodeLen()) {\ncode.setLength(this.getMaxCodeLen());\n}\n}\nreturn code.toString();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 864,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.InfixExpression,extendedOperands]",
                "nodePosition": {
                    "charLength": 40,
                    "startLineNumber": 207,
                    "startColumnNumber": 24,
                    "endLineNumber": 207,
                    "endColumnNumber": 64
                },
                "nodeContext": "FRONTV.indexOf(local.charAt(n + 2)) >= 0",
                "nodeType": "InfixExpression",
                "astNodeNumber": 11,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "0",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 223,
                "startColumnNumber": 28,
                "endLineNumber": 223,
                "endColumnNumber": 29
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 5,
                        "startLineNumber": 223,
                        "startColumnNumber": 24,
                        "endLineNumber": 223,
                        "endColumnNumber": 29
                    },
                    "nodeContext": "n > 0",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 125,
                        "startLineNumber": 223,
                        "startColumnNumber": 24,
                        "endLineNumber": 225,
                        "endColumnNumber": 57
                    },
                    "nodeContext": "n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 16,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
                    "nodePosition": {
                        "charLength": 200,
                        "startLineNumber": 223,
                        "startColumnNumber": 20,
                        "endLineNumber": 227,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\n  break;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 19,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6923,
                        "startLineNumber": 154,
                        "startColumnNumber": 16,
                        "endLineNumber": 327,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "switch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':  if (n == 0) {\n    code.append(symb);\n  }\nbreak;\ncase 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\nbreak;\n}\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\n",
                    "nodeType": "SwitchStatement",
                    "astNodeNumber": 570,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 7004,
                        "startLineNumber": 153,
                        "startColumnNumber": 19,
                        "endLineNumber": 329,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':    if (n == 0) {\n      code.append(symb);\n    }\n  break;\ncase 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\n  break;\n}\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 574,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 7102,
                        "startLineNumber": 151,
                        "startColumnNumber": 12,
                        "endLineNumber": 329,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (symb != 'C' && isPreviousChar(local,n,symb)) {\n  n++;\n}\n else {\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':    if (n == 0) {\n      code.append(symb);\n    }\n  break;\ncase 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\n  break;\n}\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 588,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 7415,
                        "startLineNumber": 148,
                        "startColumnNumber": 26,
                        "endLineNumber": 333,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final char symb=local.charAt(n);\n  if (symb != 'C' && isPreviousChar(local,n,symb)) {\n    n++;\n  }\n else {\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':      if (n == 0) {\n        code.append(symb);\n      }\n    break;\ncase 'B':  if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\n    break;\n  }\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\nif (code.length() > this.getMaxCodeLen()) {\ncode.setLength(this.getMaxCodeLen());\n}\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 614,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 7489,
                        "startLineNumber": 147,
                        "startColumnNumber": 8,
                        "endLineNumber": 333,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (code.length() < this.getMaxCodeLen() && n < wdsz) {\n  final char symb=local.charAt(n);\n  if (symb != 'C' && isPreviousChar(local,n,symb)) {\n    n++;\n  }\n else {\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':      if (n == 0) {\n        code.append(symb);\n      }\n    break;\ncase 'B':  if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\n    break;\n  }\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\nif (code.length() > this.getMaxCodeLen()) {\ncode.setLength(this.getMaxCodeLen());\n}\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 626,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 9344,
                        "startLineNumber": 92,
                        "startColumnNumber": 46,
                        "endLineNumber": 335,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  boolean hard=false;\n  if (txt == null || txt.length() == 0) {\n    return \"\";\n  }\n  if (txt.length() == 1) {\n    return txt.toUpperCase(java.util.Locale.ENGLISH);\n  }\n  final char[] inwd=txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray();\n  final StringBuilder local=new StringBuilder(40);\n  final StringBuilder code=new StringBuilder(10);\nswitch (inwd[0]) {\ncase 'K':case 'G':case 'P':    if (inwd[1] == 'N') {\n      local.append(inwd,1,inwd.length - 1);\n    }\n else {\n      local.append(inwd);\n    }\n  break;\ncase 'A':if (inwd[1] == 'E') {\n  local.append(inwd,1,inwd.length - 1);\n}\n else {\n  local.append(inwd);\n}\nbreak;\ncase 'W':if (inwd[1] == 'R') {\nlocal.append(inwd,1,inwd.length - 1);\nbreak;\n}\nif (inwd[1] == 'H') {\nlocal.append(inwd,1,inwd.length - 1);\nlocal.setCharAt(0,'W');\n}\n else {\nlocal.append(inwd);\n}\nbreak;\ncase 'X':inwd[0]='S';\nlocal.append(inwd);\nbreak;\ndefault:local.append(inwd);\n}\nfinal int wdsz=local.length();\nint n=0;\nwhile (code.length() < this.getMaxCodeLen() && n < wdsz) {\nfinal char symb=local.charAt(n);\nif (symb != 'C' && isPreviousChar(local,n,symb)) {\nn++;\n}\n else {\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':if (n == 0) {\ncode.append(symb);\n}\nbreak;\ncase 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\nbreak;\n}\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\nif (code.length() > this.getMaxCodeLen()) {\ncode.setLength(this.getMaxCodeLen());\n}\n}\nreturn code.toString();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 853,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 9875,
                        "startLineNumber": 82,
                        "startColumnNumber": 4,
                        "endLineNumber": 335,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Find the metaphone value of a String. This is similar to the soundex algorithm, but better at finding similar sounding words. All input is converted to upper case. Limitations: Input format is expected to be a single ASCII word with only characters in the A - Z range, no punctuation or numbers.\n * @param txt String to find the metaphone code for\n * @return A metaphone code corresponding to the String supplied\n */\npublic String metaphone(final String txt){\n  boolean hard=false;\n  if (txt == null || txt.length() == 0) {\n    return \"\";\n  }\n  if (txt.length() == 1) {\n    return txt.toUpperCase(java.util.Locale.ENGLISH);\n  }\n  final char[] inwd=txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray();\n  final StringBuilder local=new StringBuilder(40);\n  final StringBuilder code=new StringBuilder(10);\nswitch (inwd[0]) {\ncase 'K':case 'G':case 'P':    if (inwd[1] == 'N') {\n      local.append(inwd,1,inwd.length - 1);\n    }\n else {\n      local.append(inwd);\n    }\n  break;\ncase 'A':if (inwd[1] == 'E') {\n  local.append(inwd,1,inwd.length - 1);\n}\n else {\n  local.append(inwd);\n}\nbreak;\ncase 'W':if (inwd[1] == 'R') {\nlocal.append(inwd,1,inwd.length - 1);\nbreak;\n}\nif (inwd[1] == 'H') {\nlocal.append(inwd,1,inwd.length - 1);\nlocal.setCharAt(0,'W');\n}\n else {\nlocal.append(inwd);\n}\nbreak;\ncase 'X':inwd[0]='S';\nlocal.append(inwd);\nbreak;\ndefault:local.append(inwd);\n}\nfinal int wdsz=local.length();\nint n=0;\nwhile (code.length() < this.getMaxCodeLen() && n < wdsz) {\nfinal char symb=local.charAt(n);\nif (symb != 'C' && isPreviousChar(local,n,symb)) {\nn++;\n}\n else {\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':if (n == 0) {\ncode.append(symb);\n}\nbreak;\ncase 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\nbreak;\n}\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\nif (code.length() > this.getMaxCodeLen()) {\ncode.setLength(this.getMaxCodeLen());\n}\n}\nreturn code.toString();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 864,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                "nodePosition": {
                    "charLength": 5,
                    "startLineNumber": 223,
                    "startColumnNumber": 24,
                    "endLineNumber": 223,
                    "endColumnNumber": 29
                },
                "nodeContext": "n > 0",
                "nodeType": "InfixExpression",
                "astNodeNumber": 3,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "0",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 235,
                "startColumnNumber": 63,
                "endLineNumber": 235,
                "endColumnNumber": 64
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 40,
                        "startLineNumber": 235,
                        "startColumnNumber": 24,
                        "endLineNumber": 235,
                        "endColumnNumber": 64
                    },
                    "nodeContext": "FRONTV.indexOf(local.charAt(n + 1)) >= 0",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 11,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 89,
                        "startLineNumber": 234,
                        "startColumnNumber": 24,
                        "endLineNumber": 235,
                        "endColumnNumber": 64
                    },
                    "nodeContext": "!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 17,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 123,
                        "startLineNumber": 234,
                        "startColumnNumber": 24,
                        "endLineNumber": 236,
                        "endColumnNumber": 29
                    },
                    "nodeContext": "!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 20,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
                    "nodePosition": {
                        "charLength": 269,
                        "startLineNumber": 234,
                        "startColumnNumber": 20,
                        "endLineNumber": 240,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\n  code.append('J');\n}\n else {\n  code.append('K');\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 33,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6923,
                        "startLineNumber": 154,
                        "startColumnNumber": 16,
                        "endLineNumber": 327,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "switch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':  if (n == 0) {\n    code.append(symb);\n  }\nbreak;\ncase 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\nbreak;\n}\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\n",
                    "nodeType": "SwitchStatement",
                    "astNodeNumber": 570,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 7004,
                        "startLineNumber": 153,
                        "startColumnNumber": 19,
                        "endLineNumber": 329,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':    if (n == 0) {\n      code.append(symb);\n    }\n  break;\ncase 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\n  break;\n}\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 574,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 7102,
                        "startLineNumber": 151,
                        "startColumnNumber": 12,
                        "endLineNumber": 329,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (symb != 'C' && isPreviousChar(local,n,symb)) {\n  n++;\n}\n else {\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':    if (n == 0) {\n      code.append(symb);\n    }\n  break;\ncase 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\n  break;\n}\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 588,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 7415,
                        "startLineNumber": 148,
                        "startColumnNumber": 26,
                        "endLineNumber": 333,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final char symb=local.charAt(n);\n  if (symb != 'C' && isPreviousChar(local,n,symb)) {\n    n++;\n  }\n else {\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':      if (n == 0) {\n        code.append(symb);\n      }\n    break;\ncase 'B':  if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\n    break;\n  }\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\nif (code.length() > this.getMaxCodeLen()) {\ncode.setLength(this.getMaxCodeLen());\n}\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 614,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 7489,
                        "startLineNumber": 147,
                        "startColumnNumber": 8,
                        "endLineNumber": 333,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (code.length() < this.getMaxCodeLen() && n < wdsz) {\n  final char symb=local.charAt(n);\n  if (symb != 'C' && isPreviousChar(local,n,symb)) {\n    n++;\n  }\n else {\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':      if (n == 0) {\n        code.append(symb);\n      }\n    break;\ncase 'B':  if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\n    break;\n  }\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\nif (code.length() > this.getMaxCodeLen()) {\ncode.setLength(this.getMaxCodeLen());\n}\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 626,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 9344,
                        "startLineNumber": 92,
                        "startColumnNumber": 46,
                        "endLineNumber": 335,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  boolean hard=false;\n  if (txt == null || txt.length() == 0) {\n    return \"\";\n  }\n  if (txt.length() == 1) {\n    return txt.toUpperCase(java.util.Locale.ENGLISH);\n  }\n  final char[] inwd=txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray();\n  final StringBuilder local=new StringBuilder(40);\n  final StringBuilder code=new StringBuilder(10);\nswitch (inwd[0]) {\ncase 'K':case 'G':case 'P':    if (inwd[1] == 'N') {\n      local.append(inwd,1,inwd.length - 1);\n    }\n else {\n      local.append(inwd);\n    }\n  break;\ncase 'A':if (inwd[1] == 'E') {\n  local.append(inwd,1,inwd.length - 1);\n}\n else {\n  local.append(inwd);\n}\nbreak;\ncase 'W':if (inwd[1] == 'R') {\nlocal.append(inwd,1,inwd.length - 1);\nbreak;\n}\nif (inwd[1] == 'H') {\nlocal.append(inwd,1,inwd.length - 1);\nlocal.setCharAt(0,'W');\n}\n else {\nlocal.append(inwd);\n}\nbreak;\ncase 'X':inwd[0]='S';\nlocal.append(inwd);\nbreak;\ndefault:local.append(inwd);\n}\nfinal int wdsz=local.length();\nint n=0;\nwhile (code.length() < this.getMaxCodeLen() && n < wdsz) {\nfinal char symb=local.charAt(n);\nif (symb != 'C' && isPreviousChar(local,n,symb)) {\nn++;\n}\n else {\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':if (n == 0) {\ncode.append(symb);\n}\nbreak;\ncase 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\nbreak;\n}\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\nif (code.length() > this.getMaxCodeLen()) {\ncode.setLength(this.getMaxCodeLen());\n}\n}\nreturn code.toString();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 853,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 9875,
                        "startLineNumber": 82,
                        "startColumnNumber": 4,
                        "endLineNumber": 335,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Find the metaphone value of a String. This is similar to the soundex algorithm, but better at finding similar sounding words. All input is converted to upper case. Limitations: Input format is expected to be a single ASCII word with only characters in the A - Z range, no punctuation or numbers.\n * @param txt String to find the metaphone code for\n * @return A metaphone code corresponding to the String supplied\n */\npublic String metaphone(final String txt){\n  boolean hard=false;\n  if (txt == null || txt.length() == 0) {\n    return \"\";\n  }\n  if (txt.length() == 1) {\n    return txt.toUpperCase(java.util.Locale.ENGLISH);\n  }\n  final char[] inwd=txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray();\n  final StringBuilder local=new StringBuilder(40);\n  final StringBuilder code=new StringBuilder(10);\nswitch (inwd[0]) {\ncase 'K':case 'G':case 'P':    if (inwd[1] == 'N') {\n      local.append(inwd,1,inwd.length - 1);\n    }\n else {\n      local.append(inwd);\n    }\n  break;\ncase 'A':if (inwd[1] == 'E') {\n  local.append(inwd,1,inwd.length - 1);\n}\n else {\n  local.append(inwd);\n}\nbreak;\ncase 'W':if (inwd[1] == 'R') {\nlocal.append(inwd,1,inwd.length - 1);\nbreak;\n}\nif (inwd[1] == 'H') {\nlocal.append(inwd,1,inwd.length - 1);\nlocal.setCharAt(0,'W');\n}\n else {\nlocal.append(inwd);\n}\nbreak;\ncase 'X':inwd[0]='S';\nlocal.append(inwd);\nbreak;\ndefault:local.append(inwd);\n}\nfinal int wdsz=local.length();\nint n=0;\nwhile (code.length() < this.getMaxCodeLen() && n < wdsz) {\nfinal char symb=local.charAt(n);\nif (symb != 'C' && isPreviousChar(local,n,symb)) {\nn++;\n}\n else {\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':if (n == 0) {\ncode.append(symb);\n}\nbreak;\ncase 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\nbreak;\n}\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\nif (code.length() > this.getMaxCodeLen()) {\ncode.setLength(this.getMaxCodeLen());\n}\n}\nreturn code.toString();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 864,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                "nodePosition": {
                    "charLength": 40,
                    "startLineNumber": 235,
                    "startColumnNumber": 24,
                    "endLineNumber": 235,
                    "endColumnNumber": 64
                },
                "nodeContext": "FRONTV.indexOf(local.charAt(n + 1)) >= 0",
                "nodeType": "InfixExpression",
                "astNodeNumber": 11,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "0",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 246,
                "startColumnNumber": 28,
                "endLineNumber": 246,
                "endColumnNumber": 29
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 5,
                        "startLineNumber": 246,
                        "startColumnNumber": 24,
                        "endLineNumber": 246,
                        "endColumnNumber": 29
                    },
                    "nodeContext": "n > 0",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 74,
                        "startLineNumber": 246,
                        "startColumnNumber": 24,
                        "endLineNumber": 247,
                        "endColumnNumber": 64
                    },
                    "nodeContext": "n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 15,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
                    "nodePosition": {
                        "charLength": 136,
                        "startLineNumber": 246,
                        "startColumnNumber": 20,
                        "endLineNumber": 249,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\n  break;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 18,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6923,
                        "startLineNumber": 154,
                        "startColumnNumber": 16,
                        "endLineNumber": 327,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "switch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':  if (n == 0) {\n    code.append(symb);\n  }\nbreak;\ncase 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\nbreak;\n}\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\n",
                    "nodeType": "SwitchStatement",
                    "astNodeNumber": 570,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 7004,
                        "startLineNumber": 153,
                        "startColumnNumber": 19,
                        "endLineNumber": 329,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':    if (n == 0) {\n      code.append(symb);\n    }\n  break;\ncase 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\n  break;\n}\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 574,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 7102,
                        "startLineNumber": 151,
                        "startColumnNumber": 12,
                        "endLineNumber": 329,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (symb != 'C' && isPreviousChar(local,n,symb)) {\n  n++;\n}\n else {\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':    if (n == 0) {\n      code.append(symb);\n    }\n  break;\ncase 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\n  break;\n}\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 588,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 7415,
                        "startLineNumber": 148,
                        "startColumnNumber": 26,
                        "endLineNumber": 333,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final char symb=local.charAt(n);\n  if (symb != 'C' && isPreviousChar(local,n,symb)) {\n    n++;\n  }\n else {\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':      if (n == 0) {\n        code.append(symb);\n      }\n    break;\ncase 'B':  if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\n    break;\n  }\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\nif (code.length() > this.getMaxCodeLen()) {\ncode.setLength(this.getMaxCodeLen());\n}\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 614,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 7489,
                        "startLineNumber": 147,
                        "startColumnNumber": 8,
                        "endLineNumber": 333,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (code.length() < this.getMaxCodeLen() && n < wdsz) {\n  final char symb=local.charAt(n);\n  if (symb != 'C' && isPreviousChar(local,n,symb)) {\n    n++;\n  }\n else {\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':      if (n == 0) {\n        code.append(symb);\n      }\n    break;\ncase 'B':  if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\n    break;\n  }\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\nif (code.length() > this.getMaxCodeLen()) {\ncode.setLength(this.getMaxCodeLen());\n}\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 626,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 9344,
                        "startLineNumber": 92,
                        "startColumnNumber": 46,
                        "endLineNumber": 335,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  boolean hard=false;\n  if (txt == null || txt.length() == 0) {\n    return \"\";\n  }\n  if (txt.length() == 1) {\n    return txt.toUpperCase(java.util.Locale.ENGLISH);\n  }\n  final char[] inwd=txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray();\n  final StringBuilder local=new StringBuilder(40);\n  final StringBuilder code=new StringBuilder(10);\nswitch (inwd[0]) {\ncase 'K':case 'G':case 'P':    if (inwd[1] == 'N') {\n      local.append(inwd,1,inwd.length - 1);\n    }\n else {\n      local.append(inwd);\n    }\n  break;\ncase 'A':if (inwd[1] == 'E') {\n  local.append(inwd,1,inwd.length - 1);\n}\n else {\n  local.append(inwd);\n}\nbreak;\ncase 'W':if (inwd[1] == 'R') {\nlocal.append(inwd,1,inwd.length - 1);\nbreak;\n}\nif (inwd[1] == 'H') {\nlocal.append(inwd,1,inwd.length - 1);\nlocal.setCharAt(0,'W');\n}\n else {\nlocal.append(inwd);\n}\nbreak;\ncase 'X':inwd[0]='S';\nlocal.append(inwd);\nbreak;\ndefault:local.append(inwd);\n}\nfinal int wdsz=local.length();\nint n=0;\nwhile (code.length() < this.getMaxCodeLen() && n < wdsz) {\nfinal char symb=local.charAt(n);\nif (symb != 'C' && isPreviousChar(local,n,symb)) {\nn++;\n}\n else {\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':if (n == 0) {\ncode.append(symb);\n}\nbreak;\ncase 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\nbreak;\n}\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\nif (code.length() > this.getMaxCodeLen()) {\ncode.setLength(this.getMaxCodeLen());\n}\n}\nreturn code.toString();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 853,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 9875,
                        "startLineNumber": 82,
                        "startColumnNumber": 4,
                        "endLineNumber": 335,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Find the metaphone value of a String. This is similar to the soundex algorithm, but better at finding similar sounding words. All input is converted to upper case. Limitations: Input format is expected to be a single ASCII word with only characters in the A - Z range, no punctuation or numbers.\n * @param txt String to find the metaphone code for\n * @return A metaphone code corresponding to the String supplied\n */\npublic String metaphone(final String txt){\n  boolean hard=false;\n  if (txt == null || txt.length() == 0) {\n    return \"\";\n  }\n  if (txt.length() == 1) {\n    return txt.toUpperCase(java.util.Locale.ENGLISH);\n  }\n  final char[] inwd=txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray();\n  final StringBuilder local=new StringBuilder(40);\n  final StringBuilder code=new StringBuilder(10);\nswitch (inwd[0]) {\ncase 'K':case 'G':case 'P':    if (inwd[1] == 'N') {\n      local.append(inwd,1,inwd.length - 1);\n    }\n else {\n      local.append(inwd);\n    }\n  break;\ncase 'A':if (inwd[1] == 'E') {\n  local.append(inwd,1,inwd.length - 1);\n}\n else {\n  local.append(inwd);\n}\nbreak;\ncase 'W':if (inwd[1] == 'R') {\nlocal.append(inwd,1,inwd.length - 1);\nbreak;\n}\nif (inwd[1] == 'H') {\nlocal.append(inwd,1,inwd.length - 1);\nlocal.setCharAt(0,'W');\n}\n else {\nlocal.append(inwd);\n}\nbreak;\ncase 'X':inwd[0]='S';\nlocal.append(inwd);\nbreak;\ndefault:local.append(inwd);\n}\nfinal int wdsz=local.length();\nint n=0;\nwhile (code.length() < this.getMaxCodeLen() && n < wdsz) {\nfinal char symb=local.charAt(n);\nif (symb != 'C' && isPreviousChar(local,n,symb)) {\nn++;\n}\n else {\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':if (n == 0) {\ncode.append(symb);\n}\nbreak;\ncase 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\nbreak;\n}\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\nif (code.length() > this.getMaxCodeLen()) {\ncode.setLength(this.getMaxCodeLen());\n}\n}\nreturn code.toString();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 864,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                "nodePosition": {
                    "charLength": 5,
                    "startLineNumber": 246,
                    "startColumnNumber": 24,
                    "endLineNumber": 246,
                    "endColumnNumber": 29
                },
                "nodeContext": "n > 0",
                "nodeType": "InfixExpression",
                "astNodeNumber": 3,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "0",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 247,
                "startColumnNumber": 63,
                "endLineNumber": 247,
                "endColumnNumber": 64
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 40,
                        "startLineNumber": 247,
                        "startColumnNumber": 24,
                        "endLineNumber": 247,
                        "endColumnNumber": 64
                    },
                    "nodeContext": "VARSON.indexOf(local.charAt(n - 1)) >= 0",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 11,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 74,
                        "startLineNumber": 246,
                        "startColumnNumber": 24,
                        "endLineNumber": 247,
                        "endColumnNumber": 64
                    },
                    "nodeContext": "n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 15,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
                    "nodePosition": {
                        "charLength": 136,
                        "startLineNumber": 246,
                        "startColumnNumber": 20,
                        "endLineNumber": 249,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\n  break;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 18,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6923,
                        "startLineNumber": 154,
                        "startColumnNumber": 16,
                        "endLineNumber": 327,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "switch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':  if (n == 0) {\n    code.append(symb);\n  }\nbreak;\ncase 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\nbreak;\n}\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\n",
                    "nodeType": "SwitchStatement",
                    "astNodeNumber": 570,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 7004,
                        "startLineNumber": 153,
                        "startColumnNumber": 19,
                        "endLineNumber": 329,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':    if (n == 0) {\n      code.append(symb);\n    }\n  break;\ncase 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\n  break;\n}\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 574,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 7102,
                        "startLineNumber": 151,
                        "startColumnNumber": 12,
                        "endLineNumber": 329,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (symb != 'C' && isPreviousChar(local,n,symb)) {\n  n++;\n}\n else {\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':    if (n == 0) {\n      code.append(symb);\n    }\n  break;\ncase 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\n  break;\n}\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 588,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 7415,
                        "startLineNumber": 148,
                        "startColumnNumber": 26,
                        "endLineNumber": 333,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final char symb=local.charAt(n);\n  if (symb != 'C' && isPreviousChar(local,n,symb)) {\n    n++;\n  }\n else {\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':      if (n == 0) {\n        code.append(symb);\n      }\n    break;\ncase 'B':  if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\n    break;\n  }\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\nif (code.length() > this.getMaxCodeLen()) {\ncode.setLength(this.getMaxCodeLen());\n}\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 614,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 7489,
                        "startLineNumber": 147,
                        "startColumnNumber": 8,
                        "endLineNumber": 333,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (code.length() < this.getMaxCodeLen() && n < wdsz) {\n  final char symb=local.charAt(n);\n  if (symb != 'C' && isPreviousChar(local,n,symb)) {\n    n++;\n  }\n else {\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':      if (n == 0) {\n        code.append(symb);\n      }\n    break;\ncase 'B':  if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\n    break;\n  }\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\nif (code.length() > this.getMaxCodeLen()) {\ncode.setLength(this.getMaxCodeLen());\n}\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 626,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 9344,
                        "startLineNumber": 92,
                        "startColumnNumber": 46,
                        "endLineNumber": 335,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  boolean hard=false;\n  if (txt == null || txt.length() == 0) {\n    return \"\";\n  }\n  if (txt.length() == 1) {\n    return txt.toUpperCase(java.util.Locale.ENGLISH);\n  }\n  final char[] inwd=txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray();\n  final StringBuilder local=new StringBuilder(40);\n  final StringBuilder code=new StringBuilder(10);\nswitch (inwd[0]) {\ncase 'K':case 'G':case 'P':    if (inwd[1] == 'N') {\n      local.append(inwd,1,inwd.length - 1);\n    }\n else {\n      local.append(inwd);\n    }\n  break;\ncase 'A':if (inwd[1] == 'E') {\n  local.append(inwd,1,inwd.length - 1);\n}\n else {\n  local.append(inwd);\n}\nbreak;\ncase 'W':if (inwd[1] == 'R') {\nlocal.append(inwd,1,inwd.length - 1);\nbreak;\n}\nif (inwd[1] == 'H') {\nlocal.append(inwd,1,inwd.length - 1);\nlocal.setCharAt(0,'W');\n}\n else {\nlocal.append(inwd);\n}\nbreak;\ncase 'X':inwd[0]='S';\nlocal.append(inwd);\nbreak;\ndefault:local.append(inwd);\n}\nfinal int wdsz=local.length();\nint n=0;\nwhile (code.length() < this.getMaxCodeLen() && n < wdsz) {\nfinal char symb=local.charAt(n);\nif (symb != 'C' && isPreviousChar(local,n,symb)) {\nn++;\n}\n else {\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':if (n == 0) {\ncode.append(symb);\n}\nbreak;\ncase 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\nbreak;\n}\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\nif (code.length() > this.getMaxCodeLen()) {\ncode.setLength(this.getMaxCodeLen());\n}\n}\nreturn code.toString();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 853,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 9875,
                        "startLineNumber": 82,
                        "startColumnNumber": 4,
                        "endLineNumber": 335,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Find the metaphone value of a String. This is similar to the soundex algorithm, but better at finding similar sounding words. All input is converted to upper case. Limitations: Input format is expected to be a single ASCII word with only characters in the A - Z range, no punctuation or numbers.\n * @param txt String to find the metaphone code for\n * @return A metaphone code corresponding to the String supplied\n */\npublic String metaphone(final String txt){\n  boolean hard=false;\n  if (txt == null || txt.length() == 0) {\n    return \"\";\n  }\n  if (txt.length() == 1) {\n    return txt.toUpperCase(java.util.Locale.ENGLISH);\n  }\n  final char[] inwd=txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray();\n  final StringBuilder local=new StringBuilder(40);\n  final StringBuilder code=new StringBuilder(10);\nswitch (inwd[0]) {\ncase 'K':case 'G':case 'P':    if (inwd[1] == 'N') {\n      local.append(inwd,1,inwd.length - 1);\n    }\n else {\n      local.append(inwd);\n    }\n  break;\ncase 'A':if (inwd[1] == 'E') {\n  local.append(inwd,1,inwd.length - 1);\n}\n else {\n  local.append(inwd);\n}\nbreak;\ncase 'W':if (inwd[1] == 'R') {\nlocal.append(inwd,1,inwd.length - 1);\nbreak;\n}\nif (inwd[1] == 'H') {\nlocal.append(inwd,1,inwd.length - 1);\nlocal.setCharAt(0,'W');\n}\n else {\nlocal.append(inwd);\n}\nbreak;\ncase 'X':inwd[0]='S';\nlocal.append(inwd);\nbreak;\ndefault:local.append(inwd);\n}\nfinal int wdsz=local.length();\nint n=0;\nwhile (code.length() < this.getMaxCodeLen() && n < wdsz) {\nfinal char symb=local.charAt(n);\nif (symb != 'C' && isPreviousChar(local,n,symb)) {\nn++;\n}\n else {\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':if (n == 0) {\ncode.append(symb);\n}\nbreak;\ncase 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\nbreak;\n}\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\nif (code.length() > this.getMaxCodeLen()) {\ncode.setLength(this.getMaxCodeLen());\n}\n}\nreturn code.toString();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 864,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                "nodePosition": {
                    "charLength": 40,
                    "startLineNumber": 247,
                    "startColumnNumber": 24,
                    "endLineNumber": 247,
                    "endColumnNumber": 64
                },
                "nodeContext": "VARSON.indexOf(local.charAt(n - 1)) >= 0",
                "nodeType": "InfixExpression",
                "astNodeNumber": 11,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "0",
            "nodeType": "NumberLiteral",
            "nodePosition": {
                "charLength": 1,
                "startLineNumber": 263,
                "startColumnNumber": 28,
                "endLineNumber": 263,
                "endColumnNumber": 29
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 5,
                        "startLineNumber": 263,
                        "startColumnNumber": 24,
                        "endLineNumber": 263,
                        "endColumnNumber": 29
                    },
                    "nodeContext": "n > 0",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
                    "nodePosition": {
                        "charLength": 275,
                        "startLineNumber": 263,
                        "startColumnNumber": 20,
                        "endLineNumber": 269,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (n > 0) {\n  if (!isPreviousChar(local,n,'C')) {\n    code.append(symb);\n  }\n}\n else {\n  code.append(symb);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 24,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6923,
                        "startLineNumber": 154,
                        "startColumnNumber": 16,
                        "endLineNumber": 327,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "switch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':  if (n == 0) {\n    code.append(symb);\n  }\nbreak;\ncase 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\nbreak;\n}\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\n",
                    "nodeType": "SwitchStatement",
                    "astNodeNumber": 570,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 7004,
                        "startLineNumber": 153,
                        "startColumnNumber": 19,
                        "endLineNumber": 329,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':    if (n == 0) {\n      code.append(symb);\n    }\n  break;\ncase 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\n  break;\n}\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 574,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 7102,
                        "startLineNumber": 151,
                        "startColumnNumber": 12,
                        "endLineNumber": 329,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (symb != 'C' && isPreviousChar(local,n,symb)) {\n  n++;\n}\n else {\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':    if (n == 0) {\n      code.append(symb);\n    }\n  break;\ncase 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\n  break;\n}\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 588,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 7415,
                        "startLineNumber": 148,
                        "startColumnNumber": 26,
                        "endLineNumber": 333,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final char symb=local.charAt(n);\n  if (symb != 'C' && isPreviousChar(local,n,symb)) {\n    n++;\n  }\n else {\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':      if (n == 0) {\n        code.append(symb);\n      }\n    break;\ncase 'B':  if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\n    break;\n  }\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\nif (code.length() > this.getMaxCodeLen()) {\ncode.setLength(this.getMaxCodeLen());\n}\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 614,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 7489,
                        "startLineNumber": 147,
                        "startColumnNumber": 8,
                        "endLineNumber": 333,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (code.length() < this.getMaxCodeLen() && n < wdsz) {\n  final char symb=local.charAt(n);\n  if (symb != 'C' && isPreviousChar(local,n,symb)) {\n    n++;\n  }\n else {\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':      if (n == 0) {\n        code.append(symb);\n      }\n    break;\ncase 'B':  if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\n    break;\n  }\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\nif (code.length() > this.getMaxCodeLen()) {\ncode.setLength(this.getMaxCodeLen());\n}\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 626,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 9344,
                        "startLineNumber": 92,
                        "startColumnNumber": 46,
                        "endLineNumber": 335,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  boolean hard=false;\n  if (txt == null || txt.length() == 0) {\n    return \"\";\n  }\n  if (txt.length() == 1) {\n    return txt.toUpperCase(java.util.Locale.ENGLISH);\n  }\n  final char[] inwd=txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray();\n  final StringBuilder local=new StringBuilder(40);\n  final StringBuilder code=new StringBuilder(10);\nswitch (inwd[0]) {\ncase 'K':case 'G':case 'P':    if (inwd[1] == 'N') {\n      local.append(inwd,1,inwd.length - 1);\n    }\n else {\n      local.append(inwd);\n    }\n  break;\ncase 'A':if (inwd[1] == 'E') {\n  local.append(inwd,1,inwd.length - 1);\n}\n else {\n  local.append(inwd);\n}\nbreak;\ncase 'W':if (inwd[1] == 'R') {\nlocal.append(inwd,1,inwd.length - 1);\nbreak;\n}\nif (inwd[1] == 'H') {\nlocal.append(inwd,1,inwd.length - 1);\nlocal.setCharAt(0,'W');\n}\n else {\nlocal.append(inwd);\n}\nbreak;\ncase 'X':inwd[0]='S';\nlocal.append(inwd);\nbreak;\ndefault:local.append(inwd);\n}\nfinal int wdsz=local.length();\nint n=0;\nwhile (code.length() < this.getMaxCodeLen() && n < wdsz) {\nfinal char symb=local.charAt(n);\nif (symb != 'C' && isPreviousChar(local,n,symb)) {\nn++;\n}\n else {\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':if (n == 0) {\ncode.append(symb);\n}\nbreak;\ncase 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\nbreak;\n}\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\nif (code.length() > this.getMaxCodeLen()) {\ncode.setLength(this.getMaxCodeLen());\n}\n}\nreturn code.toString();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 853,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 9875,
                        "startLineNumber": 82,
                        "startColumnNumber": 4,
                        "endLineNumber": 335,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Find the metaphone value of a String. This is similar to the soundex algorithm, but better at finding similar sounding words. All input is converted to upper case. Limitations: Input format is expected to be a single ASCII word with only characters in the A - Z range, no punctuation or numbers.\n * @param txt String to find the metaphone code for\n * @return A metaphone code corresponding to the String supplied\n */\npublic String metaphone(final String txt){\n  boolean hard=false;\n  if (txt == null || txt.length() == 0) {\n    return \"\";\n  }\n  if (txt.length() == 1) {\n    return txt.toUpperCase(java.util.Locale.ENGLISH);\n  }\n  final char[] inwd=txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray();\n  final StringBuilder local=new StringBuilder(40);\n  final StringBuilder code=new StringBuilder(10);\nswitch (inwd[0]) {\ncase 'K':case 'G':case 'P':    if (inwd[1] == 'N') {\n      local.append(inwd,1,inwd.length - 1);\n    }\n else {\n      local.append(inwd);\n    }\n  break;\ncase 'A':if (inwd[1] == 'E') {\n  local.append(inwd,1,inwd.length - 1);\n}\n else {\n  local.append(inwd);\n}\nbreak;\ncase 'W':if (inwd[1] == 'R') {\nlocal.append(inwd,1,inwd.length - 1);\nbreak;\n}\nif (inwd[1] == 'H') {\nlocal.append(inwd,1,inwd.length - 1);\nlocal.setCharAt(0,'W');\n}\n else {\nlocal.append(inwd);\n}\nbreak;\ncase 'X':inwd[0]='S';\nlocal.append(inwd);\nbreak;\ndefault:local.append(inwd);\n}\nfinal int wdsz=local.length();\nint n=0;\nwhile (code.length() < this.getMaxCodeLen() && n < wdsz) {\nfinal char symb=local.charAt(n);\nif (symb != 'C' && isPreviousChar(local,n,symb)) {\nn++;\n}\n else {\nswitch (symb) {\ncase 'A':case 'E':case 'I':case 'O':case 'U':if (n == 0) {\ncode.append(symb);\n}\nbreak;\ncase 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {\nbreak;\n}\ncode.append(symb);\nbreak;\ncase 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\nbreak;\n}\nif (regionMatch(local,n,\"CIA\")) {\ncode.append('X');\nbreak;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\ncode.append('S');\nbreak;\n}\nif (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {\ncode.append('K');\nbreak;\n}\nif (isNextChar(local,n,'H')) {\nif (n == 0 && wdsz >= 3 && isVowel(local,2)) {\ncode.append('K');\n}\n else {\ncode.append('X');\n}\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {\ncode.append('J');\nn+=2;\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {\nbreak;\n}\nif (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {\nbreak;\n}\nif (n > 0 && (regionMatch(local,n,\"GN\") || regionMatch(local,n,\"GNED\"))) {\nbreak;\n}\nif (isPreviousChar(local,n,'G')) {\nhard=true;\n}\n else {\nhard=false;\n}\nif (!isLastChar(wdsz,n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {\ncode.append('J');\n}\n else {\ncode.append('K');\n}\nbreak;\ncase 'H':if (isLastChar(wdsz,n)) {\nbreak;\n}\nif (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\nbreak;\n}\nif (isVowel(local,n + 1)) {\ncode.append('H');\n}\nbreak;\ncase 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);\nbreak;\ncase 'K':if (n > 0) {\nif (!isPreviousChar(local,n,'C')) {\ncode.append(symb);\n}\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'P':if (isNextChar(local,n,'H')) {\ncode.append('F');\n}\n else {\ncode.append(symb);\n}\nbreak;\ncase 'Q':code.append('K');\nbreak;\ncase 'S':if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) {\ncode.append('X');\n}\n else {\ncode.append('S');\n}\nbreak;\ncase 'T':if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) {\ncode.append('X');\nbreak;\n}\nif (regionMatch(local,n,\"TCH\")) {\nbreak;\n}\nif (regionMatch(local,n,\"TH\")) {\ncode.append('0');\n}\n else {\ncode.append('T');\n}\nbreak;\ncase 'V':code.append('F');\nbreak;\ncase 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {\ncode.append(symb);\n}\nbreak;\ncase 'X':code.append('K');\ncode.append('S');\nbreak;\ncase 'Z':code.append('S');\nbreak;\ndefault:break;\n}\nn++;\n}\nif (code.length() > this.getMaxCodeLen()) {\ncode.setLength(this.getMaxCodeLen());\n}\n}\nreturn code.toString();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 864,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 5,
                    "startLineNumber": 263,
                    "startColumnNumber": 24,
                    "endLineNumber": 263,
                    "endColumnNumber": 29
                },
                "nodeContext": "n > 0",
                "nodeType": "InfixExpression",
                "astNodeNumber": 3,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "int"
        }
    ],
    "positionList": [
        {
            "charLength": 1,
            "startLineNumber": 94,
            "startColumnNumber": 43,
            "endLineNumber": 94,
            "endColumnNumber": 44
        },
        {
            "charLength": 1,
            "startLineNumber": 107,
            "startColumnNumber": 20,
            "endLineNumber": 107,
            "endColumnNumber": 21
        },
        {
            "charLength": 1,
            "startLineNumber": 131,
            "startColumnNumber": 32,
            "endLineNumber": 131,
            "endColumnNumber": 33
        },
        {
            "charLength": 1,
            "startLineNumber": 137,
            "startColumnNumber": 17,
            "endLineNumber": 137,
            "endColumnNumber": 18
        },
        {
            "charLength": 1,
            "startLineNumber": 145,
            "startColumnNumber": 16,
            "endLineNumber": 145,
            "endColumnNumber": 17
        },
        {
            "charLength": 1,
            "startLineNumber": 160,
            "startColumnNumber": 29,
            "endLineNumber": 160,
            "endColumnNumber": 30
        },
        {
            "charLength": 1,
            "startLineNumber": 175,
            "startColumnNumber": 64,
            "endLineNumber": 175,
            "endColumnNumber": 65
        },
        {
            "charLength": 1,
            "startLineNumber": 183,
            "startColumnNumber": 63,
            "endLineNumber": 183,
            "endColumnNumber": 64
        },
        {
            "charLength": 1,
            "startLineNumber": 193,
            "startColumnNumber": 33,
            "endLineNumber": 193,
            "endColumnNumber": 34
        },
        {
            "charLength": 1,
            "startLineNumber": 207,
            "startColumnNumber": 63,
            "endLineNumber": 207,
            "endColumnNumber": 64
        },
        {
            "charLength": 1,
            "startLineNumber": 223,
            "startColumnNumber": 28,
            "endLineNumber": 223,
            "endColumnNumber": 29
        },
        {
            "charLength": 1,
            "startLineNumber": 235,
            "startColumnNumber": 63,
            "endLineNumber": 235,
            "endColumnNumber": 64
        },
        {
            "charLength": 1,
            "startLineNumber": 246,
            "startColumnNumber": 28,
            "endLineNumber": 246,
            "endColumnNumber": 29
        },
        {
            "charLength": 1,
            "startLineNumber": 247,
            "startColumnNumber": 63,
            "endLineNumber": 247,
            "endColumnNumber": 64
        },
        {
            "charLength": 1,
            "startLineNumber": 263,
            "startColumnNumber": 28,
            "endLineNumber": 263,
            "endColumnNumber": 29
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 1
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 1
        },
        {
            "firstKey": 1,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 8,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 9,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 10,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 11,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 12,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 13,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 14,
            "layout": 5
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 14,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 5,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 5,
            "secondKey": 2,
            "layout": 7
        },
        {
            "firstKey": 5,
            "secondKey": 3,
            "layout": 7
        },
        {
            "firstKey": 5,
            "secondKey": 4,
            "layout": 7
        },
        {
            "firstKey": 5,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 6,
            "secondKey": 1,
            "layout": 8
        },
        {
            "firstKey": 6,
            "secondKey": 2,
            "layout": 8
        },
        {
            "firstKey": 6,
            "secondKey": 3,
            "layout": 8
        },
        {
            "firstKey": 6,
            "secondKey": 4,
            "layout": 8
        },
        {
            "firstKey": 6,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 6,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 7,
            "secondKey": 1,
            "layout": 8
        },
        {
            "firstKey": 7,
            "secondKey": 2,
            "layout": 8
        },
        {
            "firstKey": 7,
            "secondKey": 3,
            "layout": 8
        },
        {
            "firstKey": 7,
            "secondKey": 4,
            "layout": 8
        },
        {
            "firstKey": 7,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 0,
            "layout": 11
        },
        {
            "firstKey": 8,
            "secondKey": 1,
            "layout": 11
        },
        {
            "firstKey": 8,
            "secondKey": 2,
            "layout": 11
        },
        {
            "firstKey": 8,
            "secondKey": 3,
            "layout": 11
        },
        {
            "firstKey": 8,
            "secondKey": 4,
            "layout": 11
        },
        {
            "firstKey": 8,
            "secondKey": 5,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 6,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 7,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 9,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 10,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 11,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 12,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 13,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 14,
            "layout": 6
        },
        {
            "firstKey": 9,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 9,
            "secondKey": 1,
            "layout": 8
        },
        {
            "firstKey": 9,
            "secondKey": 2,
            "layout": 8
        },
        {
            "firstKey": 9,
            "secondKey": 3,
            "layout": 8
        },
        {
            "firstKey": 9,
            "secondKey": 4,
            "layout": 8
        },
        {
            "firstKey": 9,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 10,
            "secondKey": 1,
            "layout": 8
        },
        {
            "firstKey": 10,
            "secondKey": 2,
            "layout": 8
        },
        {
            "firstKey": 10,
            "secondKey": 3,
            "layout": 8
        },
        {
            "firstKey": 10,
            "secondKey": 4,
            "layout": 8
        },
        {
            "firstKey": 10,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 11,
            "secondKey": 0,
            "layout": 9
        },
        {
            "firstKey": 11,
            "secondKey": 1,
            "layout": 9
        },
        {
            "firstKey": 11,
            "secondKey": 2,
            "layout": 9
        },
        {
            "firstKey": 11,
            "secondKey": 3,
            "layout": 9
        },
        {
            "firstKey": 11,
            "secondKey": 4,
            "layout": 9
        },
        {
            "firstKey": 11,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 11,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 11,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 11,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 11,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 11,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 11,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 11,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 11,
            "secondKey": 14,
            "layout": 4
        },
        {
            "firstKey": 12,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 12,
            "secondKey": 1,
            "layout": 8
        },
        {
            "firstKey": 12,
            "secondKey": 2,
            "layout": 8
        },
        {
            "firstKey": 12,
            "secondKey": 3,
            "layout": 8
        },
        {
            "firstKey": 12,
            "secondKey": 4,
            "layout": 8
        },
        {
            "firstKey": 12,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 12,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 12,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 12,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 12,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 12,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 12,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 12,
            "secondKey": 13,
            "layout": 1
        },
        {
            "firstKey": 12,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 13,
            "secondKey": 1,
            "layout": 8
        },
        {
            "firstKey": 13,
            "secondKey": 2,
            "layout": 8
        },
        {
            "firstKey": 13,
            "secondKey": 3,
            "layout": 8
        },
        {
            "firstKey": 13,
            "secondKey": 4,
            "layout": 8
        },
        {
            "firstKey": 13,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 12,
            "layout": 1
        },
        {
            "firstKey": 13,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 14,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 14,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 14,
            "secondKey": 2,
            "layout": 7
        },
        {
            "firstKey": 14,
            "secondKey": 3,
            "layout": 7
        },
        {
            "firstKey": 14,
            "secondKey": 4,
            "layout": 7
        },
        {
            "firstKey": 14,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 14,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 14,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 14,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 14,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 14,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 14,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 14,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 14,
            "secondKey": 13,
            "layout": 2
        }
    ]
}