{
    "id": 85,
    "expression": "eventFlowFile",
    "projectName": "nifi",
    "commitID": "84b2484fd46a0fc883e8b9d380ccef199432db35",
    "filePath": "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/controller/repository/StandardProcessSession.java",
    "occurrences": 6,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "eventFlowFile",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 13,
                "startLineNumber": 1349,
                "startColumnNumber": 35,
                "endLineNumber": 1349,
                "endColumnNumber": 48
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 33,
                        "startLineNumber": 1349,
                        "startColumnNumber": 16,
                        "endLineNumber": 1349,
                        "endColumnNumber": 49
                    },
                    "nodeContext": "flowFiles.contains(eventFlowFile)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1302,
                        "startLineNumber": 1349,
                        "startColumnNumber": 12,
                        "endLineNumber": 1365,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (flowFiles.contains(eventFlowFile)) {\n  final ProvenanceEventBuilder eventBuilder=entry.getValue();\n  for (  final String childId : eventBuilder.getChildFlowFileIds()) {\n    if (!flowFileIds.contains(childId)) {\n      throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n    }\n  }\n}\n else {\n  final ProvenanceEventBuilder eventBuilder=entry.getValue();\n  for (  final String childId : eventBuilder.getChildFlowFileIds()) {\n    if (flowFileIds.contains(childId)) {\n      throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 81,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 1385,
                        "startLineNumber": 1347,
                        "startColumnNumber": 101,
                        "endLineNumber": 1366,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final FlowFile eventFlowFile=entry.getKey();\n  if (flowFiles.contains(eventFlowFile)) {\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    for (    final String childId : eventBuilder.getChildFlowFileIds()) {\n      if (!flowFileIds.contains(childId)) {\n        throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n      }\n    }\n  }\n else {\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    for (    final String childId : eventBuilder.getChildFlowFileIds()) {\n      if (flowFileIds.contains(childId)) {\n        throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 91,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1478,
                        "startLineNumber": 1347,
                        "startColumnNumber": 8,
                        "endLineNumber": 1366,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n  final FlowFile eventFlowFile=entry.getKey();\n  if (flowFiles.contains(eventFlowFile)) {\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    for (    final String childId : eventBuilder.getChildFlowFileIds()) {\n      if (!flowFileIds.contains(childId)) {\n        throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n      }\n    }\n  }\n else {\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    for (    final String childId : eventBuilder.getChildFlowFileIds()) {\n      if (flowFileIds.contains(childId)) {\n        throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n      }\n    }\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 107,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8791,
                        "startLineNumber": 1311,
                        "startColumnNumber": 96,
                        "endLineNumber": 1474,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  flowFiles=flowFiles.stream().map(this::getMostRecent).collect(Collectors.toList());\n  for (  final FlowFile flowFile : flowFiles) {\n    if (openInputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open InputStream for the FlowFile, created by calling ProcessSession.read(FlowFile)\");\n    }\n    if (openOutputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open OutputStream for the FlowFile, created by calling ProcessSession.write(FlowFile)\");\n    }\n    if (readRecursionSet.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or InputStream created by ProcessSession.read(FlowFile) has not been closed\");\n    }\n    if (writeRecursionSet.contains(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or OutputStream created by ProcessSession.write(FlowFile) has not been closed\");\n    }\n    final StandardRepositoryRecord record=getRecord(flowFile);\n    if (record == null) {\n      throw new FlowFileHandlingException(flowFile + \" is not known in this session (\" + toString()+ \")\");\n    }\n  }\n  final Set<String> flowFileIds=flowFiles.stream().map(ff -> ff.getAttribute(CoreAttributes.UUID.key())).collect(Collectors.toSet());\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    if (flowFiles.contains(eventFlowFile)) {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (!flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n        }\n      }\n    }\n else {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n        }\n      }\n    }\n  }\n  final Set<FlowFile> forkedFlowFilesMigrated=new HashSet<>();\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    if (!flowFiles.contains(eventFlowFile)) {\n      continue;\n    }\n    final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n    ProvenanceEventBuilder copy=null;\n    for (    final FlowFile flowFile : flowFiles) {\n      final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n      if (childrenIds.contains(flowFileId)) {\n        eventBuilder.removeChildFlowFile(flowFile);\n        if (copy == null) {\n          copy=eventBuilder.copy();\n          copy.getChildFlowFileIds().clear();\n        }\n        copy.addChildFlowFile(flowFileId);\n      }\n    }\n    if (copy != null) {\n      newOwner.forkEventBuilders.put(eventFlowFile,copy);\n      forkedFlowFilesMigrated.add(eventFlowFile);\n    }\n  }\n  forkedFlowFilesMigrated.forEach(forkEventBuilders::remove);\n  newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n  for (  final FlowFile flowFile : flowFiles) {\n    final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n    final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n    newOwner.records.put(flowFileRecord.getId(),repoRecord);\n    final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n    if (inputQueue != null) {\n      final String connectionId=inputQueue.getIdentifier();\n      incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n      newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n      unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n      newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n      flowFilesIn--;\n      contentSizeIn-=flowFile.getSize();\n      newOwner.flowFilesIn++;\n      newOwner.contentSizeIn+=flowFile.getSize();\n    }\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (removedFlowFiles.remove(flowFileId)) {\n      newOwner.removedFlowFiles.add(flowFileId);\n      newOwner.removedCount++;\n      newOwner.removedBytes+=flowFile.getSize();\n      removedCount--;\n      removedBytes-=flowFile.getSize();\n    }\n    if (createdFlowFiles.remove(flowFileId)) {\n      newOwner.createdFlowFiles.add(flowFileId);\n    }\n    if (repoRecord.getTransferRelationship() != null) {\n      flowFilesOut--;\n      contentSizeOut-=flowFile.getSize();\n      newOwner.flowFilesOut++;\n      newOwner.contentSizeOut+=flowFile.getSize();\n    }\n    final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n    if (events != null) {\n      newOwner.generatedProvenanceEvents.put(flowFile,events);\n    }\n    final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n    if (currentClaim != null) {\n      final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n      if (appendableStream != null) {\n        newOwner.appendableStreams.put(currentClaim,appendableStream);\n      }\n    }\n    final Path toDelete=deleteOnCommit.remove(flowFile);\n    if (toDelete != null) {\n      newOwner.deleteOnCommit.put(flowFile,toDelete);\n    }\n  }\n  provenanceReporter.migrate(newOwner.provenanceReporter,flowFileIds);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 730,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8883,
                        "startLineNumber": 1311,
                        "startColumnNumber": 4,
                        "endLineNumber": 1474,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void migrate(final StandardProcessSession newOwner,Collection<FlowFile> flowFiles){\n  flowFiles=flowFiles.stream().map(this::getMostRecent).collect(Collectors.toList());\n  for (  final FlowFile flowFile : flowFiles) {\n    if (openInputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open InputStream for the FlowFile, created by calling ProcessSession.read(FlowFile)\");\n    }\n    if (openOutputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open OutputStream for the FlowFile, created by calling ProcessSession.write(FlowFile)\");\n    }\n    if (readRecursionSet.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or InputStream created by ProcessSession.read(FlowFile) has not been closed\");\n    }\n    if (writeRecursionSet.contains(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or OutputStream created by ProcessSession.write(FlowFile) has not been closed\");\n    }\n    final StandardRepositoryRecord record=getRecord(flowFile);\n    if (record == null) {\n      throw new FlowFileHandlingException(flowFile + \" is not known in this session (\" + toString()+ \")\");\n    }\n  }\n  final Set<String> flowFileIds=flowFiles.stream().map(ff -> ff.getAttribute(CoreAttributes.UUID.key())).collect(Collectors.toSet());\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    if (flowFiles.contains(eventFlowFile)) {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (!flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n        }\n      }\n    }\n else {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n        }\n      }\n    }\n  }\n  final Set<FlowFile> forkedFlowFilesMigrated=new HashSet<>();\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    if (!flowFiles.contains(eventFlowFile)) {\n      continue;\n    }\n    final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n    ProvenanceEventBuilder copy=null;\n    for (    final FlowFile flowFile : flowFiles) {\n      final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n      if (childrenIds.contains(flowFileId)) {\n        eventBuilder.removeChildFlowFile(flowFile);\n        if (copy == null) {\n          copy=eventBuilder.copy();\n          copy.getChildFlowFileIds().clear();\n        }\n        copy.addChildFlowFile(flowFileId);\n      }\n    }\n    if (copy != null) {\n      newOwner.forkEventBuilders.put(eventFlowFile,copy);\n      forkedFlowFilesMigrated.add(eventFlowFile);\n    }\n  }\n  forkedFlowFilesMigrated.forEach(forkEventBuilders::remove);\n  newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n  for (  final FlowFile flowFile : flowFiles) {\n    final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n    final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n    newOwner.records.put(flowFileRecord.getId(),repoRecord);\n    final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n    if (inputQueue != null) {\n      final String connectionId=inputQueue.getIdentifier();\n      incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n      newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n      unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n      newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n      flowFilesIn--;\n      contentSizeIn-=flowFile.getSize();\n      newOwner.flowFilesIn++;\n      newOwner.contentSizeIn+=flowFile.getSize();\n    }\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (removedFlowFiles.remove(flowFileId)) {\n      newOwner.removedFlowFiles.add(flowFileId);\n      newOwner.removedCount++;\n      newOwner.removedBytes+=flowFile.getSize();\n      removedCount--;\n      removedBytes-=flowFile.getSize();\n    }\n    if (createdFlowFiles.remove(flowFileId)) {\n      newOwner.createdFlowFiles.add(flowFileId);\n    }\n    if (repoRecord.getTransferRelationship() != null) {\n      flowFilesOut--;\n      contentSizeOut-=flowFile.getSize();\n      newOwner.flowFilesOut++;\n      newOwner.contentSizeOut+=flowFile.getSize();\n    }\n    final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n    if (events != null) {\n      newOwner.generatedProvenanceEvents.put(flowFile,events);\n    }\n    final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n    if (currentClaim != null) {\n      final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n      if (appendableStream != null) {\n        newOwner.appendableStreams.put(currentClaim,appendableStream);\n      }\n    }\n    final Path toDelete=deleteOnCommit.remove(flowFile);\n    if (toDelete != null) {\n      newOwner.deleteOnCommit.put(flowFile,toDelete);\n    }\n  }\n  provenanceReporter.migrate(newOwner.provenanceReporter,flowFileIds);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 746,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 33,
                    "startLineNumber": 1349,
                    "startColumnNumber": 16,
                    "endLineNumber": 1349,
                    "endColumnNumber": 49
                },
                "nodeContext": "flowFiles.contains(eventFlowFile)",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 4,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.flowfile.FlowFile"
        },
        {
            "nodeContext": "eventFlowFile",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 13,
                "startLineNumber": 1353,
                "startColumnNumber": 80,
                "endLineNumber": 1353,
                "endColumnNumber": 93
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
                    "nodePosition": {
                        "charLength": 324,
                        "startLineNumber": 1353,
                        "startColumnNumber": 60,
                        "endLineNumber": 1354,
                        "endColumnNumber": 191
                    },
                    "nodeContext": "\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\"",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 10,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
                    "nodePosition": {
                        "charLength": 355,
                        "startLineNumber": 1353,
                        "startColumnNumber": 30,
                        "endLineNumber": 1354,
                        "endColumnNumber": 192
                    },
                    "nodeContext": "new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\")",
                    "nodeType": "ClassInstanceCreation",
                    "astNodeNumber": 13,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 362,
                        "startLineNumber": 1353,
                        "startColumnNumber": 24,
                        "endLineNumber": 1354,
                        "endColumnNumber": 193
                    },
                    "nodeContext": "throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n",
                    "nodeType": "ThrowStatement",
                    "astNodeNumber": 14,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 410,
                        "startLineNumber": 1352,
                        "startColumnNumber": 56,
                        "endLineNumber": 1355,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 15,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 446,
                        "startLineNumber": 1352,
                        "startColumnNumber": 20,
                        "endLineNumber": 1355,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (!flowFileIds.contains(childId)) {\n  throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 21,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 486,
                        "startLineNumber": 1351,
                        "startColumnNumber": 80,
                        "endLineNumber": 1356,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  if (!flowFileIds.contains(childId)) {\n    throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 22,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 550,
                        "startLineNumber": 1351,
                        "startColumnNumber": 16,
                        "endLineNumber": 1356,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "for (final String childId : eventBuilder.getChildFlowFileIds()) {\n  if (!flowFileIds.contains(childId)) {\n    throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 31,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 660,
                        "startLineNumber": 1349,
                        "startColumnNumber": 51,
                        "endLineNumber": 1357,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  final ProvenanceEventBuilder eventBuilder=entry.getValue();\n  for (  final String childId : eventBuilder.getChildFlowFileIds()) {\n    if (!flowFileIds.contains(childId)) {\n      throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 41,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1302,
                        "startLineNumber": 1349,
                        "startColumnNumber": 12,
                        "endLineNumber": 1365,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (flowFiles.contains(eventFlowFile)) {\n  final ProvenanceEventBuilder eventBuilder=entry.getValue();\n  for (  final String childId : eventBuilder.getChildFlowFileIds()) {\n    if (!flowFileIds.contains(childId)) {\n      throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n    }\n  }\n}\n else {\n  final ProvenanceEventBuilder eventBuilder=entry.getValue();\n  for (  final String childId : eventBuilder.getChildFlowFileIds()) {\n    if (flowFileIds.contains(childId)) {\n      throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 81,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 1385,
                        "startLineNumber": 1347,
                        "startColumnNumber": 101,
                        "endLineNumber": 1366,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final FlowFile eventFlowFile=entry.getKey();\n  if (flowFiles.contains(eventFlowFile)) {\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    for (    final String childId : eventBuilder.getChildFlowFileIds()) {\n      if (!flowFileIds.contains(childId)) {\n        throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n      }\n    }\n  }\n else {\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    for (    final String childId : eventBuilder.getChildFlowFileIds()) {\n      if (flowFileIds.contains(childId)) {\n        throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 91,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1478,
                        "startLineNumber": 1347,
                        "startColumnNumber": 8,
                        "endLineNumber": 1366,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n  final FlowFile eventFlowFile=entry.getKey();\n  if (flowFiles.contains(eventFlowFile)) {\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    for (    final String childId : eventBuilder.getChildFlowFileIds()) {\n      if (!flowFileIds.contains(childId)) {\n        throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n      }\n    }\n  }\n else {\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    for (    final String childId : eventBuilder.getChildFlowFileIds()) {\n      if (flowFileIds.contains(childId)) {\n        throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n      }\n    }\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 107,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8791,
                        "startLineNumber": 1311,
                        "startColumnNumber": 96,
                        "endLineNumber": 1474,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  flowFiles=flowFiles.stream().map(this::getMostRecent).collect(Collectors.toList());\n  for (  final FlowFile flowFile : flowFiles) {\n    if (openInputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open InputStream for the FlowFile, created by calling ProcessSession.read(FlowFile)\");\n    }\n    if (openOutputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open OutputStream for the FlowFile, created by calling ProcessSession.write(FlowFile)\");\n    }\n    if (readRecursionSet.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or InputStream created by ProcessSession.read(FlowFile) has not been closed\");\n    }\n    if (writeRecursionSet.contains(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or OutputStream created by ProcessSession.write(FlowFile) has not been closed\");\n    }\n    final StandardRepositoryRecord record=getRecord(flowFile);\n    if (record == null) {\n      throw new FlowFileHandlingException(flowFile + \" is not known in this session (\" + toString()+ \")\");\n    }\n  }\n  final Set<String> flowFileIds=flowFiles.stream().map(ff -> ff.getAttribute(CoreAttributes.UUID.key())).collect(Collectors.toSet());\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    if (flowFiles.contains(eventFlowFile)) {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (!flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n        }\n      }\n    }\n else {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n        }\n      }\n    }\n  }\n  final Set<FlowFile> forkedFlowFilesMigrated=new HashSet<>();\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    if (!flowFiles.contains(eventFlowFile)) {\n      continue;\n    }\n    final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n    ProvenanceEventBuilder copy=null;\n    for (    final FlowFile flowFile : flowFiles) {\n      final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n      if (childrenIds.contains(flowFileId)) {\n        eventBuilder.removeChildFlowFile(flowFile);\n        if (copy == null) {\n          copy=eventBuilder.copy();\n          copy.getChildFlowFileIds().clear();\n        }\n        copy.addChildFlowFile(flowFileId);\n      }\n    }\n    if (copy != null) {\n      newOwner.forkEventBuilders.put(eventFlowFile,copy);\n      forkedFlowFilesMigrated.add(eventFlowFile);\n    }\n  }\n  forkedFlowFilesMigrated.forEach(forkEventBuilders::remove);\n  newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n  for (  final FlowFile flowFile : flowFiles) {\n    final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n    final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n    newOwner.records.put(flowFileRecord.getId(),repoRecord);\n    final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n    if (inputQueue != null) {\n      final String connectionId=inputQueue.getIdentifier();\n      incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n      newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n      unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n      newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n      flowFilesIn--;\n      contentSizeIn-=flowFile.getSize();\n      newOwner.flowFilesIn++;\n      newOwner.contentSizeIn+=flowFile.getSize();\n    }\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (removedFlowFiles.remove(flowFileId)) {\n      newOwner.removedFlowFiles.add(flowFileId);\n      newOwner.removedCount++;\n      newOwner.removedBytes+=flowFile.getSize();\n      removedCount--;\n      removedBytes-=flowFile.getSize();\n    }\n    if (createdFlowFiles.remove(flowFileId)) {\n      newOwner.createdFlowFiles.add(flowFileId);\n    }\n    if (repoRecord.getTransferRelationship() != null) {\n      flowFilesOut--;\n      contentSizeOut-=flowFile.getSize();\n      newOwner.flowFilesOut++;\n      newOwner.contentSizeOut+=flowFile.getSize();\n    }\n    final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n    if (events != null) {\n      newOwner.generatedProvenanceEvents.put(flowFile,events);\n    }\n    final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n    if (currentClaim != null) {\n      final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n      if (appendableStream != null) {\n        newOwner.appendableStreams.put(currentClaim,appendableStream);\n      }\n    }\n    final Path toDelete=deleteOnCommit.remove(flowFile);\n    if (toDelete != null) {\n      newOwner.deleteOnCommit.put(flowFile,toDelete);\n    }\n  }\n  provenanceReporter.migrate(newOwner.provenanceReporter,flowFileIds);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 730,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8883,
                        "startLineNumber": 1311,
                        "startColumnNumber": 4,
                        "endLineNumber": 1474,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void migrate(final StandardProcessSession newOwner,Collection<FlowFile> flowFiles){\n  flowFiles=flowFiles.stream().map(this::getMostRecent).collect(Collectors.toList());\n  for (  final FlowFile flowFile : flowFiles) {\n    if (openInputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open InputStream for the FlowFile, created by calling ProcessSession.read(FlowFile)\");\n    }\n    if (openOutputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open OutputStream for the FlowFile, created by calling ProcessSession.write(FlowFile)\");\n    }\n    if (readRecursionSet.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or InputStream created by ProcessSession.read(FlowFile) has not been closed\");\n    }\n    if (writeRecursionSet.contains(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or OutputStream created by ProcessSession.write(FlowFile) has not been closed\");\n    }\n    final StandardRepositoryRecord record=getRecord(flowFile);\n    if (record == null) {\n      throw new FlowFileHandlingException(flowFile + \" is not known in this session (\" + toString()+ \")\");\n    }\n  }\n  final Set<String> flowFileIds=flowFiles.stream().map(ff -> ff.getAttribute(CoreAttributes.UUID.key())).collect(Collectors.toSet());\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    if (flowFiles.contains(eventFlowFile)) {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (!flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n        }\n      }\n    }\n else {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n        }\n      }\n    }\n  }\n  final Set<FlowFile> forkedFlowFilesMigrated=new HashSet<>();\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    if (!flowFiles.contains(eventFlowFile)) {\n      continue;\n    }\n    final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n    ProvenanceEventBuilder copy=null;\n    for (    final FlowFile flowFile : flowFiles) {\n      final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n      if (childrenIds.contains(flowFileId)) {\n        eventBuilder.removeChildFlowFile(flowFile);\n        if (copy == null) {\n          copy=eventBuilder.copy();\n          copy.getChildFlowFileIds().clear();\n        }\n        copy.addChildFlowFile(flowFileId);\n      }\n    }\n    if (copy != null) {\n      newOwner.forkEventBuilders.put(eventFlowFile,copy);\n      forkedFlowFilesMigrated.add(eventFlowFile);\n    }\n  }\n  forkedFlowFilesMigrated.forEach(forkEventBuilders::remove);\n  newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n  for (  final FlowFile flowFile : flowFiles) {\n    final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n    final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n    newOwner.records.put(flowFileRecord.getId(),repoRecord);\n    final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n    if (inputQueue != null) {\n      final String connectionId=inputQueue.getIdentifier();\n      incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n      newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n      unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n      newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n      flowFilesIn--;\n      contentSizeIn-=flowFile.getSize();\n      newOwner.flowFilesIn++;\n      newOwner.contentSizeIn+=flowFile.getSize();\n    }\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (removedFlowFiles.remove(flowFileId)) {\n      newOwner.removedFlowFiles.add(flowFileId);\n      newOwner.removedCount++;\n      newOwner.removedBytes+=flowFile.getSize();\n      removedCount--;\n      removedBytes-=flowFile.getSize();\n    }\n    if (createdFlowFiles.remove(flowFileId)) {\n      newOwner.createdFlowFiles.add(flowFileId);\n    }\n    if (repoRecord.getTransferRelationship() != null) {\n      flowFilesOut--;\n      contentSizeOut-=flowFile.getSize();\n      newOwner.flowFilesOut++;\n      newOwner.contentSizeOut+=flowFile.getSize();\n    }\n    final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n    if (events != null) {\n      newOwner.generatedProvenanceEvents.put(flowFile,events);\n    }\n    final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n    if (currentClaim != null) {\n      final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n      if (appendableStream != null) {\n        newOwner.appendableStreams.put(currentClaim,appendableStream);\n      }\n    }\n    final Path toDelete=deleteOnCommit.remove(flowFile);\n    if (toDelete != null) {\n      newOwner.deleteOnCommit.put(flowFile,toDelete);\n    }\n  }\n  provenanceReporter.migrate(newOwner.provenanceReporter,flowFileIds);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 746,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
                "nodePosition": {
                    "charLength": 324,
                    "startLineNumber": 1353,
                    "startColumnNumber": 60,
                    "endLineNumber": 1354,
                    "endColumnNumber": 191
                },
                "nodeContext": "\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\"",
                "nodeType": "InfixExpression",
                "astNodeNumber": 10,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.flowfile.FlowFile"
        },
        {
            "nodeContext": "eventFlowFile",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 13,
                "startLineNumber": 1361,
                "startColumnNumber": 80,
                "endLineNumber": 1361,
                "endColumnNumber": 93
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
                    "nodePosition": {
                        "charLength": 262,
                        "startLineNumber": 1361,
                        "startColumnNumber": 60,
                        "endLineNumber": 1362,
                        "endColumnNumber": 121
                    },
                    "nodeContext": "\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\"",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
                    "nodePosition": {
                        "charLength": 293,
                        "startLineNumber": 1361,
                        "startColumnNumber": 30,
                        "endLineNumber": 1362,
                        "endColumnNumber": 122
                    },
                    "nodeContext": "new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\")",
                    "nodeType": "ClassInstanceCreation",
                    "astNodeNumber": 8,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 300,
                        "startLineNumber": 1361,
                        "startColumnNumber": 24,
                        "endLineNumber": 1362,
                        "endColumnNumber": 123
                    },
                    "nodeContext": "throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n",
                    "nodeType": "ThrowStatement",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 348,
                        "startLineNumber": 1360,
                        "startColumnNumber": 55,
                        "endLineNumber": 1363,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 10,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 383,
                        "startLineNumber": 1360,
                        "startColumnNumber": 20,
                        "endLineNumber": 1363,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (flowFileIds.contains(childId)) {\n  throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 15,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 423,
                        "startLineNumber": 1359,
                        "startColumnNumber": 80,
                        "endLineNumber": 1364,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  if (flowFileIds.contains(childId)) {\n    throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 16,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 487,
                        "startLineNumber": 1359,
                        "startColumnNumber": 16,
                        "endLineNumber": 1364,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "for (final String childId : eventBuilder.getChildFlowFileIds()) {\n  if (flowFileIds.contains(childId)) {\n    throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 25,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 597,
                        "startLineNumber": 1357,
                        "startColumnNumber": 19,
                        "endLineNumber": 1365,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  final ProvenanceEventBuilder eventBuilder=entry.getValue();\n  for (  final String childId : eventBuilder.getChildFlowFileIds()) {\n    if (flowFileIds.contains(childId)) {\n      throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 35,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1302,
                        "startLineNumber": 1349,
                        "startColumnNumber": 12,
                        "endLineNumber": 1365,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (flowFiles.contains(eventFlowFile)) {\n  final ProvenanceEventBuilder eventBuilder=entry.getValue();\n  for (  final String childId : eventBuilder.getChildFlowFileIds()) {\n    if (!flowFileIds.contains(childId)) {\n      throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n    }\n  }\n}\n else {\n  final ProvenanceEventBuilder eventBuilder=entry.getValue();\n  for (  final String childId : eventBuilder.getChildFlowFileIds()) {\n    if (flowFileIds.contains(childId)) {\n      throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 81,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 1385,
                        "startLineNumber": 1347,
                        "startColumnNumber": 101,
                        "endLineNumber": 1366,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final FlowFile eventFlowFile=entry.getKey();\n  if (flowFiles.contains(eventFlowFile)) {\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    for (    final String childId : eventBuilder.getChildFlowFileIds()) {\n      if (!flowFileIds.contains(childId)) {\n        throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n      }\n    }\n  }\n else {\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    for (    final String childId : eventBuilder.getChildFlowFileIds()) {\n      if (flowFileIds.contains(childId)) {\n        throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 91,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1478,
                        "startLineNumber": 1347,
                        "startColumnNumber": 8,
                        "endLineNumber": 1366,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n  final FlowFile eventFlowFile=entry.getKey();\n  if (flowFiles.contains(eventFlowFile)) {\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    for (    final String childId : eventBuilder.getChildFlowFileIds()) {\n      if (!flowFileIds.contains(childId)) {\n        throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n      }\n    }\n  }\n else {\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    for (    final String childId : eventBuilder.getChildFlowFileIds()) {\n      if (flowFileIds.contains(childId)) {\n        throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n      }\n    }\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 107,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8791,
                        "startLineNumber": 1311,
                        "startColumnNumber": 96,
                        "endLineNumber": 1474,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  flowFiles=flowFiles.stream().map(this::getMostRecent).collect(Collectors.toList());\n  for (  final FlowFile flowFile : flowFiles) {\n    if (openInputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open InputStream for the FlowFile, created by calling ProcessSession.read(FlowFile)\");\n    }\n    if (openOutputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open OutputStream for the FlowFile, created by calling ProcessSession.write(FlowFile)\");\n    }\n    if (readRecursionSet.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or InputStream created by ProcessSession.read(FlowFile) has not been closed\");\n    }\n    if (writeRecursionSet.contains(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or OutputStream created by ProcessSession.write(FlowFile) has not been closed\");\n    }\n    final StandardRepositoryRecord record=getRecord(flowFile);\n    if (record == null) {\n      throw new FlowFileHandlingException(flowFile + \" is not known in this session (\" + toString()+ \")\");\n    }\n  }\n  final Set<String> flowFileIds=flowFiles.stream().map(ff -> ff.getAttribute(CoreAttributes.UUID.key())).collect(Collectors.toSet());\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    if (flowFiles.contains(eventFlowFile)) {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (!flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n        }\n      }\n    }\n else {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n        }\n      }\n    }\n  }\n  final Set<FlowFile> forkedFlowFilesMigrated=new HashSet<>();\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    if (!flowFiles.contains(eventFlowFile)) {\n      continue;\n    }\n    final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n    ProvenanceEventBuilder copy=null;\n    for (    final FlowFile flowFile : flowFiles) {\n      final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n      if (childrenIds.contains(flowFileId)) {\n        eventBuilder.removeChildFlowFile(flowFile);\n        if (copy == null) {\n          copy=eventBuilder.copy();\n          copy.getChildFlowFileIds().clear();\n        }\n        copy.addChildFlowFile(flowFileId);\n      }\n    }\n    if (copy != null) {\n      newOwner.forkEventBuilders.put(eventFlowFile,copy);\n      forkedFlowFilesMigrated.add(eventFlowFile);\n    }\n  }\n  forkedFlowFilesMigrated.forEach(forkEventBuilders::remove);\n  newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n  for (  final FlowFile flowFile : flowFiles) {\n    final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n    final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n    newOwner.records.put(flowFileRecord.getId(),repoRecord);\n    final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n    if (inputQueue != null) {\n      final String connectionId=inputQueue.getIdentifier();\n      incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n      newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n      unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n      newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n      flowFilesIn--;\n      contentSizeIn-=flowFile.getSize();\n      newOwner.flowFilesIn++;\n      newOwner.contentSizeIn+=flowFile.getSize();\n    }\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (removedFlowFiles.remove(flowFileId)) {\n      newOwner.removedFlowFiles.add(flowFileId);\n      newOwner.removedCount++;\n      newOwner.removedBytes+=flowFile.getSize();\n      removedCount--;\n      removedBytes-=flowFile.getSize();\n    }\n    if (createdFlowFiles.remove(flowFileId)) {\n      newOwner.createdFlowFiles.add(flowFileId);\n    }\n    if (repoRecord.getTransferRelationship() != null) {\n      flowFilesOut--;\n      contentSizeOut-=flowFile.getSize();\n      newOwner.flowFilesOut++;\n      newOwner.contentSizeOut+=flowFile.getSize();\n    }\n    final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n    if (events != null) {\n      newOwner.generatedProvenanceEvents.put(flowFile,events);\n    }\n    final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n    if (currentClaim != null) {\n      final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n      if (appendableStream != null) {\n        newOwner.appendableStreams.put(currentClaim,appendableStream);\n      }\n    }\n    final Path toDelete=deleteOnCommit.remove(flowFile);\n    if (toDelete != null) {\n      newOwner.deleteOnCommit.put(flowFile,toDelete);\n    }\n  }\n  provenanceReporter.migrate(newOwner.provenanceReporter,flowFileIds);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 730,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8883,
                        "startLineNumber": 1311,
                        "startColumnNumber": 4,
                        "endLineNumber": 1474,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void migrate(final StandardProcessSession newOwner,Collection<FlowFile> flowFiles){\n  flowFiles=flowFiles.stream().map(this::getMostRecent).collect(Collectors.toList());\n  for (  final FlowFile flowFile : flowFiles) {\n    if (openInputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open InputStream for the FlowFile, created by calling ProcessSession.read(FlowFile)\");\n    }\n    if (openOutputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open OutputStream for the FlowFile, created by calling ProcessSession.write(FlowFile)\");\n    }\n    if (readRecursionSet.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or InputStream created by ProcessSession.read(FlowFile) has not been closed\");\n    }\n    if (writeRecursionSet.contains(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or OutputStream created by ProcessSession.write(FlowFile) has not been closed\");\n    }\n    final StandardRepositoryRecord record=getRecord(flowFile);\n    if (record == null) {\n      throw new FlowFileHandlingException(flowFile + \" is not known in this session (\" + toString()+ \")\");\n    }\n  }\n  final Set<String> flowFileIds=flowFiles.stream().map(ff -> ff.getAttribute(CoreAttributes.UUID.key())).collect(Collectors.toSet());\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    if (flowFiles.contains(eventFlowFile)) {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (!flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n        }\n      }\n    }\n else {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n        }\n      }\n    }\n  }\n  final Set<FlowFile> forkedFlowFilesMigrated=new HashSet<>();\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    if (!flowFiles.contains(eventFlowFile)) {\n      continue;\n    }\n    final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n    ProvenanceEventBuilder copy=null;\n    for (    final FlowFile flowFile : flowFiles) {\n      final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n      if (childrenIds.contains(flowFileId)) {\n        eventBuilder.removeChildFlowFile(flowFile);\n        if (copy == null) {\n          copy=eventBuilder.copy();\n          copy.getChildFlowFileIds().clear();\n        }\n        copy.addChildFlowFile(flowFileId);\n      }\n    }\n    if (copy != null) {\n      newOwner.forkEventBuilders.put(eventFlowFile,copy);\n      forkedFlowFilesMigrated.add(eventFlowFile);\n    }\n  }\n  forkedFlowFilesMigrated.forEach(forkEventBuilders::remove);\n  newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n  for (  final FlowFile flowFile : flowFiles) {\n    final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n    final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n    newOwner.records.put(flowFileRecord.getId(),repoRecord);\n    final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n    if (inputQueue != null) {\n      final String connectionId=inputQueue.getIdentifier();\n      incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n      newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n      unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n      newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n      flowFilesIn--;\n      contentSizeIn-=flowFile.getSize();\n      newOwner.flowFilesIn++;\n      newOwner.contentSizeIn+=flowFile.getSize();\n    }\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (removedFlowFiles.remove(flowFileId)) {\n      newOwner.removedFlowFiles.add(flowFileId);\n      newOwner.removedCount++;\n      newOwner.removedBytes+=flowFile.getSize();\n      removedCount--;\n      removedBytes-=flowFile.getSize();\n    }\n    if (createdFlowFiles.remove(flowFileId)) {\n      newOwner.createdFlowFiles.add(flowFileId);\n    }\n    if (repoRecord.getTransferRelationship() != null) {\n      flowFilesOut--;\n      contentSizeOut-=flowFile.getSize();\n      newOwner.flowFilesOut++;\n      newOwner.contentSizeOut+=flowFile.getSize();\n    }\n    final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n    if (events != null) {\n      newOwner.generatedProvenanceEvents.put(flowFile,events);\n    }\n    final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n    if (currentClaim != null) {\n      final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n      if (appendableStream != null) {\n        newOwner.appendableStreams.put(currentClaim,appendableStream);\n      }\n    }\n    final Path toDelete=deleteOnCommit.remove(flowFile);\n    if (toDelete != null) {\n      newOwner.deleteOnCommit.put(flowFile,toDelete);\n    }\n  }\n  provenanceReporter.migrate(newOwner.provenanceReporter,flowFileIds);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 746,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
                "nodePosition": {
                    "charLength": 262,
                    "startLineNumber": 1361,
                    "startColumnNumber": 60,
                    "endLineNumber": 1362,
                    "endColumnNumber": 121
                },
                "nodeContext": "\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\"",
                "nodeType": "InfixExpression",
                "astNodeNumber": 5,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.flowfile.FlowFile"
        },
        {
            "nodeContext": "eventFlowFile",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 13,
                "startLineNumber": 1376,
                "startColumnNumber": 36,
                "endLineNumber": 1376,
                "endColumnNumber": 49
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
                    "nodePosition": {
                        "charLength": 33,
                        "startLineNumber": 1376,
                        "startColumnNumber": 17,
                        "endLineNumber": 1376,
                        "endColumnNumber": 50
                    },
                    "nodeContext": "flowFiles.contains(eventFlowFile)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 34,
                        "startLineNumber": 1376,
                        "startColumnNumber": 16,
                        "endLineNumber": 1376,
                        "endColumnNumber": 50
                    },
                    "nodeContext": "!flowFiles.contains(eventFlowFile)",
                    "nodeType": "PrefixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 81,
                        "startLineNumber": 1376,
                        "startColumnNumber": 12,
                        "endLineNumber": 1378,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (!flowFiles.contains(eventFlowFile)) {\n  continue;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 1227,
                        "startLineNumber": 1371,
                        "startColumnNumber": 101,
                        "endLineNumber": 1400,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final FlowFile eventFlowFile=entry.getKey();\n  final ProvenanceEventBuilder eventBuilder=entry.getValue();\n  if (!flowFiles.contains(eventFlowFile)) {\n    continue;\n  }\n  final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n  ProvenanceEventBuilder copy=null;\n  for (  final FlowFile flowFile : flowFiles) {\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (childrenIds.contains(flowFileId)) {\n      eventBuilder.removeChildFlowFile(flowFile);\n      if (copy == null) {\n        copy=eventBuilder.copy();\n        copy.getChildFlowFileIds().clear();\n      }\n      copy.addChildFlowFile(flowFileId);\n    }\n  }\n  if (copy != null) {\n    newOwner.forkEventBuilders.put(eventFlowFile,copy);\n    forkedFlowFilesMigrated.add(eventFlowFile);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 122,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1320,
                        "startLineNumber": 1371,
                        "startColumnNumber": 8,
                        "endLineNumber": 1400,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n  final FlowFile eventFlowFile=entry.getKey();\n  final ProvenanceEventBuilder eventBuilder=entry.getValue();\n  if (!flowFiles.contains(eventFlowFile)) {\n    continue;\n  }\n  final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n  ProvenanceEventBuilder copy=null;\n  for (  final FlowFile flowFile : flowFiles) {\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (childrenIds.contains(flowFileId)) {\n      eventBuilder.removeChildFlowFile(flowFile);\n      if (copy == null) {\n        copy=eventBuilder.copy();\n        copy.getChildFlowFileIds().clear();\n      }\n      copy.addChildFlowFile(flowFileId);\n    }\n  }\n  if (copy != null) {\n    newOwner.forkEventBuilders.put(eventFlowFile,copy);\n    forkedFlowFilesMigrated.add(eventFlowFile);\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 138,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8791,
                        "startLineNumber": 1311,
                        "startColumnNumber": 96,
                        "endLineNumber": 1474,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  flowFiles=flowFiles.stream().map(this::getMostRecent).collect(Collectors.toList());\n  for (  final FlowFile flowFile : flowFiles) {\n    if (openInputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open InputStream for the FlowFile, created by calling ProcessSession.read(FlowFile)\");\n    }\n    if (openOutputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open OutputStream for the FlowFile, created by calling ProcessSession.write(FlowFile)\");\n    }\n    if (readRecursionSet.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or InputStream created by ProcessSession.read(FlowFile) has not been closed\");\n    }\n    if (writeRecursionSet.contains(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or OutputStream created by ProcessSession.write(FlowFile) has not been closed\");\n    }\n    final StandardRepositoryRecord record=getRecord(flowFile);\n    if (record == null) {\n      throw new FlowFileHandlingException(flowFile + \" is not known in this session (\" + toString()+ \")\");\n    }\n  }\n  final Set<String> flowFileIds=flowFiles.stream().map(ff -> ff.getAttribute(CoreAttributes.UUID.key())).collect(Collectors.toSet());\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    if (flowFiles.contains(eventFlowFile)) {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (!flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n        }\n      }\n    }\n else {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n        }\n      }\n    }\n  }\n  final Set<FlowFile> forkedFlowFilesMigrated=new HashSet<>();\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    if (!flowFiles.contains(eventFlowFile)) {\n      continue;\n    }\n    final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n    ProvenanceEventBuilder copy=null;\n    for (    final FlowFile flowFile : flowFiles) {\n      final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n      if (childrenIds.contains(flowFileId)) {\n        eventBuilder.removeChildFlowFile(flowFile);\n        if (copy == null) {\n          copy=eventBuilder.copy();\n          copy.getChildFlowFileIds().clear();\n        }\n        copy.addChildFlowFile(flowFileId);\n      }\n    }\n    if (copy != null) {\n      newOwner.forkEventBuilders.put(eventFlowFile,copy);\n      forkedFlowFilesMigrated.add(eventFlowFile);\n    }\n  }\n  forkedFlowFilesMigrated.forEach(forkEventBuilders::remove);\n  newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n  for (  final FlowFile flowFile : flowFiles) {\n    final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n    final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n    newOwner.records.put(flowFileRecord.getId(),repoRecord);\n    final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n    if (inputQueue != null) {\n      final String connectionId=inputQueue.getIdentifier();\n      incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n      newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n      unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n      newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n      flowFilesIn--;\n      contentSizeIn-=flowFile.getSize();\n      newOwner.flowFilesIn++;\n      newOwner.contentSizeIn+=flowFile.getSize();\n    }\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (removedFlowFiles.remove(flowFileId)) {\n      newOwner.removedFlowFiles.add(flowFileId);\n      newOwner.removedCount++;\n      newOwner.removedBytes+=flowFile.getSize();\n      removedCount--;\n      removedBytes-=flowFile.getSize();\n    }\n    if (createdFlowFiles.remove(flowFileId)) {\n      newOwner.createdFlowFiles.add(flowFileId);\n    }\n    if (repoRecord.getTransferRelationship() != null) {\n      flowFilesOut--;\n      contentSizeOut-=flowFile.getSize();\n      newOwner.flowFilesOut++;\n      newOwner.contentSizeOut+=flowFile.getSize();\n    }\n    final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n    if (events != null) {\n      newOwner.generatedProvenanceEvents.put(flowFile,events);\n    }\n    final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n    if (currentClaim != null) {\n      final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n      if (appendableStream != null) {\n        newOwner.appendableStreams.put(currentClaim,appendableStream);\n      }\n    }\n    final Path toDelete=deleteOnCommit.remove(flowFile);\n    if (toDelete != null) {\n      newOwner.deleteOnCommit.put(flowFile,toDelete);\n    }\n  }\n  provenanceReporter.migrate(newOwner.provenanceReporter,flowFileIds);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 730,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8883,
                        "startLineNumber": 1311,
                        "startColumnNumber": 4,
                        "endLineNumber": 1474,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void migrate(final StandardProcessSession newOwner,Collection<FlowFile> flowFiles){\n  flowFiles=flowFiles.stream().map(this::getMostRecent).collect(Collectors.toList());\n  for (  final FlowFile flowFile : flowFiles) {\n    if (openInputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open InputStream for the FlowFile, created by calling ProcessSession.read(FlowFile)\");\n    }\n    if (openOutputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open OutputStream for the FlowFile, created by calling ProcessSession.write(FlowFile)\");\n    }\n    if (readRecursionSet.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or InputStream created by ProcessSession.read(FlowFile) has not been closed\");\n    }\n    if (writeRecursionSet.contains(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or OutputStream created by ProcessSession.write(FlowFile) has not been closed\");\n    }\n    final StandardRepositoryRecord record=getRecord(flowFile);\n    if (record == null) {\n      throw new FlowFileHandlingException(flowFile + \" is not known in this session (\" + toString()+ \")\");\n    }\n  }\n  final Set<String> flowFileIds=flowFiles.stream().map(ff -> ff.getAttribute(CoreAttributes.UUID.key())).collect(Collectors.toSet());\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    if (flowFiles.contains(eventFlowFile)) {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (!flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n        }\n      }\n    }\n else {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n        }\n      }\n    }\n  }\n  final Set<FlowFile> forkedFlowFilesMigrated=new HashSet<>();\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    if (!flowFiles.contains(eventFlowFile)) {\n      continue;\n    }\n    final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n    ProvenanceEventBuilder copy=null;\n    for (    final FlowFile flowFile : flowFiles) {\n      final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n      if (childrenIds.contains(flowFileId)) {\n        eventBuilder.removeChildFlowFile(flowFile);\n        if (copy == null) {\n          copy=eventBuilder.copy();\n          copy.getChildFlowFileIds().clear();\n        }\n        copy.addChildFlowFile(flowFileId);\n      }\n    }\n    if (copy != null) {\n      newOwner.forkEventBuilders.put(eventFlowFile,copy);\n      forkedFlowFilesMigrated.add(eventFlowFile);\n    }\n  }\n  forkedFlowFilesMigrated.forEach(forkEventBuilders::remove);\n  newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n  for (  final FlowFile flowFile : flowFiles) {\n    final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n    final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n    newOwner.records.put(flowFileRecord.getId(),repoRecord);\n    final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n    if (inputQueue != null) {\n      final String connectionId=inputQueue.getIdentifier();\n      incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n      newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n      unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n      newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n      flowFilesIn--;\n      contentSizeIn-=flowFile.getSize();\n      newOwner.flowFilesIn++;\n      newOwner.contentSizeIn+=flowFile.getSize();\n    }\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (removedFlowFiles.remove(flowFileId)) {\n      newOwner.removedFlowFiles.add(flowFileId);\n      newOwner.removedCount++;\n      newOwner.removedBytes+=flowFile.getSize();\n      removedCount--;\n      removedBytes-=flowFile.getSize();\n    }\n    if (createdFlowFiles.remove(flowFileId)) {\n      newOwner.createdFlowFiles.add(flowFileId);\n    }\n    if (repoRecord.getTransferRelationship() != null) {\n      flowFilesOut--;\n      contentSizeOut-=flowFile.getSize();\n      newOwner.flowFilesOut++;\n      newOwner.contentSizeOut+=flowFile.getSize();\n    }\n    final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n    if (events != null) {\n      newOwner.generatedProvenanceEvents.put(flowFile,events);\n    }\n    final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n    if (currentClaim != null) {\n      final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n      if (appendableStream != null) {\n        newOwner.appendableStreams.put(currentClaim,appendableStream);\n      }\n    }\n    final Path toDelete=deleteOnCommit.remove(flowFile);\n    if (toDelete != null) {\n      newOwner.deleteOnCommit.put(flowFile,toDelete);\n    }\n  }\n  provenanceReporter.migrate(newOwner.provenanceReporter,flowFileIds);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 746,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 34,
                    "startLineNumber": 1376,
                    "startColumnNumber": 16,
                    "endLineNumber": 1376,
                    "endColumnNumber": 50
                },
                "nodeContext": "!flowFiles.contains(eventFlowFile)",
                "nodeType": "PrefixExpression",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.flowfile.FlowFile"
        },
        {
            "nodeContext": "eventFlowFile",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 13,
                "startLineNumber": 1397,
                "startColumnNumber": 47,
                "endLineNumber": 1397,
                "endColumnNumber": 60
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 51,
                        "startLineNumber": 1397,
                        "startColumnNumber": 16,
                        "endLineNumber": 1397,
                        "endColumnNumber": 67
                    },
                    "nodeContext": "newOwner.forkEventBuilders.put(eventFlowFile,copy)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 52,
                        "startLineNumber": 1397,
                        "startColumnNumber": 16,
                        "endLineNumber": 1397,
                        "endColumnNumber": 68
                    },
                    "nodeContext": "newOwner.forkEventBuilders.put(eventFlowFile,copy);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 144,
                        "startLineNumber": 1396,
                        "startColumnNumber": 30,
                        "endLineNumber": 1399,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  newOwner.forkEventBuilders.put(eventFlowFile,copy);\n  forkedFlowFilesMigrated.add(eventFlowFile);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 14,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 162,
                        "startLineNumber": 1396,
                        "startColumnNumber": 12,
                        "endLineNumber": 1399,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (copy != null) {\n  newOwner.forkEventBuilders.put(eventFlowFile,copy);\n  forkedFlowFilesMigrated.add(eventFlowFile);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 18,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 1227,
                        "startLineNumber": 1371,
                        "startColumnNumber": 101,
                        "endLineNumber": 1400,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final FlowFile eventFlowFile=entry.getKey();\n  final ProvenanceEventBuilder eventBuilder=entry.getValue();\n  if (!flowFiles.contains(eventFlowFile)) {\n    continue;\n  }\n  final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n  ProvenanceEventBuilder copy=null;\n  for (  final FlowFile flowFile : flowFiles) {\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (childrenIds.contains(flowFileId)) {\n      eventBuilder.removeChildFlowFile(flowFile);\n      if (copy == null) {\n        copy=eventBuilder.copy();\n        copy.getChildFlowFileIds().clear();\n      }\n      copy.addChildFlowFile(flowFileId);\n    }\n  }\n  if (copy != null) {\n    newOwner.forkEventBuilders.put(eventFlowFile,copy);\n    forkedFlowFilesMigrated.add(eventFlowFile);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 122,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1320,
                        "startLineNumber": 1371,
                        "startColumnNumber": 8,
                        "endLineNumber": 1400,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n  final FlowFile eventFlowFile=entry.getKey();\n  final ProvenanceEventBuilder eventBuilder=entry.getValue();\n  if (!flowFiles.contains(eventFlowFile)) {\n    continue;\n  }\n  final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n  ProvenanceEventBuilder copy=null;\n  for (  final FlowFile flowFile : flowFiles) {\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (childrenIds.contains(flowFileId)) {\n      eventBuilder.removeChildFlowFile(flowFile);\n      if (copy == null) {\n        copy=eventBuilder.copy();\n        copy.getChildFlowFileIds().clear();\n      }\n      copy.addChildFlowFile(flowFileId);\n    }\n  }\n  if (copy != null) {\n    newOwner.forkEventBuilders.put(eventFlowFile,copy);\n    forkedFlowFilesMigrated.add(eventFlowFile);\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 138,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8791,
                        "startLineNumber": 1311,
                        "startColumnNumber": 96,
                        "endLineNumber": 1474,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  flowFiles=flowFiles.stream().map(this::getMostRecent).collect(Collectors.toList());\n  for (  final FlowFile flowFile : flowFiles) {\n    if (openInputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open InputStream for the FlowFile, created by calling ProcessSession.read(FlowFile)\");\n    }\n    if (openOutputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open OutputStream for the FlowFile, created by calling ProcessSession.write(FlowFile)\");\n    }\n    if (readRecursionSet.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or InputStream created by ProcessSession.read(FlowFile) has not been closed\");\n    }\n    if (writeRecursionSet.contains(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or OutputStream created by ProcessSession.write(FlowFile) has not been closed\");\n    }\n    final StandardRepositoryRecord record=getRecord(flowFile);\n    if (record == null) {\n      throw new FlowFileHandlingException(flowFile + \" is not known in this session (\" + toString()+ \")\");\n    }\n  }\n  final Set<String> flowFileIds=flowFiles.stream().map(ff -> ff.getAttribute(CoreAttributes.UUID.key())).collect(Collectors.toSet());\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    if (flowFiles.contains(eventFlowFile)) {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (!flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n        }\n      }\n    }\n else {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n        }\n      }\n    }\n  }\n  final Set<FlowFile> forkedFlowFilesMigrated=new HashSet<>();\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    if (!flowFiles.contains(eventFlowFile)) {\n      continue;\n    }\n    final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n    ProvenanceEventBuilder copy=null;\n    for (    final FlowFile flowFile : flowFiles) {\n      final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n      if (childrenIds.contains(flowFileId)) {\n        eventBuilder.removeChildFlowFile(flowFile);\n        if (copy == null) {\n          copy=eventBuilder.copy();\n          copy.getChildFlowFileIds().clear();\n        }\n        copy.addChildFlowFile(flowFileId);\n      }\n    }\n    if (copy != null) {\n      newOwner.forkEventBuilders.put(eventFlowFile,copy);\n      forkedFlowFilesMigrated.add(eventFlowFile);\n    }\n  }\n  forkedFlowFilesMigrated.forEach(forkEventBuilders::remove);\n  newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n  for (  final FlowFile flowFile : flowFiles) {\n    final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n    final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n    newOwner.records.put(flowFileRecord.getId(),repoRecord);\n    final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n    if (inputQueue != null) {\n      final String connectionId=inputQueue.getIdentifier();\n      incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n      newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n      unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n      newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n      flowFilesIn--;\n      contentSizeIn-=flowFile.getSize();\n      newOwner.flowFilesIn++;\n      newOwner.contentSizeIn+=flowFile.getSize();\n    }\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (removedFlowFiles.remove(flowFileId)) {\n      newOwner.removedFlowFiles.add(flowFileId);\n      newOwner.removedCount++;\n      newOwner.removedBytes+=flowFile.getSize();\n      removedCount--;\n      removedBytes-=flowFile.getSize();\n    }\n    if (createdFlowFiles.remove(flowFileId)) {\n      newOwner.createdFlowFiles.add(flowFileId);\n    }\n    if (repoRecord.getTransferRelationship() != null) {\n      flowFilesOut--;\n      contentSizeOut-=flowFile.getSize();\n      newOwner.flowFilesOut++;\n      newOwner.contentSizeOut+=flowFile.getSize();\n    }\n    final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n    if (events != null) {\n      newOwner.generatedProvenanceEvents.put(flowFile,events);\n    }\n    final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n    if (currentClaim != null) {\n      final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n      if (appendableStream != null) {\n        newOwner.appendableStreams.put(currentClaim,appendableStream);\n      }\n    }\n    final Path toDelete=deleteOnCommit.remove(flowFile);\n    if (toDelete != null) {\n      newOwner.deleteOnCommit.put(flowFile,toDelete);\n    }\n  }\n  provenanceReporter.migrate(newOwner.provenanceReporter,flowFileIds);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 730,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8883,
                        "startLineNumber": 1311,
                        "startColumnNumber": 4,
                        "endLineNumber": 1474,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void migrate(final StandardProcessSession newOwner,Collection<FlowFile> flowFiles){\n  flowFiles=flowFiles.stream().map(this::getMostRecent).collect(Collectors.toList());\n  for (  final FlowFile flowFile : flowFiles) {\n    if (openInputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open InputStream for the FlowFile, created by calling ProcessSession.read(FlowFile)\");\n    }\n    if (openOutputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open OutputStream for the FlowFile, created by calling ProcessSession.write(FlowFile)\");\n    }\n    if (readRecursionSet.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or InputStream created by ProcessSession.read(FlowFile) has not been closed\");\n    }\n    if (writeRecursionSet.contains(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or OutputStream created by ProcessSession.write(FlowFile) has not been closed\");\n    }\n    final StandardRepositoryRecord record=getRecord(flowFile);\n    if (record == null) {\n      throw new FlowFileHandlingException(flowFile + \" is not known in this session (\" + toString()+ \")\");\n    }\n  }\n  final Set<String> flowFileIds=flowFiles.stream().map(ff -> ff.getAttribute(CoreAttributes.UUID.key())).collect(Collectors.toSet());\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    if (flowFiles.contains(eventFlowFile)) {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (!flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n        }\n      }\n    }\n else {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n        }\n      }\n    }\n  }\n  final Set<FlowFile> forkedFlowFilesMigrated=new HashSet<>();\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    if (!flowFiles.contains(eventFlowFile)) {\n      continue;\n    }\n    final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n    ProvenanceEventBuilder copy=null;\n    for (    final FlowFile flowFile : flowFiles) {\n      final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n      if (childrenIds.contains(flowFileId)) {\n        eventBuilder.removeChildFlowFile(flowFile);\n        if (copy == null) {\n          copy=eventBuilder.copy();\n          copy.getChildFlowFileIds().clear();\n        }\n        copy.addChildFlowFile(flowFileId);\n      }\n    }\n    if (copy != null) {\n      newOwner.forkEventBuilders.put(eventFlowFile,copy);\n      forkedFlowFilesMigrated.add(eventFlowFile);\n    }\n  }\n  forkedFlowFilesMigrated.forEach(forkEventBuilders::remove);\n  newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n  for (  final FlowFile flowFile : flowFiles) {\n    final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n    final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n    newOwner.records.put(flowFileRecord.getId(),repoRecord);\n    final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n    if (inputQueue != null) {\n      final String connectionId=inputQueue.getIdentifier();\n      incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n      newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n      unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n      newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n      flowFilesIn--;\n      contentSizeIn-=flowFile.getSize();\n      newOwner.flowFilesIn++;\n      newOwner.contentSizeIn+=flowFile.getSize();\n    }\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (removedFlowFiles.remove(flowFileId)) {\n      newOwner.removedFlowFiles.add(flowFileId);\n      newOwner.removedCount++;\n      newOwner.removedBytes+=flowFile.getSize();\n      removedCount--;\n      removedBytes-=flowFile.getSize();\n    }\n    if (createdFlowFiles.remove(flowFileId)) {\n      newOwner.createdFlowFiles.add(flowFileId);\n    }\n    if (repoRecord.getTransferRelationship() != null) {\n      flowFilesOut--;\n      contentSizeOut-=flowFile.getSize();\n      newOwner.flowFilesOut++;\n      newOwner.contentSizeOut+=flowFile.getSize();\n    }\n    final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n    if (events != null) {\n      newOwner.generatedProvenanceEvents.put(flowFile,events);\n    }\n    final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n    if (currentClaim != null) {\n      final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n      if (appendableStream != null) {\n        newOwner.appendableStreams.put(currentClaim,appendableStream);\n      }\n    }\n    final Path toDelete=deleteOnCommit.remove(flowFile);\n    if (toDelete != null) {\n      newOwner.deleteOnCommit.put(flowFile,toDelete);\n    }\n  }\n  provenanceReporter.migrate(newOwner.provenanceReporter,flowFileIds);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 746,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 52,
                    "startLineNumber": 1397,
                    "startColumnNumber": 16,
                    "endLineNumber": 1397,
                    "endColumnNumber": 68
                },
                "nodeContext": "newOwner.forkEventBuilders.put(eventFlowFile,copy);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.flowfile.FlowFile"
        },
        {
            "nodeContext": "eventFlowFile",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 13,
                "startLineNumber": 1398,
                "startColumnNumber": 44,
                "endLineNumber": 1398,
                "endColumnNumber": 57
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 42,
                        "startLineNumber": 1398,
                        "startColumnNumber": 16,
                        "endLineNumber": 1398,
                        "endColumnNumber": 58
                    },
                    "nodeContext": "forkedFlowFilesMigrated.add(eventFlowFile)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 43,
                        "startLineNumber": 1398,
                        "startColumnNumber": 16,
                        "endLineNumber": 1398,
                        "endColumnNumber": 59
                    },
                    "nodeContext": "forkedFlowFilesMigrated.add(eventFlowFile);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 144,
                        "startLineNumber": 1396,
                        "startColumnNumber": 30,
                        "endLineNumber": 1399,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  newOwner.forkEventBuilders.put(eventFlowFile,copy);\n  forkedFlowFilesMigrated.add(eventFlowFile);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 14,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 162,
                        "startLineNumber": 1396,
                        "startColumnNumber": 12,
                        "endLineNumber": 1399,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (copy != null) {\n  newOwner.forkEventBuilders.put(eventFlowFile,copy);\n  forkedFlowFilesMigrated.add(eventFlowFile);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 18,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 1227,
                        "startLineNumber": 1371,
                        "startColumnNumber": 101,
                        "endLineNumber": 1400,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final FlowFile eventFlowFile=entry.getKey();\n  final ProvenanceEventBuilder eventBuilder=entry.getValue();\n  if (!flowFiles.contains(eventFlowFile)) {\n    continue;\n  }\n  final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n  ProvenanceEventBuilder copy=null;\n  for (  final FlowFile flowFile : flowFiles) {\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (childrenIds.contains(flowFileId)) {\n      eventBuilder.removeChildFlowFile(flowFile);\n      if (copy == null) {\n        copy=eventBuilder.copy();\n        copy.getChildFlowFileIds().clear();\n      }\n      copy.addChildFlowFile(flowFileId);\n    }\n  }\n  if (copy != null) {\n    newOwner.forkEventBuilders.put(eventFlowFile,copy);\n    forkedFlowFilesMigrated.add(eventFlowFile);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 122,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1320,
                        "startLineNumber": 1371,
                        "startColumnNumber": 8,
                        "endLineNumber": 1400,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n  final FlowFile eventFlowFile=entry.getKey();\n  final ProvenanceEventBuilder eventBuilder=entry.getValue();\n  if (!flowFiles.contains(eventFlowFile)) {\n    continue;\n  }\n  final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n  ProvenanceEventBuilder copy=null;\n  for (  final FlowFile flowFile : flowFiles) {\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (childrenIds.contains(flowFileId)) {\n      eventBuilder.removeChildFlowFile(flowFile);\n      if (copy == null) {\n        copy=eventBuilder.copy();\n        copy.getChildFlowFileIds().clear();\n      }\n      copy.addChildFlowFile(flowFileId);\n    }\n  }\n  if (copy != null) {\n    newOwner.forkEventBuilders.put(eventFlowFile,copy);\n    forkedFlowFilesMigrated.add(eventFlowFile);\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 138,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8791,
                        "startLineNumber": 1311,
                        "startColumnNumber": 96,
                        "endLineNumber": 1474,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  flowFiles=flowFiles.stream().map(this::getMostRecent).collect(Collectors.toList());\n  for (  final FlowFile flowFile : flowFiles) {\n    if (openInputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open InputStream for the FlowFile, created by calling ProcessSession.read(FlowFile)\");\n    }\n    if (openOutputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open OutputStream for the FlowFile, created by calling ProcessSession.write(FlowFile)\");\n    }\n    if (readRecursionSet.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or InputStream created by ProcessSession.read(FlowFile) has not been closed\");\n    }\n    if (writeRecursionSet.contains(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or OutputStream created by ProcessSession.write(FlowFile) has not been closed\");\n    }\n    final StandardRepositoryRecord record=getRecord(flowFile);\n    if (record == null) {\n      throw new FlowFileHandlingException(flowFile + \" is not known in this session (\" + toString()+ \")\");\n    }\n  }\n  final Set<String> flowFileIds=flowFiles.stream().map(ff -> ff.getAttribute(CoreAttributes.UUID.key())).collect(Collectors.toSet());\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    if (flowFiles.contains(eventFlowFile)) {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (!flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n        }\n      }\n    }\n else {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n        }\n      }\n    }\n  }\n  final Set<FlowFile> forkedFlowFilesMigrated=new HashSet<>();\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    if (!flowFiles.contains(eventFlowFile)) {\n      continue;\n    }\n    final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n    ProvenanceEventBuilder copy=null;\n    for (    final FlowFile flowFile : flowFiles) {\n      final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n      if (childrenIds.contains(flowFileId)) {\n        eventBuilder.removeChildFlowFile(flowFile);\n        if (copy == null) {\n          copy=eventBuilder.copy();\n          copy.getChildFlowFileIds().clear();\n        }\n        copy.addChildFlowFile(flowFileId);\n      }\n    }\n    if (copy != null) {\n      newOwner.forkEventBuilders.put(eventFlowFile,copy);\n      forkedFlowFilesMigrated.add(eventFlowFile);\n    }\n  }\n  forkedFlowFilesMigrated.forEach(forkEventBuilders::remove);\n  newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n  for (  final FlowFile flowFile : flowFiles) {\n    final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n    final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n    newOwner.records.put(flowFileRecord.getId(),repoRecord);\n    final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n    if (inputQueue != null) {\n      final String connectionId=inputQueue.getIdentifier();\n      incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n      newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n      unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n      newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n      flowFilesIn--;\n      contentSizeIn-=flowFile.getSize();\n      newOwner.flowFilesIn++;\n      newOwner.contentSizeIn+=flowFile.getSize();\n    }\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (removedFlowFiles.remove(flowFileId)) {\n      newOwner.removedFlowFiles.add(flowFileId);\n      newOwner.removedCount++;\n      newOwner.removedBytes+=flowFile.getSize();\n      removedCount--;\n      removedBytes-=flowFile.getSize();\n    }\n    if (createdFlowFiles.remove(flowFileId)) {\n      newOwner.createdFlowFiles.add(flowFileId);\n    }\n    if (repoRecord.getTransferRelationship() != null) {\n      flowFilesOut--;\n      contentSizeOut-=flowFile.getSize();\n      newOwner.flowFilesOut++;\n      newOwner.contentSizeOut+=flowFile.getSize();\n    }\n    final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n    if (events != null) {\n      newOwner.generatedProvenanceEvents.put(flowFile,events);\n    }\n    final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n    if (currentClaim != null) {\n      final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n      if (appendableStream != null) {\n        newOwner.appendableStreams.put(currentClaim,appendableStream);\n      }\n    }\n    final Path toDelete=deleteOnCommit.remove(flowFile);\n    if (toDelete != null) {\n      newOwner.deleteOnCommit.put(flowFile,toDelete);\n    }\n  }\n  provenanceReporter.migrate(newOwner.provenanceReporter,flowFileIds);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 730,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8883,
                        "startLineNumber": 1311,
                        "startColumnNumber": 4,
                        "endLineNumber": 1474,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void migrate(final StandardProcessSession newOwner,Collection<FlowFile> flowFiles){\n  flowFiles=flowFiles.stream().map(this::getMostRecent).collect(Collectors.toList());\n  for (  final FlowFile flowFile : flowFiles) {\n    if (openInputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open InputStream for the FlowFile, created by calling ProcessSession.read(FlowFile)\");\n    }\n    if (openOutputStreams.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" cannot be migrated to a new Process Session because this session currently \" + \"has an open OutputStream for the FlowFile, created by calling ProcessSession.write(FlowFile)\");\n    }\n    if (readRecursionSet.containsKey(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or InputStream created by ProcessSession.read(FlowFile) has not been closed\");\n    }\n    if (writeRecursionSet.contains(flowFile)) {\n      throw new IllegalStateException(flowFile + \" already in use for an active callback or OutputStream created by ProcessSession.write(FlowFile) has not been closed\");\n    }\n    final StandardRepositoryRecord record=getRecord(flowFile);\n    if (record == null) {\n      throw new FlowFileHandlingException(flowFile + \" is not known in this session (\" + toString()+ \")\");\n    }\n  }\n  final Set<String> flowFileIds=flowFiles.stream().map(ff -> ff.getAttribute(CoreAttributes.UUID.key())).collect(Collectors.toSet());\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    if (flowFiles.contains(eventFlowFile)) {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (!flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked to create \"+ eventBuilder.getChildFlowFileIds().size()+ \" children and not all children are being migrated. If any FlowFile is forked, all of its children must also be migrated at the same time as the forked FlowFile\");\n        }\n      }\n    }\n else {\n      final ProvenanceEventBuilder eventBuilder=entry.getValue();\n      for (      final String childId : eventBuilder.getChildFlowFileIds()) {\n        if (flowFileIds.contains(childId)) {\n          throw new FlowFileHandlingException(\"Cannot migrate \" + eventFlowFile + \" to a new session because it was forked from a Parent FlowFile, but the parent is not being migrated. \"+ \"If any FlowFile is forked, the parent and all children must be migrated at the same time.\");\n        }\n      }\n    }\n  }\n  final Set<FlowFile> forkedFlowFilesMigrated=new HashSet<>();\n  for (  final Map.Entry<FlowFile,ProvenanceEventBuilder> entry : forkEventBuilders.entrySet()) {\n    final FlowFile eventFlowFile=entry.getKey();\n    final ProvenanceEventBuilder eventBuilder=entry.getValue();\n    if (!flowFiles.contains(eventFlowFile)) {\n      continue;\n    }\n    final Set<String> childrenIds=new HashSet<>(eventBuilder.getChildFlowFileIds());\n    ProvenanceEventBuilder copy=null;\n    for (    final FlowFile flowFile : flowFiles) {\n      final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n      if (childrenIds.contains(flowFileId)) {\n        eventBuilder.removeChildFlowFile(flowFile);\n        if (copy == null) {\n          copy=eventBuilder.copy();\n          copy.getChildFlowFileIds().clear();\n        }\n        copy.addChildFlowFile(flowFileId);\n      }\n    }\n    if (copy != null) {\n      newOwner.forkEventBuilders.put(eventFlowFile,copy);\n      forkedFlowFilesMigrated.add(eventFlowFile);\n    }\n  }\n  forkedFlowFilesMigrated.forEach(forkEventBuilders::remove);\n  newOwner.processingStartTime=Math.min(newOwner.processingStartTime,processingStartTime);\n  for (  final FlowFile flowFile : flowFiles) {\n    final FlowFileRecord flowFileRecord=(FlowFileRecord)flowFile;\n    final StandardRepositoryRecord repoRecord=this.records.remove(flowFile.getId());\n    newOwner.records.put(flowFileRecord.getId(),repoRecord);\n    final FlowFileQueue inputQueue=repoRecord.getOriginalQueue();\n    if (inputQueue != null) {\n      final String connectionId=inputQueue.getIdentifier();\n      incrementConnectionOutputCounts(connectionId,-1,-repoRecord.getOriginal().getSize());\n      newOwner.incrementConnectionOutputCounts(connectionId,1,repoRecord.getOriginal().getSize());\n      unacknowledgedFlowFiles.get(inputQueue).remove(flowFile);\n      newOwner.unacknowledgedFlowFiles.computeIfAbsent(inputQueue,queue -> new HashSet<>()).add(flowFileRecord);\n      flowFilesIn--;\n      contentSizeIn-=flowFile.getSize();\n      newOwner.flowFilesIn++;\n      newOwner.contentSizeIn+=flowFile.getSize();\n    }\n    final String flowFileId=flowFile.getAttribute(CoreAttributes.UUID.key());\n    if (removedFlowFiles.remove(flowFileId)) {\n      newOwner.removedFlowFiles.add(flowFileId);\n      newOwner.removedCount++;\n      newOwner.removedBytes+=flowFile.getSize();\n      removedCount--;\n      removedBytes-=flowFile.getSize();\n    }\n    if (createdFlowFiles.remove(flowFileId)) {\n      newOwner.createdFlowFiles.add(flowFileId);\n    }\n    if (repoRecord.getTransferRelationship() != null) {\n      flowFilesOut--;\n      contentSizeOut-=flowFile.getSize();\n      newOwner.flowFilesOut++;\n      newOwner.contentSizeOut+=flowFile.getSize();\n    }\n    final List<ProvenanceEventRecord> events=generatedProvenanceEvents.remove(flowFile);\n    if (events != null) {\n      newOwner.generatedProvenanceEvents.put(flowFile,events);\n    }\n    final ContentClaim currentClaim=repoRecord.getCurrentClaim();\n    if (currentClaim != null) {\n      final ByteCountingOutputStream appendableStream=appendableStreams.remove(currentClaim);\n      if (appendableStream != null) {\n        newOwner.appendableStreams.put(currentClaim,appendableStream);\n      }\n    }\n    final Path toDelete=deleteOnCommit.remove(flowFile);\n    if (toDelete != null) {\n      newOwner.deleteOnCommit.put(flowFile,toDelete);\n    }\n  }\n  provenanceReporter.migrate(newOwner.provenanceReporter,flowFileIds);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 746,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 43,
                    "startLineNumber": 1398,
                    "startColumnNumber": 16,
                    "endLineNumber": 1398,
                    "endColumnNumber": 59
                },
                "nodeContext": "forkedFlowFilesMigrated.add(eventFlowFile);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "org.apache.nifi.flowfile.FlowFile"
        }
    ],
    "positionList": [
        {
            "charLength": 13,
            "startLineNumber": 1349,
            "startColumnNumber": 35,
            "endLineNumber": 1349,
            "endColumnNumber": 48
        },
        {
            "charLength": 13,
            "startLineNumber": 1353,
            "startColumnNumber": 80,
            "endLineNumber": 1353,
            "endColumnNumber": 93
        },
        {
            "charLength": 13,
            "startLineNumber": 1361,
            "startColumnNumber": 80,
            "endLineNumber": 1361,
            "endColumnNumber": 93
        },
        {
            "charLength": 13,
            "startLineNumber": 1376,
            "startColumnNumber": 36,
            "endLineNumber": 1376,
            "endColumnNumber": 49
        },
        {
            "charLength": 13,
            "startLineNumber": 1397,
            "startColumnNumber": 47,
            "endLineNumber": 1397,
            "endColumnNumber": 60
        },
        {
            "charLength": 13,
            "startLineNumber": 1398,
            "startColumnNumber": 44,
            "endLineNumber": 1398,
            "endColumnNumber": 57
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 1
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 1
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 0,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 0,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 8
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 11
        },
        {
            "firstKey": 1,
            "secondKey": 4,
            "layout": 11
        },
        {
            "firstKey": 1,
            "secondKey": 5,
            "layout": 11
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 8
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 11
        },
        {
            "firstKey": 2,
            "secondKey": 4,
            "layout": 11
        },
        {
            "firstKey": 2,
            "secondKey": 5,
            "layout": 11
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 3,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 4,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 4,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 4,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 5,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 5,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 5,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 4,
            "layout": 2
        }
    ]
}