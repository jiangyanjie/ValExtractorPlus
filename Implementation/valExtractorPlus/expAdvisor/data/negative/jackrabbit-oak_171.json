{
    "id": 171,
    "expression": "SchemaConstants",
    "projectName": "jackrabbit-oak",
    "commitID": "f27968a80aa5ecdd464ce6a03c69f171999cb8cf",
    "filePath": "oak-auth-ldap/src/main/java/org/apache/jackrabbit/oak/security/authentication/ldap/impl/LdapIdentityProvider.java",
    "occurrences": 1,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "SchemaConstants",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 15,
                "startLineNumber": 216,
                "startColumnNumber": 55,
                "endLineNumber": 216,
                "endColumnNumber": 70
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 35,
                        "startLineNumber": 216,
                        "startColumnNumber": 55,
                        "endLineNumber": 216,
                        "endColumnNumber": 90
                    },
                    "nodeContext": "SchemaConstants.ALL_USER_ATTRIBUTES",
                    "nodeType": "QualifiedName",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 67,
                        "startLineNumber": 216,
                        "startColumnNumber": 24,
                        "endLineNumber": 216,
                        "endColumnNumber": 91
                    },
                    "nodeContext": "connection.lookup(ref.getId(),SchemaConstants.ALL_USER_ATTRIBUTES)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 9,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 75,
                        "startLineNumber": 216,
                        "startColumnNumber": 16,
                        "endLineNumber": 216,
                        "endColumnNumber": 91
                    },
                    "nodeContext": "entry=connection.lookup(ref.getId(),SchemaConstants.ALL_USER_ATTRIBUTES)",
                    "nodeType": "Assignment",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 76,
                        "startLineNumber": 216,
                        "startColumnNumber": 16,
                        "endLineNumber": 216,
                        "endColumnNumber": 92
                    },
                    "nodeContext": "entry=connection.lookup(ref.getId(),SchemaConstants.ALL_USER_ATTRIBUTES);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 12,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 108,
                        "startLineNumber": 215,
                        "startColumnNumber": 32,
                        "endLineNumber": 217,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  entry=connection.lookup(ref.getId(),SchemaConstants.ALL_USER_ATTRIBUTES);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 13,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 572,
                        "startLineNumber": 215,
                        "startColumnNumber": 12,
                        "endLineNumber": 226,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (ca.length == 0) {\n  entry=connection.lookup(ref.getId(),SchemaConstants.ALL_USER_ATTRIBUTES);\n}\n else {\n  List<String> attributes=new ArrayList<>(Arrays.asList(ca));\n  attributes.add(\"objectClass\");\n  attributes.add(userIdAttr);\n  attributes.add(groupIdAttr);\n  String[] attributeArray=new String[attributes.size()];\n  attributes.toArray(attributeArray);\n  entry=connection.lookup(ref.getId(),attributeArray);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 81,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 1324,
                        "startLineNumber": 210,
                        "startColumnNumber": 12,
                        "endLineNumber": 237,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  String userIdAttr=config.getUserConfig().getIdAttribute();\n  String groupIdAttr=config.getGroupConfig().getIdAttribute();\n  String[] ca=config.getCustomAttributes();\n  Entry entry;\n  if (ca.length == 0) {\n    entry=connection.lookup(ref.getId(),SchemaConstants.ALL_USER_ATTRIBUTES);\n  }\n else {\n    List<String> attributes=new ArrayList<>(Arrays.asList(ca));\n    attributes.add(\"objectClass\");\n    attributes.add(userIdAttr);\n    attributes.add(groupIdAttr);\n    String[] attributeArray=new String[attributes.size()];\n    attributes.toArray(attributeArray);\n    entry=connection.lookup(ref.getId(),attributeArray);\n  }\n  if (entry == null) {\n    return null;\n  }\n else   if (entry.hasObjectClass(config.getUserConfig().getObjectClasses())) {\n    return createUser(entry,null);\n  }\n else   if (entry.hasObjectClass(config.getGroupConfig().getObjectClasses())) {\n    return createGroup(entry,null);\n  }\n else {\n    log.warn(\"referenced identity is neither user or group: {}\",ref.getString());\n    return null;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 165,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1470,
                        "startLineNumber": 210,
                        "startColumnNumber": 8,
                        "endLineNumber": 241,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "try {\n  String userIdAttr=config.getUserConfig().getIdAttribute();\n  String groupIdAttr=config.getGroupConfig().getIdAttribute();\n  String[] ca=config.getCustomAttributes();\n  Entry entry;\n  if (ca.length == 0) {\n    entry=connection.lookup(ref.getId(),SchemaConstants.ALL_USER_ATTRIBUTES);\n  }\n else {\n    List<String> attributes=new ArrayList<>(Arrays.asList(ca));\n    attributes.add(\"objectClass\");\n    attributes.add(userIdAttr);\n    attributes.add(groupIdAttr);\n    String[] attributeArray=new String[attributes.size()];\n    attributes.toArray(attributeArray);\n    entry=connection.lookup(ref.getId(),attributeArray);\n  }\n  if (entry == null) {\n    return null;\n  }\n else   if (entry.hasObjectClass(config.getUserConfig().getObjectClasses())) {\n    return createUser(entry,null);\n  }\n else   if (entry.hasObjectClass(config.getGroupConfig().getObjectClasses())) {\n    return createGroup(entry,null);\n  }\n else {\n    log.warn(\"referenced identity is neither user or group: {}\",ref.getString());\n    return null;\n  }\n}\n catch (LdapException e) {\n  throw lookupFailedException(e,null);\n}\n finally {\n  disconnect(connection);\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 182,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1598,
                        "startLineNumber": 204,
                        "startColumnNumber": 107,
                        "endLineNumber": 242,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (!isMyRef(ref)) {\n    return null;\n  }\n  LdapConnection connection=connect();\n  try {\n    String userIdAttr=config.getUserConfig().getIdAttribute();\n    String groupIdAttr=config.getGroupConfig().getIdAttribute();\n    String[] ca=config.getCustomAttributes();\n    Entry entry;\n    if (ca.length == 0) {\n      entry=connection.lookup(ref.getId(),SchemaConstants.ALL_USER_ATTRIBUTES);\n    }\n else {\n      List<String> attributes=new ArrayList<>(Arrays.asList(ca));\n      attributes.add(\"objectClass\");\n      attributes.add(userIdAttr);\n      attributes.add(groupIdAttr);\n      String[] attributeArray=new String[attributes.size()];\n      attributes.toArray(attributeArray);\n      entry=connection.lookup(ref.getId(),attributeArray);\n    }\n    if (entry == null) {\n      return null;\n    }\n else     if (entry.hasObjectClass(config.getUserConfig().getObjectClasses())) {\n      return createUser(entry,null);\n    }\n else     if (entry.hasObjectClass(config.getGroupConfig().getObjectClasses())) {\n      return createGroup(entry,null);\n    }\n else {\n      log.warn(\"referenced identity is neither user or group: {}\",ref.getString());\n      return null;\n    }\n  }\n catch (  LdapException e) {\n    throw lookupFailedException(e,null);\n  }\n finally {\n    disconnect(connection);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 198,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1715,
                        "startLineNumber": 203,
                        "startColumnNumber": 4,
                        "endLineNumber": 242,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public ExternalIdentity getIdentity(@NotNull ExternalIdentityRef ref) throws ExternalIdentityException {\n  if (!isMyRef(ref)) {\n    return null;\n  }\n  LdapConnection connection=connect();\n  try {\n    String userIdAttr=config.getUserConfig().getIdAttribute();\n    String groupIdAttr=config.getGroupConfig().getIdAttribute();\n    String[] ca=config.getCustomAttributes();\n    Entry entry;\n    if (ca.length == 0) {\n      entry=connection.lookup(ref.getId(),SchemaConstants.ALL_USER_ATTRIBUTES);\n    }\n else {\n      List<String> attributes=new ArrayList<>(Arrays.asList(ca));\n      attributes.add(\"objectClass\");\n      attributes.add(userIdAttr);\n      attributes.add(groupIdAttr);\n      String[] attributeArray=new String[attributes.size()];\n      attributes.toArray(attributeArray);\n      entry=connection.lookup(ref.getId(),attributeArray);\n    }\n    if (entry == null) {\n      return null;\n    }\n else     if (entry.hasObjectClass(config.getUserConfig().getObjectClasses())) {\n      return createUser(entry,null);\n    }\n else     if (entry.hasObjectClass(config.getGroupConfig().getObjectClasses())) {\n      return createGroup(entry,null);\n    }\n else {\n      log.warn(\"referenced identity is neither user or group: {}\",ref.getString());\n      return null;\n    }\n  }\n catch (  LdapException e) {\n    throw lookupFailedException(e,null);\n  }\n finally {\n    disconnect(connection);\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 213,
                    "astHeight": 12
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 76,
                    "startLineNumber": 216,
                    "startColumnNumber": 16,
                    "endLineNumber": 216,
                    "endColumnNumber": 92
                },
                "nodeContext": "entry=connection.lookup(ref.getId(),SchemaConstants.ALL_USER_ATTRIBUTES);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 12,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": null
        }
    ],
    "positionList": [
        {
            "charLength": 15,
            "startLineNumber": 216,
            "startColumnNumber": 55,
            "endLineNumber": 216,
            "endColumnNumber": 70
        }
    ],
    "layoutRelationDataList": []
}