{
    "id": 274,
    "expression": "\" in ASI extra field\"",
    "projectName": "commons-compress",
    "commitID": "e3ea7b6607e7c96b9e2b6813c05bfba887c8e226",
    "filePath": "src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java",
    "occurrences": 1,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "\" in ASI extra field\"",
            "nodeType": "StringLiteral",
            "nodePosition": {
                "charLength": 21,
                "startLineNumber": 293,
                "startColumnNumber": 18,
                "endLineNumber": 293,
                "endColumnNumber": 39
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
                    "nodePosition": {
                        "charLength": 92,
                        "startLineNumber": 292,
                        "startColumnNumber": 35,
                        "endLineNumber": 293,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "\"Bad symbolic link name length \" + linkArray.length + \" in ASI extra field\"",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
                    "nodePosition": {
                        "charLength": 110,
                        "startLineNumber": 292,
                        "startColumnNumber": 18,
                        "endLineNumber": 293,
                        "endColumnNumber": 40
                    },
                    "nodeContext": "new ZipException(\"Bad symbolic link name length \" + linkArray.length + \" in ASI extra field\")",
                    "nodeType": "ClassInstanceCreation",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 117,
                        "startLineNumber": 292,
                        "startColumnNumber": 12,
                        "endLineNumber": 293,
                        "endColumnNumber": 41
                    },
                    "nodeContext": "throw new ZipException(\"Bad symbolic link name length \" + linkArray.length + \" in ASI extra field\");\n",
                    "nodeType": "ThrowStatement",
                    "astNodeNumber": 10,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 143,
                        "startLineNumber": 291,
                        "startColumnNumber": 55,
                        "endLineNumber": 294,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  throw new ZipException(\"Bad symbolic link name length \" + linkArray.length + \" in ASI extra field\");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 11,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 360,
                        "startLineNumber": 291,
                        "startColumnNumber": 15,
                        "endLineNumber": 297,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (linkArray.length > tmp.length - 10) {\n  throw new ZipException(\"Bad symbolic link name length \" + linkArray.length + \" in ASI extra field\");\n}\n else {\n  System.arraycopy(tmp,10,linkArray,0,linkArray.length);\n  link=new String(linkArray);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 40,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 429,
                        "startLineNumber": 289,
                        "startColumnNumber": 8,
                        "endLineNumber": 297,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (linkArray.length == 0) {\n  link=\"\";\n}\n else if (linkArray.length > tmp.length - 10) {\n  throw new ZipException(\"Bad symbolic link name length \" + linkArray.length + \" in ASI extra field\");\n}\n else {\n  System.arraycopy(tmp,10,linkArray,0,linkArray.length);\n  link=new String(linkArray);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 51,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1431,
                        "startLineNumber": 268,
                        "startColumnNumber": 28,
                        "endLineNumber": 301,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final long givenChecksum=ZipLong.getValue(data,offset);\n  final byte[] tmp=new byte[length - WORD];\n  System.arraycopy(data,offset + WORD,tmp,0,length - WORD);\n  crc.reset();\n  crc.update(tmp);\n  final long realChecksum=crc.getValue();\n  if (givenChecksum != realChecksum) {\n    throw new ZipException(\"Bad CRC checksum, expected \" + Long.toHexString(givenChecksum) + \" instead of \"+ Long.toHexString(realChecksum));\n  }\n  final int newMode=ZipShort.getValue(tmp,0);\n  final byte[] linkArray=new byte[(int)ZipLong.getValue(tmp,2)];\n  uid=ZipShort.getValue(tmp,6);\n  gid=ZipShort.getValue(tmp,8);\n  if (linkArray.length == 0) {\n    link=\"\";\n  }\n else   if (linkArray.length > tmp.length - 10) {\n    throw new ZipException(\"Bad symbolic link name length \" + linkArray.length + \" in ASI extra field\");\n  }\n else {\n    System.arraycopy(tmp,10,linkArray,0,linkArray.length);\n    link=new String(linkArray);\n  }\n  setDirectory((newMode & DIR_FLAG) != 0);\n  setMode(newMode);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 183,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1836,
                        "startLineNumber": 259,
                        "startColumnNumber": 4,
                        "endLineNumber": 301,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Populate data from this array as if it was in local file data.\n * @param data an array of bytes\n * @param offset the start offset\n * @param length the number of bytes in the array from offset\n * @throws ZipException on error\n */\n@Override public void parseFromLocalFileData(final byte[] data,final int offset,final int length) throws ZipException {\n  final long givenChecksum=ZipLong.getValue(data,offset);\n  final byte[] tmp=new byte[length - WORD];\n  System.arraycopy(data,offset + WORD,tmp,0,length - WORD);\n  crc.reset();\n  crc.update(tmp);\n  final long realChecksum=crc.getValue();\n  if (givenChecksum != realChecksum) {\n    throw new ZipException(\"Bad CRC checksum, expected \" + Long.toHexString(givenChecksum) + \" instead of \"+ Long.toHexString(realChecksum));\n  }\n  final int newMode=ZipShort.getValue(tmp,0);\n  final byte[] linkArray=new byte[(int)ZipLong.getValue(tmp,2)];\n  uid=ZipShort.getValue(tmp,6);\n  gid=ZipShort.getValue(tmp,8);\n  if (linkArray.length == 0) {\n    link=\"\";\n  }\n else   if (linkArray.length > tmp.length - 10) {\n    throw new ZipException(\"Bad symbolic link name length \" + linkArray.length + \" in ASI extra field\");\n  }\n else {\n    System.arraycopy(tmp,10,linkArray,0,linkArray.length);\n    link=new String(linkArray);\n  }\n  setDirectory((newMode & DIR_FLAG) != 0);\n  setMode(newMode);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 206,
                    "astHeight": 10
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
                "nodePosition": {
                    "charLength": 92,
                    "startLineNumber": 292,
                    "startColumnNumber": 35,
                    "endLineNumber": 293,
                    "endColumnNumber": 39
                },
                "nodeContext": "\"Bad symbolic link name length \" + linkArray.length + \" in ASI extra field\"",
                "nodeType": "InfixExpression",
                "astNodeNumber": 6,
                "astHeight": 3
            },
            "tokenLength": 4,
            "type": "java.lang.String"
        }
    ],
    "positionList": [
        {
            "charLength": 21,
            "startLineNumber": 293,
            "startColumnNumber": 18,
            "endLineNumber": 293,
            "endColumnNumber": 39
        }
    ],
    "layoutRelationDataList": []
}