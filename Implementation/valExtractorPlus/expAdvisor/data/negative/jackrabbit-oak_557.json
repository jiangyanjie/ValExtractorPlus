{
    "id": 557,
    "expression": "conflictInfo",
    "projectName": "jackrabbit-oak",
    "commitID": "2f1940539bba24afb9233f1f912a4cf5d64a79ea",
    "filePath": "oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/commit/MergingNodeStateDiff.java",
    "occurrences": 2,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "conflictInfo",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 12,
                "startLineNumber": 101,
                "startColumnNumber": 38,
                "endLineNumber": 101,
                "endColumnNumber": 50
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
                    "nodePosition": {
                        "charLength": 28,
                        "startLineNumber": 101,
                        "startColumnNumber": 38,
                        "endLineNumber": 101,
                        "endColumnNumber": 66
                    },
                    "nodeContext": "conflictInfo.getProperties()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 298,
                        "startLineNumber": 101,
                        "startColumnNumber": 12,
                        "endLineNumber": 105,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (PropertyState ours : conflictInfo.getProperties()) {\n  PropertyState theirs=parent.getProperty(ours.getName());\n  Resolution resolution=propertyConflictHandler.resolve(ours,theirs);\n  applyResolution(resolution,conflictType,ours);\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 36,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 322,
                        "startLineNumber": 100,
                        "startColumnNumber": 45,
                        "endLineNumber": 106,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  for (  PropertyState ours : conflictInfo.getProperties()) {\n    PropertyState theirs=parent.getProperty(ours.getName());\n    Resolution resolution=propertyConflictHandler.resolve(ours,theirs);\n    applyResolution(resolution,conflictType,ours);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 37,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1519,
                        "startLineNumber": 100,
                        "startColumnNumber": 8,
                        "endLineNumber": 128,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (propertyConflictHandler != null) {\n  for (  PropertyState ours : conflictInfo.getProperties()) {\n    PropertyState theirs=parent.getProperty(ours.getName());\n    Resolution resolution=propertyConflictHandler.resolve(ours,theirs);\n    applyResolution(resolution,conflictType,ours);\n  }\n}\n else {\n  NodeConflictHandler nodeConflictHandler=nodeConflictHandlers.get(conflictType);\n  if (nodeConflictHandler != null) {\n    for (    ChildNodeEntry oursCNE : conflictInfo.getChildNodeEntries()) {\n      String name=oursCNE.getName();\n      NodeState ours=oursCNE.getNodeState();\n      NodeState theirs=parent.getChildNode(name);\n      Resolution resolution=nodeConflictHandler.resolve(name,ours,theirs);\n      applyResolution(resolution,conflictType,name,ours);\n      if (LOG.isDebugEnabled()) {\n        String diff=JsopDiff.diffToJsop(ours,theirs);\n        LOG.debug(\"{} resolved conflict of type {} with resolution {} on node {}, conflict trace {}\",nodeConflictHandler,conflictType,resolution,name,diff);\n      }\n    }\n  }\n else {\n    LOG.warn(\"Ignoring unknown conflict '\" + conflictType + '\\'');\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 142,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1817,
                        "startLineNumber": 98,
                        "startColumnNumber": 84,
                        "endLineNumber": 134,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  PropertyConflictHandler propertyConflictHandler=propertyConflictHandlers.get(conflictType);\n  if (propertyConflictHandler != null) {\n    for (    PropertyState ours : conflictInfo.getProperties()) {\n      PropertyState theirs=parent.getProperty(ours.getName());\n      Resolution resolution=propertyConflictHandler.resolve(ours,theirs);\n      applyResolution(resolution,conflictType,ours);\n    }\n  }\n else {\n    NodeConflictHandler nodeConflictHandler=nodeConflictHandlers.get(conflictType);\n    if (nodeConflictHandler != null) {\n      for (      ChildNodeEntry oursCNE : conflictInfo.getChildNodeEntries()) {\n        String name=oursCNE.getName();\n        NodeState ours=oursCNE.getNodeState();\n        NodeState theirs=parent.getChildNode(name);\n        Resolution resolution=nodeConflictHandler.resolve(name,ours,theirs);\n        applyResolution(resolution,conflictType,name,ours);\n        if (LOG.isDebugEnabled()) {\n          String diff=JsopDiff.diffToJsop(ours,theirs);\n          LOG.debug(\"{} resolved conflict of type {} with resolution {} on node {}, conflict trace {}\",nodeConflictHandler,conflictType,resolution,name,diff);\n        }\n      }\n    }\n else {\n      LOG.warn(\"Ignoring unknown conflict '\" + conflictType + '\\'');\n    }\n  }\n  NodeBuilder conflictMarker=getConflictMarker(conflictType);\n  if (conflictMarker != null) {\n    assert conflictMarker.getChildNodeCount(1) == 0;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 172,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1897,
                        "startLineNumber": 98,
                        "startColumnNumber": 4,
                        "endLineNumber": 134,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void resolveConflict(ConflictType conflictType,NodeState conflictInfo){\n  PropertyConflictHandler propertyConflictHandler=propertyConflictHandlers.get(conflictType);\n  if (propertyConflictHandler != null) {\n    for (    PropertyState ours : conflictInfo.getProperties()) {\n      PropertyState theirs=parent.getProperty(ours.getName());\n      Resolution resolution=propertyConflictHandler.resolve(ours,theirs);\n      applyResolution(resolution,conflictType,ours);\n    }\n  }\n else {\n    NodeConflictHandler nodeConflictHandler=nodeConflictHandlers.get(conflictType);\n    if (nodeConflictHandler != null) {\n      for (      ChildNodeEntry oursCNE : conflictInfo.getChildNodeEntries()) {\n        String name=oursCNE.getName();\n        NodeState ours=oursCNE.getNodeState();\n        NodeState theirs=parent.getChildNode(name);\n        Resolution resolution=nodeConflictHandler.resolve(name,ours,theirs);\n        applyResolution(resolution,conflictType,name,ours);\n        if (LOG.isDebugEnabled()) {\n          String diff=JsopDiff.diffToJsop(ours,theirs);\n          LOG.debug(\"{} resolved conflict of type {} with resolution {} on node {}, conflict trace {}\",nodeConflictHandler,conflictType,resolution,name,diff);\n        }\n      }\n    }\n else {\n      LOG.warn(\"Ignoring unknown conflict '\" + conflictType + '\\'');\n    }\n  }\n  NodeBuilder conflictMarker=getConflictMarker(conflictType);\n  if (conflictMarker != null) {\n    assert conflictMarker.getChildNodeCount(1) == 0;\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 184,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
                "nodePosition": {
                    "charLength": 28,
                    "startLineNumber": 101,
                    "startColumnNumber": 38,
                    "endLineNumber": 101,
                    "endColumnNumber": 66
                },
                "nodeContext": "conflictInfo.getProperties()",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 3,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "org.apache.jackrabbit.oak.spi.state.NodeState"
        },
        {
            "nodeContext": "conflictInfo",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 12,
                "startLineNumber": 110,
                "startColumnNumber": 46,
                "endLineNumber": 110,
                "endColumnNumber": 58
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
                    "nodePosition": {
                        "charLength": 34,
                        "startLineNumber": 110,
                        "startColumnNumber": 46,
                        "endLineNumber": 110,
                        "endColumnNumber": 80
                    },
                    "nodeContext": "conflictInfo.getChildNodeEntries()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 851,
                        "startLineNumber": 110,
                        "startColumnNumber": 16,
                        "endLineNumber": 123,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "for (ChildNodeEntry oursCNE : conflictInfo.getChildNodeEntries()) {\n  String name=oursCNE.getName();\n  NodeState ours=oursCNE.getNodeState();\n  NodeState theirs=parent.getChildNode(name);\n  Resolution resolution=nodeConflictHandler.resolve(name,ours,theirs);\n  applyResolution(resolution,conflictType,name,ours);\n  if (LOG.isDebugEnabled()) {\n    String diff=JsopDiff.diffToJsop(ours,theirs);\n    LOG.debug(\"{} resolved conflict of type {} with resolution {} on node {}, conflict trace {}\",nodeConflictHandler,conflictType,resolution,name,diff);\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 77,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 883,
                        "startLineNumber": 109,
                        "startColumnNumber": 45,
                        "endLineNumber": 124,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  for (  ChildNodeEntry oursCNE : conflictInfo.getChildNodeEntries()) {\n    String name=oursCNE.getName();\n    NodeState ours=oursCNE.getNodeState();\n    NodeState theirs=parent.getChildNode(name);\n    Resolution resolution=nodeConflictHandler.resolve(name,ours,theirs);\n    applyResolution(resolution,conflictType,name,ours);\n    if (LOG.isDebugEnabled()) {\n      String diff=JsopDiff.diffToJsop(ours,theirs);\n      LOG.debug(\"{} resolved conflict of type {} with resolution {} on node {}, conflict trace {}\",nodeConflictHandler,conflictType,resolution,name,diff);\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 78,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1028,
                        "startLineNumber": 109,
                        "startColumnNumber": 12,
                        "endLineNumber": 127,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (nodeConflictHandler != null) {\n  for (  ChildNodeEntry oursCNE : conflictInfo.getChildNodeEntries()) {\n    String name=oursCNE.getName();\n    NodeState ours=oursCNE.getNodeState();\n    NodeState theirs=parent.getChildNode(name);\n    Resolution resolution=nodeConflictHandler.resolve(name,ours,theirs);\n    applyResolution(resolution,conflictType,name,ours);\n    if (LOG.isDebugEnabled()) {\n      String diff=JsopDiff.diffToJsop(ours,theirs);\n      LOG.debug(\"{} resolved conflict of type {} with resolution {} on node {}, conflict trace {}\",nodeConflictHandler,conflictType,resolution,name,diff);\n    }\n  }\n}\n else {\n  LOG.warn(\"Ignoring unknown conflict '\" + conflictType + '\\'');\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 91,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1146,
                        "startLineNumber": 107,
                        "startColumnNumber": 13,
                        "endLineNumber": 128,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  NodeConflictHandler nodeConflictHandler=nodeConflictHandlers.get(conflictType);\n  if (nodeConflictHandler != null) {\n    for (    ChildNodeEntry oursCNE : conflictInfo.getChildNodeEntries()) {\n      String name=oursCNE.getName();\n      NodeState ours=oursCNE.getNodeState();\n      NodeState theirs=parent.getChildNode(name);\n      Resolution resolution=nodeConflictHandler.resolve(name,ours,theirs);\n      applyResolution(resolution,conflictType,name,ours);\n      if (LOG.isDebugEnabled()) {\n        String diff=JsopDiff.diffToJsop(ours,theirs);\n        LOG.debug(\"{} resolved conflict of type {} with resolution {} on node {}, conflict trace {}\",nodeConflictHandler,conflictType,resolution,name,diff);\n      }\n    }\n  }\n else {\n    LOG.warn(\"Ignoring unknown conflict '\" + conflictType + '\\'');\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 101,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1519,
                        "startLineNumber": 100,
                        "startColumnNumber": 8,
                        "endLineNumber": 128,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (propertyConflictHandler != null) {\n  for (  PropertyState ours : conflictInfo.getProperties()) {\n    PropertyState theirs=parent.getProperty(ours.getName());\n    Resolution resolution=propertyConflictHandler.resolve(ours,theirs);\n    applyResolution(resolution,conflictType,ours);\n  }\n}\n else {\n  NodeConflictHandler nodeConflictHandler=nodeConflictHandlers.get(conflictType);\n  if (nodeConflictHandler != null) {\n    for (    ChildNodeEntry oursCNE : conflictInfo.getChildNodeEntries()) {\n      String name=oursCNE.getName();\n      NodeState ours=oursCNE.getNodeState();\n      NodeState theirs=parent.getChildNode(name);\n      Resolution resolution=nodeConflictHandler.resolve(name,ours,theirs);\n      applyResolution(resolution,conflictType,name,ours);\n      if (LOG.isDebugEnabled()) {\n        String diff=JsopDiff.diffToJsop(ours,theirs);\n        LOG.debug(\"{} resolved conflict of type {} with resolution {} on node {}, conflict trace {}\",nodeConflictHandler,conflictType,resolution,name,diff);\n      }\n    }\n  }\n else {\n    LOG.warn(\"Ignoring unknown conflict '\" + conflictType + '\\'');\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 142,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1817,
                        "startLineNumber": 98,
                        "startColumnNumber": 84,
                        "endLineNumber": 134,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  PropertyConflictHandler propertyConflictHandler=propertyConflictHandlers.get(conflictType);\n  if (propertyConflictHandler != null) {\n    for (    PropertyState ours : conflictInfo.getProperties()) {\n      PropertyState theirs=parent.getProperty(ours.getName());\n      Resolution resolution=propertyConflictHandler.resolve(ours,theirs);\n      applyResolution(resolution,conflictType,ours);\n    }\n  }\n else {\n    NodeConflictHandler nodeConflictHandler=nodeConflictHandlers.get(conflictType);\n    if (nodeConflictHandler != null) {\n      for (      ChildNodeEntry oursCNE : conflictInfo.getChildNodeEntries()) {\n        String name=oursCNE.getName();\n        NodeState ours=oursCNE.getNodeState();\n        NodeState theirs=parent.getChildNode(name);\n        Resolution resolution=nodeConflictHandler.resolve(name,ours,theirs);\n        applyResolution(resolution,conflictType,name,ours);\n        if (LOG.isDebugEnabled()) {\n          String diff=JsopDiff.diffToJsop(ours,theirs);\n          LOG.debug(\"{} resolved conflict of type {} with resolution {} on node {}, conflict trace {}\",nodeConflictHandler,conflictType,resolution,name,diff);\n        }\n      }\n    }\n else {\n      LOG.warn(\"Ignoring unknown conflict '\" + conflictType + '\\'');\n    }\n  }\n  NodeBuilder conflictMarker=getConflictMarker(conflictType);\n  if (conflictMarker != null) {\n    assert conflictMarker.getChildNodeCount(1) == 0;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 172,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1897,
                        "startLineNumber": 98,
                        "startColumnNumber": 4,
                        "endLineNumber": 134,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void resolveConflict(ConflictType conflictType,NodeState conflictInfo){\n  PropertyConflictHandler propertyConflictHandler=propertyConflictHandlers.get(conflictType);\n  if (propertyConflictHandler != null) {\n    for (    PropertyState ours : conflictInfo.getProperties()) {\n      PropertyState theirs=parent.getProperty(ours.getName());\n      Resolution resolution=propertyConflictHandler.resolve(ours,theirs);\n      applyResolution(resolution,conflictType,ours);\n    }\n  }\n else {\n    NodeConflictHandler nodeConflictHandler=nodeConflictHandlers.get(conflictType);\n    if (nodeConflictHandler != null) {\n      for (      ChildNodeEntry oursCNE : conflictInfo.getChildNodeEntries()) {\n        String name=oursCNE.getName();\n        NodeState ours=oursCNE.getNodeState();\n        NodeState theirs=parent.getChildNode(name);\n        Resolution resolution=nodeConflictHandler.resolve(name,ours,theirs);\n        applyResolution(resolution,conflictType,name,ours);\n        if (LOG.isDebugEnabled()) {\n          String diff=JsopDiff.diffToJsop(ours,theirs);\n          LOG.debug(\"{} resolved conflict of type {} with resolution {} on node {}, conflict trace {}\",nodeConflictHandler,conflictType,resolution,name,diff);\n        }\n      }\n    }\n else {\n      LOG.warn(\"Ignoring unknown conflict '\" + conflictType + '\\'');\n    }\n  }\n  NodeBuilder conflictMarker=getConflictMarker(conflictType);\n  if (conflictMarker != null) {\n    assert conflictMarker.getChildNodeCount(1) == 0;\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 184,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
                "nodePosition": {
                    "charLength": 34,
                    "startLineNumber": 110,
                    "startColumnNumber": 46,
                    "endLineNumber": 110,
                    "endColumnNumber": 80
                },
                "nodeContext": "conflictInfo.getChildNodeEntries()",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 3,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "org.apache.jackrabbit.oak.spi.state.NodeState"
        }
    ],
    "positionList": [
        {
            "charLength": 12,
            "startLineNumber": 101,
            "startColumnNumber": 38,
            "endLineNumber": 101,
            "endColumnNumber": 50
        },
        {
            "charLength": 12,
            "startLineNumber": 110,
            "startColumnNumber": 46,
            "endLineNumber": 110,
            "endColumnNumber": 58
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 5
        }
    ]
}