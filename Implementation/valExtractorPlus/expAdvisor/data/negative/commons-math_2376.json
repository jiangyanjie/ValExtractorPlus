{
    "id": 2376,
    "expression": "next",
    "projectName": "commons-math",
    "commitID": "367fe7662e738356ef6fef47a12a5bd6e3269e5e",
    "filePath": "src/main/java/org/apache/commons/math/util/MathUtils.java",
    "occurrences": 3,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 0,
    "expressionList": [
        {
            "nodeContext": "next",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 4,
                "startLineNumber": 2664,
                "startColumnNumber": 46,
                "endLineNumber": 2664,
                "endColumnNumber": 50
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 14,
                        "startLineNumber": 2664,
                        "startColumnNumber": 37,
                        "endLineNumber": 2664,
                        "endColumnNumber": 51
                    },
                    "nodeContext": "prodHigh[next]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 28,
                        "startLineNumber": 2664,
                        "startColumnNumber": 23,
                        "endLineNumber": 2664,
                        "endColumnNumber": 51
                    },
                    "nodeContext": "sHigh[prev] + prodHigh[next]",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 39,
                        "startLineNumber": 2664,
                        "startColumnNumber": 12,
                        "endLineNumber": 2664,
                        "endColumnNumber": 51
                    },
                    "nodeContext": "sHigh[i]=sHigh[prev] + prodHigh[next]",
                    "nodeType": "Assignment",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 40,
                        "startLineNumber": 2664,
                        "startColumnNumber": 12,
                        "endLineNumber": 2664,
                        "endColumnNumber": 52
                    },
                    "nodeContext": "sHigh[i]=sHigh[prev] + prodHigh[next];\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 12,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 272,
                        "startLineNumber": 2661,
                        "startColumnNumber": 46,
                        "endLineNumber": 2667,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final int prev=i - 1;\n  final int next=i + 1;\n  sHigh[i]=sHigh[prev] + prodHigh[next];\n  sPrime=sHigh[i] - prodHigh[next];\n  sLowSum+=(prodHigh[next] - (sHigh[i] - sPrime)) + (sHigh[prev] - sPrime);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 60,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 310,
                        "startLineNumber": 2661,
                        "startColumnNumber": 8,
                        "endLineNumber": 2667,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int i=1; i < lenMinusOne; i++) {\n  final int prev=i - 1;\n  final int next=i + 1;\n  sHigh[i]=sHigh[prev] + prodHigh[next];\n  sPrime=sHigh[i] - prodHigh[next];\n  sLowSum+=(prodHigh[next] - (sHigh[i] - sPrime)) + (sHigh[prev] - sPrime);\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 71,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1640,
                        "startLineNumber": 2627,
                        "startColumnNumber": 79,
                        "endLineNumber": 2670,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final int len=a.length;\n  if (len != b.length) {\n    throw new DimensionMismatchException(len,b.length);\n  }\n  final double[] prodHigh=new double[len];\n  double prodLowSum=0;\n  for (int i=0; i < len; i++) {\n    final double ai=a[i];\n    final double ca=SPLIT_FACTOR * ai;\n    final double aHigh=ca - (ca - ai);\n    final double aLow=ai - aHigh;\n    final double bi=b[i];\n    final double cb=SPLIT_FACTOR * bi;\n    final double bHigh=cb - (cb - bi);\n    final double bLow=bi - bHigh;\n    prodHigh[i]=ai * bi;\n    final double prodLow=aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow);\n    prodLowSum+=prodLow;\n  }\n  final int lenMinusOne=len - 1;\n  final double[] sHigh=new double[lenMinusOne];\n  sHigh[0]=prodHigh[0] + prodHigh[1];\n  double sPrime=sHigh[0] - prodHigh[1];\n  double sLowSum=(prodHigh[1] - (sHigh[0] - sPrime)) + (prodHigh[0] - sPrime);\n  for (int i=1; i < lenMinusOne; i++) {\n    final int prev=i - 1;\n    final int next=i + 1;\n    sHigh[i]=sHigh[prev] + prodHigh[next];\n    sPrime=sHigh[i] - prodHigh[next];\n    sLowSum+=(prodHigh[next] - (sHigh[i] - sPrime)) + (sHigh[prev] - sPrime);\n  }\n  return sHigh[lenMinusOne - 1] + (prodLowSum + sLowSum);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 309,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2436,
                        "startLineNumber": 2611,
                        "startColumnNumber": 4,
                        "endLineNumber": 2670,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Compute a linear combination accurately. This method computes the sum of the products <code>a<sub>i</sub> b<sub>i</sub></code> to high accuracy. It does so by using specific multiplication and addition algorithms to preserve accuracy and reduce cancellation effects. <br/> It is based on the 2005 paper <a href=\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547\"> Accurate Sum and Dot Product</a> by Takeshi Ogita, Siegfried M. Rump, and Shin'ichi Oishi published in SIAM J. Sci. Comput.\n * @param a Factors.\n * @param b Factors.\n * @return <code>&Sigma;<sub>i</sub> a<sub>i</sub> b<sub>i</sub></code>.\n */\npublic static double linearCombination(final double[] a,final double[] b){\n  final int len=a.length;\n  if (len != b.length) {\n    throw new DimensionMismatchException(len,b.length);\n  }\n  final double[] prodHigh=new double[len];\n  double prodLowSum=0;\n  for (int i=0; i < len; i++) {\n    final double ai=a[i];\n    final double ca=SPLIT_FACTOR * ai;\n    final double aHigh=ca - (ca - ai);\n    final double aLow=ai - aHigh;\n    final double bi=b[i];\n    final double cb=SPLIT_FACTOR * bi;\n    final double bHigh=cb - (cb - bi);\n    final double bLow=bi - bHigh;\n    prodHigh[i]=ai * bi;\n    final double prodLow=aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow);\n    prodLowSum+=prodLow;\n  }\n  final int lenMinusOne=len - 1;\n  final double[] sHigh=new double[lenMinusOne];\n  sHigh[0]=prodHigh[0] + prodHigh[1];\n  double sPrime=sHigh[0] - prodHigh[1];\n  double sLowSum=(prodHigh[1] - (sHigh[0] - sPrime)) + (prodHigh[0] - sPrime);\n  for (int i=1; i < lenMinusOne; i++) {\n    final int prev=i - 1;\n    final int next=i + 1;\n    sHigh[i]=sHigh[prev] + prodHigh[next];\n    sPrime=sHigh[i] - prodHigh[next];\n    sLowSum+=(prodHigh[next] - (sHigh[i] - sPrime)) + (sHigh[prev] - sPrime);\n  }\n  return sHigh[lenMinusOne - 1] + (prodLowSum + sLowSum);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 327,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 40,
                    "startLineNumber": 2664,
                    "startColumnNumber": 12,
                    "endLineNumber": 2664,
                    "endColumnNumber": 52
                },
                "nodeContext": "sHigh[i]=sHigh[prev] + prodHigh[next];\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 12,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "next",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 4,
                "startLineNumber": 2665,
                "startColumnNumber": 41,
                "endLineNumber": 2665,
                "endColumnNumber": 45
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 14,
                        "startLineNumber": 2665,
                        "startColumnNumber": 32,
                        "endLineNumber": 2665,
                        "endColumnNumber": 46
                    },
                    "nodeContext": "prodHigh[next]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 25,
                        "startLineNumber": 2665,
                        "startColumnNumber": 21,
                        "endLineNumber": 2665,
                        "endColumnNumber": 46
                    },
                    "nodeContext": "sHigh[i] - prodHigh[next]",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 34,
                        "startLineNumber": 2665,
                        "startColumnNumber": 12,
                        "endLineNumber": 2665,
                        "endColumnNumber": 46
                    },
                    "nodeContext": "sPrime=sHigh[i] - prodHigh[next]",
                    "nodeType": "Assignment",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 35,
                        "startLineNumber": 2665,
                        "startColumnNumber": 12,
                        "endLineNumber": 2665,
                        "endColumnNumber": 47
                    },
                    "nodeContext": "sPrime=sHigh[i] - prodHigh[next];\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 10,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 272,
                        "startLineNumber": 2661,
                        "startColumnNumber": 46,
                        "endLineNumber": 2667,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final int prev=i - 1;\n  final int next=i + 1;\n  sHigh[i]=sHigh[prev] + prodHigh[next];\n  sPrime=sHigh[i] - prodHigh[next];\n  sLowSum+=(prodHigh[next] - (sHigh[i] - sPrime)) + (sHigh[prev] - sPrime);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 60,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 310,
                        "startLineNumber": 2661,
                        "startColumnNumber": 8,
                        "endLineNumber": 2667,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int i=1; i < lenMinusOne; i++) {\n  final int prev=i - 1;\n  final int next=i + 1;\n  sHigh[i]=sHigh[prev] + prodHigh[next];\n  sPrime=sHigh[i] - prodHigh[next];\n  sLowSum+=(prodHigh[next] - (sHigh[i] - sPrime)) + (sHigh[prev] - sPrime);\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 71,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1640,
                        "startLineNumber": 2627,
                        "startColumnNumber": 79,
                        "endLineNumber": 2670,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final int len=a.length;\n  if (len != b.length) {\n    throw new DimensionMismatchException(len,b.length);\n  }\n  final double[] prodHigh=new double[len];\n  double prodLowSum=0;\n  for (int i=0; i < len; i++) {\n    final double ai=a[i];\n    final double ca=SPLIT_FACTOR * ai;\n    final double aHigh=ca - (ca - ai);\n    final double aLow=ai - aHigh;\n    final double bi=b[i];\n    final double cb=SPLIT_FACTOR * bi;\n    final double bHigh=cb - (cb - bi);\n    final double bLow=bi - bHigh;\n    prodHigh[i]=ai * bi;\n    final double prodLow=aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow);\n    prodLowSum+=prodLow;\n  }\n  final int lenMinusOne=len - 1;\n  final double[] sHigh=new double[lenMinusOne];\n  sHigh[0]=prodHigh[0] + prodHigh[1];\n  double sPrime=sHigh[0] - prodHigh[1];\n  double sLowSum=(prodHigh[1] - (sHigh[0] - sPrime)) + (prodHigh[0] - sPrime);\n  for (int i=1; i < lenMinusOne; i++) {\n    final int prev=i - 1;\n    final int next=i + 1;\n    sHigh[i]=sHigh[prev] + prodHigh[next];\n    sPrime=sHigh[i] - prodHigh[next];\n    sLowSum+=(prodHigh[next] - (sHigh[i] - sPrime)) + (sHigh[prev] - sPrime);\n  }\n  return sHigh[lenMinusOne - 1] + (prodLowSum + sLowSum);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 309,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2436,
                        "startLineNumber": 2611,
                        "startColumnNumber": 4,
                        "endLineNumber": 2670,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Compute a linear combination accurately. This method computes the sum of the products <code>a<sub>i</sub> b<sub>i</sub></code> to high accuracy. It does so by using specific multiplication and addition algorithms to preserve accuracy and reduce cancellation effects. <br/> It is based on the 2005 paper <a href=\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547\"> Accurate Sum and Dot Product</a> by Takeshi Ogita, Siegfried M. Rump, and Shin'ichi Oishi published in SIAM J. Sci. Comput.\n * @param a Factors.\n * @param b Factors.\n * @return <code>&Sigma;<sub>i</sub> a<sub>i</sub> b<sub>i</sub></code>.\n */\npublic static double linearCombination(final double[] a,final double[] b){\n  final int len=a.length;\n  if (len != b.length) {\n    throw new DimensionMismatchException(len,b.length);\n  }\n  final double[] prodHigh=new double[len];\n  double prodLowSum=0;\n  for (int i=0; i < len; i++) {\n    final double ai=a[i];\n    final double ca=SPLIT_FACTOR * ai;\n    final double aHigh=ca - (ca - ai);\n    final double aLow=ai - aHigh;\n    final double bi=b[i];\n    final double cb=SPLIT_FACTOR * bi;\n    final double bHigh=cb - (cb - bi);\n    final double bLow=bi - bHigh;\n    prodHigh[i]=ai * bi;\n    final double prodLow=aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow);\n    prodLowSum+=prodLow;\n  }\n  final int lenMinusOne=len - 1;\n  final double[] sHigh=new double[lenMinusOne];\n  sHigh[0]=prodHigh[0] + prodHigh[1];\n  double sPrime=sHigh[0] - prodHigh[1];\n  double sLowSum=(prodHigh[1] - (sHigh[0] - sPrime)) + (prodHigh[0] - sPrime);\n  for (int i=1; i < lenMinusOne; i++) {\n    final int prev=i - 1;\n    final int next=i + 1;\n    sHigh[i]=sHigh[prev] + prodHigh[next];\n    sPrime=sHigh[i] - prodHigh[next];\n    sLowSum+=(prodHigh[next] - (sHigh[i] - sPrime)) + (sHigh[prev] - sPrime);\n  }\n  return sHigh[lenMinusOne - 1] + (prodLowSum + sLowSum);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 327,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 35,
                    "startLineNumber": 2665,
                    "startColumnNumber": 12,
                    "endLineNumber": 2665,
                    "endColumnNumber": 47
                },
                "nodeContext": "sPrime=sHigh[i] - prodHigh[next];\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 10,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "next",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 4,
                "startLineNumber": 2666,
                "startColumnNumber": 33,
                "endLineNumber": 2666,
                "endColumnNumber": 37
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 14,
                        "startLineNumber": 2666,
                        "startColumnNumber": 24,
                        "endLineNumber": 2666,
                        "endColumnNumber": 38
                    },
                    "nodeContext": "prodHigh[next]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
                    "nodePosition": {
                        "charLength": 36,
                        "startLineNumber": 2666,
                        "startColumnNumber": 24,
                        "endLineNumber": 2666,
                        "endColumnNumber": 60
                    },
                    "nodeContext": "prodHigh[next] - (sHigh[i] - sPrime)",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 10,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 38,
                        "startLineNumber": 2666,
                        "startColumnNumber": 23,
                        "endLineNumber": 2666,
                        "endColumnNumber": 61
                    },
                    "nodeContext": "(prodHigh[next] - (sHigh[i] - sPrime))",
                    "nodeType": "ParenthesizedExpression",
                    "astNodeNumber": 11,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 63,
                        "startLineNumber": 2666,
                        "startColumnNumber": 23,
                        "endLineNumber": 2666,
                        "endColumnNumber": 86
                    },
                    "nodeContext": "(prodHigh[next] - (sHigh[i] - sPrime)) + (sHigh[prev] - sPrime)",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 18,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 74,
                        "startLineNumber": 2666,
                        "startColumnNumber": 12,
                        "endLineNumber": 2666,
                        "endColumnNumber": 86
                    },
                    "nodeContext": "sLowSum+=(prodHigh[next] - (sHigh[i] - sPrime)) + (sHigh[prev] - sPrime)",
                    "nodeType": "Assignment",
                    "astNodeNumber": 20,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 75,
                        "startLineNumber": 2666,
                        "startColumnNumber": 12,
                        "endLineNumber": 2666,
                        "endColumnNumber": 87
                    },
                    "nodeContext": "sLowSum+=(prodHigh[next] - (sHigh[i] - sPrime)) + (sHigh[prev] - sPrime);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 21,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 272,
                        "startLineNumber": 2661,
                        "startColumnNumber": 46,
                        "endLineNumber": 2667,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final int prev=i - 1;\n  final int next=i + 1;\n  sHigh[i]=sHigh[prev] + prodHigh[next];\n  sPrime=sHigh[i] - prodHigh[next];\n  sLowSum+=(prodHigh[next] - (sHigh[i] - sPrime)) + (sHigh[prev] - sPrime);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 60,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 310,
                        "startLineNumber": 2661,
                        "startColumnNumber": 8,
                        "endLineNumber": 2667,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int i=1; i < lenMinusOne; i++) {\n  final int prev=i - 1;\n  final int next=i + 1;\n  sHigh[i]=sHigh[prev] + prodHigh[next];\n  sPrime=sHigh[i] - prodHigh[next];\n  sLowSum+=(prodHigh[next] - (sHigh[i] - sPrime)) + (sHigh[prev] - sPrime);\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 71,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1640,
                        "startLineNumber": 2627,
                        "startColumnNumber": 79,
                        "endLineNumber": 2670,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final int len=a.length;\n  if (len != b.length) {\n    throw new DimensionMismatchException(len,b.length);\n  }\n  final double[] prodHigh=new double[len];\n  double prodLowSum=0;\n  for (int i=0; i < len; i++) {\n    final double ai=a[i];\n    final double ca=SPLIT_FACTOR * ai;\n    final double aHigh=ca - (ca - ai);\n    final double aLow=ai - aHigh;\n    final double bi=b[i];\n    final double cb=SPLIT_FACTOR * bi;\n    final double bHigh=cb - (cb - bi);\n    final double bLow=bi - bHigh;\n    prodHigh[i]=ai * bi;\n    final double prodLow=aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow);\n    prodLowSum+=prodLow;\n  }\n  final int lenMinusOne=len - 1;\n  final double[] sHigh=new double[lenMinusOne];\n  sHigh[0]=prodHigh[0] + prodHigh[1];\n  double sPrime=sHigh[0] - prodHigh[1];\n  double sLowSum=(prodHigh[1] - (sHigh[0] - sPrime)) + (prodHigh[0] - sPrime);\n  for (int i=1; i < lenMinusOne; i++) {\n    final int prev=i - 1;\n    final int next=i + 1;\n    sHigh[i]=sHigh[prev] + prodHigh[next];\n    sPrime=sHigh[i] - prodHigh[next];\n    sLowSum+=(prodHigh[next] - (sHigh[i] - sPrime)) + (sHigh[prev] - sPrime);\n  }\n  return sHigh[lenMinusOne - 1] + (prodLowSum + sLowSum);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 309,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2436,
                        "startLineNumber": 2611,
                        "startColumnNumber": 4,
                        "endLineNumber": 2670,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Compute a linear combination accurately. This method computes the sum of the products <code>a<sub>i</sub> b<sub>i</sub></code> to high accuracy. It does so by using specific multiplication and addition algorithms to preserve accuracy and reduce cancellation effects. <br/> It is based on the 2005 paper <a href=\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547\"> Accurate Sum and Dot Product</a> by Takeshi Ogita, Siegfried M. Rump, and Shin'ichi Oishi published in SIAM J. Sci. Comput.\n * @param a Factors.\n * @param b Factors.\n * @return <code>&Sigma;<sub>i</sub> a<sub>i</sub> b<sub>i</sub></code>.\n */\npublic static double linearCombination(final double[] a,final double[] b){\n  final int len=a.length;\n  if (len != b.length) {\n    throw new DimensionMismatchException(len,b.length);\n  }\n  final double[] prodHigh=new double[len];\n  double prodLowSum=0;\n  for (int i=0; i < len; i++) {\n    final double ai=a[i];\n    final double ca=SPLIT_FACTOR * ai;\n    final double aHigh=ca - (ca - ai);\n    final double aLow=ai - aHigh;\n    final double bi=b[i];\n    final double cb=SPLIT_FACTOR * bi;\n    final double bHigh=cb - (cb - bi);\n    final double bLow=bi - bHigh;\n    prodHigh[i]=ai * bi;\n    final double prodLow=aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow);\n    prodLowSum+=prodLow;\n  }\n  final int lenMinusOne=len - 1;\n  final double[] sHigh=new double[lenMinusOne];\n  sHigh[0]=prodHigh[0] + prodHigh[1];\n  double sPrime=sHigh[0] - prodHigh[1];\n  double sLowSum=(prodHigh[1] - (sHigh[0] - sPrime)) + (prodHigh[0] - sPrime);\n  for (int i=1; i < lenMinusOne; i++) {\n    final int prev=i - 1;\n    final int next=i + 1;\n    sHigh[i]=sHigh[prev] + prodHigh[next];\n    sPrime=sHigh[i] - prodHigh[next];\n    sLowSum+=(prodHigh[next] - (sHigh[i] - sPrime)) + (sHigh[prev] - sPrime);\n  }\n  return sHigh[lenMinusOne - 1] + (prodLowSum + sLowSum);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 327,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 75,
                    "startLineNumber": 2666,
                    "startColumnNumber": 12,
                    "endLineNumber": 2666,
                    "endColumnNumber": 87
                },
                "nodeContext": "sLowSum+=(prodHigh[next] - (sHigh[i] - sPrime)) + (sHigh[prev] - sPrime);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 21,
                "astHeight": 9
            },
            "tokenLength": 1,
            "type": "int"
        }
    ],
    "positionList": [
        {
            "charLength": 4,
            "startLineNumber": 2664,
            "startColumnNumber": 46,
            "endLineNumber": 2664,
            "endColumnNumber": 50
        },
        {
            "charLength": 4,
            "startLineNumber": 2665,
            "startColumnNumber": 41,
            "endLineNumber": 2665,
            "endColumnNumber": 45
        },
        {
            "charLength": 4,
            "startLineNumber": 2666,
            "startColumnNumber": 33,
            "endLineNumber": 2666,
            "endColumnNumber": 37
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 6
        }
    ]
}