{
    "id": 303,
    "expression": "score.getExplanation()",
    "projectName": "jackrabbit-oak",
    "commitID": "3a4fafcae1141f1f178e92a0ea65607ad20a1362",
    "filePath": "oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/writer/CommitMitigatingTieredMergePolicy.java",
    "occurrences": 1,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "score.getExplanation()",
            "nodeType": "MethodInvocation",
            "nodePosition": {
                "charLength": 22,
                "startLineNumber": 482,
                "startColumnNumber": 118,
                "endLineNumber": 482,
                "endColumnNumber": 140
            },
            "astNodeNumber": 3,
            "astHeight": 2,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 224,
                        "startLineNumber": 482,
                        "startColumnNumber": 32,
                        "endLineNumber": 482,
                        "endColumnNumber": 256
                    },
                    "nodeContext": "\"  maybe=\" + writer.get().segString(candidate) + \" score=\"+ score.getScore()+ \" \"+ score.getExplanation()+ \" tooLarge=\"+ hitTooLarge+ \" size=\"+ String.format(Locale.ROOT,\"%.3f MB\",totAfterMergeBytes / 1024. / 1024.)",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 30,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 233,
                        "startLineNumber": 482,
                        "startColumnNumber": 24,
                        "endLineNumber": 482,
                        "endColumnNumber": 257
                    },
                    "nodeContext": "message(\"  maybe=\" + writer.get().segString(candidate) + \" score=\"+ score.getScore()+ \" \"+ score.getExplanation()+ \" tooLarge=\"+ hitTooLarge+ \" size=\"+ String.format(Locale.ROOT,\"%.3f MB\",totAfterMergeBytes / 1024. / 1024.))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 32,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 234,
                        "startLineNumber": 482,
                        "startColumnNumber": 24,
                        "endLineNumber": 482,
                        "endColumnNumber": 258
                    },
                    "nodeContext": "message(\"  maybe=\" + writer.get().segString(candidate) + \" score=\"+ score.getScore()+ \" \"+ score.getExplanation()+ \" tooLarge=\"+ hitTooLarge+ \" size=\"+ String.format(Locale.ROOT,\"%.3f MB\",totAfterMergeBytes / 1024. / 1024.));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 33,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 282,
                        "startLineNumber": 481,
                        "startColumnNumber": 35,
                        "endLineNumber": 483,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  message(\"  maybe=\" + writer.get().segString(candidate) + \" score=\"+ score.getScore()+ \" \"+ score.getExplanation()+ \" tooLarge=\"+ hitTooLarge+ \" size=\"+ String.format(Locale.ROOT,\"%.3f MB\",totAfterMergeBytes / 1024. / 1024.));\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 34,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 297,
                        "startLineNumber": 481,
                        "startColumnNumber": 20,
                        "endLineNumber": 483,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (verbose()) {\n  message(\"  maybe=\" + writer.get().segString(candidate) + \" score=\"+ score.getScore()+ \" \"+ score.getExplanation()+ \" tooLarge=\"+ hitTooLarge+ \" size=\"+ String.format(Locale.ROOT,\"%.3f MB\",totAfterMergeBytes / 1024. / 1024.));\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 37,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 2150,
                        "startLineNumber": 456,
                        "startColumnNumber": 97,
                        "endLineNumber": 494,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  long totAfterMergeBytes=0;\n  final List<SegmentCommitInfo> candidate=new ArrayList<SegmentCommitInfo>();\n  boolean hitTooLarge=false;\n  for (int idx=startIdx; idx < eligible.size() && candidate.size() < maxMergeAtOnce; idx++) {\n    final SegmentCommitInfo info=eligible.get(idx);\n    final long segBytes=size(info);\n    if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n      hitTooLarge=true;\n      continue;\n    }\n    candidate.add(info);\n    totAfterMergeBytes+=segBytes;\n  }\n  final MergeScore score=score(candidate,hitTooLarge,mergingBytes);\n  if (verbose()) {\n    message(\"  maybe=\" + writer.get().segString(candidate) + \" score=\"+ score.getScore()+ \" \"+ score.getExplanation()+ \" tooLarge=\"+ hitTooLarge+ \" size=\"+ String.format(Locale.ROOT,\"%.3f MB\",totAfterMergeBytes / 1024. / 1024.));\n  }\n  if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n    best=candidate;\n    bestScore=score;\n    bestTooLarge=hitTooLarge;\n    bestMergeBytes=totAfterMergeBytes;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 170,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2231,
                        "startLineNumber": 456,
                        "startColumnNumber": 16,
                        "endLineNumber": 494,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "for (int startIdx=0; startIdx <= eligible.size() - maxMergeAtOnce; startIdx++) {\n  long totAfterMergeBytes=0;\n  final List<SegmentCommitInfo> candidate=new ArrayList<SegmentCommitInfo>();\n  boolean hitTooLarge=false;\n  for (int idx=startIdx; idx < eligible.size() && candidate.size() < maxMergeAtOnce; idx++) {\n    final SegmentCommitInfo info=eligible.get(idx);\n    final long segBytes=size(info);\n    if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n      hitTooLarge=true;\n      continue;\n    }\n    candidate.add(info);\n    totAfterMergeBytes+=segBytes;\n  }\n  final MergeScore score=score(candidate,hitTooLarge,mergingBytes);\n  if (verbose()) {\n    message(\"  maybe=\" + writer.get().segString(candidate) + \" score=\"+ score.getScore()+ \" \"+ score.getExplanation()+ \" tooLarge=\"+ hitTooLarge+ \" size=\"+ String.format(Locale.ROOT,\"%.3f MB\",totAfterMergeBytes / 1024. / 1024.));\n  }\n  if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n    best=candidate;\n    bestScore=score;\n    bestTooLarge=hitTooLarge;\n    bestMergeBytes=totAfterMergeBytes;\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 185,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 3402,
                        "startLineNumber": 447,
                        "startColumnNumber": 55,
                        "endLineNumber": 511,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  MergeScore bestScore=null;\n  List<SegmentCommitInfo> best=null;\n  boolean bestTooLarge=false;\n  long bestMergeBytes=0;\n  for (int startIdx=0; startIdx <= eligible.size() - maxMergeAtOnce; startIdx++) {\n    long totAfterMergeBytes=0;\n    final List<SegmentCommitInfo> candidate=new ArrayList<SegmentCommitInfo>();\n    boolean hitTooLarge=false;\n    for (int idx=startIdx; idx < eligible.size() && candidate.size() < maxMergeAtOnce; idx++) {\n      final SegmentCommitInfo info=eligible.get(idx);\n      final long segBytes=size(info);\n      if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n        hitTooLarge=true;\n        continue;\n      }\n      candidate.add(info);\n      totAfterMergeBytes+=segBytes;\n    }\n    final MergeScore score=score(candidate,hitTooLarge,mergingBytes);\n    if (verbose()) {\n      message(\"  maybe=\" + writer.get().segString(candidate) + \" score=\"+ score.getScore()+ \" \"+ score.getExplanation()+ \" tooLarge=\"+ hitTooLarge+ \" size=\"+ String.format(Locale.ROOT,\"%.3f MB\",totAfterMergeBytes / 1024. / 1024.));\n    }\n    if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n      best=candidate;\n      bestScore=score;\n      bestTooLarge=hitTooLarge;\n      bestMergeBytes=totAfterMergeBytes;\n    }\n  }\n  if (best != null) {\n    if (spec == null) {\n      spec=new MergeSpecification();\n    }\n    final OneMerge merge=new OneMerge(best);\n    spec.add(merge);\n    for (    SegmentCommitInfo info : merge.segments) {\n      toBeMerged.add(info);\n    }\n    if (verbose()) {\n      message(\"  add merge=\" + writer.get().segString(merge.segments) + \" size=\"+ String.format(Locale.ROOT,\"%.3f MB\",bestMergeBytes / 1024. / 1024.)+ \" score=\"+ String.format(Locale.ROOT,\"%.3f\",bestScore.getScore())+ \" \"+ bestScore.getExplanation()+ (bestTooLarge ? \" [max merge]\" : \"\"));\n    }\n  }\n else {\n    return spec;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 308,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3495,
                        "startLineNumber": 447,
                        "startColumnNumber": 12,
                        "endLineNumber": 513,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (eligible.size() >= allowedSegCountInt) {\n  MergeScore bestScore=null;\n  List<SegmentCommitInfo> best=null;\n  boolean bestTooLarge=false;\n  long bestMergeBytes=0;\n  for (int startIdx=0; startIdx <= eligible.size() - maxMergeAtOnce; startIdx++) {\n    long totAfterMergeBytes=0;\n    final List<SegmentCommitInfo> candidate=new ArrayList<SegmentCommitInfo>();\n    boolean hitTooLarge=false;\n    for (int idx=startIdx; idx < eligible.size() && candidate.size() < maxMergeAtOnce; idx++) {\n      final SegmentCommitInfo info=eligible.get(idx);\n      final long segBytes=size(info);\n      if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n        hitTooLarge=true;\n        continue;\n      }\n      candidate.add(info);\n      totAfterMergeBytes+=segBytes;\n    }\n    final MergeScore score=score(candidate,hitTooLarge,mergingBytes);\n    if (verbose()) {\n      message(\"  maybe=\" + writer.get().segString(candidate) + \" score=\"+ score.getScore()+ \" \"+ score.getExplanation()+ \" tooLarge=\"+ hitTooLarge+ \" size=\"+ String.format(Locale.ROOT,\"%.3f MB\",totAfterMergeBytes / 1024. / 1024.));\n    }\n    if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n      best=candidate;\n      bestScore=score;\n      bestTooLarge=hitTooLarge;\n      bestMergeBytes=totAfterMergeBytes;\n    }\n  }\n  if (best != null) {\n    if (spec == null) {\n      spec=new MergeSpecification();\n    }\n    final OneMerge merge=new OneMerge(best);\n    spec.add(merge);\n    for (    SegmentCommitInfo info : merge.segments) {\n      toBeMerged.add(info);\n    }\n    if (verbose()) {\n      message(\"  add merge=\" + writer.get().segString(merge.segments) + \" size=\"+ String.format(Locale.ROOT,\"%.3f MB\",bestMergeBytes / 1024. / 1024.)+ \" score=\"+ String.format(Locale.ROOT,\"%.3f\",bestScore.getScore())+ \" \"+ bestScore.getExplanation()+ (bestTooLarge ? \" [max merge]\" : \"\"));\n    }\n  }\n else {\n    return spec;\n  }\n}\n else {\n  return spec;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 317,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 5170,
                        "startLineNumber": 404,
                        "startColumnNumber": 21,
                        "endLineNumber": 514,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  long mergingBytes=0;\n  double idxBytes=0;\n  final List<SegmentCommitInfo> eligible=new ArrayList<SegmentCommitInfo>();\n  for (int idx=tooBigCount; idx < infosSorted.size(); idx++) {\n    final SegmentCommitInfo info=infosSorted.get(idx);\n    if (merging.contains(info)) {\n      mergingBytes+=info.sizeInBytes();\n    }\n else     if (!toBeMerged.contains(info)) {\n      eligible.add(info);\n    }\n    idxBytes+=info.sizeInBytes();\n  }\n  idxBytes/=1024 * 1000;\n  final boolean maxMergeIsRunning=mergingBytes >= maxMergedSegmentBytes;\n  if (verbose()) {\n    message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\"+ infosSorted.size()+ \" (eligible count=\"+ eligible.size()+ \") tooBigCount=\"+ tooBigCount);\n  }\n  if (eligible.size() == 0) {\n    return spec;\n  }\n  double bytes=idxBytes - this.mb;\n  double mbRate=bytes / timeDelta;\n  log.debug(\"committing {} MBs/sec ({} segs)\",mbRate,infos.size());\n  if (verbose()) {\n    message(mbRate + \"mb/s (max: \" + maxCommitRateMB+ \"mb/s)\");\n  }\n  this.mb=idxBytes;\n  if (mbRate > maxCommitRateMB && infos.size() < maxNoOfSegs) {\n    return null;\n  }\n  if (eligible.size() >= allowedSegCountInt) {\n    MergeScore bestScore=null;\n    List<SegmentCommitInfo> best=null;\n    boolean bestTooLarge=false;\n    long bestMergeBytes=0;\n    for (int startIdx=0; startIdx <= eligible.size() - maxMergeAtOnce; startIdx++) {\n      long totAfterMergeBytes=0;\n      final List<SegmentCommitInfo> candidate=new ArrayList<SegmentCommitInfo>();\n      boolean hitTooLarge=false;\n      for (int idx=startIdx; idx < eligible.size() && candidate.size() < maxMergeAtOnce; idx++) {\n        final SegmentCommitInfo info=eligible.get(idx);\n        final long segBytes=size(info);\n        if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n          hitTooLarge=true;\n          continue;\n        }\n        candidate.add(info);\n        totAfterMergeBytes+=segBytes;\n      }\n      final MergeScore score=score(candidate,hitTooLarge,mergingBytes);\n      if (verbose()) {\n        message(\"  maybe=\" + writer.get().segString(candidate) + \" score=\"+ score.getScore()+ \" \"+ score.getExplanation()+ \" tooLarge=\"+ hitTooLarge+ \" size=\"+ String.format(Locale.ROOT,\"%.3f MB\",totAfterMergeBytes / 1024. / 1024.));\n      }\n      if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n        best=candidate;\n        bestScore=score;\n        bestTooLarge=hitTooLarge;\n        bestMergeBytes=totAfterMergeBytes;\n      }\n    }\n    if (best != null) {\n      if (spec == null) {\n        spec=new MergeSpecification();\n      }\n      final OneMerge merge=new OneMerge(best);\n      spec.add(merge);\n      for (      SegmentCommitInfo info : merge.segments) {\n        toBeMerged.add(info);\n      }\n      if (verbose()) {\n        message(\"  add merge=\" + writer.get().segString(merge.segments) + \" size=\"+ String.format(Locale.ROOT,\"%.3f MB\",bestMergeBytes / 1024. / 1024.)+ \" score=\"+ String.format(Locale.ROOT,\"%.3f\",bestScore.getScore())+ \" \"+ bestScore.getExplanation()+ (bestTooLarge ? \" [max merge]\" : \"\"));\n      }\n    }\n else {\n      return spec;\n    }\n  }\n else {\n    return spec;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 496,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 5183,
                        "startLineNumber": 404,
                        "startColumnNumber": 8,
                        "endLineNumber": 514,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "while (true) {\n  long mergingBytes=0;\n  double idxBytes=0;\n  final List<SegmentCommitInfo> eligible=new ArrayList<SegmentCommitInfo>();\n  for (int idx=tooBigCount; idx < infosSorted.size(); idx++) {\n    final SegmentCommitInfo info=infosSorted.get(idx);\n    if (merging.contains(info)) {\n      mergingBytes+=info.sizeInBytes();\n    }\n else     if (!toBeMerged.contains(info)) {\n      eligible.add(info);\n    }\n    idxBytes+=info.sizeInBytes();\n  }\n  idxBytes/=1024 * 1000;\n  final boolean maxMergeIsRunning=mergingBytes >= maxMergedSegmentBytes;\n  if (verbose()) {\n    message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\"+ infosSorted.size()+ \" (eligible count=\"+ eligible.size()+ \") tooBigCount=\"+ tooBigCount);\n  }\n  if (eligible.size() == 0) {\n    return spec;\n  }\n  double bytes=idxBytes - this.mb;\n  double mbRate=bytes / timeDelta;\n  log.debug(\"committing {} MBs/sec ({} segs)\",mbRate,infos.size());\n  if (verbose()) {\n    message(mbRate + \"mb/s (max: \" + maxCommitRateMB+ \"mb/s)\");\n  }\n  this.mb=idxBytes;\n  if (mbRate > maxCommitRateMB && infos.size() < maxNoOfSegs) {\n    return null;\n  }\n  if (eligible.size() >= allowedSegCountInt) {\n    MergeScore bestScore=null;\n    List<SegmentCommitInfo> best=null;\n    boolean bestTooLarge=false;\n    long bestMergeBytes=0;\n    for (int startIdx=0; startIdx <= eligible.size() - maxMergeAtOnce; startIdx++) {\n      long totAfterMergeBytes=0;\n      final List<SegmentCommitInfo> candidate=new ArrayList<SegmentCommitInfo>();\n      boolean hitTooLarge=false;\n      for (int idx=startIdx; idx < eligible.size() && candidate.size() < maxMergeAtOnce; idx++) {\n        final SegmentCommitInfo info=eligible.get(idx);\n        final long segBytes=size(info);\n        if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n          hitTooLarge=true;\n          continue;\n        }\n        candidate.add(info);\n        totAfterMergeBytes+=segBytes;\n      }\n      final MergeScore score=score(candidate,hitTooLarge,mergingBytes);\n      if (verbose()) {\n        message(\"  maybe=\" + writer.get().segString(candidate) + \" score=\"+ score.getScore()+ \" \"+ score.getExplanation()+ \" tooLarge=\"+ hitTooLarge+ \" size=\"+ String.format(Locale.ROOT,\"%.3f MB\",totAfterMergeBytes / 1024. / 1024.));\n      }\n      if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n        best=candidate;\n        bestScore=score;\n        bestTooLarge=hitTooLarge;\n        bestMergeBytes=totAfterMergeBytes;\n      }\n    }\n    if (best != null) {\n      if (spec == null) {\n        spec=new MergeSpecification();\n      }\n      final OneMerge merge=new OneMerge(best);\n      spec.add(merge);\n      for (      SegmentCommitInfo info : merge.segments) {\n        toBeMerged.add(info);\n      }\n      if (verbose()) {\n        message(\"  add merge=\" + writer.get().segString(merge.segments) + \" size=\"+ String.format(Locale.ROOT,\"%.3f MB\",bestMergeBytes / 1024. / 1024.)+ \" score=\"+ String.format(Locale.ROOT,\"%.3f\",bestScore.getScore())+ \" \"+ bestScore.getExplanation()+ (bestTooLarge ? \" [max merge]\" : \"\"));\n      }\n    }\n else {\n      return spec;\n    }\n  }\n else {\n    return spec;\n  }\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 498,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8327,
                        "startLineNumber": 324,
                        "startColumnNumber": 107,
                        "endLineNumber": 515,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (verbose()) {\n    message(\"findMerges: \" + infos.size() + \" segments\");\n  }\n  if (infos.size() == 0) {\n    return null;\n  }\n  long now=System.currentTimeMillis();\n  double timeDelta=(now / 1000d) - (time / 1000d);\n  double commitRate=Math.abs(docCount - infos.totalDocCount()) / timeDelta;\n  log.debug(\"committing {} docs/sec ({} segs)\",commitRate);\n  docCount=infos.totalDocCount();\n  time=now;\n  if (verbose()) {\n    message(commitRate + \"doc/s (max: \" + maxCommitRateDocs+ \"doc/s)\");\n  }\n  if (commitRate > maxCommitRateDocs && infos.size() < maxNoOfSegs) {\n    return null;\n  }\n  final Collection<SegmentCommitInfo> merging=writer.get().getMergingSegments();\n  final Collection<SegmentCommitInfo> toBeMerged=new HashSet<SegmentCommitInfo>();\n  final List<SegmentCommitInfo> infosSorted=new ArrayList<SegmentCommitInfo>(infos.asList());\n  Collections.sort(infosSorted,new SegmentByteSizeDescending());\n  long totIndexBytes=0;\n  long minSegmentBytes=Long.MAX_VALUE;\n  for (  SegmentCommitInfo info : infosSorted) {\n    final long segBytes=size(info);\n    if (verbose()) {\n      String extra=merging.contains(info) ? \" [merging]\" : \"\";\n      if (segBytes >= maxMergedSegmentBytes / 2.0) {\n        extra+=\" [skip: too large]\";\n      }\n else       if (segBytes < floorSegmentBytes) {\n        extra+=\" [floored]\";\n      }\n      message(\"  seg=\" + writer.get().segString(info) + \" size=\"+ String.format(Locale.ROOT,\"%.3f\",segBytes / 1024 / 1024.)+ \" MB\"+ extra);\n    }\n    minSegmentBytes=Math.min(segBytes,minSegmentBytes);\n    totIndexBytes+=segBytes;\n  }\n  int tooBigCount=0;\n  while (tooBigCount < infosSorted.size() && size(infosSorted.get(tooBigCount)) >= maxMergedSegmentBytes / 2.0) {\n    totIndexBytes-=size(infosSorted.get(tooBigCount));\n    tooBigCount++;\n  }\n  minSegmentBytes=floorSize(minSegmentBytes);\n  long levelSize=minSegmentBytes;\n  long bytesLeft=totIndexBytes;\n  double allowedSegCount=0;\n  while (true) {\n    final double segCountLevel=bytesLeft / (double)levelSize;\n    if (segCountLevel < segsPerTier) {\n      allowedSegCount+=Math.ceil(segCountLevel);\n      break;\n    }\n    allowedSegCount+=segsPerTier;\n    bytesLeft-=segsPerTier * levelSize;\n    levelSize*=maxMergeAtOnce;\n  }\n  int allowedSegCountInt=(int)allowedSegCount;\n  MergeSpecification spec=null;\n  while (true) {\n    long mergingBytes=0;\n    double idxBytes=0;\n    final List<SegmentCommitInfo> eligible=new ArrayList<SegmentCommitInfo>();\n    for (int idx=tooBigCount; idx < infosSorted.size(); idx++) {\n      final SegmentCommitInfo info=infosSorted.get(idx);\n      if (merging.contains(info)) {\n        mergingBytes+=info.sizeInBytes();\n      }\n else       if (!toBeMerged.contains(info)) {\n        eligible.add(info);\n      }\n      idxBytes+=info.sizeInBytes();\n    }\n    idxBytes/=1024 * 1000;\n    final boolean maxMergeIsRunning=mergingBytes >= maxMergedSegmentBytes;\n    if (verbose()) {\n      message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\"+ infosSorted.size()+ \" (eligible count=\"+ eligible.size()+ \") tooBigCount=\"+ tooBigCount);\n    }\n    if (eligible.size() == 0) {\n      return spec;\n    }\n    double bytes=idxBytes - this.mb;\n    double mbRate=bytes / timeDelta;\n    log.debug(\"committing {} MBs/sec ({} segs)\",mbRate,infos.size());\n    if (verbose()) {\n      message(mbRate + \"mb/s (max: \" + maxCommitRateMB+ \"mb/s)\");\n    }\n    this.mb=idxBytes;\n    if (mbRate > maxCommitRateMB && infos.size() < maxNoOfSegs) {\n      return null;\n    }\n    if (eligible.size() >= allowedSegCountInt) {\n      MergeScore bestScore=null;\n      List<SegmentCommitInfo> best=null;\n      boolean bestTooLarge=false;\n      long bestMergeBytes=0;\n      for (int startIdx=0; startIdx <= eligible.size() - maxMergeAtOnce; startIdx++) {\n        long totAfterMergeBytes=0;\n        final List<SegmentCommitInfo> candidate=new ArrayList<SegmentCommitInfo>();\n        boolean hitTooLarge=false;\n        for (int idx=startIdx; idx < eligible.size() && candidate.size() < maxMergeAtOnce; idx++) {\n          final SegmentCommitInfo info=eligible.get(idx);\n          final long segBytes=size(info);\n          if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n            hitTooLarge=true;\n            continue;\n          }\n          candidate.add(info);\n          totAfterMergeBytes+=segBytes;\n        }\n        final MergeScore score=score(candidate,hitTooLarge,mergingBytes);\n        if (verbose()) {\n          message(\"  maybe=\" + writer.get().segString(candidate) + \" score=\"+ score.getScore()+ \" \"+ score.getExplanation()+ \" tooLarge=\"+ hitTooLarge+ \" size=\"+ String.format(Locale.ROOT,\"%.3f MB\",totAfterMergeBytes / 1024. / 1024.));\n        }\n        if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n          best=candidate;\n          bestScore=score;\n          bestTooLarge=hitTooLarge;\n          bestMergeBytes=totAfterMergeBytes;\n        }\n      }\n      if (best != null) {\n        if (spec == null) {\n          spec=new MergeSpecification();\n        }\n        final OneMerge merge=new OneMerge(best);\n        spec.add(merge);\n        for (        SegmentCommitInfo info : merge.segments) {\n          toBeMerged.add(info);\n        }\n        if (verbose()) {\n          message(\"  add merge=\" + writer.get().segString(merge.segments) + \" size=\"+ String.format(Locale.ROOT,\"%.3f MB\",bestMergeBytes / 1024. / 1024.)+ \" score=\"+ String.format(Locale.ROOT,\"%.3f\",bestScore.getScore())+ \" \"+ bestScore.getExplanation()+ (bestTooLarge ? \" [max merge]\" : \"\"));\n        }\n      }\n else {\n        return spec;\n      }\n    }\n else {\n      return spec;\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 860,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 8444,
                        "startLineNumber": 323,
                        "startColumnNumber": 4,
                        "endLineNumber": 515,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override public MergeSpecification findMerges(MergeTrigger mergeTrigger,SegmentInfos infos) throws IOException {\n  if (verbose()) {\n    message(\"findMerges: \" + infos.size() + \" segments\");\n  }\n  if (infos.size() == 0) {\n    return null;\n  }\n  long now=System.currentTimeMillis();\n  double timeDelta=(now / 1000d) - (time / 1000d);\n  double commitRate=Math.abs(docCount - infos.totalDocCount()) / timeDelta;\n  log.debug(\"committing {} docs/sec ({} segs)\",commitRate);\n  docCount=infos.totalDocCount();\n  time=now;\n  if (verbose()) {\n    message(commitRate + \"doc/s (max: \" + maxCommitRateDocs+ \"doc/s)\");\n  }\n  if (commitRate > maxCommitRateDocs && infos.size() < maxNoOfSegs) {\n    return null;\n  }\n  final Collection<SegmentCommitInfo> merging=writer.get().getMergingSegments();\n  final Collection<SegmentCommitInfo> toBeMerged=new HashSet<SegmentCommitInfo>();\n  final List<SegmentCommitInfo> infosSorted=new ArrayList<SegmentCommitInfo>(infos.asList());\n  Collections.sort(infosSorted,new SegmentByteSizeDescending());\n  long totIndexBytes=0;\n  long minSegmentBytes=Long.MAX_VALUE;\n  for (  SegmentCommitInfo info : infosSorted) {\n    final long segBytes=size(info);\n    if (verbose()) {\n      String extra=merging.contains(info) ? \" [merging]\" : \"\";\n      if (segBytes >= maxMergedSegmentBytes / 2.0) {\n        extra+=\" [skip: too large]\";\n      }\n else       if (segBytes < floorSegmentBytes) {\n        extra+=\" [floored]\";\n      }\n      message(\"  seg=\" + writer.get().segString(info) + \" size=\"+ String.format(Locale.ROOT,\"%.3f\",segBytes / 1024 / 1024.)+ \" MB\"+ extra);\n    }\n    minSegmentBytes=Math.min(segBytes,minSegmentBytes);\n    totIndexBytes+=segBytes;\n  }\n  int tooBigCount=0;\n  while (tooBigCount < infosSorted.size() && size(infosSorted.get(tooBigCount)) >= maxMergedSegmentBytes / 2.0) {\n    totIndexBytes-=size(infosSorted.get(tooBigCount));\n    tooBigCount++;\n  }\n  minSegmentBytes=floorSize(minSegmentBytes);\n  long levelSize=minSegmentBytes;\n  long bytesLeft=totIndexBytes;\n  double allowedSegCount=0;\n  while (true) {\n    final double segCountLevel=bytesLeft / (double)levelSize;\n    if (segCountLevel < segsPerTier) {\n      allowedSegCount+=Math.ceil(segCountLevel);\n      break;\n    }\n    allowedSegCount+=segsPerTier;\n    bytesLeft-=segsPerTier * levelSize;\n    levelSize*=maxMergeAtOnce;\n  }\n  int allowedSegCountInt=(int)allowedSegCount;\n  MergeSpecification spec=null;\n  while (true) {\n    long mergingBytes=0;\n    double idxBytes=0;\n    final List<SegmentCommitInfo> eligible=new ArrayList<SegmentCommitInfo>();\n    for (int idx=tooBigCount; idx < infosSorted.size(); idx++) {\n      final SegmentCommitInfo info=infosSorted.get(idx);\n      if (merging.contains(info)) {\n        mergingBytes+=info.sizeInBytes();\n      }\n else       if (!toBeMerged.contains(info)) {\n        eligible.add(info);\n      }\n      idxBytes+=info.sizeInBytes();\n    }\n    idxBytes/=1024 * 1000;\n    final boolean maxMergeIsRunning=mergingBytes >= maxMergedSegmentBytes;\n    if (verbose()) {\n      message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\"+ infosSorted.size()+ \" (eligible count=\"+ eligible.size()+ \") tooBigCount=\"+ tooBigCount);\n    }\n    if (eligible.size() == 0) {\n      return spec;\n    }\n    double bytes=idxBytes - this.mb;\n    double mbRate=bytes / timeDelta;\n    log.debug(\"committing {} MBs/sec ({} segs)\",mbRate,infos.size());\n    if (verbose()) {\n      message(mbRate + \"mb/s (max: \" + maxCommitRateMB+ \"mb/s)\");\n    }\n    this.mb=idxBytes;\n    if (mbRate > maxCommitRateMB && infos.size() < maxNoOfSegs) {\n      return null;\n    }\n    if (eligible.size() >= allowedSegCountInt) {\n      MergeScore bestScore=null;\n      List<SegmentCommitInfo> best=null;\n      boolean bestTooLarge=false;\n      long bestMergeBytes=0;\n      for (int startIdx=0; startIdx <= eligible.size() - maxMergeAtOnce; startIdx++) {\n        long totAfterMergeBytes=0;\n        final List<SegmentCommitInfo> candidate=new ArrayList<SegmentCommitInfo>();\n        boolean hitTooLarge=false;\n        for (int idx=startIdx; idx < eligible.size() && candidate.size() < maxMergeAtOnce; idx++) {\n          final SegmentCommitInfo info=eligible.get(idx);\n          final long segBytes=size(info);\n          if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n            hitTooLarge=true;\n            continue;\n          }\n          candidate.add(info);\n          totAfterMergeBytes+=segBytes;\n        }\n        final MergeScore score=score(candidate,hitTooLarge,mergingBytes);\n        if (verbose()) {\n          message(\"  maybe=\" + writer.get().segString(candidate) + \" score=\"+ score.getScore()+ \" \"+ score.getExplanation()+ \" tooLarge=\"+ hitTooLarge+ \" size=\"+ String.format(Locale.ROOT,\"%.3f MB\",totAfterMergeBytes / 1024. / 1024.));\n        }\n        if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n          best=candidate;\n          bestScore=score;\n          bestTooLarge=hitTooLarge;\n          bestMergeBytes=totAfterMergeBytes;\n        }\n      }\n      if (best != null) {\n        if (spec == null) {\n          spec=new MergeSpecification();\n        }\n        final OneMerge merge=new OneMerge(best);\n        spec.add(merge);\n        for (        SegmentCommitInfo info : merge.segments) {\n          toBeMerged.add(info);\n        }\n        if (verbose()) {\n          message(\"  add merge=\" + writer.get().segString(merge.segments) + \" size=\"+ String.format(Locale.ROOT,\"%.3f MB\",bestMergeBytes / 1024. / 1024.)+ \" score=\"+ String.format(Locale.ROOT,\"%.3f\",bestScore.getScore())+ \" \"+ bestScore.getExplanation()+ (bestTooLarge ? \" [max merge]\" : \"\"));\n        }\n      }\n else {\n        return spec;\n      }\n    }\n else {\n      return spec;\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 877,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 234,
                    "startLineNumber": 482,
                    "startColumnNumber": 24,
                    "endLineNumber": 482,
                    "endColumnNumber": 258
                },
                "nodeContext": "message(\"  maybe=\" + writer.get().segString(candidate) + \" score=\"+ score.getScore()+ \" \"+ score.getExplanation()+ \" tooLarge=\"+ hitTooLarge+ \" size=\"+ String.format(Locale.ROOT,\"%.3f MB\",totAfterMergeBytes / 1024. / 1024.));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 33,
                "astHeight": 6
            },
            "tokenLength": 2,
            "type": "java.lang.String"
        }
    ],
    "positionList": [
        {
            "charLength": 22,
            "startLineNumber": 482,
            "startColumnNumber": 118,
            "endLineNumber": 482,
            "endColumnNumber": 140
        }
    ],
    "layoutRelationDataList": []
}