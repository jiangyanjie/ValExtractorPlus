{
    "id": 846,
    "expression": "queue",
    "projectName": "jackrabbit-oak",
    "commitID": "58a0f096dee5f13a5591d924728f226bd2caa204",
    "filePath": "oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/LucenePropertyIndex.java",
    "occurrences": 5,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "queue",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 5,
                "startLineNumber": 394,
                "startColumnNumber": 36,
                "endLineNumber": 394,
                "endColumnNumber": 41
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 14,
                        "startLineNumber": 394,
                        "startColumnNumber": 36,
                        "endLineNumber": 394,
                        "endColumnNumber": 50
                    },
                    "nodeContext": "queue.add(row)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 15,
                        "startLineNumber": 394,
                        "startColumnNumber": 36,
                        "endLineNumber": 394,
                        "endColumnNumber": 51
                    },
                    "nodeContext": "queue.add(row);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 87,
                        "startLineNumber": 393,
                        "startColumnNumber": 49,
                        "endLineNumber": 395,
                        "endColumnNumber": 33
                    },
                    "nodeContext": "{\n  queue.add(row);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 6,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 104,
                        "startLineNumber": 393,
                        "startColumnNumber": 32,
                        "endLineNumber": 395,
                        "endColumnNumber": 33
                    },
                    "nodeContext": "if (row != null) {\n  queue.add(row);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 10,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 546,
                        "startLineNumber": 386,
                        "startColumnNumber": 64,
                        "endLineNumber": 397,
                        "endColumnNumber": 29
                    },
                    "nodeContext": "{\n  String excerpt=null;\n  if (addExcerpt) {\n    excerpt=getExcerpt(indexNode,searcher,query,doc);\n  }\n  LuceneResultRow row=convertToRow(doc,searcher,excerpt);\n  if (row != null) {\n    queue.add(row);\n  }\n  lastDocToRecord=doc;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 43,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 582,
                        "startLineNumber": 386,
                        "startColumnNumber": 28,
                        "endLineNumber": 397,
                        "endColumnNumber": 29
                    },
                    "nodeContext": "for (ScoreDoc doc : docs.scoreDocs) {\n  String excerpt=null;\n  if (addExcerpt) {\n    excerpt=getExcerpt(indexNode,searcher,query,doc);\n  }\n  LuceneResultRow row=convertToRow(doc,searcher,excerpt);\n  if (row != null) {\n    queue.add(row);\n  }\n  lastDocToRecord=doc;\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 51,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2319,
                        "startLineNumber": 366,
                        "startColumnNumber": 37,
                        "endLineNumber": 406,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "{\n  if (lastDoc != null) {\n    LOG.debug(\"loading the next {} entries for query {}\",nextBatchSize,query);\n    if (sort == null) {\n      docs=searcher.searchAfter(lastDoc,query,nextBatchSize);\n    }\n else {\n      docs=searcher.searchAfter(lastDoc,query,nextBatchSize,sort);\n    }\n  }\n else {\n    LOG.debug(\"loading the first {} entries for query {}\",nextBatchSize,query);\n    if (sort == null) {\n      docs=searcher.search(query,nextBatchSize);\n    }\n else {\n      docs=searcher.search(query,nextBatchSize,sort);\n    }\n  }\n  PERF_LOGGER.end(start,-1,\"{} ...\",docs.scoreDocs.length);\n  nextBatchSize=(int)Math.min(nextBatchSize * 2L,100000);\n  boolean addExcerpt=filter.getQueryStatement() != null && filter.getQueryStatement().contains(QueryImpl.REP_EXCERPT);\n  for (  ScoreDoc doc : docs.scoreDocs) {\n    String excerpt=null;\n    if (addExcerpt) {\n      excerpt=getExcerpt(indexNode,searcher,query,doc);\n    }\n    LuceneResultRow row=convertToRow(doc,searcher,excerpt);\n    if (row != null) {\n      queue.add(row);\n    }\n    lastDocToRecord=doc;\n  }\n  if (queue.isEmpty() && docs.scoreDocs.length > 0) {\n    lastDoc=lastDocToRecord;\n  }\n else {\n    break;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 182,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2332,
                        "startLineNumber": 366,
                        "startColumnNumber": 24,
                        "endLineNumber": 406,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "while (true) {\n  if (lastDoc != null) {\n    LOG.debug(\"loading the next {} entries for query {}\",nextBatchSize,query);\n    if (sort == null) {\n      docs=searcher.searchAfter(lastDoc,query,nextBatchSize);\n    }\n else {\n      docs=searcher.searchAfter(lastDoc,query,nextBatchSize,sort);\n    }\n  }\n else {\n    LOG.debug(\"loading the first {} entries for query {}\",nextBatchSize,query);\n    if (sort == null) {\n      docs=searcher.search(query,nextBatchSize);\n    }\n else {\n      docs=searcher.search(query,nextBatchSize,sort);\n    }\n  }\n  PERF_LOGGER.end(start,-1,\"{} ...\",docs.scoreDocs.length);\n  nextBatchSize=(int)Math.min(nextBatchSize * 2L,100000);\n  boolean addExcerpt=filter.getQueryStatement() != null && filter.getQueryStatement().contains(QueryImpl.REP_EXCERPT);\n  for (  ScoreDoc doc : docs.scoreDocs) {\n    String excerpt=null;\n    if (addExcerpt) {\n      excerpt=getExcerpt(indexNode,searcher,query,doc);\n    }\n    LuceneResultRow row=convertToRow(doc,searcher,excerpt);\n    if (row != null) {\n      queue.add(row);\n    }\n    lastDocToRecord=doc;\n  }\n  if (queue.isEmpty() && docs.scoreDocs.length > 0) {\n    lastDoc=lastDocToRecord;\n  }\n else {\n    break;\n  }\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 184,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 2858,
                        "startLineNumber": 353,
                        "startColumnNumber": 81,
                        "endLineNumber": 407,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  Query query=(Query)luceneRequestFacade.getLuceneRequest();\n  CustomScoreQuery customScoreQuery=getCustomScoreQuery(plan,query);\n  if (customScoreQuery != null) {\n    query=customScoreQuery;\n  }\n  checkForIndexVersionChange(searcher);\n  TopDocs docs;\n  long start=PERF_LOGGER.start();\n  while (true) {\n    if (lastDoc != null) {\n      LOG.debug(\"loading the next {} entries for query {}\",nextBatchSize,query);\n      if (sort == null) {\n        docs=searcher.searchAfter(lastDoc,query,nextBatchSize);\n      }\n else {\n        docs=searcher.searchAfter(lastDoc,query,nextBatchSize,sort);\n      }\n    }\n else {\n      LOG.debug(\"loading the first {} entries for query {}\",nextBatchSize,query);\n      if (sort == null) {\n        docs=searcher.search(query,nextBatchSize);\n      }\n else {\n        docs=searcher.search(query,nextBatchSize,sort);\n      }\n    }\n    PERF_LOGGER.end(start,-1,\"{} ...\",docs.scoreDocs.length);\n    nextBatchSize=(int)Math.min(nextBatchSize * 2L,100000);\n    boolean addExcerpt=filter.getQueryStatement() != null && filter.getQueryStatement().contains(QueryImpl.REP_EXCERPT);\n    for (    ScoreDoc doc : docs.scoreDocs) {\n      String excerpt=null;\n      if (addExcerpt) {\n        excerpt=getExcerpt(indexNode,searcher,query,doc);\n      }\n      LuceneResultRow row=convertToRow(doc,searcher,excerpt);\n      if (row != null) {\n        queue.add(row);\n      }\n      lastDocToRecord=doc;\n    }\n    if (queue.isEmpty() && docs.scoreDocs.length > 0) {\n      lastDoc=lastDocToRecord;\n    }\n else {\n      break;\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 230,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6075,
                        "startLineNumber": 353,
                        "startColumnNumber": 20,
                        "endLineNumber": 454,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (luceneRequestFacade.getLuceneRequest() instanceof Query) {\n  Query query=(Query)luceneRequestFacade.getLuceneRequest();\n  CustomScoreQuery customScoreQuery=getCustomScoreQuery(plan,query);\n  if (customScoreQuery != null) {\n    query=customScoreQuery;\n  }\n  checkForIndexVersionChange(searcher);\n  TopDocs docs;\n  long start=PERF_LOGGER.start();\n  while (true) {\n    if (lastDoc != null) {\n      LOG.debug(\"loading the next {} entries for query {}\",nextBatchSize,query);\n      if (sort == null) {\n        docs=searcher.searchAfter(lastDoc,query,nextBatchSize);\n      }\n else {\n        docs=searcher.searchAfter(lastDoc,query,nextBatchSize,sort);\n      }\n    }\n else {\n      LOG.debug(\"loading the first {} entries for query {}\",nextBatchSize,query);\n      if (sort == null) {\n        docs=searcher.search(query,nextBatchSize);\n      }\n else {\n        docs=searcher.search(query,nextBatchSize,sort);\n      }\n    }\n    PERF_LOGGER.end(start,-1,\"{} ...\",docs.scoreDocs.length);\n    nextBatchSize=(int)Math.min(nextBatchSize * 2L,100000);\n    boolean addExcerpt=filter.getQueryStatement() != null && filter.getQueryStatement().contains(QueryImpl.REP_EXCERPT);\n    for (    ScoreDoc doc : docs.scoreDocs) {\n      String excerpt=null;\n      if (addExcerpt) {\n        excerpt=getExcerpt(indexNode,searcher,query,doc);\n      }\n      LuceneResultRow row=convertToRow(doc,searcher,excerpt);\n      if (row != null) {\n        queue.add(row);\n      }\n      lastDocToRecord=doc;\n    }\n    if (queue.isEmpty() && docs.scoreDocs.length > 0) {\n      lastDoc=lastDocToRecord;\n    }\n else {\n      break;\n    }\n  }\n}\n else if (luceneRequestFacade.getLuceneRequest() instanceof SpellcheckHelper.SpellcheckQuery) {\n  String aclCheckField=indexNode.getDefinition().isFullTextEnabled() ? FieldNames.FULLTEXT : FieldNames.SPELLCHECK;\n  SpellcheckHelper.SpellcheckQuery spellcheckQuery=(SpellcheckHelper.SpellcheckQuery)luceneRequestFacade.getLuceneRequest();\n  SuggestWord[] suggestWords=SpellcheckHelper.getSpellcheck(spellcheckQuery);\n  QueryParser qp=new QueryParser(Version.LUCENE_47,aclCheckField,indexNode.getDefinition().getAnalyzer());\n  for (  SuggestWord suggestion : suggestWords) {\n    Query query=qp.createPhraseQuery(aclCheckField,suggestion.string);\n    TopDocs topDocs=searcher.search(query,100);\n    if (topDocs.totalHits > 0) {\n      for (      ScoreDoc doc : topDocs.scoreDocs) {\n        Document retrievedDoc=searcher.doc(doc.doc);\n        if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n          queue.add(new LuceneResultRow(suggestion.string));\n          break;\n        }\n      }\n    }\n  }\n  noDocs=true;\n}\n else if (luceneRequestFacade.getLuceneRequest() instanceof SuggestHelper.SuggestQuery) {\n  SuggestHelper.SuggestQuery suggestQuery=(SuggestHelper.SuggestQuery)luceneRequestFacade.getLuceneRequest();\n  List<Lookup.LookupResult> lookupResults=SuggestHelper.getSuggestions(indexNode.getLookup(),suggestQuery);\n  QueryParser qp=new QueryParser(Version.LUCENE_47,FieldNames.SUGGEST,indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer());\n  for (  Lookup.LookupResult suggestion : lookupResults) {\n    Query query=qp.parse(\"\\\"\" + suggestion.key.toString() + \"\\\"\");\n    TopDocs topDocs=searcher.search(query,100);\n    if (topDocs.totalHits > 0) {\n      for (      ScoreDoc doc : topDocs.scoreDocs) {\n        Document retrievedDoc=searcher.doc(doc.doc);\n        if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n          queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n          break;\n        }\n      }\n    }\n  }\n  noDocs=true;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 552,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 6298,
                        "startLineNumber": 350,
                        "startColumnNumber": 20,
                        "endLineNumber": 455,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  IndexSearcher searcher=indexNode.getSearcher();\n  LuceneRequestFacade luceneRequestFacade=getLuceneRequest(plan,searcher.getIndexReader());\n  if (luceneRequestFacade.getLuceneRequest() instanceof Query) {\n    Query query=(Query)luceneRequestFacade.getLuceneRequest();\n    CustomScoreQuery customScoreQuery=getCustomScoreQuery(plan,query);\n    if (customScoreQuery != null) {\n      query=customScoreQuery;\n    }\n    checkForIndexVersionChange(searcher);\n    TopDocs docs;\n    long start=PERF_LOGGER.start();\n    while (true) {\n      if (lastDoc != null) {\n        LOG.debug(\"loading the next {} entries for query {}\",nextBatchSize,query);\n        if (sort == null) {\n          docs=searcher.searchAfter(lastDoc,query,nextBatchSize);\n        }\n else {\n          docs=searcher.searchAfter(lastDoc,query,nextBatchSize,sort);\n        }\n      }\n else {\n        LOG.debug(\"loading the first {} entries for query {}\",nextBatchSize,query);\n        if (sort == null) {\n          docs=searcher.search(query,nextBatchSize);\n        }\n else {\n          docs=searcher.search(query,nextBatchSize,sort);\n        }\n      }\n      PERF_LOGGER.end(start,-1,\"{} ...\",docs.scoreDocs.length);\n      nextBatchSize=(int)Math.min(nextBatchSize * 2L,100000);\n      boolean addExcerpt=filter.getQueryStatement() != null && filter.getQueryStatement().contains(QueryImpl.REP_EXCERPT);\n      for (      ScoreDoc doc : docs.scoreDocs) {\n        String excerpt=null;\n        if (addExcerpt) {\n          excerpt=getExcerpt(indexNode,searcher,query,doc);\n        }\n        LuceneResultRow row=convertToRow(doc,searcher,excerpt);\n        if (row != null) {\n          queue.add(row);\n        }\n        lastDocToRecord=doc;\n      }\n      if (queue.isEmpty() && docs.scoreDocs.length > 0) {\n        lastDoc=lastDocToRecord;\n      }\n else {\n        break;\n      }\n    }\n  }\n else   if (luceneRequestFacade.getLuceneRequest() instanceof SpellcheckHelper.SpellcheckQuery) {\n    String aclCheckField=indexNode.getDefinition().isFullTextEnabled() ? FieldNames.FULLTEXT : FieldNames.SPELLCHECK;\n    SpellcheckHelper.SpellcheckQuery spellcheckQuery=(SpellcheckHelper.SpellcheckQuery)luceneRequestFacade.getLuceneRequest();\n    SuggestWord[] suggestWords=SpellcheckHelper.getSpellcheck(spellcheckQuery);\n    QueryParser qp=new QueryParser(Version.LUCENE_47,aclCheckField,indexNode.getDefinition().getAnalyzer());\n    for (    SuggestWord suggestion : suggestWords) {\n      Query query=qp.createPhraseQuery(aclCheckField,suggestion.string);\n      TopDocs topDocs=searcher.search(query,100);\n      if (topDocs.totalHits > 0) {\n        for (        ScoreDoc doc : topDocs.scoreDocs) {\n          Document retrievedDoc=searcher.doc(doc.doc);\n          if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n            queue.add(new LuceneResultRow(suggestion.string));\n            break;\n          }\n        }\n      }\n    }\n    noDocs=true;\n  }\n else   if (luceneRequestFacade.getLuceneRequest() instanceof SuggestHelper.SuggestQuery) {\n    SuggestHelper.SuggestQuery suggestQuery=(SuggestHelper.SuggestQuery)luceneRequestFacade.getLuceneRequest();\n    List<Lookup.LookupResult> lookupResults=SuggestHelper.getSuggestions(indexNode.getLookup(),suggestQuery);\n    QueryParser qp=new QueryParser(Version.LUCENE_47,FieldNames.SUGGEST,indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer());\n    for (    Lookup.LookupResult suggestion : lookupResults) {\n      Query query=qp.parse(\"\\\"\" + suggestion.key.toString() + \"\\\"\");\n      TopDocs topDocs=searcher.search(query,100);\n      if (topDocs.totalHits > 0) {\n        for (        ScoreDoc doc : topDocs.scoreDocs) {\n          Document retrievedDoc=searcher.doc(doc.doc);\n          if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n            queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n            break;\n          }\n        }\n      }\n    }\n    noDocs=true;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 572,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6494,
                        "startLineNumber": 350,
                        "startColumnNumber": 16,
                        "endLineNumber": 459,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "try {\n  IndexSearcher searcher=indexNode.getSearcher();\n  LuceneRequestFacade luceneRequestFacade=getLuceneRequest(plan,searcher.getIndexReader());\n  if (luceneRequestFacade.getLuceneRequest() instanceof Query) {\n    Query query=(Query)luceneRequestFacade.getLuceneRequest();\n    CustomScoreQuery customScoreQuery=getCustomScoreQuery(plan,query);\n    if (customScoreQuery != null) {\n      query=customScoreQuery;\n    }\n    checkForIndexVersionChange(searcher);\n    TopDocs docs;\n    long start=PERF_LOGGER.start();\n    while (true) {\n      if (lastDoc != null) {\n        LOG.debug(\"loading the next {} entries for query {}\",nextBatchSize,query);\n        if (sort == null) {\n          docs=searcher.searchAfter(lastDoc,query,nextBatchSize);\n        }\n else {\n          docs=searcher.searchAfter(lastDoc,query,nextBatchSize,sort);\n        }\n      }\n else {\n        LOG.debug(\"loading the first {} entries for query {}\",nextBatchSize,query);\n        if (sort == null) {\n          docs=searcher.search(query,nextBatchSize);\n        }\n else {\n          docs=searcher.search(query,nextBatchSize,sort);\n        }\n      }\n      PERF_LOGGER.end(start,-1,\"{} ...\",docs.scoreDocs.length);\n      nextBatchSize=(int)Math.min(nextBatchSize * 2L,100000);\n      boolean addExcerpt=filter.getQueryStatement() != null && filter.getQueryStatement().contains(QueryImpl.REP_EXCERPT);\n      for (      ScoreDoc doc : docs.scoreDocs) {\n        String excerpt=null;\n        if (addExcerpt) {\n          excerpt=getExcerpt(indexNode,searcher,query,doc);\n        }\n        LuceneResultRow row=convertToRow(doc,searcher,excerpt);\n        if (row != null) {\n          queue.add(row);\n        }\n        lastDocToRecord=doc;\n      }\n      if (queue.isEmpty() && docs.scoreDocs.length > 0) {\n        lastDoc=lastDocToRecord;\n      }\n else {\n        break;\n      }\n    }\n  }\n else   if (luceneRequestFacade.getLuceneRequest() instanceof SpellcheckHelper.SpellcheckQuery) {\n    String aclCheckField=indexNode.getDefinition().isFullTextEnabled() ? FieldNames.FULLTEXT : FieldNames.SPELLCHECK;\n    SpellcheckHelper.SpellcheckQuery spellcheckQuery=(SpellcheckHelper.SpellcheckQuery)luceneRequestFacade.getLuceneRequest();\n    SuggestWord[] suggestWords=SpellcheckHelper.getSpellcheck(spellcheckQuery);\n    QueryParser qp=new QueryParser(Version.LUCENE_47,aclCheckField,indexNode.getDefinition().getAnalyzer());\n    for (    SuggestWord suggestion : suggestWords) {\n      Query query=qp.createPhraseQuery(aclCheckField,suggestion.string);\n      TopDocs topDocs=searcher.search(query,100);\n      if (topDocs.totalHits > 0) {\n        for (        ScoreDoc doc : topDocs.scoreDocs) {\n          Document retrievedDoc=searcher.doc(doc.doc);\n          if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n            queue.add(new LuceneResultRow(suggestion.string));\n            break;\n          }\n        }\n      }\n    }\n    noDocs=true;\n  }\n else   if (luceneRequestFacade.getLuceneRequest() instanceof SuggestHelper.SuggestQuery) {\n    SuggestHelper.SuggestQuery suggestQuery=(SuggestHelper.SuggestQuery)luceneRequestFacade.getLuceneRequest();\n    List<Lookup.LookupResult> lookupResults=SuggestHelper.getSuggestions(indexNode.getLookup(),suggestQuery);\n    QueryParser qp=new QueryParser(Version.LUCENE_47,FieldNames.SUGGEST,indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer());\n    for (    Lookup.LookupResult suggestion : lookupResults) {\n      Query query=qp.parse(\"\\\"\" + suggestion.key.toString() + \"\\\"\");\n      TopDocs topDocs=searcher.search(query,100);\n      if (topDocs.totalHits > 0) {\n        for (        ScoreDoc doc : topDocs.scoreDocs) {\n          Document retrievedDoc=searcher.doc(doc.doc);\n          if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n            queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n            break;\n          }\n        }\n      }\n    }\n    noDocs=true;\n  }\n}\n catch (Exception e) {\n  LOG.warn(\"query via {} failed.\",LucenePropertyIndex.this,e);\n}\n finally {\n  indexNode.release();\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 592,
                    "astHeight": 20
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 6935,
                        "startLineNumber": 340,
                        "startColumnNumber": 39,
                        "endLineNumber": 466,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  if (noDocs) {\n    return false;\n  }\n  ScoreDoc lastDocToRecord=null;\n  final IndexNode indexNode=acquireIndexNode(plan);\n  checkState(indexNode != null);\n  try {\n    IndexSearcher searcher=indexNode.getSearcher();\n    LuceneRequestFacade luceneRequestFacade=getLuceneRequest(plan,searcher.getIndexReader());\n    if (luceneRequestFacade.getLuceneRequest() instanceof Query) {\n      Query query=(Query)luceneRequestFacade.getLuceneRequest();\n      CustomScoreQuery customScoreQuery=getCustomScoreQuery(plan,query);\n      if (customScoreQuery != null) {\n        query=customScoreQuery;\n      }\n      checkForIndexVersionChange(searcher);\n      TopDocs docs;\n      long start=PERF_LOGGER.start();\n      while (true) {\n        if (lastDoc != null) {\n          LOG.debug(\"loading the next {} entries for query {}\",nextBatchSize,query);\n          if (sort == null) {\n            docs=searcher.searchAfter(lastDoc,query,nextBatchSize);\n          }\n else {\n            docs=searcher.searchAfter(lastDoc,query,nextBatchSize,sort);\n          }\n        }\n else {\n          LOG.debug(\"loading the first {} entries for query {}\",nextBatchSize,query);\n          if (sort == null) {\n            docs=searcher.search(query,nextBatchSize);\n          }\n else {\n            docs=searcher.search(query,nextBatchSize,sort);\n          }\n        }\n        PERF_LOGGER.end(start,-1,\"{} ...\",docs.scoreDocs.length);\n        nextBatchSize=(int)Math.min(nextBatchSize * 2L,100000);\n        boolean addExcerpt=filter.getQueryStatement() != null && filter.getQueryStatement().contains(QueryImpl.REP_EXCERPT);\n        for (        ScoreDoc doc : docs.scoreDocs) {\n          String excerpt=null;\n          if (addExcerpt) {\n            excerpt=getExcerpt(indexNode,searcher,query,doc);\n          }\n          LuceneResultRow row=convertToRow(doc,searcher,excerpt);\n          if (row != null) {\n            queue.add(row);\n          }\n          lastDocToRecord=doc;\n        }\n        if (queue.isEmpty() && docs.scoreDocs.length > 0) {\n          lastDoc=lastDocToRecord;\n        }\n else {\n          break;\n        }\n      }\n    }\n else     if (luceneRequestFacade.getLuceneRequest() instanceof SpellcheckHelper.SpellcheckQuery) {\n      String aclCheckField=indexNode.getDefinition().isFullTextEnabled() ? FieldNames.FULLTEXT : FieldNames.SPELLCHECK;\n      SpellcheckHelper.SpellcheckQuery spellcheckQuery=(SpellcheckHelper.SpellcheckQuery)luceneRequestFacade.getLuceneRequest();\n      SuggestWord[] suggestWords=SpellcheckHelper.getSpellcheck(spellcheckQuery);\n      QueryParser qp=new QueryParser(Version.LUCENE_47,aclCheckField,indexNode.getDefinition().getAnalyzer());\n      for (      SuggestWord suggestion : suggestWords) {\n        Query query=qp.createPhraseQuery(aclCheckField,suggestion.string);\n        TopDocs topDocs=searcher.search(query,100);\n        if (topDocs.totalHits > 0) {\n          for (          ScoreDoc doc : topDocs.scoreDocs) {\n            Document retrievedDoc=searcher.doc(doc.doc);\n            if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n              queue.add(new LuceneResultRow(suggestion.string));\n              break;\n            }\n          }\n        }\n      }\n      noDocs=true;\n    }\n else     if (luceneRequestFacade.getLuceneRequest() instanceof SuggestHelper.SuggestQuery) {\n      SuggestHelper.SuggestQuery suggestQuery=(SuggestHelper.SuggestQuery)luceneRequestFacade.getLuceneRequest();\n      List<Lookup.LookupResult> lookupResults=SuggestHelper.getSuggestions(indexNode.getLookup(),suggestQuery);\n      QueryParser qp=new QueryParser(Version.LUCENE_47,FieldNames.SUGGEST,indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer());\n      for (      Lookup.LookupResult suggestion : lookupResults) {\n        Query query=qp.parse(\"\\\"\" + suggestion.key.toString() + \"\\\"\");\n        TopDocs topDocs=searcher.search(query,100);\n        if (topDocs.totalHits > 0) {\n          for (          ScoreDoc doc : topDocs.scoreDocs) {\n            Document retrievedDoc=searcher.doc(doc.doc);\n            if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n              queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n              break;\n            }\n          }\n        }\n      }\n      noDocs=true;\n    }\n  }\n catch (  Exception e) {\n    LOG.warn(\"query via {} failed.\",LucenePropertyIndex.this,e);\n  }\n finally {\n    indexNode.release();\n  }\n  if (lastDocToRecord != null) {\n    this.lastDoc=lastDocToRecord;\n  }\n  return !queue.isEmpty();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 635,
                    "astHeight": 21
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.AnonymousClassDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7101,
                        "startLineNumber": 336,
                        "startColumnNumber": 12,
                        "endLineNumber": 466,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "/** \n * Loads the lucene documents in batches\n * @return true if any document is loaded\n */\nprivate boolean loadDocs(){\n  if (noDocs) {\n    return false;\n  }\n  ScoreDoc lastDocToRecord=null;\n  final IndexNode indexNode=acquireIndexNode(plan);\n  checkState(indexNode != null);\n  try {\n    IndexSearcher searcher=indexNode.getSearcher();\n    LuceneRequestFacade luceneRequestFacade=getLuceneRequest(plan,searcher.getIndexReader());\n    if (luceneRequestFacade.getLuceneRequest() instanceof Query) {\n      Query query=(Query)luceneRequestFacade.getLuceneRequest();\n      CustomScoreQuery customScoreQuery=getCustomScoreQuery(plan,query);\n      if (customScoreQuery != null) {\n        query=customScoreQuery;\n      }\n      checkForIndexVersionChange(searcher);\n      TopDocs docs;\n      long start=PERF_LOGGER.start();\n      while (true) {\n        if (lastDoc != null) {\n          LOG.debug(\"loading the next {} entries for query {}\",nextBatchSize,query);\n          if (sort == null) {\n            docs=searcher.searchAfter(lastDoc,query,nextBatchSize);\n          }\n else {\n            docs=searcher.searchAfter(lastDoc,query,nextBatchSize,sort);\n          }\n        }\n else {\n          LOG.debug(\"loading the first {} entries for query {}\",nextBatchSize,query);\n          if (sort == null) {\n            docs=searcher.search(query,nextBatchSize);\n          }\n else {\n            docs=searcher.search(query,nextBatchSize,sort);\n          }\n        }\n        PERF_LOGGER.end(start,-1,\"{} ...\",docs.scoreDocs.length);\n        nextBatchSize=(int)Math.min(nextBatchSize * 2L,100000);\n        boolean addExcerpt=filter.getQueryStatement() != null && filter.getQueryStatement().contains(QueryImpl.REP_EXCERPT);\n        for (        ScoreDoc doc : docs.scoreDocs) {\n          String excerpt=null;\n          if (addExcerpt) {\n            excerpt=getExcerpt(indexNode,searcher,query,doc);\n          }\n          LuceneResultRow row=convertToRow(doc,searcher,excerpt);\n          if (row != null) {\n            queue.add(row);\n          }\n          lastDocToRecord=doc;\n        }\n        if (queue.isEmpty() && docs.scoreDocs.length > 0) {\n          lastDoc=lastDocToRecord;\n        }\n else {\n          break;\n        }\n      }\n    }\n else     if (luceneRequestFacade.getLuceneRequest() instanceof SpellcheckHelper.SpellcheckQuery) {\n      String aclCheckField=indexNode.getDefinition().isFullTextEnabled() ? FieldNames.FULLTEXT : FieldNames.SPELLCHECK;\n      SpellcheckHelper.SpellcheckQuery spellcheckQuery=(SpellcheckHelper.SpellcheckQuery)luceneRequestFacade.getLuceneRequest();\n      SuggestWord[] suggestWords=SpellcheckHelper.getSpellcheck(spellcheckQuery);\n      QueryParser qp=new QueryParser(Version.LUCENE_47,aclCheckField,indexNode.getDefinition().getAnalyzer());\n      for (      SuggestWord suggestion : suggestWords) {\n        Query query=qp.createPhraseQuery(aclCheckField,suggestion.string);\n        TopDocs topDocs=searcher.search(query,100);\n        if (topDocs.totalHits > 0) {\n          for (          ScoreDoc doc : topDocs.scoreDocs) {\n            Document retrievedDoc=searcher.doc(doc.doc);\n            if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n              queue.add(new LuceneResultRow(suggestion.string));\n              break;\n            }\n          }\n        }\n      }\n      noDocs=true;\n    }\n else     if (luceneRequestFacade.getLuceneRequest() instanceof SuggestHelper.SuggestQuery) {\n      SuggestHelper.SuggestQuery suggestQuery=(SuggestHelper.SuggestQuery)luceneRequestFacade.getLuceneRequest();\n      List<Lookup.LookupResult> lookupResults=SuggestHelper.getSuggestions(indexNode.getLookup(),suggestQuery);\n      QueryParser qp=new QueryParser(Version.LUCENE_47,FieldNames.SUGGEST,indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer());\n      for (      Lookup.LookupResult suggestion : lookupResults) {\n        Query query=qp.parse(\"\\\"\" + suggestion.key.toString() + \"\\\"\");\n        TopDocs topDocs=searcher.search(query,100);\n        if (topDocs.totalHits > 0) {\n          for (          ScoreDoc doc : topDocs.scoreDocs) {\n            Document retrievedDoc=searcher.doc(doc.doc);\n            if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n              queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n              break;\n            }\n          }\n        }\n      }\n      noDocs=true;\n    }\n  }\n catch (  Exception e) {\n    LOG.warn(\"query via {} failed.\",LucenePropertyIndex.this,e);\n  }\n finally {\n    indexNode.release();\n  }\n  if (lastDocToRecord != null) {\n    this.lastDoc=lastDocToRecord;\n  }\n  return !queue.isEmpty();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 640,
                    "astHeight": 22
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 15,
                    "startLineNumber": 394,
                    "startColumnNumber": 36,
                    "endLineNumber": 394,
                    "endColumnNumber": 51
                },
                "nodeContext": "queue.add(row);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.util.Deque<org.apache.jackrabbit.oak.plugins.index.lucene.LucenePropertyIndex.LuceneResultRow>"
        },
        {
            "nodeContext": "queue",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 5,
                "startLineNumber": 399,
                "startColumnNumber": 32,
                "endLineNumber": 399,
                "endColumnNumber": 37
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 15,
                        "startLineNumber": 399,
                        "startColumnNumber": 32,
                        "endLineNumber": 399,
                        "endColumnNumber": 47
                    },
                    "nodeContext": "queue.isEmpty()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 44,
                        "startLineNumber": 399,
                        "startColumnNumber": 32,
                        "endLineNumber": 399,
                        "endColumnNumber": 76
                    },
                    "nodeContext": "queue.isEmpty() && docs.scoreDocs.length > 0",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 11,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 367,
                        "startLineNumber": 399,
                        "startColumnNumber": 28,
                        "endLineNumber": 405,
                        "endColumnNumber": 29
                    },
                    "nodeContext": "if (queue.isEmpty() && docs.scoreDocs.length > 0) {\n  lastDoc=lastDocToRecord;\n}\n else {\n  break;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 19,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
                    "nodePosition": {
                        "charLength": 2319,
                        "startLineNumber": 366,
                        "startColumnNumber": 37,
                        "endLineNumber": 406,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "{\n  if (lastDoc != null) {\n    LOG.debug(\"loading the next {} entries for query {}\",nextBatchSize,query);\n    if (sort == null) {\n      docs=searcher.searchAfter(lastDoc,query,nextBatchSize);\n    }\n else {\n      docs=searcher.searchAfter(lastDoc,query,nextBatchSize,sort);\n    }\n  }\n else {\n    LOG.debug(\"loading the first {} entries for query {}\",nextBatchSize,query);\n    if (sort == null) {\n      docs=searcher.search(query,nextBatchSize);\n    }\n else {\n      docs=searcher.search(query,nextBatchSize,sort);\n    }\n  }\n  PERF_LOGGER.end(start,-1,\"{} ...\",docs.scoreDocs.length);\n  nextBatchSize=(int)Math.min(nextBatchSize * 2L,100000);\n  boolean addExcerpt=filter.getQueryStatement() != null && filter.getQueryStatement().contains(QueryImpl.REP_EXCERPT);\n  for (  ScoreDoc doc : docs.scoreDocs) {\n    String excerpt=null;\n    if (addExcerpt) {\n      excerpt=getExcerpt(indexNode,searcher,query,doc);\n    }\n    LuceneResultRow row=convertToRow(doc,searcher,excerpt);\n    if (row != null) {\n      queue.add(row);\n    }\n    lastDocToRecord=doc;\n  }\n  if (queue.isEmpty() && docs.scoreDocs.length > 0) {\n    lastDoc=lastDocToRecord;\n  }\n else {\n    break;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 182,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 2332,
                        "startLineNumber": 366,
                        "startColumnNumber": 24,
                        "endLineNumber": 406,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "while (true) {\n  if (lastDoc != null) {\n    LOG.debug(\"loading the next {} entries for query {}\",nextBatchSize,query);\n    if (sort == null) {\n      docs=searcher.searchAfter(lastDoc,query,nextBatchSize);\n    }\n else {\n      docs=searcher.searchAfter(lastDoc,query,nextBatchSize,sort);\n    }\n  }\n else {\n    LOG.debug(\"loading the first {} entries for query {}\",nextBatchSize,query);\n    if (sort == null) {\n      docs=searcher.search(query,nextBatchSize);\n    }\n else {\n      docs=searcher.search(query,nextBatchSize,sort);\n    }\n  }\n  PERF_LOGGER.end(start,-1,\"{} ...\",docs.scoreDocs.length);\n  nextBatchSize=(int)Math.min(nextBatchSize * 2L,100000);\n  boolean addExcerpt=filter.getQueryStatement() != null && filter.getQueryStatement().contains(QueryImpl.REP_EXCERPT);\n  for (  ScoreDoc doc : docs.scoreDocs) {\n    String excerpt=null;\n    if (addExcerpt) {\n      excerpt=getExcerpt(indexNode,searcher,query,doc);\n    }\n    LuceneResultRow row=convertToRow(doc,searcher,excerpt);\n    if (row != null) {\n      queue.add(row);\n    }\n    lastDocToRecord=doc;\n  }\n  if (queue.isEmpty() && docs.scoreDocs.length > 0) {\n    lastDoc=lastDocToRecord;\n  }\n else {\n    break;\n  }\n}\n",
                    "nodeType": "WhileStatement",
                    "astNodeNumber": 184,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 2858,
                        "startLineNumber": 353,
                        "startColumnNumber": 81,
                        "endLineNumber": 407,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  Query query=(Query)luceneRequestFacade.getLuceneRequest();\n  CustomScoreQuery customScoreQuery=getCustomScoreQuery(plan,query);\n  if (customScoreQuery != null) {\n    query=customScoreQuery;\n  }\n  checkForIndexVersionChange(searcher);\n  TopDocs docs;\n  long start=PERF_LOGGER.start();\n  while (true) {\n    if (lastDoc != null) {\n      LOG.debug(\"loading the next {} entries for query {}\",nextBatchSize,query);\n      if (sort == null) {\n        docs=searcher.searchAfter(lastDoc,query,nextBatchSize);\n      }\n else {\n        docs=searcher.searchAfter(lastDoc,query,nextBatchSize,sort);\n      }\n    }\n else {\n      LOG.debug(\"loading the first {} entries for query {}\",nextBatchSize,query);\n      if (sort == null) {\n        docs=searcher.search(query,nextBatchSize);\n      }\n else {\n        docs=searcher.search(query,nextBatchSize,sort);\n      }\n    }\n    PERF_LOGGER.end(start,-1,\"{} ...\",docs.scoreDocs.length);\n    nextBatchSize=(int)Math.min(nextBatchSize * 2L,100000);\n    boolean addExcerpt=filter.getQueryStatement() != null && filter.getQueryStatement().contains(QueryImpl.REP_EXCERPT);\n    for (    ScoreDoc doc : docs.scoreDocs) {\n      String excerpt=null;\n      if (addExcerpt) {\n        excerpt=getExcerpt(indexNode,searcher,query,doc);\n      }\n      LuceneResultRow row=convertToRow(doc,searcher,excerpt);\n      if (row != null) {\n        queue.add(row);\n      }\n      lastDocToRecord=doc;\n    }\n    if (queue.isEmpty() && docs.scoreDocs.length > 0) {\n      lastDoc=lastDocToRecord;\n    }\n else {\n      break;\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 230,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6075,
                        "startLineNumber": 353,
                        "startColumnNumber": 20,
                        "endLineNumber": 454,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (luceneRequestFacade.getLuceneRequest() instanceof Query) {\n  Query query=(Query)luceneRequestFacade.getLuceneRequest();\n  CustomScoreQuery customScoreQuery=getCustomScoreQuery(plan,query);\n  if (customScoreQuery != null) {\n    query=customScoreQuery;\n  }\n  checkForIndexVersionChange(searcher);\n  TopDocs docs;\n  long start=PERF_LOGGER.start();\n  while (true) {\n    if (lastDoc != null) {\n      LOG.debug(\"loading the next {} entries for query {}\",nextBatchSize,query);\n      if (sort == null) {\n        docs=searcher.searchAfter(lastDoc,query,nextBatchSize);\n      }\n else {\n        docs=searcher.searchAfter(lastDoc,query,nextBatchSize,sort);\n      }\n    }\n else {\n      LOG.debug(\"loading the first {} entries for query {}\",nextBatchSize,query);\n      if (sort == null) {\n        docs=searcher.search(query,nextBatchSize);\n      }\n else {\n        docs=searcher.search(query,nextBatchSize,sort);\n      }\n    }\n    PERF_LOGGER.end(start,-1,\"{} ...\",docs.scoreDocs.length);\n    nextBatchSize=(int)Math.min(nextBatchSize * 2L,100000);\n    boolean addExcerpt=filter.getQueryStatement() != null && filter.getQueryStatement().contains(QueryImpl.REP_EXCERPT);\n    for (    ScoreDoc doc : docs.scoreDocs) {\n      String excerpt=null;\n      if (addExcerpt) {\n        excerpt=getExcerpt(indexNode,searcher,query,doc);\n      }\n      LuceneResultRow row=convertToRow(doc,searcher,excerpt);\n      if (row != null) {\n        queue.add(row);\n      }\n      lastDocToRecord=doc;\n    }\n    if (queue.isEmpty() && docs.scoreDocs.length > 0) {\n      lastDoc=lastDocToRecord;\n    }\n else {\n      break;\n    }\n  }\n}\n else if (luceneRequestFacade.getLuceneRequest() instanceof SpellcheckHelper.SpellcheckQuery) {\n  String aclCheckField=indexNode.getDefinition().isFullTextEnabled() ? FieldNames.FULLTEXT : FieldNames.SPELLCHECK;\n  SpellcheckHelper.SpellcheckQuery spellcheckQuery=(SpellcheckHelper.SpellcheckQuery)luceneRequestFacade.getLuceneRequest();\n  SuggestWord[] suggestWords=SpellcheckHelper.getSpellcheck(spellcheckQuery);\n  QueryParser qp=new QueryParser(Version.LUCENE_47,aclCheckField,indexNode.getDefinition().getAnalyzer());\n  for (  SuggestWord suggestion : suggestWords) {\n    Query query=qp.createPhraseQuery(aclCheckField,suggestion.string);\n    TopDocs topDocs=searcher.search(query,100);\n    if (topDocs.totalHits > 0) {\n      for (      ScoreDoc doc : topDocs.scoreDocs) {\n        Document retrievedDoc=searcher.doc(doc.doc);\n        if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n          queue.add(new LuceneResultRow(suggestion.string));\n          break;\n        }\n      }\n    }\n  }\n  noDocs=true;\n}\n else if (luceneRequestFacade.getLuceneRequest() instanceof SuggestHelper.SuggestQuery) {\n  SuggestHelper.SuggestQuery suggestQuery=(SuggestHelper.SuggestQuery)luceneRequestFacade.getLuceneRequest();\n  List<Lookup.LookupResult> lookupResults=SuggestHelper.getSuggestions(indexNode.getLookup(),suggestQuery);\n  QueryParser qp=new QueryParser(Version.LUCENE_47,FieldNames.SUGGEST,indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer());\n  for (  Lookup.LookupResult suggestion : lookupResults) {\n    Query query=qp.parse(\"\\\"\" + suggestion.key.toString() + \"\\\"\");\n    TopDocs topDocs=searcher.search(query,100);\n    if (topDocs.totalHits > 0) {\n      for (      ScoreDoc doc : topDocs.scoreDocs) {\n        Document retrievedDoc=searcher.doc(doc.doc);\n        if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n          queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n          break;\n        }\n      }\n    }\n  }\n  noDocs=true;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 552,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 6298,
                        "startLineNumber": 350,
                        "startColumnNumber": 20,
                        "endLineNumber": 455,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  IndexSearcher searcher=indexNode.getSearcher();\n  LuceneRequestFacade luceneRequestFacade=getLuceneRequest(plan,searcher.getIndexReader());\n  if (luceneRequestFacade.getLuceneRequest() instanceof Query) {\n    Query query=(Query)luceneRequestFacade.getLuceneRequest();\n    CustomScoreQuery customScoreQuery=getCustomScoreQuery(plan,query);\n    if (customScoreQuery != null) {\n      query=customScoreQuery;\n    }\n    checkForIndexVersionChange(searcher);\n    TopDocs docs;\n    long start=PERF_LOGGER.start();\n    while (true) {\n      if (lastDoc != null) {\n        LOG.debug(\"loading the next {} entries for query {}\",nextBatchSize,query);\n        if (sort == null) {\n          docs=searcher.searchAfter(lastDoc,query,nextBatchSize);\n        }\n else {\n          docs=searcher.searchAfter(lastDoc,query,nextBatchSize,sort);\n        }\n      }\n else {\n        LOG.debug(\"loading the first {} entries for query {}\",nextBatchSize,query);\n        if (sort == null) {\n          docs=searcher.search(query,nextBatchSize);\n        }\n else {\n          docs=searcher.search(query,nextBatchSize,sort);\n        }\n      }\n      PERF_LOGGER.end(start,-1,\"{} ...\",docs.scoreDocs.length);\n      nextBatchSize=(int)Math.min(nextBatchSize * 2L,100000);\n      boolean addExcerpt=filter.getQueryStatement() != null && filter.getQueryStatement().contains(QueryImpl.REP_EXCERPT);\n      for (      ScoreDoc doc : docs.scoreDocs) {\n        String excerpt=null;\n        if (addExcerpt) {\n          excerpt=getExcerpt(indexNode,searcher,query,doc);\n        }\n        LuceneResultRow row=convertToRow(doc,searcher,excerpt);\n        if (row != null) {\n          queue.add(row);\n        }\n        lastDocToRecord=doc;\n      }\n      if (queue.isEmpty() && docs.scoreDocs.length > 0) {\n        lastDoc=lastDocToRecord;\n      }\n else {\n        break;\n      }\n    }\n  }\n else   if (luceneRequestFacade.getLuceneRequest() instanceof SpellcheckHelper.SpellcheckQuery) {\n    String aclCheckField=indexNode.getDefinition().isFullTextEnabled() ? FieldNames.FULLTEXT : FieldNames.SPELLCHECK;\n    SpellcheckHelper.SpellcheckQuery spellcheckQuery=(SpellcheckHelper.SpellcheckQuery)luceneRequestFacade.getLuceneRequest();\n    SuggestWord[] suggestWords=SpellcheckHelper.getSpellcheck(spellcheckQuery);\n    QueryParser qp=new QueryParser(Version.LUCENE_47,aclCheckField,indexNode.getDefinition().getAnalyzer());\n    for (    SuggestWord suggestion : suggestWords) {\n      Query query=qp.createPhraseQuery(aclCheckField,suggestion.string);\n      TopDocs topDocs=searcher.search(query,100);\n      if (topDocs.totalHits > 0) {\n        for (        ScoreDoc doc : topDocs.scoreDocs) {\n          Document retrievedDoc=searcher.doc(doc.doc);\n          if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n            queue.add(new LuceneResultRow(suggestion.string));\n            break;\n          }\n        }\n      }\n    }\n    noDocs=true;\n  }\n else   if (luceneRequestFacade.getLuceneRequest() instanceof SuggestHelper.SuggestQuery) {\n    SuggestHelper.SuggestQuery suggestQuery=(SuggestHelper.SuggestQuery)luceneRequestFacade.getLuceneRequest();\n    List<Lookup.LookupResult> lookupResults=SuggestHelper.getSuggestions(indexNode.getLookup(),suggestQuery);\n    QueryParser qp=new QueryParser(Version.LUCENE_47,FieldNames.SUGGEST,indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer());\n    for (    Lookup.LookupResult suggestion : lookupResults) {\n      Query query=qp.parse(\"\\\"\" + suggestion.key.toString() + \"\\\"\");\n      TopDocs topDocs=searcher.search(query,100);\n      if (topDocs.totalHits > 0) {\n        for (        ScoreDoc doc : topDocs.scoreDocs) {\n          Document retrievedDoc=searcher.doc(doc.doc);\n          if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n            queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n            break;\n          }\n        }\n      }\n    }\n    noDocs=true;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 572,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6494,
                        "startLineNumber": 350,
                        "startColumnNumber": 16,
                        "endLineNumber": 459,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "try {\n  IndexSearcher searcher=indexNode.getSearcher();\n  LuceneRequestFacade luceneRequestFacade=getLuceneRequest(plan,searcher.getIndexReader());\n  if (luceneRequestFacade.getLuceneRequest() instanceof Query) {\n    Query query=(Query)luceneRequestFacade.getLuceneRequest();\n    CustomScoreQuery customScoreQuery=getCustomScoreQuery(plan,query);\n    if (customScoreQuery != null) {\n      query=customScoreQuery;\n    }\n    checkForIndexVersionChange(searcher);\n    TopDocs docs;\n    long start=PERF_LOGGER.start();\n    while (true) {\n      if (lastDoc != null) {\n        LOG.debug(\"loading the next {} entries for query {}\",nextBatchSize,query);\n        if (sort == null) {\n          docs=searcher.searchAfter(lastDoc,query,nextBatchSize);\n        }\n else {\n          docs=searcher.searchAfter(lastDoc,query,nextBatchSize,sort);\n        }\n      }\n else {\n        LOG.debug(\"loading the first {} entries for query {}\",nextBatchSize,query);\n        if (sort == null) {\n          docs=searcher.search(query,nextBatchSize);\n        }\n else {\n          docs=searcher.search(query,nextBatchSize,sort);\n        }\n      }\n      PERF_LOGGER.end(start,-1,\"{} ...\",docs.scoreDocs.length);\n      nextBatchSize=(int)Math.min(nextBatchSize * 2L,100000);\n      boolean addExcerpt=filter.getQueryStatement() != null && filter.getQueryStatement().contains(QueryImpl.REP_EXCERPT);\n      for (      ScoreDoc doc : docs.scoreDocs) {\n        String excerpt=null;\n        if (addExcerpt) {\n          excerpt=getExcerpt(indexNode,searcher,query,doc);\n        }\n        LuceneResultRow row=convertToRow(doc,searcher,excerpt);\n        if (row != null) {\n          queue.add(row);\n        }\n        lastDocToRecord=doc;\n      }\n      if (queue.isEmpty() && docs.scoreDocs.length > 0) {\n        lastDoc=lastDocToRecord;\n      }\n else {\n        break;\n      }\n    }\n  }\n else   if (luceneRequestFacade.getLuceneRequest() instanceof SpellcheckHelper.SpellcheckQuery) {\n    String aclCheckField=indexNode.getDefinition().isFullTextEnabled() ? FieldNames.FULLTEXT : FieldNames.SPELLCHECK;\n    SpellcheckHelper.SpellcheckQuery spellcheckQuery=(SpellcheckHelper.SpellcheckQuery)luceneRequestFacade.getLuceneRequest();\n    SuggestWord[] suggestWords=SpellcheckHelper.getSpellcheck(spellcheckQuery);\n    QueryParser qp=new QueryParser(Version.LUCENE_47,aclCheckField,indexNode.getDefinition().getAnalyzer());\n    for (    SuggestWord suggestion : suggestWords) {\n      Query query=qp.createPhraseQuery(aclCheckField,suggestion.string);\n      TopDocs topDocs=searcher.search(query,100);\n      if (topDocs.totalHits > 0) {\n        for (        ScoreDoc doc : topDocs.scoreDocs) {\n          Document retrievedDoc=searcher.doc(doc.doc);\n          if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n            queue.add(new LuceneResultRow(suggestion.string));\n            break;\n          }\n        }\n      }\n    }\n    noDocs=true;\n  }\n else   if (luceneRequestFacade.getLuceneRequest() instanceof SuggestHelper.SuggestQuery) {\n    SuggestHelper.SuggestQuery suggestQuery=(SuggestHelper.SuggestQuery)luceneRequestFacade.getLuceneRequest();\n    List<Lookup.LookupResult> lookupResults=SuggestHelper.getSuggestions(indexNode.getLookup(),suggestQuery);\n    QueryParser qp=new QueryParser(Version.LUCENE_47,FieldNames.SUGGEST,indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer());\n    for (    Lookup.LookupResult suggestion : lookupResults) {\n      Query query=qp.parse(\"\\\"\" + suggestion.key.toString() + \"\\\"\");\n      TopDocs topDocs=searcher.search(query,100);\n      if (topDocs.totalHits > 0) {\n        for (        ScoreDoc doc : topDocs.scoreDocs) {\n          Document retrievedDoc=searcher.doc(doc.doc);\n          if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n            queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n            break;\n          }\n        }\n      }\n    }\n    noDocs=true;\n  }\n}\n catch (Exception e) {\n  LOG.warn(\"query via {} failed.\",LucenePropertyIndex.this,e);\n}\n finally {\n  indexNode.release();\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 592,
                    "astHeight": 20
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 6935,
                        "startLineNumber": 340,
                        "startColumnNumber": 39,
                        "endLineNumber": 466,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  if (noDocs) {\n    return false;\n  }\n  ScoreDoc lastDocToRecord=null;\n  final IndexNode indexNode=acquireIndexNode(plan);\n  checkState(indexNode != null);\n  try {\n    IndexSearcher searcher=indexNode.getSearcher();\n    LuceneRequestFacade luceneRequestFacade=getLuceneRequest(plan,searcher.getIndexReader());\n    if (luceneRequestFacade.getLuceneRequest() instanceof Query) {\n      Query query=(Query)luceneRequestFacade.getLuceneRequest();\n      CustomScoreQuery customScoreQuery=getCustomScoreQuery(plan,query);\n      if (customScoreQuery != null) {\n        query=customScoreQuery;\n      }\n      checkForIndexVersionChange(searcher);\n      TopDocs docs;\n      long start=PERF_LOGGER.start();\n      while (true) {\n        if (lastDoc != null) {\n          LOG.debug(\"loading the next {} entries for query {}\",nextBatchSize,query);\n          if (sort == null) {\n            docs=searcher.searchAfter(lastDoc,query,nextBatchSize);\n          }\n else {\n            docs=searcher.searchAfter(lastDoc,query,nextBatchSize,sort);\n          }\n        }\n else {\n          LOG.debug(\"loading the first {} entries for query {}\",nextBatchSize,query);\n          if (sort == null) {\n            docs=searcher.search(query,nextBatchSize);\n          }\n else {\n            docs=searcher.search(query,nextBatchSize,sort);\n          }\n        }\n        PERF_LOGGER.end(start,-1,\"{} ...\",docs.scoreDocs.length);\n        nextBatchSize=(int)Math.min(nextBatchSize * 2L,100000);\n        boolean addExcerpt=filter.getQueryStatement() != null && filter.getQueryStatement().contains(QueryImpl.REP_EXCERPT);\n        for (        ScoreDoc doc : docs.scoreDocs) {\n          String excerpt=null;\n          if (addExcerpt) {\n            excerpt=getExcerpt(indexNode,searcher,query,doc);\n          }\n          LuceneResultRow row=convertToRow(doc,searcher,excerpt);\n          if (row != null) {\n            queue.add(row);\n          }\n          lastDocToRecord=doc;\n        }\n        if (queue.isEmpty() && docs.scoreDocs.length > 0) {\n          lastDoc=lastDocToRecord;\n        }\n else {\n          break;\n        }\n      }\n    }\n else     if (luceneRequestFacade.getLuceneRequest() instanceof SpellcheckHelper.SpellcheckQuery) {\n      String aclCheckField=indexNode.getDefinition().isFullTextEnabled() ? FieldNames.FULLTEXT : FieldNames.SPELLCHECK;\n      SpellcheckHelper.SpellcheckQuery spellcheckQuery=(SpellcheckHelper.SpellcheckQuery)luceneRequestFacade.getLuceneRequest();\n      SuggestWord[] suggestWords=SpellcheckHelper.getSpellcheck(spellcheckQuery);\n      QueryParser qp=new QueryParser(Version.LUCENE_47,aclCheckField,indexNode.getDefinition().getAnalyzer());\n      for (      SuggestWord suggestion : suggestWords) {\n        Query query=qp.createPhraseQuery(aclCheckField,suggestion.string);\n        TopDocs topDocs=searcher.search(query,100);\n        if (topDocs.totalHits > 0) {\n          for (          ScoreDoc doc : topDocs.scoreDocs) {\n            Document retrievedDoc=searcher.doc(doc.doc);\n            if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n              queue.add(new LuceneResultRow(suggestion.string));\n              break;\n            }\n          }\n        }\n      }\n      noDocs=true;\n    }\n else     if (luceneRequestFacade.getLuceneRequest() instanceof SuggestHelper.SuggestQuery) {\n      SuggestHelper.SuggestQuery suggestQuery=(SuggestHelper.SuggestQuery)luceneRequestFacade.getLuceneRequest();\n      List<Lookup.LookupResult> lookupResults=SuggestHelper.getSuggestions(indexNode.getLookup(),suggestQuery);\n      QueryParser qp=new QueryParser(Version.LUCENE_47,FieldNames.SUGGEST,indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer());\n      for (      Lookup.LookupResult suggestion : lookupResults) {\n        Query query=qp.parse(\"\\\"\" + suggestion.key.toString() + \"\\\"\");\n        TopDocs topDocs=searcher.search(query,100);\n        if (topDocs.totalHits > 0) {\n          for (          ScoreDoc doc : topDocs.scoreDocs) {\n            Document retrievedDoc=searcher.doc(doc.doc);\n            if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n              queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n              break;\n            }\n          }\n        }\n      }\n      noDocs=true;\n    }\n  }\n catch (  Exception e) {\n    LOG.warn(\"query via {} failed.\",LucenePropertyIndex.this,e);\n  }\n finally {\n    indexNode.release();\n  }\n  if (lastDocToRecord != null) {\n    this.lastDoc=lastDocToRecord;\n  }\n  return !queue.isEmpty();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 635,
                    "astHeight": 21
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.AnonymousClassDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7101,
                        "startLineNumber": 336,
                        "startColumnNumber": 12,
                        "endLineNumber": 466,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "/** \n * Loads the lucene documents in batches\n * @return true if any document is loaded\n */\nprivate boolean loadDocs(){\n  if (noDocs) {\n    return false;\n  }\n  ScoreDoc lastDocToRecord=null;\n  final IndexNode indexNode=acquireIndexNode(plan);\n  checkState(indexNode != null);\n  try {\n    IndexSearcher searcher=indexNode.getSearcher();\n    LuceneRequestFacade luceneRequestFacade=getLuceneRequest(plan,searcher.getIndexReader());\n    if (luceneRequestFacade.getLuceneRequest() instanceof Query) {\n      Query query=(Query)luceneRequestFacade.getLuceneRequest();\n      CustomScoreQuery customScoreQuery=getCustomScoreQuery(plan,query);\n      if (customScoreQuery != null) {\n        query=customScoreQuery;\n      }\n      checkForIndexVersionChange(searcher);\n      TopDocs docs;\n      long start=PERF_LOGGER.start();\n      while (true) {\n        if (lastDoc != null) {\n          LOG.debug(\"loading the next {} entries for query {}\",nextBatchSize,query);\n          if (sort == null) {\n            docs=searcher.searchAfter(lastDoc,query,nextBatchSize);\n          }\n else {\n            docs=searcher.searchAfter(lastDoc,query,nextBatchSize,sort);\n          }\n        }\n else {\n          LOG.debug(\"loading the first {} entries for query {}\",nextBatchSize,query);\n          if (sort == null) {\n            docs=searcher.search(query,nextBatchSize);\n          }\n else {\n            docs=searcher.search(query,nextBatchSize,sort);\n          }\n        }\n        PERF_LOGGER.end(start,-1,\"{} ...\",docs.scoreDocs.length);\n        nextBatchSize=(int)Math.min(nextBatchSize * 2L,100000);\n        boolean addExcerpt=filter.getQueryStatement() != null && filter.getQueryStatement().contains(QueryImpl.REP_EXCERPT);\n        for (        ScoreDoc doc : docs.scoreDocs) {\n          String excerpt=null;\n          if (addExcerpt) {\n            excerpt=getExcerpt(indexNode,searcher,query,doc);\n          }\n          LuceneResultRow row=convertToRow(doc,searcher,excerpt);\n          if (row != null) {\n            queue.add(row);\n          }\n          lastDocToRecord=doc;\n        }\n        if (queue.isEmpty() && docs.scoreDocs.length > 0) {\n          lastDoc=lastDocToRecord;\n        }\n else {\n          break;\n        }\n      }\n    }\n else     if (luceneRequestFacade.getLuceneRequest() instanceof SpellcheckHelper.SpellcheckQuery) {\n      String aclCheckField=indexNode.getDefinition().isFullTextEnabled() ? FieldNames.FULLTEXT : FieldNames.SPELLCHECK;\n      SpellcheckHelper.SpellcheckQuery spellcheckQuery=(SpellcheckHelper.SpellcheckQuery)luceneRequestFacade.getLuceneRequest();\n      SuggestWord[] suggestWords=SpellcheckHelper.getSpellcheck(spellcheckQuery);\n      QueryParser qp=new QueryParser(Version.LUCENE_47,aclCheckField,indexNode.getDefinition().getAnalyzer());\n      for (      SuggestWord suggestion : suggestWords) {\n        Query query=qp.createPhraseQuery(aclCheckField,suggestion.string);\n        TopDocs topDocs=searcher.search(query,100);\n        if (topDocs.totalHits > 0) {\n          for (          ScoreDoc doc : topDocs.scoreDocs) {\n            Document retrievedDoc=searcher.doc(doc.doc);\n            if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n              queue.add(new LuceneResultRow(suggestion.string));\n              break;\n            }\n          }\n        }\n      }\n      noDocs=true;\n    }\n else     if (luceneRequestFacade.getLuceneRequest() instanceof SuggestHelper.SuggestQuery) {\n      SuggestHelper.SuggestQuery suggestQuery=(SuggestHelper.SuggestQuery)luceneRequestFacade.getLuceneRequest();\n      List<Lookup.LookupResult> lookupResults=SuggestHelper.getSuggestions(indexNode.getLookup(),suggestQuery);\n      QueryParser qp=new QueryParser(Version.LUCENE_47,FieldNames.SUGGEST,indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer());\n      for (      Lookup.LookupResult suggestion : lookupResults) {\n        Query query=qp.parse(\"\\\"\" + suggestion.key.toString() + \"\\\"\");\n        TopDocs topDocs=searcher.search(query,100);\n        if (topDocs.totalHits > 0) {\n          for (          ScoreDoc doc : topDocs.scoreDocs) {\n            Document retrievedDoc=searcher.doc(doc.doc);\n            if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n              queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n              break;\n            }\n          }\n        }\n      }\n      noDocs=true;\n    }\n  }\n catch (  Exception e) {\n    LOG.warn(\"query via {} failed.\",LucenePropertyIndex.this,e);\n  }\n finally {\n    indexNode.release();\n  }\n  if (lastDocToRecord != null) {\n    this.lastDoc=lastDocToRecord;\n  }\n  return !queue.isEmpty();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 640,
                    "astHeight": 22
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 44,
                    "startLineNumber": 399,
                    "startColumnNumber": 32,
                    "endLineNumber": 399,
                    "endColumnNumber": 76
                },
                "nodeContext": "queue.isEmpty() && docs.scoreDocs.length > 0",
                "nodeType": "InfixExpression",
                "astNodeNumber": 11,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "java.util.Deque<org.apache.jackrabbit.oak.plugins.index.lucene.LucenePropertyIndex.LuceneResultRow>"
        },
        {
            "nodeContext": "queue",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 5,
                "startLineNumber": 421,
                "startColumnNumber": 40,
                "endLineNumber": 421,
                "endColumnNumber": 45
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 49,
                        "startLineNumber": 421,
                        "startColumnNumber": 40,
                        "endLineNumber": 421,
                        "endColumnNumber": 89
                    },
                    "nodeContext": "queue.add(new LuceneResultRow(suggestion.string))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 50,
                        "startLineNumber": 421,
                        "startColumnNumber": 40,
                        "endLineNumber": 421,
                        "endColumnNumber": 90
                    },
                    "nodeContext": "queue.add(new LuceneResultRow(suggestion.string));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 10,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 177,
                        "startLineNumber": 420,
                        "startColumnNumber": 96,
                        "endLineNumber": 423,
                        "endColumnNumber": 37
                    },
                    "nodeContext": "{\n  queue.add(new LuceneResultRow(suggestion.string));\n  break;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 12,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 237,
                        "startLineNumber": 420,
                        "startColumnNumber": 36,
                        "endLineNumber": 423,
                        "endColumnNumber": 37
                    },
                    "nodeContext": "if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n  queue.add(new LuceneResultRow(suggestion.string));\n  break;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 22,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 392,
                        "startLineNumber": 418,
                        "startColumnNumber": 71,
                        "endLineNumber": 424,
                        "endColumnNumber": 33
                    },
                    "nodeContext": "{\n  Document retrievedDoc=searcher.doc(doc.doc);\n  if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n    queue.add(new LuceneResultRow(suggestion.string));\n    break;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 34,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 431,
                        "startLineNumber": 418,
                        "startColumnNumber": 32,
                        "endLineNumber": 424,
                        "endColumnNumber": 33
                    },
                    "nodeContext": "for (ScoreDoc doc : topDocs.scoreDocs) {\n  Document retrievedDoc=searcher.doc(doc.doc);\n  if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n    queue.add(new LuceneResultRow(suggestion.string));\n    break;\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 42,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 495,
                        "startLineNumber": 417,
                        "startColumnNumber": 55,
                        "endLineNumber": 425,
                        "endColumnNumber": 29
                    },
                    "nodeContext": "{\n  for (  ScoreDoc doc : topDocs.scoreDocs) {\n    Document retrievedDoc=searcher.doc(doc.doc);\n    if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n      queue.add(new LuceneResultRow(suggestion.string));\n      break;\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 43,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 522,
                        "startLineNumber": 417,
                        "startColumnNumber": 28,
                        "endLineNumber": 425,
                        "endColumnNumber": 29
                    },
                    "nodeContext": "if (topDocs.totalHits > 0) {\n  for (  ScoreDoc doc : topDocs.scoreDocs) {\n    Document retrievedDoc=searcher.doc(doc.doc);\n    if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n      queue.add(new LuceneResultRow(suggestion.string));\n      break;\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 49,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 751,
                        "startLineNumber": 414,
                        "startColumnNumber": 68,
                        "endLineNumber": 426,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "{\n  Query query=qp.createPhraseQuery(aclCheckField,suggestion.string);\n  TopDocs topDocs=searcher.search(query,100);\n  if (topDocs.totalHits > 0) {\n    for (    ScoreDoc doc : topDocs.scoreDocs) {\n      Document retrievedDoc=searcher.doc(doc.doc);\n      if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n        queue.add(new LuceneResultRow(suggestion.string));\n        break;\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 72,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 795,
                        "startLineNumber": 414,
                        "startColumnNumber": 24,
                        "endLineNumber": 426,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "for (SuggestWord suggestion : suggestWords) {\n  Query query=qp.createPhraseQuery(aclCheckField,suggestion.string);\n  TopDocs topDocs=searcher.search(query,100);\n  if (topDocs.totalHits > 0) {\n    for (    ScoreDoc doc : topDocs.scoreDocs) {\n      Document retrievedDoc=searcher.doc(doc.doc);\n      if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n        queue.add(new LuceneResultRow(suggestion.string));\n        break;\n      }\n    }\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 78,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1459,
                        "startLineNumber": 407,
                        "startColumnNumber": 115,
                        "endLineNumber": 429,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  String aclCheckField=indexNode.getDefinition().isFullTextEnabled() ? FieldNames.FULLTEXT : FieldNames.SPELLCHECK;\n  SpellcheckHelper.SpellcheckQuery spellcheckQuery=(SpellcheckHelper.SpellcheckQuery)luceneRequestFacade.getLuceneRequest();\n  SuggestWord[] suggestWords=SpellcheckHelper.getSpellcheck(spellcheckQuery);\n  QueryParser qp=new QueryParser(Version.LUCENE_47,aclCheckField,indexNode.getDefinition().getAnalyzer());\n  for (  SuggestWord suggestion : suggestWords) {\n    Query query=qp.createPhraseQuery(aclCheckField,suggestion.string);\n    TopDocs topDocs=searcher.search(query,100);\n    if (topDocs.totalHits > 0) {\n      for (      ScoreDoc doc : topDocs.scoreDocs) {\n        Document retrievedDoc=searcher.doc(doc.doc);\n        if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n          queue.add(new LuceneResultRow(suggestion.string));\n          break;\n        }\n      }\n    }\n  }\n  noDocs=true;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 143,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 3150,
                        "startLineNumber": 407,
                        "startColumnNumber": 27,
                        "endLineNumber": 454,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (luceneRequestFacade.getLuceneRequest() instanceof SpellcheckHelper.SpellcheckQuery) {\n  String aclCheckField=indexNode.getDefinition().isFullTextEnabled() ? FieldNames.FULLTEXT : FieldNames.SPELLCHECK;\n  SpellcheckHelper.SpellcheckQuery spellcheckQuery=(SpellcheckHelper.SpellcheckQuery)luceneRequestFacade.getLuceneRequest();\n  SuggestWord[] suggestWords=SpellcheckHelper.getSpellcheck(spellcheckQuery);\n  QueryParser qp=new QueryParser(Version.LUCENE_47,aclCheckField,indexNode.getDefinition().getAnalyzer());\n  for (  SuggestWord suggestion : suggestWords) {\n    Query query=qp.createPhraseQuery(aclCheckField,suggestion.string);\n    TopDocs topDocs=searcher.search(query,100);\n    if (topDocs.totalHits > 0) {\n      for (      ScoreDoc doc : topDocs.scoreDocs) {\n        Document retrievedDoc=searcher.doc(doc.doc);\n        if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n          queue.add(new LuceneResultRow(suggestion.string));\n          break;\n        }\n      }\n    }\n  }\n  noDocs=true;\n}\n else if (luceneRequestFacade.getLuceneRequest() instanceof SuggestHelper.SuggestQuery) {\n  SuggestHelper.SuggestQuery suggestQuery=(SuggestHelper.SuggestQuery)luceneRequestFacade.getLuceneRequest();\n  List<Lookup.LookupResult> lookupResults=SuggestHelper.getSuggestions(indexNode.getLookup(),suggestQuery);\n  QueryParser qp=new QueryParser(Version.LUCENE_47,FieldNames.SUGGEST,indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer());\n  for (  Lookup.LookupResult suggestion : lookupResults) {\n    Query query=qp.parse(\"\\\"\" + suggestion.key.toString() + \"\\\"\");\n    TopDocs topDocs=searcher.search(query,100);\n    if (topDocs.totalHits > 0) {\n      for (      ScoreDoc doc : topDocs.scoreDocs) {\n        Document retrievedDoc=searcher.doc(doc.doc);\n        if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n          queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n          break;\n        }\n      }\n    }\n  }\n  noDocs=true;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 315,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6075,
                        "startLineNumber": 353,
                        "startColumnNumber": 20,
                        "endLineNumber": 454,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (luceneRequestFacade.getLuceneRequest() instanceof Query) {\n  Query query=(Query)luceneRequestFacade.getLuceneRequest();\n  CustomScoreQuery customScoreQuery=getCustomScoreQuery(plan,query);\n  if (customScoreQuery != null) {\n    query=customScoreQuery;\n  }\n  checkForIndexVersionChange(searcher);\n  TopDocs docs;\n  long start=PERF_LOGGER.start();\n  while (true) {\n    if (lastDoc != null) {\n      LOG.debug(\"loading the next {} entries for query {}\",nextBatchSize,query);\n      if (sort == null) {\n        docs=searcher.searchAfter(lastDoc,query,nextBatchSize);\n      }\n else {\n        docs=searcher.searchAfter(lastDoc,query,nextBatchSize,sort);\n      }\n    }\n else {\n      LOG.debug(\"loading the first {} entries for query {}\",nextBatchSize,query);\n      if (sort == null) {\n        docs=searcher.search(query,nextBatchSize);\n      }\n else {\n        docs=searcher.search(query,nextBatchSize,sort);\n      }\n    }\n    PERF_LOGGER.end(start,-1,\"{} ...\",docs.scoreDocs.length);\n    nextBatchSize=(int)Math.min(nextBatchSize * 2L,100000);\n    boolean addExcerpt=filter.getQueryStatement() != null && filter.getQueryStatement().contains(QueryImpl.REP_EXCERPT);\n    for (    ScoreDoc doc : docs.scoreDocs) {\n      String excerpt=null;\n      if (addExcerpt) {\n        excerpt=getExcerpt(indexNode,searcher,query,doc);\n      }\n      LuceneResultRow row=convertToRow(doc,searcher,excerpt);\n      if (row != null) {\n        queue.add(row);\n      }\n      lastDocToRecord=doc;\n    }\n    if (queue.isEmpty() && docs.scoreDocs.length > 0) {\n      lastDoc=lastDocToRecord;\n    }\n else {\n      break;\n    }\n  }\n}\n else if (luceneRequestFacade.getLuceneRequest() instanceof SpellcheckHelper.SpellcheckQuery) {\n  String aclCheckField=indexNode.getDefinition().isFullTextEnabled() ? FieldNames.FULLTEXT : FieldNames.SPELLCHECK;\n  SpellcheckHelper.SpellcheckQuery spellcheckQuery=(SpellcheckHelper.SpellcheckQuery)luceneRequestFacade.getLuceneRequest();\n  SuggestWord[] suggestWords=SpellcheckHelper.getSpellcheck(spellcheckQuery);\n  QueryParser qp=new QueryParser(Version.LUCENE_47,aclCheckField,indexNode.getDefinition().getAnalyzer());\n  for (  SuggestWord suggestion : suggestWords) {\n    Query query=qp.createPhraseQuery(aclCheckField,suggestion.string);\n    TopDocs topDocs=searcher.search(query,100);\n    if (topDocs.totalHits > 0) {\n      for (      ScoreDoc doc : topDocs.scoreDocs) {\n        Document retrievedDoc=searcher.doc(doc.doc);\n        if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n          queue.add(new LuceneResultRow(suggestion.string));\n          break;\n        }\n      }\n    }\n  }\n  noDocs=true;\n}\n else if (luceneRequestFacade.getLuceneRequest() instanceof SuggestHelper.SuggestQuery) {\n  SuggestHelper.SuggestQuery suggestQuery=(SuggestHelper.SuggestQuery)luceneRequestFacade.getLuceneRequest();\n  List<Lookup.LookupResult> lookupResults=SuggestHelper.getSuggestions(indexNode.getLookup(),suggestQuery);\n  QueryParser qp=new QueryParser(Version.LUCENE_47,FieldNames.SUGGEST,indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer());\n  for (  Lookup.LookupResult suggestion : lookupResults) {\n    Query query=qp.parse(\"\\\"\" + suggestion.key.toString() + \"\\\"\");\n    TopDocs topDocs=searcher.search(query,100);\n    if (topDocs.totalHits > 0) {\n      for (      ScoreDoc doc : topDocs.scoreDocs) {\n        Document retrievedDoc=searcher.doc(doc.doc);\n        if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n          queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n          break;\n        }\n      }\n    }\n  }\n  noDocs=true;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 552,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 6298,
                        "startLineNumber": 350,
                        "startColumnNumber": 20,
                        "endLineNumber": 455,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  IndexSearcher searcher=indexNode.getSearcher();\n  LuceneRequestFacade luceneRequestFacade=getLuceneRequest(plan,searcher.getIndexReader());\n  if (luceneRequestFacade.getLuceneRequest() instanceof Query) {\n    Query query=(Query)luceneRequestFacade.getLuceneRequest();\n    CustomScoreQuery customScoreQuery=getCustomScoreQuery(plan,query);\n    if (customScoreQuery != null) {\n      query=customScoreQuery;\n    }\n    checkForIndexVersionChange(searcher);\n    TopDocs docs;\n    long start=PERF_LOGGER.start();\n    while (true) {\n      if (lastDoc != null) {\n        LOG.debug(\"loading the next {} entries for query {}\",nextBatchSize,query);\n        if (sort == null) {\n          docs=searcher.searchAfter(lastDoc,query,nextBatchSize);\n        }\n else {\n          docs=searcher.searchAfter(lastDoc,query,nextBatchSize,sort);\n        }\n      }\n else {\n        LOG.debug(\"loading the first {} entries for query {}\",nextBatchSize,query);\n        if (sort == null) {\n          docs=searcher.search(query,nextBatchSize);\n        }\n else {\n          docs=searcher.search(query,nextBatchSize,sort);\n        }\n      }\n      PERF_LOGGER.end(start,-1,\"{} ...\",docs.scoreDocs.length);\n      nextBatchSize=(int)Math.min(nextBatchSize * 2L,100000);\n      boolean addExcerpt=filter.getQueryStatement() != null && filter.getQueryStatement().contains(QueryImpl.REP_EXCERPT);\n      for (      ScoreDoc doc : docs.scoreDocs) {\n        String excerpt=null;\n        if (addExcerpt) {\n          excerpt=getExcerpt(indexNode,searcher,query,doc);\n        }\n        LuceneResultRow row=convertToRow(doc,searcher,excerpt);\n        if (row != null) {\n          queue.add(row);\n        }\n        lastDocToRecord=doc;\n      }\n      if (queue.isEmpty() && docs.scoreDocs.length > 0) {\n        lastDoc=lastDocToRecord;\n      }\n else {\n        break;\n      }\n    }\n  }\n else   if (luceneRequestFacade.getLuceneRequest() instanceof SpellcheckHelper.SpellcheckQuery) {\n    String aclCheckField=indexNode.getDefinition().isFullTextEnabled() ? FieldNames.FULLTEXT : FieldNames.SPELLCHECK;\n    SpellcheckHelper.SpellcheckQuery spellcheckQuery=(SpellcheckHelper.SpellcheckQuery)luceneRequestFacade.getLuceneRequest();\n    SuggestWord[] suggestWords=SpellcheckHelper.getSpellcheck(spellcheckQuery);\n    QueryParser qp=new QueryParser(Version.LUCENE_47,aclCheckField,indexNode.getDefinition().getAnalyzer());\n    for (    SuggestWord suggestion : suggestWords) {\n      Query query=qp.createPhraseQuery(aclCheckField,suggestion.string);\n      TopDocs topDocs=searcher.search(query,100);\n      if (topDocs.totalHits > 0) {\n        for (        ScoreDoc doc : topDocs.scoreDocs) {\n          Document retrievedDoc=searcher.doc(doc.doc);\n          if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n            queue.add(new LuceneResultRow(suggestion.string));\n            break;\n          }\n        }\n      }\n    }\n    noDocs=true;\n  }\n else   if (luceneRequestFacade.getLuceneRequest() instanceof SuggestHelper.SuggestQuery) {\n    SuggestHelper.SuggestQuery suggestQuery=(SuggestHelper.SuggestQuery)luceneRequestFacade.getLuceneRequest();\n    List<Lookup.LookupResult> lookupResults=SuggestHelper.getSuggestions(indexNode.getLookup(),suggestQuery);\n    QueryParser qp=new QueryParser(Version.LUCENE_47,FieldNames.SUGGEST,indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer());\n    for (    Lookup.LookupResult suggestion : lookupResults) {\n      Query query=qp.parse(\"\\\"\" + suggestion.key.toString() + \"\\\"\");\n      TopDocs topDocs=searcher.search(query,100);\n      if (topDocs.totalHits > 0) {\n        for (        ScoreDoc doc : topDocs.scoreDocs) {\n          Document retrievedDoc=searcher.doc(doc.doc);\n          if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n            queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n            break;\n          }\n        }\n      }\n    }\n    noDocs=true;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 572,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6494,
                        "startLineNumber": 350,
                        "startColumnNumber": 16,
                        "endLineNumber": 459,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "try {\n  IndexSearcher searcher=indexNode.getSearcher();\n  LuceneRequestFacade luceneRequestFacade=getLuceneRequest(plan,searcher.getIndexReader());\n  if (luceneRequestFacade.getLuceneRequest() instanceof Query) {\n    Query query=(Query)luceneRequestFacade.getLuceneRequest();\n    CustomScoreQuery customScoreQuery=getCustomScoreQuery(plan,query);\n    if (customScoreQuery != null) {\n      query=customScoreQuery;\n    }\n    checkForIndexVersionChange(searcher);\n    TopDocs docs;\n    long start=PERF_LOGGER.start();\n    while (true) {\n      if (lastDoc != null) {\n        LOG.debug(\"loading the next {} entries for query {}\",nextBatchSize,query);\n        if (sort == null) {\n          docs=searcher.searchAfter(lastDoc,query,nextBatchSize);\n        }\n else {\n          docs=searcher.searchAfter(lastDoc,query,nextBatchSize,sort);\n        }\n      }\n else {\n        LOG.debug(\"loading the first {} entries for query {}\",nextBatchSize,query);\n        if (sort == null) {\n          docs=searcher.search(query,nextBatchSize);\n        }\n else {\n          docs=searcher.search(query,nextBatchSize,sort);\n        }\n      }\n      PERF_LOGGER.end(start,-1,\"{} ...\",docs.scoreDocs.length);\n      nextBatchSize=(int)Math.min(nextBatchSize * 2L,100000);\n      boolean addExcerpt=filter.getQueryStatement() != null && filter.getQueryStatement().contains(QueryImpl.REP_EXCERPT);\n      for (      ScoreDoc doc : docs.scoreDocs) {\n        String excerpt=null;\n        if (addExcerpt) {\n          excerpt=getExcerpt(indexNode,searcher,query,doc);\n        }\n        LuceneResultRow row=convertToRow(doc,searcher,excerpt);\n        if (row != null) {\n          queue.add(row);\n        }\n        lastDocToRecord=doc;\n      }\n      if (queue.isEmpty() && docs.scoreDocs.length > 0) {\n        lastDoc=lastDocToRecord;\n      }\n else {\n        break;\n      }\n    }\n  }\n else   if (luceneRequestFacade.getLuceneRequest() instanceof SpellcheckHelper.SpellcheckQuery) {\n    String aclCheckField=indexNode.getDefinition().isFullTextEnabled() ? FieldNames.FULLTEXT : FieldNames.SPELLCHECK;\n    SpellcheckHelper.SpellcheckQuery spellcheckQuery=(SpellcheckHelper.SpellcheckQuery)luceneRequestFacade.getLuceneRequest();\n    SuggestWord[] suggestWords=SpellcheckHelper.getSpellcheck(spellcheckQuery);\n    QueryParser qp=new QueryParser(Version.LUCENE_47,aclCheckField,indexNode.getDefinition().getAnalyzer());\n    for (    SuggestWord suggestion : suggestWords) {\n      Query query=qp.createPhraseQuery(aclCheckField,suggestion.string);\n      TopDocs topDocs=searcher.search(query,100);\n      if (topDocs.totalHits > 0) {\n        for (        ScoreDoc doc : topDocs.scoreDocs) {\n          Document retrievedDoc=searcher.doc(doc.doc);\n          if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n            queue.add(new LuceneResultRow(suggestion.string));\n            break;\n          }\n        }\n      }\n    }\n    noDocs=true;\n  }\n else   if (luceneRequestFacade.getLuceneRequest() instanceof SuggestHelper.SuggestQuery) {\n    SuggestHelper.SuggestQuery suggestQuery=(SuggestHelper.SuggestQuery)luceneRequestFacade.getLuceneRequest();\n    List<Lookup.LookupResult> lookupResults=SuggestHelper.getSuggestions(indexNode.getLookup(),suggestQuery);\n    QueryParser qp=new QueryParser(Version.LUCENE_47,FieldNames.SUGGEST,indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer());\n    for (    Lookup.LookupResult suggestion : lookupResults) {\n      Query query=qp.parse(\"\\\"\" + suggestion.key.toString() + \"\\\"\");\n      TopDocs topDocs=searcher.search(query,100);\n      if (topDocs.totalHits > 0) {\n        for (        ScoreDoc doc : topDocs.scoreDocs) {\n          Document retrievedDoc=searcher.doc(doc.doc);\n          if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n            queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n            break;\n          }\n        }\n      }\n    }\n    noDocs=true;\n  }\n}\n catch (Exception e) {\n  LOG.warn(\"query via {} failed.\",LucenePropertyIndex.this,e);\n}\n finally {\n  indexNode.release();\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 592,
                    "astHeight": 20
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 6935,
                        "startLineNumber": 340,
                        "startColumnNumber": 39,
                        "endLineNumber": 466,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  if (noDocs) {\n    return false;\n  }\n  ScoreDoc lastDocToRecord=null;\n  final IndexNode indexNode=acquireIndexNode(plan);\n  checkState(indexNode != null);\n  try {\n    IndexSearcher searcher=indexNode.getSearcher();\n    LuceneRequestFacade luceneRequestFacade=getLuceneRequest(plan,searcher.getIndexReader());\n    if (luceneRequestFacade.getLuceneRequest() instanceof Query) {\n      Query query=(Query)luceneRequestFacade.getLuceneRequest();\n      CustomScoreQuery customScoreQuery=getCustomScoreQuery(plan,query);\n      if (customScoreQuery != null) {\n        query=customScoreQuery;\n      }\n      checkForIndexVersionChange(searcher);\n      TopDocs docs;\n      long start=PERF_LOGGER.start();\n      while (true) {\n        if (lastDoc != null) {\n          LOG.debug(\"loading the next {} entries for query {}\",nextBatchSize,query);\n          if (sort == null) {\n            docs=searcher.searchAfter(lastDoc,query,nextBatchSize);\n          }\n else {\n            docs=searcher.searchAfter(lastDoc,query,nextBatchSize,sort);\n          }\n        }\n else {\n          LOG.debug(\"loading the first {} entries for query {}\",nextBatchSize,query);\n          if (sort == null) {\n            docs=searcher.search(query,nextBatchSize);\n          }\n else {\n            docs=searcher.search(query,nextBatchSize,sort);\n          }\n        }\n        PERF_LOGGER.end(start,-1,\"{} ...\",docs.scoreDocs.length);\n        nextBatchSize=(int)Math.min(nextBatchSize * 2L,100000);\n        boolean addExcerpt=filter.getQueryStatement() != null && filter.getQueryStatement().contains(QueryImpl.REP_EXCERPT);\n        for (        ScoreDoc doc : docs.scoreDocs) {\n          String excerpt=null;\n          if (addExcerpt) {\n            excerpt=getExcerpt(indexNode,searcher,query,doc);\n          }\n          LuceneResultRow row=convertToRow(doc,searcher,excerpt);\n          if (row != null) {\n            queue.add(row);\n          }\n          lastDocToRecord=doc;\n        }\n        if (queue.isEmpty() && docs.scoreDocs.length > 0) {\n          lastDoc=lastDocToRecord;\n        }\n else {\n          break;\n        }\n      }\n    }\n else     if (luceneRequestFacade.getLuceneRequest() instanceof SpellcheckHelper.SpellcheckQuery) {\n      String aclCheckField=indexNode.getDefinition().isFullTextEnabled() ? FieldNames.FULLTEXT : FieldNames.SPELLCHECK;\n      SpellcheckHelper.SpellcheckQuery spellcheckQuery=(SpellcheckHelper.SpellcheckQuery)luceneRequestFacade.getLuceneRequest();\n      SuggestWord[] suggestWords=SpellcheckHelper.getSpellcheck(spellcheckQuery);\n      QueryParser qp=new QueryParser(Version.LUCENE_47,aclCheckField,indexNode.getDefinition().getAnalyzer());\n      for (      SuggestWord suggestion : suggestWords) {\n        Query query=qp.createPhraseQuery(aclCheckField,suggestion.string);\n        TopDocs topDocs=searcher.search(query,100);\n        if (topDocs.totalHits > 0) {\n          for (          ScoreDoc doc : topDocs.scoreDocs) {\n            Document retrievedDoc=searcher.doc(doc.doc);\n            if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n              queue.add(new LuceneResultRow(suggestion.string));\n              break;\n            }\n          }\n        }\n      }\n      noDocs=true;\n    }\n else     if (luceneRequestFacade.getLuceneRequest() instanceof SuggestHelper.SuggestQuery) {\n      SuggestHelper.SuggestQuery suggestQuery=(SuggestHelper.SuggestQuery)luceneRequestFacade.getLuceneRequest();\n      List<Lookup.LookupResult> lookupResults=SuggestHelper.getSuggestions(indexNode.getLookup(),suggestQuery);\n      QueryParser qp=new QueryParser(Version.LUCENE_47,FieldNames.SUGGEST,indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer());\n      for (      Lookup.LookupResult suggestion : lookupResults) {\n        Query query=qp.parse(\"\\\"\" + suggestion.key.toString() + \"\\\"\");\n        TopDocs topDocs=searcher.search(query,100);\n        if (topDocs.totalHits > 0) {\n          for (          ScoreDoc doc : topDocs.scoreDocs) {\n            Document retrievedDoc=searcher.doc(doc.doc);\n            if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n              queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n              break;\n            }\n          }\n        }\n      }\n      noDocs=true;\n    }\n  }\n catch (  Exception e) {\n    LOG.warn(\"query via {} failed.\",LucenePropertyIndex.this,e);\n  }\n finally {\n    indexNode.release();\n  }\n  if (lastDocToRecord != null) {\n    this.lastDoc=lastDocToRecord;\n  }\n  return !queue.isEmpty();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 635,
                    "astHeight": 21
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.AnonymousClassDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7101,
                        "startLineNumber": 336,
                        "startColumnNumber": 12,
                        "endLineNumber": 466,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "/** \n * Loads the lucene documents in batches\n * @return true if any document is loaded\n */\nprivate boolean loadDocs(){\n  if (noDocs) {\n    return false;\n  }\n  ScoreDoc lastDocToRecord=null;\n  final IndexNode indexNode=acquireIndexNode(plan);\n  checkState(indexNode != null);\n  try {\n    IndexSearcher searcher=indexNode.getSearcher();\n    LuceneRequestFacade luceneRequestFacade=getLuceneRequest(plan,searcher.getIndexReader());\n    if (luceneRequestFacade.getLuceneRequest() instanceof Query) {\n      Query query=(Query)luceneRequestFacade.getLuceneRequest();\n      CustomScoreQuery customScoreQuery=getCustomScoreQuery(plan,query);\n      if (customScoreQuery != null) {\n        query=customScoreQuery;\n      }\n      checkForIndexVersionChange(searcher);\n      TopDocs docs;\n      long start=PERF_LOGGER.start();\n      while (true) {\n        if (lastDoc != null) {\n          LOG.debug(\"loading the next {} entries for query {}\",nextBatchSize,query);\n          if (sort == null) {\n            docs=searcher.searchAfter(lastDoc,query,nextBatchSize);\n          }\n else {\n            docs=searcher.searchAfter(lastDoc,query,nextBatchSize,sort);\n          }\n        }\n else {\n          LOG.debug(\"loading the first {} entries for query {}\",nextBatchSize,query);\n          if (sort == null) {\n            docs=searcher.search(query,nextBatchSize);\n          }\n else {\n            docs=searcher.search(query,nextBatchSize,sort);\n          }\n        }\n        PERF_LOGGER.end(start,-1,\"{} ...\",docs.scoreDocs.length);\n        nextBatchSize=(int)Math.min(nextBatchSize * 2L,100000);\n        boolean addExcerpt=filter.getQueryStatement() != null && filter.getQueryStatement().contains(QueryImpl.REP_EXCERPT);\n        for (        ScoreDoc doc : docs.scoreDocs) {\n          String excerpt=null;\n          if (addExcerpt) {\n            excerpt=getExcerpt(indexNode,searcher,query,doc);\n          }\n          LuceneResultRow row=convertToRow(doc,searcher,excerpt);\n          if (row != null) {\n            queue.add(row);\n          }\n          lastDocToRecord=doc;\n        }\n        if (queue.isEmpty() && docs.scoreDocs.length > 0) {\n          lastDoc=lastDocToRecord;\n        }\n else {\n          break;\n        }\n      }\n    }\n else     if (luceneRequestFacade.getLuceneRequest() instanceof SpellcheckHelper.SpellcheckQuery) {\n      String aclCheckField=indexNode.getDefinition().isFullTextEnabled() ? FieldNames.FULLTEXT : FieldNames.SPELLCHECK;\n      SpellcheckHelper.SpellcheckQuery spellcheckQuery=(SpellcheckHelper.SpellcheckQuery)luceneRequestFacade.getLuceneRequest();\n      SuggestWord[] suggestWords=SpellcheckHelper.getSpellcheck(spellcheckQuery);\n      QueryParser qp=new QueryParser(Version.LUCENE_47,aclCheckField,indexNode.getDefinition().getAnalyzer());\n      for (      SuggestWord suggestion : suggestWords) {\n        Query query=qp.createPhraseQuery(aclCheckField,suggestion.string);\n        TopDocs topDocs=searcher.search(query,100);\n        if (topDocs.totalHits > 0) {\n          for (          ScoreDoc doc : topDocs.scoreDocs) {\n            Document retrievedDoc=searcher.doc(doc.doc);\n            if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n              queue.add(new LuceneResultRow(suggestion.string));\n              break;\n            }\n          }\n        }\n      }\n      noDocs=true;\n    }\n else     if (luceneRequestFacade.getLuceneRequest() instanceof SuggestHelper.SuggestQuery) {\n      SuggestHelper.SuggestQuery suggestQuery=(SuggestHelper.SuggestQuery)luceneRequestFacade.getLuceneRequest();\n      List<Lookup.LookupResult> lookupResults=SuggestHelper.getSuggestions(indexNode.getLookup(),suggestQuery);\n      QueryParser qp=new QueryParser(Version.LUCENE_47,FieldNames.SUGGEST,indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer());\n      for (      Lookup.LookupResult suggestion : lookupResults) {\n        Query query=qp.parse(\"\\\"\" + suggestion.key.toString() + \"\\\"\");\n        TopDocs topDocs=searcher.search(query,100);\n        if (topDocs.totalHits > 0) {\n          for (          ScoreDoc doc : topDocs.scoreDocs) {\n            Document retrievedDoc=searcher.doc(doc.doc);\n            if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n              queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n              break;\n            }\n          }\n        }\n      }\n      noDocs=true;\n    }\n  }\n catch (  Exception e) {\n    LOG.warn(\"query via {} failed.\",LucenePropertyIndex.this,e);\n  }\n finally {\n    indexNode.release();\n  }\n  if (lastDocToRecord != null) {\n    this.lastDoc=lastDocToRecord;\n  }\n  return !queue.isEmpty();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 640,
                    "astHeight": 22
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 50,
                    "startLineNumber": 421,
                    "startColumnNumber": 40,
                    "endLineNumber": 421,
                    "endColumnNumber": 90
                },
                "nodeContext": "queue.add(new LuceneResultRow(suggestion.string));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 10,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "java.util.Deque<org.apache.jackrabbit.oak.plugins.index.lucene.LucenePropertyIndex.LuceneResultRow>"
        },
        {
            "nodeContext": "queue",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 5,
                "startLineNumber": 446,
                "startColumnNumber": 40,
                "endLineNumber": 446,
                "endColumnNumber": 45
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 75,
                        "startLineNumber": 446,
                        "startColumnNumber": 40,
                        "endLineNumber": 446,
                        "endColumnNumber": 115
                    },
                    "nodeContext": "queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 14,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 76,
                        "startLineNumber": 446,
                        "startColumnNumber": 40,
                        "endLineNumber": 446,
                        "endColumnNumber": 116
                    },
                    "nodeContext": "queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 15,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 203,
                        "startLineNumber": 445,
                        "startColumnNumber": 96,
                        "endLineNumber": 448,
                        "endColumnNumber": 37
                    },
                    "nodeContext": "{\n  queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n  break;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 17,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 263,
                        "startLineNumber": 445,
                        "startColumnNumber": 36,
                        "endLineNumber": 448,
                        "endColumnNumber": 37
                    },
                    "nodeContext": "if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n  queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n  break;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 27,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 418,
                        "startLineNumber": 443,
                        "startColumnNumber": 71,
                        "endLineNumber": 449,
                        "endColumnNumber": 33
                    },
                    "nodeContext": "{\n  Document retrievedDoc=searcher.doc(doc.doc);\n  if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n    queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n    break;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 39,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 457,
                        "startLineNumber": 443,
                        "startColumnNumber": 32,
                        "endLineNumber": 449,
                        "endColumnNumber": 33
                    },
                    "nodeContext": "for (ScoreDoc doc : topDocs.scoreDocs) {\n  Document retrievedDoc=searcher.doc(doc.doc);\n  if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n    queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n    break;\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 47,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 521,
                        "startLineNumber": 442,
                        "startColumnNumber": 55,
                        "endLineNumber": 450,
                        "endColumnNumber": 29
                    },
                    "nodeContext": "{\n  for (  ScoreDoc doc : topDocs.scoreDocs) {\n    Document retrievedDoc=searcher.doc(doc.doc);\n    if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n      queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n      break;\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 48,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 548,
                        "startLineNumber": 442,
                        "startColumnNumber": 28,
                        "endLineNumber": 450,
                        "endColumnNumber": 29
                    },
                    "nodeContext": "if (topDocs.totalHits > 0) {\n  for (  ScoreDoc doc : topDocs.scoreDocs) {\n    Document retrievedDoc=searcher.doc(doc.doc);\n    if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n      queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n      break;\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 54,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 772,
                        "startLineNumber": 439,
                        "startColumnNumber": 77,
                        "endLineNumber": 451,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "{\n  Query query=qp.parse(\"\\\"\" + suggestion.key.toString() + \"\\\"\");\n  TopDocs topDocs=searcher.search(query,100);\n  if (topDocs.totalHits > 0) {\n    for (    ScoreDoc doc : topDocs.scoreDocs) {\n      Document retrievedDoc=searcher.doc(doc.doc);\n      if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n        queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n        break;\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 81,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 825,
                        "startLineNumber": 439,
                        "startColumnNumber": 24,
                        "endLineNumber": 451,
                        "endColumnNumber": 25
                    },
                    "nodeContext": "for (Lookup.LookupResult suggestion : lookupResults) {\n  Query query=qp.parse(\"\\\"\" + suggestion.key.toString() + \"\\\"\");\n  TopDocs topDocs=searcher.search(query,100);\n  if (topDocs.totalHits > 0) {\n    for (    ScoreDoc doc : topDocs.scoreDocs) {\n      Document retrievedDoc=searcher.doc(doc.doc);\n      if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n        queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n        break;\n      }\n    }\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 89,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1515,
                        "startLineNumber": 429,
                        "startColumnNumber": 109,
                        "endLineNumber": 454,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  SuggestHelper.SuggestQuery suggestQuery=(SuggestHelper.SuggestQuery)luceneRequestFacade.getLuceneRequest();\n  List<Lookup.LookupResult> lookupResults=SuggestHelper.getSuggestions(indexNode.getLookup(),suggestQuery);\n  QueryParser qp=new QueryParser(Version.LUCENE_47,FieldNames.SUGGEST,indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer());\n  for (  Lookup.LookupResult suggestion : lookupResults) {\n    Query query=qp.parse(\"\\\"\" + suggestion.key.toString() + \"\\\"\");\n    TopDocs topDocs=searcher.search(query,100);\n    if (topDocs.totalHits > 0) {\n      for (      ScoreDoc doc : topDocs.scoreDocs) {\n        Document retrievedDoc=searcher.doc(doc.doc);\n        if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n          queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n          break;\n        }\n      }\n    }\n  }\n  noDocs=true;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 154,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 1597,
                        "startLineNumber": 429,
                        "startColumnNumber": 27,
                        "endLineNumber": 454,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (luceneRequestFacade.getLuceneRequest() instanceof SuggestHelper.SuggestQuery) {\n  SuggestHelper.SuggestQuery suggestQuery=(SuggestHelper.SuggestQuery)luceneRequestFacade.getLuceneRequest();\n  List<Lookup.LookupResult> lookupResults=SuggestHelper.getSuggestions(indexNode.getLookup(),suggestQuery);\n  QueryParser qp=new QueryParser(Version.LUCENE_47,FieldNames.SUGGEST,indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer());\n  for (  Lookup.LookupResult suggestion : lookupResults) {\n    Query query=qp.parse(\"\\\"\" + suggestion.key.toString() + \"\\\"\");\n    TopDocs topDocs=searcher.search(query,100);\n    if (topDocs.totalHits > 0) {\n      for (      ScoreDoc doc : topDocs.scoreDocs) {\n        Document retrievedDoc=searcher.doc(doc.doc);\n        if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n          queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n          break;\n        }\n      }\n    }\n  }\n  noDocs=true;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 163,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 3150,
                        "startLineNumber": 407,
                        "startColumnNumber": 27,
                        "endLineNumber": 454,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (luceneRequestFacade.getLuceneRequest() instanceof SpellcheckHelper.SpellcheckQuery) {\n  String aclCheckField=indexNode.getDefinition().isFullTextEnabled() ? FieldNames.FULLTEXT : FieldNames.SPELLCHECK;\n  SpellcheckHelper.SpellcheckQuery spellcheckQuery=(SpellcheckHelper.SpellcheckQuery)luceneRequestFacade.getLuceneRequest();\n  SuggestWord[] suggestWords=SpellcheckHelper.getSpellcheck(spellcheckQuery);\n  QueryParser qp=new QueryParser(Version.LUCENE_47,aclCheckField,indexNode.getDefinition().getAnalyzer());\n  for (  SuggestWord suggestion : suggestWords) {\n    Query query=qp.createPhraseQuery(aclCheckField,suggestion.string);\n    TopDocs topDocs=searcher.search(query,100);\n    if (topDocs.totalHits > 0) {\n      for (      ScoreDoc doc : topDocs.scoreDocs) {\n        Document retrievedDoc=searcher.doc(doc.doc);\n        if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n          queue.add(new LuceneResultRow(suggestion.string));\n          break;\n        }\n      }\n    }\n  }\n  noDocs=true;\n}\n else if (luceneRequestFacade.getLuceneRequest() instanceof SuggestHelper.SuggestQuery) {\n  SuggestHelper.SuggestQuery suggestQuery=(SuggestHelper.SuggestQuery)luceneRequestFacade.getLuceneRequest();\n  List<Lookup.LookupResult> lookupResults=SuggestHelper.getSuggestions(indexNode.getLookup(),suggestQuery);\n  QueryParser qp=new QueryParser(Version.LUCENE_47,FieldNames.SUGGEST,indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer());\n  for (  Lookup.LookupResult suggestion : lookupResults) {\n    Query query=qp.parse(\"\\\"\" + suggestion.key.toString() + \"\\\"\");\n    TopDocs topDocs=searcher.search(query,100);\n    if (topDocs.totalHits > 0) {\n      for (      ScoreDoc doc : topDocs.scoreDocs) {\n        Document retrievedDoc=searcher.doc(doc.doc);\n        if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n          queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n          break;\n        }\n      }\n    }\n  }\n  noDocs=true;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 315,
                    "astHeight": 17
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6075,
                        "startLineNumber": 353,
                        "startColumnNumber": 20,
                        "endLineNumber": 454,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (luceneRequestFacade.getLuceneRequest() instanceof Query) {\n  Query query=(Query)luceneRequestFacade.getLuceneRequest();\n  CustomScoreQuery customScoreQuery=getCustomScoreQuery(plan,query);\n  if (customScoreQuery != null) {\n    query=customScoreQuery;\n  }\n  checkForIndexVersionChange(searcher);\n  TopDocs docs;\n  long start=PERF_LOGGER.start();\n  while (true) {\n    if (lastDoc != null) {\n      LOG.debug(\"loading the next {} entries for query {}\",nextBatchSize,query);\n      if (sort == null) {\n        docs=searcher.searchAfter(lastDoc,query,nextBatchSize);\n      }\n else {\n        docs=searcher.searchAfter(lastDoc,query,nextBatchSize,sort);\n      }\n    }\n else {\n      LOG.debug(\"loading the first {} entries for query {}\",nextBatchSize,query);\n      if (sort == null) {\n        docs=searcher.search(query,nextBatchSize);\n      }\n else {\n        docs=searcher.search(query,nextBatchSize,sort);\n      }\n    }\n    PERF_LOGGER.end(start,-1,\"{} ...\",docs.scoreDocs.length);\n    nextBatchSize=(int)Math.min(nextBatchSize * 2L,100000);\n    boolean addExcerpt=filter.getQueryStatement() != null && filter.getQueryStatement().contains(QueryImpl.REP_EXCERPT);\n    for (    ScoreDoc doc : docs.scoreDocs) {\n      String excerpt=null;\n      if (addExcerpt) {\n        excerpt=getExcerpt(indexNode,searcher,query,doc);\n      }\n      LuceneResultRow row=convertToRow(doc,searcher,excerpt);\n      if (row != null) {\n        queue.add(row);\n      }\n      lastDocToRecord=doc;\n    }\n    if (queue.isEmpty() && docs.scoreDocs.length > 0) {\n      lastDoc=lastDocToRecord;\n    }\n else {\n      break;\n    }\n  }\n}\n else if (luceneRequestFacade.getLuceneRequest() instanceof SpellcheckHelper.SpellcheckQuery) {\n  String aclCheckField=indexNode.getDefinition().isFullTextEnabled() ? FieldNames.FULLTEXT : FieldNames.SPELLCHECK;\n  SpellcheckHelper.SpellcheckQuery spellcheckQuery=(SpellcheckHelper.SpellcheckQuery)luceneRequestFacade.getLuceneRequest();\n  SuggestWord[] suggestWords=SpellcheckHelper.getSpellcheck(spellcheckQuery);\n  QueryParser qp=new QueryParser(Version.LUCENE_47,aclCheckField,indexNode.getDefinition().getAnalyzer());\n  for (  SuggestWord suggestion : suggestWords) {\n    Query query=qp.createPhraseQuery(aclCheckField,suggestion.string);\n    TopDocs topDocs=searcher.search(query,100);\n    if (topDocs.totalHits > 0) {\n      for (      ScoreDoc doc : topDocs.scoreDocs) {\n        Document retrievedDoc=searcher.doc(doc.doc);\n        if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n          queue.add(new LuceneResultRow(suggestion.string));\n          break;\n        }\n      }\n    }\n  }\n  noDocs=true;\n}\n else if (luceneRequestFacade.getLuceneRequest() instanceof SuggestHelper.SuggestQuery) {\n  SuggestHelper.SuggestQuery suggestQuery=(SuggestHelper.SuggestQuery)luceneRequestFacade.getLuceneRequest();\n  List<Lookup.LookupResult> lookupResults=SuggestHelper.getSuggestions(indexNode.getLookup(),suggestQuery);\n  QueryParser qp=new QueryParser(Version.LUCENE_47,FieldNames.SUGGEST,indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer());\n  for (  Lookup.LookupResult suggestion : lookupResults) {\n    Query query=qp.parse(\"\\\"\" + suggestion.key.toString() + \"\\\"\");\n    TopDocs topDocs=searcher.search(query,100);\n    if (topDocs.totalHits > 0) {\n      for (      ScoreDoc doc : topDocs.scoreDocs) {\n        Document retrievedDoc=searcher.doc(doc.doc);\n        if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n          queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n          break;\n        }\n      }\n    }\n  }\n  noDocs=true;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 552,
                    "astHeight": 18
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 6298,
                        "startLineNumber": 350,
                        "startColumnNumber": 20,
                        "endLineNumber": 455,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  IndexSearcher searcher=indexNode.getSearcher();\n  LuceneRequestFacade luceneRequestFacade=getLuceneRequest(plan,searcher.getIndexReader());\n  if (luceneRequestFacade.getLuceneRequest() instanceof Query) {\n    Query query=(Query)luceneRequestFacade.getLuceneRequest();\n    CustomScoreQuery customScoreQuery=getCustomScoreQuery(plan,query);\n    if (customScoreQuery != null) {\n      query=customScoreQuery;\n    }\n    checkForIndexVersionChange(searcher);\n    TopDocs docs;\n    long start=PERF_LOGGER.start();\n    while (true) {\n      if (lastDoc != null) {\n        LOG.debug(\"loading the next {} entries for query {}\",nextBatchSize,query);\n        if (sort == null) {\n          docs=searcher.searchAfter(lastDoc,query,nextBatchSize);\n        }\n else {\n          docs=searcher.searchAfter(lastDoc,query,nextBatchSize,sort);\n        }\n      }\n else {\n        LOG.debug(\"loading the first {} entries for query {}\",nextBatchSize,query);\n        if (sort == null) {\n          docs=searcher.search(query,nextBatchSize);\n        }\n else {\n          docs=searcher.search(query,nextBatchSize,sort);\n        }\n      }\n      PERF_LOGGER.end(start,-1,\"{} ...\",docs.scoreDocs.length);\n      nextBatchSize=(int)Math.min(nextBatchSize * 2L,100000);\n      boolean addExcerpt=filter.getQueryStatement() != null && filter.getQueryStatement().contains(QueryImpl.REP_EXCERPT);\n      for (      ScoreDoc doc : docs.scoreDocs) {\n        String excerpt=null;\n        if (addExcerpt) {\n          excerpt=getExcerpt(indexNode,searcher,query,doc);\n        }\n        LuceneResultRow row=convertToRow(doc,searcher,excerpt);\n        if (row != null) {\n          queue.add(row);\n        }\n        lastDocToRecord=doc;\n      }\n      if (queue.isEmpty() && docs.scoreDocs.length > 0) {\n        lastDoc=lastDocToRecord;\n      }\n else {\n        break;\n      }\n    }\n  }\n else   if (luceneRequestFacade.getLuceneRequest() instanceof SpellcheckHelper.SpellcheckQuery) {\n    String aclCheckField=indexNode.getDefinition().isFullTextEnabled() ? FieldNames.FULLTEXT : FieldNames.SPELLCHECK;\n    SpellcheckHelper.SpellcheckQuery spellcheckQuery=(SpellcheckHelper.SpellcheckQuery)luceneRequestFacade.getLuceneRequest();\n    SuggestWord[] suggestWords=SpellcheckHelper.getSpellcheck(spellcheckQuery);\n    QueryParser qp=new QueryParser(Version.LUCENE_47,aclCheckField,indexNode.getDefinition().getAnalyzer());\n    for (    SuggestWord suggestion : suggestWords) {\n      Query query=qp.createPhraseQuery(aclCheckField,suggestion.string);\n      TopDocs topDocs=searcher.search(query,100);\n      if (topDocs.totalHits > 0) {\n        for (        ScoreDoc doc : topDocs.scoreDocs) {\n          Document retrievedDoc=searcher.doc(doc.doc);\n          if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n            queue.add(new LuceneResultRow(suggestion.string));\n            break;\n          }\n        }\n      }\n    }\n    noDocs=true;\n  }\n else   if (luceneRequestFacade.getLuceneRequest() instanceof SuggestHelper.SuggestQuery) {\n    SuggestHelper.SuggestQuery suggestQuery=(SuggestHelper.SuggestQuery)luceneRequestFacade.getLuceneRequest();\n    List<Lookup.LookupResult> lookupResults=SuggestHelper.getSuggestions(indexNode.getLookup(),suggestQuery);\n    QueryParser qp=new QueryParser(Version.LUCENE_47,FieldNames.SUGGEST,indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer());\n    for (    Lookup.LookupResult suggestion : lookupResults) {\n      Query query=qp.parse(\"\\\"\" + suggestion.key.toString() + \"\\\"\");\n      TopDocs topDocs=searcher.search(query,100);\n      if (topDocs.totalHits > 0) {\n        for (        ScoreDoc doc : topDocs.scoreDocs) {\n          Document retrievedDoc=searcher.doc(doc.doc);\n          if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n            queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n            break;\n          }\n        }\n      }\n    }\n    noDocs=true;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 572,
                    "astHeight": 19
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 6494,
                        "startLineNumber": 350,
                        "startColumnNumber": 16,
                        "endLineNumber": 459,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "try {\n  IndexSearcher searcher=indexNode.getSearcher();\n  LuceneRequestFacade luceneRequestFacade=getLuceneRequest(plan,searcher.getIndexReader());\n  if (luceneRequestFacade.getLuceneRequest() instanceof Query) {\n    Query query=(Query)luceneRequestFacade.getLuceneRequest();\n    CustomScoreQuery customScoreQuery=getCustomScoreQuery(plan,query);\n    if (customScoreQuery != null) {\n      query=customScoreQuery;\n    }\n    checkForIndexVersionChange(searcher);\n    TopDocs docs;\n    long start=PERF_LOGGER.start();\n    while (true) {\n      if (lastDoc != null) {\n        LOG.debug(\"loading the next {} entries for query {}\",nextBatchSize,query);\n        if (sort == null) {\n          docs=searcher.searchAfter(lastDoc,query,nextBatchSize);\n        }\n else {\n          docs=searcher.searchAfter(lastDoc,query,nextBatchSize,sort);\n        }\n      }\n else {\n        LOG.debug(\"loading the first {} entries for query {}\",nextBatchSize,query);\n        if (sort == null) {\n          docs=searcher.search(query,nextBatchSize);\n        }\n else {\n          docs=searcher.search(query,nextBatchSize,sort);\n        }\n      }\n      PERF_LOGGER.end(start,-1,\"{} ...\",docs.scoreDocs.length);\n      nextBatchSize=(int)Math.min(nextBatchSize * 2L,100000);\n      boolean addExcerpt=filter.getQueryStatement() != null && filter.getQueryStatement().contains(QueryImpl.REP_EXCERPT);\n      for (      ScoreDoc doc : docs.scoreDocs) {\n        String excerpt=null;\n        if (addExcerpt) {\n          excerpt=getExcerpt(indexNode,searcher,query,doc);\n        }\n        LuceneResultRow row=convertToRow(doc,searcher,excerpt);\n        if (row != null) {\n          queue.add(row);\n        }\n        lastDocToRecord=doc;\n      }\n      if (queue.isEmpty() && docs.scoreDocs.length > 0) {\n        lastDoc=lastDocToRecord;\n      }\n else {\n        break;\n      }\n    }\n  }\n else   if (luceneRequestFacade.getLuceneRequest() instanceof SpellcheckHelper.SpellcheckQuery) {\n    String aclCheckField=indexNode.getDefinition().isFullTextEnabled() ? FieldNames.FULLTEXT : FieldNames.SPELLCHECK;\n    SpellcheckHelper.SpellcheckQuery spellcheckQuery=(SpellcheckHelper.SpellcheckQuery)luceneRequestFacade.getLuceneRequest();\n    SuggestWord[] suggestWords=SpellcheckHelper.getSpellcheck(spellcheckQuery);\n    QueryParser qp=new QueryParser(Version.LUCENE_47,aclCheckField,indexNode.getDefinition().getAnalyzer());\n    for (    SuggestWord suggestion : suggestWords) {\n      Query query=qp.createPhraseQuery(aclCheckField,suggestion.string);\n      TopDocs topDocs=searcher.search(query,100);\n      if (topDocs.totalHits > 0) {\n        for (        ScoreDoc doc : topDocs.scoreDocs) {\n          Document retrievedDoc=searcher.doc(doc.doc);\n          if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n            queue.add(new LuceneResultRow(suggestion.string));\n            break;\n          }\n        }\n      }\n    }\n    noDocs=true;\n  }\n else   if (luceneRequestFacade.getLuceneRequest() instanceof SuggestHelper.SuggestQuery) {\n    SuggestHelper.SuggestQuery suggestQuery=(SuggestHelper.SuggestQuery)luceneRequestFacade.getLuceneRequest();\n    List<Lookup.LookupResult> lookupResults=SuggestHelper.getSuggestions(indexNode.getLookup(),suggestQuery);\n    QueryParser qp=new QueryParser(Version.LUCENE_47,FieldNames.SUGGEST,indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer());\n    for (    Lookup.LookupResult suggestion : lookupResults) {\n      Query query=qp.parse(\"\\\"\" + suggestion.key.toString() + \"\\\"\");\n      TopDocs topDocs=searcher.search(query,100);\n      if (topDocs.totalHits > 0) {\n        for (        ScoreDoc doc : topDocs.scoreDocs) {\n          Document retrievedDoc=searcher.doc(doc.doc);\n          if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n            queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n            break;\n          }\n        }\n      }\n    }\n    noDocs=true;\n  }\n}\n catch (Exception e) {\n  LOG.warn(\"query via {} failed.\",LucenePropertyIndex.this,e);\n}\n finally {\n  indexNode.release();\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 592,
                    "astHeight": 20
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 6935,
                        "startLineNumber": 340,
                        "startColumnNumber": 39,
                        "endLineNumber": 466,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  if (noDocs) {\n    return false;\n  }\n  ScoreDoc lastDocToRecord=null;\n  final IndexNode indexNode=acquireIndexNode(plan);\n  checkState(indexNode != null);\n  try {\n    IndexSearcher searcher=indexNode.getSearcher();\n    LuceneRequestFacade luceneRequestFacade=getLuceneRequest(plan,searcher.getIndexReader());\n    if (luceneRequestFacade.getLuceneRequest() instanceof Query) {\n      Query query=(Query)luceneRequestFacade.getLuceneRequest();\n      CustomScoreQuery customScoreQuery=getCustomScoreQuery(plan,query);\n      if (customScoreQuery != null) {\n        query=customScoreQuery;\n      }\n      checkForIndexVersionChange(searcher);\n      TopDocs docs;\n      long start=PERF_LOGGER.start();\n      while (true) {\n        if (lastDoc != null) {\n          LOG.debug(\"loading the next {} entries for query {}\",nextBatchSize,query);\n          if (sort == null) {\n            docs=searcher.searchAfter(lastDoc,query,nextBatchSize);\n          }\n else {\n            docs=searcher.searchAfter(lastDoc,query,nextBatchSize,sort);\n          }\n        }\n else {\n          LOG.debug(\"loading the first {} entries for query {}\",nextBatchSize,query);\n          if (sort == null) {\n            docs=searcher.search(query,nextBatchSize);\n          }\n else {\n            docs=searcher.search(query,nextBatchSize,sort);\n          }\n        }\n        PERF_LOGGER.end(start,-1,\"{} ...\",docs.scoreDocs.length);\n        nextBatchSize=(int)Math.min(nextBatchSize * 2L,100000);\n        boolean addExcerpt=filter.getQueryStatement() != null && filter.getQueryStatement().contains(QueryImpl.REP_EXCERPT);\n        for (        ScoreDoc doc : docs.scoreDocs) {\n          String excerpt=null;\n          if (addExcerpt) {\n            excerpt=getExcerpt(indexNode,searcher,query,doc);\n          }\n          LuceneResultRow row=convertToRow(doc,searcher,excerpt);\n          if (row != null) {\n            queue.add(row);\n          }\n          lastDocToRecord=doc;\n        }\n        if (queue.isEmpty() && docs.scoreDocs.length > 0) {\n          lastDoc=lastDocToRecord;\n        }\n else {\n          break;\n        }\n      }\n    }\n else     if (luceneRequestFacade.getLuceneRequest() instanceof SpellcheckHelper.SpellcheckQuery) {\n      String aclCheckField=indexNode.getDefinition().isFullTextEnabled() ? FieldNames.FULLTEXT : FieldNames.SPELLCHECK;\n      SpellcheckHelper.SpellcheckQuery spellcheckQuery=(SpellcheckHelper.SpellcheckQuery)luceneRequestFacade.getLuceneRequest();\n      SuggestWord[] suggestWords=SpellcheckHelper.getSpellcheck(spellcheckQuery);\n      QueryParser qp=new QueryParser(Version.LUCENE_47,aclCheckField,indexNode.getDefinition().getAnalyzer());\n      for (      SuggestWord suggestion : suggestWords) {\n        Query query=qp.createPhraseQuery(aclCheckField,suggestion.string);\n        TopDocs topDocs=searcher.search(query,100);\n        if (topDocs.totalHits > 0) {\n          for (          ScoreDoc doc : topDocs.scoreDocs) {\n            Document retrievedDoc=searcher.doc(doc.doc);\n            if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n              queue.add(new LuceneResultRow(suggestion.string));\n              break;\n            }\n          }\n        }\n      }\n      noDocs=true;\n    }\n else     if (luceneRequestFacade.getLuceneRequest() instanceof SuggestHelper.SuggestQuery) {\n      SuggestHelper.SuggestQuery suggestQuery=(SuggestHelper.SuggestQuery)luceneRequestFacade.getLuceneRequest();\n      List<Lookup.LookupResult> lookupResults=SuggestHelper.getSuggestions(indexNode.getLookup(),suggestQuery);\n      QueryParser qp=new QueryParser(Version.LUCENE_47,FieldNames.SUGGEST,indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer());\n      for (      Lookup.LookupResult suggestion : lookupResults) {\n        Query query=qp.parse(\"\\\"\" + suggestion.key.toString() + \"\\\"\");\n        TopDocs topDocs=searcher.search(query,100);\n        if (topDocs.totalHits > 0) {\n          for (          ScoreDoc doc : topDocs.scoreDocs) {\n            Document retrievedDoc=searcher.doc(doc.doc);\n            if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n              queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n              break;\n            }\n          }\n        }\n      }\n      noDocs=true;\n    }\n  }\n catch (  Exception e) {\n    LOG.warn(\"query via {} failed.\",LucenePropertyIndex.this,e);\n  }\n finally {\n    indexNode.release();\n  }\n  if (lastDocToRecord != null) {\n    this.lastDoc=lastDocToRecord;\n  }\n  return !queue.isEmpty();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 635,
                    "astHeight": 21
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.AnonymousClassDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7101,
                        "startLineNumber": 336,
                        "startColumnNumber": 12,
                        "endLineNumber": 466,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "/** \n * Loads the lucene documents in batches\n * @return true if any document is loaded\n */\nprivate boolean loadDocs(){\n  if (noDocs) {\n    return false;\n  }\n  ScoreDoc lastDocToRecord=null;\n  final IndexNode indexNode=acquireIndexNode(plan);\n  checkState(indexNode != null);\n  try {\n    IndexSearcher searcher=indexNode.getSearcher();\n    LuceneRequestFacade luceneRequestFacade=getLuceneRequest(plan,searcher.getIndexReader());\n    if (luceneRequestFacade.getLuceneRequest() instanceof Query) {\n      Query query=(Query)luceneRequestFacade.getLuceneRequest();\n      CustomScoreQuery customScoreQuery=getCustomScoreQuery(plan,query);\n      if (customScoreQuery != null) {\n        query=customScoreQuery;\n      }\n      checkForIndexVersionChange(searcher);\n      TopDocs docs;\n      long start=PERF_LOGGER.start();\n      while (true) {\n        if (lastDoc != null) {\n          LOG.debug(\"loading the next {} entries for query {}\",nextBatchSize,query);\n          if (sort == null) {\n            docs=searcher.searchAfter(lastDoc,query,nextBatchSize);\n          }\n else {\n            docs=searcher.searchAfter(lastDoc,query,nextBatchSize,sort);\n          }\n        }\n else {\n          LOG.debug(\"loading the first {} entries for query {}\",nextBatchSize,query);\n          if (sort == null) {\n            docs=searcher.search(query,nextBatchSize);\n          }\n else {\n            docs=searcher.search(query,nextBatchSize,sort);\n          }\n        }\n        PERF_LOGGER.end(start,-1,\"{} ...\",docs.scoreDocs.length);\n        nextBatchSize=(int)Math.min(nextBatchSize * 2L,100000);\n        boolean addExcerpt=filter.getQueryStatement() != null && filter.getQueryStatement().contains(QueryImpl.REP_EXCERPT);\n        for (        ScoreDoc doc : docs.scoreDocs) {\n          String excerpt=null;\n          if (addExcerpt) {\n            excerpt=getExcerpt(indexNode,searcher,query,doc);\n          }\n          LuceneResultRow row=convertToRow(doc,searcher,excerpt);\n          if (row != null) {\n            queue.add(row);\n          }\n          lastDocToRecord=doc;\n        }\n        if (queue.isEmpty() && docs.scoreDocs.length > 0) {\n          lastDoc=lastDocToRecord;\n        }\n else {\n          break;\n        }\n      }\n    }\n else     if (luceneRequestFacade.getLuceneRequest() instanceof SpellcheckHelper.SpellcheckQuery) {\n      String aclCheckField=indexNode.getDefinition().isFullTextEnabled() ? FieldNames.FULLTEXT : FieldNames.SPELLCHECK;\n      SpellcheckHelper.SpellcheckQuery spellcheckQuery=(SpellcheckHelper.SpellcheckQuery)luceneRequestFacade.getLuceneRequest();\n      SuggestWord[] suggestWords=SpellcheckHelper.getSpellcheck(spellcheckQuery);\n      QueryParser qp=new QueryParser(Version.LUCENE_47,aclCheckField,indexNode.getDefinition().getAnalyzer());\n      for (      SuggestWord suggestion : suggestWords) {\n        Query query=qp.createPhraseQuery(aclCheckField,suggestion.string);\n        TopDocs topDocs=searcher.search(query,100);\n        if (topDocs.totalHits > 0) {\n          for (          ScoreDoc doc : topDocs.scoreDocs) {\n            Document retrievedDoc=searcher.doc(doc.doc);\n            if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n              queue.add(new LuceneResultRow(suggestion.string));\n              break;\n            }\n          }\n        }\n      }\n      noDocs=true;\n    }\n else     if (luceneRequestFacade.getLuceneRequest() instanceof SuggestHelper.SuggestQuery) {\n      SuggestHelper.SuggestQuery suggestQuery=(SuggestHelper.SuggestQuery)luceneRequestFacade.getLuceneRequest();\n      List<Lookup.LookupResult> lookupResults=SuggestHelper.getSuggestions(indexNode.getLookup(),suggestQuery);\n      QueryParser qp=new QueryParser(Version.LUCENE_47,FieldNames.SUGGEST,indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer());\n      for (      Lookup.LookupResult suggestion : lookupResults) {\n        Query query=qp.parse(\"\\\"\" + suggestion.key.toString() + \"\\\"\");\n        TopDocs topDocs=searcher.search(query,100);\n        if (topDocs.totalHits > 0) {\n          for (          ScoreDoc doc : topDocs.scoreDocs) {\n            Document retrievedDoc=searcher.doc(doc.doc);\n            if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n              queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n              break;\n            }\n          }\n        }\n      }\n      noDocs=true;\n    }\n  }\n catch (  Exception e) {\n    LOG.warn(\"query via {} failed.\",LucenePropertyIndex.this,e);\n  }\n finally {\n    indexNode.release();\n  }\n  if (lastDocToRecord != null) {\n    this.lastDoc=lastDocToRecord;\n  }\n  return !queue.isEmpty();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 640,
                    "astHeight": 22
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 76,
                    "startLineNumber": 446,
                    "startColumnNumber": 40,
                    "endLineNumber": 446,
                    "endColumnNumber": 116
                },
                "nodeContext": "queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 15,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "java.util.Deque<org.apache.jackrabbit.oak.plugins.index.lucene.LucenePropertyIndex.LuceneResultRow>"
        },
        {
            "nodeContext": "queue",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 5,
                "startLineNumber": 465,
                "startColumnNumber": 24,
                "endLineNumber": 465,
                "endColumnNumber": 29
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
                    "nodePosition": {
                        "charLength": 15,
                        "startLineNumber": 465,
                        "startColumnNumber": 24,
                        "endLineNumber": 465,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "queue.isEmpty()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
                    "nodePosition": {
                        "charLength": 16,
                        "startLineNumber": 465,
                        "startColumnNumber": 23,
                        "endLineNumber": 465,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "!queue.isEmpty()",
                    "nodeType": "PrefixExpression",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 24,
                        "startLineNumber": 465,
                        "startColumnNumber": 16,
                        "endLineNumber": 465,
                        "endColumnNumber": 40
                    },
                    "nodeContext": "return !queue.isEmpty();\n",
                    "nodeType": "ReturnStatement",
                    "astNodeNumber": 5,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 6935,
                        "startLineNumber": 340,
                        "startColumnNumber": 39,
                        "endLineNumber": 466,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  if (noDocs) {\n    return false;\n  }\n  ScoreDoc lastDocToRecord=null;\n  final IndexNode indexNode=acquireIndexNode(plan);\n  checkState(indexNode != null);\n  try {\n    IndexSearcher searcher=indexNode.getSearcher();\n    LuceneRequestFacade luceneRequestFacade=getLuceneRequest(plan,searcher.getIndexReader());\n    if (luceneRequestFacade.getLuceneRequest() instanceof Query) {\n      Query query=(Query)luceneRequestFacade.getLuceneRequest();\n      CustomScoreQuery customScoreQuery=getCustomScoreQuery(plan,query);\n      if (customScoreQuery != null) {\n        query=customScoreQuery;\n      }\n      checkForIndexVersionChange(searcher);\n      TopDocs docs;\n      long start=PERF_LOGGER.start();\n      while (true) {\n        if (lastDoc != null) {\n          LOG.debug(\"loading the next {} entries for query {}\",nextBatchSize,query);\n          if (sort == null) {\n            docs=searcher.searchAfter(lastDoc,query,nextBatchSize);\n          }\n else {\n            docs=searcher.searchAfter(lastDoc,query,nextBatchSize,sort);\n          }\n        }\n else {\n          LOG.debug(\"loading the first {} entries for query {}\",nextBatchSize,query);\n          if (sort == null) {\n            docs=searcher.search(query,nextBatchSize);\n          }\n else {\n            docs=searcher.search(query,nextBatchSize,sort);\n          }\n        }\n        PERF_LOGGER.end(start,-1,\"{} ...\",docs.scoreDocs.length);\n        nextBatchSize=(int)Math.min(nextBatchSize * 2L,100000);\n        boolean addExcerpt=filter.getQueryStatement() != null && filter.getQueryStatement().contains(QueryImpl.REP_EXCERPT);\n        for (        ScoreDoc doc : docs.scoreDocs) {\n          String excerpt=null;\n          if (addExcerpt) {\n            excerpt=getExcerpt(indexNode,searcher,query,doc);\n          }\n          LuceneResultRow row=convertToRow(doc,searcher,excerpt);\n          if (row != null) {\n            queue.add(row);\n          }\n          lastDocToRecord=doc;\n        }\n        if (queue.isEmpty() && docs.scoreDocs.length > 0) {\n          lastDoc=lastDocToRecord;\n        }\n else {\n          break;\n        }\n      }\n    }\n else     if (luceneRequestFacade.getLuceneRequest() instanceof SpellcheckHelper.SpellcheckQuery) {\n      String aclCheckField=indexNode.getDefinition().isFullTextEnabled() ? FieldNames.FULLTEXT : FieldNames.SPELLCHECK;\n      SpellcheckHelper.SpellcheckQuery spellcheckQuery=(SpellcheckHelper.SpellcheckQuery)luceneRequestFacade.getLuceneRequest();\n      SuggestWord[] suggestWords=SpellcheckHelper.getSpellcheck(spellcheckQuery);\n      QueryParser qp=new QueryParser(Version.LUCENE_47,aclCheckField,indexNode.getDefinition().getAnalyzer());\n      for (      SuggestWord suggestion : suggestWords) {\n        Query query=qp.createPhraseQuery(aclCheckField,suggestion.string);\n        TopDocs topDocs=searcher.search(query,100);\n        if (topDocs.totalHits > 0) {\n          for (          ScoreDoc doc : topDocs.scoreDocs) {\n            Document retrievedDoc=searcher.doc(doc.doc);\n            if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n              queue.add(new LuceneResultRow(suggestion.string));\n              break;\n            }\n          }\n        }\n      }\n      noDocs=true;\n    }\n else     if (luceneRequestFacade.getLuceneRequest() instanceof SuggestHelper.SuggestQuery) {\n      SuggestHelper.SuggestQuery suggestQuery=(SuggestHelper.SuggestQuery)luceneRequestFacade.getLuceneRequest();\n      List<Lookup.LookupResult> lookupResults=SuggestHelper.getSuggestions(indexNode.getLookup(),suggestQuery);\n      QueryParser qp=new QueryParser(Version.LUCENE_47,FieldNames.SUGGEST,indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer());\n      for (      Lookup.LookupResult suggestion : lookupResults) {\n        Query query=qp.parse(\"\\\"\" + suggestion.key.toString() + \"\\\"\");\n        TopDocs topDocs=searcher.search(query,100);\n        if (topDocs.totalHits > 0) {\n          for (          ScoreDoc doc : topDocs.scoreDocs) {\n            Document retrievedDoc=searcher.doc(doc.doc);\n            if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n              queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n              break;\n            }\n          }\n        }\n      }\n      noDocs=true;\n    }\n  }\n catch (  Exception e) {\n    LOG.warn(\"query via {} failed.\",LucenePropertyIndex.this,e);\n  }\n finally {\n    indexNode.release();\n  }\n  if (lastDocToRecord != null) {\n    this.lastDoc=lastDocToRecord;\n  }\n  return !queue.isEmpty();\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 635,
                    "astHeight": 21
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.AnonymousClassDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 7101,
                        "startLineNumber": 336,
                        "startColumnNumber": 12,
                        "endLineNumber": 466,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "/** \n * Loads the lucene documents in batches\n * @return true if any document is loaded\n */\nprivate boolean loadDocs(){\n  if (noDocs) {\n    return false;\n  }\n  ScoreDoc lastDocToRecord=null;\n  final IndexNode indexNode=acquireIndexNode(plan);\n  checkState(indexNode != null);\n  try {\n    IndexSearcher searcher=indexNode.getSearcher();\n    LuceneRequestFacade luceneRequestFacade=getLuceneRequest(plan,searcher.getIndexReader());\n    if (luceneRequestFacade.getLuceneRequest() instanceof Query) {\n      Query query=(Query)luceneRequestFacade.getLuceneRequest();\n      CustomScoreQuery customScoreQuery=getCustomScoreQuery(plan,query);\n      if (customScoreQuery != null) {\n        query=customScoreQuery;\n      }\n      checkForIndexVersionChange(searcher);\n      TopDocs docs;\n      long start=PERF_LOGGER.start();\n      while (true) {\n        if (lastDoc != null) {\n          LOG.debug(\"loading the next {} entries for query {}\",nextBatchSize,query);\n          if (sort == null) {\n            docs=searcher.searchAfter(lastDoc,query,nextBatchSize);\n          }\n else {\n            docs=searcher.searchAfter(lastDoc,query,nextBatchSize,sort);\n          }\n        }\n else {\n          LOG.debug(\"loading the first {} entries for query {}\",nextBatchSize,query);\n          if (sort == null) {\n            docs=searcher.search(query,nextBatchSize);\n          }\n else {\n            docs=searcher.search(query,nextBatchSize,sort);\n          }\n        }\n        PERF_LOGGER.end(start,-1,\"{} ...\",docs.scoreDocs.length);\n        nextBatchSize=(int)Math.min(nextBatchSize * 2L,100000);\n        boolean addExcerpt=filter.getQueryStatement() != null && filter.getQueryStatement().contains(QueryImpl.REP_EXCERPT);\n        for (        ScoreDoc doc : docs.scoreDocs) {\n          String excerpt=null;\n          if (addExcerpt) {\n            excerpt=getExcerpt(indexNode,searcher,query,doc);\n          }\n          LuceneResultRow row=convertToRow(doc,searcher,excerpt);\n          if (row != null) {\n            queue.add(row);\n          }\n          lastDocToRecord=doc;\n        }\n        if (queue.isEmpty() && docs.scoreDocs.length > 0) {\n          lastDoc=lastDocToRecord;\n        }\n else {\n          break;\n        }\n      }\n    }\n else     if (luceneRequestFacade.getLuceneRequest() instanceof SpellcheckHelper.SpellcheckQuery) {\n      String aclCheckField=indexNode.getDefinition().isFullTextEnabled() ? FieldNames.FULLTEXT : FieldNames.SPELLCHECK;\n      SpellcheckHelper.SpellcheckQuery spellcheckQuery=(SpellcheckHelper.SpellcheckQuery)luceneRequestFacade.getLuceneRequest();\n      SuggestWord[] suggestWords=SpellcheckHelper.getSpellcheck(spellcheckQuery);\n      QueryParser qp=new QueryParser(Version.LUCENE_47,aclCheckField,indexNode.getDefinition().getAnalyzer());\n      for (      SuggestWord suggestion : suggestWords) {\n        Query query=qp.createPhraseQuery(aclCheckField,suggestion.string);\n        TopDocs topDocs=searcher.search(query,100);\n        if (topDocs.totalHits > 0) {\n          for (          ScoreDoc doc : topDocs.scoreDocs) {\n            Document retrievedDoc=searcher.doc(doc.doc);\n            if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n              queue.add(new LuceneResultRow(suggestion.string));\n              break;\n            }\n          }\n        }\n      }\n      noDocs=true;\n    }\n else     if (luceneRequestFacade.getLuceneRequest() instanceof SuggestHelper.SuggestQuery) {\n      SuggestHelper.SuggestQuery suggestQuery=(SuggestHelper.SuggestQuery)luceneRequestFacade.getLuceneRequest();\n      List<Lookup.LookupResult> lookupResults=SuggestHelper.getSuggestions(indexNode.getLookup(),suggestQuery);\n      QueryParser qp=new QueryParser(Version.LUCENE_47,FieldNames.SUGGEST,indexNode.getDefinition().isSuggestAnalyzed() ? indexNode.getDefinition().getAnalyzer() : SuggestHelper.getAnalyzer());\n      for (      Lookup.LookupResult suggestion : lookupResults) {\n        Query query=qp.parse(\"\\\"\" + suggestion.key.toString() + \"\\\"\");\n        TopDocs topDocs=searcher.search(query,100);\n        if (topDocs.totalHits > 0) {\n          for (          ScoreDoc doc : topDocs.scoreDocs) {\n            Document retrievedDoc=searcher.doc(doc.doc);\n            if (filter.isAccessible(retrievedDoc.get(FieldNames.PATH))) {\n              queue.add(new LuceneResultRow(suggestion.key.toString(),suggestion.value));\n              break;\n            }\n          }\n        }\n      }\n      noDocs=true;\n    }\n  }\n catch (  Exception e) {\n    LOG.warn(\"query via {} failed.\",LucenePropertyIndex.this,e);\n  }\n finally {\n    indexNode.release();\n  }\n  if (lastDocToRecord != null) {\n    this.lastDoc=lastDocToRecord;\n  }\n  return !queue.isEmpty();\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 640,
                    "astHeight": 22
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 24,
                    "startLineNumber": 465,
                    "startColumnNumber": 16,
                    "endLineNumber": 465,
                    "endColumnNumber": 40
                },
                "nodeContext": "return !queue.isEmpty();\n",
                "nodeType": "ReturnStatement",
                "astNodeNumber": 5,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "java.util.Deque<org.apache.jackrabbit.oak.plugins.index.lucene.LucenePropertyIndex.LuceneResultRow>"
        }
    ],
    "positionList": [
        {
            "charLength": 5,
            "startLineNumber": 394,
            "startColumnNumber": 36,
            "endLineNumber": 394,
            "endColumnNumber": 41
        },
        {
            "charLength": 5,
            "startLineNumber": 399,
            "startColumnNumber": 32,
            "endLineNumber": 399,
            "endColumnNumber": 37
        },
        {
            "charLength": 5,
            "startLineNumber": 421,
            "startColumnNumber": 40,
            "endLineNumber": 421,
            "endColumnNumber": 45
        },
        {
            "charLength": 5,
            "startLineNumber": 446,
            "startColumnNumber": 40,
            "endLineNumber": 446,
            "endColumnNumber": 45
        },
        {
            "charLength": 5,
            "startLineNumber": 465,
            "startColumnNumber": 24,
            "endLineNumber": 465,
            "endColumnNumber": 29
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 9
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 9
        },
        {
            "firstKey": 0,
            "secondKey": 4,
            "layout": 12
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 1,
            "secondKey": 4,
            "layout": 9
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 12
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 12
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 11
        },
        {
            "firstKey": 2,
            "secondKey": 4,
            "layout": 15
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 13
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 13
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 12
        },
        {
            "firstKey": 3,
            "secondKey": 4,
            "layout": 16
        },
        {
            "firstKey": 4,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 3,
            "layout": 3
        }
    ]
}