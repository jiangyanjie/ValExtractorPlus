{
    "id": 179,
    "expression": "archive",
    "projectName": "commons-compress",
    "commitID": "e3ea7b6607e7c96b9e2b6813c05bfba887c8e226",
    "filePath": "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java",
    "occurrences": 6,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "archive",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 1091,
                "startColumnNumber": 20,
                "endLineNumber": 1091,
                "endColumnNumber": 27
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 22,
                        "startLineNumber": 1091,
                        "startColumnNumber": 20,
                        "endLineNumber": 1091,
                        "endColumnNumber": 42
                    },
                    "nodeContext": "archive.subStreamsInfo",
                    "nodeType": "QualifiedName",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 30,
                        "startLineNumber": 1091,
                        "startColumnNumber": 20,
                        "endLineNumber": 1091,
                        "endColumnNumber": 50
                    },
                    "nodeContext": "archive.subStreamsInfo == null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 160,
                        "startLineNumber": 1091,
                        "startColumnNumber": 16,
                        "endLineNumber": 1093,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (archive.subStreamsInfo == null) {\n  throw new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 12,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 621,
                        "startLineNumber": 1090,
                        "startColumnNumber": 42,
                        "endLineNumber": 1100,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  if (archive.subStreamsInfo == null) {\n    throw new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n  }\n  entryAtIndex.setDirectory(false);\n  entryAtIndex.setAntiItem(false);\n  entryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\n  entryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\n  entryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n  ++nonEmptyFileCounter;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 60,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 994,
                        "startLineNumber": 1090,
                        "startColumnNumber": 12,
                        "endLineNumber": 1106,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (entryAtIndex.hasStream()) {\n  if (archive.subStreamsInfo == null) {\n    throw new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n  }\n  entryAtIndex.setDirectory(false);\n  entryAtIndex.setAntiItem(false);\n  entryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\n  entryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\n  entryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n  ++nonEmptyFileCounter;\n}\n else {\n  entryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\n  entryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\n  entryAtIndex.setHasCrc(false);\n  entryAtIndex.setSize(0);\n  ++emptyFileCounter;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 103,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 1260,
                        "startLineNumber": 1084,
                        "startColumnNumber": 46,
                        "endLineNumber": 1107,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  if (entryAtIndex == null) {\n    continue;\n  }\n  entryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\n  if (entryAtIndex.hasStream()) {\n    if (archive.subStreamsInfo == null) {\n      throw new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n    }\n    entryAtIndex.setDirectory(false);\n    entryAtIndex.setAntiItem(false);\n    entryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\n    entryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\n    entryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n    ++nonEmptyFileCounter;\n  }\n else {\n    entryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\n    entryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\n    entryAtIndex.setHasCrc(false);\n    entryAtIndex.setSize(0);\n    ++emptyFileCounter;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 133,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1298,
                        "startLineNumber": 1084,
                        "startColumnNumber": 8,
                        "endLineNumber": 1107,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int i=0; i < numFilesInt; i++) {\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  if (entryAtIndex == null) {\n    continue;\n  }\n  entryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\n  if (entryAtIndex.hasStream()) {\n    if (archive.subStreamsInfo == null) {\n      throw new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n    }\n    entryAtIndex.setDirectory(false);\n    entryAtIndex.setAntiItem(false);\n    entryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\n    entryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\n    entryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n    ++nonEmptyFileCounter;\n  }\n else {\n    entryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\n    entryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\n    entryAtIndex.setHasCrc(false);\n    entryAtIndex.setSize(0);\n    ++emptyFileCounter;\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 144,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8924,
                        "startLineNumber": 937,
                        "startColumnNumber": 98,
                        "endLineNumber": 1116,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final long numFiles=readUint64(header);\n  assertFitsIntoInt(\"numFiles\",numFiles);\n  final int numFilesInt=(int)numFiles;\n  final Map<Integer,SevenZArchiveEntry> fileMap=new HashMap<>();\n  BitSet isEmptyStream=null;\n  BitSet isEmptyFile=null;\n  BitSet isAnti=null;\n  while (true) {\n    final int propertyType=getUnsignedByte(header);\n    if (propertyType == 0) {\n      break;\n    }\n    final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n        isEmptyStream=readBits(header,numFilesInt);\n        break;\n      }\ncase NID.kEmptyFile:{\n      if (isEmptyStream == null) {\n        throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n      }\n      isEmptyFile=readBits(header,isEmptyStream.cardinality());\n      break;\n    }\ncase NID.kAnti:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n    }\n    isAnti=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kName:{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\n  entryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\nint nonEmptyFileCounter=0;\nint emptyFileCounter=0;\nfor (int i=0; i < numFilesInt; i++) {\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nif (entryAtIndex == null) {\ncontinue;\n}\nentryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\nif (entryAtIndex.hasStream()) {\nif (archive.subStreamsInfo == null) {\nthrow new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n}\nentryAtIndex.setDirectory(false);\nentryAtIndex.setAntiItem(false);\nentryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\nentryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\nentryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n++nonEmptyFileCounter;\n}\n else {\nentryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\nentryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\nentryAtIndex.setHasCrc(false);\nentryAtIndex.setSize(0);\n++emptyFileCounter;\n}\n}\nfinal List<SevenZArchiveEntry> entries=new ArrayList<>();\nfor (final SevenZArchiveEntry e : fileMap.values()) {\nif (e != null) {\nentries.add(e);\n}\n}\narchive.files=entries.toArray(new SevenZArchiveEntry[0]);\ncalculateStreamMap(archive);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 878,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 9018,
                        "startLineNumber": 937,
                        "startColumnNumber": 4,
                        "endLineNumber": 1116,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void readFilesInfo(final ByteBuffer header,final Archive archive) throws IOException {\n  final long numFiles=readUint64(header);\n  assertFitsIntoInt(\"numFiles\",numFiles);\n  final int numFilesInt=(int)numFiles;\n  final Map<Integer,SevenZArchiveEntry> fileMap=new HashMap<>();\n  BitSet isEmptyStream=null;\n  BitSet isEmptyFile=null;\n  BitSet isAnti=null;\n  while (true) {\n    final int propertyType=getUnsignedByte(header);\n    if (propertyType == 0) {\n      break;\n    }\n    final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n        isEmptyStream=readBits(header,numFilesInt);\n        break;\n      }\ncase NID.kEmptyFile:{\n      if (isEmptyStream == null) {\n        throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n      }\n      isEmptyFile=readBits(header,isEmptyStream.cardinality());\n      break;\n    }\ncase NID.kAnti:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n    }\n    isAnti=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kName:{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\n  entryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\nint nonEmptyFileCounter=0;\nint emptyFileCounter=0;\nfor (int i=0; i < numFilesInt; i++) {\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nif (entryAtIndex == null) {\ncontinue;\n}\nentryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\nif (entryAtIndex.hasStream()) {\nif (archive.subStreamsInfo == null) {\nthrow new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n}\nentryAtIndex.setDirectory(false);\nentryAtIndex.setAntiItem(false);\nentryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\nentryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\nentryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n++nonEmptyFileCounter;\n}\n else {\nentryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\nentryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\nentryAtIndex.setHasCrc(false);\nentryAtIndex.setSize(0);\n++emptyFileCounter;\n}\n}\nfinal List<SevenZArchiveEntry> entries=new ArrayList<>();\nfor (final SevenZArchiveEntry e : fileMap.values()) {\nif (e != null) {\nentries.add(e);\n}\n}\narchive.files=entries.toArray(new SevenZArchiveEntry[0]);\ncalculateStreamMap(archive);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 894,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 30,
                    "startLineNumber": 1091,
                    "startColumnNumber": 20,
                    "endLineNumber": 1091,
                    "endColumnNumber": 50
                },
                "nodeContext": "archive.subStreamsInfo == null",
                "nodeType": "InfixExpression",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "org.apache.commons.compress.archivers.sevenz.Archive"
        },
        {
            "nodeContext": "archive",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 1096,
                "startColumnNumber": 39,
                "endLineNumber": 1096,
                "endColumnNumber": 46
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
                    "nodePosition": {
                        "charLength": 22,
                        "startLineNumber": 1096,
                        "startColumnNumber": 39,
                        "endLineNumber": 1096,
                        "endColumnNumber": 61
                    },
                    "nodeContext": "archive.subStreamsInfo",
                    "nodeType": "QualifiedName",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 29,
                        "startLineNumber": 1096,
                        "startColumnNumber": 39,
                        "endLineNumber": 1096,
                        "endColumnNumber": 68
                    },
                    "nodeContext": "archive.subStreamsInfo.hasCrc",
                    "nodeType": "QualifiedName",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 54,
                        "startLineNumber": 1096,
                        "startColumnNumber": 39,
                        "endLineNumber": 1096,
                        "endColumnNumber": 93
                    },
                    "nodeContext": "archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 78,
                        "startLineNumber": 1096,
                        "startColumnNumber": 16,
                        "endLineNumber": 1096,
                        "endColumnNumber": 94
                    },
                    "nodeContext": "entryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 11,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 79,
                        "startLineNumber": 1096,
                        "startColumnNumber": 16,
                        "endLineNumber": 1096,
                        "endColumnNumber": 95
                    },
                    "nodeContext": "entryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 12,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 621,
                        "startLineNumber": 1090,
                        "startColumnNumber": 42,
                        "endLineNumber": 1100,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  if (archive.subStreamsInfo == null) {\n    throw new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n  }\n  entryAtIndex.setDirectory(false);\n  entryAtIndex.setAntiItem(false);\n  entryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\n  entryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\n  entryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n  ++nonEmptyFileCounter;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 60,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 994,
                        "startLineNumber": 1090,
                        "startColumnNumber": 12,
                        "endLineNumber": 1106,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (entryAtIndex.hasStream()) {\n  if (archive.subStreamsInfo == null) {\n    throw new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n  }\n  entryAtIndex.setDirectory(false);\n  entryAtIndex.setAntiItem(false);\n  entryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\n  entryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\n  entryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n  ++nonEmptyFileCounter;\n}\n else {\n  entryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\n  entryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\n  entryAtIndex.setHasCrc(false);\n  entryAtIndex.setSize(0);\n  ++emptyFileCounter;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 103,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 1260,
                        "startLineNumber": 1084,
                        "startColumnNumber": 46,
                        "endLineNumber": 1107,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  if (entryAtIndex == null) {\n    continue;\n  }\n  entryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\n  if (entryAtIndex.hasStream()) {\n    if (archive.subStreamsInfo == null) {\n      throw new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n    }\n    entryAtIndex.setDirectory(false);\n    entryAtIndex.setAntiItem(false);\n    entryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\n    entryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\n    entryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n    ++nonEmptyFileCounter;\n  }\n else {\n    entryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\n    entryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\n    entryAtIndex.setHasCrc(false);\n    entryAtIndex.setSize(0);\n    ++emptyFileCounter;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 133,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1298,
                        "startLineNumber": 1084,
                        "startColumnNumber": 8,
                        "endLineNumber": 1107,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int i=0; i < numFilesInt; i++) {\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  if (entryAtIndex == null) {\n    continue;\n  }\n  entryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\n  if (entryAtIndex.hasStream()) {\n    if (archive.subStreamsInfo == null) {\n      throw new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n    }\n    entryAtIndex.setDirectory(false);\n    entryAtIndex.setAntiItem(false);\n    entryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\n    entryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\n    entryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n    ++nonEmptyFileCounter;\n  }\n else {\n    entryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\n    entryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\n    entryAtIndex.setHasCrc(false);\n    entryAtIndex.setSize(0);\n    ++emptyFileCounter;\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 144,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8924,
                        "startLineNumber": 937,
                        "startColumnNumber": 98,
                        "endLineNumber": 1116,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final long numFiles=readUint64(header);\n  assertFitsIntoInt(\"numFiles\",numFiles);\n  final int numFilesInt=(int)numFiles;\n  final Map<Integer,SevenZArchiveEntry> fileMap=new HashMap<>();\n  BitSet isEmptyStream=null;\n  BitSet isEmptyFile=null;\n  BitSet isAnti=null;\n  while (true) {\n    final int propertyType=getUnsignedByte(header);\n    if (propertyType == 0) {\n      break;\n    }\n    final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n        isEmptyStream=readBits(header,numFilesInt);\n        break;\n      }\ncase NID.kEmptyFile:{\n      if (isEmptyStream == null) {\n        throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n      }\n      isEmptyFile=readBits(header,isEmptyStream.cardinality());\n      break;\n    }\ncase NID.kAnti:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n    }\n    isAnti=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kName:{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\n  entryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\nint nonEmptyFileCounter=0;\nint emptyFileCounter=0;\nfor (int i=0; i < numFilesInt; i++) {\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nif (entryAtIndex == null) {\ncontinue;\n}\nentryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\nif (entryAtIndex.hasStream()) {\nif (archive.subStreamsInfo == null) {\nthrow new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n}\nentryAtIndex.setDirectory(false);\nentryAtIndex.setAntiItem(false);\nentryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\nentryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\nentryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n++nonEmptyFileCounter;\n}\n else {\nentryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\nentryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\nentryAtIndex.setHasCrc(false);\nentryAtIndex.setSize(0);\n++emptyFileCounter;\n}\n}\nfinal List<SevenZArchiveEntry> entries=new ArrayList<>();\nfor (final SevenZArchiveEntry e : fileMap.values()) {\nif (e != null) {\nentries.add(e);\n}\n}\narchive.files=entries.toArray(new SevenZArchiveEntry[0]);\ncalculateStreamMap(archive);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 878,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 9018,
                        "startLineNumber": 937,
                        "startColumnNumber": 4,
                        "endLineNumber": 1116,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void readFilesInfo(final ByteBuffer header,final Archive archive) throws IOException {\n  final long numFiles=readUint64(header);\n  assertFitsIntoInt(\"numFiles\",numFiles);\n  final int numFilesInt=(int)numFiles;\n  final Map<Integer,SevenZArchiveEntry> fileMap=new HashMap<>();\n  BitSet isEmptyStream=null;\n  BitSet isEmptyFile=null;\n  BitSet isAnti=null;\n  while (true) {\n    final int propertyType=getUnsignedByte(header);\n    if (propertyType == 0) {\n      break;\n    }\n    final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n        isEmptyStream=readBits(header,numFilesInt);\n        break;\n      }\ncase NID.kEmptyFile:{\n      if (isEmptyStream == null) {\n        throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n      }\n      isEmptyFile=readBits(header,isEmptyStream.cardinality());\n      break;\n    }\ncase NID.kAnti:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n    }\n    isAnti=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kName:{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\n  entryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\nint nonEmptyFileCounter=0;\nint emptyFileCounter=0;\nfor (int i=0; i < numFilesInt; i++) {\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nif (entryAtIndex == null) {\ncontinue;\n}\nentryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\nif (entryAtIndex.hasStream()) {\nif (archive.subStreamsInfo == null) {\nthrow new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n}\nentryAtIndex.setDirectory(false);\nentryAtIndex.setAntiItem(false);\nentryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\nentryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\nentryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n++nonEmptyFileCounter;\n}\n else {\nentryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\nentryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\nentryAtIndex.setHasCrc(false);\nentryAtIndex.setSize(0);\n++emptyFileCounter;\n}\n}\nfinal List<SevenZArchiveEntry> entries=new ArrayList<>();\nfor (final SevenZArchiveEntry e : fileMap.values()) {\nif (e != null) {\nentries.add(e);\n}\n}\narchive.files=entries.toArray(new SevenZArchiveEntry[0]);\ncalculateStreamMap(archive);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 894,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 79,
                    "startLineNumber": 1096,
                    "startColumnNumber": 16,
                    "endLineNumber": 1096,
                    "endColumnNumber": 95
                },
                "nodeContext": "entryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 12,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "org.apache.commons.compress.archivers.sevenz.Archive"
        },
        {
            "nodeContext": "archive",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 1097,
                "startColumnNumber": 41,
                "endLineNumber": 1097,
                "endColumnNumber": 48
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
                    "nodePosition": {
                        "charLength": 22,
                        "startLineNumber": 1097,
                        "startColumnNumber": 41,
                        "endLineNumber": 1097,
                        "endColumnNumber": 63
                    },
                    "nodeContext": "archive.subStreamsInfo",
                    "nodeType": "QualifiedName",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
                    "nodePosition": {
                        "charLength": 27,
                        "startLineNumber": 1097,
                        "startColumnNumber": 41,
                        "endLineNumber": 1097,
                        "endColumnNumber": 68
                    },
                    "nodeContext": "archive.subStreamsInfo.crcs",
                    "nodeType": "QualifiedName",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 48,
                        "startLineNumber": 1097,
                        "startColumnNumber": 41,
                        "endLineNumber": 1097,
                        "endColumnNumber": 89
                    },
                    "nodeContext": "archive.subStreamsInfo.crcs[nonEmptyFileCounter]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 74,
                        "startLineNumber": 1097,
                        "startColumnNumber": 16,
                        "endLineNumber": 1097,
                        "endColumnNumber": 90
                    },
                    "nodeContext": "entryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter])",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 10,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 75,
                        "startLineNumber": 1097,
                        "startColumnNumber": 16,
                        "endLineNumber": 1097,
                        "endColumnNumber": 91
                    },
                    "nodeContext": "entryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 11,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 621,
                        "startLineNumber": 1090,
                        "startColumnNumber": 42,
                        "endLineNumber": 1100,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  if (archive.subStreamsInfo == null) {\n    throw new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n  }\n  entryAtIndex.setDirectory(false);\n  entryAtIndex.setAntiItem(false);\n  entryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\n  entryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\n  entryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n  ++nonEmptyFileCounter;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 60,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 994,
                        "startLineNumber": 1090,
                        "startColumnNumber": 12,
                        "endLineNumber": 1106,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (entryAtIndex.hasStream()) {\n  if (archive.subStreamsInfo == null) {\n    throw new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n  }\n  entryAtIndex.setDirectory(false);\n  entryAtIndex.setAntiItem(false);\n  entryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\n  entryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\n  entryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n  ++nonEmptyFileCounter;\n}\n else {\n  entryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\n  entryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\n  entryAtIndex.setHasCrc(false);\n  entryAtIndex.setSize(0);\n  ++emptyFileCounter;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 103,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 1260,
                        "startLineNumber": 1084,
                        "startColumnNumber": 46,
                        "endLineNumber": 1107,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  if (entryAtIndex == null) {\n    continue;\n  }\n  entryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\n  if (entryAtIndex.hasStream()) {\n    if (archive.subStreamsInfo == null) {\n      throw new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n    }\n    entryAtIndex.setDirectory(false);\n    entryAtIndex.setAntiItem(false);\n    entryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\n    entryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\n    entryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n    ++nonEmptyFileCounter;\n  }\n else {\n    entryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\n    entryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\n    entryAtIndex.setHasCrc(false);\n    entryAtIndex.setSize(0);\n    ++emptyFileCounter;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 133,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1298,
                        "startLineNumber": 1084,
                        "startColumnNumber": 8,
                        "endLineNumber": 1107,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int i=0; i < numFilesInt; i++) {\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  if (entryAtIndex == null) {\n    continue;\n  }\n  entryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\n  if (entryAtIndex.hasStream()) {\n    if (archive.subStreamsInfo == null) {\n      throw new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n    }\n    entryAtIndex.setDirectory(false);\n    entryAtIndex.setAntiItem(false);\n    entryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\n    entryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\n    entryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n    ++nonEmptyFileCounter;\n  }\n else {\n    entryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\n    entryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\n    entryAtIndex.setHasCrc(false);\n    entryAtIndex.setSize(0);\n    ++emptyFileCounter;\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 144,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8924,
                        "startLineNumber": 937,
                        "startColumnNumber": 98,
                        "endLineNumber": 1116,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final long numFiles=readUint64(header);\n  assertFitsIntoInt(\"numFiles\",numFiles);\n  final int numFilesInt=(int)numFiles;\n  final Map<Integer,SevenZArchiveEntry> fileMap=new HashMap<>();\n  BitSet isEmptyStream=null;\n  BitSet isEmptyFile=null;\n  BitSet isAnti=null;\n  while (true) {\n    final int propertyType=getUnsignedByte(header);\n    if (propertyType == 0) {\n      break;\n    }\n    final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n        isEmptyStream=readBits(header,numFilesInt);\n        break;\n      }\ncase NID.kEmptyFile:{\n      if (isEmptyStream == null) {\n        throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n      }\n      isEmptyFile=readBits(header,isEmptyStream.cardinality());\n      break;\n    }\ncase NID.kAnti:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n    }\n    isAnti=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kName:{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\n  entryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\nint nonEmptyFileCounter=0;\nint emptyFileCounter=0;\nfor (int i=0; i < numFilesInt; i++) {\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nif (entryAtIndex == null) {\ncontinue;\n}\nentryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\nif (entryAtIndex.hasStream()) {\nif (archive.subStreamsInfo == null) {\nthrow new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n}\nentryAtIndex.setDirectory(false);\nentryAtIndex.setAntiItem(false);\nentryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\nentryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\nentryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n++nonEmptyFileCounter;\n}\n else {\nentryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\nentryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\nentryAtIndex.setHasCrc(false);\nentryAtIndex.setSize(0);\n++emptyFileCounter;\n}\n}\nfinal List<SevenZArchiveEntry> entries=new ArrayList<>();\nfor (final SevenZArchiveEntry e : fileMap.values()) {\nif (e != null) {\nentries.add(e);\n}\n}\narchive.files=entries.toArray(new SevenZArchiveEntry[0]);\ncalculateStreamMap(archive);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 878,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 9018,
                        "startLineNumber": 937,
                        "startColumnNumber": 4,
                        "endLineNumber": 1116,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void readFilesInfo(final ByteBuffer header,final Archive archive) throws IOException {\n  final long numFiles=readUint64(header);\n  assertFitsIntoInt(\"numFiles\",numFiles);\n  final int numFilesInt=(int)numFiles;\n  final Map<Integer,SevenZArchiveEntry> fileMap=new HashMap<>();\n  BitSet isEmptyStream=null;\n  BitSet isEmptyFile=null;\n  BitSet isAnti=null;\n  while (true) {\n    final int propertyType=getUnsignedByte(header);\n    if (propertyType == 0) {\n      break;\n    }\n    final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n        isEmptyStream=readBits(header,numFilesInt);\n        break;\n      }\ncase NID.kEmptyFile:{\n      if (isEmptyStream == null) {\n        throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n      }\n      isEmptyFile=readBits(header,isEmptyStream.cardinality());\n      break;\n    }\ncase NID.kAnti:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n    }\n    isAnti=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kName:{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\n  entryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\nint nonEmptyFileCounter=0;\nint emptyFileCounter=0;\nfor (int i=0; i < numFilesInt; i++) {\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nif (entryAtIndex == null) {\ncontinue;\n}\nentryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\nif (entryAtIndex.hasStream()) {\nif (archive.subStreamsInfo == null) {\nthrow new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n}\nentryAtIndex.setDirectory(false);\nentryAtIndex.setAntiItem(false);\nentryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\nentryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\nentryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n++nonEmptyFileCounter;\n}\n else {\nentryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\nentryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\nentryAtIndex.setHasCrc(false);\nentryAtIndex.setSize(0);\n++emptyFileCounter;\n}\n}\nfinal List<SevenZArchiveEntry> entries=new ArrayList<>();\nfor (final SevenZArchiveEntry e : fileMap.values()) {\nif (e != null) {\nentries.add(e);\n}\n}\narchive.files=entries.toArray(new SevenZArchiveEntry[0]);\ncalculateStreamMap(archive);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 894,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 75,
                    "startLineNumber": 1097,
                    "startColumnNumber": 16,
                    "endLineNumber": 1097,
                    "endColumnNumber": 91
                },
                "nodeContext": "entryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 11,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "org.apache.commons.compress.archivers.sevenz.Archive"
        },
        {
            "nodeContext": "archive",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 1098,
                "startColumnNumber": 37,
                "endLineNumber": 1098,
                "endColumnNumber": 44
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
                    "nodePosition": {
                        "charLength": 22,
                        "startLineNumber": 1098,
                        "startColumnNumber": 37,
                        "endLineNumber": 1098,
                        "endColumnNumber": 59
                    },
                    "nodeContext": "archive.subStreamsInfo",
                    "nodeType": "QualifiedName",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
                    "nodePosition": {
                        "charLength": 34,
                        "startLineNumber": 1098,
                        "startColumnNumber": 37,
                        "endLineNumber": 1098,
                        "endColumnNumber": 71
                    },
                    "nodeContext": "archive.subStreamsInfo.unpackSizes",
                    "nodeType": "QualifiedName",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 55,
                        "startLineNumber": 1098,
                        "startColumnNumber": 37,
                        "endLineNumber": 1098,
                        "endColumnNumber": 92
                    },
                    "nodeContext": "archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 77,
                        "startLineNumber": 1098,
                        "startColumnNumber": 16,
                        "endLineNumber": 1098,
                        "endColumnNumber": 93
                    },
                    "nodeContext": "entryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter])",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 10,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 78,
                        "startLineNumber": 1098,
                        "startColumnNumber": 16,
                        "endLineNumber": 1098,
                        "endColumnNumber": 94
                    },
                    "nodeContext": "entryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 11,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 621,
                        "startLineNumber": 1090,
                        "startColumnNumber": 42,
                        "endLineNumber": 1100,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  if (archive.subStreamsInfo == null) {\n    throw new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n  }\n  entryAtIndex.setDirectory(false);\n  entryAtIndex.setAntiItem(false);\n  entryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\n  entryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\n  entryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n  ++nonEmptyFileCounter;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 60,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 994,
                        "startLineNumber": 1090,
                        "startColumnNumber": 12,
                        "endLineNumber": 1106,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (entryAtIndex.hasStream()) {\n  if (archive.subStreamsInfo == null) {\n    throw new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n  }\n  entryAtIndex.setDirectory(false);\n  entryAtIndex.setAntiItem(false);\n  entryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\n  entryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\n  entryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n  ++nonEmptyFileCounter;\n}\n else {\n  entryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\n  entryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\n  entryAtIndex.setHasCrc(false);\n  entryAtIndex.setSize(0);\n  ++emptyFileCounter;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 103,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 1260,
                        "startLineNumber": 1084,
                        "startColumnNumber": 46,
                        "endLineNumber": 1107,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  if (entryAtIndex == null) {\n    continue;\n  }\n  entryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\n  if (entryAtIndex.hasStream()) {\n    if (archive.subStreamsInfo == null) {\n      throw new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n    }\n    entryAtIndex.setDirectory(false);\n    entryAtIndex.setAntiItem(false);\n    entryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\n    entryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\n    entryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n    ++nonEmptyFileCounter;\n  }\n else {\n    entryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\n    entryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\n    entryAtIndex.setHasCrc(false);\n    entryAtIndex.setSize(0);\n    ++emptyFileCounter;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 133,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1298,
                        "startLineNumber": 1084,
                        "startColumnNumber": 8,
                        "endLineNumber": 1107,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int i=0; i < numFilesInt; i++) {\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  if (entryAtIndex == null) {\n    continue;\n  }\n  entryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\n  if (entryAtIndex.hasStream()) {\n    if (archive.subStreamsInfo == null) {\n      throw new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n    }\n    entryAtIndex.setDirectory(false);\n    entryAtIndex.setAntiItem(false);\n    entryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\n    entryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\n    entryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n    ++nonEmptyFileCounter;\n  }\n else {\n    entryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\n    entryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\n    entryAtIndex.setHasCrc(false);\n    entryAtIndex.setSize(0);\n    ++emptyFileCounter;\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 144,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8924,
                        "startLineNumber": 937,
                        "startColumnNumber": 98,
                        "endLineNumber": 1116,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final long numFiles=readUint64(header);\n  assertFitsIntoInt(\"numFiles\",numFiles);\n  final int numFilesInt=(int)numFiles;\n  final Map<Integer,SevenZArchiveEntry> fileMap=new HashMap<>();\n  BitSet isEmptyStream=null;\n  BitSet isEmptyFile=null;\n  BitSet isAnti=null;\n  while (true) {\n    final int propertyType=getUnsignedByte(header);\n    if (propertyType == 0) {\n      break;\n    }\n    final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n        isEmptyStream=readBits(header,numFilesInt);\n        break;\n      }\ncase NID.kEmptyFile:{\n      if (isEmptyStream == null) {\n        throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n      }\n      isEmptyFile=readBits(header,isEmptyStream.cardinality());\n      break;\n    }\ncase NID.kAnti:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n    }\n    isAnti=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kName:{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\n  entryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\nint nonEmptyFileCounter=0;\nint emptyFileCounter=0;\nfor (int i=0; i < numFilesInt; i++) {\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nif (entryAtIndex == null) {\ncontinue;\n}\nentryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\nif (entryAtIndex.hasStream()) {\nif (archive.subStreamsInfo == null) {\nthrow new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n}\nentryAtIndex.setDirectory(false);\nentryAtIndex.setAntiItem(false);\nentryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\nentryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\nentryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n++nonEmptyFileCounter;\n}\n else {\nentryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\nentryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\nentryAtIndex.setHasCrc(false);\nentryAtIndex.setSize(0);\n++emptyFileCounter;\n}\n}\nfinal List<SevenZArchiveEntry> entries=new ArrayList<>();\nfor (final SevenZArchiveEntry e : fileMap.values()) {\nif (e != null) {\nentries.add(e);\n}\n}\narchive.files=entries.toArray(new SevenZArchiveEntry[0]);\ncalculateStreamMap(archive);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 878,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 9018,
                        "startLineNumber": 937,
                        "startColumnNumber": 4,
                        "endLineNumber": 1116,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void readFilesInfo(final ByteBuffer header,final Archive archive) throws IOException {\n  final long numFiles=readUint64(header);\n  assertFitsIntoInt(\"numFiles\",numFiles);\n  final int numFilesInt=(int)numFiles;\n  final Map<Integer,SevenZArchiveEntry> fileMap=new HashMap<>();\n  BitSet isEmptyStream=null;\n  BitSet isEmptyFile=null;\n  BitSet isAnti=null;\n  while (true) {\n    final int propertyType=getUnsignedByte(header);\n    if (propertyType == 0) {\n      break;\n    }\n    final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n        isEmptyStream=readBits(header,numFilesInt);\n        break;\n      }\ncase NID.kEmptyFile:{\n      if (isEmptyStream == null) {\n        throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n      }\n      isEmptyFile=readBits(header,isEmptyStream.cardinality());\n      break;\n    }\ncase NID.kAnti:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n    }\n    isAnti=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kName:{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\n  entryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\nint nonEmptyFileCounter=0;\nint emptyFileCounter=0;\nfor (int i=0; i < numFilesInt; i++) {\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nif (entryAtIndex == null) {\ncontinue;\n}\nentryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\nif (entryAtIndex.hasStream()) {\nif (archive.subStreamsInfo == null) {\nthrow new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n}\nentryAtIndex.setDirectory(false);\nentryAtIndex.setAntiItem(false);\nentryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\nentryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\nentryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n++nonEmptyFileCounter;\n}\n else {\nentryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\nentryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\nentryAtIndex.setHasCrc(false);\nentryAtIndex.setSize(0);\n++emptyFileCounter;\n}\n}\nfinal List<SevenZArchiveEntry> entries=new ArrayList<>();\nfor (final SevenZArchiveEntry e : fileMap.values()) {\nif (e != null) {\nentries.add(e);\n}\n}\narchive.files=entries.toArray(new SevenZArchiveEntry[0]);\ncalculateStreamMap(archive);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 894,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 78,
                    "startLineNumber": 1098,
                    "startColumnNumber": 16,
                    "endLineNumber": 1098,
                    "endColumnNumber": 94
                },
                "nodeContext": "entryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 11,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "org.apache.commons.compress.archivers.sevenz.Archive"
        },
        {
            "nodeContext": "archive",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 1114,
                "startColumnNumber": 8,
                "endLineNumber": 1114,
                "endColumnNumber": 15
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
                    "nodePosition": {
                        "charLength": 13,
                        "startLineNumber": 1114,
                        "startColumnNumber": 8,
                        "endLineNumber": 1114,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "archive.files",
                    "nodeType": "QualifiedName",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 58,
                        "startLineNumber": 1114,
                        "startColumnNumber": 8,
                        "endLineNumber": 1114,
                        "endColumnNumber": 66
                    },
                    "nodeContext": "archive.files=entries.toArray(new SevenZArchiveEntry[0])",
                    "nodeType": "Assignment",
                    "astNodeNumber": 13,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 59,
                        "startLineNumber": 1114,
                        "startColumnNumber": 8,
                        "endLineNumber": 1114,
                        "endColumnNumber": 67
                    },
                    "nodeContext": "archive.files=entries.toArray(new SevenZArchiveEntry[0]);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 14,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8924,
                        "startLineNumber": 937,
                        "startColumnNumber": 98,
                        "endLineNumber": 1116,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final long numFiles=readUint64(header);\n  assertFitsIntoInt(\"numFiles\",numFiles);\n  final int numFilesInt=(int)numFiles;\n  final Map<Integer,SevenZArchiveEntry> fileMap=new HashMap<>();\n  BitSet isEmptyStream=null;\n  BitSet isEmptyFile=null;\n  BitSet isAnti=null;\n  while (true) {\n    final int propertyType=getUnsignedByte(header);\n    if (propertyType == 0) {\n      break;\n    }\n    final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n        isEmptyStream=readBits(header,numFilesInt);\n        break;\n      }\ncase NID.kEmptyFile:{\n      if (isEmptyStream == null) {\n        throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n      }\n      isEmptyFile=readBits(header,isEmptyStream.cardinality());\n      break;\n    }\ncase NID.kAnti:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n    }\n    isAnti=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kName:{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\n  entryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\nint nonEmptyFileCounter=0;\nint emptyFileCounter=0;\nfor (int i=0; i < numFilesInt; i++) {\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nif (entryAtIndex == null) {\ncontinue;\n}\nentryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\nif (entryAtIndex.hasStream()) {\nif (archive.subStreamsInfo == null) {\nthrow new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n}\nentryAtIndex.setDirectory(false);\nentryAtIndex.setAntiItem(false);\nentryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\nentryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\nentryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n++nonEmptyFileCounter;\n}\n else {\nentryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\nentryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\nentryAtIndex.setHasCrc(false);\nentryAtIndex.setSize(0);\n++emptyFileCounter;\n}\n}\nfinal List<SevenZArchiveEntry> entries=new ArrayList<>();\nfor (final SevenZArchiveEntry e : fileMap.values()) {\nif (e != null) {\nentries.add(e);\n}\n}\narchive.files=entries.toArray(new SevenZArchiveEntry[0]);\ncalculateStreamMap(archive);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 878,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 9018,
                        "startLineNumber": 937,
                        "startColumnNumber": 4,
                        "endLineNumber": 1116,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void readFilesInfo(final ByteBuffer header,final Archive archive) throws IOException {\n  final long numFiles=readUint64(header);\n  assertFitsIntoInt(\"numFiles\",numFiles);\n  final int numFilesInt=(int)numFiles;\n  final Map<Integer,SevenZArchiveEntry> fileMap=new HashMap<>();\n  BitSet isEmptyStream=null;\n  BitSet isEmptyFile=null;\n  BitSet isAnti=null;\n  while (true) {\n    final int propertyType=getUnsignedByte(header);\n    if (propertyType == 0) {\n      break;\n    }\n    final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n        isEmptyStream=readBits(header,numFilesInt);\n        break;\n      }\ncase NID.kEmptyFile:{\n      if (isEmptyStream == null) {\n        throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n      }\n      isEmptyFile=readBits(header,isEmptyStream.cardinality());\n      break;\n    }\ncase NID.kAnti:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n    }\n    isAnti=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kName:{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\n  entryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\nint nonEmptyFileCounter=0;\nint emptyFileCounter=0;\nfor (int i=0; i < numFilesInt; i++) {\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nif (entryAtIndex == null) {\ncontinue;\n}\nentryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\nif (entryAtIndex.hasStream()) {\nif (archive.subStreamsInfo == null) {\nthrow new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n}\nentryAtIndex.setDirectory(false);\nentryAtIndex.setAntiItem(false);\nentryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\nentryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\nentryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n++nonEmptyFileCounter;\n}\n else {\nentryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\nentryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\nentryAtIndex.setHasCrc(false);\nentryAtIndex.setSize(0);\n++emptyFileCounter;\n}\n}\nfinal List<SevenZArchiveEntry> entries=new ArrayList<>();\nfor (final SevenZArchiveEntry e : fileMap.values()) {\nif (e != null) {\nentries.add(e);\n}\n}\narchive.files=entries.toArray(new SevenZArchiveEntry[0]);\ncalculateStreamMap(archive);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 894,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 59,
                    "startLineNumber": 1114,
                    "startColumnNumber": 8,
                    "endLineNumber": 1114,
                    "endColumnNumber": 67
                },
                "nodeContext": "archive.files=entries.toArray(new SevenZArchiveEntry[0]);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 14,
                "astHeight": 7
            },
            "tokenLength": 1,
            "type": "org.apache.commons.compress.archivers.sevenz.Archive"
        },
        {
            "nodeContext": "archive",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 7,
                "startLineNumber": 1115,
                "startColumnNumber": 27,
                "endLineNumber": 1115,
                "endColumnNumber": 34
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 27,
                        "startLineNumber": 1115,
                        "startColumnNumber": 8,
                        "endLineNumber": 1115,
                        "endColumnNumber": 35
                    },
                    "nodeContext": "calculateStreamMap(archive)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 28,
                        "startLineNumber": 1115,
                        "startColumnNumber": 8,
                        "endLineNumber": 1115,
                        "endColumnNumber": 36
                    },
                    "nodeContext": "calculateStreamMap(archive);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 8924,
                        "startLineNumber": 937,
                        "startColumnNumber": 98,
                        "endLineNumber": 1116,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final long numFiles=readUint64(header);\n  assertFitsIntoInt(\"numFiles\",numFiles);\n  final int numFilesInt=(int)numFiles;\n  final Map<Integer,SevenZArchiveEntry> fileMap=new HashMap<>();\n  BitSet isEmptyStream=null;\n  BitSet isEmptyFile=null;\n  BitSet isAnti=null;\n  while (true) {\n    final int propertyType=getUnsignedByte(header);\n    if (propertyType == 0) {\n      break;\n    }\n    final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n        isEmptyStream=readBits(header,numFilesInt);\n        break;\n      }\ncase NID.kEmptyFile:{\n      if (isEmptyStream == null) {\n        throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n      }\n      isEmptyFile=readBits(header,isEmptyStream.cardinality());\n      break;\n    }\ncase NID.kAnti:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n    }\n    isAnti=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kName:{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\n  entryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\nint nonEmptyFileCounter=0;\nint emptyFileCounter=0;\nfor (int i=0; i < numFilesInt; i++) {\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nif (entryAtIndex == null) {\ncontinue;\n}\nentryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\nif (entryAtIndex.hasStream()) {\nif (archive.subStreamsInfo == null) {\nthrow new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n}\nentryAtIndex.setDirectory(false);\nentryAtIndex.setAntiItem(false);\nentryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\nentryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\nentryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n++nonEmptyFileCounter;\n}\n else {\nentryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\nentryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\nentryAtIndex.setHasCrc(false);\nentryAtIndex.setSize(0);\n++emptyFileCounter;\n}\n}\nfinal List<SevenZArchiveEntry> entries=new ArrayList<>();\nfor (final SevenZArchiveEntry e : fileMap.values()) {\nif (e != null) {\nentries.add(e);\n}\n}\narchive.files=entries.toArray(new SevenZArchiveEntry[0]);\ncalculateStreamMap(archive);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 878,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 9018,
                        "startLineNumber": 937,
                        "startColumnNumber": 4,
                        "endLineNumber": 1116,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private void readFilesInfo(final ByteBuffer header,final Archive archive) throws IOException {\n  final long numFiles=readUint64(header);\n  assertFitsIntoInt(\"numFiles\",numFiles);\n  final int numFilesInt=(int)numFiles;\n  final Map<Integer,SevenZArchiveEntry> fileMap=new HashMap<>();\n  BitSet isEmptyStream=null;\n  BitSet isEmptyFile=null;\n  BitSet isAnti=null;\n  while (true) {\n    final int propertyType=getUnsignedByte(header);\n    if (propertyType == 0) {\n      break;\n    }\n    final long size=readUint64(header);\nswitch (propertyType) {\ncase NID.kEmptyStream:{\n        isEmptyStream=readBits(header,numFilesInt);\n        break;\n      }\ncase NID.kEmptyFile:{\n      if (isEmptyStream == null) {\n        throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n      }\n      isEmptyFile=readBits(header,isEmptyStream.cardinality());\n      break;\n    }\ncase NID.kAnti:{\n    if (isEmptyStream == null) {\n      throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n    }\n    isAnti=readBits(header,isEmptyStream.cardinality());\n    break;\n  }\ncase NID.kName:{\n  final int external=getUnsignedByte(header);\n  if (external != 0) {\n    throw new IOException(\"Not implemented\");\n  }\n  if (((size - 1) & 1) != 0) {\n    throw new IOException(\"File names length invalid\");\n  }\n  assertFitsIntoInt(\"file names length\",size - 1);\n  final byte[] names=new byte[(int)(size - 1)];\n  header.get(names);\n  int nextFile=0;\n  int nextName=0;\n  for (int i=0; i < names.length; i+=2) {\n    if (names[i] == 0 && names[i + 1] == 0) {\n      checkEntryIsInitialized(fileMap,nextFile);\n      fileMap.get(nextFile).setName(new String(names,nextName,i - nextName,StandardCharsets.UTF_16LE));\n      nextName=i + 2;\n      nextFile++;\n    }\n  }\n  if (nextName != names.length || nextFile != numFiles) {\n    throw new IOException(\"Error parsing file names\");\n  }\n  break;\n}\ncase NID.kCTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\n  throw new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\n  checkEntryIsInitialized(fileMap,i);\n  final SevenZArchiveEntry entryAtIndex=fileMap.get(i);\n  entryAtIndex.setHasCreationDate(timesDefined.get(i));\n  if (entryAtIndex.getHasCreationDate()) {\n    entryAtIndex.setCreationDate(header.getLong());\n  }\n}\nbreak;\n}\ncase NID.kATime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasAccessDate(timesDefined.get(i));\nif (entryAtIndex.getHasAccessDate()) {\n  entryAtIndex.setAccessDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kMTime:{\nfinal BitSet timesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasLastModifiedDate(timesDefined.get(i));\nif (entryAtIndex.getHasLastModifiedDate()) {\nentryAtIndex.setLastModifiedDate(header.getLong());\n}\n}\nbreak;\n}\ncase NID.kWinAttributes:{\nfinal BitSet attributesDefined=readAllOrBits(header,numFilesInt);\nfinal int external=getUnsignedByte(header);\nif (external != 0) {\nthrow new IOException(\"Unimplemented\");\n}\nfor (int i=0; i < numFilesInt; i++) {\ncheckEntryIsInitialized(fileMap,i);\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nentryAtIndex.setHasWindowsAttributes(attributesDefined.get(i));\nif (entryAtIndex.getHasWindowsAttributes()) {\nentryAtIndex.setWindowsAttributes(header.getInt());\n}\n}\nbreak;\n}\ncase NID.kStartPos:{\nthrow new IOException(\"kStartPos is unsupported, please report\");\n}\ncase NID.kDummy:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete kDummy property\");\n}\nbreak;\n}\ndefault:{\nif (skipBytesFully(header,size) < size) {\nthrow new IOException(\"Incomplete property of type \" + propertyType);\n}\nbreak;\n}\n}\n}\nint nonEmptyFileCounter=0;\nint emptyFileCounter=0;\nfor (int i=0; i < numFilesInt; i++) {\nfinal SevenZArchiveEntry entryAtIndex=fileMap.get(i);\nif (entryAtIndex == null) {\ncontinue;\n}\nentryAtIndex.setHasStream(isEmptyStream == null || !isEmptyStream.get(i));\nif (entryAtIndex.hasStream()) {\nif (archive.subStreamsInfo == null) {\nthrow new IOException(\"Archive contains file with streams but no subStreamsInfo\");\n}\nentryAtIndex.setDirectory(false);\nentryAtIndex.setAntiItem(false);\nentryAtIndex.setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));\nentryAtIndex.setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);\nentryAtIndex.setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);\n++nonEmptyFileCounter;\n}\n else {\nentryAtIndex.setDirectory(isEmptyFile == null || !isEmptyFile.get(emptyFileCounter));\nentryAtIndex.setAntiItem(isAnti != null && isAnti.get(emptyFileCounter));\nentryAtIndex.setHasCrc(false);\nentryAtIndex.setSize(0);\n++emptyFileCounter;\n}\n}\nfinal List<SevenZArchiveEntry> entries=new ArrayList<>();\nfor (final SevenZArchiveEntry e : fileMap.values()) {\nif (e != null) {\nentries.add(e);\n}\n}\narchive.files=entries.toArray(new SevenZArchiveEntry[0]);\ncalculateStreamMap(archive);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 894,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 28,
                    "startLineNumber": 1115,
                    "startColumnNumber": 8,
                    "endLineNumber": 1115,
                    "endColumnNumber": 36
                },
                "nodeContext": "calculateStreamMap(archive);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 4,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "org.apache.commons.compress.archivers.sevenz.Archive"
        }
    ],
    "positionList": [
        {
            "charLength": 7,
            "startLineNumber": 1091,
            "startColumnNumber": 20,
            "endLineNumber": 1091,
            "endColumnNumber": 27
        },
        {
            "charLength": 7,
            "startLineNumber": 1096,
            "startColumnNumber": 39,
            "endLineNumber": 1096,
            "endColumnNumber": 46
        },
        {
            "charLength": 7,
            "startLineNumber": 1097,
            "startColumnNumber": 41,
            "endLineNumber": 1097,
            "endColumnNumber": 48
        },
        {
            "charLength": 7,
            "startLineNumber": 1098,
            "startColumnNumber": 37,
            "endLineNumber": 1098,
            "endColumnNumber": 44
        },
        {
            "charLength": 7,
            "startLineNumber": 1114,
            "startColumnNumber": 8,
            "endLineNumber": 1114,
            "endColumnNumber": 15
        },
        {
            "charLength": 7,
            "startLineNumber": 1115,
            "startColumnNumber": 27,
            "endLineNumber": 1115,
            "endColumnNumber": 34
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 4,
            "layout": 7
        },
        {
            "firstKey": 0,
            "secondKey": 5,
            "layout": 7
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 1,
            "secondKey": 4,
            "layout": 9
        },
        {
            "firstKey": 1,
            "secondKey": 5,
            "layout": 9
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 4,
            "layout": 9
        },
        {
            "firstKey": 2,
            "secondKey": 5,
            "layout": 9
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 3,
            "secondKey": 4,
            "layout": 9
        },
        {
            "firstKey": 3,
            "secondKey": 5,
            "layout": 9
        },
        {
            "firstKey": 4,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 0,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 4,
            "layout": 2
        }
    ]
}