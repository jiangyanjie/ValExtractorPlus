{
    "id": 161,
    "expression": "blockMethod",
    "projectName": "alibaba@spring-cloud-alibaba",
    "commitID": "b059e1f8e3cdeae8b05de679e9132509e20375a3",
    "filePath": "spring-cloud-alibaba-sentinel/src/main/java/org/springframework/cloud/alibaba/sentinel/custom/SentinelBeanPostProcessor.java",
    "occurrences": 10,
    "isArithmeticExpression": 0,
    "isGetTypeMethod": 0,
    "expressionList": [
        {
            "nodeContext": "blockMethod",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 11,
                "startLineNumber": 97,
                "startColumnNumber": 54,
                "endLineNumber": 97,
                "endColumnNumber": 65
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 32,
                        "startLineNumber": 97,
                        "startColumnNumber": 34,
                        "endLineNumber": 97,
                        "endColumnNumber": 66
                    },
                    "nodeContext": "StringUtils.isEmpty(blockMethod)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 60,
                        "startLineNumber": 97,
                        "startColumnNumber": 6,
                        "endLineNumber": 97,
                        "endColumnNumber": 66
                    },
                    "nodeContext": "blockClass == void.class && StringUtils.isEmpty(blockMethod)",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 82,
                        "startLineNumber": 97,
                        "startColumnNumber": 2,
                        "endLineNumber": 99,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (blockClass == void.class && StringUtils.isEmpty(blockMethod)) {\n  return;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 12,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2330,
                        "startLineNumber": 96,
                        "startColumnNumber": 33,
                        "endLineNumber": 145,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "{\n  if (blockClass == void.class && StringUtils.isEmpty(blockMethod)) {\n    return;\n  }\n  if (blockClass != void.class && StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} class attribute exists but {} method attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" class attribute exists but \" + type+ \" method attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n else   if (blockClass == void.class && !StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} method attribute exists but {} class attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" method attribute exists but \" + type+ \" class attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n  Class[] args=new Class[]{HttpRequest.class,byte[].class,ClientHttpRequestExecution.class,BlockException.class};\n  String argsStr=Arrays.toString(Arrays.stream(args).map(clazz -> clazz.getSimpleName()).toArray());\n  Method foundMethod=ClassUtils.getStaticMethod(blockClass,blockMethod,args);\n  if (foundMethod == null) {\n    logger.error(\"{} static method can not be found in bean[{}]. The right method signature is {}#{}{}, please check your class name, method name and arguments\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" static method can not be found in bean[\" + beanName+ \"]. The right method signature is \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr+ \", please check your class name, method name and arguments\");\n  }\n  if (!ClientHttpResponse.class.isAssignableFrom(foundMethod.getReturnType())) {\n    logger.error(\"{} method return value in bean[{}] is not ClientHttpResponse: {}#{}{}\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" method return value in bean[\" + beanName+ \"] is not ClientHttpResponse: \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr);\n  }\n  if (type.equals(SentinelConstants.BLOCK_TYPE)) {\n    BlockClassRegistry.updateBlockHandlerFor(blockClass,blockMethod,foundMethod);\n  }\n else {\n    BlockClassRegistry.updateFallbackFor(blockClass,blockMethod,foundMethod);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 227,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2441,
                        "startLineNumber": 95,
                        "startColumnNumber": 1,
                        "endLineNumber": 145,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "private void checkBlock4RestTemplate(Class<?> blockClass,String blockMethod,String beanName,String type){\n  if (blockClass == void.class && StringUtils.isEmpty(blockMethod)) {\n    return;\n  }\n  if (blockClass != void.class && StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} class attribute exists but {} method attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" class attribute exists but \" + type+ \" method attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n else   if (blockClass == void.class && !StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} method attribute exists but {} class attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" method attribute exists but \" + type+ \" class attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n  Class[] args=new Class[]{HttpRequest.class,byte[].class,ClientHttpRequestExecution.class,BlockException.class};\n  String argsStr=Arrays.toString(Arrays.stream(args).map(clazz -> clazz.getSimpleName()).toArray());\n  Method foundMethod=ClassUtils.getStaticMethod(blockClass,blockMethod,args);\n  if (foundMethod == null) {\n    logger.error(\"{} static method can not be found in bean[{}]. The right method signature is {}#{}{}, please check your class name, method name and arguments\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" static method can not be found in bean[\" + beanName+ \"]. The right method signature is \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr+ \", please check your class name, method name and arguments\");\n  }\n  if (!ClientHttpResponse.class.isAssignableFrom(foundMethod.getReturnType())) {\n    logger.error(\"{} method return value in bean[{}] is not ClientHttpResponse: {}#{}{}\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" method return value in bean[\" + beanName+ \"] is not ClientHttpResponse: \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr);\n  }\n  if (type.equals(SentinelConstants.BLOCK_TYPE)) {\n    BlockClassRegistry.updateBlockHandlerFor(blockClass,blockMethod,foundMethod);\n  }\n else {\n    BlockClassRegistry.updateFallbackFor(blockClass,blockMethod,foundMethod);\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 249,
                    "astHeight": 10
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 60,
                    "startLineNumber": 97,
                    "startColumnNumber": 6,
                    "endLineNumber": 97,
                    "endColumnNumber": 66
                },
                "nodeContext": "blockClass == void.class && StringUtils.isEmpty(blockMethod)",
                "nodeType": "InfixExpression",
                "astNodeNumber": 9,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "java.lang.String"
        },
        {
            "nodeContext": "blockMethod",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 11,
                "startLineNumber": 100,
                "startColumnNumber": 54,
                "endLineNumber": 100,
                "endColumnNumber": 65
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 32,
                        "startLineNumber": 100,
                        "startColumnNumber": 34,
                        "endLineNumber": 100,
                        "endColumnNumber": 66
                    },
                    "nodeContext": "StringUtils.isEmpty(blockMethod)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 60,
                        "startLineNumber": 100,
                        "startColumnNumber": 6,
                        "endLineNumber": 100,
                        "endColumnNumber": 66
                    },
                    "nodeContext": "blockClass != void.class && StringUtils.isEmpty(blockMethod)",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 713,
                        "startLineNumber": 100,
                        "startColumnNumber": 2,
                        "endLineNumber": 113,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (blockClass != void.class && StringUtils.isEmpty(blockMethod)) {\n  logger.error(\"{} class attribute exists but {} method attribute is not exists in bean[{}]\",type,type,beanName);\n  throw new IllegalArgumentException(type + \" class attribute exists but \" + type+ \" method attribute is not exists in bean[\"+ beanName+ \"]\");\n}\n else if (blockClass == void.class && !StringUtils.isEmpty(blockMethod)) {\n  logger.error(\"{} method attribute exists but {} class attribute is not exists in bean[{}]\",type,type,beanName);\n  throw new IllegalArgumentException(type + \" method attribute exists but \" + type+ \" class attribute is not exists in bean[\"+ beanName+ \"]\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 61,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2330,
                        "startLineNumber": 96,
                        "startColumnNumber": 33,
                        "endLineNumber": 145,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "{\n  if (blockClass == void.class && StringUtils.isEmpty(blockMethod)) {\n    return;\n  }\n  if (blockClass != void.class && StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} class attribute exists but {} method attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" class attribute exists but \" + type+ \" method attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n else   if (blockClass == void.class && !StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} method attribute exists but {} class attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" method attribute exists but \" + type+ \" class attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n  Class[] args=new Class[]{HttpRequest.class,byte[].class,ClientHttpRequestExecution.class,BlockException.class};\n  String argsStr=Arrays.toString(Arrays.stream(args).map(clazz -> clazz.getSimpleName()).toArray());\n  Method foundMethod=ClassUtils.getStaticMethod(blockClass,blockMethod,args);\n  if (foundMethod == null) {\n    logger.error(\"{} static method can not be found in bean[{}]. The right method signature is {}#{}{}, please check your class name, method name and arguments\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" static method can not be found in bean[\" + beanName+ \"]. The right method signature is \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr+ \", please check your class name, method name and arguments\");\n  }\n  if (!ClientHttpResponse.class.isAssignableFrom(foundMethod.getReturnType())) {\n    logger.error(\"{} method return value in bean[{}] is not ClientHttpResponse: {}#{}{}\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" method return value in bean[\" + beanName+ \"] is not ClientHttpResponse: \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr);\n  }\n  if (type.equals(SentinelConstants.BLOCK_TYPE)) {\n    BlockClassRegistry.updateBlockHandlerFor(blockClass,blockMethod,foundMethod);\n  }\n else {\n    BlockClassRegistry.updateFallbackFor(blockClass,blockMethod,foundMethod);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 227,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2441,
                        "startLineNumber": 95,
                        "startColumnNumber": 1,
                        "endLineNumber": 145,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "private void checkBlock4RestTemplate(Class<?> blockClass,String blockMethod,String beanName,String type){\n  if (blockClass == void.class && StringUtils.isEmpty(blockMethod)) {\n    return;\n  }\n  if (blockClass != void.class && StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} class attribute exists but {} method attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" class attribute exists but \" + type+ \" method attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n else   if (blockClass == void.class && !StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} method attribute exists but {} class attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" method attribute exists but \" + type+ \" class attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n  Class[] args=new Class[]{HttpRequest.class,byte[].class,ClientHttpRequestExecution.class,BlockException.class};\n  String argsStr=Arrays.toString(Arrays.stream(args).map(clazz -> clazz.getSimpleName()).toArray());\n  Method foundMethod=ClassUtils.getStaticMethod(blockClass,blockMethod,args);\n  if (foundMethod == null) {\n    logger.error(\"{} static method can not be found in bean[{}]. The right method signature is {}#{}{}, please check your class name, method name and arguments\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" static method can not be found in bean[\" + beanName+ \"]. The right method signature is \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr+ \", please check your class name, method name and arguments\");\n  }\n  if (!ClientHttpResponse.class.isAssignableFrom(foundMethod.getReturnType())) {\n    logger.error(\"{} method return value in bean[{}] is not ClientHttpResponse: {}#{}{}\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" method return value in bean[\" + beanName+ \"] is not ClientHttpResponse: \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr);\n  }\n  if (type.equals(SentinelConstants.BLOCK_TYPE)) {\n    BlockClassRegistry.updateBlockHandlerFor(blockClass,blockMethod,foundMethod);\n  }\n else {\n    BlockClassRegistry.updateFallbackFor(blockClass,blockMethod,foundMethod);\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 249,
                    "astHeight": 10
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 60,
                    "startLineNumber": 100,
                    "startColumnNumber": 6,
                    "endLineNumber": 100,
                    "endColumnNumber": 66
                },
                "nodeContext": "blockClass != void.class && StringUtils.isEmpty(blockMethod)",
                "nodeType": "InfixExpression",
                "astNodeNumber": 9,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "java.lang.String"
        },
        {
            "nodeContext": "blockMethod",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 11,
                "startLineNumber": 107,
                "startColumnNumber": 60,
                "endLineNumber": 107,
                "endColumnNumber": 71
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
                    "nodePosition": {
                        "charLength": 32,
                        "startLineNumber": 107,
                        "startColumnNumber": 40,
                        "endLineNumber": 107,
                        "endColumnNumber": 72
                    },
                    "nodeContext": "StringUtils.isEmpty(blockMethod)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 33,
                        "startLineNumber": 107,
                        "startColumnNumber": 39,
                        "endLineNumber": 107,
                        "endColumnNumber": 72
                    },
                    "nodeContext": "!StringUtils.isEmpty(blockMethod)",
                    "nodeType": "PrefixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 61,
                        "startLineNumber": 107,
                        "startColumnNumber": 11,
                        "endLineNumber": 107,
                        "endColumnNumber": 72
                    },
                    "nodeContext": "blockClass == void.class && !StringUtils.isEmpty(blockMethod)",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 10,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 353,
                        "startLineNumber": 107,
                        "startColumnNumber": 7,
                        "endLineNumber": 113,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (blockClass == void.class && !StringUtils.isEmpty(blockMethod)) {\n  logger.error(\"{} method attribute exists but {} class attribute is not exists in bean[{}]\",type,type,beanName);\n  throw new IllegalArgumentException(type + \" method attribute exists but \" + type+ \" class attribute is not exists in bean[\"+ beanName+ \"]\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 31,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 713,
                        "startLineNumber": 100,
                        "startColumnNumber": 2,
                        "endLineNumber": 113,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (blockClass != void.class && StringUtils.isEmpty(blockMethod)) {\n  logger.error(\"{} class attribute exists but {} method attribute is not exists in bean[{}]\",type,type,beanName);\n  throw new IllegalArgumentException(type + \" class attribute exists but \" + type+ \" method attribute is not exists in bean[\"+ beanName+ \"]\");\n}\n else if (blockClass == void.class && !StringUtils.isEmpty(blockMethod)) {\n  logger.error(\"{} method attribute exists but {} class attribute is not exists in bean[{}]\",type,type,beanName);\n  throw new IllegalArgumentException(type + \" method attribute exists but \" + type+ \" class attribute is not exists in bean[\"+ beanName+ \"]\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 61,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2330,
                        "startLineNumber": 96,
                        "startColumnNumber": 33,
                        "endLineNumber": 145,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "{\n  if (blockClass == void.class && StringUtils.isEmpty(blockMethod)) {\n    return;\n  }\n  if (blockClass != void.class && StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} class attribute exists but {} method attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" class attribute exists but \" + type+ \" method attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n else   if (blockClass == void.class && !StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} method attribute exists but {} class attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" method attribute exists but \" + type+ \" class attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n  Class[] args=new Class[]{HttpRequest.class,byte[].class,ClientHttpRequestExecution.class,BlockException.class};\n  String argsStr=Arrays.toString(Arrays.stream(args).map(clazz -> clazz.getSimpleName()).toArray());\n  Method foundMethod=ClassUtils.getStaticMethod(blockClass,blockMethod,args);\n  if (foundMethod == null) {\n    logger.error(\"{} static method can not be found in bean[{}]. The right method signature is {}#{}{}, please check your class name, method name and arguments\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" static method can not be found in bean[\" + beanName+ \"]. The right method signature is \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr+ \", please check your class name, method name and arguments\");\n  }\n  if (!ClientHttpResponse.class.isAssignableFrom(foundMethod.getReturnType())) {\n    logger.error(\"{} method return value in bean[{}] is not ClientHttpResponse: {}#{}{}\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" method return value in bean[\" + beanName+ \"] is not ClientHttpResponse: \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr);\n  }\n  if (type.equals(SentinelConstants.BLOCK_TYPE)) {\n    BlockClassRegistry.updateBlockHandlerFor(blockClass,blockMethod,foundMethod);\n  }\n else {\n    BlockClassRegistry.updateFallbackFor(blockClass,blockMethod,foundMethod);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 227,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2441,
                        "startLineNumber": 95,
                        "startColumnNumber": 1,
                        "endLineNumber": 145,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "private void checkBlock4RestTemplate(Class<?> blockClass,String blockMethod,String beanName,String type){\n  if (blockClass == void.class && StringUtils.isEmpty(blockMethod)) {\n    return;\n  }\n  if (blockClass != void.class && StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} class attribute exists but {} method attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" class attribute exists but \" + type+ \" method attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n else   if (blockClass == void.class && !StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} method attribute exists but {} class attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" method attribute exists but \" + type+ \" class attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n  Class[] args=new Class[]{HttpRequest.class,byte[].class,ClientHttpRequestExecution.class,BlockException.class};\n  String argsStr=Arrays.toString(Arrays.stream(args).map(clazz -> clazz.getSimpleName()).toArray());\n  Method foundMethod=ClassUtils.getStaticMethod(blockClass,blockMethod,args);\n  if (foundMethod == null) {\n    logger.error(\"{} static method can not be found in bean[{}]. The right method signature is {}#{}{}, please check your class name, method name and arguments\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" static method can not be found in bean[\" + beanName+ \"]. The right method signature is \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr+ \", please check your class name, method name and arguments\");\n  }\n  if (!ClientHttpResponse.class.isAssignableFrom(foundMethod.getReturnType())) {\n    logger.error(\"{} method return value in bean[{}] is not ClientHttpResponse: {}#{}{}\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" method return value in bean[\" + beanName+ \"] is not ClientHttpResponse: \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr);\n  }\n  if (type.equals(SentinelConstants.BLOCK_TYPE)) {\n    BlockClassRegistry.updateBlockHandlerFor(blockClass,blockMethod,foundMethod);\n  }\n else {\n    BlockClassRegistry.updateFallbackFor(blockClass,blockMethod,foundMethod);\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 249,
                    "astHeight": 10
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 61,
                    "startLineNumber": 107,
                    "startColumnNumber": 11,
                    "endLineNumber": 107,
                    "endColumnNumber": 72
                },
                "nodeContext": "blockClass == void.class && !StringUtils.isEmpty(blockMethod)",
                "nodeType": "InfixExpression",
                "astNodeNumber": 10,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "java.lang.String"
        },
        {
            "nodeContext": "blockMethod",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 11,
                "startLineNumber": 118,
                "startColumnNumber": 62,
                "endLineNumber": 118,
                "endColumnNumber": 73
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 57,
                        "startLineNumber": 118,
                        "startColumnNumber": 23,
                        "endLineNumber": 118,
                        "endColumnNumber": 80
                    },
                    "nodeContext": "ClassUtils.getStaticMethod(blockClass,blockMethod,args)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 6,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 71,
                        "startLineNumber": 118,
                        "startColumnNumber": 9,
                        "endLineNumber": 118,
                        "endColumnNumber": 80
                    },
                    "nodeContext": "foundMethod=ClassUtils.getStaticMethod(blockClass,blockMethod,args)",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 8,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 79,
                        "startLineNumber": 118,
                        "startColumnNumber": 2,
                        "endLineNumber": 118,
                        "endColumnNumber": 81
                    },
                    "nodeContext": "Method foundMethod=ClassUtils.getStaticMethod(blockClass,blockMethod,args);\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2330,
                        "startLineNumber": 96,
                        "startColumnNumber": 33,
                        "endLineNumber": 145,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "{\n  if (blockClass == void.class && StringUtils.isEmpty(blockMethod)) {\n    return;\n  }\n  if (blockClass != void.class && StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} class attribute exists but {} method attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" class attribute exists but \" + type+ \" method attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n else   if (blockClass == void.class && !StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} method attribute exists but {} class attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" method attribute exists but \" + type+ \" class attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n  Class[] args=new Class[]{HttpRequest.class,byte[].class,ClientHttpRequestExecution.class,BlockException.class};\n  String argsStr=Arrays.toString(Arrays.stream(args).map(clazz -> clazz.getSimpleName()).toArray());\n  Method foundMethod=ClassUtils.getStaticMethod(blockClass,blockMethod,args);\n  if (foundMethod == null) {\n    logger.error(\"{} static method can not be found in bean[{}]. The right method signature is {}#{}{}, please check your class name, method name and arguments\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" static method can not be found in bean[\" + beanName+ \"]. The right method signature is \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr+ \", please check your class name, method name and arguments\");\n  }\n  if (!ClientHttpResponse.class.isAssignableFrom(foundMethod.getReturnType())) {\n    logger.error(\"{} method return value in bean[{}] is not ClientHttpResponse: {}#{}{}\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" method return value in bean[\" + beanName+ \"] is not ClientHttpResponse: \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr);\n  }\n  if (type.equals(SentinelConstants.BLOCK_TYPE)) {\n    BlockClassRegistry.updateBlockHandlerFor(blockClass,blockMethod,foundMethod);\n  }\n else {\n    BlockClassRegistry.updateFallbackFor(blockClass,blockMethod,foundMethod);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 227,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2441,
                        "startLineNumber": 95,
                        "startColumnNumber": 1,
                        "endLineNumber": 145,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "private void checkBlock4RestTemplate(Class<?> blockClass,String blockMethod,String beanName,String type){\n  if (blockClass == void.class && StringUtils.isEmpty(blockMethod)) {\n    return;\n  }\n  if (blockClass != void.class && StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} class attribute exists but {} method attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" class attribute exists but \" + type+ \" method attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n else   if (blockClass == void.class && !StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} method attribute exists but {} class attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" method attribute exists but \" + type+ \" class attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n  Class[] args=new Class[]{HttpRequest.class,byte[].class,ClientHttpRequestExecution.class,BlockException.class};\n  String argsStr=Arrays.toString(Arrays.stream(args).map(clazz -> clazz.getSimpleName()).toArray());\n  Method foundMethod=ClassUtils.getStaticMethod(blockClass,blockMethod,args);\n  if (foundMethod == null) {\n    logger.error(\"{} static method can not be found in bean[{}]. The right method signature is {}#{}{}, please check your class name, method name and arguments\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" static method can not be found in bean[\" + beanName+ \"]. The right method signature is \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr+ \", please check your class name, method name and arguments\");\n  }\n  if (!ClientHttpResponse.class.isAssignableFrom(foundMethod.getReturnType())) {\n    logger.error(\"{} method return value in bean[{}] is not ClientHttpResponse: {}#{}{}\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" method return value in bean[\" + beanName+ \"] is not ClientHttpResponse: \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr);\n  }\n  if (type.equals(SentinelConstants.BLOCK_TYPE)) {\n    BlockClassRegistry.updateBlockHandlerFor(blockClass,blockMethod,foundMethod);\n  }\n else {\n    BlockClassRegistry.updateFallbackFor(blockClass,blockMethod,foundMethod);\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 249,
                    "astHeight": 10
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 79,
                    "startLineNumber": 118,
                    "startColumnNumber": 2,
                    "endLineNumber": 118,
                    "endColumnNumber": 81
                },
                "nodeContext": "Method foundMethod=ClassUtils.getStaticMethod(blockClass,blockMethod,args);\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 11,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "java.lang.String"
        },
        {
            "nodeContext": "blockMethod",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 11,
                "startLineNumber": 122,
                "startColumnNumber": 43,
                "endLineNumber": 122,
                "endColumnNumber": 54
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 228,
                        "startLineNumber": 120,
                        "startColumnNumber": 3,
                        "endLineNumber": 122,
                        "endColumnNumber": 64
                    },
                    "nodeContext": "logger.error(\"{} static method can not be found in bean[{}]. The right method signature is {}#{}{}, please check your class name, method name and arguments\",type,beanName,blockClass.getName(),blockMethod,argsStr)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 11,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 229,
                        "startLineNumber": 120,
                        "startColumnNumber": 3,
                        "endLineNumber": 122,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "logger.error(\"{} static method can not be found in bean[{}]. The right method signature is {}#{}{}, please check your class name, method name and arguments\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 12,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 512,
                        "startLineNumber": 119,
                        "startColumnNumber": 27,
                        "endLineNumber": 128,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  logger.error(\"{} static method can not be found in bean[{}]. The right method signature is {}#{}{}, please check your class name, method name and arguments\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n  throw new IllegalArgumentException(type + \" static method can not be found in bean[\" + beanName+ \"]. The right method signature is \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr+ \", please check your class name, method name and arguments\");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 29,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 537,
                        "startLineNumber": 119,
                        "startColumnNumber": 2,
                        "endLineNumber": 128,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (foundMethod == null) {\n  logger.error(\"{} static method can not be found in bean[{}]. The right method signature is {}#{}{}, please check your class name, method name and arguments\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n  throw new IllegalArgumentException(type + \" static method can not be found in bean[\" + beanName+ \"]. The right method signature is \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr+ \", please check your class name, method name and arguments\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 33,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2330,
                        "startLineNumber": 96,
                        "startColumnNumber": 33,
                        "endLineNumber": 145,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "{\n  if (blockClass == void.class && StringUtils.isEmpty(blockMethod)) {\n    return;\n  }\n  if (blockClass != void.class && StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} class attribute exists but {} method attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" class attribute exists but \" + type+ \" method attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n else   if (blockClass == void.class && !StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} method attribute exists but {} class attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" method attribute exists but \" + type+ \" class attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n  Class[] args=new Class[]{HttpRequest.class,byte[].class,ClientHttpRequestExecution.class,BlockException.class};\n  String argsStr=Arrays.toString(Arrays.stream(args).map(clazz -> clazz.getSimpleName()).toArray());\n  Method foundMethod=ClassUtils.getStaticMethod(blockClass,blockMethod,args);\n  if (foundMethod == null) {\n    logger.error(\"{} static method can not be found in bean[{}]. The right method signature is {}#{}{}, please check your class name, method name and arguments\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" static method can not be found in bean[\" + beanName+ \"]. The right method signature is \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr+ \", please check your class name, method name and arguments\");\n  }\n  if (!ClientHttpResponse.class.isAssignableFrom(foundMethod.getReturnType())) {\n    logger.error(\"{} method return value in bean[{}] is not ClientHttpResponse: {}#{}{}\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" method return value in bean[\" + beanName+ \"] is not ClientHttpResponse: \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr);\n  }\n  if (type.equals(SentinelConstants.BLOCK_TYPE)) {\n    BlockClassRegistry.updateBlockHandlerFor(blockClass,blockMethod,foundMethod);\n  }\n else {\n    BlockClassRegistry.updateFallbackFor(blockClass,blockMethod,foundMethod);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 227,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2441,
                        "startLineNumber": 95,
                        "startColumnNumber": 1,
                        "endLineNumber": 145,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "private void checkBlock4RestTemplate(Class<?> blockClass,String blockMethod,String beanName,String type){\n  if (blockClass == void.class && StringUtils.isEmpty(blockMethod)) {\n    return;\n  }\n  if (blockClass != void.class && StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} class attribute exists but {} method attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" class attribute exists but \" + type+ \" method attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n else   if (blockClass == void.class && !StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} method attribute exists but {} class attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" method attribute exists but \" + type+ \" class attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n  Class[] args=new Class[]{HttpRequest.class,byte[].class,ClientHttpRequestExecution.class,BlockException.class};\n  String argsStr=Arrays.toString(Arrays.stream(args).map(clazz -> clazz.getSimpleName()).toArray());\n  Method foundMethod=ClassUtils.getStaticMethod(blockClass,blockMethod,args);\n  if (foundMethod == null) {\n    logger.error(\"{} static method can not be found in bean[{}]. The right method signature is {}#{}{}, please check your class name, method name and arguments\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" static method can not be found in bean[\" + beanName+ \"]. The right method signature is \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr+ \", please check your class name, method name and arguments\");\n  }\n  if (!ClientHttpResponse.class.isAssignableFrom(foundMethod.getReturnType())) {\n    logger.error(\"{} method return value in bean[{}] is not ClientHttpResponse: {}#{}{}\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" method return value in bean[\" + beanName+ \"] is not ClientHttpResponse: \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr);\n  }\n  if (type.equals(SentinelConstants.BLOCK_TYPE)) {\n    BlockClassRegistry.updateBlockHandlerFor(blockClass,blockMethod,foundMethod);\n  }\n else {\n    BlockClassRegistry.updateFallbackFor(blockClass,blockMethod,foundMethod);\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 249,
                    "astHeight": 10
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                "nodePosition": {
                    "charLength": 228,
                    "startLineNumber": 120,
                    "startColumnNumber": 3,
                    "endLineNumber": 122,
                    "endColumnNumber": 64
                },
                "nodeContext": "logger.error(\"{} static method can not be found in bean[{}]. The right method signature is {}#{}{}, please check your class name, method name and arguments\",type,beanName,blockClass.getName(),blockMethod,argsStr)",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 11,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.lang.String"
        },
        {
            "nodeContext": "blockMethod",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 11,
                "startLineNumber": 126,
                "startColumnNumber": 7,
                "endLineNumber": 126,
                "endColumnNumber": 18
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
                    "nodePosition": {
                        "charLength": 233,
                        "startLineNumber": 123,
                        "startColumnNumber": 38,
                        "endLineNumber": 127,
                        "endColumnNumber": 66
                    },
                    "nodeContext": "type + \" static method can not be found in bean[\" + beanName+ \"]. The right method signature is \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr+ \", please check your class name, method name and arguments\"",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 12,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
                    "nodePosition": {
                        "charLength": 263,
                        "startLineNumber": 123,
                        "startColumnNumber": 9,
                        "endLineNumber": 127,
                        "endColumnNumber": 67
                    },
                    "nodeContext": "new IllegalArgumentException(type + \" static method can not be found in bean[\" + beanName+ \"]. The right method signature is \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr+ \", please check your class name, method name and arguments\")",
                    "nodeType": "ClassInstanceCreation",
                    "astNodeNumber": 15,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 270,
                        "startLineNumber": 123,
                        "startColumnNumber": 3,
                        "endLineNumber": 127,
                        "endColumnNumber": 68
                    },
                    "nodeContext": "throw new IllegalArgumentException(type + \" static method can not be found in bean[\" + beanName+ \"]. The right method signature is \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr+ \", please check your class name, method name and arguments\");\n",
                    "nodeType": "ThrowStatement",
                    "astNodeNumber": 16,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 512,
                        "startLineNumber": 119,
                        "startColumnNumber": 27,
                        "endLineNumber": 128,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  logger.error(\"{} static method can not be found in bean[{}]. The right method signature is {}#{}{}, please check your class name, method name and arguments\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n  throw new IllegalArgumentException(type + \" static method can not be found in bean[\" + beanName+ \"]. The right method signature is \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr+ \", please check your class name, method name and arguments\");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 29,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 537,
                        "startLineNumber": 119,
                        "startColumnNumber": 2,
                        "endLineNumber": 128,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (foundMethod == null) {\n  logger.error(\"{} static method can not be found in bean[{}]. The right method signature is {}#{}{}, please check your class name, method name and arguments\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n  throw new IllegalArgumentException(type + \" static method can not be found in bean[\" + beanName+ \"]. The right method signature is \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr+ \", please check your class name, method name and arguments\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 33,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2330,
                        "startLineNumber": 96,
                        "startColumnNumber": 33,
                        "endLineNumber": 145,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "{\n  if (blockClass == void.class && StringUtils.isEmpty(blockMethod)) {\n    return;\n  }\n  if (blockClass != void.class && StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} class attribute exists but {} method attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" class attribute exists but \" + type+ \" method attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n else   if (blockClass == void.class && !StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} method attribute exists but {} class attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" method attribute exists but \" + type+ \" class attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n  Class[] args=new Class[]{HttpRequest.class,byte[].class,ClientHttpRequestExecution.class,BlockException.class};\n  String argsStr=Arrays.toString(Arrays.stream(args).map(clazz -> clazz.getSimpleName()).toArray());\n  Method foundMethod=ClassUtils.getStaticMethod(blockClass,blockMethod,args);\n  if (foundMethod == null) {\n    logger.error(\"{} static method can not be found in bean[{}]. The right method signature is {}#{}{}, please check your class name, method name and arguments\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" static method can not be found in bean[\" + beanName+ \"]. The right method signature is \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr+ \", please check your class name, method name and arguments\");\n  }\n  if (!ClientHttpResponse.class.isAssignableFrom(foundMethod.getReturnType())) {\n    logger.error(\"{} method return value in bean[{}] is not ClientHttpResponse: {}#{}{}\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" method return value in bean[\" + beanName+ \"] is not ClientHttpResponse: \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr);\n  }\n  if (type.equals(SentinelConstants.BLOCK_TYPE)) {\n    BlockClassRegistry.updateBlockHandlerFor(blockClass,blockMethod,foundMethod);\n  }\n else {\n    BlockClassRegistry.updateFallbackFor(blockClass,blockMethod,foundMethod);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 227,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2441,
                        "startLineNumber": 95,
                        "startColumnNumber": 1,
                        "endLineNumber": 145,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "private void checkBlock4RestTemplate(Class<?> blockClass,String blockMethod,String beanName,String type){\n  if (blockClass == void.class && StringUtils.isEmpty(blockMethod)) {\n    return;\n  }\n  if (blockClass != void.class && StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} class attribute exists but {} method attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" class attribute exists but \" + type+ \" method attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n else   if (blockClass == void.class && !StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} method attribute exists but {} class attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" method attribute exists but \" + type+ \" class attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n  Class[] args=new Class[]{HttpRequest.class,byte[].class,ClientHttpRequestExecution.class,BlockException.class};\n  String argsStr=Arrays.toString(Arrays.stream(args).map(clazz -> clazz.getSimpleName()).toArray());\n  Method foundMethod=ClassUtils.getStaticMethod(blockClass,blockMethod,args);\n  if (foundMethod == null) {\n    logger.error(\"{} static method can not be found in bean[{}]. The right method signature is {}#{}{}, please check your class name, method name and arguments\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" static method can not be found in bean[\" + beanName+ \"]. The right method signature is \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr+ \", please check your class name, method name and arguments\");\n  }\n  if (!ClientHttpResponse.class.isAssignableFrom(foundMethod.getReturnType())) {\n    logger.error(\"{} method return value in bean[{}] is not ClientHttpResponse: {}#{}{}\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" method return value in bean[\" + beanName+ \"] is not ClientHttpResponse: \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr);\n  }\n  if (type.equals(SentinelConstants.BLOCK_TYPE)) {\n    BlockClassRegistry.updateBlockHandlerFor(blockClass,blockMethod,foundMethod);\n  }\n else {\n    BlockClassRegistry.updateFallbackFor(blockClass,blockMethod,foundMethod);\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 249,
                    "astHeight": 10
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
                "nodePosition": {
                    "charLength": 233,
                    "startLineNumber": 123,
                    "startColumnNumber": 38,
                    "endLineNumber": 127,
                    "endColumnNumber": 66
                },
                "nodeContext": "type + \" static method can not be found in bean[\" + beanName+ \"]. The right method signature is \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr+ \", please check your class name, method name and arguments\"",
                "nodeType": "InfixExpression",
                "astNodeNumber": 12,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.lang.String"
        },
        {
            "nodeContext": "blockMethod",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 11,
                "startLineNumber": 133,
                "startColumnNumber": 43,
                "endLineNumber": 133,
                "endColumnNumber": 54
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 156,
                        "startLineNumber": 131,
                        "startColumnNumber": 3,
                        "endLineNumber": 133,
                        "endColumnNumber": 64
                    },
                    "nodeContext": "logger.error(\"{} method return value in bean[{}] is not ClientHttpResponse: {}#{}{}\",type,beanName,blockClass.getName(),blockMethod,argsStr)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 11,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 157,
                        "startLineNumber": 131,
                        "startColumnNumber": 3,
                        "endLineNumber": 133,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "logger.error(\"{} method return value in bean[{}] is not ClientHttpResponse: {}#{}{}\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 12,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 353,
                        "startLineNumber": 130,
                        "startColumnNumber": 79,
                        "endLineNumber": 137,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  logger.error(\"{} method return value in bean[{}] is not ClientHttpResponse: {}#{}{}\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n  throw new IllegalArgumentException(type + \" method return value in bean[\" + beanName+ \"] is not ClientHttpResponse: \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 28,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 430,
                        "startLineNumber": 130,
                        "startColumnNumber": 2,
                        "endLineNumber": 137,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (!ClientHttpResponse.class.isAssignableFrom(foundMethod.getReturnType())) {\n  logger.error(\"{} method return value in bean[{}] is not ClientHttpResponse: {}#{}{}\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n  throw new IllegalArgumentException(type + \" method return value in bean[\" + beanName+ \"] is not ClientHttpResponse: \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 38,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2330,
                        "startLineNumber": 96,
                        "startColumnNumber": 33,
                        "endLineNumber": 145,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "{\n  if (blockClass == void.class && StringUtils.isEmpty(blockMethod)) {\n    return;\n  }\n  if (blockClass != void.class && StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} class attribute exists but {} method attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" class attribute exists but \" + type+ \" method attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n else   if (blockClass == void.class && !StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} method attribute exists but {} class attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" method attribute exists but \" + type+ \" class attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n  Class[] args=new Class[]{HttpRequest.class,byte[].class,ClientHttpRequestExecution.class,BlockException.class};\n  String argsStr=Arrays.toString(Arrays.stream(args).map(clazz -> clazz.getSimpleName()).toArray());\n  Method foundMethod=ClassUtils.getStaticMethod(blockClass,blockMethod,args);\n  if (foundMethod == null) {\n    logger.error(\"{} static method can not be found in bean[{}]. The right method signature is {}#{}{}, please check your class name, method name and arguments\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" static method can not be found in bean[\" + beanName+ \"]. The right method signature is \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr+ \", please check your class name, method name and arguments\");\n  }\n  if (!ClientHttpResponse.class.isAssignableFrom(foundMethod.getReturnType())) {\n    logger.error(\"{} method return value in bean[{}] is not ClientHttpResponse: {}#{}{}\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" method return value in bean[\" + beanName+ \"] is not ClientHttpResponse: \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr);\n  }\n  if (type.equals(SentinelConstants.BLOCK_TYPE)) {\n    BlockClassRegistry.updateBlockHandlerFor(blockClass,blockMethod,foundMethod);\n  }\n else {\n    BlockClassRegistry.updateFallbackFor(blockClass,blockMethod,foundMethod);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 227,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2441,
                        "startLineNumber": 95,
                        "startColumnNumber": 1,
                        "endLineNumber": 145,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "private void checkBlock4RestTemplate(Class<?> blockClass,String blockMethod,String beanName,String type){\n  if (blockClass == void.class && StringUtils.isEmpty(blockMethod)) {\n    return;\n  }\n  if (blockClass != void.class && StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} class attribute exists but {} method attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" class attribute exists but \" + type+ \" method attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n else   if (blockClass == void.class && !StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} method attribute exists but {} class attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" method attribute exists but \" + type+ \" class attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n  Class[] args=new Class[]{HttpRequest.class,byte[].class,ClientHttpRequestExecution.class,BlockException.class};\n  String argsStr=Arrays.toString(Arrays.stream(args).map(clazz -> clazz.getSimpleName()).toArray());\n  Method foundMethod=ClassUtils.getStaticMethod(blockClass,blockMethod,args);\n  if (foundMethod == null) {\n    logger.error(\"{} static method can not be found in bean[{}]. The right method signature is {}#{}{}, please check your class name, method name and arguments\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" static method can not be found in bean[\" + beanName+ \"]. The right method signature is \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr+ \", please check your class name, method name and arguments\");\n  }\n  if (!ClientHttpResponse.class.isAssignableFrom(foundMethod.getReturnType())) {\n    logger.error(\"{} method return value in bean[{}] is not ClientHttpResponse: {}#{}{}\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" method return value in bean[\" + beanName+ \"] is not ClientHttpResponse: \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr);\n  }\n  if (type.equals(SentinelConstants.BLOCK_TYPE)) {\n    BlockClassRegistry.updateBlockHandlerFor(blockClass,blockMethod,foundMethod);\n  }\n else {\n    BlockClassRegistry.updateFallbackFor(blockClass,blockMethod,foundMethod);\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 249,
                    "astHeight": 10
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                "nodePosition": {
                    "charLength": 156,
                    "startLineNumber": 131,
                    "startColumnNumber": 3,
                    "endLineNumber": 133,
                    "endColumnNumber": 64
                },
                "nodeContext": "logger.error(\"{} method return value in bean[{}] is not ClientHttpResponse: {}#{}{}\",type,beanName,blockClass.getName(),blockMethod,argsStr)",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 11,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.lang.String"
        },
        {
            "nodeContext": "blockMethod",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 11,
                "startLineNumber": 136,
                "startColumnNumber": 13,
                "endLineNumber": 136,
                "endColumnNumber": 24
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
                    "nodePosition": {
                        "charLength": 146,
                        "startLineNumber": 134,
                        "startColumnNumber": 38,
                        "endLineNumber": 136,
                        "endColumnNumber": 34
                    },
                    "nodeContext": "type + \" method return value in bean[\" + beanName+ \"] is not ClientHttpResponse: \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 11,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
                    "nodePosition": {
                        "charLength": 176,
                        "startLineNumber": 134,
                        "startColumnNumber": 9,
                        "endLineNumber": 136,
                        "endColumnNumber": 35
                    },
                    "nodeContext": "new IllegalArgumentException(type + \" method return value in bean[\" + beanName+ \"] is not ClientHttpResponse: \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr)",
                    "nodeType": "ClassInstanceCreation",
                    "astNodeNumber": 14,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 183,
                        "startLineNumber": 134,
                        "startColumnNumber": 3,
                        "endLineNumber": 136,
                        "endColumnNumber": 36
                    },
                    "nodeContext": "throw new IllegalArgumentException(type + \" method return value in bean[\" + beanName+ \"] is not ClientHttpResponse: \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr);\n",
                    "nodeType": "ThrowStatement",
                    "astNodeNumber": 15,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 353,
                        "startLineNumber": 130,
                        "startColumnNumber": 79,
                        "endLineNumber": 137,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  logger.error(\"{} method return value in bean[{}] is not ClientHttpResponse: {}#{}{}\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n  throw new IllegalArgumentException(type + \" method return value in bean[\" + beanName+ \"] is not ClientHttpResponse: \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 28,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 430,
                        "startLineNumber": 130,
                        "startColumnNumber": 2,
                        "endLineNumber": 137,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (!ClientHttpResponse.class.isAssignableFrom(foundMethod.getReturnType())) {\n  logger.error(\"{} method return value in bean[{}] is not ClientHttpResponse: {}#{}{}\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n  throw new IllegalArgumentException(type + \" method return value in bean[\" + beanName+ \"] is not ClientHttpResponse: \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 38,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2330,
                        "startLineNumber": 96,
                        "startColumnNumber": 33,
                        "endLineNumber": 145,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "{\n  if (blockClass == void.class && StringUtils.isEmpty(blockMethod)) {\n    return;\n  }\n  if (blockClass != void.class && StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} class attribute exists but {} method attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" class attribute exists but \" + type+ \" method attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n else   if (blockClass == void.class && !StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} method attribute exists but {} class attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" method attribute exists but \" + type+ \" class attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n  Class[] args=new Class[]{HttpRequest.class,byte[].class,ClientHttpRequestExecution.class,BlockException.class};\n  String argsStr=Arrays.toString(Arrays.stream(args).map(clazz -> clazz.getSimpleName()).toArray());\n  Method foundMethod=ClassUtils.getStaticMethod(blockClass,blockMethod,args);\n  if (foundMethod == null) {\n    logger.error(\"{} static method can not be found in bean[{}]. The right method signature is {}#{}{}, please check your class name, method name and arguments\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" static method can not be found in bean[\" + beanName+ \"]. The right method signature is \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr+ \", please check your class name, method name and arguments\");\n  }\n  if (!ClientHttpResponse.class.isAssignableFrom(foundMethod.getReturnType())) {\n    logger.error(\"{} method return value in bean[{}] is not ClientHttpResponse: {}#{}{}\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" method return value in bean[\" + beanName+ \"] is not ClientHttpResponse: \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr);\n  }\n  if (type.equals(SentinelConstants.BLOCK_TYPE)) {\n    BlockClassRegistry.updateBlockHandlerFor(blockClass,blockMethod,foundMethod);\n  }\n else {\n    BlockClassRegistry.updateFallbackFor(blockClass,blockMethod,foundMethod);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 227,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2441,
                        "startLineNumber": 95,
                        "startColumnNumber": 1,
                        "endLineNumber": 145,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "private void checkBlock4RestTemplate(Class<?> blockClass,String blockMethod,String beanName,String type){\n  if (blockClass == void.class && StringUtils.isEmpty(blockMethod)) {\n    return;\n  }\n  if (blockClass != void.class && StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} class attribute exists but {} method attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" class attribute exists but \" + type+ \" method attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n else   if (blockClass == void.class && !StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} method attribute exists but {} class attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" method attribute exists but \" + type+ \" class attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n  Class[] args=new Class[]{HttpRequest.class,byte[].class,ClientHttpRequestExecution.class,BlockException.class};\n  String argsStr=Arrays.toString(Arrays.stream(args).map(clazz -> clazz.getSimpleName()).toArray());\n  Method foundMethod=ClassUtils.getStaticMethod(blockClass,blockMethod,args);\n  if (foundMethod == null) {\n    logger.error(\"{} static method can not be found in bean[{}]. The right method signature is {}#{}{}, please check your class name, method name and arguments\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" static method can not be found in bean[\" + beanName+ \"]. The right method signature is \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr+ \", please check your class name, method name and arguments\");\n  }\n  if (!ClientHttpResponse.class.isAssignableFrom(foundMethod.getReturnType())) {\n    logger.error(\"{} method return value in bean[{}] is not ClientHttpResponse: {}#{}{}\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" method return value in bean[\" + beanName+ \"] is not ClientHttpResponse: \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr);\n  }\n  if (type.equals(SentinelConstants.BLOCK_TYPE)) {\n    BlockClassRegistry.updateBlockHandlerFor(blockClass,blockMethod,foundMethod);\n  }\n else {\n    BlockClassRegistry.updateFallbackFor(blockClass,blockMethod,foundMethod);\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 249,
                    "astHeight": 10
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
                "nodePosition": {
                    "charLength": 146,
                    "startLineNumber": 134,
                    "startColumnNumber": 38,
                    "endLineNumber": 136,
                    "endColumnNumber": 34
                },
                "nodeContext": "type + \" method return value in bean[\" + beanName+ \"] is not ClientHttpResponse: \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr",
                "nodeType": "InfixExpression",
                "astNodeNumber": 11,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.lang.String"
        },
        {
            "nodeContext": "blockMethod",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 11,
                "startLineNumber": 139,
                "startColumnNumber": 56,
                "endLineNumber": 139,
                "endColumnNumber": 67
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 83,
                        "startLineNumber": 139,
                        "startColumnNumber": 3,
                        "endLineNumber": 140,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "BlockClassRegistry.updateBlockHandlerFor(blockClass,blockMethod,foundMethod)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 6,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 84,
                        "startLineNumber": 139,
                        "startColumnNumber": 3,
                        "endLineNumber": 140,
                        "endColumnNumber": 18
                    },
                    "nodeContext": "BlockClassRegistry.updateBlockHandlerFor(blockClass,blockMethod,foundMethod);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 93,
                        "startLineNumber": 138,
                        "startColumnNumber": 49,
                        "endLineNumber": 141,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  BlockClassRegistry.updateBlockHandlerFor(blockClass,blockMethod,foundMethod);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 232,
                        "startLineNumber": 138,
                        "startColumnNumber": 2,
                        "endLineNumber": 144,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (type.equals(SentinelConstants.BLOCK_TYPE)) {\n  BlockClassRegistry.updateBlockHandlerFor(blockClass,blockMethod,foundMethod);\n}\n else {\n  BlockClassRegistry.updateFallbackFor(blockClass,blockMethod,foundMethod);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 23,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2330,
                        "startLineNumber": 96,
                        "startColumnNumber": 33,
                        "endLineNumber": 145,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "{\n  if (blockClass == void.class && StringUtils.isEmpty(blockMethod)) {\n    return;\n  }\n  if (blockClass != void.class && StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} class attribute exists but {} method attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" class attribute exists but \" + type+ \" method attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n else   if (blockClass == void.class && !StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} method attribute exists but {} class attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" method attribute exists but \" + type+ \" class attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n  Class[] args=new Class[]{HttpRequest.class,byte[].class,ClientHttpRequestExecution.class,BlockException.class};\n  String argsStr=Arrays.toString(Arrays.stream(args).map(clazz -> clazz.getSimpleName()).toArray());\n  Method foundMethod=ClassUtils.getStaticMethod(blockClass,blockMethod,args);\n  if (foundMethod == null) {\n    logger.error(\"{} static method can not be found in bean[{}]. The right method signature is {}#{}{}, please check your class name, method name and arguments\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" static method can not be found in bean[\" + beanName+ \"]. The right method signature is \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr+ \", please check your class name, method name and arguments\");\n  }\n  if (!ClientHttpResponse.class.isAssignableFrom(foundMethod.getReturnType())) {\n    logger.error(\"{} method return value in bean[{}] is not ClientHttpResponse: {}#{}{}\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" method return value in bean[\" + beanName+ \"] is not ClientHttpResponse: \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr);\n  }\n  if (type.equals(SentinelConstants.BLOCK_TYPE)) {\n    BlockClassRegistry.updateBlockHandlerFor(blockClass,blockMethod,foundMethod);\n  }\n else {\n    BlockClassRegistry.updateFallbackFor(blockClass,blockMethod,foundMethod);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 227,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2441,
                        "startLineNumber": 95,
                        "startColumnNumber": 1,
                        "endLineNumber": 145,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "private void checkBlock4RestTemplate(Class<?> blockClass,String blockMethod,String beanName,String type){\n  if (blockClass == void.class && StringUtils.isEmpty(blockMethod)) {\n    return;\n  }\n  if (blockClass != void.class && StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} class attribute exists but {} method attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" class attribute exists but \" + type+ \" method attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n else   if (blockClass == void.class && !StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} method attribute exists but {} class attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" method attribute exists but \" + type+ \" class attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n  Class[] args=new Class[]{HttpRequest.class,byte[].class,ClientHttpRequestExecution.class,BlockException.class};\n  String argsStr=Arrays.toString(Arrays.stream(args).map(clazz -> clazz.getSimpleName()).toArray());\n  Method foundMethod=ClassUtils.getStaticMethod(blockClass,blockMethod,args);\n  if (foundMethod == null) {\n    logger.error(\"{} static method can not be found in bean[{}]. The right method signature is {}#{}{}, please check your class name, method name and arguments\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" static method can not be found in bean[\" + beanName+ \"]. The right method signature is \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr+ \", please check your class name, method name and arguments\");\n  }\n  if (!ClientHttpResponse.class.isAssignableFrom(foundMethod.getReturnType())) {\n    logger.error(\"{} method return value in bean[{}] is not ClientHttpResponse: {}#{}{}\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" method return value in bean[\" + beanName+ \"] is not ClientHttpResponse: \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr);\n  }\n  if (type.equals(SentinelConstants.BLOCK_TYPE)) {\n    BlockClassRegistry.updateBlockHandlerFor(blockClass,blockMethod,foundMethod);\n  }\n else {\n    BlockClassRegistry.updateFallbackFor(blockClass,blockMethod,foundMethod);\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 249,
                    "astHeight": 10
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                "nodePosition": {
                    "charLength": 83,
                    "startLineNumber": 139,
                    "startColumnNumber": 3,
                    "endLineNumber": 140,
                    "endColumnNumber": 17
                },
                "nodeContext": "BlockClassRegistry.updateBlockHandlerFor(blockClass,blockMethod,foundMethod)",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 6,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "java.lang.String"
        },
        {
            "nodeContext": "blockMethod",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 11,
                "startLineNumber": 143,
                "startColumnNumber": 52,
                "endLineNumber": 143,
                "endColumnNumber": 63
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 74,
                        "startLineNumber": 143,
                        "startColumnNumber": 3,
                        "endLineNumber": 143,
                        "endColumnNumber": 77
                    },
                    "nodeContext": "BlockClassRegistry.updateFallbackFor(blockClass,blockMethod,foundMethod)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 6,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 75,
                        "startLineNumber": 143,
                        "startColumnNumber": 3,
                        "endLineNumber": 143,
                        "endColumnNumber": 78
                    },
                    "nodeContext": "BlockClassRegistry.updateFallbackFor(blockClass,blockMethod,foundMethod);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 84,
                        "startLineNumber": 142,
                        "startColumnNumber": 7,
                        "endLineNumber": 144,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  BlockClassRegistry.updateFallbackFor(blockClass,blockMethod,foundMethod);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 232,
                        "startLineNumber": 138,
                        "startColumnNumber": 2,
                        "endLineNumber": 144,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "if (type.equals(SentinelConstants.BLOCK_TYPE)) {\n  BlockClassRegistry.updateBlockHandlerFor(blockClass,blockMethod,foundMethod);\n}\n else {\n  BlockClassRegistry.updateFallbackFor(blockClass,blockMethod,foundMethod);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 23,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2330,
                        "startLineNumber": 96,
                        "startColumnNumber": 33,
                        "endLineNumber": 145,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "{\n  if (blockClass == void.class && StringUtils.isEmpty(blockMethod)) {\n    return;\n  }\n  if (blockClass != void.class && StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} class attribute exists but {} method attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" class attribute exists but \" + type+ \" method attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n else   if (blockClass == void.class && !StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} method attribute exists but {} class attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" method attribute exists but \" + type+ \" class attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n  Class[] args=new Class[]{HttpRequest.class,byte[].class,ClientHttpRequestExecution.class,BlockException.class};\n  String argsStr=Arrays.toString(Arrays.stream(args).map(clazz -> clazz.getSimpleName()).toArray());\n  Method foundMethod=ClassUtils.getStaticMethod(blockClass,blockMethod,args);\n  if (foundMethod == null) {\n    logger.error(\"{} static method can not be found in bean[{}]. The right method signature is {}#{}{}, please check your class name, method name and arguments\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" static method can not be found in bean[\" + beanName+ \"]. The right method signature is \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr+ \", please check your class name, method name and arguments\");\n  }\n  if (!ClientHttpResponse.class.isAssignableFrom(foundMethod.getReturnType())) {\n    logger.error(\"{} method return value in bean[{}] is not ClientHttpResponse: {}#{}{}\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" method return value in bean[\" + beanName+ \"] is not ClientHttpResponse: \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr);\n  }\n  if (type.equals(SentinelConstants.BLOCK_TYPE)) {\n    BlockClassRegistry.updateBlockHandlerFor(blockClass,blockMethod,foundMethod);\n  }\n else {\n    BlockClassRegistry.updateFallbackFor(blockClass,blockMethod,foundMethod);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 227,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 2441,
                        "startLineNumber": 95,
                        "startColumnNumber": 1,
                        "endLineNumber": 145,
                        "endColumnNumber": 2
                    },
                    "nodeContext": "private void checkBlock4RestTemplate(Class<?> blockClass,String blockMethod,String beanName,String type){\n  if (blockClass == void.class && StringUtils.isEmpty(blockMethod)) {\n    return;\n  }\n  if (blockClass != void.class && StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} class attribute exists but {} method attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" class attribute exists but \" + type+ \" method attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n else   if (blockClass == void.class && !StringUtils.isEmpty(blockMethod)) {\n    logger.error(\"{} method attribute exists but {} class attribute is not exists in bean[{}]\",type,type,beanName);\n    throw new IllegalArgumentException(type + \" method attribute exists but \" + type+ \" class attribute is not exists in bean[\"+ beanName+ \"]\");\n  }\n  Class[] args=new Class[]{HttpRequest.class,byte[].class,ClientHttpRequestExecution.class,BlockException.class};\n  String argsStr=Arrays.toString(Arrays.stream(args).map(clazz -> clazz.getSimpleName()).toArray());\n  Method foundMethod=ClassUtils.getStaticMethod(blockClass,blockMethod,args);\n  if (foundMethod == null) {\n    logger.error(\"{} static method can not be found in bean[{}]. The right method signature is {}#{}{}, please check your class name, method name and arguments\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" static method can not be found in bean[\" + beanName+ \"]. The right method signature is \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr+ \", please check your class name, method name and arguments\");\n  }\n  if (!ClientHttpResponse.class.isAssignableFrom(foundMethod.getReturnType())) {\n    logger.error(\"{} method return value in bean[{}] is not ClientHttpResponse: {}#{}{}\",type,beanName,blockClass.getName(),blockMethod,argsStr);\n    throw new IllegalArgumentException(type + \" method return value in bean[\" + beanName+ \"] is not ClientHttpResponse: \"+ blockClass.getName()+ \"#\"+ blockMethod+ argsStr);\n  }\n  if (type.equals(SentinelConstants.BLOCK_TYPE)) {\n    BlockClassRegistry.updateBlockHandlerFor(blockClass,blockMethod,foundMethod);\n  }\n else {\n    BlockClassRegistry.updateFallbackFor(blockClass,blockMethod,foundMethod);\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 249,
                    "astHeight": 10
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 75,
                    "startLineNumber": 143,
                    "startColumnNumber": 3,
                    "endLineNumber": 143,
                    "endColumnNumber": 78
                },
                "nodeContext": "BlockClassRegistry.updateFallbackFor(blockClass,blockMethod,foundMethod);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 7,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.lang.String"
        }
    ],
    "positionList": [
        {
            "charLength": 11,
            "startLineNumber": 97,
            "startColumnNumber": 54,
            "endLineNumber": 97,
            "endColumnNumber": 65
        },
        {
            "charLength": 11,
            "startLineNumber": 100,
            "startColumnNumber": 54,
            "endLineNumber": 100,
            "endColumnNumber": 65
        },
        {
            "charLength": 11,
            "startLineNumber": 107,
            "startColumnNumber": 60,
            "endLineNumber": 107,
            "endColumnNumber": 71
        },
        {
            "charLength": 11,
            "startLineNumber": 118,
            "startColumnNumber": 62,
            "endLineNumber": 118,
            "endColumnNumber": 73
        },
        {
            "charLength": 11,
            "startLineNumber": 122,
            "startColumnNumber": 43,
            "endLineNumber": 122,
            "endColumnNumber": 54
        },
        {
            "charLength": 11,
            "startLineNumber": 126,
            "startColumnNumber": 7,
            "endLineNumber": 126,
            "endColumnNumber": 18
        },
        {
            "charLength": 11,
            "startLineNumber": 133,
            "startColumnNumber": 43,
            "endLineNumber": 133,
            "endColumnNumber": 54
        },
        {
            "charLength": 11,
            "startLineNumber": 136,
            "startColumnNumber": 13,
            "endLineNumber": 136,
            "endColumnNumber": 24
        },
        {
            "charLength": 11,
            "startLineNumber": 139,
            "startColumnNumber": 56,
            "endLineNumber": 139,
            "endColumnNumber": 67
        },
        {
            "charLength": 11,
            "startLineNumber": 143,
            "startColumnNumber": 52,
            "endLineNumber": 143,
            "endColumnNumber": 63
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 8,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 9,
            "layout": 5
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 3,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 4,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 8,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 9,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 6,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 8,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 9,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 8,
            "layout": 3
        }
    ]
}