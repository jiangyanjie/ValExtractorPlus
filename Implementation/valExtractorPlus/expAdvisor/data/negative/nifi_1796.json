{
    "id": 1796,
    "expression": "(ViewableContent)request.getAttribute(ViewableContent.CONTENT_REQUEST_ATTRIBUTE)",
    "projectName": "nifi",
    "commitID": "236a2b72b6f1074040b3800377216af2bcba65af",
    "filePath": "nifi-nar-bundles/nifi-standard-bundle/nifi-standard-content-viewer/src/main/java/org/apache/nifi/web/StandardContentViewerController.java",
    "occurrences": 1,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "(ViewableContent)request.getAttribute(ViewableContent.CONTENT_REQUEST_ATTRIBUTE)",
            "nodeType": "CastExpression",
            "nodePosition": {
                "charLength": 81,
                "startLineNumber": 50,
                "startColumnNumber": 40,
                "endLineNumber": 50,
                "endColumnNumber": 121
            },
            "astNodeNumber": 9,
            "astHeight": 4,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 91,
                        "startLineNumber": 50,
                        "startColumnNumber": 30,
                        "endLineNumber": 50,
                        "endColumnNumber": 121
                    },
                    "nodeContext": "content=(ViewableContent)request.getAttribute(ViewableContent.CONTENT_REQUEST_ATTRIBUTE)",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 11,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 114,
                        "startLineNumber": 50,
                        "startColumnNumber": 8,
                        "endLineNumber": 50,
                        "endColumnNumber": 122
                    },
                    "nodeContext": "final ViewableContent content=(ViewableContent)request.getAttribute(ViewableContent.CONTENT_REQUEST_ATTRIBUTE);\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 15,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2693,
                        "startLineNumber": 49,
                        "startColumnNumber": 120,
                        "endLineNumber": 99,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final ViewableContent content=(ViewableContent)request.getAttribute(ViewableContent.CONTENT_REQUEST_ATTRIBUTE);\n  if (\"application/json\".equals(content.getContentType()) || \"application/xml\".equals(content.getContentType()) || \"text/plain\".equals(content.getContentType())) {\n    final String formatted;\n    if (DisplayMode.Original.equals(content.getDisplayMode())) {\n      formatted=content.getContent();\n    }\n else {\n      if (\"application/json\".equals(content.getContentType())) {\n        final ObjectMapper mapper=new ObjectMapper();\n        final Object objectJson=mapper.readValue(content.getContentStream(),Object.class);\n        formatted=mapper.writerWithDefaultPrettyPrinter().writeValueAsString(objectJson);\n      }\n else       if (\"application/xml\".equals(content.getContentType())) {\n        final StringWriter writer=new StringWriter();\n        try {\n          final StreamSource source=new StreamSource(content.getContentStream());\n          final StreamResult result=new StreamResult(writer);\n          final TransformerFactory transformFactory=TransformerFactory.newInstance();\n          final Transformer transformer=transformFactory.newTransformer();\n          transformer.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\",\"2\");\n          transformer.setOutputProperty(OutputKeys.INDENT,\"yes\");\n          transformer.transform(source,result);\n        }\n catch (        final TransformerFactoryConfigurationError|TransformerException te) {\n          throw new IOException(\"Unable to transform content as XML: \" + te,te);\n        }\n        formatted=writer.toString();\n      }\n else {\n        formatted=content.getContent();\n      }\n    }\n    request.setAttribute(\"mode\",content.getContentType());\n    request.setAttribute(\"content\",formatted);\n    request.getRequestDispatcher(\"/WEB-INF/jsp/codemirror.jsp\").include(request,response);\n  }\n else {\n    final PrintWriter out=response.getWriter();\n    out.println(\"Unexpected content type: \" + content.getContentType());\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 253,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3041,
                        "startLineNumber": 41,
                        "startColumnNumber": 4,
                        "endLineNumber": 99,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * @param request servlet request\n * @param response servlet response\n * @throws ServletException if a servlet-specific error occurs\n * @throws IOException if an I/O error occurs\n */\n@Override protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {\n  final ViewableContent content=(ViewableContent)request.getAttribute(ViewableContent.CONTENT_REQUEST_ATTRIBUTE);\n  if (\"application/json\".equals(content.getContentType()) || \"application/xml\".equals(content.getContentType()) || \"text/plain\".equals(content.getContentType())) {\n    final String formatted;\n    if (DisplayMode.Original.equals(content.getDisplayMode())) {\n      formatted=content.getContent();\n    }\n else {\n      if (\"application/json\".equals(content.getContentType())) {\n        final ObjectMapper mapper=new ObjectMapper();\n        final Object objectJson=mapper.readValue(content.getContentStream(),Object.class);\n        formatted=mapper.writerWithDefaultPrettyPrinter().writeValueAsString(objectJson);\n      }\n else       if (\"application/xml\".equals(content.getContentType())) {\n        final StringWriter writer=new StringWriter();\n        try {\n          final StreamSource source=new StreamSource(content.getContentStream());\n          final StreamResult result=new StreamResult(writer);\n          final TransformerFactory transformFactory=TransformerFactory.newInstance();\n          final Transformer transformer=transformFactory.newTransformer();\n          transformer.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\",\"2\");\n          transformer.setOutputProperty(OutputKeys.INDENT,\"yes\");\n          transformer.transform(source,result);\n        }\n catch (        final TransformerFactoryConfigurationError|TransformerException te) {\n          throw new IOException(\"Unable to transform content as XML: \" + te,te);\n        }\n        formatted=writer.toString();\n      }\n else {\n        formatted=content.getContent();\n      }\n    }\n    request.setAttribute(\"mode\",content.getContentType());\n    request.setAttribute(\"content\",formatted);\n    request.getRequestDispatcher(\"/WEB-INF/jsp/codemirror.jsp\").include(request,response);\n  }\n else {\n    final PrintWriter out=response.getWriter();\n    out.println(\"Unexpected content type: \" + content.getContentType());\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 272,
                    "astHeight": 16
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 114,
                    "startLineNumber": 50,
                    "startColumnNumber": 8,
                    "endLineNumber": 50,
                    "endColumnNumber": 122
                },
                "nodeContext": "final ViewableContent content=(ViewableContent)request.getAttribute(ViewableContent.CONTENT_REQUEST_ATTRIBUTE);\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 15,
                "astHeight": 6
            },
            "tokenLength": 7,
            "type": "org.apache.nifi.web.ViewableContent"
        }
    ],
    "positionList": [
        {
            "charLength": 81,
            "startLineNumber": 50,
            "startColumnNumber": 40,
            "endLineNumber": 50,
            "endColumnNumber": 121
        }
    ],
    "layoutRelationDataList": []
}