{
    "id": 186,
    "expression": "entity",
    "projectName": "square@retrofit",
    "commitID": "4b178f1233a2ed6275b86afe78c604a71e2f4af1",
    "filePath": "retrofit/src/main/java/retrofit/http/RestAdapter.java",
    "occurrences": 2,
    "isArithmeticExpression": 0,
    "isGetTypeMethod": 0,
    "expressionList": [
        {
            "nodeContext": "entity",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 6,
                "startLineNumber": 167,
                "startColumnNumber": 12,
                "endLineNumber": 167,
                "endColumnNumber": 18
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 14,
                        "startLineNumber": 167,
                        "startColumnNumber": 12,
                        "endLineNumber": 167,
                        "endColumnNumber": 26
                    },
                    "nodeContext": "entity != null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 81,
                        "startLineNumber": 167,
                        "startColumnNumber": 8,
                        "endLineNumber": 169,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (entity != null) {\n  body=EntityUtils.toByteArray(entity);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 12,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 2989,
                        "startLineNumber": 127,
                        "startColumnNumber": 10,
                        "endLineNumber": 200,
                        "endColumnNumber": 7
                    },
                    "nodeContext": "{\n  final HttpUriRequest request=new HttpRequestBuilder(converter).setMethod(method,isSynchronousInvocation).setArgs(args).setApiUrl(url).setHeaders(requestHeaders).build();\n  url=request.getURI().toString();\n  if (!isSynchronousInvocation) {\n    Thread.currentThread().setName(THREAD_PREFIX + url);\n  }\n  Type type=responseTypeCache.get(method);\n  if (type == null) {\n    type=getResponseObjectType(method,isSynchronousInvocation);\n    responseTypeCache.put(method,type);\n  }\n  Object profilerObject=null;\n  if (profiler != null) {\n    profilerObject=profiler.beforeCall();\n  }\n  LOGGER.fine(\"Sending \" + request.getMethod() + \" to \"+ request.getURI());\n  HttpResponse response=httpClientProvider.get().execute(request);\n  StatusLine statusLine=response.getStatusLine();\n  int statusCode=statusLine.getStatusCode();\n  long elapsedTime=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  if (profiler != null) {\n    RequestInformation requestInfo=getRequestInfo(server,method,request);\n    profiler.afterCall(requestInfo,elapsedTime,statusCode,profilerObject);\n  }\n  HttpEntity entity=response.getEntity();\n  byte[] body=null;\n  if (entity != null) {\n    body=EntityUtils.toByteArray(entity);\n  }\n  if (LOGGER.isLoggable(Level.FINE)) {\n    logResponseBody(url,body,statusCode,elapsedTime);\n  }\n  org.apache.http.Header[] realHeaders=response.getAllHeaders();\n  Header[] headers=null;\n  if (realHeaders != null) {\n    headers=new Header[realHeaders.length];\n    for (int i=0; i < realHeaders.length; i++) {\n      org.apache.http.Header realHeader=realHeaders[i];\n      String headerName=realHeader.getName();\n      String headerValue=realHeader.getValue();\n      if (HTTP.CONTENT_TYPE.equalsIgnoreCase(headerName) && !UTF_8.equalsIgnoreCase(Utils.parseCharset(headerValue))) {\n        throw new IOException(\"Only UTF-8 charset supported.\");\n      }\n      headers[i]=new Header(headerName,headerValue);\n    }\n  }\n  if (statusCode >= 200 && statusCode < 300) {\n    try {\n      return converter.to(body,type);\n    }\n catch (    ConversionException e) {\n      throw RetrofitError.conversionError(url,converter,statusCode,headers,body,type,e);\n    }\n  }\n  throw RetrofitError.httpError(url,converter,statusCode,headers,body,type);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 369,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3241,
                        "startLineNumber": 127,
                        "startColumnNumber": 6,
                        "endLineNumber": 206,
                        "endColumnNumber": 7
                    },
                    "nodeContext": "try {\n  final HttpUriRequest request=new HttpRequestBuilder(converter).setMethod(method,isSynchronousInvocation).setArgs(args).setApiUrl(url).setHeaders(requestHeaders).build();\n  url=request.getURI().toString();\n  if (!isSynchronousInvocation) {\n    Thread.currentThread().setName(THREAD_PREFIX + url);\n  }\n  Type type=responseTypeCache.get(method);\n  if (type == null) {\n    type=getResponseObjectType(method,isSynchronousInvocation);\n    responseTypeCache.put(method,type);\n  }\n  Object profilerObject=null;\n  if (profiler != null) {\n    profilerObject=profiler.beforeCall();\n  }\n  LOGGER.fine(\"Sending \" + request.getMethod() + \" to \"+ request.getURI());\n  HttpResponse response=httpClientProvider.get().execute(request);\n  StatusLine statusLine=response.getStatusLine();\n  int statusCode=statusLine.getStatusCode();\n  long elapsedTime=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  if (profiler != null) {\n    RequestInformation requestInfo=getRequestInfo(server,method,request);\n    profiler.afterCall(requestInfo,elapsedTime,statusCode,profilerObject);\n  }\n  HttpEntity entity=response.getEntity();\n  byte[] body=null;\n  if (entity != null) {\n    body=EntityUtils.toByteArray(entity);\n  }\n  if (LOGGER.isLoggable(Level.FINE)) {\n    logResponseBody(url,body,statusCode,elapsedTime);\n  }\n  org.apache.http.Header[] realHeaders=response.getAllHeaders();\n  Header[] headers=null;\n  if (realHeaders != null) {\n    headers=new Header[realHeaders.length];\n    for (int i=0; i < realHeaders.length; i++) {\n      org.apache.http.Header realHeader=realHeaders[i];\n      String headerName=realHeader.getName();\n      String headerValue=realHeader.getValue();\n      if (HTTP.CONTENT_TYPE.equalsIgnoreCase(headerName) && !UTF_8.equalsIgnoreCase(Utils.parseCharset(headerValue))) {\n        throw new IOException(\"Only UTF-8 charset supported.\");\n      }\n      headers[i]=new Header(headerName,headerValue);\n    }\n  }\n  if (statusCode >= 200 && statusCode < 300) {\n    try {\n      return converter.to(body,type);\n    }\n catch (    ConversionException e) {\n      throw RetrofitError.conversionError(url,converter,statusCode,headers,body,type,e);\n    }\n  }\n  throw RetrofitError.httpError(url,converter,statusCode,headers,body,type);\n}\n catch (RetrofitError e) {\n  throw e;\n}\ncatch (IOException e) {\n  throw RetrofitError.networkError(url,e);\n}\ncatch (Throwable t) {\n  throw RetrofitError.unexpectedError(url,t);\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 402,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3329,
                        "startLineNumber": 124,
                        "startColumnNumber": 96,
                        "endLineNumber": 207,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  long start=System.nanoTime();\n  String url=server.apiUrl();\n  try {\n    final HttpUriRequest request=new HttpRequestBuilder(converter).setMethod(method,isSynchronousInvocation).setArgs(args).setApiUrl(url).setHeaders(requestHeaders).build();\n    url=request.getURI().toString();\n    if (!isSynchronousInvocation) {\n      Thread.currentThread().setName(THREAD_PREFIX + url);\n    }\n    Type type=responseTypeCache.get(method);\n    if (type == null) {\n      type=getResponseObjectType(method,isSynchronousInvocation);\n      responseTypeCache.put(method,type);\n    }\n    Object profilerObject=null;\n    if (profiler != null) {\n      profilerObject=profiler.beforeCall();\n    }\n    LOGGER.fine(\"Sending \" + request.getMethod() + \" to \"+ request.getURI());\n    HttpResponse response=httpClientProvider.get().execute(request);\n    StatusLine statusLine=response.getStatusLine();\n    int statusCode=statusLine.getStatusCode();\n    long elapsedTime=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n    if (profiler != null) {\n      RequestInformation requestInfo=getRequestInfo(server,method,request);\n      profiler.afterCall(requestInfo,elapsedTime,statusCode,profilerObject);\n    }\n    HttpEntity entity=response.getEntity();\n    byte[] body=null;\n    if (entity != null) {\n      body=EntityUtils.toByteArray(entity);\n    }\n    if (LOGGER.isLoggable(Level.FINE)) {\n      logResponseBody(url,body,statusCode,elapsedTime);\n    }\n    org.apache.http.Header[] realHeaders=response.getAllHeaders();\n    Header[] headers=null;\n    if (realHeaders != null) {\n      headers=new Header[realHeaders.length];\n      for (int i=0; i < realHeaders.length; i++) {\n        org.apache.http.Header realHeader=realHeaders[i];\n        String headerName=realHeader.getName();\n        String headerValue=realHeader.getValue();\n        if (HTTP.CONTENT_TYPE.equalsIgnoreCase(headerName) && !UTF_8.equalsIgnoreCase(Utils.parseCharset(headerValue))) {\n          throw new IOException(\"Only UTF-8 charset supported.\");\n        }\n        headers[i]=new Header(headerName,headerValue);\n      }\n    }\n    if (statusCode >= 200 && statusCode < 300) {\n      try {\n        return converter.to(body,type);\n      }\n catch (      ConversionException e) {\n        throw RetrofitError.conversionError(url,converter,statusCode,headers,body,type,e);\n      }\n    }\n    throw RetrofitError.httpError(url,converter,statusCode,headers,body,type);\n  }\n catch (  RetrofitError e) {\n    throw e;\n  }\ncatch (  IOException e) {\n    throw RetrofitError.networkError(url,e);\n  }\ncatch (  Throwable t) {\n    throw RetrofitError.unexpectedError(url,t);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 418,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3620,
                        "startLineNumber": 118,
                        "startColumnNumber": 4,
                        "endLineNumber": 207,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Execute an HTTP request.\n * @return HTTP response object of specified {@code type}.\n * @throws RetrofitError Thrown if any error occurs during the HTTP request.\n */\nprivate Object invokeRequest(Method method,Object[] args,boolean isSynchronousInvocation){\n  long start=System.nanoTime();\n  String url=server.apiUrl();\n  try {\n    final HttpUriRequest request=new HttpRequestBuilder(converter).setMethod(method,isSynchronousInvocation).setArgs(args).setApiUrl(url).setHeaders(requestHeaders).build();\n    url=request.getURI().toString();\n    if (!isSynchronousInvocation) {\n      Thread.currentThread().setName(THREAD_PREFIX + url);\n    }\n    Type type=responseTypeCache.get(method);\n    if (type == null) {\n      type=getResponseObjectType(method,isSynchronousInvocation);\n      responseTypeCache.put(method,type);\n    }\n    Object profilerObject=null;\n    if (profiler != null) {\n      profilerObject=profiler.beforeCall();\n    }\n    LOGGER.fine(\"Sending \" + request.getMethod() + \" to \"+ request.getURI());\n    HttpResponse response=httpClientProvider.get().execute(request);\n    StatusLine statusLine=response.getStatusLine();\n    int statusCode=statusLine.getStatusCode();\n    long elapsedTime=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n    if (profiler != null) {\n      RequestInformation requestInfo=getRequestInfo(server,method,request);\n      profiler.afterCall(requestInfo,elapsedTime,statusCode,profilerObject);\n    }\n    HttpEntity entity=response.getEntity();\n    byte[] body=null;\n    if (entity != null) {\n      body=EntityUtils.toByteArray(entity);\n    }\n    if (LOGGER.isLoggable(Level.FINE)) {\n      logResponseBody(url,body,statusCode,elapsedTime);\n    }\n    org.apache.http.Header[] realHeaders=response.getAllHeaders();\n    Header[] headers=null;\n    if (realHeaders != null) {\n      headers=new Header[realHeaders.length];\n      for (int i=0; i < realHeaders.length; i++) {\n        org.apache.http.Header realHeader=realHeaders[i];\n        String headerName=realHeader.getName();\n        String headerValue=realHeader.getValue();\n        if (HTTP.CONTENT_TYPE.equalsIgnoreCase(headerName) && !UTF_8.equalsIgnoreCase(Utils.parseCharset(headerValue))) {\n          throw new IOException(\"Only UTF-8 charset supported.\");\n        }\n        headers[i]=new Header(headerName,headerValue);\n      }\n    }\n    if (statusCode >= 200 && statusCode < 300) {\n      try {\n        return converter.to(body,type);\n      }\n catch (      ConversionException e) {\n        throw RetrofitError.conversionError(url,converter,statusCode,headers,body,type,e);\n      }\n    }\n    throw RetrofitError.httpError(url,converter,statusCode,headers,body,type);\n  }\n catch (  RetrofitError e) {\n    throw e;\n  }\ncatch (  IOException e) {\n    throw RetrofitError.networkError(url,e);\n  }\ncatch (  Throwable t) {\n    throw RetrofitError.unexpectedError(url,t);\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 437,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 14,
                    "startLineNumber": 167,
                    "startColumnNumber": 12,
                    "endLineNumber": 167,
                    "endColumnNumber": 26
                },
                "nodeContext": "entity != null",
                "nodeType": "InfixExpression",
                "astNodeNumber": 3,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "retrofit.http.HttpEntity"
        },
        {
            "nodeContext": "entity",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 6,
                "startLineNumber": 168,
                "startColumnNumber": 41,
                "endLineNumber": 168,
                "endColumnNumber": 47
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 31,
                        "startLineNumber": 168,
                        "startColumnNumber": 17,
                        "endLineNumber": 168,
                        "endColumnNumber": 48
                    },
                    "nodeContext": "EntityUtils.toByteArray(entity)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 38,
                        "startLineNumber": 168,
                        "startColumnNumber": 10,
                        "endLineNumber": 168,
                        "endColumnNumber": 48
                    },
                    "nodeContext": "body=EntityUtils.toByteArray(entity)",
                    "nodeType": "Assignment",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 39,
                        "startLineNumber": 168,
                        "startColumnNumber": 10,
                        "endLineNumber": 168,
                        "endColumnNumber": 49
                    },
                    "nodeContext": "body=EntityUtils.toByteArray(entity);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 61,
                        "startLineNumber": 167,
                        "startColumnNumber": 28,
                        "endLineNumber": 169,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  body=EntityUtils.toByteArray(entity);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 81,
                        "startLineNumber": 167,
                        "startColumnNumber": 8,
                        "endLineNumber": 169,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (entity != null) {\n  body=EntityUtils.toByteArray(entity);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 12,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 2989,
                        "startLineNumber": 127,
                        "startColumnNumber": 10,
                        "endLineNumber": 200,
                        "endColumnNumber": 7
                    },
                    "nodeContext": "{\n  final HttpUriRequest request=new HttpRequestBuilder(converter).setMethod(method,isSynchronousInvocation).setArgs(args).setApiUrl(url).setHeaders(requestHeaders).build();\n  url=request.getURI().toString();\n  if (!isSynchronousInvocation) {\n    Thread.currentThread().setName(THREAD_PREFIX + url);\n  }\n  Type type=responseTypeCache.get(method);\n  if (type == null) {\n    type=getResponseObjectType(method,isSynchronousInvocation);\n    responseTypeCache.put(method,type);\n  }\n  Object profilerObject=null;\n  if (profiler != null) {\n    profilerObject=profiler.beforeCall();\n  }\n  LOGGER.fine(\"Sending \" + request.getMethod() + \" to \"+ request.getURI());\n  HttpResponse response=httpClientProvider.get().execute(request);\n  StatusLine statusLine=response.getStatusLine();\n  int statusCode=statusLine.getStatusCode();\n  long elapsedTime=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  if (profiler != null) {\n    RequestInformation requestInfo=getRequestInfo(server,method,request);\n    profiler.afterCall(requestInfo,elapsedTime,statusCode,profilerObject);\n  }\n  HttpEntity entity=response.getEntity();\n  byte[] body=null;\n  if (entity != null) {\n    body=EntityUtils.toByteArray(entity);\n  }\n  if (LOGGER.isLoggable(Level.FINE)) {\n    logResponseBody(url,body,statusCode,elapsedTime);\n  }\n  org.apache.http.Header[] realHeaders=response.getAllHeaders();\n  Header[] headers=null;\n  if (realHeaders != null) {\n    headers=new Header[realHeaders.length];\n    for (int i=0; i < realHeaders.length; i++) {\n      org.apache.http.Header realHeader=realHeaders[i];\n      String headerName=realHeader.getName();\n      String headerValue=realHeader.getValue();\n      if (HTTP.CONTENT_TYPE.equalsIgnoreCase(headerName) && !UTF_8.equalsIgnoreCase(Utils.parseCharset(headerValue))) {\n        throw new IOException(\"Only UTF-8 charset supported.\");\n      }\n      headers[i]=new Header(headerName,headerValue);\n    }\n  }\n  if (statusCode >= 200 && statusCode < 300) {\n    try {\n      return converter.to(body,type);\n    }\n catch (    ConversionException e) {\n      throw RetrofitError.conversionError(url,converter,statusCode,headers,body,type,e);\n    }\n  }\n  throw RetrofitError.httpError(url,converter,statusCode,headers,body,type);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 369,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 3241,
                        "startLineNumber": 127,
                        "startColumnNumber": 6,
                        "endLineNumber": 206,
                        "endColumnNumber": 7
                    },
                    "nodeContext": "try {\n  final HttpUriRequest request=new HttpRequestBuilder(converter).setMethod(method,isSynchronousInvocation).setArgs(args).setApiUrl(url).setHeaders(requestHeaders).build();\n  url=request.getURI().toString();\n  if (!isSynchronousInvocation) {\n    Thread.currentThread().setName(THREAD_PREFIX + url);\n  }\n  Type type=responseTypeCache.get(method);\n  if (type == null) {\n    type=getResponseObjectType(method,isSynchronousInvocation);\n    responseTypeCache.put(method,type);\n  }\n  Object profilerObject=null;\n  if (profiler != null) {\n    profilerObject=profiler.beforeCall();\n  }\n  LOGGER.fine(\"Sending \" + request.getMethod() + \" to \"+ request.getURI());\n  HttpResponse response=httpClientProvider.get().execute(request);\n  StatusLine statusLine=response.getStatusLine();\n  int statusCode=statusLine.getStatusCode();\n  long elapsedTime=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n  if (profiler != null) {\n    RequestInformation requestInfo=getRequestInfo(server,method,request);\n    profiler.afterCall(requestInfo,elapsedTime,statusCode,profilerObject);\n  }\n  HttpEntity entity=response.getEntity();\n  byte[] body=null;\n  if (entity != null) {\n    body=EntityUtils.toByteArray(entity);\n  }\n  if (LOGGER.isLoggable(Level.FINE)) {\n    logResponseBody(url,body,statusCode,elapsedTime);\n  }\n  org.apache.http.Header[] realHeaders=response.getAllHeaders();\n  Header[] headers=null;\n  if (realHeaders != null) {\n    headers=new Header[realHeaders.length];\n    for (int i=0; i < realHeaders.length; i++) {\n      org.apache.http.Header realHeader=realHeaders[i];\n      String headerName=realHeader.getName();\n      String headerValue=realHeader.getValue();\n      if (HTTP.CONTENT_TYPE.equalsIgnoreCase(headerName) && !UTF_8.equalsIgnoreCase(Utils.parseCharset(headerValue))) {\n        throw new IOException(\"Only UTF-8 charset supported.\");\n      }\n      headers[i]=new Header(headerName,headerValue);\n    }\n  }\n  if (statusCode >= 200 && statusCode < 300) {\n    try {\n      return converter.to(body,type);\n    }\n catch (    ConversionException e) {\n      throw RetrofitError.conversionError(url,converter,statusCode,headers,body,type,e);\n    }\n  }\n  throw RetrofitError.httpError(url,converter,statusCode,headers,body,type);\n}\n catch (RetrofitError e) {\n  throw e;\n}\ncatch (IOException e) {\n  throw RetrofitError.networkError(url,e);\n}\ncatch (Throwable t) {\n  throw RetrofitError.unexpectedError(url,t);\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 402,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 3329,
                        "startLineNumber": 124,
                        "startColumnNumber": 96,
                        "endLineNumber": 207,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  long start=System.nanoTime();\n  String url=server.apiUrl();\n  try {\n    final HttpUriRequest request=new HttpRequestBuilder(converter).setMethod(method,isSynchronousInvocation).setArgs(args).setApiUrl(url).setHeaders(requestHeaders).build();\n    url=request.getURI().toString();\n    if (!isSynchronousInvocation) {\n      Thread.currentThread().setName(THREAD_PREFIX + url);\n    }\n    Type type=responseTypeCache.get(method);\n    if (type == null) {\n      type=getResponseObjectType(method,isSynchronousInvocation);\n      responseTypeCache.put(method,type);\n    }\n    Object profilerObject=null;\n    if (profiler != null) {\n      profilerObject=profiler.beforeCall();\n    }\n    LOGGER.fine(\"Sending \" + request.getMethod() + \" to \"+ request.getURI());\n    HttpResponse response=httpClientProvider.get().execute(request);\n    StatusLine statusLine=response.getStatusLine();\n    int statusCode=statusLine.getStatusCode();\n    long elapsedTime=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n    if (profiler != null) {\n      RequestInformation requestInfo=getRequestInfo(server,method,request);\n      profiler.afterCall(requestInfo,elapsedTime,statusCode,profilerObject);\n    }\n    HttpEntity entity=response.getEntity();\n    byte[] body=null;\n    if (entity != null) {\n      body=EntityUtils.toByteArray(entity);\n    }\n    if (LOGGER.isLoggable(Level.FINE)) {\n      logResponseBody(url,body,statusCode,elapsedTime);\n    }\n    org.apache.http.Header[] realHeaders=response.getAllHeaders();\n    Header[] headers=null;\n    if (realHeaders != null) {\n      headers=new Header[realHeaders.length];\n      for (int i=0; i < realHeaders.length; i++) {\n        org.apache.http.Header realHeader=realHeaders[i];\n        String headerName=realHeader.getName();\n        String headerValue=realHeader.getValue();\n        if (HTTP.CONTENT_TYPE.equalsIgnoreCase(headerName) && !UTF_8.equalsIgnoreCase(Utils.parseCharset(headerValue))) {\n          throw new IOException(\"Only UTF-8 charset supported.\");\n        }\n        headers[i]=new Header(headerName,headerValue);\n      }\n    }\n    if (statusCode >= 200 && statusCode < 300) {\n      try {\n        return converter.to(body,type);\n      }\n catch (      ConversionException e) {\n        throw RetrofitError.conversionError(url,converter,statusCode,headers,body,type,e);\n      }\n    }\n    throw RetrofitError.httpError(url,converter,statusCode,headers,body,type);\n  }\n catch (  RetrofitError e) {\n    throw e;\n  }\ncatch (  IOException e) {\n    throw RetrofitError.networkError(url,e);\n  }\ncatch (  Throwable t) {\n    throw RetrofitError.unexpectedError(url,t);\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 418,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3620,
                        "startLineNumber": 118,
                        "startColumnNumber": 4,
                        "endLineNumber": 207,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Execute an HTTP request.\n * @return HTTP response object of specified {@code type}.\n * @throws RetrofitError Thrown if any error occurs during the HTTP request.\n */\nprivate Object invokeRequest(Method method,Object[] args,boolean isSynchronousInvocation){\n  long start=System.nanoTime();\n  String url=server.apiUrl();\n  try {\n    final HttpUriRequest request=new HttpRequestBuilder(converter).setMethod(method,isSynchronousInvocation).setArgs(args).setApiUrl(url).setHeaders(requestHeaders).build();\n    url=request.getURI().toString();\n    if (!isSynchronousInvocation) {\n      Thread.currentThread().setName(THREAD_PREFIX + url);\n    }\n    Type type=responseTypeCache.get(method);\n    if (type == null) {\n      type=getResponseObjectType(method,isSynchronousInvocation);\n      responseTypeCache.put(method,type);\n    }\n    Object profilerObject=null;\n    if (profiler != null) {\n      profilerObject=profiler.beforeCall();\n    }\n    LOGGER.fine(\"Sending \" + request.getMethod() + \" to \"+ request.getURI());\n    HttpResponse response=httpClientProvider.get().execute(request);\n    StatusLine statusLine=response.getStatusLine();\n    int statusCode=statusLine.getStatusCode();\n    long elapsedTime=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n    if (profiler != null) {\n      RequestInformation requestInfo=getRequestInfo(server,method,request);\n      profiler.afterCall(requestInfo,elapsedTime,statusCode,profilerObject);\n    }\n    HttpEntity entity=response.getEntity();\n    byte[] body=null;\n    if (entity != null) {\n      body=EntityUtils.toByteArray(entity);\n    }\n    if (LOGGER.isLoggable(Level.FINE)) {\n      logResponseBody(url,body,statusCode,elapsedTime);\n    }\n    org.apache.http.Header[] realHeaders=response.getAllHeaders();\n    Header[] headers=null;\n    if (realHeaders != null) {\n      headers=new Header[realHeaders.length];\n      for (int i=0; i < realHeaders.length; i++) {\n        org.apache.http.Header realHeader=realHeaders[i];\n        String headerName=realHeader.getName();\n        String headerValue=realHeader.getValue();\n        if (HTTP.CONTENT_TYPE.equalsIgnoreCase(headerName) && !UTF_8.equalsIgnoreCase(Utils.parseCharset(headerValue))) {\n          throw new IOException(\"Only UTF-8 charset supported.\");\n        }\n        headers[i]=new Header(headerName,headerValue);\n      }\n    }\n    if (statusCode >= 200 && statusCode < 300) {\n      try {\n        return converter.to(body,type);\n      }\n catch (      ConversionException e) {\n        throw RetrofitError.conversionError(url,converter,statusCode,headers,body,type,e);\n      }\n    }\n    throw RetrofitError.httpError(url,converter,statusCode,headers,body,type);\n  }\n catch (  RetrofitError e) {\n    throw e;\n  }\ncatch (  IOException e) {\n    throw RetrofitError.networkError(url,e);\n  }\ncatch (  Throwable t) {\n    throw RetrofitError.unexpectedError(url,t);\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 437,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 39,
                    "startLineNumber": 168,
                    "startColumnNumber": 10,
                    "endLineNumber": 168,
                    "endColumnNumber": 49
                },
                "nodeContext": "body=EntityUtils.toByteArray(entity);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 7,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "retrofit.http.HttpEntity"
        }
    ],
    "positionList": [
        {
            "charLength": 6,
            "startLineNumber": 167,
            "startColumnNumber": 12,
            "endLineNumber": 167,
            "endColumnNumber": 18
        },
        {
            "charLength": 6,
            "startLineNumber": 168,
            "startColumnNumber": 41,
            "endLineNumber": 168,
            "endColumnNumber": 47
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 1
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 4
        }
    ]
}