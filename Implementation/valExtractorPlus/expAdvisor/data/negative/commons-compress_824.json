{
    "id": 824,
    "expression": "getName()",
    "projectName": "commons-compress",
    "commitID": "a3b3b82506426708a7048405c2b77c1ebfdbf361",
    "filePath": "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java",
    "occurrences": 2,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "getName()",
            "nodeType": "MethodInvocation",
            "nodePosition": {
                "charLength": 9,
                "startLineNumber": 955,
                "startColumnNumber": 26,
                "endLineNumber": 955,
                "endColumnNumber": 35
            },
            "astNodeNumber": 2,
            "astHeight": 2,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
                    "nodePosition": {
                        "charLength": 105,
                        "startLineNumber": 954,
                        "startColumnNumber": 42,
                        "endLineNumber": 955,
                        "endColumnNumber": 60
                    },
                    "nodeContext": "\"Corrupted TAR archive. Sparse blocks for \" + getName() + \" overlap each other.\"",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
                    "nodePosition": {
                        "charLength": 122,
                        "startLineNumber": 954,
                        "startColumnNumber": 26,
                        "endLineNumber": 955,
                        "endColumnNumber": 61
                    },
                    "nodeContext": "new IOException(\"Corrupted TAR archive. Sparse blocks for \" + getName() + \" overlap each other.\")",
                    "nodeType": "ClassInstanceCreation",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 129,
                        "startLineNumber": 954,
                        "startColumnNumber": 20,
                        "endLineNumber": 955,
                        "endColumnNumber": 62
                    },
                    "nodeContext": "throw new IOException(\"Corrupted TAR archive. Sparse blocks for \" + getName() + \" overlap each other.\");\n",
                    "nodeType": "ThrowStatement",
                    "astNodeNumber": 9,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 171,
                        "startLineNumber": 953,
                        "startColumnNumber": 101,
                        "endLineNumber": 956,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  throw new IOException(\"Corrupted TAR archive. Sparse blocks for \" + getName() + \" overlap each other.\");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 10,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 256,
                        "startLineNumber": 953,
                        "startColumnNumber": 16,
                        "endLineNumber": 956,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (str.getOffset() + str.getNumbytes() > orderedAndFiltered.get(i + 1).getOffset()) {\n  throw new IOException(\"Corrupted TAR archive. Sparse blocks for \" + getName() + \" overlap each other.\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 27,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 290,
                        "startLineNumber": 952,
                        "startColumnNumber": 51,
                        "endLineNumber": 957,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  if (str.getOffset() + str.getNumbytes() > orderedAndFiltered.get(i + 1).getOffset()) {\n    throw new IOException(\"Corrupted TAR archive. Sparse blocks for \" + getName() + \" overlap each other.\");\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 28,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 329,
                        "startLineNumber": 952,
                        "startColumnNumber": 12,
                        "endLineNumber": 957,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (i + 1 < orderedAndFiltered.size()) {\n  if (str.getOffset() + str.getNumbytes() > orderedAndFiltered.get(i + 1).getOffset()) {\n    throw new IOException(\"Corrupted TAR archive. Sparse blocks for \" + getName() + \" overlap each other.\");\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 36,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 700,
                        "startLineNumber": 950,
                        "startColumnNumber": 60,
                        "endLineNumber": 963,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final TarArchiveStructSparse str=orderedAndFiltered.get(i);\n  if (i + 1 < orderedAndFiltered.size()) {\n    if (str.getOffset() + str.getNumbytes() > orderedAndFiltered.get(i + 1).getOffset()) {\n      throw new IOException(\"Corrupted TAR archive. Sparse blocks for \" + getName() + \" overlap each other.\");\n    }\n  }\n  if (str.getOffset() + str.getNumbytes() < 0) {\n    throw new IOException(\"Unreadable TAR archive. Offset and numbytes for sparse block in \" + getName() + \" too large.\");\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 67,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 752,
                        "startLineNumber": 950,
                        "startColumnNumber": 8,
                        "endLineNumber": 963,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int i=0; i < orderedAndFiltered.size(); i++) {\n  final TarArchiveStructSparse str=orderedAndFiltered.get(i);\n  if (i + 1 < orderedAndFiltered.size()) {\n    if (str.getOffset() + str.getNumbytes() > orderedAndFiltered.get(i + 1).getOffset()) {\n      throw new IOException(\"Corrupted TAR archive. Sparse blocks for \" + getName() + \" overlap each other.\");\n    }\n  }\n  if (str.getOffset() + str.getNumbytes() < 0) {\n    throw new IOException(\"Unreadable TAR archive. Offset and numbytes for sparse block in \" + getName() + \" too large.\");\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 80,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1580,
                        "startLineNumber": 941,
                        "startColumnNumber": 85,
                        "endLineNumber": 972,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (sparseHeaders == null || sparseHeaders.isEmpty()) {\n    return Collections.emptyList();\n  }\n  final List<TarArchiveStructSparse> orderedAndFiltered=sparseHeaders.stream().filter(s -> s.getOffset() > 0 || s.getNumbytes() > 0).sorted(Comparator.comparingLong(TarArchiveStructSparse::getOffset)).collect(Collectors.toList());\n  for (int i=0; i < orderedAndFiltered.size(); i++) {\n    final TarArchiveStructSparse str=orderedAndFiltered.get(i);\n    if (i + 1 < orderedAndFiltered.size()) {\n      if (str.getOffset() + str.getNumbytes() > orderedAndFiltered.get(i + 1).getOffset()) {\n        throw new IOException(\"Corrupted TAR archive. Sparse blocks for \" + getName() + \" overlap each other.\");\n      }\n    }\n    if (str.getOffset() + str.getNumbytes() < 0) {\n      throw new IOException(\"Unreadable TAR archive. Offset and numbytes for sparse block in \" + getName() + \" too large.\");\n    }\n  }\n  if (!orderedAndFiltered.isEmpty()) {\n    final TarArchiveStructSparse last=orderedAndFiltered.get(orderedAndFiltered.size() - 1);\n    if (last.getOffset() + last.getNumbytes() > getRealSize()) {\n      throw new IOException(\"Corrupted TAR archive. Sparse block extends beyond real size of the entry\");\n    }\n  }\n  return orderedAndFiltered;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 174,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1984,
                        "startLineNumber": 934,
                        "startColumnNumber": 4,
                        "endLineNumber": 972,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Get this entry's sparse headers ordered by offset with all empty sparse sections at the start filtered out.\n * @return immutable list of this entry's sparse headers, never null\n * @since 1.21\n * @throws IOException if the list of sparse headers contains blocks that overlap\n */\npublic List<TarArchiveStructSparse> getOrderedSparseHeaders() throws IOException {\n  if (sparseHeaders == null || sparseHeaders.isEmpty()) {\n    return Collections.emptyList();\n  }\n  final List<TarArchiveStructSparse> orderedAndFiltered=sparseHeaders.stream().filter(s -> s.getOffset() > 0 || s.getNumbytes() > 0).sorted(Comparator.comparingLong(TarArchiveStructSparse::getOffset)).collect(Collectors.toList());\n  for (int i=0; i < orderedAndFiltered.size(); i++) {\n    final TarArchiveStructSparse str=orderedAndFiltered.get(i);\n    if (i + 1 < orderedAndFiltered.size()) {\n      if (str.getOffset() + str.getNumbytes() > orderedAndFiltered.get(i + 1).getOffset()) {\n        throw new IOException(\"Corrupted TAR archive. Sparse blocks for \" + getName() + \" overlap each other.\");\n      }\n    }\n    if (str.getOffset() + str.getNumbytes() < 0) {\n      throw new IOException(\"Unreadable TAR archive. Offset and numbytes for sparse block in \" + getName() + \" too large.\");\n    }\n  }\n  if (!orderedAndFiltered.isEmpty()) {\n    final TarArchiveStructSparse last=orderedAndFiltered.get(orderedAndFiltered.size() - 1);\n    if (last.getOffset() + last.getNumbytes() > getRealSize()) {\n      throw new IOException(\"Corrupted TAR archive. Sparse block extends beyond real size of the entry\");\n    }\n  }\n  return orderedAndFiltered;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 185,
                    "astHeight": 13
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
                "nodePosition": {
                    "charLength": 105,
                    "startLineNumber": 954,
                    "startColumnNumber": 42,
                    "endLineNumber": 955,
                    "endColumnNumber": 60
                },
                "nodeContext": "\"Corrupted TAR archive. Sparse blocks for \" + getName() + \" overlap each other.\"",
                "nodeType": "InfixExpression",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.lang.String"
        },
        {
            "nodeContext": "getName()",
            "nodeType": "MethodInvocation",
            "nodePosition": {
                "charLength": 9,
                "startLineNumber": 961,
                "startColumnNumber": 22,
                "endLineNumber": 961,
                "endColumnNumber": 31
            },
            "astNodeNumber": 2,
            "astHeight": 2,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
                    "nodePosition": {
                        "charLength": 115,
                        "startLineNumber": 960,
                        "startColumnNumber": 38,
                        "endLineNumber": 961,
                        "endColumnNumber": 47
                    },
                    "nodeContext": "\"Unreadable TAR archive. Offset and numbytes for sparse block in \" + getName() + \" too large.\"",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
                    "nodePosition": {
                        "charLength": 132,
                        "startLineNumber": 960,
                        "startColumnNumber": 22,
                        "endLineNumber": 961,
                        "endColumnNumber": 48
                    },
                    "nodeContext": "new IOException(\"Unreadable TAR archive. Offset and numbytes for sparse block in \" + getName() + \" too large.\")",
                    "nodeType": "ClassInstanceCreation",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 139,
                        "startLineNumber": 960,
                        "startColumnNumber": 16,
                        "endLineNumber": 961,
                        "endColumnNumber": 49
                    },
                    "nodeContext": "throw new IOException(\"Unreadable TAR archive. Offset and numbytes for sparse block in \" + getName() + \" too large.\");\n",
                    "nodeType": "ThrowStatement",
                    "astNodeNumber": 9,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 211,
                        "startLineNumber": 958,
                        "startColumnNumber": 57,
                        "endLineNumber": 962,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  throw new IOException(\"Unreadable TAR archive. Offset and numbytes for sparse block in \" + getName() + \" too large.\");\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 10,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 256,
                        "startLineNumber": 958,
                        "startColumnNumber": 12,
                        "endLineNumber": 962,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if (str.getOffset() + str.getNumbytes() < 0) {\n  throw new IOException(\"Unreadable TAR archive. Offset and numbytes for sparse block in \" + getName() + \" too large.\");\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 20,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 700,
                        "startLineNumber": 950,
                        "startColumnNumber": 60,
                        "endLineNumber": 963,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  final TarArchiveStructSparse str=orderedAndFiltered.get(i);\n  if (i + 1 < orderedAndFiltered.size()) {\n    if (str.getOffset() + str.getNumbytes() > orderedAndFiltered.get(i + 1).getOffset()) {\n      throw new IOException(\"Corrupted TAR archive. Sparse blocks for \" + getName() + \" overlap each other.\");\n    }\n  }\n  if (str.getOffset() + str.getNumbytes() < 0) {\n    throw new IOException(\"Unreadable TAR archive. Offset and numbytes for sparse block in \" + getName() + \" too large.\");\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 67,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 752,
                        "startLineNumber": 950,
                        "startColumnNumber": 8,
                        "endLineNumber": 963,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int i=0; i < orderedAndFiltered.size(); i++) {\n  final TarArchiveStructSparse str=orderedAndFiltered.get(i);\n  if (i + 1 < orderedAndFiltered.size()) {\n    if (str.getOffset() + str.getNumbytes() > orderedAndFiltered.get(i + 1).getOffset()) {\n      throw new IOException(\"Corrupted TAR archive. Sparse blocks for \" + getName() + \" overlap each other.\");\n    }\n  }\n  if (str.getOffset() + str.getNumbytes() < 0) {\n    throw new IOException(\"Unreadable TAR archive. Offset and numbytes for sparse block in \" + getName() + \" too large.\");\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 80,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1580,
                        "startLineNumber": 941,
                        "startColumnNumber": 85,
                        "endLineNumber": 972,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (sparseHeaders == null || sparseHeaders.isEmpty()) {\n    return Collections.emptyList();\n  }\n  final List<TarArchiveStructSparse> orderedAndFiltered=sparseHeaders.stream().filter(s -> s.getOffset() > 0 || s.getNumbytes() > 0).sorted(Comparator.comparingLong(TarArchiveStructSparse::getOffset)).collect(Collectors.toList());\n  for (int i=0; i < orderedAndFiltered.size(); i++) {\n    final TarArchiveStructSparse str=orderedAndFiltered.get(i);\n    if (i + 1 < orderedAndFiltered.size()) {\n      if (str.getOffset() + str.getNumbytes() > orderedAndFiltered.get(i + 1).getOffset()) {\n        throw new IOException(\"Corrupted TAR archive. Sparse blocks for \" + getName() + \" overlap each other.\");\n      }\n    }\n    if (str.getOffset() + str.getNumbytes() < 0) {\n      throw new IOException(\"Unreadable TAR archive. Offset and numbytes for sparse block in \" + getName() + \" too large.\");\n    }\n  }\n  if (!orderedAndFiltered.isEmpty()) {\n    final TarArchiveStructSparse last=orderedAndFiltered.get(orderedAndFiltered.size() - 1);\n    if (last.getOffset() + last.getNumbytes() > getRealSize()) {\n      throw new IOException(\"Corrupted TAR archive. Sparse block extends beyond real size of the entry\");\n    }\n  }\n  return orderedAndFiltered;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 174,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1984,
                        "startLineNumber": 934,
                        "startColumnNumber": 4,
                        "endLineNumber": 972,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Get this entry's sparse headers ordered by offset with all empty sparse sections at the start filtered out.\n * @return immutable list of this entry's sparse headers, never null\n * @since 1.21\n * @throws IOException if the list of sparse headers contains blocks that overlap\n */\npublic List<TarArchiveStructSparse> getOrderedSparseHeaders() throws IOException {\n  if (sparseHeaders == null || sparseHeaders.isEmpty()) {\n    return Collections.emptyList();\n  }\n  final List<TarArchiveStructSparse> orderedAndFiltered=sparseHeaders.stream().filter(s -> s.getOffset() > 0 || s.getNumbytes() > 0).sorted(Comparator.comparingLong(TarArchiveStructSparse::getOffset)).collect(Collectors.toList());\n  for (int i=0; i < orderedAndFiltered.size(); i++) {\n    final TarArchiveStructSparse str=orderedAndFiltered.get(i);\n    if (i + 1 < orderedAndFiltered.size()) {\n      if (str.getOffset() + str.getNumbytes() > orderedAndFiltered.get(i + 1).getOffset()) {\n        throw new IOException(\"Corrupted TAR archive. Sparse blocks for \" + getName() + \" overlap each other.\");\n      }\n    }\n    if (str.getOffset() + str.getNumbytes() < 0) {\n      throw new IOException(\"Unreadable TAR archive. Offset and numbytes for sparse block in \" + getName() + \" too large.\");\n    }\n  }\n  if (!orderedAndFiltered.isEmpty()) {\n    final TarArchiveStructSparse last=orderedAndFiltered.get(orderedAndFiltered.size() - 1);\n    if (last.getOffset() + last.getNumbytes() > getRealSize()) {\n      throw new IOException(\"Corrupted TAR archive. Sparse block extends beyond real size of the entry\");\n    }\n  }\n  return orderedAndFiltered;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 185,
                    "astHeight": 13
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
                "nodePosition": {
                    "charLength": 115,
                    "startLineNumber": 960,
                    "startColumnNumber": 38,
                    "endLineNumber": 961,
                    "endColumnNumber": 47
                },
                "nodeContext": "\"Unreadable TAR archive. Offset and numbytes for sparse block in \" + getName() + \" too large.\"",
                "nodeType": "InfixExpression",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "java.lang.String"
        }
    ],
    "positionList": [
        {
            "charLength": 9,
            "startLineNumber": 955,
            "startColumnNumber": 26,
            "endLineNumber": 955,
            "endColumnNumber": 35
        },
        {
            "charLength": 9,
            "startLineNumber": 961,
            "startColumnNumber": 22,
            "endLineNumber": 961,
            "endColumnNumber": 31
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 5
        }
    ]
}