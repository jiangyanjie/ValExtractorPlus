{
    "id": 6919,
    "expression": "this.getRowDimension()",
    "projectName": "commons-math",
    "commitID": "09c8b57924bc90dfcf93aa35eb79a6bd752add1d",
    "filePath": "src/java/org/apache/commons/math/RealMatrixImpl.java",
    "occurrences": 2,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "this.getRowDimension()",
            "nodeType": "MethodInvocation",
            "nodePosition": {
                "charLength": 22,
                "startLineNumber": 196,
                "startColumnNumber": 19,
                "endLineNumber": 196,
                "endColumnNumber": 41
            },
            "astNodeNumber": 3,
            "astHeight": 2,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 58,
                        "startLineNumber": 196,
                        "startColumnNumber": 8,
                        "endLineNumber": 196,
                        "endColumnNumber": 66
                    },
                    "nodeContext": "new double[this.getRowDimension()][m.getColumnDimension()]",
                    "nodeType": "ArrayCreation",
                    "astNodeNumber": 11,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 77,
                        "startLineNumber": 195,
                        "startColumnNumber": 17,
                        "endLineNumber": 196,
                        "endColumnNumber": 66
                    },
                    "nodeContext": "outData=new double[this.getRowDimension()][m.getColumnDimension()]",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 13,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 89,
                        "startLineNumber": 195,
                        "startColumnNumber": 6,
                        "endLineNumber": 196,
                        "endColumnNumber": 67
                    },
                    "nodeContext": "double[][] outData=new double[this.getRowDimension()][m.getColumnDimension()];\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 18,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 719,
                        "startLineNumber": 189,
                        "startColumnNumber": 45,
                        "endLineNumber": 208,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (this.getColumnDimension() != m.getRowDimension()) {\n    throw new IllegalArgumentException(\"Matrices are not multiplication compatible.\");\n  }\n  double[][] mData=m.getData();\n  double[][] outData=new double[this.getRowDimension()][m.getColumnDimension()];\n  double sum=0;\n  for (int row=0; row < this.getRowDimension(); row++) {\n    for (int col=0; col < m.getColumnDimension(); col++) {\n      sum=0;\n      for (int i=0; i < this.getColumnDimension(); i++) {\n        sum+=data[row][i] * mData[i][col];\n      }\n      outData[row][col]=sum;\n    }\n  }\n  return new RealMatrixImpl(outData);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 121,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1008,
                        "startLineNumber": 182,
                        "startColumnNumber": 4,
                        "endLineNumber": 208,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Returns the result postmultiplying *this by m\n * @param m    matrix to postmultiply by\n * @return     this*m\n * @throws IllegalArgumentException if columnDimension(this) != rowDimension(m)\n */\npublic RealMatrix multiply(RealMatrix m){\n  if (this.getColumnDimension() != m.getRowDimension()) {\n    throw new IllegalArgumentException(\"Matrices are not multiplication compatible.\");\n  }\n  double[][] mData=m.getData();\n  double[][] outData=new double[this.getRowDimension()][m.getColumnDimension()];\n  double sum=0;\n  for (int row=0; row < this.getRowDimension(); row++) {\n    for (int col=0; col < m.getColumnDimension(); col++) {\n      sum=0;\n      for (int i=0; i < this.getColumnDimension(); i++) {\n        sum+=data[row][i] * mData[i][col];\n      }\n      outData[row][col]=sum;\n    }\n  }\n  return new RealMatrixImpl(outData);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 131,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                "nodePosition": {
                    "charLength": 58,
                    "startLineNumber": 196,
                    "startColumnNumber": 8,
                    "endLineNumber": 196,
                    "endColumnNumber": 66
                },
                "nodeContext": "new double[this.getRowDimension()][m.getColumnDimension()]",
                "nodeType": "ArrayCreation",
                "astNodeNumber": 11,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "this.getRowDimension()",
            "nodeType": "MethodInvocation",
            "nodePosition": {
                "charLength": 22,
                "startLineNumber": 198,
                "startColumnNumber": 30,
                "endLineNumber": 198,
                "endColumnNumber": 52
            },
            "astNodeNumber": 3,
            "astHeight": 2,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
                    "nodePosition": {
                        "charLength": 28,
                        "startLineNumber": 198,
                        "startColumnNumber": 24,
                        "endLineNumber": 198,
                        "endColumnNumber": 52
                    },
                    "nodeContext": "row < this.getRowDimension()",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 332,
                        "startLineNumber": 198,
                        "startColumnNumber": 6,
                        "endLineNumber": 206,
                        "endColumnNumber": 7
                    },
                    "nodeContext": "for (int row=0; row < this.getRowDimension(); row++) {\n  for (int col=0; col < m.getColumnDimension(); col++) {\n    sum=0;\n    for (int i=0; i < this.getColumnDimension(); i++) {\n      sum+=data[row][i] * mData[i][col];\n    }\n    outData[row][col]=sum;\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 68,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 719,
                        "startLineNumber": 189,
                        "startColumnNumber": 45,
                        "endLineNumber": 208,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  if (this.getColumnDimension() != m.getRowDimension()) {\n    throw new IllegalArgumentException(\"Matrices are not multiplication compatible.\");\n  }\n  double[][] mData=m.getData();\n  double[][] outData=new double[this.getRowDimension()][m.getColumnDimension()];\n  double sum=0;\n  for (int row=0; row < this.getRowDimension(); row++) {\n    for (int col=0; col < m.getColumnDimension(); col++) {\n      sum=0;\n      for (int i=0; i < this.getColumnDimension(); i++) {\n        sum+=data[row][i] * mData[i][col];\n      }\n      outData[row][col]=sum;\n    }\n  }\n  return new RealMatrixImpl(outData);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 121,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1008,
                        "startLineNumber": 182,
                        "startColumnNumber": 4,
                        "endLineNumber": 208,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Returns the result postmultiplying *this by m\n * @param m    matrix to postmultiply by\n * @return     this*m\n * @throws IllegalArgumentException if columnDimension(this) != rowDimension(m)\n */\npublic RealMatrix multiply(RealMatrix m){\n  if (this.getColumnDimension() != m.getRowDimension()) {\n    throw new IllegalArgumentException(\"Matrices are not multiplication compatible.\");\n  }\n  double[][] mData=m.getData();\n  double[][] outData=new double[this.getRowDimension()][m.getColumnDimension()];\n  double sum=0;\n  for (int row=0; row < this.getRowDimension(); row++) {\n    for (int col=0; col < m.getColumnDimension(); col++) {\n      sum=0;\n      for (int i=0; i < this.getColumnDimension(); i++) {\n        sum+=data[row][i] * mData[i][col];\n      }\n      outData[row][col]=sum;\n    }\n  }\n  return new RealMatrixImpl(outData);\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 131,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
                "nodePosition": {
                    "charLength": 28,
                    "startLineNumber": 198,
                    "startColumnNumber": 24,
                    "endLineNumber": 198,
                    "endColumnNumber": 52
                },
                "nodeContext": "row < this.getRowDimension()",
                "nodeType": "InfixExpression",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "int"
        }
    ],
    "positionList": [
        {
            "charLength": 22,
            "startLineNumber": 196,
            "startColumnNumber": 19,
            "endLineNumber": 196,
            "endColumnNumber": 41
        },
        {
            "charLength": 22,
            "startLineNumber": 198,
            "startColumnNumber": 30,
            "endLineNumber": 198,
            "endColumnNumber": 52
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 2
        }
    ]
}