{
    "id": 5321,
    "expression": "this",
    "projectName": "commons-math",
    "commitID": "7e7207cd4fa31f8f75b9a8a309c98c12fb672a7b",
    "filePath": "src/java/org/apache/commons/math/linear/RealMatrixImpl.java",
    "occurrences": 3,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "this",
            "nodeType": "ThisExpression",
            "nodePosition": {
                "charLength": 4,
                "startLineNumber": 777,
                "startColumnNumber": 20,
                "endLineNumber": 777,
                "endColumnNumber": 24
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 22,
                        "startLineNumber": 777,
                        "startColumnNumber": 20,
                        "endLineNumber": 777,
                        "endColumnNumber": 42
                    },
                    "nodeContext": "this.getRowDimension()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 30,
                        "startLineNumber": 777,
                        "startColumnNumber": 12,
                        "endLineNumber": 777,
                        "endColumnNumber": 42
                    },
                    "nodeContext": "nRows=this.getRowDimension()",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 35,
                        "startLineNumber": 777,
                        "startColumnNumber": 8,
                        "endLineNumber": 777,
                        "endColumnNumber": 43
                    },
                    "nodeContext": "int nRows=this.getRowDimension();\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2284,
                        "startLineNumber": 775,
                        "startColumnNumber": 60,
                        "endLineNumber": 847,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  int nRows=this.getRowDimension();\n  int nCols=this.getColumnDimension();\n  if (nRows != nCols) {\n    throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");\n  }\n  lu=this.getData();\n  permutation=new int[nRows];\n  for (int row=0; row < nRows; row++) {\n    permutation[row]=row;\n  }\n  parity=1;\n  for (int col=0; col < nCols; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < row; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n    }\n    int max=col;\n    double largest=0d;\n    for (int row=col; row < nRows; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < col; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < TOO_SMALL) {\n      lu=null;\n      throw new InvalidMatrixException(\"matrix is singular\");\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < nCols; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=permutation[max];\n      permutation[max]=permutation[col];\n      permutation[col]=temp;\n      parity=-parity;\n    }\n    for (int row=col + 1; row < nRows; row++) {\n      lu[row][col]/=lu[col][col];\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 338,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3223,
                        "startLineNumber": 757,
                        "startColumnNumber": 4,
                        "endLineNumber": 847,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Computes a new <a href=\"http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf\"> LU decomposition</a> for this matrix, storing the result for use by other methods. <p> <strong>Implementation Note</strong>:<br> Uses <a href=\"http://www.damtp.cam.ac.uk/user/fdl/people/sd/lectures/nummeth98/linear.htm\"> Crout's algorithm</a>, with partial pivoting.</p> <p> <strong>Usage Note</strong>:<br> This method should rarely be invoked directly. Its only use is to force recomputation of the LU decomposition when changes have been made to the underlying data using direct array references. Changes made using setXxx methods will trigger recomputation when needed automatically.</p>\n * @throws InvalidMatrixException if the matrix is non-square or singular.\n */\npublic void luDecompose() throws InvalidMatrixException {\n  int nRows=this.getRowDimension();\n  int nCols=this.getColumnDimension();\n  if (nRows != nCols) {\n    throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");\n  }\n  lu=this.getData();\n  permutation=new int[nRows];\n  for (int row=0; row < nRows; row++) {\n    permutation[row]=row;\n  }\n  parity=1;\n  for (int col=0; col < nCols; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < row; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n    }\n    int max=col;\n    double largest=0d;\n    for (int row=col; row < nRows; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < col; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < TOO_SMALL) {\n      lu=null;\n      throw new InvalidMatrixException(\"matrix is singular\");\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < nCols; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=permutation[max];\n      permutation[max]=permutation[col];\n      permutation[col]=temp;\n      parity=-parity;\n    }\n    for (int row=col + 1; row < nRows; row++) {\n      lu[row][col]/=lu[col][col];\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 345,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 35,
                    "startLineNumber": 777,
                    "startColumnNumber": 8,
                    "endLineNumber": 777,
                    "endColumnNumber": 43
                },
                "nodeContext": "int nRows=this.getRowDimension();\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 7,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.commons.math.linear.RealMatrixImpl"
        },
        {
            "nodeContext": "this",
            "nodeType": "ThisExpression",
            "nodePosition": {
                "charLength": 4,
                "startLineNumber": 778,
                "startColumnNumber": 20,
                "endLineNumber": 778,
                "endColumnNumber": 24
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 25,
                        "startLineNumber": 778,
                        "startColumnNumber": 20,
                        "endLineNumber": 778,
                        "endColumnNumber": 45
                    },
                    "nodeContext": "this.getColumnDimension()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 33,
                        "startLineNumber": 778,
                        "startColumnNumber": 12,
                        "endLineNumber": 778,
                        "endColumnNumber": 45
                    },
                    "nodeContext": "nCols=this.getColumnDimension()",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 38,
                        "startLineNumber": 778,
                        "startColumnNumber": 8,
                        "endLineNumber": 778,
                        "endColumnNumber": 46
                    },
                    "nodeContext": "int nCols=this.getColumnDimension();\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2284,
                        "startLineNumber": 775,
                        "startColumnNumber": 60,
                        "endLineNumber": 847,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  int nRows=this.getRowDimension();\n  int nCols=this.getColumnDimension();\n  if (nRows != nCols) {\n    throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");\n  }\n  lu=this.getData();\n  permutation=new int[nRows];\n  for (int row=0; row < nRows; row++) {\n    permutation[row]=row;\n  }\n  parity=1;\n  for (int col=0; col < nCols; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < row; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n    }\n    int max=col;\n    double largest=0d;\n    for (int row=col; row < nRows; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < col; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < TOO_SMALL) {\n      lu=null;\n      throw new InvalidMatrixException(\"matrix is singular\");\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < nCols; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=permutation[max];\n      permutation[max]=permutation[col];\n      permutation[col]=temp;\n      parity=-parity;\n    }\n    for (int row=col + 1; row < nRows; row++) {\n      lu[row][col]/=lu[col][col];\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 338,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3223,
                        "startLineNumber": 757,
                        "startColumnNumber": 4,
                        "endLineNumber": 847,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Computes a new <a href=\"http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf\"> LU decomposition</a> for this matrix, storing the result for use by other methods. <p> <strong>Implementation Note</strong>:<br> Uses <a href=\"http://www.damtp.cam.ac.uk/user/fdl/people/sd/lectures/nummeth98/linear.htm\"> Crout's algorithm</a>, with partial pivoting.</p> <p> <strong>Usage Note</strong>:<br> This method should rarely be invoked directly. Its only use is to force recomputation of the LU decomposition when changes have been made to the underlying data using direct array references. Changes made using setXxx methods will trigger recomputation when needed automatically.</p>\n * @throws InvalidMatrixException if the matrix is non-square or singular.\n */\npublic void luDecompose() throws InvalidMatrixException {\n  int nRows=this.getRowDimension();\n  int nCols=this.getColumnDimension();\n  if (nRows != nCols) {\n    throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");\n  }\n  lu=this.getData();\n  permutation=new int[nRows];\n  for (int row=0; row < nRows; row++) {\n    permutation[row]=row;\n  }\n  parity=1;\n  for (int col=0; col < nCols; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < row; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n    }\n    int max=col;\n    double largest=0d;\n    for (int row=col; row < nRows; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < col; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < TOO_SMALL) {\n      lu=null;\n      throw new InvalidMatrixException(\"matrix is singular\");\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < nCols; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=permutation[max];\n      permutation[max]=permutation[col];\n      permutation[col]=temp;\n      parity=-parity;\n    }\n    for (int row=col + 1; row < nRows; row++) {\n      lu[row][col]/=lu[col][col];\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 345,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 38,
                    "startLineNumber": 778,
                    "startColumnNumber": 8,
                    "endLineNumber": 778,
                    "endColumnNumber": 46
                },
                "nodeContext": "int nCols=this.getColumnDimension();\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 7,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.commons.math.linear.RealMatrixImpl"
        },
        {
            "nodeContext": "this",
            "nodeType": "ThisExpression",
            "nodePosition": {
                "charLength": 4,
                "startLineNumber": 782,
                "startColumnNumber": 13,
                "endLineNumber": 782,
                "endColumnNumber": 17
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 14,
                        "startLineNumber": 782,
                        "startColumnNumber": 13,
                        "endLineNumber": 782,
                        "endColumnNumber": 27
                    },
                    "nodeContext": "this.getData()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 19,
                        "startLineNumber": 782,
                        "startColumnNumber": 8,
                        "endLineNumber": 782,
                        "endColumnNumber": 27
                    },
                    "nodeContext": "lu=this.getData()",
                    "nodeType": "Assignment",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 20,
                        "startLineNumber": 782,
                        "startColumnNumber": 8,
                        "endLineNumber": 782,
                        "endColumnNumber": 28
                    },
                    "nodeContext": "lu=this.getData();\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 6,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2284,
                        "startLineNumber": 775,
                        "startColumnNumber": 60,
                        "endLineNumber": 847,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  int nRows=this.getRowDimension();\n  int nCols=this.getColumnDimension();\n  if (nRows != nCols) {\n    throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");\n  }\n  lu=this.getData();\n  permutation=new int[nRows];\n  for (int row=0; row < nRows; row++) {\n    permutation[row]=row;\n  }\n  parity=1;\n  for (int col=0; col < nCols; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < row; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n    }\n    int max=col;\n    double largest=0d;\n    for (int row=col; row < nRows; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < col; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < TOO_SMALL) {\n      lu=null;\n      throw new InvalidMatrixException(\"matrix is singular\");\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < nCols; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=permutation[max];\n      permutation[max]=permutation[col];\n      permutation[col]=temp;\n      parity=-parity;\n    }\n    for (int row=col + 1; row < nRows; row++) {\n      lu[row][col]/=lu[col][col];\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 338,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3223,
                        "startLineNumber": 757,
                        "startColumnNumber": 4,
                        "endLineNumber": 847,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Computes a new <a href=\"http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf\"> LU decomposition</a> for this matrix, storing the result for use by other methods. <p> <strong>Implementation Note</strong>:<br> Uses <a href=\"http://www.damtp.cam.ac.uk/user/fdl/people/sd/lectures/nummeth98/linear.htm\"> Crout's algorithm</a>, with partial pivoting.</p> <p> <strong>Usage Note</strong>:<br> This method should rarely be invoked directly. Its only use is to force recomputation of the LU decomposition when changes have been made to the underlying data using direct array references. Changes made using setXxx methods will trigger recomputation when needed automatically.</p>\n * @throws InvalidMatrixException if the matrix is non-square or singular.\n */\npublic void luDecompose() throws InvalidMatrixException {\n  int nRows=this.getRowDimension();\n  int nCols=this.getColumnDimension();\n  if (nRows != nCols) {\n    throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");\n  }\n  lu=this.getData();\n  permutation=new int[nRows];\n  for (int row=0; row < nRows; row++) {\n    permutation[row]=row;\n  }\n  parity=1;\n  for (int col=0; col < nCols; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < row; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n    }\n    int max=col;\n    double largest=0d;\n    for (int row=col; row < nRows; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < col; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < TOO_SMALL) {\n      lu=null;\n      throw new InvalidMatrixException(\"matrix is singular\");\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < nCols; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=permutation[max];\n      permutation[max]=permutation[col];\n      permutation[col]=temp;\n      parity=-parity;\n    }\n    for (int row=col + 1; row < nRows; row++) {\n      lu[row][col]/=lu[col][col];\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 345,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 20,
                    "startLineNumber": 782,
                    "startColumnNumber": 8,
                    "endLineNumber": 782,
                    "endColumnNumber": 28
                },
                "nodeContext": "lu=this.getData();\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 6,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.apache.commons.math.linear.RealMatrixImpl"
        }
    ],
    "positionList": [
        {
            "charLength": 4,
            "startLineNumber": 777,
            "startColumnNumber": 20,
            "endLineNumber": 777,
            "endColumnNumber": 24
        },
        {
            "charLength": 4,
            "startLineNumber": 778,
            "startColumnNumber": 20,
            "endLineNumber": 778,
            "endColumnNumber": 24
        },
        {
            "charLength": 4,
            "startLineNumber": 782,
            "startColumnNumber": 13,
            "endLineNumber": 782,
            "endColumnNumber": 17
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 3
        }
    ]
}