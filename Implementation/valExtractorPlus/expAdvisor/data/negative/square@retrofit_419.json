{
    "id": 419,
    "expression": "bodySize",
    "projectName": "square@retrofit",
    "commitID": "54363686dc5d6ce11adc6d8339383193b04a0080",
    "filePath": "retrofit/src/main/java/retrofit/RestAdapter.java",
    "occurrences": 3,
    "isArithmeticExpression": 0,
    "isGetTypeMethod": 0,
    "expressionList": [
        {
            "nodeContext": "bodySize",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 8,
                "startLineNumber": 342,
                "startColumnNumber": 12,
                "endLineNumber": 342,
                "endColumnNumber": 20
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 14,
                        "startLineNumber": 342,
                        "startColumnNumber": 12,
                        "endLineNumber": 342,
                        "endColumnNumber": 26
                    },
                    "nodeContext": "bodySize != -1",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 81,
                        "startLineNumber": 342,
                        "startColumnNumber": 8,
                        "endLineNumber": 344,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (bodySize != -1) {\n  log.log(\"Content-Length: \" + bodySize);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 13,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1127,
                        "startLineNumber": 335,
                        "startColumnNumber": 24,
                        "endLineNumber": 365,
                        "endColumnNumber": 7
                    },
                    "nodeContext": "{\n  bodySize=body.length();\n  String bodyMime=body.mimeType();\n  if (bodyMime != null) {\n    log.log(\"Content-Type: \" + bodyMime);\n  }\n  if (bodySize != -1) {\n    log.log(\"Content-Length: \" + bodySize);\n  }\n  if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n    if (!request.getHeaders().isEmpty()) {\n      log.log(\"\");\n    }\n    if (!(body instanceof TypedByteArray)) {\n      request=Utils.readBodyToBytesIfNecessary(request);\n      body=request.getBody();\n    }\n    byte[] bodyBytes=((TypedByteArray)body).getBytes();\n    bodySize=bodyBytes.length;\n    String bodyCharset=MimeUtil.parseCharset(bodyMime);\n    String bodyString=new String(bodyBytes,bodyCharset);\n    for (int i=0, len=bodyString.length(); i < len; i+=LOG_CHUNK_SIZE) {\n      int end=Math.min(len,i + LOG_CHUNK_SIZE);\n      log.log(bodyString.substring(i,end));\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 161,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1145,
                        "startLineNumber": 335,
                        "startColumnNumber": 6,
                        "endLineNumber": 365,
                        "endColumnNumber": 7
                    },
                    "nodeContext": "if (body != null) {\n  bodySize=body.length();\n  String bodyMime=body.mimeType();\n  if (bodyMime != null) {\n    log.log(\"Content-Type: \" + bodyMime);\n  }\n  if (bodySize != -1) {\n    log.log(\"Content-Length: \" + bodySize);\n  }\n  if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n    if (!request.getHeaders().isEmpty()) {\n      log.log(\"\");\n    }\n    if (!(body instanceof TypedByteArray)) {\n      request=Utils.readBodyToBytesIfNecessary(request);\n      body=request.getBody();\n    }\n    byte[] bodyBytes=((TypedByteArray)body).getBytes();\n    bodySize=bodyBytes.length;\n    String bodyCharset=MimeUtil.parseCharset(bodyMime);\n    String bodyString=new String(bodyBytes,bodyCharset);\n    for (int i=0, len=bodyString.length(); i < len; i+=LOG_CHUNK_SIZE) {\n      int end=Math.min(len,i + LOG_CHUNK_SIZE);\n      log.log(bodyString.substring(i,end));\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 165,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1423,
                        "startLineNumber": 328,
                        "startColumnNumber": 58,
                        "endLineNumber": 368,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  for (  Header header : request.getHeaders()) {\n    log.log(header.getName() + \": \" + header.getValue());\n  }\n  long bodySize=0;\n  TypedOutput body=request.getBody();\n  if (body != null) {\n    bodySize=body.length();\n    String bodyMime=body.mimeType();\n    if (bodyMime != null) {\n      log.log(\"Content-Type: \" + bodyMime);\n    }\n    if (bodySize != -1) {\n      log.log(\"Content-Length: \" + bodySize);\n    }\n    if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n      if (!request.getHeaders().isEmpty()) {\n        log.log(\"\");\n      }\n      if (!(body instanceof TypedByteArray)) {\n        request=Utils.readBodyToBytesIfNecessary(request);\n        body=request.getBody();\n      }\n      byte[] bodyBytes=((TypedByteArray)body).getBytes();\n      bodySize=bodyBytes.length;\n      String bodyCharset=MimeUtil.parseCharset(bodyMime);\n      String bodyString=new String(bodyBytes,bodyCharset);\n      for (int i=0, len=bodyString.length(); i < len; i+=LOG_CHUNK_SIZE) {\n        int end=Math.min(len,i + LOG_CHUNK_SIZE);\n        log.log(bodyString.substring(i,end));\n      }\n    }\n  }\n  log.log(String.format(\"---> END HTTP (%s-byte body)\",bodySize));\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 209,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1477,
                        "startLineNumber": 328,
                        "startColumnNumber": 4,
                        "endLineNumber": 368,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "if (logLevel.ordinal() >= LogLevel.HEADERS.ordinal()) {\n  for (  Header header : request.getHeaders()) {\n    log.log(header.getName() + \": \" + header.getValue());\n  }\n  long bodySize=0;\n  TypedOutput body=request.getBody();\n  if (body != null) {\n    bodySize=body.length();\n    String bodyMime=body.mimeType();\n    if (bodyMime != null) {\n      log.log(\"Content-Type: \" + bodyMime);\n    }\n    if (bodySize != -1) {\n      log.log(\"Content-Length: \" + bodySize);\n    }\n    if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n      if (!request.getHeaders().isEmpty()) {\n        log.log(\"\");\n      }\n      if (!(body instanceof TypedByteArray)) {\n        request=Utils.readBodyToBytesIfNecessary(request);\n        body=request.getBody();\n      }\n      byte[] bodyBytes=((TypedByteArray)body).getBytes();\n      bodySize=bodyBytes.length;\n      String bodyCharset=MimeUtil.parseCharset(bodyMime);\n      String bodyString=new String(bodyBytes,bodyCharset);\n      for (int i=0, len=bodyString.length(); i < len; i+=LOG_CHUNK_SIZE) {\n        int end=Math.min(len,i + LOG_CHUNK_SIZE);\n        log.log(bodyString.substring(i,end));\n      }\n    }\n  }\n  log.log(String.format(\"---> END HTTP (%s-byte body)\",bodySize));\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 219,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1595,
                        "startLineNumber": 325,
                        "startColumnNumber": 75,
                        "endLineNumber": 371,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  log.log(String.format(\"---> HTTP %s %s\",request.getMethod(),request.getUrl()));\n  if (logLevel.ordinal() >= LogLevel.HEADERS.ordinal()) {\n    for (    Header header : request.getHeaders()) {\n      log.log(header.getName() + \": \" + header.getValue());\n    }\n    long bodySize=0;\n    TypedOutput body=request.getBody();\n    if (body != null) {\n      bodySize=body.length();\n      String bodyMime=body.mimeType();\n      if (bodyMime != null) {\n        log.log(\"Content-Type: \" + bodyMime);\n      }\n      if (bodySize != -1) {\n        log.log(\"Content-Length: \" + bodySize);\n      }\n      if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n        if (!request.getHeaders().isEmpty()) {\n          log.log(\"\");\n        }\n        if (!(body instanceof TypedByteArray)) {\n          request=Utils.readBodyToBytesIfNecessary(request);\n          body=request.getBody();\n        }\n        byte[] bodyBytes=((TypedByteArray)body).getBytes();\n        bodySize=bodyBytes.length;\n        String bodyCharset=MimeUtil.parseCharset(bodyMime);\n        String bodyString=new String(bodyBytes,bodyCharset);\n        for (int i=0, len=bodyString.length(); i < len; i+=LOG_CHUNK_SIZE) {\n          int end=Math.min(len,i + LOG_CHUNK_SIZE);\n          log.log(bodyString.substring(i,end));\n        }\n      }\n    }\n    log.log(String.format(\"---> END HTTP (%s-byte body)\",bodySize));\n  }\n  return request;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 236,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1764,
                        "startLineNumber": 324,
                        "startColumnNumber": 2,
                        "endLineNumber": 371,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Log request headers and body. Consumes request body and returns identical replacement. \n */\nprivate Request logAndReplaceRequest(Request request) throws IOException {\n  log.log(String.format(\"---> HTTP %s %s\",request.getMethod(),request.getUrl()));\n  if (logLevel.ordinal() >= LogLevel.HEADERS.ordinal()) {\n    for (    Header header : request.getHeaders()) {\n      log.log(header.getName() + \": \" + header.getValue());\n    }\n    long bodySize=0;\n    TypedOutput body=request.getBody();\n    if (body != null) {\n      bodySize=body.length();\n      String bodyMime=body.mimeType();\n      if (bodyMime != null) {\n        log.log(\"Content-Type: \" + bodyMime);\n      }\n      if (bodySize != -1) {\n        log.log(\"Content-Length: \" + bodySize);\n      }\n      if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n        if (!request.getHeaders().isEmpty()) {\n          log.log(\"\");\n        }\n        if (!(body instanceof TypedByteArray)) {\n          request=Utils.readBodyToBytesIfNecessary(request);\n          body=request.getBody();\n        }\n        byte[] bodyBytes=((TypedByteArray)body).getBytes();\n        bodySize=bodyBytes.length;\n        String bodyCharset=MimeUtil.parseCharset(bodyMime);\n        String bodyString=new String(bodyBytes,bodyCharset);\n        for (int i=0, len=bodyString.length(); i < len; i+=LOG_CHUNK_SIZE) {\n          int end=Math.min(len,i + LOG_CHUNK_SIZE);\n          log.log(bodyString.substring(i,end));\n        }\n      }\n    }\n    log.log(String.format(\"---> END HTTP (%s-byte body)\",bodySize));\n  }\n  return request;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 248,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 14,
                    "startLineNumber": 342,
                    "startColumnNumber": 12,
                    "endLineNumber": 342,
                    "endColumnNumber": 26
                },
                "nodeContext": "bodySize != -1",
                "nodeType": "InfixExpression",
                "astNodeNumber": 4,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "long"
        },
        {
            "nodeContext": "bodySize",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 8,
                "startLineNumber": 343,
                "startColumnNumber": 39,
                "endLineNumber": 343,
                "endColumnNumber": 47
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 29,
                        "startLineNumber": 343,
                        "startColumnNumber": 18,
                        "endLineNumber": 343,
                        "endColumnNumber": 47
                    },
                    "nodeContext": "\"Content-Length: \" + bodySize",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 38,
                        "startLineNumber": 343,
                        "startColumnNumber": 10,
                        "endLineNumber": 343,
                        "endColumnNumber": 48
                    },
                    "nodeContext": "log.log(\"Content-Length: \" + bodySize)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 39,
                        "startLineNumber": 343,
                        "startColumnNumber": 10,
                        "endLineNumber": 343,
                        "endColumnNumber": 49
                    },
                    "nodeContext": "log.log(\"Content-Length: \" + bodySize);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 61,
                        "startLineNumber": 342,
                        "startColumnNumber": 28,
                        "endLineNumber": 344,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  log.log(\"Content-Length: \" + bodySize);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 81,
                        "startLineNumber": 342,
                        "startColumnNumber": 8,
                        "endLineNumber": 344,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "if (bodySize != -1) {\n  log.log(\"Content-Length: \" + bodySize);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 13,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1127,
                        "startLineNumber": 335,
                        "startColumnNumber": 24,
                        "endLineNumber": 365,
                        "endColumnNumber": 7
                    },
                    "nodeContext": "{\n  bodySize=body.length();\n  String bodyMime=body.mimeType();\n  if (bodyMime != null) {\n    log.log(\"Content-Type: \" + bodyMime);\n  }\n  if (bodySize != -1) {\n    log.log(\"Content-Length: \" + bodySize);\n  }\n  if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n    if (!request.getHeaders().isEmpty()) {\n      log.log(\"\");\n    }\n    if (!(body instanceof TypedByteArray)) {\n      request=Utils.readBodyToBytesIfNecessary(request);\n      body=request.getBody();\n    }\n    byte[] bodyBytes=((TypedByteArray)body).getBytes();\n    bodySize=bodyBytes.length;\n    String bodyCharset=MimeUtil.parseCharset(bodyMime);\n    String bodyString=new String(bodyBytes,bodyCharset);\n    for (int i=0, len=bodyString.length(); i < len; i+=LOG_CHUNK_SIZE) {\n      int end=Math.min(len,i + LOG_CHUNK_SIZE);\n      log.log(bodyString.substring(i,end));\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 161,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1145,
                        "startLineNumber": 335,
                        "startColumnNumber": 6,
                        "endLineNumber": 365,
                        "endColumnNumber": 7
                    },
                    "nodeContext": "if (body != null) {\n  bodySize=body.length();\n  String bodyMime=body.mimeType();\n  if (bodyMime != null) {\n    log.log(\"Content-Type: \" + bodyMime);\n  }\n  if (bodySize != -1) {\n    log.log(\"Content-Length: \" + bodySize);\n  }\n  if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n    if (!request.getHeaders().isEmpty()) {\n      log.log(\"\");\n    }\n    if (!(body instanceof TypedByteArray)) {\n      request=Utils.readBodyToBytesIfNecessary(request);\n      body=request.getBody();\n    }\n    byte[] bodyBytes=((TypedByteArray)body).getBytes();\n    bodySize=bodyBytes.length;\n    String bodyCharset=MimeUtil.parseCharset(bodyMime);\n    String bodyString=new String(bodyBytes,bodyCharset);\n    for (int i=0, len=bodyString.length(); i < len; i+=LOG_CHUNK_SIZE) {\n      int end=Math.min(len,i + LOG_CHUNK_SIZE);\n      log.log(bodyString.substring(i,end));\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 165,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1423,
                        "startLineNumber": 328,
                        "startColumnNumber": 58,
                        "endLineNumber": 368,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  for (  Header header : request.getHeaders()) {\n    log.log(header.getName() + \": \" + header.getValue());\n  }\n  long bodySize=0;\n  TypedOutput body=request.getBody();\n  if (body != null) {\n    bodySize=body.length();\n    String bodyMime=body.mimeType();\n    if (bodyMime != null) {\n      log.log(\"Content-Type: \" + bodyMime);\n    }\n    if (bodySize != -1) {\n      log.log(\"Content-Length: \" + bodySize);\n    }\n    if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n      if (!request.getHeaders().isEmpty()) {\n        log.log(\"\");\n      }\n      if (!(body instanceof TypedByteArray)) {\n        request=Utils.readBodyToBytesIfNecessary(request);\n        body=request.getBody();\n      }\n      byte[] bodyBytes=((TypedByteArray)body).getBytes();\n      bodySize=bodyBytes.length;\n      String bodyCharset=MimeUtil.parseCharset(bodyMime);\n      String bodyString=new String(bodyBytes,bodyCharset);\n      for (int i=0, len=bodyString.length(); i < len; i+=LOG_CHUNK_SIZE) {\n        int end=Math.min(len,i + LOG_CHUNK_SIZE);\n        log.log(bodyString.substring(i,end));\n      }\n    }\n  }\n  log.log(String.format(\"---> END HTTP (%s-byte body)\",bodySize));\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 209,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1477,
                        "startLineNumber": 328,
                        "startColumnNumber": 4,
                        "endLineNumber": 368,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "if (logLevel.ordinal() >= LogLevel.HEADERS.ordinal()) {\n  for (  Header header : request.getHeaders()) {\n    log.log(header.getName() + \": \" + header.getValue());\n  }\n  long bodySize=0;\n  TypedOutput body=request.getBody();\n  if (body != null) {\n    bodySize=body.length();\n    String bodyMime=body.mimeType();\n    if (bodyMime != null) {\n      log.log(\"Content-Type: \" + bodyMime);\n    }\n    if (bodySize != -1) {\n      log.log(\"Content-Length: \" + bodySize);\n    }\n    if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n      if (!request.getHeaders().isEmpty()) {\n        log.log(\"\");\n      }\n      if (!(body instanceof TypedByteArray)) {\n        request=Utils.readBodyToBytesIfNecessary(request);\n        body=request.getBody();\n      }\n      byte[] bodyBytes=((TypedByteArray)body).getBytes();\n      bodySize=bodyBytes.length;\n      String bodyCharset=MimeUtil.parseCharset(bodyMime);\n      String bodyString=new String(bodyBytes,bodyCharset);\n      for (int i=0, len=bodyString.length(); i < len; i+=LOG_CHUNK_SIZE) {\n        int end=Math.min(len,i + LOG_CHUNK_SIZE);\n        log.log(bodyString.substring(i,end));\n      }\n    }\n  }\n  log.log(String.format(\"---> END HTTP (%s-byte body)\",bodySize));\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 219,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1595,
                        "startLineNumber": 325,
                        "startColumnNumber": 75,
                        "endLineNumber": 371,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  log.log(String.format(\"---> HTTP %s %s\",request.getMethod(),request.getUrl()));\n  if (logLevel.ordinal() >= LogLevel.HEADERS.ordinal()) {\n    for (    Header header : request.getHeaders()) {\n      log.log(header.getName() + \": \" + header.getValue());\n    }\n    long bodySize=0;\n    TypedOutput body=request.getBody();\n    if (body != null) {\n      bodySize=body.length();\n      String bodyMime=body.mimeType();\n      if (bodyMime != null) {\n        log.log(\"Content-Type: \" + bodyMime);\n      }\n      if (bodySize != -1) {\n        log.log(\"Content-Length: \" + bodySize);\n      }\n      if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n        if (!request.getHeaders().isEmpty()) {\n          log.log(\"\");\n        }\n        if (!(body instanceof TypedByteArray)) {\n          request=Utils.readBodyToBytesIfNecessary(request);\n          body=request.getBody();\n        }\n        byte[] bodyBytes=((TypedByteArray)body).getBytes();\n        bodySize=bodyBytes.length;\n        String bodyCharset=MimeUtil.parseCharset(bodyMime);\n        String bodyString=new String(bodyBytes,bodyCharset);\n        for (int i=0, len=bodyString.length(); i < len; i+=LOG_CHUNK_SIZE) {\n          int end=Math.min(len,i + LOG_CHUNK_SIZE);\n          log.log(bodyString.substring(i,end));\n        }\n      }\n    }\n    log.log(String.format(\"---> END HTTP (%s-byte body)\",bodySize));\n  }\n  return request;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 236,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1764,
                        "startLineNumber": 324,
                        "startColumnNumber": 2,
                        "endLineNumber": 371,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Log request headers and body. Consumes request body and returns identical replacement. \n */\nprivate Request logAndReplaceRequest(Request request) throws IOException {\n  log.log(String.format(\"---> HTTP %s %s\",request.getMethod(),request.getUrl()));\n  if (logLevel.ordinal() >= LogLevel.HEADERS.ordinal()) {\n    for (    Header header : request.getHeaders()) {\n      log.log(header.getName() + \": \" + header.getValue());\n    }\n    long bodySize=0;\n    TypedOutput body=request.getBody();\n    if (body != null) {\n      bodySize=body.length();\n      String bodyMime=body.mimeType();\n      if (bodyMime != null) {\n        log.log(\"Content-Type: \" + bodyMime);\n      }\n      if (bodySize != -1) {\n        log.log(\"Content-Length: \" + bodySize);\n      }\n      if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n        if (!request.getHeaders().isEmpty()) {\n          log.log(\"\");\n        }\n        if (!(body instanceof TypedByteArray)) {\n          request=Utils.readBodyToBytesIfNecessary(request);\n          body=request.getBody();\n        }\n        byte[] bodyBytes=((TypedByteArray)body).getBytes();\n        bodySize=bodyBytes.length;\n        String bodyCharset=MimeUtil.parseCharset(bodyMime);\n        String bodyString=new String(bodyBytes,bodyCharset);\n        for (int i=0, len=bodyString.length(); i < len; i+=LOG_CHUNK_SIZE) {\n          int end=Math.min(len,i + LOG_CHUNK_SIZE);\n          log.log(bodyString.substring(i,end));\n        }\n      }\n    }\n    log.log(String.format(\"---> END HTTP (%s-byte body)\",bodySize));\n  }\n  return request;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 248,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 39,
                    "startLineNumber": 343,
                    "startColumnNumber": 10,
                    "endLineNumber": 343,
                    "endColumnNumber": 49
                },
                "nodeContext": "log.log(\"Content-Length: \" + bodySize);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 7,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "long"
        },
        {
            "nodeContext": "bodySize",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 8,
                "startLineNumber": 367,
                "startColumnNumber": 60,
                "endLineNumber": 367,
                "endColumnNumber": 68
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 55,
                        "startLineNumber": 367,
                        "startColumnNumber": 14,
                        "endLineNumber": 367,
                        "endColumnNumber": 69
                    },
                    "nodeContext": "String.format(\"---> END HTTP (%s-byte body)\",bodySize)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 64,
                        "startLineNumber": 367,
                        "startColumnNumber": 6,
                        "endLineNumber": 367,
                        "endColumnNumber": 70
                    },
                    "nodeContext": "log.log(String.format(\"---> END HTTP (%s-byte body)\",bodySize))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 8,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 65,
                        "startLineNumber": 367,
                        "startColumnNumber": 6,
                        "endLineNumber": 367,
                        "endColumnNumber": 71
                    },
                    "nodeContext": "log.log(String.format(\"---> END HTTP (%s-byte body)\",bodySize));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1423,
                        "startLineNumber": 328,
                        "startColumnNumber": 58,
                        "endLineNumber": 368,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  for (  Header header : request.getHeaders()) {\n    log.log(header.getName() + \": \" + header.getValue());\n  }\n  long bodySize=0;\n  TypedOutput body=request.getBody();\n  if (body != null) {\n    bodySize=body.length();\n    String bodyMime=body.mimeType();\n    if (bodyMime != null) {\n      log.log(\"Content-Type: \" + bodyMime);\n    }\n    if (bodySize != -1) {\n      log.log(\"Content-Length: \" + bodySize);\n    }\n    if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n      if (!request.getHeaders().isEmpty()) {\n        log.log(\"\");\n      }\n      if (!(body instanceof TypedByteArray)) {\n        request=Utils.readBodyToBytesIfNecessary(request);\n        body=request.getBody();\n      }\n      byte[] bodyBytes=((TypedByteArray)body).getBytes();\n      bodySize=bodyBytes.length;\n      String bodyCharset=MimeUtil.parseCharset(bodyMime);\n      String bodyString=new String(bodyBytes,bodyCharset);\n      for (int i=0, len=bodyString.length(); i < len; i+=LOG_CHUNK_SIZE) {\n        int end=Math.min(len,i + LOG_CHUNK_SIZE);\n        log.log(bodyString.substring(i,end));\n      }\n    }\n  }\n  log.log(String.format(\"---> END HTTP (%s-byte body)\",bodySize));\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 209,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1477,
                        "startLineNumber": 328,
                        "startColumnNumber": 4,
                        "endLineNumber": 368,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "if (logLevel.ordinal() >= LogLevel.HEADERS.ordinal()) {\n  for (  Header header : request.getHeaders()) {\n    log.log(header.getName() + \": \" + header.getValue());\n  }\n  long bodySize=0;\n  TypedOutput body=request.getBody();\n  if (body != null) {\n    bodySize=body.length();\n    String bodyMime=body.mimeType();\n    if (bodyMime != null) {\n      log.log(\"Content-Type: \" + bodyMime);\n    }\n    if (bodySize != -1) {\n      log.log(\"Content-Length: \" + bodySize);\n    }\n    if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n      if (!request.getHeaders().isEmpty()) {\n        log.log(\"\");\n      }\n      if (!(body instanceof TypedByteArray)) {\n        request=Utils.readBodyToBytesIfNecessary(request);\n        body=request.getBody();\n      }\n      byte[] bodyBytes=((TypedByteArray)body).getBytes();\n      bodySize=bodyBytes.length;\n      String bodyCharset=MimeUtil.parseCharset(bodyMime);\n      String bodyString=new String(bodyBytes,bodyCharset);\n      for (int i=0, len=bodyString.length(); i < len; i+=LOG_CHUNK_SIZE) {\n        int end=Math.min(len,i + LOG_CHUNK_SIZE);\n        log.log(bodyString.substring(i,end));\n      }\n    }\n  }\n  log.log(String.format(\"---> END HTTP (%s-byte body)\",bodySize));\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 219,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1595,
                        "startLineNumber": 325,
                        "startColumnNumber": 75,
                        "endLineNumber": 371,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "{\n  log.log(String.format(\"---> HTTP %s %s\",request.getMethod(),request.getUrl()));\n  if (logLevel.ordinal() >= LogLevel.HEADERS.ordinal()) {\n    for (    Header header : request.getHeaders()) {\n      log.log(header.getName() + \": \" + header.getValue());\n    }\n    long bodySize=0;\n    TypedOutput body=request.getBody();\n    if (body != null) {\n      bodySize=body.length();\n      String bodyMime=body.mimeType();\n      if (bodyMime != null) {\n        log.log(\"Content-Type: \" + bodyMime);\n      }\n      if (bodySize != -1) {\n        log.log(\"Content-Length: \" + bodySize);\n      }\n      if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n        if (!request.getHeaders().isEmpty()) {\n          log.log(\"\");\n        }\n        if (!(body instanceof TypedByteArray)) {\n          request=Utils.readBodyToBytesIfNecessary(request);\n          body=request.getBody();\n        }\n        byte[] bodyBytes=((TypedByteArray)body).getBytes();\n        bodySize=bodyBytes.length;\n        String bodyCharset=MimeUtil.parseCharset(bodyMime);\n        String bodyString=new String(bodyBytes,bodyCharset);\n        for (int i=0, len=bodyString.length(); i < len; i+=LOG_CHUNK_SIZE) {\n          int end=Math.min(len,i + LOG_CHUNK_SIZE);\n          log.log(bodyString.substring(i,end));\n        }\n      }\n    }\n    log.log(String.format(\"---> END HTTP (%s-byte body)\",bodySize));\n  }\n  return request;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 236,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1764,
                        "startLineNumber": 324,
                        "startColumnNumber": 2,
                        "endLineNumber": 371,
                        "endColumnNumber": 3
                    },
                    "nodeContext": "/** \n * Log request headers and body. Consumes request body and returns identical replacement. \n */\nprivate Request logAndReplaceRequest(Request request) throws IOException {\n  log.log(String.format(\"---> HTTP %s %s\",request.getMethod(),request.getUrl()));\n  if (logLevel.ordinal() >= LogLevel.HEADERS.ordinal()) {\n    for (    Header header : request.getHeaders()) {\n      log.log(header.getName() + \": \" + header.getValue());\n    }\n    long bodySize=0;\n    TypedOutput body=request.getBody();\n    if (body != null) {\n      bodySize=body.length();\n      String bodyMime=body.mimeType();\n      if (bodyMime != null) {\n        log.log(\"Content-Type: \" + bodyMime);\n      }\n      if (bodySize != -1) {\n        log.log(\"Content-Length: \" + bodySize);\n      }\n      if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {\n        if (!request.getHeaders().isEmpty()) {\n          log.log(\"\");\n        }\n        if (!(body instanceof TypedByteArray)) {\n          request=Utils.readBodyToBytesIfNecessary(request);\n          body=request.getBody();\n        }\n        byte[] bodyBytes=((TypedByteArray)body).getBytes();\n        bodySize=bodyBytes.length;\n        String bodyCharset=MimeUtil.parseCharset(bodyMime);\n        String bodyString=new String(bodyBytes,bodyCharset);\n        for (int i=0, len=bodyString.length(); i < len; i+=LOG_CHUNK_SIZE) {\n          int end=Math.min(len,i + LOG_CHUNK_SIZE);\n          log.log(bodyString.substring(i,end));\n        }\n      }\n    }\n    log.log(String.format(\"---> END HTTP (%s-byte body)\",bodySize));\n  }\n  return request;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 248,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 65,
                    "startLineNumber": 367,
                    "startColumnNumber": 6,
                    "endLineNumber": 367,
                    "endColumnNumber": 71
                },
                "nodeContext": "log.log(String.format(\"---> END HTTP (%s-byte body)\",bodySize));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 9,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "long"
        }
    ],
    "positionList": [
        {
            "charLength": 8,
            "startLineNumber": 342,
            "startColumnNumber": 12,
            "endLineNumber": 342,
            "endColumnNumber": 20
        },
        {
            "charLength": 8,
            "startLineNumber": 343,
            "startColumnNumber": 39,
            "endLineNumber": 343,
            "endColumnNumber": 47
        },
        {
            "charLength": 8,
            "startLineNumber": 367,
            "startColumnNumber": 60,
            "endLineNumber": 367,
            "endColumnNumber": 68
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 1
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 7
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 3
        }
    ]
}