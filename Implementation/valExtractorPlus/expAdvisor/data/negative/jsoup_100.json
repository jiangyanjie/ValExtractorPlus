{
    "id": 100,
    "expression": "req",
    "projectName": "jsoup",
    "commitID": "7d4f963539e6206af7f79af5ef08c8fb7535746c",
    "filePath": "src/main/java/org/jsoup/helper/HttpConnection.java",
    "occurrences": 31,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "req",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 731,
                "startColumnNumber": 29,
                "endLineNumber": 731,
                "endColumnNumber": 32
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 49,
                        "startLineNumber": 731,
                        "startColumnNumber": 12,
                        "endLineNumber": 731,
                        "endColumnNumber": 61
                    },
                    "nodeContext": "Validate.notNull(req,\"Request must not be null\")",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 50,
                        "startLineNumber": 731,
                        "startColumnNumber": 12,
                        "endLineNumber": 731,
                        "endColumnNumber": 62
                    },
                    "nodeContext": "Validate.notNull(req,\"Request must not be null\");\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 5348,
                        "startLineNumber": 730,
                        "startColumnNumber": 102,
                        "endLineNumber": 825,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  Validate.notNull(req,\"Request must not be null\");\n  Validate.notNull(req.url(),\"URL must be specified to connect\");\n  String protocol=req.url().getProtocol();\n  if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))   throw new MalformedURLException(\"Only http & https protocols supported\");\n  final boolean methodHasBody=req.method().hasBody();\n  final boolean hasRequestBody=req.requestBody() != null;\n  if (!methodHasBody)   Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n  String mimeBoundary=null;\n  if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))   serialiseRequestUrl(req);\n else   if (methodHasBody)   mimeBoundary=setOutputContentType(req);\n  long startTime=System.nanoTime();\n  HttpURLConnection conn=createConnection(req);\n  Response res=null;\n  try {\n    conn.connect();\n    if (conn.getDoOutput())     writePost(req,conn.getOutputStream(),mimeBoundary);\n    int status=conn.getResponseCode();\n    res=new Response(previousResponse);\n    res.setupFromConnection(conn,previousResponse);\n    res.req=req;\n    if (res.hasHeader(LOCATION) && req.followRedirects()) {\n      if (status != HTTP_TEMP_REDIR) {\n        req.method(Method.GET);\n        req.data().clear();\n        req.requestBody(null);\n        req.removeHeader(CONTENT_TYPE);\n      }\n      String location=res.header(LOCATION);\n      if (location.startsWith(\"http:/\") && location.charAt(6) != '/')       location=location.substring(6);\n      URL redir=StringUtil.resolve(req.url(),location);\n      req.url(encodeUrl(redir));\n      for (      Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n        req.cookie(cookie.getKey(),cookie.getValue());\n      }\n      return execute(req,res);\n    }\n    if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())     throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n    String contentType=res.contentType();\n    if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n    if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n      if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n        req.parser(Parser.xmlParser());\n      }\n    }\n    res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n    if (conn.getContentLength() != 0 && req.method() != HEAD) {\n      res.bodyStream=null;\n      res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n      if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n        res.bodyStream=new GZIPInputStream(res.bodyStream);\n      }\n else       if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n        res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n      }\n      res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n    }\n else {\n      res.byteData=DataUtil.emptyByteBuffer();\n    }\n  }\n catch (  IOException e) {\n    if (res != null)     res.safeClose();\n    throw e;\n  }\n  res.executed=true;\n  return res;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 536,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 5442,
                        "startLineNumber": 730,
                        "startColumnNumber": 8,
                        "endLineNumber": 825,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "static Response execute(Connection.Request req,Response previousResponse) throws IOException {\n  Validate.notNull(req,\"Request must not be null\");\n  Validate.notNull(req.url(),\"URL must be specified to connect\");\n  String protocol=req.url().getProtocol();\n  if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))   throw new MalformedURLException(\"Only http & https protocols supported\");\n  final boolean methodHasBody=req.method().hasBody();\n  final boolean hasRequestBody=req.requestBody() != null;\n  if (!methodHasBody)   Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n  String mimeBoundary=null;\n  if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))   serialiseRequestUrl(req);\n else   if (methodHasBody)   mimeBoundary=setOutputContentType(req);\n  long startTime=System.nanoTime();\n  HttpURLConnection conn=createConnection(req);\n  Response res=null;\n  try {\n    conn.connect();\n    if (conn.getDoOutput())     writePost(req,conn.getOutputStream(),mimeBoundary);\n    int status=conn.getResponseCode();\n    res=new Response(previousResponse);\n    res.setupFromConnection(conn,previousResponse);\n    res.req=req;\n    if (res.hasHeader(LOCATION) && req.followRedirects()) {\n      if (status != HTTP_TEMP_REDIR) {\n        req.method(Method.GET);\n        req.data().clear();\n        req.requestBody(null);\n        req.removeHeader(CONTENT_TYPE);\n      }\n      String location=res.header(LOCATION);\n      if (location.startsWith(\"http:/\") && location.charAt(6) != '/')       location=location.substring(6);\n      URL redir=StringUtil.resolve(req.url(),location);\n      req.url(encodeUrl(redir));\n      for (      Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n        req.cookie(cookie.getKey(),cookie.getValue());\n      }\n      return execute(req,res);\n    }\n    if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())     throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n    String contentType=res.contentType();\n    if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n    if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n      if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n        req.parser(Parser.xmlParser());\n      }\n    }\n    res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n    if (conn.getContentLength() != 0 && req.method() != HEAD) {\n      res.bodyStream=null;\n      res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n      if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n        res.bodyStream=new GZIPInputStream(res.bodyStream);\n      }\n else       if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n        res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n      }\n      res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n    }\n else {\n      res.byteData=DataUtil.emptyByteBuffer();\n    }\n  }\n catch (  IOException e) {\n    if (res != null)     res.safeClose();\n    throw e;\n  }\n  res.executed=true;\n  return res;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 553,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 50,
                    "startLineNumber": 731,
                    "startColumnNumber": 12,
                    "endLineNumber": 731,
                    "endColumnNumber": 62
                },
                "nodeContext": "Validate.notNull(req,\"Request must not be null\");\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 6,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "org.jsoup.Connection.Request"
        },
        {
            "nodeContext": "req",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 732,
                "startColumnNumber": 29,
                "endLineNumber": 732,
                "endColumnNumber": 32
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 9,
                        "startLineNumber": 732,
                        "startColumnNumber": 29,
                        "endLineNumber": 732,
                        "endColumnNumber": 38
                    },
                    "nodeContext": "req.url()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 63,
                        "startLineNumber": 732,
                        "startColumnNumber": 12,
                        "endLineNumber": 732,
                        "endColumnNumber": 75
                    },
                    "nodeContext": "Validate.notNull(req.url(),\"URL must be specified to connect\")",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 64,
                        "startLineNumber": 732,
                        "startColumnNumber": 12,
                        "endLineNumber": 732,
                        "endColumnNumber": 76
                    },
                    "nodeContext": "Validate.notNull(req.url(),\"URL must be specified to connect\");\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 5348,
                        "startLineNumber": 730,
                        "startColumnNumber": 102,
                        "endLineNumber": 825,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  Validate.notNull(req,\"Request must not be null\");\n  Validate.notNull(req.url(),\"URL must be specified to connect\");\n  String protocol=req.url().getProtocol();\n  if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))   throw new MalformedURLException(\"Only http & https protocols supported\");\n  final boolean methodHasBody=req.method().hasBody();\n  final boolean hasRequestBody=req.requestBody() != null;\n  if (!methodHasBody)   Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n  String mimeBoundary=null;\n  if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))   serialiseRequestUrl(req);\n else   if (methodHasBody)   mimeBoundary=setOutputContentType(req);\n  long startTime=System.nanoTime();\n  HttpURLConnection conn=createConnection(req);\n  Response res=null;\n  try {\n    conn.connect();\n    if (conn.getDoOutput())     writePost(req,conn.getOutputStream(),mimeBoundary);\n    int status=conn.getResponseCode();\n    res=new Response(previousResponse);\n    res.setupFromConnection(conn,previousResponse);\n    res.req=req;\n    if (res.hasHeader(LOCATION) && req.followRedirects()) {\n      if (status != HTTP_TEMP_REDIR) {\n        req.method(Method.GET);\n        req.data().clear();\n        req.requestBody(null);\n        req.removeHeader(CONTENT_TYPE);\n      }\n      String location=res.header(LOCATION);\n      if (location.startsWith(\"http:/\") && location.charAt(6) != '/')       location=location.substring(6);\n      URL redir=StringUtil.resolve(req.url(),location);\n      req.url(encodeUrl(redir));\n      for (      Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n        req.cookie(cookie.getKey(),cookie.getValue());\n      }\n      return execute(req,res);\n    }\n    if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())     throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n    String contentType=res.contentType();\n    if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n    if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n      if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n        req.parser(Parser.xmlParser());\n      }\n    }\n    res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n    if (conn.getContentLength() != 0 && req.method() != HEAD) {\n      res.bodyStream=null;\n      res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n      if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n        res.bodyStream=new GZIPInputStream(res.bodyStream);\n      }\n else       if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n        res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n      }\n      res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n    }\n else {\n      res.byteData=DataUtil.emptyByteBuffer();\n    }\n  }\n catch (  IOException e) {\n    if (res != null)     res.safeClose();\n    throw e;\n  }\n  res.executed=true;\n  return res;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 536,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 5442,
                        "startLineNumber": 730,
                        "startColumnNumber": 8,
                        "endLineNumber": 825,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "static Response execute(Connection.Request req,Response previousResponse) throws IOException {\n  Validate.notNull(req,\"Request must not be null\");\n  Validate.notNull(req.url(),\"URL must be specified to connect\");\n  String protocol=req.url().getProtocol();\n  if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))   throw new MalformedURLException(\"Only http & https protocols supported\");\n  final boolean methodHasBody=req.method().hasBody();\n  final boolean hasRequestBody=req.requestBody() != null;\n  if (!methodHasBody)   Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n  String mimeBoundary=null;\n  if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))   serialiseRequestUrl(req);\n else   if (methodHasBody)   mimeBoundary=setOutputContentType(req);\n  long startTime=System.nanoTime();\n  HttpURLConnection conn=createConnection(req);\n  Response res=null;\n  try {\n    conn.connect();\n    if (conn.getDoOutput())     writePost(req,conn.getOutputStream(),mimeBoundary);\n    int status=conn.getResponseCode();\n    res=new Response(previousResponse);\n    res.setupFromConnection(conn,previousResponse);\n    res.req=req;\n    if (res.hasHeader(LOCATION) && req.followRedirects()) {\n      if (status != HTTP_TEMP_REDIR) {\n        req.method(Method.GET);\n        req.data().clear();\n        req.requestBody(null);\n        req.removeHeader(CONTENT_TYPE);\n      }\n      String location=res.header(LOCATION);\n      if (location.startsWith(\"http:/\") && location.charAt(6) != '/')       location=location.substring(6);\n      URL redir=StringUtil.resolve(req.url(),location);\n      req.url(encodeUrl(redir));\n      for (      Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n        req.cookie(cookie.getKey(),cookie.getValue());\n      }\n      return execute(req,res);\n    }\n    if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())     throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n    String contentType=res.contentType();\n    if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n    if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n      if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n        req.parser(Parser.xmlParser());\n      }\n    }\n    res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n    if (conn.getContentLength() != 0 && req.method() != HEAD) {\n      res.bodyStream=null;\n      res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n      if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n        res.bodyStream=new GZIPInputStream(res.bodyStream);\n      }\n else       if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n        res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n      }\n      res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n    }\n else {\n      res.byteData=DataUtil.emptyByteBuffer();\n    }\n  }\n catch (  IOException e) {\n    if (res != null)     res.safeClose();\n    throw e;\n  }\n  res.executed=true;\n  return res;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 553,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 64,
                    "startLineNumber": 732,
                    "startColumnNumber": 12,
                    "endLineNumber": 732,
                    "endColumnNumber": 76
                },
                "nodeContext": "Validate.notNull(req.url(),\"URL must be specified to connect\");\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.jsoup.Connection.Request"
        },
        {
            "nodeContext": "req",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 733,
                "startColumnNumber": 30,
                "endLineNumber": 733,
                "endColumnNumber": 33
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 9,
                        "startLineNumber": 733,
                        "startColumnNumber": 30,
                        "endLineNumber": 733,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "req.url()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 23,
                        "startLineNumber": 733,
                        "startColumnNumber": 30,
                        "endLineNumber": 733,
                        "endColumnNumber": 53
                    },
                    "nodeContext": "req.url().getProtocol()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 34,
                        "startLineNumber": 733,
                        "startColumnNumber": 19,
                        "endLineNumber": 733,
                        "endColumnNumber": 53
                    },
                    "nodeContext": "protocol=req.url().getProtocol()",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 42,
                        "startLineNumber": 733,
                        "startColumnNumber": 12,
                        "endLineNumber": 733,
                        "endColumnNumber": 54
                    },
                    "nodeContext": "String protocol=req.url().getProtocol();\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 10,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 5348,
                        "startLineNumber": 730,
                        "startColumnNumber": 102,
                        "endLineNumber": 825,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  Validate.notNull(req,\"Request must not be null\");\n  Validate.notNull(req.url(),\"URL must be specified to connect\");\n  String protocol=req.url().getProtocol();\n  if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))   throw new MalformedURLException(\"Only http & https protocols supported\");\n  final boolean methodHasBody=req.method().hasBody();\n  final boolean hasRequestBody=req.requestBody() != null;\n  if (!methodHasBody)   Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n  String mimeBoundary=null;\n  if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))   serialiseRequestUrl(req);\n else   if (methodHasBody)   mimeBoundary=setOutputContentType(req);\n  long startTime=System.nanoTime();\n  HttpURLConnection conn=createConnection(req);\n  Response res=null;\n  try {\n    conn.connect();\n    if (conn.getDoOutput())     writePost(req,conn.getOutputStream(),mimeBoundary);\n    int status=conn.getResponseCode();\n    res=new Response(previousResponse);\n    res.setupFromConnection(conn,previousResponse);\n    res.req=req;\n    if (res.hasHeader(LOCATION) && req.followRedirects()) {\n      if (status != HTTP_TEMP_REDIR) {\n        req.method(Method.GET);\n        req.data().clear();\n        req.requestBody(null);\n        req.removeHeader(CONTENT_TYPE);\n      }\n      String location=res.header(LOCATION);\n      if (location.startsWith(\"http:/\") && location.charAt(6) != '/')       location=location.substring(6);\n      URL redir=StringUtil.resolve(req.url(),location);\n      req.url(encodeUrl(redir));\n      for (      Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n        req.cookie(cookie.getKey(),cookie.getValue());\n      }\n      return execute(req,res);\n    }\n    if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())     throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n    String contentType=res.contentType();\n    if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n    if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n      if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n        req.parser(Parser.xmlParser());\n      }\n    }\n    res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n    if (conn.getContentLength() != 0 && req.method() != HEAD) {\n      res.bodyStream=null;\n      res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n      if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n        res.bodyStream=new GZIPInputStream(res.bodyStream);\n      }\n else       if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n        res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n      }\n      res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n    }\n else {\n      res.byteData=DataUtil.emptyByteBuffer();\n    }\n  }\n catch (  IOException e) {\n    if (res != null)     res.safeClose();\n    throw e;\n  }\n  res.executed=true;\n  return res;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 536,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 5442,
                        "startLineNumber": 730,
                        "startColumnNumber": 8,
                        "endLineNumber": 825,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "static Response execute(Connection.Request req,Response previousResponse) throws IOException {\n  Validate.notNull(req,\"Request must not be null\");\n  Validate.notNull(req.url(),\"URL must be specified to connect\");\n  String protocol=req.url().getProtocol();\n  if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))   throw new MalformedURLException(\"Only http & https protocols supported\");\n  final boolean methodHasBody=req.method().hasBody();\n  final boolean hasRequestBody=req.requestBody() != null;\n  if (!methodHasBody)   Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n  String mimeBoundary=null;\n  if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))   serialiseRequestUrl(req);\n else   if (methodHasBody)   mimeBoundary=setOutputContentType(req);\n  long startTime=System.nanoTime();\n  HttpURLConnection conn=createConnection(req);\n  Response res=null;\n  try {\n    conn.connect();\n    if (conn.getDoOutput())     writePost(req,conn.getOutputStream(),mimeBoundary);\n    int status=conn.getResponseCode();\n    res=new Response(previousResponse);\n    res.setupFromConnection(conn,previousResponse);\n    res.req=req;\n    if (res.hasHeader(LOCATION) && req.followRedirects()) {\n      if (status != HTTP_TEMP_REDIR) {\n        req.method(Method.GET);\n        req.data().clear();\n        req.requestBody(null);\n        req.removeHeader(CONTENT_TYPE);\n      }\n      String location=res.header(LOCATION);\n      if (location.startsWith(\"http:/\") && location.charAt(6) != '/')       location=location.substring(6);\n      URL redir=StringUtil.resolve(req.url(),location);\n      req.url(encodeUrl(redir));\n      for (      Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n        req.cookie(cookie.getKey(),cookie.getValue());\n      }\n      return execute(req,res);\n    }\n    if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())     throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n    String contentType=res.contentType();\n    if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n    if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n      if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n        req.parser(Parser.xmlParser());\n      }\n    }\n    res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n    if (conn.getContentLength() != 0 && req.method() != HEAD) {\n      res.bodyStream=null;\n      res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n      if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n        res.bodyStream=new GZIPInputStream(res.bodyStream);\n      }\n else       if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n        res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n      }\n      res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n    }\n else {\n      res.byteData=DataUtil.emptyByteBuffer();\n    }\n  }\n catch (  IOException e) {\n    if (res != null)     res.safeClose();\n    throw e;\n  }\n  res.executed=true;\n  return res;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 553,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 42,
                    "startLineNumber": 733,
                    "startColumnNumber": 12,
                    "endLineNumber": 733,
                    "endColumnNumber": 54
                },
                "nodeContext": "String protocol=req.url().getProtocol();\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 10,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "org.jsoup.Connection.Request"
        },
        {
            "nodeContext": "req",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 736,
                "startColumnNumber": 42,
                "endLineNumber": 736,
                "endColumnNumber": 45
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 12,
                        "startLineNumber": 736,
                        "startColumnNumber": 42,
                        "endLineNumber": 736,
                        "endColumnNumber": 54
                    },
                    "nodeContext": "req.method()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 22,
                        "startLineNumber": 736,
                        "startColumnNumber": 42,
                        "endLineNumber": 736,
                        "endColumnNumber": 64
                    },
                    "nodeContext": "req.method().hasBody()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 38,
                        "startLineNumber": 736,
                        "startColumnNumber": 26,
                        "endLineNumber": 736,
                        "endColumnNumber": 64
                    },
                    "nodeContext": "methodHasBody=req.method().hasBody()",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 53,
                        "startLineNumber": 736,
                        "startColumnNumber": 12,
                        "endLineNumber": 736,
                        "endColumnNumber": 65
                    },
                    "nodeContext": "final boolean methodHasBody=req.method().hasBody();\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 10,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 5348,
                        "startLineNumber": 730,
                        "startColumnNumber": 102,
                        "endLineNumber": 825,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  Validate.notNull(req,\"Request must not be null\");\n  Validate.notNull(req.url(),\"URL must be specified to connect\");\n  String protocol=req.url().getProtocol();\n  if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))   throw new MalformedURLException(\"Only http & https protocols supported\");\n  final boolean methodHasBody=req.method().hasBody();\n  final boolean hasRequestBody=req.requestBody() != null;\n  if (!methodHasBody)   Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n  String mimeBoundary=null;\n  if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))   serialiseRequestUrl(req);\n else   if (methodHasBody)   mimeBoundary=setOutputContentType(req);\n  long startTime=System.nanoTime();\n  HttpURLConnection conn=createConnection(req);\n  Response res=null;\n  try {\n    conn.connect();\n    if (conn.getDoOutput())     writePost(req,conn.getOutputStream(),mimeBoundary);\n    int status=conn.getResponseCode();\n    res=new Response(previousResponse);\n    res.setupFromConnection(conn,previousResponse);\n    res.req=req;\n    if (res.hasHeader(LOCATION) && req.followRedirects()) {\n      if (status != HTTP_TEMP_REDIR) {\n        req.method(Method.GET);\n        req.data().clear();\n        req.requestBody(null);\n        req.removeHeader(CONTENT_TYPE);\n      }\n      String location=res.header(LOCATION);\n      if (location.startsWith(\"http:/\") && location.charAt(6) != '/')       location=location.substring(6);\n      URL redir=StringUtil.resolve(req.url(),location);\n      req.url(encodeUrl(redir));\n      for (      Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n        req.cookie(cookie.getKey(),cookie.getValue());\n      }\n      return execute(req,res);\n    }\n    if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())     throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n    String contentType=res.contentType();\n    if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n    if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n      if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n        req.parser(Parser.xmlParser());\n      }\n    }\n    res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n    if (conn.getContentLength() != 0 && req.method() != HEAD) {\n      res.bodyStream=null;\n      res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n      if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n        res.bodyStream=new GZIPInputStream(res.bodyStream);\n      }\n else       if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n        res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n      }\n      res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n    }\n else {\n      res.byteData=DataUtil.emptyByteBuffer();\n    }\n  }\n catch (  IOException e) {\n    if (res != null)     res.safeClose();\n    throw e;\n  }\n  res.executed=true;\n  return res;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 536,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 5442,
                        "startLineNumber": 730,
                        "startColumnNumber": 8,
                        "endLineNumber": 825,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "static Response execute(Connection.Request req,Response previousResponse) throws IOException {\n  Validate.notNull(req,\"Request must not be null\");\n  Validate.notNull(req.url(),\"URL must be specified to connect\");\n  String protocol=req.url().getProtocol();\n  if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))   throw new MalformedURLException(\"Only http & https protocols supported\");\n  final boolean methodHasBody=req.method().hasBody();\n  final boolean hasRequestBody=req.requestBody() != null;\n  if (!methodHasBody)   Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n  String mimeBoundary=null;\n  if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))   serialiseRequestUrl(req);\n else   if (methodHasBody)   mimeBoundary=setOutputContentType(req);\n  long startTime=System.nanoTime();\n  HttpURLConnection conn=createConnection(req);\n  Response res=null;\n  try {\n    conn.connect();\n    if (conn.getDoOutput())     writePost(req,conn.getOutputStream(),mimeBoundary);\n    int status=conn.getResponseCode();\n    res=new Response(previousResponse);\n    res.setupFromConnection(conn,previousResponse);\n    res.req=req;\n    if (res.hasHeader(LOCATION) && req.followRedirects()) {\n      if (status != HTTP_TEMP_REDIR) {\n        req.method(Method.GET);\n        req.data().clear();\n        req.requestBody(null);\n        req.removeHeader(CONTENT_TYPE);\n      }\n      String location=res.header(LOCATION);\n      if (location.startsWith(\"http:/\") && location.charAt(6) != '/')       location=location.substring(6);\n      URL redir=StringUtil.resolve(req.url(),location);\n      req.url(encodeUrl(redir));\n      for (      Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n        req.cookie(cookie.getKey(),cookie.getValue());\n      }\n      return execute(req,res);\n    }\n    if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())     throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n    String contentType=res.contentType();\n    if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n    if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n      if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n        req.parser(Parser.xmlParser());\n      }\n    }\n    res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n    if (conn.getContentLength() != 0 && req.method() != HEAD) {\n      res.bodyStream=null;\n      res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n      if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n        res.bodyStream=new GZIPInputStream(res.bodyStream);\n      }\n else       if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n        res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n      }\n      res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n    }\n else {\n      res.byteData=DataUtil.emptyByteBuffer();\n    }\n  }\n catch (  IOException e) {\n    if (res != null)     res.safeClose();\n    throw e;\n  }\n  res.executed=true;\n  return res;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 553,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 53,
                    "startLineNumber": 736,
                    "startColumnNumber": 12,
                    "endLineNumber": 736,
                    "endColumnNumber": 65
                },
                "nodeContext": "final boolean methodHasBody=req.method().hasBody();\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 10,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "org.jsoup.Connection.Request"
        },
        {
            "nodeContext": "req",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 737,
                "startColumnNumber": 43,
                "endLineNumber": 737,
                "endColumnNumber": 46
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 17,
                        "startLineNumber": 737,
                        "startColumnNumber": 43,
                        "endLineNumber": 737,
                        "endColumnNumber": 60
                    },
                    "nodeContext": "req.requestBody()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 25,
                        "startLineNumber": 737,
                        "startColumnNumber": 43,
                        "endLineNumber": 737,
                        "endColumnNumber": 68
                    },
                    "nodeContext": "req.requestBody() != null",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 42,
                        "startLineNumber": 737,
                        "startColumnNumber": 26,
                        "endLineNumber": 737,
                        "endColumnNumber": 68
                    },
                    "nodeContext": "hasRequestBody=req.requestBody() != null",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 57,
                        "startLineNumber": 737,
                        "startColumnNumber": 12,
                        "endLineNumber": 737,
                        "endColumnNumber": 69
                    },
                    "nodeContext": "final boolean hasRequestBody=req.requestBody() != null;\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 10,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 5348,
                        "startLineNumber": 730,
                        "startColumnNumber": 102,
                        "endLineNumber": 825,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  Validate.notNull(req,\"Request must not be null\");\n  Validate.notNull(req.url(),\"URL must be specified to connect\");\n  String protocol=req.url().getProtocol();\n  if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))   throw new MalformedURLException(\"Only http & https protocols supported\");\n  final boolean methodHasBody=req.method().hasBody();\n  final boolean hasRequestBody=req.requestBody() != null;\n  if (!methodHasBody)   Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n  String mimeBoundary=null;\n  if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))   serialiseRequestUrl(req);\n else   if (methodHasBody)   mimeBoundary=setOutputContentType(req);\n  long startTime=System.nanoTime();\n  HttpURLConnection conn=createConnection(req);\n  Response res=null;\n  try {\n    conn.connect();\n    if (conn.getDoOutput())     writePost(req,conn.getOutputStream(),mimeBoundary);\n    int status=conn.getResponseCode();\n    res=new Response(previousResponse);\n    res.setupFromConnection(conn,previousResponse);\n    res.req=req;\n    if (res.hasHeader(LOCATION) && req.followRedirects()) {\n      if (status != HTTP_TEMP_REDIR) {\n        req.method(Method.GET);\n        req.data().clear();\n        req.requestBody(null);\n        req.removeHeader(CONTENT_TYPE);\n      }\n      String location=res.header(LOCATION);\n      if (location.startsWith(\"http:/\") && location.charAt(6) != '/')       location=location.substring(6);\n      URL redir=StringUtil.resolve(req.url(),location);\n      req.url(encodeUrl(redir));\n      for (      Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n        req.cookie(cookie.getKey(),cookie.getValue());\n      }\n      return execute(req,res);\n    }\n    if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())     throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n    String contentType=res.contentType();\n    if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n    if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n      if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n        req.parser(Parser.xmlParser());\n      }\n    }\n    res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n    if (conn.getContentLength() != 0 && req.method() != HEAD) {\n      res.bodyStream=null;\n      res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n      if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n        res.bodyStream=new GZIPInputStream(res.bodyStream);\n      }\n else       if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n        res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n      }\n      res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n    }\n else {\n      res.byteData=DataUtil.emptyByteBuffer();\n    }\n  }\n catch (  IOException e) {\n    if (res != null)     res.safeClose();\n    throw e;\n  }\n  res.executed=true;\n  return res;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 536,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 5442,
                        "startLineNumber": 730,
                        "startColumnNumber": 8,
                        "endLineNumber": 825,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "static Response execute(Connection.Request req,Response previousResponse) throws IOException {\n  Validate.notNull(req,\"Request must not be null\");\n  Validate.notNull(req.url(),\"URL must be specified to connect\");\n  String protocol=req.url().getProtocol();\n  if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))   throw new MalformedURLException(\"Only http & https protocols supported\");\n  final boolean methodHasBody=req.method().hasBody();\n  final boolean hasRequestBody=req.requestBody() != null;\n  if (!methodHasBody)   Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n  String mimeBoundary=null;\n  if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))   serialiseRequestUrl(req);\n else   if (methodHasBody)   mimeBoundary=setOutputContentType(req);\n  long startTime=System.nanoTime();\n  HttpURLConnection conn=createConnection(req);\n  Response res=null;\n  try {\n    conn.connect();\n    if (conn.getDoOutput())     writePost(req,conn.getOutputStream(),mimeBoundary);\n    int status=conn.getResponseCode();\n    res=new Response(previousResponse);\n    res.setupFromConnection(conn,previousResponse);\n    res.req=req;\n    if (res.hasHeader(LOCATION) && req.followRedirects()) {\n      if (status != HTTP_TEMP_REDIR) {\n        req.method(Method.GET);\n        req.data().clear();\n        req.requestBody(null);\n        req.removeHeader(CONTENT_TYPE);\n      }\n      String location=res.header(LOCATION);\n      if (location.startsWith(\"http:/\") && location.charAt(6) != '/')       location=location.substring(6);\n      URL redir=StringUtil.resolve(req.url(),location);\n      req.url(encodeUrl(redir));\n      for (      Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n        req.cookie(cookie.getKey(),cookie.getValue());\n      }\n      return execute(req,res);\n    }\n    if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())     throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n    String contentType=res.contentType();\n    if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n    if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n      if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n        req.parser(Parser.xmlParser());\n      }\n    }\n    res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n    if (conn.getContentLength() != 0 && req.method() != HEAD) {\n      res.bodyStream=null;\n      res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n      if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n        res.bodyStream=new GZIPInputStream(res.bodyStream);\n      }\n else       if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n        res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n      }\n      res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n    }\n else {\n      res.byteData=DataUtil.emptyByteBuffer();\n    }\n  }\n catch (  IOException e) {\n    if (res != null)     res.safeClose();\n    throw e;\n  }\n  res.executed=true;\n  return res;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 553,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 57,
                    "startLineNumber": 737,
                    "startColumnNumber": 12,
                    "endLineNumber": 737,
                    "endColumnNumber": 69
                },
                "nodeContext": "final boolean hasRequestBody=req.requestBody() != null;\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 10,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "org.jsoup.Connection.Request"
        },
        {
            "nodeContext": "req",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 739,
                "startColumnNumber": 96,
                "endLineNumber": 739,
                "endColumnNumber": 99
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 12,
                        "startLineNumber": 739,
                        "startColumnNumber": 96,
                        "endLineNumber": 739,
                        "endColumnNumber": 108
                    },
                    "nodeContext": "req.method()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 59,
                        "startLineNumber": 739,
                        "startColumnNumber": 49,
                        "endLineNumber": 739,
                        "endColumnNumber": 108
                    },
                    "nodeContext": "\"Cannot set a request body for HTTP method \" + req.method()",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 93,
                        "startLineNumber": 739,
                        "startColumnNumber": 16,
                        "endLineNumber": 739,
                        "endColumnNumber": 109
                    },
                    "nodeContext": "Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 94,
                        "startLineNumber": 739,
                        "startColumnNumber": 16,
                        "endLineNumber": 739,
                        "endColumnNumber": 110
                    },
                    "nodeContext": "Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 10,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 130,
                        "startLineNumber": 738,
                        "startColumnNumber": 12,
                        "endLineNumber": 739,
                        "endColumnNumber": 110
                    },
                    "nodeContext": "if (!methodHasBody) Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 13,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 5348,
                        "startLineNumber": 730,
                        "startColumnNumber": 102,
                        "endLineNumber": 825,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  Validate.notNull(req,\"Request must not be null\");\n  Validate.notNull(req.url(),\"URL must be specified to connect\");\n  String protocol=req.url().getProtocol();\n  if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))   throw new MalformedURLException(\"Only http & https protocols supported\");\n  final boolean methodHasBody=req.method().hasBody();\n  final boolean hasRequestBody=req.requestBody() != null;\n  if (!methodHasBody)   Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n  String mimeBoundary=null;\n  if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))   serialiseRequestUrl(req);\n else   if (methodHasBody)   mimeBoundary=setOutputContentType(req);\n  long startTime=System.nanoTime();\n  HttpURLConnection conn=createConnection(req);\n  Response res=null;\n  try {\n    conn.connect();\n    if (conn.getDoOutput())     writePost(req,conn.getOutputStream(),mimeBoundary);\n    int status=conn.getResponseCode();\n    res=new Response(previousResponse);\n    res.setupFromConnection(conn,previousResponse);\n    res.req=req;\n    if (res.hasHeader(LOCATION) && req.followRedirects()) {\n      if (status != HTTP_TEMP_REDIR) {\n        req.method(Method.GET);\n        req.data().clear();\n        req.requestBody(null);\n        req.removeHeader(CONTENT_TYPE);\n      }\n      String location=res.header(LOCATION);\n      if (location.startsWith(\"http:/\") && location.charAt(6) != '/')       location=location.substring(6);\n      URL redir=StringUtil.resolve(req.url(),location);\n      req.url(encodeUrl(redir));\n      for (      Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n        req.cookie(cookie.getKey(),cookie.getValue());\n      }\n      return execute(req,res);\n    }\n    if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())     throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n    String contentType=res.contentType();\n    if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n    if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n      if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n        req.parser(Parser.xmlParser());\n      }\n    }\n    res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n    if (conn.getContentLength() != 0 && req.method() != HEAD) {\n      res.bodyStream=null;\n      res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n      if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n        res.bodyStream=new GZIPInputStream(res.bodyStream);\n      }\n else       if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n        res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n      }\n      res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n    }\n else {\n      res.byteData=DataUtil.emptyByteBuffer();\n    }\n  }\n catch (  IOException e) {\n    if (res != null)     res.safeClose();\n    throw e;\n  }\n  res.executed=true;\n  return res;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 536,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 5442,
                        "startLineNumber": 730,
                        "startColumnNumber": 8,
                        "endLineNumber": 825,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "static Response execute(Connection.Request req,Response previousResponse) throws IOException {\n  Validate.notNull(req,\"Request must not be null\");\n  Validate.notNull(req.url(),\"URL must be specified to connect\");\n  String protocol=req.url().getProtocol();\n  if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))   throw new MalformedURLException(\"Only http & https protocols supported\");\n  final boolean methodHasBody=req.method().hasBody();\n  final boolean hasRequestBody=req.requestBody() != null;\n  if (!methodHasBody)   Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n  String mimeBoundary=null;\n  if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))   serialiseRequestUrl(req);\n else   if (methodHasBody)   mimeBoundary=setOutputContentType(req);\n  long startTime=System.nanoTime();\n  HttpURLConnection conn=createConnection(req);\n  Response res=null;\n  try {\n    conn.connect();\n    if (conn.getDoOutput())     writePost(req,conn.getOutputStream(),mimeBoundary);\n    int status=conn.getResponseCode();\n    res=new Response(previousResponse);\n    res.setupFromConnection(conn,previousResponse);\n    res.req=req;\n    if (res.hasHeader(LOCATION) && req.followRedirects()) {\n      if (status != HTTP_TEMP_REDIR) {\n        req.method(Method.GET);\n        req.data().clear();\n        req.requestBody(null);\n        req.removeHeader(CONTENT_TYPE);\n      }\n      String location=res.header(LOCATION);\n      if (location.startsWith(\"http:/\") && location.charAt(6) != '/')       location=location.substring(6);\n      URL redir=StringUtil.resolve(req.url(),location);\n      req.url(encodeUrl(redir));\n      for (      Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n        req.cookie(cookie.getKey(),cookie.getValue());\n      }\n      return execute(req,res);\n    }\n    if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())     throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n    String contentType=res.contentType();\n    if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n    if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n      if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n        req.parser(Parser.xmlParser());\n      }\n    }\n    res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n    if (conn.getContentLength() != 0 && req.method() != HEAD) {\n      res.bodyStream=null;\n      res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n      if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n        res.bodyStream=new GZIPInputStream(res.bodyStream);\n      }\n else       if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n        res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n      }\n      res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n    }\n else {\n      res.byteData=DataUtil.emptyByteBuffer();\n    }\n  }\n catch (  IOException e) {\n    if (res != null)     res.safeClose();\n    throw e;\n  }\n  res.executed=true;\n  return res;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 553,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                "nodePosition": {
                    "charLength": 94,
                    "startLineNumber": 739,
                    "startColumnNumber": 16,
                    "endLineNumber": 739,
                    "endColumnNumber": 110
                },
                "nodeContext": "Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 10,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "org.jsoup.Connection.Request"
        },
        {
            "nodeContext": "req",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 743,
                "startColumnNumber": 16,
                "endLineNumber": 743,
                "endColumnNumber": 19
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 10,
                        "startLineNumber": 743,
                        "startColumnNumber": 16,
                        "endLineNumber": 743,
                        "endColumnNumber": 26
                    },
                    "nodeContext": "req.data()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 17,
                        "startLineNumber": 743,
                        "startColumnNumber": 16,
                        "endLineNumber": 743,
                        "endColumnNumber": 33
                    },
                    "nodeContext": "req.data().size()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 21,
                        "startLineNumber": 743,
                        "startColumnNumber": 16,
                        "endLineNumber": 743,
                        "endColumnNumber": 37
                    },
                    "nodeContext": "req.data().size() > 0",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 59,
                        "startLineNumber": 743,
                        "startColumnNumber": 16,
                        "endLineNumber": 743,
                        "endColumnNumber": 75
                    },
                    "nodeContext": "req.data().size() > 0 && (!methodHasBody || hasRequestBody)",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 13,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 200,
                        "startLineNumber": 743,
                        "startColumnNumber": 12,
                        "endLineNumber": 746,
                        "endColumnNumber": 57
                    },
                    "nodeContext": "if (req.data().size() > 0 && (!methodHasBody || hasRequestBody)) serialiseRequestUrl(req);\n else if (methodHasBody) mimeBoundary=setOutputContentType(req);\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 26,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 5348,
                        "startLineNumber": 730,
                        "startColumnNumber": 102,
                        "endLineNumber": 825,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  Validate.notNull(req,\"Request must not be null\");\n  Validate.notNull(req.url(),\"URL must be specified to connect\");\n  String protocol=req.url().getProtocol();\n  if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))   throw new MalformedURLException(\"Only http & https protocols supported\");\n  final boolean methodHasBody=req.method().hasBody();\n  final boolean hasRequestBody=req.requestBody() != null;\n  if (!methodHasBody)   Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n  String mimeBoundary=null;\n  if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))   serialiseRequestUrl(req);\n else   if (methodHasBody)   mimeBoundary=setOutputContentType(req);\n  long startTime=System.nanoTime();\n  HttpURLConnection conn=createConnection(req);\n  Response res=null;\n  try {\n    conn.connect();\n    if (conn.getDoOutput())     writePost(req,conn.getOutputStream(),mimeBoundary);\n    int status=conn.getResponseCode();\n    res=new Response(previousResponse);\n    res.setupFromConnection(conn,previousResponse);\n    res.req=req;\n    if (res.hasHeader(LOCATION) && req.followRedirects()) {\n      if (status != HTTP_TEMP_REDIR) {\n        req.method(Method.GET);\n        req.data().clear();\n        req.requestBody(null);\n        req.removeHeader(CONTENT_TYPE);\n      }\n      String location=res.header(LOCATION);\n      if (location.startsWith(\"http:/\") && location.charAt(6) != '/')       location=location.substring(6);\n      URL redir=StringUtil.resolve(req.url(),location);\n      req.url(encodeUrl(redir));\n      for (      Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n        req.cookie(cookie.getKey(),cookie.getValue());\n      }\n      return execute(req,res);\n    }\n    if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())     throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n    String contentType=res.contentType();\n    if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n    if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n      if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n        req.parser(Parser.xmlParser());\n      }\n    }\n    res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n    if (conn.getContentLength() != 0 && req.method() != HEAD) {\n      res.bodyStream=null;\n      res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n      if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n        res.bodyStream=new GZIPInputStream(res.bodyStream);\n      }\n else       if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n        res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n      }\n      res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n    }\n else {\n      res.byteData=DataUtil.emptyByteBuffer();\n    }\n  }\n catch (  IOException e) {\n    if (res != null)     res.safeClose();\n    throw e;\n  }\n  res.executed=true;\n  return res;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 536,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 5442,
                        "startLineNumber": 730,
                        "startColumnNumber": 8,
                        "endLineNumber": 825,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "static Response execute(Connection.Request req,Response previousResponse) throws IOException {\n  Validate.notNull(req,\"Request must not be null\");\n  Validate.notNull(req.url(),\"URL must be specified to connect\");\n  String protocol=req.url().getProtocol();\n  if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))   throw new MalformedURLException(\"Only http & https protocols supported\");\n  final boolean methodHasBody=req.method().hasBody();\n  final boolean hasRequestBody=req.requestBody() != null;\n  if (!methodHasBody)   Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n  String mimeBoundary=null;\n  if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))   serialiseRequestUrl(req);\n else   if (methodHasBody)   mimeBoundary=setOutputContentType(req);\n  long startTime=System.nanoTime();\n  HttpURLConnection conn=createConnection(req);\n  Response res=null;\n  try {\n    conn.connect();\n    if (conn.getDoOutput())     writePost(req,conn.getOutputStream(),mimeBoundary);\n    int status=conn.getResponseCode();\n    res=new Response(previousResponse);\n    res.setupFromConnection(conn,previousResponse);\n    res.req=req;\n    if (res.hasHeader(LOCATION) && req.followRedirects()) {\n      if (status != HTTP_TEMP_REDIR) {\n        req.method(Method.GET);\n        req.data().clear();\n        req.requestBody(null);\n        req.removeHeader(CONTENT_TYPE);\n      }\n      String location=res.header(LOCATION);\n      if (location.startsWith(\"http:/\") && location.charAt(6) != '/')       location=location.substring(6);\n      URL redir=StringUtil.resolve(req.url(),location);\n      req.url(encodeUrl(redir));\n      for (      Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n        req.cookie(cookie.getKey(),cookie.getValue());\n      }\n      return execute(req,res);\n    }\n    if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())     throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n    String contentType=res.contentType();\n    if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n    if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n      if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n        req.parser(Parser.xmlParser());\n      }\n    }\n    res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n    if (conn.getContentLength() != 0 && req.method() != HEAD) {\n      res.bodyStream=null;\n      res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n      if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n        res.bodyStream=new GZIPInputStream(res.bodyStream);\n      }\n else       if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n        res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n      }\n      res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n    }\n else {\n      res.byteData=DataUtil.emptyByteBuffer();\n    }\n  }\n catch (  IOException e) {\n    if (res != null)     res.safeClose();\n    throw e;\n  }\n  res.executed=true;\n  return res;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 553,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 59,
                    "startLineNumber": 743,
                    "startColumnNumber": 16,
                    "endLineNumber": 743,
                    "endColumnNumber": 75
                },
                "nodeContext": "req.data().size() > 0 && (!methodHasBody || hasRequestBody)",
                "nodeType": "InfixExpression",
                "astNodeNumber": 13,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "org.jsoup.Connection.Request"
        },
        {
            "nodeContext": "req",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 744,
                "startColumnNumber": 36,
                "endLineNumber": 744,
                "endColumnNumber": 39
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 24,
                        "startLineNumber": 744,
                        "startColumnNumber": 16,
                        "endLineNumber": 744,
                        "endColumnNumber": 40
                    },
                    "nodeContext": "serialiseRequestUrl(req)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 25,
                        "startLineNumber": 744,
                        "startColumnNumber": 16,
                        "endLineNumber": 744,
                        "endColumnNumber": 41
                    },
                    "nodeContext": "serialiseRequestUrl(req);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 200,
                        "startLineNumber": 743,
                        "startColumnNumber": 12,
                        "endLineNumber": 746,
                        "endColumnNumber": 57
                    },
                    "nodeContext": "if (req.data().size() > 0 && (!methodHasBody || hasRequestBody)) serialiseRequestUrl(req);\n else if (methodHasBody) mimeBoundary=setOutputContentType(req);\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 26,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 5348,
                        "startLineNumber": 730,
                        "startColumnNumber": 102,
                        "endLineNumber": 825,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  Validate.notNull(req,\"Request must not be null\");\n  Validate.notNull(req.url(),\"URL must be specified to connect\");\n  String protocol=req.url().getProtocol();\n  if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))   throw new MalformedURLException(\"Only http & https protocols supported\");\n  final boolean methodHasBody=req.method().hasBody();\n  final boolean hasRequestBody=req.requestBody() != null;\n  if (!methodHasBody)   Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n  String mimeBoundary=null;\n  if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))   serialiseRequestUrl(req);\n else   if (methodHasBody)   mimeBoundary=setOutputContentType(req);\n  long startTime=System.nanoTime();\n  HttpURLConnection conn=createConnection(req);\n  Response res=null;\n  try {\n    conn.connect();\n    if (conn.getDoOutput())     writePost(req,conn.getOutputStream(),mimeBoundary);\n    int status=conn.getResponseCode();\n    res=new Response(previousResponse);\n    res.setupFromConnection(conn,previousResponse);\n    res.req=req;\n    if (res.hasHeader(LOCATION) && req.followRedirects()) {\n      if (status != HTTP_TEMP_REDIR) {\n        req.method(Method.GET);\n        req.data().clear();\n        req.requestBody(null);\n        req.removeHeader(CONTENT_TYPE);\n      }\n      String location=res.header(LOCATION);\n      if (location.startsWith(\"http:/\") && location.charAt(6) != '/')       location=location.substring(6);\n      URL redir=StringUtil.resolve(req.url(),location);\n      req.url(encodeUrl(redir));\n      for (      Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n        req.cookie(cookie.getKey(),cookie.getValue());\n      }\n      return execute(req,res);\n    }\n    if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())     throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n    String contentType=res.contentType();\n    if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n    if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n      if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n        req.parser(Parser.xmlParser());\n      }\n    }\n    res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n    if (conn.getContentLength() != 0 && req.method() != HEAD) {\n      res.bodyStream=null;\n      res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n      if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n        res.bodyStream=new GZIPInputStream(res.bodyStream);\n      }\n else       if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n        res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n      }\n      res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n    }\n else {\n      res.byteData=DataUtil.emptyByteBuffer();\n    }\n  }\n catch (  IOException e) {\n    if (res != null)     res.safeClose();\n    throw e;\n  }\n  res.executed=true;\n  return res;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 536,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 5442,
                        "startLineNumber": 730,
                        "startColumnNumber": 8,
                        "endLineNumber": 825,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "static Response execute(Connection.Request req,Response previousResponse) throws IOException {\n  Validate.notNull(req,\"Request must not be null\");\n  Validate.notNull(req.url(),\"URL must be specified to connect\");\n  String protocol=req.url().getProtocol();\n  if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))   throw new MalformedURLException(\"Only http & https protocols supported\");\n  final boolean methodHasBody=req.method().hasBody();\n  final boolean hasRequestBody=req.requestBody() != null;\n  if (!methodHasBody)   Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n  String mimeBoundary=null;\n  if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))   serialiseRequestUrl(req);\n else   if (methodHasBody)   mimeBoundary=setOutputContentType(req);\n  long startTime=System.nanoTime();\n  HttpURLConnection conn=createConnection(req);\n  Response res=null;\n  try {\n    conn.connect();\n    if (conn.getDoOutput())     writePost(req,conn.getOutputStream(),mimeBoundary);\n    int status=conn.getResponseCode();\n    res=new Response(previousResponse);\n    res.setupFromConnection(conn,previousResponse);\n    res.req=req;\n    if (res.hasHeader(LOCATION) && req.followRedirects()) {\n      if (status != HTTP_TEMP_REDIR) {\n        req.method(Method.GET);\n        req.data().clear();\n        req.requestBody(null);\n        req.removeHeader(CONTENT_TYPE);\n      }\n      String location=res.header(LOCATION);\n      if (location.startsWith(\"http:/\") && location.charAt(6) != '/')       location=location.substring(6);\n      URL redir=StringUtil.resolve(req.url(),location);\n      req.url(encodeUrl(redir));\n      for (      Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n        req.cookie(cookie.getKey(),cookie.getValue());\n      }\n      return execute(req,res);\n    }\n    if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())     throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n    String contentType=res.contentType();\n    if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n    if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n      if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n        req.parser(Parser.xmlParser());\n      }\n    }\n    res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n    if (conn.getContentLength() != 0 && req.method() != HEAD) {\n      res.bodyStream=null;\n      res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n      if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n        res.bodyStream=new GZIPInputStream(res.bodyStream);\n      }\n else       if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n        res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n      }\n      res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n    }\n else {\n      res.byteData=DataUtil.emptyByteBuffer();\n    }\n  }\n catch (  IOException e) {\n    if (res != null)     res.safeClose();\n    throw e;\n  }\n  res.executed=true;\n  return res;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 553,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                "nodePosition": {
                    "charLength": 25,
                    "startLineNumber": 744,
                    "startColumnNumber": 16,
                    "endLineNumber": 744,
                    "endColumnNumber": 41
                },
                "nodeContext": "serialiseRequestUrl(req);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 4,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "org.jsoup.Connection.Request"
        },
        {
            "nodeContext": "req",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 746,
                "startColumnNumber": 52,
                "endLineNumber": 746,
                "endColumnNumber": 55
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 25,
                        "startLineNumber": 746,
                        "startColumnNumber": 31,
                        "endLineNumber": 746,
                        "endColumnNumber": 56
                    },
                    "nodeContext": "setOutputContentType(req)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 40,
                        "startLineNumber": 746,
                        "startColumnNumber": 16,
                        "endLineNumber": 746,
                        "endColumnNumber": 56
                    },
                    "nodeContext": "mimeBoundary=setOutputContentType(req)",
                    "nodeType": "Assignment",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 41,
                        "startLineNumber": 746,
                        "startColumnNumber": 16,
                        "endLineNumber": 746,
                        "endColumnNumber": 57
                    },
                    "nodeContext": "mimeBoundary=setOutputContentType(req);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 6,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
                    "nodePosition": {
                        "charLength": 76,
                        "startLineNumber": 745,
                        "startColumnNumber": 17,
                        "endLineNumber": 746,
                        "endColumnNumber": 57
                    },
                    "nodeContext": "if (methodHasBody) mimeBoundary=setOutputContentType(req);\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 200,
                        "startLineNumber": 743,
                        "startColumnNumber": 12,
                        "endLineNumber": 746,
                        "endColumnNumber": 57
                    },
                    "nodeContext": "if (req.data().size() > 0 && (!methodHasBody || hasRequestBody)) serialiseRequestUrl(req);\n else if (methodHasBody) mimeBoundary=setOutputContentType(req);\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 26,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 5348,
                        "startLineNumber": 730,
                        "startColumnNumber": 102,
                        "endLineNumber": 825,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  Validate.notNull(req,\"Request must not be null\");\n  Validate.notNull(req.url(),\"URL must be specified to connect\");\n  String protocol=req.url().getProtocol();\n  if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))   throw new MalformedURLException(\"Only http & https protocols supported\");\n  final boolean methodHasBody=req.method().hasBody();\n  final boolean hasRequestBody=req.requestBody() != null;\n  if (!methodHasBody)   Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n  String mimeBoundary=null;\n  if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))   serialiseRequestUrl(req);\n else   if (methodHasBody)   mimeBoundary=setOutputContentType(req);\n  long startTime=System.nanoTime();\n  HttpURLConnection conn=createConnection(req);\n  Response res=null;\n  try {\n    conn.connect();\n    if (conn.getDoOutput())     writePost(req,conn.getOutputStream(),mimeBoundary);\n    int status=conn.getResponseCode();\n    res=new Response(previousResponse);\n    res.setupFromConnection(conn,previousResponse);\n    res.req=req;\n    if (res.hasHeader(LOCATION) && req.followRedirects()) {\n      if (status != HTTP_TEMP_REDIR) {\n        req.method(Method.GET);\n        req.data().clear();\n        req.requestBody(null);\n        req.removeHeader(CONTENT_TYPE);\n      }\n      String location=res.header(LOCATION);\n      if (location.startsWith(\"http:/\") && location.charAt(6) != '/')       location=location.substring(6);\n      URL redir=StringUtil.resolve(req.url(),location);\n      req.url(encodeUrl(redir));\n      for (      Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n        req.cookie(cookie.getKey(),cookie.getValue());\n      }\n      return execute(req,res);\n    }\n    if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())     throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n    String contentType=res.contentType();\n    if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n    if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n      if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n        req.parser(Parser.xmlParser());\n      }\n    }\n    res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n    if (conn.getContentLength() != 0 && req.method() != HEAD) {\n      res.bodyStream=null;\n      res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n      if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n        res.bodyStream=new GZIPInputStream(res.bodyStream);\n      }\n else       if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n        res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n      }\n      res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n    }\n else {\n      res.byteData=DataUtil.emptyByteBuffer();\n    }\n  }\n catch (  IOException e) {\n    if (res != null)     res.safeClose();\n    throw e;\n  }\n  res.executed=true;\n  return res;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 536,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 5442,
                        "startLineNumber": 730,
                        "startColumnNumber": 8,
                        "endLineNumber": 825,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "static Response execute(Connection.Request req,Response previousResponse) throws IOException {\n  Validate.notNull(req,\"Request must not be null\");\n  Validate.notNull(req.url(),\"URL must be specified to connect\");\n  String protocol=req.url().getProtocol();\n  if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))   throw new MalformedURLException(\"Only http & https protocols supported\");\n  final boolean methodHasBody=req.method().hasBody();\n  final boolean hasRequestBody=req.requestBody() != null;\n  if (!methodHasBody)   Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n  String mimeBoundary=null;\n  if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))   serialiseRequestUrl(req);\n else   if (methodHasBody)   mimeBoundary=setOutputContentType(req);\n  long startTime=System.nanoTime();\n  HttpURLConnection conn=createConnection(req);\n  Response res=null;\n  try {\n    conn.connect();\n    if (conn.getDoOutput())     writePost(req,conn.getOutputStream(),mimeBoundary);\n    int status=conn.getResponseCode();\n    res=new Response(previousResponse);\n    res.setupFromConnection(conn,previousResponse);\n    res.req=req;\n    if (res.hasHeader(LOCATION) && req.followRedirects()) {\n      if (status != HTTP_TEMP_REDIR) {\n        req.method(Method.GET);\n        req.data().clear();\n        req.requestBody(null);\n        req.removeHeader(CONTENT_TYPE);\n      }\n      String location=res.header(LOCATION);\n      if (location.startsWith(\"http:/\") && location.charAt(6) != '/')       location=location.substring(6);\n      URL redir=StringUtil.resolve(req.url(),location);\n      req.url(encodeUrl(redir));\n      for (      Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n        req.cookie(cookie.getKey(),cookie.getValue());\n      }\n      return execute(req,res);\n    }\n    if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())     throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n    String contentType=res.contentType();\n    if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n    if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n      if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n        req.parser(Parser.xmlParser());\n      }\n    }\n    res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n    if (conn.getContentLength() != 0 && req.method() != HEAD) {\n      res.bodyStream=null;\n      res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n      if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n        res.bodyStream=new GZIPInputStream(res.bodyStream);\n      }\n else       if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n        res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n      }\n      res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n    }\n else {\n      res.byteData=DataUtil.emptyByteBuffer();\n    }\n  }\n catch (  IOException e) {\n    if (res != null)     res.safeClose();\n    throw e;\n  }\n  res.executed=true;\n  return res;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 553,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                "nodePosition": {
                    "charLength": 41,
                    "startLineNumber": 746,
                    "startColumnNumber": 16,
                    "endLineNumber": 746,
                    "endColumnNumber": 57
                },
                "nodeContext": "mimeBoundary=setOutputContentType(req);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 6,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.jsoup.Connection.Request"
        },
        {
            "nodeContext": "req",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 749,
                "startColumnNumber": 54,
                "endLineNumber": 749,
                "endColumnNumber": 57
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 21,
                        "startLineNumber": 749,
                        "startColumnNumber": 37,
                        "endLineNumber": 749,
                        "endColumnNumber": 58
                    },
                    "nodeContext": "createConnection(req)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 28,
                        "startLineNumber": 749,
                        "startColumnNumber": 30,
                        "endLineNumber": 749,
                        "endColumnNumber": 58
                    },
                    "nodeContext": "conn=createConnection(req)",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 47,
                        "startLineNumber": 749,
                        "startColumnNumber": 12,
                        "endLineNumber": 749,
                        "endColumnNumber": 59
                    },
                    "nodeContext": "HttpURLConnection conn=createConnection(req);\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 5348,
                        "startLineNumber": 730,
                        "startColumnNumber": 102,
                        "endLineNumber": 825,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  Validate.notNull(req,\"Request must not be null\");\n  Validate.notNull(req.url(),\"URL must be specified to connect\");\n  String protocol=req.url().getProtocol();\n  if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))   throw new MalformedURLException(\"Only http & https protocols supported\");\n  final boolean methodHasBody=req.method().hasBody();\n  final boolean hasRequestBody=req.requestBody() != null;\n  if (!methodHasBody)   Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n  String mimeBoundary=null;\n  if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))   serialiseRequestUrl(req);\n else   if (methodHasBody)   mimeBoundary=setOutputContentType(req);\n  long startTime=System.nanoTime();\n  HttpURLConnection conn=createConnection(req);\n  Response res=null;\n  try {\n    conn.connect();\n    if (conn.getDoOutput())     writePost(req,conn.getOutputStream(),mimeBoundary);\n    int status=conn.getResponseCode();\n    res=new Response(previousResponse);\n    res.setupFromConnection(conn,previousResponse);\n    res.req=req;\n    if (res.hasHeader(LOCATION) && req.followRedirects()) {\n      if (status != HTTP_TEMP_REDIR) {\n        req.method(Method.GET);\n        req.data().clear();\n        req.requestBody(null);\n        req.removeHeader(CONTENT_TYPE);\n      }\n      String location=res.header(LOCATION);\n      if (location.startsWith(\"http:/\") && location.charAt(6) != '/')       location=location.substring(6);\n      URL redir=StringUtil.resolve(req.url(),location);\n      req.url(encodeUrl(redir));\n      for (      Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n        req.cookie(cookie.getKey(),cookie.getValue());\n      }\n      return execute(req,res);\n    }\n    if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())     throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n    String contentType=res.contentType();\n    if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n    if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n      if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n        req.parser(Parser.xmlParser());\n      }\n    }\n    res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n    if (conn.getContentLength() != 0 && req.method() != HEAD) {\n      res.bodyStream=null;\n      res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n      if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n        res.bodyStream=new GZIPInputStream(res.bodyStream);\n      }\n else       if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n        res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n      }\n      res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n    }\n else {\n      res.byteData=DataUtil.emptyByteBuffer();\n    }\n  }\n catch (  IOException e) {\n    if (res != null)     res.safeClose();\n    throw e;\n  }\n  res.executed=true;\n  return res;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 536,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 5442,
                        "startLineNumber": 730,
                        "startColumnNumber": 8,
                        "endLineNumber": 825,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "static Response execute(Connection.Request req,Response previousResponse) throws IOException {\n  Validate.notNull(req,\"Request must not be null\");\n  Validate.notNull(req.url(),\"URL must be specified to connect\");\n  String protocol=req.url().getProtocol();\n  if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))   throw new MalformedURLException(\"Only http & https protocols supported\");\n  final boolean methodHasBody=req.method().hasBody();\n  final boolean hasRequestBody=req.requestBody() != null;\n  if (!methodHasBody)   Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n  String mimeBoundary=null;\n  if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))   serialiseRequestUrl(req);\n else   if (methodHasBody)   mimeBoundary=setOutputContentType(req);\n  long startTime=System.nanoTime();\n  HttpURLConnection conn=createConnection(req);\n  Response res=null;\n  try {\n    conn.connect();\n    if (conn.getDoOutput())     writePost(req,conn.getOutputStream(),mimeBoundary);\n    int status=conn.getResponseCode();\n    res=new Response(previousResponse);\n    res.setupFromConnection(conn,previousResponse);\n    res.req=req;\n    if (res.hasHeader(LOCATION) && req.followRedirects()) {\n      if (status != HTTP_TEMP_REDIR) {\n        req.method(Method.GET);\n        req.data().clear();\n        req.requestBody(null);\n        req.removeHeader(CONTENT_TYPE);\n      }\n      String location=res.header(LOCATION);\n      if (location.startsWith(\"http:/\") && location.charAt(6) != '/')       location=location.substring(6);\n      URL redir=StringUtil.resolve(req.url(),location);\n      req.url(encodeUrl(redir));\n      for (      Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n        req.cookie(cookie.getKey(),cookie.getValue());\n      }\n      return execute(req,res);\n    }\n    if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())     throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n    String contentType=res.contentType();\n    if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n    if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n      if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n        req.parser(Parser.xmlParser());\n      }\n    }\n    res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n    if (conn.getContentLength() != 0 && req.method() != HEAD) {\n      res.bodyStream=null;\n      res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n      if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n        res.bodyStream=new GZIPInputStream(res.bodyStream);\n      }\n else       if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n        res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n      }\n      res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n    }\n else {\n      res.byteData=DataUtil.emptyByteBuffer();\n    }\n  }\n catch (  IOException e) {\n    if (res != null)     res.safeClose();\n    throw e;\n  }\n  res.executed=true;\n  return res;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 553,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 47,
                    "startLineNumber": 749,
                    "startColumnNumber": 12,
                    "endLineNumber": 749,
                    "endColumnNumber": 59
                },
                "nodeContext": "HttpURLConnection conn=createConnection(req);\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.jsoup.Connection.Request"
        },
        {
            "nodeContext": "req",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 754,
                "startColumnNumber": 30,
                "endLineNumber": 754,
                "endColumnNumber": 33
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 52,
                        "startLineNumber": 754,
                        "startColumnNumber": 20,
                        "endLineNumber": 754,
                        "endColumnNumber": 72
                    },
                    "nodeContext": "writePost(req,conn.getOutputStream(),mimeBoundary)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 53,
                        "startLineNumber": 754,
                        "startColumnNumber": 20,
                        "endLineNumber": 754,
                        "endColumnNumber": 73
                    },
                    "nodeContext": "writePost(req,conn.getOutputStream(),mimeBoundary);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 97,
                        "startLineNumber": 753,
                        "startColumnNumber": 16,
                        "endLineNumber": 754,
                        "endColumnNumber": 73
                    },
                    "nodeContext": "if (conn.getDoOutput()) writePost(req,conn.getOutputStream(),mimeBoundary);\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 12,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 4035,
                        "startLineNumber": 751,
                        "startColumnNumber": 16,
                        "endLineNumber": 818,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  conn.connect();\n  if (conn.getDoOutput())   writePost(req,conn.getOutputStream(),mimeBoundary);\n  int status=conn.getResponseCode();\n  res=new Response(previousResponse);\n  res.setupFromConnection(conn,previousResponse);\n  res.req=req;\n  if (res.hasHeader(LOCATION) && req.followRedirects()) {\n    if (status != HTTP_TEMP_REDIR) {\n      req.method(Method.GET);\n      req.data().clear();\n      req.requestBody(null);\n      req.removeHeader(CONTENT_TYPE);\n    }\n    String location=res.header(LOCATION);\n    if (location.startsWith(\"http:/\") && location.charAt(6) != '/')     location=location.substring(6);\n    URL redir=StringUtil.resolve(req.url(),location);\n    req.url(encodeUrl(redir));\n    for (    Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n      req.cookie(cookie.getKey(),cookie.getValue());\n    }\n    return execute(req,res);\n  }\n  if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())   throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n  String contentType=res.contentType();\n  if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())   throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n  if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n    if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n      req.parser(Parser.xmlParser());\n    }\n  }\n  res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n  if (conn.getContentLength() != 0 && req.method() != HEAD) {\n    res.bodyStream=null;\n    res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n    if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n      res.bodyStream=new GZIPInputStream(res.bodyStream);\n    }\n else     if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n      res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n    }\n    res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n  }\n else {\n    res.byteData=DataUtil.emptyByteBuffer();\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 383,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4187,
                        "startLineNumber": 751,
                        "startColumnNumber": 12,
                        "endLineNumber": 821,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "try {\n  conn.connect();\n  if (conn.getDoOutput())   writePost(req,conn.getOutputStream(),mimeBoundary);\n  int status=conn.getResponseCode();\n  res=new Response(previousResponse);\n  res.setupFromConnection(conn,previousResponse);\n  res.req=req;\n  if (res.hasHeader(LOCATION) && req.followRedirects()) {\n    if (status != HTTP_TEMP_REDIR) {\n      req.method(Method.GET);\n      req.data().clear();\n      req.requestBody(null);\n      req.removeHeader(CONTENT_TYPE);\n    }\n    String location=res.header(LOCATION);\n    if (location.startsWith(\"http:/\") && location.charAt(6) != '/')     location=location.substring(6);\n    URL redir=StringUtil.resolve(req.url(),location);\n    req.url(encodeUrl(redir));\n    for (    Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n      req.cookie(cookie.getKey(),cookie.getValue());\n    }\n    return execute(req,res);\n  }\n  if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())   throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n  String contentType=res.contentType();\n  if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())   throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n  if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n    if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n      req.parser(Parser.xmlParser());\n    }\n  }\n  res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n  if (conn.getContentLength() != 0 && req.method() != HEAD) {\n    res.bodyStream=null;\n    res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n    if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n      res.bodyStream=new GZIPInputStream(res.bodyStream);\n    }\n else     if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n      res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n    }\n    res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n  }\n else {\n    res.byteData=DataUtil.emptyByteBuffer();\n  }\n}\n catch (IOException e) {\n  if (res != null)   res.safeClose();\n  throw e;\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 400,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 5348,
                        "startLineNumber": 730,
                        "startColumnNumber": 102,
                        "endLineNumber": 825,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  Validate.notNull(req,\"Request must not be null\");\n  Validate.notNull(req.url(),\"URL must be specified to connect\");\n  String protocol=req.url().getProtocol();\n  if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))   throw new MalformedURLException(\"Only http & https protocols supported\");\n  final boolean methodHasBody=req.method().hasBody();\n  final boolean hasRequestBody=req.requestBody() != null;\n  if (!methodHasBody)   Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n  String mimeBoundary=null;\n  if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))   serialiseRequestUrl(req);\n else   if (methodHasBody)   mimeBoundary=setOutputContentType(req);\n  long startTime=System.nanoTime();\n  HttpURLConnection conn=createConnection(req);\n  Response res=null;\n  try {\n    conn.connect();\n    if (conn.getDoOutput())     writePost(req,conn.getOutputStream(),mimeBoundary);\n    int status=conn.getResponseCode();\n    res=new Response(previousResponse);\n    res.setupFromConnection(conn,previousResponse);\n    res.req=req;\n    if (res.hasHeader(LOCATION) && req.followRedirects()) {\n      if (status != HTTP_TEMP_REDIR) {\n        req.method(Method.GET);\n        req.data().clear();\n        req.requestBody(null);\n        req.removeHeader(CONTENT_TYPE);\n      }\n      String location=res.header(LOCATION);\n      if (location.startsWith(\"http:/\") && location.charAt(6) != '/')       location=location.substring(6);\n      URL redir=StringUtil.resolve(req.url(),location);\n      req.url(encodeUrl(redir));\n      for (      Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n        req.cookie(cookie.getKey(),cookie.getValue());\n      }\n      return execute(req,res);\n    }\n    if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())     throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n    String contentType=res.contentType();\n    if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n    if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n      if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n        req.parser(Parser.xmlParser());\n      }\n    }\n    res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n    if (conn.getContentLength() != 0 && req.method() != HEAD) {\n      res.bodyStream=null;\n      res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n      if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n        res.bodyStream=new GZIPInputStream(res.bodyStream);\n      }\n else       if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n        res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n      }\n      res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n    }\n else {\n      res.byteData=DataUtil.emptyByteBuffer();\n    }\n  }\n catch (  IOException e) {\n    if (res != null)     res.safeClose();\n    throw e;\n  }\n  res.executed=true;\n  return res;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 536,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 5442,
                        "startLineNumber": 730,
                        "startColumnNumber": 8,
                        "endLineNumber": 825,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "static Response execute(Connection.Request req,Response previousResponse) throws IOException {\n  Validate.notNull(req,\"Request must not be null\");\n  Validate.notNull(req.url(),\"URL must be specified to connect\");\n  String protocol=req.url().getProtocol();\n  if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))   throw new MalformedURLException(\"Only http & https protocols supported\");\n  final boolean methodHasBody=req.method().hasBody();\n  final boolean hasRequestBody=req.requestBody() != null;\n  if (!methodHasBody)   Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n  String mimeBoundary=null;\n  if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))   serialiseRequestUrl(req);\n else   if (methodHasBody)   mimeBoundary=setOutputContentType(req);\n  long startTime=System.nanoTime();\n  HttpURLConnection conn=createConnection(req);\n  Response res=null;\n  try {\n    conn.connect();\n    if (conn.getDoOutput())     writePost(req,conn.getOutputStream(),mimeBoundary);\n    int status=conn.getResponseCode();\n    res=new Response(previousResponse);\n    res.setupFromConnection(conn,previousResponse);\n    res.req=req;\n    if (res.hasHeader(LOCATION) && req.followRedirects()) {\n      if (status != HTTP_TEMP_REDIR) {\n        req.method(Method.GET);\n        req.data().clear();\n        req.requestBody(null);\n        req.removeHeader(CONTENT_TYPE);\n      }\n      String location=res.header(LOCATION);\n      if (location.startsWith(\"http:/\") && location.charAt(6) != '/')       location=location.substring(6);\n      URL redir=StringUtil.resolve(req.url(),location);\n      req.url(encodeUrl(redir));\n      for (      Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n        req.cookie(cookie.getKey(),cookie.getValue());\n      }\n      return execute(req,res);\n    }\n    if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())     throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n    String contentType=res.contentType();\n    if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n    if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n      if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n        req.parser(Parser.xmlParser());\n      }\n    }\n    res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n    if (conn.getContentLength() != 0 && req.method() != HEAD) {\n      res.bodyStream=null;\n      res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n      if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n        res.bodyStream=new GZIPInputStream(res.bodyStream);\n      }\n else       if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n        res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n      }\n      res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n    }\n else {\n      res.byteData=DataUtil.emptyByteBuffer();\n    }\n  }\n catch (  IOException e) {\n    if (res != null)     res.safeClose();\n    throw e;\n  }\n  res.executed=true;\n  return res;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 553,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                "nodePosition": {
                    "charLength": 53,
                    "startLineNumber": 754,
                    "startColumnNumber": 20,
                    "endLineNumber": 754,
                    "endColumnNumber": 73
                },
                "nodeContext": "writePost(req,conn.getOutputStream(),mimeBoundary);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.jsoup.Connection.Request"
        },
        {
            "nodeContext": "req",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 759,
                "startColumnNumber": 26,
                "endLineNumber": 759,
                "endColumnNumber": 29
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 13,
                        "startLineNumber": 759,
                        "startColumnNumber": 16,
                        "endLineNumber": 759,
                        "endColumnNumber": 29
                    },
                    "nodeContext": "res.req=req",
                    "nodeType": "Assignment",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 14,
                        "startLineNumber": 759,
                        "startColumnNumber": 16,
                        "endLineNumber": 759,
                        "endColumnNumber": 30
                    },
                    "nodeContext": "res.req=req;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 6,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 4035,
                        "startLineNumber": 751,
                        "startColumnNumber": 16,
                        "endLineNumber": 818,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  conn.connect();\n  if (conn.getDoOutput())   writePost(req,conn.getOutputStream(),mimeBoundary);\n  int status=conn.getResponseCode();\n  res=new Response(previousResponse);\n  res.setupFromConnection(conn,previousResponse);\n  res.req=req;\n  if (res.hasHeader(LOCATION) && req.followRedirects()) {\n    if (status != HTTP_TEMP_REDIR) {\n      req.method(Method.GET);\n      req.data().clear();\n      req.requestBody(null);\n      req.removeHeader(CONTENT_TYPE);\n    }\n    String location=res.header(LOCATION);\n    if (location.startsWith(\"http:/\") && location.charAt(6) != '/')     location=location.substring(6);\n    URL redir=StringUtil.resolve(req.url(),location);\n    req.url(encodeUrl(redir));\n    for (    Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n      req.cookie(cookie.getKey(),cookie.getValue());\n    }\n    return execute(req,res);\n  }\n  if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())   throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n  String contentType=res.contentType();\n  if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())   throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n  if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n    if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n      req.parser(Parser.xmlParser());\n    }\n  }\n  res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n  if (conn.getContentLength() != 0 && req.method() != HEAD) {\n    res.bodyStream=null;\n    res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n    if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n      res.bodyStream=new GZIPInputStream(res.bodyStream);\n    }\n else     if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n      res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n    }\n    res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n  }\n else {\n    res.byteData=DataUtil.emptyByteBuffer();\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 383,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4187,
                        "startLineNumber": 751,
                        "startColumnNumber": 12,
                        "endLineNumber": 821,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "try {\n  conn.connect();\n  if (conn.getDoOutput())   writePost(req,conn.getOutputStream(),mimeBoundary);\n  int status=conn.getResponseCode();\n  res=new Response(previousResponse);\n  res.setupFromConnection(conn,previousResponse);\n  res.req=req;\n  if (res.hasHeader(LOCATION) && req.followRedirects()) {\n    if (status != HTTP_TEMP_REDIR) {\n      req.method(Method.GET);\n      req.data().clear();\n      req.requestBody(null);\n      req.removeHeader(CONTENT_TYPE);\n    }\n    String location=res.header(LOCATION);\n    if (location.startsWith(\"http:/\") && location.charAt(6) != '/')     location=location.substring(6);\n    URL redir=StringUtil.resolve(req.url(),location);\n    req.url(encodeUrl(redir));\n    for (    Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n      req.cookie(cookie.getKey(),cookie.getValue());\n    }\n    return execute(req,res);\n  }\n  if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())   throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n  String contentType=res.contentType();\n  if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())   throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n  if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n    if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n      req.parser(Parser.xmlParser());\n    }\n  }\n  res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n  if (conn.getContentLength() != 0 && req.method() != HEAD) {\n    res.bodyStream=null;\n    res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n    if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n      res.bodyStream=new GZIPInputStream(res.bodyStream);\n    }\n else     if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n      res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n    }\n    res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n  }\n else {\n    res.byteData=DataUtil.emptyByteBuffer();\n  }\n}\n catch (IOException e) {\n  if (res != null)   res.safeClose();\n  throw e;\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 400,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 5348,
                        "startLineNumber": 730,
                        "startColumnNumber": 102,
                        "endLineNumber": 825,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  Validate.notNull(req,\"Request must not be null\");\n  Validate.notNull(req.url(),\"URL must be specified to connect\");\n  String protocol=req.url().getProtocol();\n  if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))   throw new MalformedURLException(\"Only http & https protocols supported\");\n  final boolean methodHasBody=req.method().hasBody();\n  final boolean hasRequestBody=req.requestBody() != null;\n  if (!methodHasBody)   Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n  String mimeBoundary=null;\n  if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))   serialiseRequestUrl(req);\n else   if (methodHasBody)   mimeBoundary=setOutputContentType(req);\n  long startTime=System.nanoTime();\n  HttpURLConnection conn=createConnection(req);\n  Response res=null;\n  try {\n    conn.connect();\n    if (conn.getDoOutput())     writePost(req,conn.getOutputStream(),mimeBoundary);\n    int status=conn.getResponseCode();\n    res=new Response(previousResponse);\n    res.setupFromConnection(conn,previousResponse);\n    res.req=req;\n    if (res.hasHeader(LOCATION) && req.followRedirects()) {\n      if (status != HTTP_TEMP_REDIR) {\n        req.method(Method.GET);\n        req.data().clear();\n        req.requestBody(null);\n        req.removeHeader(CONTENT_TYPE);\n      }\n      String location=res.header(LOCATION);\n      if (location.startsWith(\"http:/\") && location.charAt(6) != '/')       location=location.substring(6);\n      URL redir=StringUtil.resolve(req.url(),location);\n      req.url(encodeUrl(redir));\n      for (      Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n        req.cookie(cookie.getKey(),cookie.getValue());\n      }\n      return execute(req,res);\n    }\n    if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())     throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n    String contentType=res.contentType();\n    if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n    if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n      if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n        req.parser(Parser.xmlParser());\n      }\n    }\n    res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n    if (conn.getContentLength() != 0 && req.method() != HEAD) {\n      res.bodyStream=null;\n      res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n      if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n        res.bodyStream=new GZIPInputStream(res.bodyStream);\n      }\n else       if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n        res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n      }\n      res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n    }\n else {\n      res.byteData=DataUtil.emptyByteBuffer();\n    }\n  }\n catch (  IOException e) {\n    if (res != null)     res.safeClose();\n    throw e;\n  }\n  res.executed=true;\n  return res;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 536,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 5442,
                        "startLineNumber": 730,
                        "startColumnNumber": 8,
                        "endLineNumber": 825,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "static Response execute(Connection.Request req,Response previousResponse) throws IOException {\n  Validate.notNull(req,\"Request must not be null\");\n  Validate.notNull(req.url(),\"URL must be specified to connect\");\n  String protocol=req.url().getProtocol();\n  if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))   throw new MalformedURLException(\"Only http & https protocols supported\");\n  final boolean methodHasBody=req.method().hasBody();\n  final boolean hasRequestBody=req.requestBody() != null;\n  if (!methodHasBody)   Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n  String mimeBoundary=null;\n  if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))   serialiseRequestUrl(req);\n else   if (methodHasBody)   mimeBoundary=setOutputContentType(req);\n  long startTime=System.nanoTime();\n  HttpURLConnection conn=createConnection(req);\n  Response res=null;\n  try {\n    conn.connect();\n    if (conn.getDoOutput())     writePost(req,conn.getOutputStream(),mimeBoundary);\n    int status=conn.getResponseCode();\n    res=new Response(previousResponse);\n    res.setupFromConnection(conn,previousResponse);\n    res.req=req;\n    if (res.hasHeader(LOCATION) && req.followRedirects()) {\n      if (status != HTTP_TEMP_REDIR) {\n        req.method(Method.GET);\n        req.data().clear();\n        req.requestBody(null);\n        req.removeHeader(CONTENT_TYPE);\n      }\n      String location=res.header(LOCATION);\n      if (location.startsWith(\"http:/\") && location.charAt(6) != '/')       location=location.substring(6);\n      URL redir=StringUtil.resolve(req.url(),location);\n      req.url(encodeUrl(redir));\n      for (      Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n        req.cookie(cookie.getKey(),cookie.getValue());\n      }\n      return execute(req,res);\n    }\n    if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())     throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n    String contentType=res.contentType();\n    if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n    if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n      if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n        req.parser(Parser.xmlParser());\n      }\n    }\n    res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n    if (conn.getContentLength() != 0 && req.method() != HEAD) {\n      res.bodyStream=null;\n      res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n      if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n        res.bodyStream=new GZIPInputStream(res.bodyStream);\n      }\n else       if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n        res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n      }\n      res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n    }\n else {\n      res.byteData=DataUtil.emptyByteBuffer();\n    }\n  }\n catch (  IOException e) {\n    if (res != null)     res.safeClose();\n    throw e;\n  }\n  res.executed=true;\n  return res;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 553,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 14,
                    "startLineNumber": 759,
                    "startColumnNumber": 16,
                    "endLineNumber": 759,
                    "endColumnNumber": 30
                },
                "nodeContext": "res.req=req;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 6,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.jsoup.Connection.Request"
        },
        {
            "nodeContext": "req",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 762,
                "startColumnNumber": 47,
                "endLineNumber": 762,
                "endColumnNumber": 50
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 21,
                        "startLineNumber": 762,
                        "startColumnNumber": 47,
                        "endLineNumber": 762,
                        "endColumnNumber": 68
                    },
                    "nodeContext": "req.followRedirects()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 48,
                        "startLineNumber": 762,
                        "startColumnNumber": 20,
                        "endLineNumber": 762,
                        "endColumnNumber": 68
                    },
                    "nodeContext": "res.hasHeader(LOCATION) && req.followRedirects()",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 8,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1084,
                        "startLineNumber": 762,
                        "startColumnNumber": 16,
                        "endLineNumber": 780,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (res.hasHeader(LOCATION) && req.followRedirects()) {\n  if (status != HTTP_TEMP_REDIR) {\n    req.method(Method.GET);\n    req.data().clear();\n    req.requestBody(null);\n    req.removeHeader(CONTENT_TYPE);\n  }\n  String location=res.header(LOCATION);\n  if (location.startsWith(\"http:/\") && location.charAt(6) != '/')   location=location.substring(6);\n  URL redir=StringUtil.resolve(req.url(),location);\n  req.url(encodeUrl(redir));\n  for (  Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n    req.cookie(cookie.getKey(),cookie.getValue());\n  }\n  return execute(req,res);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 118,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 4035,
                        "startLineNumber": 751,
                        "startColumnNumber": 16,
                        "endLineNumber": 818,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  conn.connect();\n  if (conn.getDoOutput())   writePost(req,conn.getOutputStream(),mimeBoundary);\n  int status=conn.getResponseCode();\n  res=new Response(previousResponse);\n  res.setupFromConnection(conn,previousResponse);\n  res.req=req;\n  if (res.hasHeader(LOCATION) && req.followRedirects()) {\n    if (status != HTTP_TEMP_REDIR) {\n      req.method(Method.GET);\n      req.data().clear();\n      req.requestBody(null);\n      req.removeHeader(CONTENT_TYPE);\n    }\n    String location=res.header(LOCATION);\n    if (location.startsWith(\"http:/\") && location.charAt(6) != '/')     location=location.substring(6);\n    URL redir=StringUtil.resolve(req.url(),location);\n    req.url(encodeUrl(redir));\n    for (    Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n      req.cookie(cookie.getKey(),cookie.getValue());\n    }\n    return execute(req,res);\n  }\n  if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())   throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n  String contentType=res.contentType();\n  if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())   throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n  if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n    if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n      req.parser(Parser.xmlParser());\n    }\n  }\n  res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n  if (conn.getContentLength() != 0 && req.method() != HEAD) {\n    res.bodyStream=null;\n    res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n    if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n      res.bodyStream=new GZIPInputStream(res.bodyStream);\n    }\n else     if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n      res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n    }\n    res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n  }\n else {\n    res.byteData=DataUtil.emptyByteBuffer();\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 383,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4187,
                        "startLineNumber": 751,
                        "startColumnNumber": 12,
                        "endLineNumber": 821,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "try {\n  conn.connect();\n  if (conn.getDoOutput())   writePost(req,conn.getOutputStream(),mimeBoundary);\n  int status=conn.getResponseCode();\n  res=new Response(previousResponse);\n  res.setupFromConnection(conn,previousResponse);\n  res.req=req;\n  if (res.hasHeader(LOCATION) && req.followRedirects()) {\n    if (status != HTTP_TEMP_REDIR) {\n      req.method(Method.GET);\n      req.data().clear();\n      req.requestBody(null);\n      req.removeHeader(CONTENT_TYPE);\n    }\n    String location=res.header(LOCATION);\n    if (location.startsWith(\"http:/\") && location.charAt(6) != '/')     location=location.substring(6);\n    URL redir=StringUtil.resolve(req.url(),location);\n    req.url(encodeUrl(redir));\n    for (    Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n      req.cookie(cookie.getKey(),cookie.getValue());\n    }\n    return execute(req,res);\n  }\n  if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())   throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n  String contentType=res.contentType();\n  if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())   throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n  if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n    if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n      req.parser(Parser.xmlParser());\n    }\n  }\n  res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n  if (conn.getContentLength() != 0 && req.method() != HEAD) {\n    res.bodyStream=null;\n    res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n    if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n      res.bodyStream=new GZIPInputStream(res.bodyStream);\n    }\n else     if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n      res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n    }\n    res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n  }\n else {\n    res.byteData=DataUtil.emptyByteBuffer();\n  }\n}\n catch (IOException e) {\n  if (res != null)   res.safeClose();\n  throw e;\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 400,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 5348,
                        "startLineNumber": 730,
                        "startColumnNumber": 102,
                        "endLineNumber": 825,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  Validate.notNull(req,\"Request must not be null\");\n  Validate.notNull(req.url(),\"URL must be specified to connect\");\n  String protocol=req.url().getProtocol();\n  if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))   throw new MalformedURLException(\"Only http & https protocols supported\");\n  final boolean methodHasBody=req.method().hasBody();\n  final boolean hasRequestBody=req.requestBody() != null;\n  if (!methodHasBody)   Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n  String mimeBoundary=null;\n  if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))   serialiseRequestUrl(req);\n else   if (methodHasBody)   mimeBoundary=setOutputContentType(req);\n  long startTime=System.nanoTime();\n  HttpURLConnection conn=createConnection(req);\n  Response res=null;\n  try {\n    conn.connect();\n    if (conn.getDoOutput())     writePost(req,conn.getOutputStream(),mimeBoundary);\n    int status=conn.getResponseCode();\n    res=new Response(previousResponse);\n    res.setupFromConnection(conn,previousResponse);\n    res.req=req;\n    if (res.hasHeader(LOCATION) && req.followRedirects()) {\n      if (status != HTTP_TEMP_REDIR) {\n        req.method(Method.GET);\n        req.data().clear();\n        req.requestBody(null);\n        req.removeHeader(CONTENT_TYPE);\n      }\n      String location=res.header(LOCATION);\n      if (location.startsWith(\"http:/\") && location.charAt(6) != '/')       location=location.substring(6);\n      URL redir=StringUtil.resolve(req.url(),location);\n      req.url(encodeUrl(redir));\n      for (      Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n        req.cookie(cookie.getKey(),cookie.getValue());\n      }\n      return execute(req,res);\n    }\n    if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())     throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n    String contentType=res.contentType();\n    if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n    if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n      if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n        req.parser(Parser.xmlParser());\n      }\n    }\n    res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n    if (conn.getContentLength() != 0 && req.method() != HEAD) {\n      res.bodyStream=null;\n      res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n      if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n        res.bodyStream=new GZIPInputStream(res.bodyStream);\n      }\n else       if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n        res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n      }\n      res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n    }\n else {\n      res.byteData=DataUtil.emptyByteBuffer();\n    }\n  }\n catch (  IOException e) {\n    if (res != null)     res.safeClose();\n    throw e;\n  }\n  res.executed=true;\n  return res;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 536,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 5442,
                        "startLineNumber": 730,
                        "startColumnNumber": 8,
                        "endLineNumber": 825,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "static Response execute(Connection.Request req,Response previousResponse) throws IOException {\n  Validate.notNull(req,\"Request must not be null\");\n  Validate.notNull(req.url(),\"URL must be specified to connect\");\n  String protocol=req.url().getProtocol();\n  if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))   throw new MalformedURLException(\"Only http & https protocols supported\");\n  final boolean methodHasBody=req.method().hasBody();\n  final boolean hasRequestBody=req.requestBody() != null;\n  if (!methodHasBody)   Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n  String mimeBoundary=null;\n  if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))   serialiseRequestUrl(req);\n else   if (methodHasBody)   mimeBoundary=setOutputContentType(req);\n  long startTime=System.nanoTime();\n  HttpURLConnection conn=createConnection(req);\n  Response res=null;\n  try {\n    conn.connect();\n    if (conn.getDoOutput())     writePost(req,conn.getOutputStream(),mimeBoundary);\n    int status=conn.getResponseCode();\n    res=new Response(previousResponse);\n    res.setupFromConnection(conn,previousResponse);\n    res.req=req;\n    if (res.hasHeader(LOCATION) && req.followRedirects()) {\n      if (status != HTTP_TEMP_REDIR) {\n        req.method(Method.GET);\n        req.data().clear();\n        req.requestBody(null);\n        req.removeHeader(CONTENT_TYPE);\n      }\n      String location=res.header(LOCATION);\n      if (location.startsWith(\"http:/\") && location.charAt(6) != '/')       location=location.substring(6);\n      URL redir=StringUtil.resolve(req.url(),location);\n      req.url(encodeUrl(redir));\n      for (      Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n        req.cookie(cookie.getKey(),cookie.getValue());\n      }\n      return execute(req,res);\n    }\n    if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())     throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n    String contentType=res.contentType();\n    if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n    if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n      if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n        req.parser(Parser.xmlParser());\n      }\n    }\n    res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n    if (conn.getContentLength() != 0 && req.method() != HEAD) {\n      res.bodyStream=null;\n      res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n      if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n        res.bodyStream=new GZIPInputStream(res.bodyStream);\n      }\n else       if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n        res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n      }\n      res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n    }\n else {\n      res.byteData=DataUtil.emptyByteBuffer();\n    }\n  }\n catch (  IOException e) {\n    if (res != null)     res.safeClose();\n    throw e;\n  }\n  res.executed=true;\n  return res;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 553,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 48,
                    "startLineNumber": 762,
                    "startColumnNumber": 20,
                    "endLineNumber": 762,
                    "endColumnNumber": 68
                },
                "nodeContext": "res.hasHeader(LOCATION) && req.followRedirects()",
                "nodeType": "InfixExpression",
                "astNodeNumber": 8,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "org.jsoup.Connection.Request"
        },
        {
            "nodeContext": "req",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 764,
                "startColumnNumber": 24,
                "endLineNumber": 764,
                "endColumnNumber": 27
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 22,
                        "startLineNumber": 764,
                        "startColumnNumber": 24,
                        "endLineNumber": 764,
                        "endColumnNumber": 46
                    },
                    "nodeContext": "req.method(Method.GET)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 23,
                        "startLineNumber": 764,
                        "startColumnNumber": 24,
                        "endLineNumber": 764,
                        "endColumnNumber": 47
                    },
                    "nodeContext": "req.method(Method.GET);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 295,
                        "startLineNumber": 763,
                        "startColumnNumber": 51,
                        "endLineNumber": 768,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  req.method(Method.GET);\n  req.data().clear();\n  req.requestBody(null);\n  req.removeHeader(CONTENT_TYPE);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 24,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 326,
                        "startLineNumber": 763,
                        "startColumnNumber": 20,
                        "endLineNumber": 768,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (status != HTTP_TEMP_REDIR) {\n  req.method(Method.GET);\n  req.data().clear();\n  req.requestBody(null);\n  req.removeHeader(CONTENT_TYPE);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 28,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1030,
                        "startLineNumber": 762,
                        "startColumnNumber": 70,
                        "endLineNumber": 780,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  if (status != HTTP_TEMP_REDIR) {\n    req.method(Method.GET);\n    req.data().clear();\n    req.requestBody(null);\n    req.removeHeader(CONTENT_TYPE);\n  }\n  String location=res.header(LOCATION);\n  if (location.startsWith(\"http:/\") && location.charAt(6) != '/')   location=location.substring(6);\n  URL redir=StringUtil.resolve(req.url(),location);\n  req.url(encodeUrl(redir));\n  for (  Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n    req.cookie(cookie.getKey(),cookie.getValue());\n  }\n  return execute(req,res);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 109,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1084,
                        "startLineNumber": 762,
                        "startColumnNumber": 16,
                        "endLineNumber": 780,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (res.hasHeader(LOCATION) && req.followRedirects()) {\n  if (status != HTTP_TEMP_REDIR) {\n    req.method(Method.GET);\n    req.data().clear();\n    req.requestBody(null);\n    req.removeHeader(CONTENT_TYPE);\n  }\n  String location=res.header(LOCATION);\n  if (location.startsWith(\"http:/\") && location.charAt(6) != '/')   location=location.substring(6);\n  URL redir=StringUtil.resolve(req.url(),location);\n  req.url(encodeUrl(redir));\n  for (  Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n    req.cookie(cookie.getKey(),cookie.getValue());\n  }\n  return execute(req,res);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 118,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 4035,
                        "startLineNumber": 751,
                        "startColumnNumber": 16,
                        "endLineNumber": 818,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  conn.connect();\n  if (conn.getDoOutput())   writePost(req,conn.getOutputStream(),mimeBoundary);\n  int status=conn.getResponseCode();\n  res=new Response(previousResponse);\n  res.setupFromConnection(conn,previousResponse);\n  res.req=req;\n  if (res.hasHeader(LOCATION) && req.followRedirects()) {\n    if (status != HTTP_TEMP_REDIR) {\n      req.method(Method.GET);\n      req.data().clear();\n      req.requestBody(null);\n      req.removeHeader(CONTENT_TYPE);\n    }\n    String location=res.header(LOCATION);\n    if (location.startsWith(\"http:/\") && location.charAt(6) != '/')     location=location.substring(6);\n    URL redir=StringUtil.resolve(req.url(),location);\n    req.url(encodeUrl(redir));\n    for (    Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n      req.cookie(cookie.getKey(),cookie.getValue());\n    }\n    return execute(req,res);\n  }\n  if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())   throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n  String contentType=res.contentType();\n  if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())   throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n  if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n    if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n      req.parser(Parser.xmlParser());\n    }\n  }\n  res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n  if (conn.getContentLength() != 0 && req.method() != HEAD) {\n    res.bodyStream=null;\n    res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n    if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n      res.bodyStream=new GZIPInputStream(res.bodyStream);\n    }\n else     if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n      res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n    }\n    res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n  }\n else {\n    res.byteData=DataUtil.emptyByteBuffer();\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 383,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4187,
                        "startLineNumber": 751,
                        "startColumnNumber": 12,
                        "endLineNumber": 821,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "try {\n  conn.connect();\n  if (conn.getDoOutput())   writePost(req,conn.getOutputStream(),mimeBoundary);\n  int status=conn.getResponseCode();\n  res=new Response(previousResponse);\n  res.setupFromConnection(conn,previousResponse);\n  res.req=req;\n  if (res.hasHeader(LOCATION) && req.followRedirects()) {\n    if (status != HTTP_TEMP_REDIR) {\n      req.method(Method.GET);\n      req.data().clear();\n      req.requestBody(null);\n      req.removeHeader(CONTENT_TYPE);\n    }\n    String location=res.header(LOCATION);\n    if (location.startsWith(\"http:/\") && location.charAt(6) != '/')     location=location.substring(6);\n    URL redir=StringUtil.resolve(req.url(),location);\n    req.url(encodeUrl(redir));\n    for (    Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n      req.cookie(cookie.getKey(),cookie.getValue());\n    }\n    return execute(req,res);\n  }\n  if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())   throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n  String contentType=res.contentType();\n  if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())   throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n  if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n    if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n      req.parser(Parser.xmlParser());\n    }\n  }\n  res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n  if (conn.getContentLength() != 0 && req.method() != HEAD) {\n    res.bodyStream=null;\n    res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n    if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n      res.bodyStream=new GZIPInputStream(res.bodyStream);\n    }\n else     if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n      res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n    }\n    res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n  }\n else {\n    res.byteData=DataUtil.emptyByteBuffer();\n  }\n}\n catch (IOException e) {\n  if (res != null)   res.safeClose();\n  throw e;\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 400,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 5348,
                        "startLineNumber": 730,
                        "startColumnNumber": 102,
                        "endLineNumber": 825,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  Validate.notNull(req,\"Request must not be null\");\n  Validate.notNull(req.url(),\"URL must be specified to connect\");\n  String protocol=req.url().getProtocol();\n  if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))   throw new MalformedURLException(\"Only http & https protocols supported\");\n  final boolean methodHasBody=req.method().hasBody();\n  final boolean hasRequestBody=req.requestBody() != null;\n  if (!methodHasBody)   Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n  String mimeBoundary=null;\n  if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))   serialiseRequestUrl(req);\n else   if (methodHasBody)   mimeBoundary=setOutputContentType(req);\n  long startTime=System.nanoTime();\n  HttpURLConnection conn=createConnection(req);\n  Response res=null;\n  try {\n    conn.connect();\n    if (conn.getDoOutput())     writePost(req,conn.getOutputStream(),mimeBoundary);\n    int status=conn.getResponseCode();\n    res=new Response(previousResponse);\n    res.setupFromConnection(conn,previousResponse);\n    res.req=req;\n    if (res.hasHeader(LOCATION) && req.followRedirects()) {\n      if (status != HTTP_TEMP_REDIR) {\n        req.method(Method.GET);\n        req.data().clear();\n        req.requestBody(null);\n        req.removeHeader(CONTENT_TYPE);\n      }\n      String location=res.header(LOCATION);\n      if (location.startsWith(\"http:/\") && location.charAt(6) != '/')       location=location.substring(6);\n      URL redir=StringUtil.resolve(req.url(),location);\n      req.url(encodeUrl(redir));\n      for (      Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n        req.cookie(cookie.getKey(),cookie.getValue());\n      }\n      return execute(req,res);\n    }\n    if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())     throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n    String contentType=res.contentType();\n    if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n    if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n      if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n        req.parser(Parser.xmlParser());\n      }\n    }\n    res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n    if (conn.getContentLength() != 0 && req.method() != HEAD) {\n      res.bodyStream=null;\n      res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n      if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n        res.bodyStream=new GZIPInputStream(res.bodyStream);\n      }\n else       if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n        res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n      }\n      res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n    }\n else {\n      res.byteData=DataUtil.emptyByteBuffer();\n    }\n  }\n catch (  IOException e) {\n    if (res != null)     res.safeClose();\n    throw e;\n  }\n  res.executed=true;\n  return res;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 536,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 5442,
                        "startLineNumber": 730,
                        "startColumnNumber": 8,
                        "endLineNumber": 825,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "static Response execute(Connection.Request req,Response previousResponse) throws IOException {\n  Validate.notNull(req,\"Request must not be null\");\n  Validate.notNull(req.url(),\"URL must be specified to connect\");\n  String protocol=req.url().getProtocol();\n  if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))   throw new MalformedURLException(\"Only http & https protocols supported\");\n  final boolean methodHasBody=req.method().hasBody();\n  final boolean hasRequestBody=req.requestBody() != null;\n  if (!methodHasBody)   Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n  String mimeBoundary=null;\n  if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))   serialiseRequestUrl(req);\n else   if (methodHasBody)   mimeBoundary=setOutputContentType(req);\n  long startTime=System.nanoTime();\n  HttpURLConnection conn=createConnection(req);\n  Response res=null;\n  try {\n    conn.connect();\n    if (conn.getDoOutput())     writePost(req,conn.getOutputStream(),mimeBoundary);\n    int status=conn.getResponseCode();\n    res=new Response(previousResponse);\n    res.setupFromConnection(conn,previousResponse);\n    res.req=req;\n    if (res.hasHeader(LOCATION) && req.followRedirects()) {\n      if (status != HTTP_TEMP_REDIR) {\n        req.method(Method.GET);\n        req.data().clear();\n        req.requestBody(null);\n        req.removeHeader(CONTENT_TYPE);\n      }\n      String location=res.header(LOCATION);\n      if (location.startsWith(\"http:/\") && location.charAt(6) != '/')       location=location.substring(6);\n      URL redir=StringUtil.resolve(req.url(),location);\n      req.url(encodeUrl(redir));\n      for (      Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n        req.cookie(cookie.getKey(),cookie.getValue());\n      }\n      return execute(req,res);\n    }\n    if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())     throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n    String contentType=res.contentType();\n    if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n    if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n      if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n        req.parser(Parser.xmlParser());\n      }\n    }\n    res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n    if (conn.getContentLength() != 0 && req.method() != HEAD) {\n      res.bodyStream=null;\n      res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n      if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n        res.bodyStream=new GZIPInputStream(res.bodyStream);\n      }\n else       if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n        res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n      }\n      res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n    }\n else {\n      res.byteData=DataUtil.emptyByteBuffer();\n    }\n  }\n catch (  IOException e) {\n    if (res != null)     res.safeClose();\n    throw e;\n  }\n  res.executed=true;\n  return res;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 553,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 23,
                    "startLineNumber": 764,
                    "startColumnNumber": 24,
                    "endLineNumber": 764,
                    "endColumnNumber": 47
                },
                "nodeContext": "req.method(Method.GET);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 7,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.jsoup.Connection.Request"
        },
        {
            "nodeContext": "req",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 765,
                "startColumnNumber": 24,
                "endLineNumber": 765,
                "endColumnNumber": 27
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 10,
                        "startLineNumber": 765,
                        "startColumnNumber": 24,
                        "endLineNumber": 765,
                        "endColumnNumber": 34
                    },
                    "nodeContext": "req.data()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 18,
                        "startLineNumber": 765,
                        "startColumnNumber": 24,
                        "endLineNumber": 765,
                        "endColumnNumber": 42
                    },
                    "nodeContext": "req.data().clear()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 19,
                        "startLineNumber": 765,
                        "startColumnNumber": 24,
                        "endLineNumber": 765,
                        "endColumnNumber": 43
                    },
                    "nodeContext": "req.data().clear();\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 6,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 295,
                        "startLineNumber": 763,
                        "startColumnNumber": 51,
                        "endLineNumber": 768,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  req.method(Method.GET);\n  req.data().clear();\n  req.requestBody(null);\n  req.removeHeader(CONTENT_TYPE);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 24,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 326,
                        "startLineNumber": 763,
                        "startColumnNumber": 20,
                        "endLineNumber": 768,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (status != HTTP_TEMP_REDIR) {\n  req.method(Method.GET);\n  req.data().clear();\n  req.requestBody(null);\n  req.removeHeader(CONTENT_TYPE);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 28,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1030,
                        "startLineNumber": 762,
                        "startColumnNumber": 70,
                        "endLineNumber": 780,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  if (status != HTTP_TEMP_REDIR) {\n    req.method(Method.GET);\n    req.data().clear();\n    req.requestBody(null);\n    req.removeHeader(CONTENT_TYPE);\n  }\n  String location=res.header(LOCATION);\n  if (location.startsWith(\"http:/\") && location.charAt(6) != '/')   location=location.substring(6);\n  URL redir=StringUtil.resolve(req.url(),location);\n  req.url(encodeUrl(redir));\n  for (  Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n    req.cookie(cookie.getKey(),cookie.getValue());\n  }\n  return execute(req,res);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 109,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1084,
                        "startLineNumber": 762,
                        "startColumnNumber": 16,
                        "endLineNumber": 780,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (res.hasHeader(LOCATION) && req.followRedirects()) {\n  if (status != HTTP_TEMP_REDIR) {\n    req.method(Method.GET);\n    req.data().clear();\n    req.requestBody(null);\n    req.removeHeader(CONTENT_TYPE);\n  }\n  String location=res.header(LOCATION);\n  if (location.startsWith(\"http:/\") && location.charAt(6) != '/')   location=location.substring(6);\n  URL redir=StringUtil.resolve(req.url(),location);\n  req.url(encodeUrl(redir));\n  for (  Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n    req.cookie(cookie.getKey(),cookie.getValue());\n  }\n  return execute(req,res);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 118,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 4035,
                        "startLineNumber": 751,
                        "startColumnNumber": 16,
                        "endLineNumber": 818,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  conn.connect();\n  if (conn.getDoOutput())   writePost(req,conn.getOutputStream(),mimeBoundary);\n  int status=conn.getResponseCode();\n  res=new Response(previousResponse);\n  res.setupFromConnection(conn,previousResponse);\n  res.req=req;\n  if (res.hasHeader(LOCATION) && req.followRedirects()) {\n    if (status != HTTP_TEMP_REDIR) {\n      req.method(Method.GET);\n      req.data().clear();\n      req.requestBody(null);\n      req.removeHeader(CONTENT_TYPE);\n    }\n    String location=res.header(LOCATION);\n    if (location.startsWith(\"http:/\") && location.charAt(6) != '/')     location=location.substring(6);\n    URL redir=StringUtil.resolve(req.url(),location);\n    req.url(encodeUrl(redir));\n    for (    Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n      req.cookie(cookie.getKey(),cookie.getValue());\n    }\n    return execute(req,res);\n  }\n  if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())   throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n  String contentType=res.contentType();\n  if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())   throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n  if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n    if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n      req.parser(Parser.xmlParser());\n    }\n  }\n  res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n  if (conn.getContentLength() != 0 && req.method() != HEAD) {\n    res.bodyStream=null;\n    res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n    if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n      res.bodyStream=new GZIPInputStream(res.bodyStream);\n    }\n else     if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n      res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n    }\n    res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n  }\n else {\n    res.byteData=DataUtil.emptyByteBuffer();\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 383,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4187,
                        "startLineNumber": 751,
                        "startColumnNumber": 12,
                        "endLineNumber": 821,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "try {\n  conn.connect();\n  if (conn.getDoOutput())   writePost(req,conn.getOutputStream(),mimeBoundary);\n  int status=conn.getResponseCode();\n  res=new Response(previousResponse);\n  res.setupFromConnection(conn,previousResponse);\n  res.req=req;\n  if (res.hasHeader(LOCATION) && req.followRedirects()) {\n    if (status != HTTP_TEMP_REDIR) {\n      req.method(Method.GET);\n      req.data().clear();\n      req.requestBody(null);\n      req.removeHeader(CONTENT_TYPE);\n    }\n    String location=res.header(LOCATION);\n    if (location.startsWith(\"http:/\") && location.charAt(6) != '/')     location=location.substring(6);\n    URL redir=StringUtil.resolve(req.url(),location);\n    req.url(encodeUrl(redir));\n    for (    Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n      req.cookie(cookie.getKey(),cookie.getValue());\n    }\n    return execute(req,res);\n  }\n  if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())   throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n  String contentType=res.contentType();\n  if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())   throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n  if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n    if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n      req.parser(Parser.xmlParser());\n    }\n  }\n  res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n  if (conn.getContentLength() != 0 && req.method() != HEAD) {\n    res.bodyStream=null;\n    res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n    if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n      res.bodyStream=new GZIPInputStream(res.bodyStream);\n    }\n else     if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n      res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n    }\n    res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n  }\n else {\n    res.byteData=DataUtil.emptyByteBuffer();\n  }\n}\n catch (IOException e) {\n  if (res != null)   res.safeClose();\n  throw e;\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 400,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 5348,
                        "startLineNumber": 730,
                        "startColumnNumber": 102,
                        "endLineNumber": 825,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  Validate.notNull(req,\"Request must not be null\");\n  Validate.notNull(req.url(),\"URL must be specified to connect\");\n  String protocol=req.url().getProtocol();\n  if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))   throw new MalformedURLException(\"Only http & https protocols supported\");\n  final boolean methodHasBody=req.method().hasBody();\n  final boolean hasRequestBody=req.requestBody() != null;\n  if (!methodHasBody)   Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n  String mimeBoundary=null;\n  if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))   serialiseRequestUrl(req);\n else   if (methodHasBody)   mimeBoundary=setOutputContentType(req);\n  long startTime=System.nanoTime();\n  HttpURLConnection conn=createConnection(req);\n  Response res=null;\n  try {\n    conn.connect();\n    if (conn.getDoOutput())     writePost(req,conn.getOutputStream(),mimeBoundary);\n    int status=conn.getResponseCode();\n    res=new Response(previousResponse);\n    res.setupFromConnection(conn,previousResponse);\n    res.req=req;\n    if (res.hasHeader(LOCATION) && req.followRedirects()) {\n      if (status != HTTP_TEMP_REDIR) {\n        req.method(Method.GET);\n        req.data().clear();\n        req.requestBody(null);\n        req.removeHeader(CONTENT_TYPE);\n      }\n      String location=res.header(LOCATION);\n      if (location.startsWith(\"http:/\") && location.charAt(6) != '/')       location=location.substring(6);\n      URL redir=StringUtil.resolve(req.url(),location);\n      req.url(encodeUrl(redir));\n      for (      Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n        req.cookie(cookie.getKey(),cookie.getValue());\n      }\n      return execute(req,res);\n    }\n    if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())     throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n    String contentType=res.contentType();\n    if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n    if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n      if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n        req.parser(Parser.xmlParser());\n      }\n    }\n    res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n    if (conn.getContentLength() != 0 && req.method() != HEAD) {\n      res.bodyStream=null;\n      res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n      if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n        res.bodyStream=new GZIPInputStream(res.bodyStream);\n      }\n else       if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n        res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n      }\n      res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n    }\n else {\n      res.byteData=DataUtil.emptyByteBuffer();\n    }\n  }\n catch (  IOException e) {\n    if (res != null)     res.safeClose();\n    throw e;\n  }\n  res.executed=true;\n  return res;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 536,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 5442,
                        "startLineNumber": 730,
                        "startColumnNumber": 8,
                        "endLineNumber": 825,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "static Response execute(Connection.Request req,Response previousResponse) throws IOException {\n  Validate.notNull(req,\"Request must not be null\");\n  Validate.notNull(req.url(),\"URL must be specified to connect\");\n  String protocol=req.url().getProtocol();\n  if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))   throw new MalformedURLException(\"Only http & https protocols supported\");\n  final boolean methodHasBody=req.method().hasBody();\n  final boolean hasRequestBody=req.requestBody() != null;\n  if (!methodHasBody)   Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n  String mimeBoundary=null;\n  if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))   serialiseRequestUrl(req);\n else   if (methodHasBody)   mimeBoundary=setOutputContentType(req);\n  long startTime=System.nanoTime();\n  HttpURLConnection conn=createConnection(req);\n  Response res=null;\n  try {\n    conn.connect();\n    if (conn.getDoOutput())     writePost(req,conn.getOutputStream(),mimeBoundary);\n    int status=conn.getResponseCode();\n    res=new Response(previousResponse);\n    res.setupFromConnection(conn,previousResponse);\n    res.req=req;\n    if (res.hasHeader(LOCATION) && req.followRedirects()) {\n      if (status != HTTP_TEMP_REDIR) {\n        req.method(Method.GET);\n        req.data().clear();\n        req.requestBody(null);\n        req.removeHeader(CONTENT_TYPE);\n      }\n      String location=res.header(LOCATION);\n      if (location.startsWith(\"http:/\") && location.charAt(6) != '/')       location=location.substring(6);\n      URL redir=StringUtil.resolve(req.url(),location);\n      req.url(encodeUrl(redir));\n      for (      Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n        req.cookie(cookie.getKey(),cookie.getValue());\n      }\n      return execute(req,res);\n    }\n    if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())     throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n    String contentType=res.contentType();\n    if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n    if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n      if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n        req.parser(Parser.xmlParser());\n      }\n    }\n    res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n    if (conn.getContentLength() != 0 && req.method() != HEAD) {\n      res.bodyStream=null;\n      res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n      if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n        res.bodyStream=new GZIPInputStream(res.bodyStream);\n      }\n else       if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n        res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n      }\n      res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n    }\n else {\n      res.byteData=DataUtil.emptyByteBuffer();\n    }\n  }\n catch (  IOException e) {\n    if (res != null)     res.safeClose();\n    throw e;\n  }\n  res.executed=true;\n  return res;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 553,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 19,
                    "startLineNumber": 765,
                    "startColumnNumber": 24,
                    "endLineNumber": 765,
                    "endColumnNumber": 43
                },
                "nodeContext": "req.data().clear();\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 6,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.jsoup.Connection.Request"
        },
        {
            "nodeContext": "req",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 766,
                "startColumnNumber": 24,
                "endLineNumber": 766,
                "endColumnNumber": 27
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 21,
                        "startLineNumber": 766,
                        "startColumnNumber": 24,
                        "endLineNumber": 766,
                        "endColumnNumber": 45
                    },
                    "nodeContext": "req.requestBody(null)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 22,
                        "startLineNumber": 766,
                        "startColumnNumber": 24,
                        "endLineNumber": 766,
                        "endColumnNumber": 46
                    },
                    "nodeContext": "req.requestBody(null);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 295,
                        "startLineNumber": 763,
                        "startColumnNumber": 51,
                        "endLineNumber": 768,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  req.method(Method.GET);\n  req.data().clear();\n  req.requestBody(null);\n  req.removeHeader(CONTENT_TYPE);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 24,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 326,
                        "startLineNumber": 763,
                        "startColumnNumber": 20,
                        "endLineNumber": 768,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (status != HTTP_TEMP_REDIR) {\n  req.method(Method.GET);\n  req.data().clear();\n  req.requestBody(null);\n  req.removeHeader(CONTENT_TYPE);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 28,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1030,
                        "startLineNumber": 762,
                        "startColumnNumber": 70,
                        "endLineNumber": 780,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  if (status != HTTP_TEMP_REDIR) {\n    req.method(Method.GET);\n    req.data().clear();\n    req.requestBody(null);\n    req.removeHeader(CONTENT_TYPE);\n  }\n  String location=res.header(LOCATION);\n  if (location.startsWith(\"http:/\") && location.charAt(6) != '/')   location=location.substring(6);\n  URL redir=StringUtil.resolve(req.url(),location);\n  req.url(encodeUrl(redir));\n  for (  Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n    req.cookie(cookie.getKey(),cookie.getValue());\n  }\n  return execute(req,res);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 109,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1084,
                        "startLineNumber": 762,
                        "startColumnNumber": 16,
                        "endLineNumber": 780,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (res.hasHeader(LOCATION) && req.followRedirects()) {\n  if (status != HTTP_TEMP_REDIR) {\n    req.method(Method.GET);\n    req.data().clear();\n    req.requestBody(null);\n    req.removeHeader(CONTENT_TYPE);\n  }\n  String location=res.header(LOCATION);\n  if (location.startsWith(\"http:/\") && location.charAt(6) != '/')   location=location.substring(6);\n  URL redir=StringUtil.resolve(req.url(),location);\n  req.url(encodeUrl(redir));\n  for (  Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n    req.cookie(cookie.getKey(),cookie.getValue());\n  }\n  return execute(req,res);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 118,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 4035,
                        "startLineNumber": 751,
                        "startColumnNumber": 16,
                        "endLineNumber": 818,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  conn.connect();\n  if (conn.getDoOutput())   writePost(req,conn.getOutputStream(),mimeBoundary);\n  int status=conn.getResponseCode();\n  res=new Response(previousResponse);\n  res.setupFromConnection(conn,previousResponse);\n  res.req=req;\n  if (res.hasHeader(LOCATION) && req.followRedirects()) {\n    if (status != HTTP_TEMP_REDIR) {\n      req.method(Method.GET);\n      req.data().clear();\n      req.requestBody(null);\n      req.removeHeader(CONTENT_TYPE);\n    }\n    String location=res.header(LOCATION);\n    if (location.startsWith(\"http:/\") && location.charAt(6) != '/')     location=location.substring(6);\n    URL redir=StringUtil.resolve(req.url(),location);\n    req.url(encodeUrl(redir));\n    for (    Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n      req.cookie(cookie.getKey(),cookie.getValue());\n    }\n    return execute(req,res);\n  }\n  if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())   throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n  String contentType=res.contentType();\n  if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())   throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n  if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n    if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n      req.parser(Parser.xmlParser());\n    }\n  }\n  res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n  if (conn.getContentLength() != 0 && req.method() != HEAD) {\n    res.bodyStream=null;\n    res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n    if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n      res.bodyStream=new GZIPInputStream(res.bodyStream);\n    }\n else     if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n      res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n    }\n    res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n  }\n else {\n    res.byteData=DataUtil.emptyByteBuffer();\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 383,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4187,
                        "startLineNumber": 751,
                        "startColumnNumber": 12,
                        "endLineNumber": 821,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "try {\n  conn.connect();\n  if (conn.getDoOutput())   writePost(req,conn.getOutputStream(),mimeBoundary);\n  int status=conn.getResponseCode();\n  res=new Response(previousResponse);\n  res.setupFromConnection(conn,previousResponse);\n  res.req=req;\n  if (res.hasHeader(LOCATION) && req.followRedirects()) {\n    if (status != HTTP_TEMP_REDIR) {\n      req.method(Method.GET);\n      req.data().clear();\n      req.requestBody(null);\n      req.removeHeader(CONTENT_TYPE);\n    }\n    String location=res.header(LOCATION);\n    if (location.startsWith(\"http:/\") && location.charAt(6) != '/')     location=location.substring(6);\n    URL redir=StringUtil.resolve(req.url(),location);\n    req.url(encodeUrl(redir));\n    for (    Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n      req.cookie(cookie.getKey(),cookie.getValue());\n    }\n    return execute(req,res);\n  }\n  if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())   throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n  String contentType=res.contentType();\n  if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())   throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n  if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n    if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n      req.parser(Parser.xmlParser());\n    }\n  }\n  res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n  if (conn.getContentLength() != 0 && req.method() != HEAD) {\n    res.bodyStream=null;\n    res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n    if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n      res.bodyStream=new GZIPInputStream(res.bodyStream);\n    }\n else     if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n      res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n    }\n    res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n  }\n else {\n    res.byteData=DataUtil.emptyByteBuffer();\n  }\n}\n catch (IOException e) {\n  if (res != null)   res.safeClose();\n  throw e;\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 400,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 5348,
                        "startLineNumber": 730,
                        "startColumnNumber": 102,
                        "endLineNumber": 825,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  Validate.notNull(req,\"Request must not be null\");\n  Validate.notNull(req.url(),\"URL must be specified to connect\");\n  String protocol=req.url().getProtocol();\n  if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))   throw new MalformedURLException(\"Only http & https protocols supported\");\n  final boolean methodHasBody=req.method().hasBody();\n  final boolean hasRequestBody=req.requestBody() != null;\n  if (!methodHasBody)   Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n  String mimeBoundary=null;\n  if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))   serialiseRequestUrl(req);\n else   if (methodHasBody)   mimeBoundary=setOutputContentType(req);\n  long startTime=System.nanoTime();\n  HttpURLConnection conn=createConnection(req);\n  Response res=null;\n  try {\n    conn.connect();\n    if (conn.getDoOutput())     writePost(req,conn.getOutputStream(),mimeBoundary);\n    int status=conn.getResponseCode();\n    res=new Response(previousResponse);\n    res.setupFromConnection(conn,previousResponse);\n    res.req=req;\n    if (res.hasHeader(LOCATION) && req.followRedirects()) {\n      if (status != HTTP_TEMP_REDIR) {\n        req.method(Method.GET);\n        req.data().clear();\n        req.requestBody(null);\n        req.removeHeader(CONTENT_TYPE);\n      }\n      String location=res.header(LOCATION);\n      if (location.startsWith(\"http:/\") && location.charAt(6) != '/')       location=location.substring(6);\n      URL redir=StringUtil.resolve(req.url(),location);\n      req.url(encodeUrl(redir));\n      for (      Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n        req.cookie(cookie.getKey(),cookie.getValue());\n      }\n      return execute(req,res);\n    }\n    if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())     throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n    String contentType=res.contentType();\n    if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n    if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n      if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n        req.parser(Parser.xmlParser());\n      }\n    }\n    res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n    if (conn.getContentLength() != 0 && req.method() != HEAD) {\n      res.bodyStream=null;\n      res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n      if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n        res.bodyStream=new GZIPInputStream(res.bodyStream);\n      }\n else       if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n        res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n      }\n      res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n    }\n else {\n      res.byteData=DataUtil.emptyByteBuffer();\n    }\n  }\n catch (  IOException e) {\n    if (res != null)     res.safeClose();\n    throw e;\n  }\n  res.executed=true;\n  return res;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 536,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 5442,
                        "startLineNumber": 730,
                        "startColumnNumber": 8,
                        "endLineNumber": 825,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "static Response execute(Connection.Request req,Response previousResponse) throws IOException {\n  Validate.notNull(req,\"Request must not be null\");\n  Validate.notNull(req.url(),\"URL must be specified to connect\");\n  String protocol=req.url().getProtocol();\n  if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))   throw new MalformedURLException(\"Only http & https protocols supported\");\n  final boolean methodHasBody=req.method().hasBody();\n  final boolean hasRequestBody=req.requestBody() != null;\n  if (!methodHasBody)   Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n  String mimeBoundary=null;\n  if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))   serialiseRequestUrl(req);\n else   if (methodHasBody)   mimeBoundary=setOutputContentType(req);\n  long startTime=System.nanoTime();\n  HttpURLConnection conn=createConnection(req);\n  Response res=null;\n  try {\n    conn.connect();\n    if (conn.getDoOutput())     writePost(req,conn.getOutputStream(),mimeBoundary);\n    int status=conn.getResponseCode();\n    res=new Response(previousResponse);\n    res.setupFromConnection(conn,previousResponse);\n    res.req=req;\n    if (res.hasHeader(LOCATION) && req.followRedirects()) {\n      if (status != HTTP_TEMP_REDIR) {\n        req.method(Method.GET);\n        req.data().clear();\n        req.requestBody(null);\n        req.removeHeader(CONTENT_TYPE);\n      }\n      String location=res.header(LOCATION);\n      if (location.startsWith(\"http:/\") && location.charAt(6) != '/')       location=location.substring(6);\n      URL redir=StringUtil.resolve(req.url(),location);\n      req.url(encodeUrl(redir));\n      for (      Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n        req.cookie(cookie.getKey(),cookie.getValue());\n      }\n      return execute(req,res);\n    }\n    if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())     throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n    String contentType=res.contentType();\n    if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n    if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n      if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n        req.parser(Parser.xmlParser());\n      }\n    }\n    res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n    if (conn.getContentLength() != 0 && req.method() != HEAD) {\n      res.bodyStream=null;\n      res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n      if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n        res.bodyStream=new GZIPInputStream(res.bodyStream);\n      }\n else       if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n        res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n      }\n      res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n    }\n else {\n      res.byteData=DataUtil.emptyByteBuffer();\n    }\n  }\n catch (  IOException e) {\n    if (res != null)     res.safeClose();\n    throw e;\n  }\n  res.executed=true;\n  return res;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 553,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 22,
                    "startLineNumber": 766,
                    "startColumnNumber": 24,
                    "endLineNumber": 766,
                    "endColumnNumber": 46
                },
                "nodeContext": "req.requestBody(null);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "org.jsoup.Connection.Request"
        },
        {
            "nodeContext": "req",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 767,
                "startColumnNumber": 24,
                "endLineNumber": 767,
                "endColumnNumber": 27
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 30,
                        "startLineNumber": 767,
                        "startColumnNumber": 24,
                        "endLineNumber": 767,
                        "endColumnNumber": 54
                    },
                    "nodeContext": "req.removeHeader(CONTENT_TYPE)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 31,
                        "startLineNumber": 767,
                        "startColumnNumber": 24,
                        "endLineNumber": 767,
                        "endColumnNumber": 55
                    },
                    "nodeContext": "req.removeHeader(CONTENT_TYPE);\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 295,
                        "startLineNumber": 763,
                        "startColumnNumber": 51,
                        "endLineNumber": 768,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  req.method(Method.GET);\n  req.data().clear();\n  req.requestBody(null);\n  req.removeHeader(CONTENT_TYPE);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 24,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 326,
                        "startLineNumber": 763,
                        "startColumnNumber": 20,
                        "endLineNumber": 768,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (status != HTTP_TEMP_REDIR) {\n  req.method(Method.GET);\n  req.data().clear();\n  req.requestBody(null);\n  req.removeHeader(CONTENT_TYPE);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 28,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1030,
                        "startLineNumber": 762,
                        "startColumnNumber": 70,
                        "endLineNumber": 780,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  if (status != HTTP_TEMP_REDIR) {\n    req.method(Method.GET);\n    req.data().clear();\n    req.requestBody(null);\n    req.removeHeader(CONTENT_TYPE);\n  }\n  String location=res.header(LOCATION);\n  if (location.startsWith(\"http:/\") && location.charAt(6) != '/')   location=location.substring(6);\n  URL redir=StringUtil.resolve(req.url(),location);\n  req.url(encodeUrl(redir));\n  for (  Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n    req.cookie(cookie.getKey(),cookie.getValue());\n  }\n  return execute(req,res);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 109,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1084,
                        "startLineNumber": 762,
                        "startColumnNumber": 16,
                        "endLineNumber": 780,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (res.hasHeader(LOCATION) && req.followRedirects()) {\n  if (status != HTTP_TEMP_REDIR) {\n    req.method(Method.GET);\n    req.data().clear();\n    req.requestBody(null);\n    req.removeHeader(CONTENT_TYPE);\n  }\n  String location=res.header(LOCATION);\n  if (location.startsWith(\"http:/\") && location.charAt(6) != '/')   location=location.substring(6);\n  URL redir=StringUtil.resolve(req.url(),location);\n  req.url(encodeUrl(redir));\n  for (  Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n    req.cookie(cookie.getKey(),cookie.getValue());\n  }\n  return execute(req,res);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 118,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 4035,
                        "startLineNumber": 751,
                        "startColumnNumber": 16,
                        "endLineNumber": 818,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  conn.connect();\n  if (conn.getDoOutput())   writePost(req,conn.getOutputStream(),mimeBoundary);\n  int status=conn.getResponseCode();\n  res=new Response(previousResponse);\n  res.setupFromConnection(conn,previousResponse);\n  res.req=req;\n  if (res.hasHeader(LOCATION) && req.followRedirects()) {\n    if (status != HTTP_TEMP_REDIR) {\n      req.method(Method.GET);\n      req.data().clear();\n      req.requestBody(null);\n      req.removeHeader(CONTENT_TYPE);\n    }\n    String location=res.header(LOCATION);\n    if (location.startsWith(\"http:/\") && location.charAt(6) != '/')     location=location.substring(6);\n    URL redir=StringUtil.resolve(req.url(),location);\n    req.url(encodeUrl(redir));\n    for (    Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n      req.cookie(cookie.getKey(),cookie.getValue());\n    }\n    return execute(req,res);\n  }\n  if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())   throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n  String contentType=res.contentType();\n  if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())   throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n  if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n    if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n      req.parser(Parser.xmlParser());\n    }\n  }\n  res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n  if (conn.getContentLength() != 0 && req.method() != HEAD) {\n    res.bodyStream=null;\n    res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n    if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n      res.bodyStream=new GZIPInputStream(res.bodyStream);\n    }\n else     if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n      res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n    }\n    res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n  }\n else {\n    res.byteData=DataUtil.emptyByteBuffer();\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 383,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4187,
                        "startLineNumber": 751,
                        "startColumnNumber": 12,
                        "endLineNumber": 821,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "try {\n  conn.connect();\n  if (conn.getDoOutput())   writePost(req,conn.getOutputStream(),mimeBoundary);\n  int status=conn.getResponseCode();\n  res=new Response(previousResponse);\n  res.setupFromConnection(conn,previousResponse);\n  res.req=req;\n  if (res.hasHeader(LOCATION) && req.followRedirects()) {\n    if (status != HTTP_TEMP_REDIR) {\n      req.method(Method.GET);\n      req.data().clear();\n      req.requestBody(null);\n      req.removeHeader(CONTENT_TYPE);\n    }\n    String location=res.header(LOCATION);\n    if (location.startsWith(\"http:/\") && location.charAt(6) != '/')     location=location.substring(6);\n    URL redir=StringUtil.resolve(req.url(),location);\n    req.url(encodeUrl(redir));\n    for (    Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n      req.cookie(cookie.getKey(),cookie.getValue());\n    }\n    return execute(req,res);\n  }\n  if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())   throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n  String contentType=res.contentType();\n  if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())   throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n  if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n    if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n      req.parser(Parser.xmlParser());\n    }\n  }\n  res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n  if (conn.getContentLength() != 0 && req.method() != HEAD) {\n    res.bodyStream=null;\n    res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n    if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n      res.bodyStream=new GZIPInputStream(res.bodyStream);\n    }\n else     if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n      res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n    }\n    res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n  }\n else {\n    res.byteData=DataUtil.emptyByteBuffer();\n  }\n}\n catch (IOException e) {\n  if (res != null)   res.safeClose();\n  throw e;\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 400,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 5348,
                        "startLineNumber": 730,
                        "startColumnNumber": 102,
                        "endLineNumber": 825,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  Validate.notNull(req,\"Request must not be null\");\n  Validate.notNull(req.url(),\"URL must be specified to connect\");\n  String protocol=req.url().getProtocol();\n  if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))   throw new MalformedURLException(\"Only http & https protocols supported\");\n  final boolean methodHasBody=req.method().hasBody();\n  final boolean hasRequestBody=req.requestBody() != null;\n  if (!methodHasBody)   Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n  String mimeBoundary=null;\n  if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))   serialiseRequestUrl(req);\n else   if (methodHasBody)   mimeBoundary=setOutputContentType(req);\n  long startTime=System.nanoTime();\n  HttpURLConnection conn=createConnection(req);\n  Response res=null;\n  try {\n    conn.connect();\n    if (conn.getDoOutput())     writePost(req,conn.getOutputStream(),mimeBoundary);\n    int status=conn.getResponseCode();\n    res=new Response(previousResponse);\n    res.setupFromConnection(conn,previousResponse);\n    res.req=req;\n    if (res.hasHeader(LOCATION) && req.followRedirects()) {\n      if (status != HTTP_TEMP_REDIR) {\n        req.method(Method.GET);\n        req.data().clear();\n        req.requestBody(null);\n        req.removeHeader(CONTENT_TYPE);\n      }\n      String location=res.header(LOCATION);\n      if (location.startsWith(\"http:/\") && location.charAt(6) != '/')       location=location.substring(6);\n      URL redir=StringUtil.resolve(req.url(),location);\n      req.url(encodeUrl(redir));\n      for (      Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n        req.cookie(cookie.getKey(),cookie.getValue());\n      }\n      return execute(req,res);\n    }\n    if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())     throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n    String contentType=res.contentType();\n    if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n    if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n      if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n        req.parser(Parser.xmlParser());\n      }\n    }\n    res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n    if (conn.getContentLength() != 0 && req.method() != HEAD) {\n      res.bodyStream=null;\n      res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n      if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n        res.bodyStream=new GZIPInputStream(res.bodyStream);\n      }\n else       if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n        res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n      }\n      res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n    }\n else {\n      res.byteData=DataUtil.emptyByteBuffer();\n    }\n  }\n catch (  IOException e) {\n    if (res != null)     res.safeClose();\n    throw e;\n  }\n  res.executed=true;\n  return res;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 536,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 5442,
                        "startLineNumber": 730,
                        "startColumnNumber": 8,
                        "endLineNumber": 825,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "static Response execute(Connection.Request req,Response previousResponse) throws IOException {\n  Validate.notNull(req,\"Request must not be null\");\n  Validate.notNull(req.url(),\"URL must be specified to connect\");\n  String protocol=req.url().getProtocol();\n  if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))   throw new MalformedURLException(\"Only http & https protocols supported\");\n  final boolean methodHasBody=req.method().hasBody();\n  final boolean hasRequestBody=req.requestBody() != null;\n  if (!methodHasBody)   Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n  String mimeBoundary=null;\n  if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))   serialiseRequestUrl(req);\n else   if (methodHasBody)   mimeBoundary=setOutputContentType(req);\n  long startTime=System.nanoTime();\n  HttpURLConnection conn=createConnection(req);\n  Response res=null;\n  try {\n    conn.connect();\n    if (conn.getDoOutput())     writePost(req,conn.getOutputStream(),mimeBoundary);\n    int status=conn.getResponseCode();\n    res=new Response(previousResponse);\n    res.setupFromConnection(conn,previousResponse);\n    res.req=req;\n    if (res.hasHeader(LOCATION) && req.followRedirects()) {\n      if (status != HTTP_TEMP_REDIR) {\n        req.method(Method.GET);\n        req.data().clear();\n        req.requestBody(null);\n        req.removeHeader(CONTENT_TYPE);\n      }\n      String location=res.header(LOCATION);\n      if (location.startsWith(\"http:/\") && location.charAt(6) != '/')       location=location.substring(6);\n      URL redir=StringUtil.resolve(req.url(),location);\n      req.url(encodeUrl(redir));\n      for (      Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n        req.cookie(cookie.getKey(),cookie.getValue());\n      }\n      return execute(req,res);\n    }\n    if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())     throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n    String contentType=res.contentType();\n    if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n    if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n      if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n        req.parser(Parser.xmlParser());\n      }\n    }\n    res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n    if (conn.getContentLength() != 0 && req.method() != HEAD) {\n      res.bodyStream=null;\n      res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n      if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n        res.bodyStream=new GZIPInputStream(res.bodyStream);\n      }\n else       if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n        res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n      }\n      res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n    }\n else {\n      res.byteData=DataUtil.emptyByteBuffer();\n    }\n  }\n catch (  IOException e) {\n    if (res != null)     res.safeClose();\n    throw e;\n  }\n  res.executed=true;\n  return res;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 553,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 31,
                    "startLineNumber": 767,
                    "startColumnNumber": 24,
                    "endLineNumber": 767,
                    "endColumnNumber": 55
                },
                "nodeContext": "req.removeHeader(CONTENT_TYPE);\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "org.jsoup.Connection.Request"
        },
        {
            "nodeContext": "req",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 773,
                "startColumnNumber": 51,
                "endLineNumber": 773,
                "endColumnNumber": 54
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 9,
                        "startLineNumber": 773,
                        "startColumnNumber": 51,
                        "endLineNumber": 773,
                        "endColumnNumber": 60
                    },
                    "nodeContext": "req.url()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 39,
                        "startLineNumber": 773,
                        "startColumnNumber": 32,
                        "endLineNumber": 773,
                        "endColumnNumber": 71
                    },
                    "nodeContext": "StringUtil.resolve(req.url(),location)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 7,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 47,
                        "startLineNumber": 773,
                        "startColumnNumber": 24,
                        "endLineNumber": 773,
                        "endColumnNumber": 71
                    },
                    "nodeContext": "redir=StringUtil.resolve(req.url(),location)",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 9,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 52,
                        "startLineNumber": 773,
                        "startColumnNumber": 20,
                        "endLineNumber": 773,
                        "endColumnNumber": 72
                    },
                    "nodeContext": "URL redir=StringUtil.resolve(req.url(),location);\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 12,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1030,
                        "startLineNumber": 762,
                        "startColumnNumber": 70,
                        "endLineNumber": 780,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  if (status != HTTP_TEMP_REDIR) {\n    req.method(Method.GET);\n    req.data().clear();\n    req.requestBody(null);\n    req.removeHeader(CONTENT_TYPE);\n  }\n  String location=res.header(LOCATION);\n  if (location.startsWith(\"http:/\") && location.charAt(6) != '/')   location=location.substring(6);\n  URL redir=StringUtil.resolve(req.url(),location);\n  req.url(encodeUrl(redir));\n  for (  Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n    req.cookie(cookie.getKey(),cookie.getValue());\n  }\n  return execute(req,res);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 109,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1084,
                        "startLineNumber": 762,
                        "startColumnNumber": 16,
                        "endLineNumber": 780,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (res.hasHeader(LOCATION) && req.followRedirects()) {\n  if (status != HTTP_TEMP_REDIR) {\n    req.method(Method.GET);\n    req.data().clear();\n    req.requestBody(null);\n    req.removeHeader(CONTENT_TYPE);\n  }\n  String location=res.header(LOCATION);\n  if (location.startsWith(\"http:/\") && location.charAt(6) != '/')   location=location.substring(6);\n  URL redir=StringUtil.resolve(req.url(),location);\n  req.url(encodeUrl(redir));\n  for (  Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n    req.cookie(cookie.getKey(),cookie.getValue());\n  }\n  return execute(req,res);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 118,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 4035,
                        "startLineNumber": 751,
                        "startColumnNumber": 16,
                        "endLineNumber": 818,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  conn.connect();\n  if (conn.getDoOutput())   writePost(req,conn.getOutputStream(),mimeBoundary);\n  int status=conn.getResponseCode();\n  res=new Response(previousResponse);\n  res.setupFromConnection(conn,previousResponse);\n  res.req=req;\n  if (res.hasHeader(LOCATION) && req.followRedirects()) {\n    if (status != HTTP_TEMP_REDIR) {\n      req.method(Method.GET);\n      req.data().clear();\n      req.requestBody(null);\n      req.removeHeader(CONTENT_TYPE);\n    }\n    String location=res.header(LOCATION);\n    if (location.startsWith(\"http:/\") && location.charAt(6) != '/')     location=location.substring(6);\n    URL redir=StringUtil.resolve(req.url(),location);\n    req.url(encodeUrl(redir));\n    for (    Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n      req.cookie(cookie.getKey(),cookie.getValue());\n    }\n    return execute(req,res);\n  }\n  if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())   throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n  String contentType=res.contentType();\n  if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())   throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n  if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n    if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n      req.parser(Parser.xmlParser());\n    }\n  }\n  res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n  if (conn.getContentLength() != 0 && req.method() != HEAD) {\n    res.bodyStream=null;\n    res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n    if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n      res.bodyStream=new GZIPInputStream(res.bodyStream);\n    }\n else     if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n      res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n    }\n    res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n  }\n else {\n    res.byteData=DataUtil.emptyByteBuffer();\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 383,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4187,
                        "startLineNumber": 751,
                        "startColumnNumber": 12,
                        "endLineNumber": 821,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "try {\n  conn.connect();\n  if (conn.getDoOutput())   writePost(req,conn.getOutputStream(),mimeBoundary);\n  int status=conn.getResponseCode();\n  res=new Response(previousResponse);\n  res.setupFromConnection(conn,previousResponse);\n  res.req=req;\n  if (res.hasHeader(LOCATION) && req.followRedirects()) {\n    if (status != HTTP_TEMP_REDIR) {\n      req.method(Method.GET);\n      req.data().clear();\n      req.requestBody(null);\n      req.removeHeader(CONTENT_TYPE);\n    }\n    String location=res.header(LOCATION);\n    if (location.startsWith(\"http:/\") && location.charAt(6) != '/')     location=location.substring(6);\n    URL redir=StringUtil.resolve(req.url(),location);\n    req.url(encodeUrl(redir));\n    for (    Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n      req.cookie(cookie.getKey(),cookie.getValue());\n    }\n    return execute(req,res);\n  }\n  if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())   throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n  String contentType=res.contentType();\n  if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())   throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n  if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n    if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n      req.parser(Parser.xmlParser());\n    }\n  }\n  res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n  if (conn.getContentLength() != 0 && req.method() != HEAD) {\n    res.bodyStream=null;\n    res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n    if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n      res.bodyStream=new GZIPInputStream(res.bodyStream);\n    }\n else     if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n      res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n    }\n    res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n  }\n else {\n    res.byteData=DataUtil.emptyByteBuffer();\n  }\n}\n catch (IOException e) {\n  if (res != null)   res.safeClose();\n  throw e;\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 400,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 5348,
                        "startLineNumber": 730,
                        "startColumnNumber": 102,
                        "endLineNumber": 825,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  Validate.notNull(req,\"Request must not be null\");\n  Validate.notNull(req.url(),\"URL must be specified to connect\");\n  String protocol=req.url().getProtocol();\n  if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))   throw new MalformedURLException(\"Only http & https protocols supported\");\n  final boolean methodHasBody=req.method().hasBody();\n  final boolean hasRequestBody=req.requestBody() != null;\n  if (!methodHasBody)   Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n  String mimeBoundary=null;\n  if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))   serialiseRequestUrl(req);\n else   if (methodHasBody)   mimeBoundary=setOutputContentType(req);\n  long startTime=System.nanoTime();\n  HttpURLConnection conn=createConnection(req);\n  Response res=null;\n  try {\n    conn.connect();\n    if (conn.getDoOutput())     writePost(req,conn.getOutputStream(),mimeBoundary);\n    int status=conn.getResponseCode();\n    res=new Response(previousResponse);\n    res.setupFromConnection(conn,previousResponse);\n    res.req=req;\n    if (res.hasHeader(LOCATION) && req.followRedirects()) {\n      if (status != HTTP_TEMP_REDIR) {\n        req.method(Method.GET);\n        req.data().clear();\n        req.requestBody(null);\n        req.removeHeader(CONTENT_TYPE);\n      }\n      String location=res.header(LOCATION);\n      if (location.startsWith(\"http:/\") && location.charAt(6) != '/')       location=location.substring(6);\n      URL redir=StringUtil.resolve(req.url(),location);\n      req.url(encodeUrl(redir));\n      for (      Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n        req.cookie(cookie.getKey(),cookie.getValue());\n      }\n      return execute(req,res);\n    }\n    if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())     throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n    String contentType=res.contentType();\n    if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n    if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n      if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n        req.parser(Parser.xmlParser());\n      }\n    }\n    res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n    if (conn.getContentLength() != 0 && req.method() != HEAD) {\n      res.bodyStream=null;\n      res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n      if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n        res.bodyStream=new GZIPInputStream(res.bodyStream);\n      }\n else       if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n        res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n      }\n      res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n    }\n else {\n      res.byteData=DataUtil.emptyByteBuffer();\n    }\n  }\n catch (  IOException e) {\n    if (res != null)     res.safeClose();\n    throw e;\n  }\n  res.executed=true;\n  return res;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 536,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 5442,
                        "startLineNumber": 730,
                        "startColumnNumber": 8,
                        "endLineNumber": 825,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "static Response execute(Connection.Request req,Response previousResponse) throws IOException {\n  Validate.notNull(req,\"Request must not be null\");\n  Validate.notNull(req.url(),\"URL must be specified to connect\");\n  String protocol=req.url().getProtocol();\n  if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))   throw new MalformedURLException(\"Only http & https protocols supported\");\n  final boolean methodHasBody=req.method().hasBody();\n  final boolean hasRequestBody=req.requestBody() != null;\n  if (!methodHasBody)   Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n  String mimeBoundary=null;\n  if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))   serialiseRequestUrl(req);\n else   if (methodHasBody)   mimeBoundary=setOutputContentType(req);\n  long startTime=System.nanoTime();\n  HttpURLConnection conn=createConnection(req);\n  Response res=null;\n  try {\n    conn.connect();\n    if (conn.getDoOutput())     writePost(req,conn.getOutputStream(),mimeBoundary);\n    int status=conn.getResponseCode();\n    res=new Response(previousResponse);\n    res.setupFromConnection(conn,previousResponse);\n    res.req=req;\n    if (res.hasHeader(LOCATION) && req.followRedirects()) {\n      if (status != HTTP_TEMP_REDIR) {\n        req.method(Method.GET);\n        req.data().clear();\n        req.requestBody(null);\n        req.removeHeader(CONTENT_TYPE);\n      }\n      String location=res.header(LOCATION);\n      if (location.startsWith(\"http:/\") && location.charAt(6) != '/')       location=location.substring(6);\n      URL redir=StringUtil.resolve(req.url(),location);\n      req.url(encodeUrl(redir));\n      for (      Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n        req.cookie(cookie.getKey(),cookie.getValue());\n      }\n      return execute(req,res);\n    }\n    if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())     throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n    String contentType=res.contentType();\n    if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n    if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n      if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n        req.parser(Parser.xmlParser());\n      }\n    }\n    res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n    if (conn.getContentLength() != 0 && req.method() != HEAD) {\n      res.bodyStream=null;\n      res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n      if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n        res.bodyStream=new GZIPInputStream(res.bodyStream);\n      }\n else       if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n        res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n      }\n      res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n    }\n else {\n      res.byteData=DataUtil.emptyByteBuffer();\n    }\n  }\n catch (  IOException e) {\n    if (res != null)     res.safeClose();\n    throw e;\n  }\n  res.executed=true;\n  return res;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 553,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 52,
                    "startLineNumber": 773,
                    "startColumnNumber": 20,
                    "endLineNumber": 773,
                    "endColumnNumber": 72
                },
                "nodeContext": "URL redir=StringUtil.resolve(req.url(),location);\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 12,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "org.jsoup.Connection.Request"
        },
        {
            "nodeContext": "req",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 774,
                "startColumnNumber": 20,
                "endLineNumber": 774,
                "endColumnNumber": 23
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 25,
                        "startLineNumber": 774,
                        "startColumnNumber": 20,
                        "endLineNumber": 774,
                        "endColumnNumber": 45
                    },
                    "nodeContext": "req.url(encodeUrl(redir))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 26,
                        "startLineNumber": 774,
                        "startColumnNumber": 20,
                        "endLineNumber": 774,
                        "endColumnNumber": 46
                    },
                    "nodeContext": "req.url(encodeUrl(redir));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1030,
                        "startLineNumber": 762,
                        "startColumnNumber": 70,
                        "endLineNumber": 780,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  if (status != HTTP_TEMP_REDIR) {\n    req.method(Method.GET);\n    req.data().clear();\n    req.requestBody(null);\n    req.removeHeader(CONTENT_TYPE);\n  }\n  String location=res.header(LOCATION);\n  if (location.startsWith(\"http:/\") && location.charAt(6) != '/')   location=location.substring(6);\n  URL redir=StringUtil.resolve(req.url(),location);\n  req.url(encodeUrl(redir));\n  for (  Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n    req.cookie(cookie.getKey(),cookie.getValue());\n  }\n  return execute(req,res);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 109,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1084,
                        "startLineNumber": 762,
                        "startColumnNumber": 16,
                        "endLineNumber": 780,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (res.hasHeader(LOCATION) && req.followRedirects()) {\n  if (status != HTTP_TEMP_REDIR) {\n    req.method(Method.GET);\n    req.data().clear();\n    req.requestBody(null);\n    req.removeHeader(CONTENT_TYPE);\n  }\n  String location=res.header(LOCATION);\n  if (location.startsWith(\"http:/\") && location.charAt(6) != '/')   location=location.substring(6);\n  URL redir=StringUtil.resolve(req.url(),location);\n  req.url(encodeUrl(redir));\n  for (  Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n    req.cookie(cookie.getKey(),cookie.getValue());\n  }\n  return execute(req,res);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 118,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 4035,
                        "startLineNumber": 751,
                        "startColumnNumber": 16,
                        "endLineNumber": 818,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  conn.connect();\n  if (conn.getDoOutput())   writePost(req,conn.getOutputStream(),mimeBoundary);\n  int status=conn.getResponseCode();\n  res=new Response(previousResponse);\n  res.setupFromConnection(conn,previousResponse);\n  res.req=req;\n  if (res.hasHeader(LOCATION) && req.followRedirects()) {\n    if (status != HTTP_TEMP_REDIR) {\n      req.method(Method.GET);\n      req.data().clear();\n      req.requestBody(null);\n      req.removeHeader(CONTENT_TYPE);\n    }\n    String location=res.header(LOCATION);\n    if (location.startsWith(\"http:/\") && location.charAt(6) != '/')     location=location.substring(6);\n    URL redir=StringUtil.resolve(req.url(),location);\n    req.url(encodeUrl(redir));\n    for (    Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n      req.cookie(cookie.getKey(),cookie.getValue());\n    }\n    return execute(req,res);\n  }\n  if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())   throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n  String contentType=res.contentType();\n  if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())   throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n  if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n    if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n      req.parser(Parser.xmlParser());\n    }\n  }\n  res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n  if (conn.getContentLength() != 0 && req.method() != HEAD) {\n    res.bodyStream=null;\n    res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n    if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n      res.bodyStream=new GZIPInputStream(res.bodyStream);\n    }\n else     if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n      res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n    }\n    res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n  }\n else {\n    res.byteData=DataUtil.emptyByteBuffer();\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 383,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4187,
                        "startLineNumber": 751,
                        "startColumnNumber": 12,
                        "endLineNumber": 821,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "try {\n  conn.connect();\n  if (conn.getDoOutput())   writePost(req,conn.getOutputStream(),mimeBoundary);\n  int status=conn.getResponseCode();\n  res=new Response(previousResponse);\n  res.setupFromConnection(conn,previousResponse);\n  res.req=req;\n  if (res.hasHeader(LOCATION) && req.followRedirects()) {\n    if (status != HTTP_TEMP_REDIR) {\n      req.method(Method.GET);\n      req.data().clear();\n      req.requestBody(null);\n      req.removeHeader(CONTENT_TYPE);\n    }\n    String location=res.header(LOCATION);\n    if (location.startsWith(\"http:/\") && location.charAt(6) != '/')     location=location.substring(6);\n    URL redir=StringUtil.resolve(req.url(),location);\n    req.url(encodeUrl(redir));\n    for (    Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n      req.cookie(cookie.getKey(),cookie.getValue());\n    }\n    return execute(req,res);\n  }\n  if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())   throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n  String contentType=res.contentType();\n  if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())   throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n  if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n    if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n      req.parser(Parser.xmlParser());\n    }\n  }\n  res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n  if (conn.getContentLength() != 0 && req.method() != HEAD) {\n    res.bodyStream=null;\n    res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n    if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n      res.bodyStream=new GZIPInputStream(res.bodyStream);\n    }\n else     if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n      res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n    }\n    res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n  }\n else {\n    res.byteData=DataUtil.emptyByteBuffer();\n  }\n}\n catch (IOException e) {\n  if (res != null)   res.safeClose();\n  throw e;\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 400,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 5348,
                        "startLineNumber": 730,
                        "startColumnNumber": 102,
                        "endLineNumber": 825,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  Validate.notNull(req,\"Request must not be null\");\n  Validate.notNull(req.url(),\"URL must be specified to connect\");\n  String protocol=req.url().getProtocol();\n  if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))   throw new MalformedURLException(\"Only http & https protocols supported\");\n  final boolean methodHasBody=req.method().hasBody();\n  final boolean hasRequestBody=req.requestBody() != null;\n  if (!methodHasBody)   Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n  String mimeBoundary=null;\n  if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))   serialiseRequestUrl(req);\n else   if (methodHasBody)   mimeBoundary=setOutputContentType(req);\n  long startTime=System.nanoTime();\n  HttpURLConnection conn=createConnection(req);\n  Response res=null;\n  try {\n    conn.connect();\n    if (conn.getDoOutput())     writePost(req,conn.getOutputStream(),mimeBoundary);\n    int status=conn.getResponseCode();\n    res=new Response(previousResponse);\n    res.setupFromConnection(conn,previousResponse);\n    res.req=req;\n    if (res.hasHeader(LOCATION) && req.followRedirects()) {\n      if (status != HTTP_TEMP_REDIR) {\n        req.method(Method.GET);\n        req.data().clear();\n        req.requestBody(null);\n        req.removeHeader(CONTENT_TYPE);\n      }\n      String location=res.header(LOCATION);\n      if (location.startsWith(\"http:/\") && location.charAt(6) != '/')       location=location.substring(6);\n      URL redir=StringUtil.resolve(req.url(),location);\n      req.url(encodeUrl(redir));\n      for (      Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n        req.cookie(cookie.getKey(),cookie.getValue());\n      }\n      return execute(req,res);\n    }\n    if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())     throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n    String contentType=res.contentType();\n    if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n    if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n      if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n        req.parser(Parser.xmlParser());\n      }\n    }\n    res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n    if (conn.getContentLength() != 0 && req.method() != HEAD) {\n      res.bodyStream=null;\n      res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n      if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n        res.bodyStream=new GZIPInputStream(res.bodyStream);\n      }\n else       if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n        res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n      }\n      res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n    }\n else {\n      res.byteData=DataUtil.emptyByteBuffer();\n    }\n  }\n catch (  IOException e) {\n    if (res != null)     res.safeClose();\n    throw e;\n  }\n  res.executed=true;\n  return res;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 536,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 5442,
                        "startLineNumber": 730,
                        "startColumnNumber": 8,
                        "endLineNumber": 825,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "static Response execute(Connection.Request req,Response previousResponse) throws IOException {\n  Validate.notNull(req,\"Request must not be null\");\n  Validate.notNull(req.url(),\"URL must be specified to connect\");\n  String protocol=req.url().getProtocol();\n  if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))   throw new MalformedURLException(\"Only http & https protocols supported\");\n  final boolean methodHasBody=req.method().hasBody();\n  final boolean hasRequestBody=req.requestBody() != null;\n  if (!methodHasBody)   Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n  String mimeBoundary=null;\n  if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))   serialiseRequestUrl(req);\n else   if (methodHasBody)   mimeBoundary=setOutputContentType(req);\n  long startTime=System.nanoTime();\n  HttpURLConnection conn=createConnection(req);\n  Response res=null;\n  try {\n    conn.connect();\n    if (conn.getDoOutput())     writePost(req,conn.getOutputStream(),mimeBoundary);\n    int status=conn.getResponseCode();\n    res=new Response(previousResponse);\n    res.setupFromConnection(conn,previousResponse);\n    res.req=req;\n    if (res.hasHeader(LOCATION) && req.followRedirects()) {\n      if (status != HTTP_TEMP_REDIR) {\n        req.method(Method.GET);\n        req.data().clear();\n        req.requestBody(null);\n        req.removeHeader(CONTENT_TYPE);\n      }\n      String location=res.header(LOCATION);\n      if (location.startsWith(\"http:/\") && location.charAt(6) != '/')       location=location.substring(6);\n      URL redir=StringUtil.resolve(req.url(),location);\n      req.url(encodeUrl(redir));\n      for (      Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n        req.cookie(cookie.getKey(),cookie.getValue());\n      }\n      return execute(req,res);\n    }\n    if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())     throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n    String contentType=res.contentType();\n    if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n    if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n      if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n        req.parser(Parser.xmlParser());\n      }\n    }\n    res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n    if (conn.getContentLength() != 0 && req.method() != HEAD) {\n      res.bodyStream=null;\n      res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n      if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n        res.bodyStream=new GZIPInputStream(res.bodyStream);\n      }\n else       if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n        res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n      }\n      res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n    }\n else {\n      res.byteData=DataUtil.emptyByteBuffer();\n    }\n  }\n catch (  IOException e) {\n    if (res != null)     res.safeClose();\n    throw e;\n  }\n  res.executed=true;\n  return res;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 553,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 26,
                    "startLineNumber": 774,
                    "startColumnNumber": 20,
                    "endLineNumber": 774,
                    "endColumnNumber": 46
                },
                "nodeContext": "req.url(encodeUrl(redir));\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 7,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.jsoup.Connection.Request"
        },
        {
            "nodeContext": "req",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 777,
                "startColumnNumber": 24,
                "endLineNumber": 777,
                "endColumnNumber": 27
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 46,
                        "startLineNumber": 777,
                        "startColumnNumber": 24,
                        "endLineNumber": 777,
                        "endColumnNumber": 70
                    },
                    "nodeContext": "req.cookie(cookie.getKey(),cookie.getValue())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 9,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 47,
                        "startLineNumber": 777,
                        "startColumnNumber": 24,
                        "endLineNumber": 777,
                        "endColumnNumber": 71
                    },
                    "nodeContext": "req.cookie(cookie.getKey(),cookie.getValue());\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 10,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 153,
                        "startLineNumber": 776,
                        "startColumnNumber": 84,
                        "endLineNumber": 778,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  req.cookie(cookie.getKey(),cookie.getValue());\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 11,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 217,
                        "startLineNumber": 776,
                        "startColumnNumber": 20,
                        "endLineNumber": 778,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "for (Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n  req.cookie(cookie.getKey(),cookie.getValue());\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 28,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1030,
                        "startLineNumber": 762,
                        "startColumnNumber": 70,
                        "endLineNumber": 780,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  if (status != HTTP_TEMP_REDIR) {\n    req.method(Method.GET);\n    req.data().clear();\n    req.requestBody(null);\n    req.removeHeader(CONTENT_TYPE);\n  }\n  String location=res.header(LOCATION);\n  if (location.startsWith(\"http:/\") && location.charAt(6) != '/')   location=location.substring(6);\n  URL redir=StringUtil.resolve(req.url(),location);\n  req.url(encodeUrl(redir));\n  for (  Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n    req.cookie(cookie.getKey(),cookie.getValue());\n  }\n  return execute(req,res);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 109,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1084,
                        "startLineNumber": 762,
                        "startColumnNumber": 16,
                        "endLineNumber": 780,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (res.hasHeader(LOCATION) && req.followRedirects()) {\n  if (status != HTTP_TEMP_REDIR) {\n    req.method(Method.GET);\n    req.data().clear();\n    req.requestBody(null);\n    req.removeHeader(CONTENT_TYPE);\n  }\n  String location=res.header(LOCATION);\n  if (location.startsWith(\"http:/\") && location.charAt(6) != '/')   location=location.substring(6);\n  URL redir=StringUtil.resolve(req.url(),location);\n  req.url(encodeUrl(redir));\n  for (  Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n    req.cookie(cookie.getKey(),cookie.getValue());\n  }\n  return execute(req,res);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 118,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 4035,
                        "startLineNumber": 751,
                        "startColumnNumber": 16,
                        "endLineNumber": 818,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  conn.connect();\n  if (conn.getDoOutput())   writePost(req,conn.getOutputStream(),mimeBoundary);\n  int status=conn.getResponseCode();\n  res=new Response(previousResponse);\n  res.setupFromConnection(conn,previousResponse);\n  res.req=req;\n  if (res.hasHeader(LOCATION) && req.followRedirects()) {\n    if (status != HTTP_TEMP_REDIR) {\n      req.method(Method.GET);\n      req.data().clear();\n      req.requestBody(null);\n      req.removeHeader(CONTENT_TYPE);\n    }\n    String location=res.header(LOCATION);\n    if (location.startsWith(\"http:/\") && location.charAt(6) != '/')     location=location.substring(6);\n    URL redir=StringUtil.resolve(req.url(),location);\n    req.url(encodeUrl(redir));\n    for (    Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n      req.cookie(cookie.getKey(),cookie.getValue());\n    }\n    return execute(req,res);\n  }\n  if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())   throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n  String contentType=res.contentType();\n  if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())   throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n  if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n    if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n      req.parser(Parser.xmlParser());\n    }\n  }\n  res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n  if (conn.getContentLength() != 0 && req.method() != HEAD) {\n    res.bodyStream=null;\n    res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n    if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n      res.bodyStream=new GZIPInputStream(res.bodyStream);\n    }\n else     if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n      res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n    }\n    res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n  }\n else {\n    res.byteData=DataUtil.emptyByteBuffer();\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 383,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4187,
                        "startLineNumber": 751,
                        "startColumnNumber": 12,
                        "endLineNumber": 821,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "try {\n  conn.connect();\n  if (conn.getDoOutput())   writePost(req,conn.getOutputStream(),mimeBoundary);\n  int status=conn.getResponseCode();\n  res=new Response(previousResponse);\n  res.setupFromConnection(conn,previousResponse);\n  res.req=req;\n  if (res.hasHeader(LOCATION) && req.followRedirects()) {\n    if (status != HTTP_TEMP_REDIR) {\n      req.method(Method.GET);\n      req.data().clear();\n      req.requestBody(null);\n      req.removeHeader(CONTENT_TYPE);\n    }\n    String location=res.header(LOCATION);\n    if (location.startsWith(\"http:/\") && location.charAt(6) != '/')     location=location.substring(6);\n    URL redir=StringUtil.resolve(req.url(),location);\n    req.url(encodeUrl(redir));\n    for (    Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n      req.cookie(cookie.getKey(),cookie.getValue());\n    }\n    return execute(req,res);\n  }\n  if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())   throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n  String contentType=res.contentType();\n  if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())   throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n  if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n    if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n      req.parser(Parser.xmlParser());\n    }\n  }\n  res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n  if (conn.getContentLength() != 0 && req.method() != HEAD) {\n    res.bodyStream=null;\n    res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n    if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n      res.bodyStream=new GZIPInputStream(res.bodyStream);\n    }\n else     if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n      res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n    }\n    res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n  }\n else {\n    res.byteData=DataUtil.emptyByteBuffer();\n  }\n}\n catch (IOException e) {\n  if (res != null)   res.safeClose();\n  throw e;\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 400,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 5348,
                        "startLineNumber": 730,
                        "startColumnNumber": 102,
                        "endLineNumber": 825,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  Validate.notNull(req,\"Request must not be null\");\n  Validate.notNull(req.url(),\"URL must be specified to connect\");\n  String protocol=req.url().getProtocol();\n  if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))   throw new MalformedURLException(\"Only http & https protocols supported\");\n  final boolean methodHasBody=req.method().hasBody();\n  final boolean hasRequestBody=req.requestBody() != null;\n  if (!methodHasBody)   Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n  String mimeBoundary=null;\n  if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))   serialiseRequestUrl(req);\n else   if (methodHasBody)   mimeBoundary=setOutputContentType(req);\n  long startTime=System.nanoTime();\n  HttpURLConnection conn=createConnection(req);\n  Response res=null;\n  try {\n    conn.connect();\n    if (conn.getDoOutput())     writePost(req,conn.getOutputStream(),mimeBoundary);\n    int status=conn.getResponseCode();\n    res=new Response(previousResponse);\n    res.setupFromConnection(conn,previousResponse);\n    res.req=req;\n    if (res.hasHeader(LOCATION) && req.followRedirects()) {\n      if (status != HTTP_TEMP_REDIR) {\n        req.method(Method.GET);\n        req.data().clear();\n        req.requestBody(null);\n        req.removeHeader(CONTENT_TYPE);\n      }\n      String location=res.header(LOCATION);\n      if (location.startsWith(\"http:/\") && location.charAt(6) != '/')       location=location.substring(6);\n      URL redir=StringUtil.resolve(req.url(),location);\n      req.url(encodeUrl(redir));\n      for (      Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n        req.cookie(cookie.getKey(),cookie.getValue());\n      }\n      return execute(req,res);\n    }\n    if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())     throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n    String contentType=res.contentType();\n    if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n    if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n      if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n        req.parser(Parser.xmlParser());\n      }\n    }\n    res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n    if (conn.getContentLength() != 0 && req.method() != HEAD) {\n      res.bodyStream=null;\n      res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n      if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n        res.bodyStream=new GZIPInputStream(res.bodyStream);\n      }\n else       if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n        res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n      }\n      res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n    }\n else {\n      res.byteData=DataUtil.emptyByteBuffer();\n    }\n  }\n catch (  IOException e) {\n    if (res != null)     res.safeClose();\n    throw e;\n  }\n  res.executed=true;\n  return res;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 536,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 5442,
                        "startLineNumber": 730,
                        "startColumnNumber": 8,
                        "endLineNumber": 825,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "static Response execute(Connection.Request req,Response previousResponse) throws IOException {\n  Validate.notNull(req,\"Request must not be null\");\n  Validate.notNull(req.url(),\"URL must be specified to connect\");\n  String protocol=req.url().getProtocol();\n  if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))   throw new MalformedURLException(\"Only http & https protocols supported\");\n  final boolean methodHasBody=req.method().hasBody();\n  final boolean hasRequestBody=req.requestBody() != null;\n  if (!methodHasBody)   Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n  String mimeBoundary=null;\n  if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))   serialiseRequestUrl(req);\n else   if (methodHasBody)   mimeBoundary=setOutputContentType(req);\n  long startTime=System.nanoTime();\n  HttpURLConnection conn=createConnection(req);\n  Response res=null;\n  try {\n    conn.connect();\n    if (conn.getDoOutput())     writePost(req,conn.getOutputStream(),mimeBoundary);\n    int status=conn.getResponseCode();\n    res=new Response(previousResponse);\n    res.setupFromConnection(conn,previousResponse);\n    res.req=req;\n    if (res.hasHeader(LOCATION) && req.followRedirects()) {\n      if (status != HTTP_TEMP_REDIR) {\n        req.method(Method.GET);\n        req.data().clear();\n        req.requestBody(null);\n        req.removeHeader(CONTENT_TYPE);\n      }\n      String location=res.header(LOCATION);\n      if (location.startsWith(\"http:/\") && location.charAt(6) != '/')       location=location.substring(6);\n      URL redir=StringUtil.resolve(req.url(),location);\n      req.url(encodeUrl(redir));\n      for (      Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n        req.cookie(cookie.getKey(),cookie.getValue());\n      }\n      return execute(req,res);\n    }\n    if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())     throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n    String contentType=res.contentType();\n    if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n    if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n      if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n        req.parser(Parser.xmlParser());\n      }\n    }\n    res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n    if (conn.getContentLength() != 0 && req.method() != HEAD) {\n      res.bodyStream=null;\n      res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n      if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n        res.bodyStream=new GZIPInputStream(res.bodyStream);\n      }\n else       if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n        res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n      }\n      res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n    }\n else {\n      res.byteData=DataUtil.emptyByteBuffer();\n    }\n  }\n catch (  IOException e) {\n    if (res != null)     res.safeClose();\n    throw e;\n  }\n  res.executed=true;\n  return res;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 553,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 47,
                    "startLineNumber": 777,
                    "startColumnNumber": 24,
                    "endLineNumber": 777,
                    "endColumnNumber": 71
                },
                "nodeContext": "req.cookie(cookie.getKey(),cookie.getValue());\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 10,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.jsoup.Connection.Request"
        },
        {
            "nodeContext": "req",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 779,
                "startColumnNumber": 35,
                "endLineNumber": 779,
                "endColumnNumber": 38
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
                    "nodePosition": {
                        "charLength": 17,
                        "startLineNumber": 779,
                        "startColumnNumber": 27,
                        "endLineNumber": 779,
                        "endColumnNumber": 44
                    },
                    "nodeContext": "execute(req,res)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 4,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 25,
                        "startLineNumber": 779,
                        "startColumnNumber": 20,
                        "endLineNumber": 779,
                        "endColumnNumber": 45
                    },
                    "nodeContext": "return execute(req,res);\n",
                    "nodeType": "ReturnStatement",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1030,
                        "startLineNumber": 762,
                        "startColumnNumber": 70,
                        "endLineNumber": 780,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  if (status != HTTP_TEMP_REDIR) {\n    req.method(Method.GET);\n    req.data().clear();\n    req.requestBody(null);\n    req.removeHeader(CONTENT_TYPE);\n  }\n  String location=res.header(LOCATION);\n  if (location.startsWith(\"http:/\") && location.charAt(6) != '/')   location=location.substring(6);\n  URL redir=StringUtil.resolve(req.url(),location);\n  req.url(encodeUrl(redir));\n  for (  Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n    req.cookie(cookie.getKey(),cookie.getValue());\n  }\n  return execute(req,res);\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 109,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1084,
                        "startLineNumber": 762,
                        "startColumnNumber": 16,
                        "endLineNumber": 780,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (res.hasHeader(LOCATION) && req.followRedirects()) {\n  if (status != HTTP_TEMP_REDIR) {\n    req.method(Method.GET);\n    req.data().clear();\n    req.requestBody(null);\n    req.removeHeader(CONTENT_TYPE);\n  }\n  String location=res.header(LOCATION);\n  if (location.startsWith(\"http:/\") && location.charAt(6) != '/')   location=location.substring(6);\n  URL redir=StringUtil.resolve(req.url(),location);\n  req.url(encodeUrl(redir));\n  for (  Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n    req.cookie(cookie.getKey(),cookie.getValue());\n  }\n  return execute(req,res);\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 118,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 4035,
                        "startLineNumber": 751,
                        "startColumnNumber": 16,
                        "endLineNumber": 818,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  conn.connect();\n  if (conn.getDoOutput())   writePost(req,conn.getOutputStream(),mimeBoundary);\n  int status=conn.getResponseCode();\n  res=new Response(previousResponse);\n  res.setupFromConnection(conn,previousResponse);\n  res.req=req;\n  if (res.hasHeader(LOCATION) && req.followRedirects()) {\n    if (status != HTTP_TEMP_REDIR) {\n      req.method(Method.GET);\n      req.data().clear();\n      req.requestBody(null);\n      req.removeHeader(CONTENT_TYPE);\n    }\n    String location=res.header(LOCATION);\n    if (location.startsWith(\"http:/\") && location.charAt(6) != '/')     location=location.substring(6);\n    URL redir=StringUtil.resolve(req.url(),location);\n    req.url(encodeUrl(redir));\n    for (    Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n      req.cookie(cookie.getKey(),cookie.getValue());\n    }\n    return execute(req,res);\n  }\n  if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())   throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n  String contentType=res.contentType();\n  if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())   throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n  if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n    if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n      req.parser(Parser.xmlParser());\n    }\n  }\n  res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n  if (conn.getContentLength() != 0 && req.method() != HEAD) {\n    res.bodyStream=null;\n    res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n    if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n      res.bodyStream=new GZIPInputStream(res.bodyStream);\n    }\n else     if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n      res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n    }\n    res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n  }\n else {\n    res.byteData=DataUtil.emptyByteBuffer();\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 383,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4187,
                        "startLineNumber": 751,
                        "startColumnNumber": 12,
                        "endLineNumber": 821,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "try {\n  conn.connect();\n  if (conn.getDoOutput())   writePost(req,conn.getOutputStream(),mimeBoundary);\n  int status=conn.getResponseCode();\n  res=new Response(previousResponse);\n  res.setupFromConnection(conn,previousResponse);\n  res.req=req;\n  if (res.hasHeader(LOCATION) && req.followRedirects()) {\n    if (status != HTTP_TEMP_REDIR) {\n      req.method(Method.GET);\n      req.data().clear();\n      req.requestBody(null);\n      req.removeHeader(CONTENT_TYPE);\n    }\n    String location=res.header(LOCATION);\n    if (location.startsWith(\"http:/\") && location.charAt(6) != '/')     location=location.substring(6);\n    URL redir=StringUtil.resolve(req.url(),location);\n    req.url(encodeUrl(redir));\n    for (    Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n      req.cookie(cookie.getKey(),cookie.getValue());\n    }\n    return execute(req,res);\n  }\n  if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())   throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n  String contentType=res.contentType();\n  if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())   throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n  if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n    if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n      req.parser(Parser.xmlParser());\n    }\n  }\n  res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n  if (conn.getContentLength() != 0 && req.method() != HEAD) {\n    res.bodyStream=null;\n    res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n    if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n      res.bodyStream=new GZIPInputStream(res.bodyStream);\n    }\n else     if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n      res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n    }\n    res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n  }\n else {\n    res.byteData=DataUtil.emptyByteBuffer();\n  }\n}\n catch (IOException e) {\n  if (res != null)   res.safeClose();\n  throw e;\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 400,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 5348,
                        "startLineNumber": 730,
                        "startColumnNumber": 102,
                        "endLineNumber": 825,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  Validate.notNull(req,\"Request must not be null\");\n  Validate.notNull(req.url(),\"URL must be specified to connect\");\n  String protocol=req.url().getProtocol();\n  if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))   throw new MalformedURLException(\"Only http & https protocols supported\");\n  final boolean methodHasBody=req.method().hasBody();\n  final boolean hasRequestBody=req.requestBody() != null;\n  if (!methodHasBody)   Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n  String mimeBoundary=null;\n  if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))   serialiseRequestUrl(req);\n else   if (methodHasBody)   mimeBoundary=setOutputContentType(req);\n  long startTime=System.nanoTime();\n  HttpURLConnection conn=createConnection(req);\n  Response res=null;\n  try {\n    conn.connect();\n    if (conn.getDoOutput())     writePost(req,conn.getOutputStream(),mimeBoundary);\n    int status=conn.getResponseCode();\n    res=new Response(previousResponse);\n    res.setupFromConnection(conn,previousResponse);\n    res.req=req;\n    if (res.hasHeader(LOCATION) && req.followRedirects()) {\n      if (status != HTTP_TEMP_REDIR) {\n        req.method(Method.GET);\n        req.data().clear();\n        req.requestBody(null);\n        req.removeHeader(CONTENT_TYPE);\n      }\n      String location=res.header(LOCATION);\n      if (location.startsWith(\"http:/\") && location.charAt(6) != '/')       location=location.substring(6);\n      URL redir=StringUtil.resolve(req.url(),location);\n      req.url(encodeUrl(redir));\n      for (      Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n        req.cookie(cookie.getKey(),cookie.getValue());\n      }\n      return execute(req,res);\n    }\n    if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())     throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n    String contentType=res.contentType();\n    if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n    if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n      if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n        req.parser(Parser.xmlParser());\n      }\n    }\n    res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n    if (conn.getContentLength() != 0 && req.method() != HEAD) {\n      res.bodyStream=null;\n      res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n      if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n        res.bodyStream=new GZIPInputStream(res.bodyStream);\n      }\n else       if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n        res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n      }\n      res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n    }\n else {\n      res.byteData=DataUtil.emptyByteBuffer();\n    }\n  }\n catch (  IOException e) {\n    if (res != null)     res.safeClose();\n    throw e;\n  }\n  res.executed=true;\n  return res;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 536,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 5442,
                        "startLineNumber": 730,
                        "startColumnNumber": 8,
                        "endLineNumber": 825,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "static Response execute(Connection.Request req,Response previousResponse) throws IOException {\n  Validate.notNull(req,\"Request must not be null\");\n  Validate.notNull(req.url(),\"URL must be specified to connect\");\n  String protocol=req.url().getProtocol();\n  if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))   throw new MalformedURLException(\"Only http & https protocols supported\");\n  final boolean methodHasBody=req.method().hasBody();\n  final boolean hasRequestBody=req.requestBody() != null;\n  if (!methodHasBody)   Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n  String mimeBoundary=null;\n  if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))   serialiseRequestUrl(req);\n else   if (methodHasBody)   mimeBoundary=setOutputContentType(req);\n  long startTime=System.nanoTime();\n  HttpURLConnection conn=createConnection(req);\n  Response res=null;\n  try {\n    conn.connect();\n    if (conn.getDoOutput())     writePost(req,conn.getOutputStream(),mimeBoundary);\n    int status=conn.getResponseCode();\n    res=new Response(previousResponse);\n    res.setupFromConnection(conn,previousResponse);\n    res.req=req;\n    if (res.hasHeader(LOCATION) && req.followRedirects()) {\n      if (status != HTTP_TEMP_REDIR) {\n        req.method(Method.GET);\n        req.data().clear();\n        req.requestBody(null);\n        req.removeHeader(CONTENT_TYPE);\n      }\n      String location=res.header(LOCATION);\n      if (location.startsWith(\"http:/\") && location.charAt(6) != '/')       location=location.substring(6);\n      URL redir=StringUtil.resolve(req.url(),location);\n      req.url(encodeUrl(redir));\n      for (      Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n        req.cookie(cookie.getKey(),cookie.getValue());\n      }\n      return execute(req,res);\n    }\n    if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())     throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n    String contentType=res.contentType();\n    if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n    if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n      if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n        req.parser(Parser.xmlParser());\n      }\n    }\n    res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n    if (conn.getContentLength() != 0 && req.method() != HEAD) {\n      res.bodyStream=null;\n      res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n      if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n        res.bodyStream=new GZIPInputStream(res.bodyStream);\n      }\n else       if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n        res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n      }\n      res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n    }\n else {\n      res.byteData=DataUtil.emptyByteBuffer();\n    }\n  }\n catch (  IOException e) {\n    if (res != null)     res.safeClose();\n    throw e;\n  }\n  res.executed=true;\n  return res;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 553,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 25,
                    "startLineNumber": 779,
                    "startColumnNumber": 20,
                    "endLineNumber": 779,
                    "endColumnNumber": 45
                },
                "nodeContext": "return execute(req,res);\n",
                "nodeType": "ReturnStatement",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "org.jsoup.Connection.Request"
        },
        {
            "nodeContext": "req",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 781,
                "startColumnNumber": 56,
                "endLineNumber": 781,
                "endColumnNumber": 59
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
                    "nodePosition": {
                        "charLength": 22,
                        "startLineNumber": 781,
                        "startColumnNumber": 56,
                        "endLineNumber": 781,
                        "endColumnNumber": 78
                    },
                    "nodeContext": "req.ignoreHttpErrors()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 23,
                        "startLineNumber": 781,
                        "startColumnNumber": 55,
                        "endLineNumber": 781,
                        "endColumnNumber": 78
                    },
                    "nodeContext": "!req.ignoreHttpErrors()",
                    "nodeType": "PrefixExpression",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 58,
                        "startLineNumber": 781,
                        "startColumnNumber": 20,
                        "endLineNumber": 781,
                        "endColumnNumber": 78
                    },
                    "nodeContext": "(status < 200 || status >= 400) && !req.ignoreHttpErrors()",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 13,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 175,
                        "startLineNumber": 781,
                        "startColumnNumber": 16,
                        "endLineNumber": 782,
                        "endColumnNumber": 111
                    },
                    "nodeContext": "if ((status < 200 || status >= 400) && !req.ignoreHttpErrors()) throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 25,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 4035,
                        "startLineNumber": 751,
                        "startColumnNumber": 16,
                        "endLineNumber": 818,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  conn.connect();\n  if (conn.getDoOutput())   writePost(req,conn.getOutputStream(),mimeBoundary);\n  int status=conn.getResponseCode();\n  res=new Response(previousResponse);\n  res.setupFromConnection(conn,previousResponse);\n  res.req=req;\n  if (res.hasHeader(LOCATION) && req.followRedirects()) {\n    if (status != HTTP_TEMP_REDIR) {\n      req.method(Method.GET);\n      req.data().clear();\n      req.requestBody(null);\n      req.removeHeader(CONTENT_TYPE);\n    }\n    String location=res.header(LOCATION);\n    if (location.startsWith(\"http:/\") && location.charAt(6) != '/')     location=location.substring(6);\n    URL redir=StringUtil.resolve(req.url(),location);\n    req.url(encodeUrl(redir));\n    for (    Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n      req.cookie(cookie.getKey(),cookie.getValue());\n    }\n    return execute(req,res);\n  }\n  if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())   throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n  String contentType=res.contentType();\n  if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())   throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n  if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n    if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n      req.parser(Parser.xmlParser());\n    }\n  }\n  res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n  if (conn.getContentLength() != 0 && req.method() != HEAD) {\n    res.bodyStream=null;\n    res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n    if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n      res.bodyStream=new GZIPInputStream(res.bodyStream);\n    }\n else     if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n      res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n    }\n    res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n  }\n else {\n    res.byteData=DataUtil.emptyByteBuffer();\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 383,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4187,
                        "startLineNumber": 751,
                        "startColumnNumber": 12,
                        "endLineNumber": 821,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "try {\n  conn.connect();\n  if (conn.getDoOutput())   writePost(req,conn.getOutputStream(),mimeBoundary);\n  int status=conn.getResponseCode();\n  res=new Response(previousResponse);\n  res.setupFromConnection(conn,previousResponse);\n  res.req=req;\n  if (res.hasHeader(LOCATION) && req.followRedirects()) {\n    if (status != HTTP_TEMP_REDIR) {\n      req.method(Method.GET);\n      req.data().clear();\n      req.requestBody(null);\n      req.removeHeader(CONTENT_TYPE);\n    }\n    String location=res.header(LOCATION);\n    if (location.startsWith(\"http:/\") && location.charAt(6) != '/')     location=location.substring(6);\n    URL redir=StringUtil.resolve(req.url(),location);\n    req.url(encodeUrl(redir));\n    for (    Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n      req.cookie(cookie.getKey(),cookie.getValue());\n    }\n    return execute(req,res);\n  }\n  if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())   throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n  String contentType=res.contentType();\n  if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())   throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n  if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n    if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n      req.parser(Parser.xmlParser());\n    }\n  }\n  res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n  if (conn.getContentLength() != 0 && req.method() != HEAD) {\n    res.bodyStream=null;\n    res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n    if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n      res.bodyStream=new GZIPInputStream(res.bodyStream);\n    }\n else     if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n      res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n    }\n    res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n  }\n else {\n    res.byteData=DataUtil.emptyByteBuffer();\n  }\n}\n catch (IOException e) {\n  if (res != null)   res.safeClose();\n  throw e;\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 400,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 5348,
                        "startLineNumber": 730,
                        "startColumnNumber": 102,
                        "endLineNumber": 825,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  Validate.notNull(req,\"Request must not be null\");\n  Validate.notNull(req.url(),\"URL must be specified to connect\");\n  String protocol=req.url().getProtocol();\n  if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))   throw new MalformedURLException(\"Only http & https protocols supported\");\n  final boolean methodHasBody=req.method().hasBody();\n  final boolean hasRequestBody=req.requestBody() != null;\n  if (!methodHasBody)   Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n  String mimeBoundary=null;\n  if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))   serialiseRequestUrl(req);\n else   if (methodHasBody)   mimeBoundary=setOutputContentType(req);\n  long startTime=System.nanoTime();\n  HttpURLConnection conn=createConnection(req);\n  Response res=null;\n  try {\n    conn.connect();\n    if (conn.getDoOutput())     writePost(req,conn.getOutputStream(),mimeBoundary);\n    int status=conn.getResponseCode();\n    res=new Response(previousResponse);\n    res.setupFromConnection(conn,previousResponse);\n    res.req=req;\n    if (res.hasHeader(LOCATION) && req.followRedirects()) {\n      if (status != HTTP_TEMP_REDIR) {\n        req.method(Method.GET);\n        req.data().clear();\n        req.requestBody(null);\n        req.removeHeader(CONTENT_TYPE);\n      }\n      String location=res.header(LOCATION);\n      if (location.startsWith(\"http:/\") && location.charAt(6) != '/')       location=location.substring(6);\n      URL redir=StringUtil.resolve(req.url(),location);\n      req.url(encodeUrl(redir));\n      for (      Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n        req.cookie(cookie.getKey(),cookie.getValue());\n      }\n      return execute(req,res);\n    }\n    if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())     throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n    String contentType=res.contentType();\n    if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n    if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n      if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n        req.parser(Parser.xmlParser());\n      }\n    }\n    res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n    if (conn.getContentLength() != 0 && req.method() != HEAD) {\n      res.bodyStream=null;\n      res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n      if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n        res.bodyStream=new GZIPInputStream(res.bodyStream);\n      }\n else       if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n        res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n      }\n      res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n    }\n else {\n      res.byteData=DataUtil.emptyByteBuffer();\n    }\n  }\n catch (  IOException e) {\n    if (res != null)     res.safeClose();\n    throw e;\n  }\n  res.executed=true;\n  return res;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 536,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 5442,
                        "startLineNumber": 730,
                        "startColumnNumber": 8,
                        "endLineNumber": 825,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "static Response execute(Connection.Request req,Response previousResponse) throws IOException {\n  Validate.notNull(req,\"Request must not be null\");\n  Validate.notNull(req.url(),\"URL must be specified to connect\");\n  String protocol=req.url().getProtocol();\n  if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))   throw new MalformedURLException(\"Only http & https protocols supported\");\n  final boolean methodHasBody=req.method().hasBody();\n  final boolean hasRequestBody=req.requestBody() != null;\n  if (!methodHasBody)   Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n  String mimeBoundary=null;\n  if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))   serialiseRequestUrl(req);\n else   if (methodHasBody)   mimeBoundary=setOutputContentType(req);\n  long startTime=System.nanoTime();\n  HttpURLConnection conn=createConnection(req);\n  Response res=null;\n  try {\n    conn.connect();\n    if (conn.getDoOutput())     writePost(req,conn.getOutputStream(),mimeBoundary);\n    int status=conn.getResponseCode();\n    res=new Response(previousResponse);\n    res.setupFromConnection(conn,previousResponse);\n    res.req=req;\n    if (res.hasHeader(LOCATION) && req.followRedirects()) {\n      if (status != HTTP_TEMP_REDIR) {\n        req.method(Method.GET);\n        req.data().clear();\n        req.requestBody(null);\n        req.removeHeader(CONTENT_TYPE);\n      }\n      String location=res.header(LOCATION);\n      if (location.startsWith(\"http:/\") && location.charAt(6) != '/')       location=location.substring(6);\n      URL redir=StringUtil.resolve(req.url(),location);\n      req.url(encodeUrl(redir));\n      for (      Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n        req.cookie(cookie.getKey(),cookie.getValue());\n      }\n      return execute(req,res);\n    }\n    if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())     throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n    String contentType=res.contentType();\n    if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n    if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n      if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n        req.parser(Parser.xmlParser());\n      }\n    }\n    res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n    if (conn.getContentLength() != 0 && req.method() != HEAD) {\n      res.bodyStream=null;\n      res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n      if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n        res.bodyStream=new GZIPInputStream(res.bodyStream);\n      }\n else       if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n        res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n      }\n      res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n    }\n else {\n      res.byteData=DataUtil.emptyByteBuffer();\n    }\n  }\n catch (  IOException e) {\n    if (res != null)     res.safeClose();\n    throw e;\n  }\n  res.executed=true;\n  return res;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 553,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 58,
                    "startLineNumber": 781,
                    "startColumnNumber": 20,
                    "endLineNumber": 781,
                    "endColumnNumber": 78
                },
                "nodeContext": "(status < 200 || status >= 400) && !req.ignoreHttpErrors()",
                "nodeType": "InfixExpression",
                "astNodeNumber": 13,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "org.jsoup.Connection.Request"
        },
        {
            "nodeContext": "req",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 782,
                "startColumnNumber": 89,
                "endLineNumber": 782,
                "endColumnNumber": 92
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 9,
                        "startLineNumber": 782,
                        "startColumnNumber": 89,
                        "endLineNumber": 782,
                        "endColumnNumber": 98
                    },
                    "nodeContext": "req.url()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
                    "nodePosition": {
                        "charLength": 20,
                        "startLineNumber": 782,
                        "startColumnNumber": 89,
                        "endLineNumber": 782,
                        "endColumnNumber": 109
                    },
                    "nodeContext": "req.url().toString()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
                    "nodePosition": {
                        "charLength": 80,
                        "startLineNumber": 782,
                        "startColumnNumber": 30,
                        "endLineNumber": 782,
                        "endColumnNumber": 110
                    },
                    "nodeContext": "new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString())",
                    "nodeType": "ClassInstanceCreation",
                    "astNodeNumber": 10,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 87,
                        "startLineNumber": 782,
                        "startColumnNumber": 24,
                        "endLineNumber": 782,
                        "endColumnNumber": 111
                    },
                    "nodeContext": "throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n",
                    "nodeType": "ThrowStatement",
                    "astNodeNumber": 11,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 175,
                        "startLineNumber": 781,
                        "startColumnNumber": 16,
                        "endLineNumber": 782,
                        "endColumnNumber": 111
                    },
                    "nodeContext": "if ((status < 200 || status >= 400) && !req.ignoreHttpErrors()) throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 25,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 4035,
                        "startLineNumber": 751,
                        "startColumnNumber": 16,
                        "endLineNumber": 818,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  conn.connect();\n  if (conn.getDoOutput())   writePost(req,conn.getOutputStream(),mimeBoundary);\n  int status=conn.getResponseCode();\n  res=new Response(previousResponse);\n  res.setupFromConnection(conn,previousResponse);\n  res.req=req;\n  if (res.hasHeader(LOCATION) && req.followRedirects()) {\n    if (status != HTTP_TEMP_REDIR) {\n      req.method(Method.GET);\n      req.data().clear();\n      req.requestBody(null);\n      req.removeHeader(CONTENT_TYPE);\n    }\n    String location=res.header(LOCATION);\n    if (location.startsWith(\"http:/\") && location.charAt(6) != '/')     location=location.substring(6);\n    URL redir=StringUtil.resolve(req.url(),location);\n    req.url(encodeUrl(redir));\n    for (    Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n      req.cookie(cookie.getKey(),cookie.getValue());\n    }\n    return execute(req,res);\n  }\n  if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())   throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n  String contentType=res.contentType();\n  if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())   throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n  if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n    if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n      req.parser(Parser.xmlParser());\n    }\n  }\n  res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n  if (conn.getContentLength() != 0 && req.method() != HEAD) {\n    res.bodyStream=null;\n    res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n    if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n      res.bodyStream=new GZIPInputStream(res.bodyStream);\n    }\n else     if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n      res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n    }\n    res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n  }\n else {\n    res.byteData=DataUtil.emptyByteBuffer();\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 383,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4187,
                        "startLineNumber": 751,
                        "startColumnNumber": 12,
                        "endLineNumber": 821,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "try {\n  conn.connect();\n  if (conn.getDoOutput())   writePost(req,conn.getOutputStream(),mimeBoundary);\n  int status=conn.getResponseCode();\n  res=new Response(previousResponse);\n  res.setupFromConnection(conn,previousResponse);\n  res.req=req;\n  if (res.hasHeader(LOCATION) && req.followRedirects()) {\n    if (status != HTTP_TEMP_REDIR) {\n      req.method(Method.GET);\n      req.data().clear();\n      req.requestBody(null);\n      req.removeHeader(CONTENT_TYPE);\n    }\n    String location=res.header(LOCATION);\n    if (location.startsWith(\"http:/\") && location.charAt(6) != '/')     location=location.substring(6);\n    URL redir=StringUtil.resolve(req.url(),location);\n    req.url(encodeUrl(redir));\n    for (    Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n      req.cookie(cookie.getKey(),cookie.getValue());\n    }\n    return execute(req,res);\n  }\n  if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())   throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n  String contentType=res.contentType();\n  if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())   throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n  if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n    if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n      req.parser(Parser.xmlParser());\n    }\n  }\n  res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n  if (conn.getContentLength() != 0 && req.method() != HEAD) {\n    res.bodyStream=null;\n    res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n    if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n      res.bodyStream=new GZIPInputStream(res.bodyStream);\n    }\n else     if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n      res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n    }\n    res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n  }\n else {\n    res.byteData=DataUtil.emptyByteBuffer();\n  }\n}\n catch (IOException e) {\n  if (res != null)   res.safeClose();\n  throw e;\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 400,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 5348,
                        "startLineNumber": 730,
                        "startColumnNumber": 102,
                        "endLineNumber": 825,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  Validate.notNull(req,\"Request must not be null\");\n  Validate.notNull(req.url(),\"URL must be specified to connect\");\n  String protocol=req.url().getProtocol();\n  if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))   throw new MalformedURLException(\"Only http & https protocols supported\");\n  final boolean methodHasBody=req.method().hasBody();\n  final boolean hasRequestBody=req.requestBody() != null;\n  if (!methodHasBody)   Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n  String mimeBoundary=null;\n  if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))   serialiseRequestUrl(req);\n else   if (methodHasBody)   mimeBoundary=setOutputContentType(req);\n  long startTime=System.nanoTime();\n  HttpURLConnection conn=createConnection(req);\n  Response res=null;\n  try {\n    conn.connect();\n    if (conn.getDoOutput())     writePost(req,conn.getOutputStream(),mimeBoundary);\n    int status=conn.getResponseCode();\n    res=new Response(previousResponse);\n    res.setupFromConnection(conn,previousResponse);\n    res.req=req;\n    if (res.hasHeader(LOCATION) && req.followRedirects()) {\n      if (status != HTTP_TEMP_REDIR) {\n        req.method(Method.GET);\n        req.data().clear();\n        req.requestBody(null);\n        req.removeHeader(CONTENT_TYPE);\n      }\n      String location=res.header(LOCATION);\n      if (location.startsWith(\"http:/\") && location.charAt(6) != '/')       location=location.substring(6);\n      URL redir=StringUtil.resolve(req.url(),location);\n      req.url(encodeUrl(redir));\n      for (      Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n        req.cookie(cookie.getKey(),cookie.getValue());\n      }\n      return execute(req,res);\n    }\n    if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())     throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n    String contentType=res.contentType();\n    if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n    if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n      if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n        req.parser(Parser.xmlParser());\n      }\n    }\n    res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n    if (conn.getContentLength() != 0 && req.method() != HEAD) {\n      res.bodyStream=null;\n      res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n      if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n        res.bodyStream=new GZIPInputStream(res.bodyStream);\n      }\n else       if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n        res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n      }\n      res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n    }\n else {\n      res.byteData=DataUtil.emptyByteBuffer();\n    }\n  }\n catch (  IOException e) {\n    if (res != null)     res.safeClose();\n    throw e;\n  }\n  res.executed=true;\n  return res;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 536,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 5442,
                        "startLineNumber": 730,
                        "startColumnNumber": 8,
                        "endLineNumber": 825,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "static Response execute(Connection.Request req,Response previousResponse) throws IOException {\n  Validate.notNull(req,\"Request must not be null\");\n  Validate.notNull(req.url(),\"URL must be specified to connect\");\n  String protocol=req.url().getProtocol();\n  if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))   throw new MalformedURLException(\"Only http & https protocols supported\");\n  final boolean methodHasBody=req.method().hasBody();\n  final boolean hasRequestBody=req.requestBody() != null;\n  if (!methodHasBody)   Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n  String mimeBoundary=null;\n  if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))   serialiseRequestUrl(req);\n else   if (methodHasBody)   mimeBoundary=setOutputContentType(req);\n  long startTime=System.nanoTime();\n  HttpURLConnection conn=createConnection(req);\n  Response res=null;\n  try {\n    conn.connect();\n    if (conn.getDoOutput())     writePost(req,conn.getOutputStream(),mimeBoundary);\n    int status=conn.getResponseCode();\n    res=new Response(previousResponse);\n    res.setupFromConnection(conn,previousResponse);\n    res.req=req;\n    if (res.hasHeader(LOCATION) && req.followRedirects()) {\n      if (status != HTTP_TEMP_REDIR) {\n        req.method(Method.GET);\n        req.data().clear();\n        req.requestBody(null);\n        req.removeHeader(CONTENT_TYPE);\n      }\n      String location=res.header(LOCATION);\n      if (location.startsWith(\"http:/\") && location.charAt(6) != '/')       location=location.substring(6);\n      URL redir=StringUtil.resolve(req.url(),location);\n      req.url(encodeUrl(redir));\n      for (      Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n        req.cookie(cookie.getKey(),cookie.getValue());\n      }\n      return execute(req,res);\n    }\n    if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())     throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n    String contentType=res.contentType();\n    if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n    if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n      if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n        req.parser(Parser.xmlParser());\n      }\n    }\n    res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n    if (conn.getContentLength() != 0 && req.method() != HEAD) {\n      res.bodyStream=null;\n      res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n      if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n        res.bodyStream=new GZIPInputStream(res.bodyStream);\n      }\n else       if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n        res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n      }\n      res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n    }\n else {\n      res.byteData=DataUtil.emptyByteBuffer();\n    }\n  }\n catch (  IOException e) {\n    if (res != null)     res.safeClose();\n    throw e;\n  }\n  res.executed=true;\n  return res;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 553,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                "nodePosition": {
                    "charLength": 87,
                    "startLineNumber": 782,
                    "startColumnNumber": 24,
                    "endLineNumber": 782,
                    "endColumnNumber": 111
                },
                "nodeContext": "throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n",
                "nodeType": "ThrowStatement",
                "astNodeNumber": 11,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "org.jsoup.Connection.Request"
        },
        {
            "nodeContext": "req",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 787,
                "startColumnNumber": 28,
                "endLineNumber": 787,
                "endColumnNumber": 31
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
                    "nodePosition": {
                        "charLength": 23,
                        "startLineNumber": 787,
                        "startColumnNumber": 28,
                        "endLineNumber": 787,
                        "endColumnNumber": 51
                    },
                    "nodeContext": "req.ignoreContentType()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 24,
                        "startLineNumber": 787,
                        "startColumnNumber": 27,
                        "endLineNumber": 787,
                        "endColumnNumber": 51
                    },
                    "nodeContext": "!req.ignoreContentType()",
                    "nodeType": "PrefixExpression",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 71,
                        "startLineNumber": 786,
                        "startColumnNumber": 20,
                        "endLineNumber": 787,
                        "endColumnNumber": 51
                    },
                    "nodeContext": "contentType != null && !req.ignoreContentType()",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 8,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 131,
                        "startLineNumber": 786,
                        "startColumnNumber": 20,
                        "endLineNumber": 788,
                        "endColumnNumber": 59
                    },
                    "nodeContext": "contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\")",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 14,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 208,
                        "startLineNumber": 786,
                        "startColumnNumber": 20,
                        "endLineNumber": 789,
                        "endColumnNumber": 76
                    },
                    "nodeContext": "contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches()",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 22,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 442,
                        "startLineNumber": 786,
                        "startColumnNumber": 16,
                        "endLineNumber": 792,
                        "endColumnNumber": 63
                    },
                    "nodeContext": "if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches()) throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 34,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 4035,
                        "startLineNumber": 751,
                        "startColumnNumber": 16,
                        "endLineNumber": 818,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  conn.connect();\n  if (conn.getDoOutput())   writePost(req,conn.getOutputStream(),mimeBoundary);\n  int status=conn.getResponseCode();\n  res=new Response(previousResponse);\n  res.setupFromConnection(conn,previousResponse);\n  res.req=req;\n  if (res.hasHeader(LOCATION) && req.followRedirects()) {\n    if (status != HTTP_TEMP_REDIR) {\n      req.method(Method.GET);\n      req.data().clear();\n      req.requestBody(null);\n      req.removeHeader(CONTENT_TYPE);\n    }\n    String location=res.header(LOCATION);\n    if (location.startsWith(\"http:/\") && location.charAt(6) != '/')     location=location.substring(6);\n    URL redir=StringUtil.resolve(req.url(),location);\n    req.url(encodeUrl(redir));\n    for (    Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n      req.cookie(cookie.getKey(),cookie.getValue());\n    }\n    return execute(req,res);\n  }\n  if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())   throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n  String contentType=res.contentType();\n  if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())   throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n  if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n    if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n      req.parser(Parser.xmlParser());\n    }\n  }\n  res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n  if (conn.getContentLength() != 0 && req.method() != HEAD) {\n    res.bodyStream=null;\n    res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n    if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n      res.bodyStream=new GZIPInputStream(res.bodyStream);\n    }\n else     if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n      res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n    }\n    res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n  }\n else {\n    res.byteData=DataUtil.emptyByteBuffer();\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 383,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4187,
                        "startLineNumber": 751,
                        "startColumnNumber": 12,
                        "endLineNumber": 821,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "try {\n  conn.connect();\n  if (conn.getDoOutput())   writePost(req,conn.getOutputStream(),mimeBoundary);\n  int status=conn.getResponseCode();\n  res=new Response(previousResponse);\n  res.setupFromConnection(conn,previousResponse);\n  res.req=req;\n  if (res.hasHeader(LOCATION) && req.followRedirects()) {\n    if (status != HTTP_TEMP_REDIR) {\n      req.method(Method.GET);\n      req.data().clear();\n      req.requestBody(null);\n      req.removeHeader(CONTENT_TYPE);\n    }\n    String location=res.header(LOCATION);\n    if (location.startsWith(\"http:/\") && location.charAt(6) != '/')     location=location.substring(6);\n    URL redir=StringUtil.resolve(req.url(),location);\n    req.url(encodeUrl(redir));\n    for (    Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n      req.cookie(cookie.getKey(),cookie.getValue());\n    }\n    return execute(req,res);\n  }\n  if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())   throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n  String contentType=res.contentType();\n  if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())   throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n  if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n    if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n      req.parser(Parser.xmlParser());\n    }\n  }\n  res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n  if (conn.getContentLength() != 0 && req.method() != HEAD) {\n    res.bodyStream=null;\n    res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n    if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n      res.bodyStream=new GZIPInputStream(res.bodyStream);\n    }\n else     if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n      res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n    }\n    res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n  }\n else {\n    res.byteData=DataUtil.emptyByteBuffer();\n  }\n}\n catch (IOException e) {\n  if (res != null)   res.safeClose();\n  throw e;\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 400,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 5348,
                        "startLineNumber": 730,
                        "startColumnNumber": 102,
                        "endLineNumber": 825,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  Validate.notNull(req,\"Request must not be null\");\n  Validate.notNull(req.url(),\"URL must be specified to connect\");\n  String protocol=req.url().getProtocol();\n  if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))   throw new MalformedURLException(\"Only http & https protocols supported\");\n  final boolean methodHasBody=req.method().hasBody();\n  final boolean hasRequestBody=req.requestBody() != null;\n  if (!methodHasBody)   Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n  String mimeBoundary=null;\n  if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))   serialiseRequestUrl(req);\n else   if (methodHasBody)   mimeBoundary=setOutputContentType(req);\n  long startTime=System.nanoTime();\n  HttpURLConnection conn=createConnection(req);\n  Response res=null;\n  try {\n    conn.connect();\n    if (conn.getDoOutput())     writePost(req,conn.getOutputStream(),mimeBoundary);\n    int status=conn.getResponseCode();\n    res=new Response(previousResponse);\n    res.setupFromConnection(conn,previousResponse);\n    res.req=req;\n    if (res.hasHeader(LOCATION) && req.followRedirects()) {\n      if (status != HTTP_TEMP_REDIR) {\n        req.method(Method.GET);\n        req.data().clear();\n        req.requestBody(null);\n        req.removeHeader(CONTENT_TYPE);\n      }\n      String location=res.header(LOCATION);\n      if (location.startsWith(\"http:/\") && location.charAt(6) != '/')       location=location.substring(6);\n      URL redir=StringUtil.resolve(req.url(),location);\n      req.url(encodeUrl(redir));\n      for (      Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n        req.cookie(cookie.getKey(),cookie.getValue());\n      }\n      return execute(req,res);\n    }\n    if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())     throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n    String contentType=res.contentType();\n    if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n    if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n      if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n        req.parser(Parser.xmlParser());\n      }\n    }\n    res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n    if (conn.getContentLength() != 0 && req.method() != HEAD) {\n      res.bodyStream=null;\n      res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n      if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n        res.bodyStream=new GZIPInputStream(res.bodyStream);\n      }\n else       if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n        res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n      }\n      res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n    }\n else {\n      res.byteData=DataUtil.emptyByteBuffer();\n    }\n  }\n catch (  IOException e) {\n    if (res != null)     res.safeClose();\n    throw e;\n  }\n  res.executed=true;\n  return res;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 536,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 5442,
                        "startLineNumber": 730,
                        "startColumnNumber": 8,
                        "endLineNumber": 825,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "static Response execute(Connection.Request req,Response previousResponse) throws IOException {\n  Validate.notNull(req,\"Request must not be null\");\n  Validate.notNull(req.url(),\"URL must be specified to connect\");\n  String protocol=req.url().getProtocol();\n  if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))   throw new MalformedURLException(\"Only http & https protocols supported\");\n  final boolean methodHasBody=req.method().hasBody();\n  final boolean hasRequestBody=req.requestBody() != null;\n  if (!methodHasBody)   Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n  String mimeBoundary=null;\n  if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))   serialiseRequestUrl(req);\n else   if (methodHasBody)   mimeBoundary=setOutputContentType(req);\n  long startTime=System.nanoTime();\n  HttpURLConnection conn=createConnection(req);\n  Response res=null;\n  try {\n    conn.connect();\n    if (conn.getDoOutput())     writePost(req,conn.getOutputStream(),mimeBoundary);\n    int status=conn.getResponseCode();\n    res=new Response(previousResponse);\n    res.setupFromConnection(conn,previousResponse);\n    res.req=req;\n    if (res.hasHeader(LOCATION) && req.followRedirects()) {\n      if (status != HTTP_TEMP_REDIR) {\n        req.method(Method.GET);\n        req.data().clear();\n        req.requestBody(null);\n        req.removeHeader(CONTENT_TYPE);\n      }\n      String location=res.header(LOCATION);\n      if (location.startsWith(\"http:/\") && location.charAt(6) != '/')       location=location.substring(6);\n      URL redir=StringUtil.resolve(req.url(),location);\n      req.url(encodeUrl(redir));\n      for (      Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n        req.cookie(cookie.getKey(),cookie.getValue());\n      }\n      return execute(req,res);\n    }\n    if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())     throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n    String contentType=res.contentType();\n    if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n    if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n      if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n        req.parser(Parser.xmlParser());\n      }\n    }\n    res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n    if (conn.getContentLength() != 0 && req.method() != HEAD) {\n      res.bodyStream=null;\n      res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n      if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n        res.bodyStream=new GZIPInputStream(res.bodyStream);\n      }\n else       if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n        res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n      }\n      res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n    }\n else {\n      res.byteData=DataUtil.emptyByteBuffer();\n    }\n  }\n catch (  IOException e) {\n    if (res != null)     res.safeClose();\n    throw e;\n  }\n  res.executed=true;\n  return res;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 553,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                "nodePosition": {
                    "charLength": 24,
                    "startLineNumber": 787,
                    "startColumnNumber": 27,
                    "endLineNumber": 787,
                    "endColumnNumber": 51
                },
                "nodeContext": "!req.ignoreContentType()",
                "nodeType": "PrefixExpression",
                "astNodeNumber": 4,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "org.jsoup.Connection.Request"
        },
        {
            "nodeContext": "req",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 792,
                "startColumnNumber": 41,
                "endLineNumber": 792,
                "endColumnNumber": 44
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 9,
                        "startLineNumber": 792,
                        "startColumnNumber": 41,
                        "endLineNumber": 792,
                        "endColumnNumber": 50
                    },
                    "nodeContext": "req.url()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
                    "nodePosition": {
                        "charLength": 20,
                        "startLineNumber": 792,
                        "startColumnNumber": 41,
                        "endLineNumber": 792,
                        "endColumnNumber": 61
                    },
                    "nodeContext": "req.url().toString()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
                    "nodePosition": {
                        "charLength": 176,
                        "startLineNumber": 791,
                        "startColumnNumber": 26,
                        "endLineNumber": 792,
                        "endColumnNumber": 62
                    },
                    "nodeContext": "new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString())",
                    "nodeType": "ClassInstanceCreation",
                    "astNodeNumber": 10,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 183,
                        "startLineNumber": 791,
                        "startColumnNumber": 20,
                        "endLineNumber": 792,
                        "endColumnNumber": 63
                    },
                    "nodeContext": "throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n",
                    "nodeType": "ThrowStatement",
                    "astNodeNumber": 11,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 442,
                        "startLineNumber": 786,
                        "startColumnNumber": 16,
                        "endLineNumber": 792,
                        "endColumnNumber": 63
                    },
                    "nodeContext": "if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches()) throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 34,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 4035,
                        "startLineNumber": 751,
                        "startColumnNumber": 16,
                        "endLineNumber": 818,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  conn.connect();\n  if (conn.getDoOutput())   writePost(req,conn.getOutputStream(),mimeBoundary);\n  int status=conn.getResponseCode();\n  res=new Response(previousResponse);\n  res.setupFromConnection(conn,previousResponse);\n  res.req=req;\n  if (res.hasHeader(LOCATION) && req.followRedirects()) {\n    if (status != HTTP_TEMP_REDIR) {\n      req.method(Method.GET);\n      req.data().clear();\n      req.requestBody(null);\n      req.removeHeader(CONTENT_TYPE);\n    }\n    String location=res.header(LOCATION);\n    if (location.startsWith(\"http:/\") && location.charAt(6) != '/')     location=location.substring(6);\n    URL redir=StringUtil.resolve(req.url(),location);\n    req.url(encodeUrl(redir));\n    for (    Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n      req.cookie(cookie.getKey(),cookie.getValue());\n    }\n    return execute(req,res);\n  }\n  if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())   throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n  String contentType=res.contentType();\n  if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())   throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n  if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n    if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n      req.parser(Parser.xmlParser());\n    }\n  }\n  res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n  if (conn.getContentLength() != 0 && req.method() != HEAD) {\n    res.bodyStream=null;\n    res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n    if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n      res.bodyStream=new GZIPInputStream(res.bodyStream);\n    }\n else     if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n      res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n    }\n    res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n  }\n else {\n    res.byteData=DataUtil.emptyByteBuffer();\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 383,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4187,
                        "startLineNumber": 751,
                        "startColumnNumber": 12,
                        "endLineNumber": 821,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "try {\n  conn.connect();\n  if (conn.getDoOutput())   writePost(req,conn.getOutputStream(),mimeBoundary);\n  int status=conn.getResponseCode();\n  res=new Response(previousResponse);\n  res.setupFromConnection(conn,previousResponse);\n  res.req=req;\n  if (res.hasHeader(LOCATION) && req.followRedirects()) {\n    if (status != HTTP_TEMP_REDIR) {\n      req.method(Method.GET);\n      req.data().clear();\n      req.requestBody(null);\n      req.removeHeader(CONTENT_TYPE);\n    }\n    String location=res.header(LOCATION);\n    if (location.startsWith(\"http:/\") && location.charAt(6) != '/')     location=location.substring(6);\n    URL redir=StringUtil.resolve(req.url(),location);\n    req.url(encodeUrl(redir));\n    for (    Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n      req.cookie(cookie.getKey(),cookie.getValue());\n    }\n    return execute(req,res);\n  }\n  if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())   throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n  String contentType=res.contentType();\n  if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())   throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n  if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n    if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n      req.parser(Parser.xmlParser());\n    }\n  }\n  res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n  if (conn.getContentLength() != 0 && req.method() != HEAD) {\n    res.bodyStream=null;\n    res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n    if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n      res.bodyStream=new GZIPInputStream(res.bodyStream);\n    }\n else     if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n      res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n    }\n    res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n  }\n else {\n    res.byteData=DataUtil.emptyByteBuffer();\n  }\n}\n catch (IOException e) {\n  if (res != null)   res.safeClose();\n  throw e;\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 400,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 5348,
                        "startLineNumber": 730,
                        "startColumnNumber": 102,
                        "endLineNumber": 825,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  Validate.notNull(req,\"Request must not be null\");\n  Validate.notNull(req.url(),\"URL must be specified to connect\");\n  String protocol=req.url().getProtocol();\n  if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))   throw new MalformedURLException(\"Only http & https protocols supported\");\n  final boolean methodHasBody=req.method().hasBody();\n  final boolean hasRequestBody=req.requestBody() != null;\n  if (!methodHasBody)   Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n  String mimeBoundary=null;\n  if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))   serialiseRequestUrl(req);\n else   if (methodHasBody)   mimeBoundary=setOutputContentType(req);\n  long startTime=System.nanoTime();\n  HttpURLConnection conn=createConnection(req);\n  Response res=null;\n  try {\n    conn.connect();\n    if (conn.getDoOutput())     writePost(req,conn.getOutputStream(),mimeBoundary);\n    int status=conn.getResponseCode();\n    res=new Response(previousResponse);\n    res.setupFromConnection(conn,previousResponse);\n    res.req=req;\n    if (res.hasHeader(LOCATION) && req.followRedirects()) {\n      if (status != HTTP_TEMP_REDIR) {\n        req.method(Method.GET);\n        req.data().clear();\n        req.requestBody(null);\n        req.removeHeader(CONTENT_TYPE);\n      }\n      String location=res.header(LOCATION);\n      if (location.startsWith(\"http:/\") && location.charAt(6) != '/')       location=location.substring(6);\n      URL redir=StringUtil.resolve(req.url(),location);\n      req.url(encodeUrl(redir));\n      for (      Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n        req.cookie(cookie.getKey(),cookie.getValue());\n      }\n      return execute(req,res);\n    }\n    if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())     throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n    String contentType=res.contentType();\n    if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n    if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n      if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n        req.parser(Parser.xmlParser());\n      }\n    }\n    res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n    if (conn.getContentLength() != 0 && req.method() != HEAD) {\n      res.bodyStream=null;\n      res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n      if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n        res.bodyStream=new GZIPInputStream(res.bodyStream);\n      }\n else       if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n        res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n      }\n      res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n    }\n else {\n      res.byteData=DataUtil.emptyByteBuffer();\n    }\n  }\n catch (  IOException e) {\n    if (res != null)     res.safeClose();\n    throw e;\n  }\n  res.executed=true;\n  return res;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 536,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 5442,
                        "startLineNumber": 730,
                        "startColumnNumber": 8,
                        "endLineNumber": 825,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "static Response execute(Connection.Request req,Response previousResponse) throws IOException {\n  Validate.notNull(req,\"Request must not be null\");\n  Validate.notNull(req.url(),\"URL must be specified to connect\");\n  String protocol=req.url().getProtocol();\n  if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))   throw new MalformedURLException(\"Only http & https protocols supported\");\n  final boolean methodHasBody=req.method().hasBody();\n  final boolean hasRequestBody=req.requestBody() != null;\n  if (!methodHasBody)   Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n  String mimeBoundary=null;\n  if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))   serialiseRequestUrl(req);\n else   if (methodHasBody)   mimeBoundary=setOutputContentType(req);\n  long startTime=System.nanoTime();\n  HttpURLConnection conn=createConnection(req);\n  Response res=null;\n  try {\n    conn.connect();\n    if (conn.getDoOutput())     writePost(req,conn.getOutputStream(),mimeBoundary);\n    int status=conn.getResponseCode();\n    res=new Response(previousResponse);\n    res.setupFromConnection(conn,previousResponse);\n    res.req=req;\n    if (res.hasHeader(LOCATION) && req.followRedirects()) {\n      if (status != HTTP_TEMP_REDIR) {\n        req.method(Method.GET);\n        req.data().clear();\n        req.requestBody(null);\n        req.removeHeader(CONTENT_TYPE);\n      }\n      String location=res.header(LOCATION);\n      if (location.startsWith(\"http:/\") && location.charAt(6) != '/')       location=location.substring(6);\n      URL redir=StringUtil.resolve(req.url(),location);\n      req.url(encodeUrl(redir));\n      for (      Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n        req.cookie(cookie.getKey(),cookie.getValue());\n      }\n      return execute(req,res);\n    }\n    if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())     throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n    String contentType=res.contentType();\n    if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n    if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n      if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n        req.parser(Parser.xmlParser());\n      }\n    }\n    res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n    if (conn.getContentLength() != 0 && req.method() != HEAD) {\n      res.bodyStream=null;\n      res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n      if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n        res.bodyStream=new GZIPInputStream(res.bodyStream);\n      }\n else       if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n        res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n      }\n      res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n    }\n else {\n      res.byteData=DataUtil.emptyByteBuffer();\n    }\n  }\n catch (  IOException e) {\n    if (res != null)     res.safeClose();\n    throw e;\n  }\n  res.executed=true;\n  return res;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 553,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
                "nodePosition": {
                    "charLength": 20,
                    "startLineNumber": 792,
                    "startColumnNumber": 41,
                    "endLineNumber": 792,
                    "endColumnNumber": 61
                },
                "nodeContext": "req.url().toString()",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 5,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "org.jsoup.Connection.Request"
        },
        {
            "nodeContext": "req",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 797,
                "startColumnNumber": 24,
                "endLineNumber": 797,
                "endColumnNumber": 27
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 37,
                        "startLineNumber": 797,
                        "startColumnNumber": 24,
                        "endLineNumber": 797,
                        "endColumnNumber": 61
                    },
                    "nodeContext": "req instanceof HttpConnection.Request",
                    "nodeType": "InstanceofExpression",
                    "astNodeNumber": 6,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 71,
                        "startLineNumber": 797,
                        "startColumnNumber": 24,
                        "endLineNumber": 797,
                        "endColumnNumber": 95
                    },
                    "nodeContext": "req instanceof HttpConnection.Request && !((Request)req).parserDefined",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 15,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 156,
                        "startLineNumber": 797,
                        "startColumnNumber": 20,
                        "endLineNumber": 799,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n  req.parser(Parser.xmlParser());\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 24,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 302,
                        "startLineNumber": 795,
                        "startColumnNumber": 93,
                        "endLineNumber": 800,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n    req.parser(Parser.xmlParser());\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 25,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 379,
                        "startLineNumber": 795,
                        "startColumnNumber": 16,
                        "endLineNumber": 800,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n  if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n    req.parser(Parser.xmlParser());\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 36,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 4035,
                        "startLineNumber": 751,
                        "startColumnNumber": 16,
                        "endLineNumber": 818,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  conn.connect();\n  if (conn.getDoOutput())   writePost(req,conn.getOutputStream(),mimeBoundary);\n  int status=conn.getResponseCode();\n  res=new Response(previousResponse);\n  res.setupFromConnection(conn,previousResponse);\n  res.req=req;\n  if (res.hasHeader(LOCATION) && req.followRedirects()) {\n    if (status != HTTP_TEMP_REDIR) {\n      req.method(Method.GET);\n      req.data().clear();\n      req.requestBody(null);\n      req.removeHeader(CONTENT_TYPE);\n    }\n    String location=res.header(LOCATION);\n    if (location.startsWith(\"http:/\") && location.charAt(6) != '/')     location=location.substring(6);\n    URL redir=StringUtil.resolve(req.url(),location);\n    req.url(encodeUrl(redir));\n    for (    Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n      req.cookie(cookie.getKey(),cookie.getValue());\n    }\n    return execute(req,res);\n  }\n  if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())   throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n  String contentType=res.contentType();\n  if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())   throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n  if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n    if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n      req.parser(Parser.xmlParser());\n    }\n  }\n  res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n  if (conn.getContentLength() != 0 && req.method() != HEAD) {\n    res.bodyStream=null;\n    res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n    if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n      res.bodyStream=new GZIPInputStream(res.bodyStream);\n    }\n else     if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n      res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n    }\n    res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n  }\n else {\n    res.byteData=DataUtil.emptyByteBuffer();\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 383,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4187,
                        "startLineNumber": 751,
                        "startColumnNumber": 12,
                        "endLineNumber": 821,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "try {\n  conn.connect();\n  if (conn.getDoOutput())   writePost(req,conn.getOutputStream(),mimeBoundary);\n  int status=conn.getResponseCode();\n  res=new Response(previousResponse);\n  res.setupFromConnection(conn,previousResponse);\n  res.req=req;\n  if (res.hasHeader(LOCATION) && req.followRedirects()) {\n    if (status != HTTP_TEMP_REDIR) {\n      req.method(Method.GET);\n      req.data().clear();\n      req.requestBody(null);\n      req.removeHeader(CONTENT_TYPE);\n    }\n    String location=res.header(LOCATION);\n    if (location.startsWith(\"http:/\") && location.charAt(6) != '/')     location=location.substring(6);\n    URL redir=StringUtil.resolve(req.url(),location);\n    req.url(encodeUrl(redir));\n    for (    Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n      req.cookie(cookie.getKey(),cookie.getValue());\n    }\n    return execute(req,res);\n  }\n  if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())   throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n  String contentType=res.contentType();\n  if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())   throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n  if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n    if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n      req.parser(Parser.xmlParser());\n    }\n  }\n  res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n  if (conn.getContentLength() != 0 && req.method() != HEAD) {\n    res.bodyStream=null;\n    res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n    if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n      res.bodyStream=new GZIPInputStream(res.bodyStream);\n    }\n else     if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n      res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n    }\n    res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n  }\n else {\n    res.byteData=DataUtil.emptyByteBuffer();\n  }\n}\n catch (IOException e) {\n  if (res != null)   res.safeClose();\n  throw e;\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 400,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 5348,
                        "startLineNumber": 730,
                        "startColumnNumber": 102,
                        "endLineNumber": 825,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  Validate.notNull(req,\"Request must not be null\");\n  Validate.notNull(req.url(),\"URL must be specified to connect\");\n  String protocol=req.url().getProtocol();\n  if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))   throw new MalformedURLException(\"Only http & https protocols supported\");\n  final boolean methodHasBody=req.method().hasBody();\n  final boolean hasRequestBody=req.requestBody() != null;\n  if (!methodHasBody)   Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n  String mimeBoundary=null;\n  if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))   serialiseRequestUrl(req);\n else   if (methodHasBody)   mimeBoundary=setOutputContentType(req);\n  long startTime=System.nanoTime();\n  HttpURLConnection conn=createConnection(req);\n  Response res=null;\n  try {\n    conn.connect();\n    if (conn.getDoOutput())     writePost(req,conn.getOutputStream(),mimeBoundary);\n    int status=conn.getResponseCode();\n    res=new Response(previousResponse);\n    res.setupFromConnection(conn,previousResponse);\n    res.req=req;\n    if (res.hasHeader(LOCATION) && req.followRedirects()) {\n      if (status != HTTP_TEMP_REDIR) {\n        req.method(Method.GET);\n        req.data().clear();\n        req.requestBody(null);\n        req.removeHeader(CONTENT_TYPE);\n      }\n      String location=res.header(LOCATION);\n      if (location.startsWith(\"http:/\") && location.charAt(6) != '/')       location=location.substring(6);\n      URL redir=StringUtil.resolve(req.url(),location);\n      req.url(encodeUrl(redir));\n      for (      Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n        req.cookie(cookie.getKey(),cookie.getValue());\n      }\n      return execute(req,res);\n    }\n    if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())     throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n    String contentType=res.contentType();\n    if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n    if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n      if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n        req.parser(Parser.xmlParser());\n      }\n    }\n    res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n    if (conn.getContentLength() != 0 && req.method() != HEAD) {\n      res.bodyStream=null;\n      res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n      if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n        res.bodyStream=new GZIPInputStream(res.bodyStream);\n      }\n else       if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n        res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n      }\n      res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n    }\n else {\n      res.byteData=DataUtil.emptyByteBuffer();\n    }\n  }\n catch (  IOException e) {\n    if (res != null)     res.safeClose();\n    throw e;\n  }\n  res.executed=true;\n  return res;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 536,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 5442,
                        "startLineNumber": 730,
                        "startColumnNumber": 8,
                        "endLineNumber": 825,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "static Response execute(Connection.Request req,Response previousResponse) throws IOException {\n  Validate.notNull(req,\"Request must not be null\");\n  Validate.notNull(req.url(),\"URL must be specified to connect\");\n  String protocol=req.url().getProtocol();\n  if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))   throw new MalformedURLException(\"Only http & https protocols supported\");\n  final boolean methodHasBody=req.method().hasBody();\n  final boolean hasRequestBody=req.requestBody() != null;\n  if (!methodHasBody)   Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n  String mimeBoundary=null;\n  if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))   serialiseRequestUrl(req);\n else   if (methodHasBody)   mimeBoundary=setOutputContentType(req);\n  long startTime=System.nanoTime();\n  HttpURLConnection conn=createConnection(req);\n  Response res=null;\n  try {\n    conn.connect();\n    if (conn.getDoOutput())     writePost(req,conn.getOutputStream(),mimeBoundary);\n    int status=conn.getResponseCode();\n    res=new Response(previousResponse);\n    res.setupFromConnection(conn,previousResponse);\n    res.req=req;\n    if (res.hasHeader(LOCATION) && req.followRedirects()) {\n      if (status != HTTP_TEMP_REDIR) {\n        req.method(Method.GET);\n        req.data().clear();\n        req.requestBody(null);\n        req.removeHeader(CONTENT_TYPE);\n      }\n      String location=res.header(LOCATION);\n      if (location.startsWith(\"http:/\") && location.charAt(6) != '/')       location=location.substring(6);\n      URL redir=StringUtil.resolve(req.url(),location);\n      req.url(encodeUrl(redir));\n      for (      Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n        req.cookie(cookie.getKey(),cookie.getValue());\n      }\n      return execute(req,res);\n    }\n    if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())     throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n    String contentType=res.contentType();\n    if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n    if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n      if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n        req.parser(Parser.xmlParser());\n      }\n    }\n    res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n    if (conn.getContentLength() != 0 && req.method() != HEAD) {\n      res.bodyStream=null;\n      res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n      if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n        res.bodyStream=new GZIPInputStream(res.bodyStream);\n      }\n else       if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n        res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n      }\n      res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n    }\n else {\n      res.byteData=DataUtil.emptyByteBuffer();\n    }\n  }\n catch (  IOException e) {\n    if (res != null)     res.safeClose();\n    throw e;\n  }\n  res.executed=true;\n  return res;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 553,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 71,
                    "startLineNumber": 797,
                    "startColumnNumber": 24,
                    "endLineNumber": 797,
                    "endColumnNumber": 95
                },
                "nodeContext": "req instanceof HttpConnection.Request && !((Request)req).parserDefined",
                "nodeType": "InfixExpression",
                "astNodeNumber": 15,
                "astHeight": 7
            },
            "tokenLength": 1,
            "type": "org.jsoup.Connection.Request"
        },
        {
            "nodeContext": "req",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 797,
                "startColumnNumber": 77,
                "endLineNumber": 797,
                "endColumnNumber": 80
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
                    "nodePosition": {
                        "charLength": 13,
                        "startLineNumber": 797,
                        "startColumnNumber": 67,
                        "endLineNumber": 797,
                        "endColumnNumber": 80
                    },
                    "nodeContext": "(Request)req",
                    "nodeType": "CastExpression",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.FieldAccess,expression]",
                    "nodePosition": {
                        "charLength": 15,
                        "startLineNumber": 797,
                        "startColumnNumber": 66,
                        "endLineNumber": 797,
                        "endColumnNumber": 81
                    },
                    "nodeContext": "((Request)req)",
                    "nodeType": "ParenthesizedExpression",
                    "astNodeNumber": 5,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
                    "nodePosition": {
                        "charLength": 29,
                        "startLineNumber": 797,
                        "startColumnNumber": 66,
                        "endLineNumber": 797,
                        "endColumnNumber": 95
                    },
                    "nodeContext": "((Request)req).parserDefined",
                    "nodeType": "FieldAccess",
                    "astNodeNumber": 7,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 30,
                        "startLineNumber": 797,
                        "startColumnNumber": 65,
                        "endLineNumber": 797,
                        "endColumnNumber": 95
                    },
                    "nodeContext": "!((Request)req).parserDefined",
                    "nodeType": "PrefixExpression",
                    "astNodeNumber": 8,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 71,
                        "startLineNumber": 797,
                        "startColumnNumber": 24,
                        "endLineNumber": 797,
                        "endColumnNumber": 95
                    },
                    "nodeContext": "req instanceof HttpConnection.Request && !((Request)req).parserDefined",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 15,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 156,
                        "startLineNumber": 797,
                        "startColumnNumber": 20,
                        "endLineNumber": 799,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n  req.parser(Parser.xmlParser());\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 24,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 302,
                        "startLineNumber": 795,
                        "startColumnNumber": 93,
                        "endLineNumber": 800,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n    req.parser(Parser.xmlParser());\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 25,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 379,
                        "startLineNumber": 795,
                        "startColumnNumber": 16,
                        "endLineNumber": 800,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n  if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n    req.parser(Parser.xmlParser());\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 36,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 4035,
                        "startLineNumber": 751,
                        "startColumnNumber": 16,
                        "endLineNumber": 818,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  conn.connect();\n  if (conn.getDoOutput())   writePost(req,conn.getOutputStream(),mimeBoundary);\n  int status=conn.getResponseCode();\n  res=new Response(previousResponse);\n  res.setupFromConnection(conn,previousResponse);\n  res.req=req;\n  if (res.hasHeader(LOCATION) && req.followRedirects()) {\n    if (status != HTTP_TEMP_REDIR) {\n      req.method(Method.GET);\n      req.data().clear();\n      req.requestBody(null);\n      req.removeHeader(CONTENT_TYPE);\n    }\n    String location=res.header(LOCATION);\n    if (location.startsWith(\"http:/\") && location.charAt(6) != '/')     location=location.substring(6);\n    URL redir=StringUtil.resolve(req.url(),location);\n    req.url(encodeUrl(redir));\n    for (    Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n      req.cookie(cookie.getKey(),cookie.getValue());\n    }\n    return execute(req,res);\n  }\n  if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())   throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n  String contentType=res.contentType();\n  if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())   throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n  if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n    if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n      req.parser(Parser.xmlParser());\n    }\n  }\n  res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n  if (conn.getContentLength() != 0 && req.method() != HEAD) {\n    res.bodyStream=null;\n    res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n    if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n      res.bodyStream=new GZIPInputStream(res.bodyStream);\n    }\n else     if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n      res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n    }\n    res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n  }\n else {\n    res.byteData=DataUtil.emptyByteBuffer();\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 383,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4187,
                        "startLineNumber": 751,
                        "startColumnNumber": 12,
                        "endLineNumber": 821,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "try {\n  conn.connect();\n  if (conn.getDoOutput())   writePost(req,conn.getOutputStream(),mimeBoundary);\n  int status=conn.getResponseCode();\n  res=new Response(previousResponse);\n  res.setupFromConnection(conn,previousResponse);\n  res.req=req;\n  if (res.hasHeader(LOCATION) && req.followRedirects()) {\n    if (status != HTTP_TEMP_REDIR) {\n      req.method(Method.GET);\n      req.data().clear();\n      req.requestBody(null);\n      req.removeHeader(CONTENT_TYPE);\n    }\n    String location=res.header(LOCATION);\n    if (location.startsWith(\"http:/\") && location.charAt(6) != '/')     location=location.substring(6);\n    URL redir=StringUtil.resolve(req.url(),location);\n    req.url(encodeUrl(redir));\n    for (    Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n      req.cookie(cookie.getKey(),cookie.getValue());\n    }\n    return execute(req,res);\n  }\n  if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())   throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n  String contentType=res.contentType();\n  if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())   throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n  if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n    if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n      req.parser(Parser.xmlParser());\n    }\n  }\n  res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n  if (conn.getContentLength() != 0 && req.method() != HEAD) {\n    res.bodyStream=null;\n    res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n    if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n      res.bodyStream=new GZIPInputStream(res.bodyStream);\n    }\n else     if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n      res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n    }\n    res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n  }\n else {\n    res.byteData=DataUtil.emptyByteBuffer();\n  }\n}\n catch (IOException e) {\n  if (res != null)   res.safeClose();\n  throw e;\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 400,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 5348,
                        "startLineNumber": 730,
                        "startColumnNumber": 102,
                        "endLineNumber": 825,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  Validate.notNull(req,\"Request must not be null\");\n  Validate.notNull(req.url(),\"URL must be specified to connect\");\n  String protocol=req.url().getProtocol();\n  if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))   throw new MalformedURLException(\"Only http & https protocols supported\");\n  final boolean methodHasBody=req.method().hasBody();\n  final boolean hasRequestBody=req.requestBody() != null;\n  if (!methodHasBody)   Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n  String mimeBoundary=null;\n  if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))   serialiseRequestUrl(req);\n else   if (methodHasBody)   mimeBoundary=setOutputContentType(req);\n  long startTime=System.nanoTime();\n  HttpURLConnection conn=createConnection(req);\n  Response res=null;\n  try {\n    conn.connect();\n    if (conn.getDoOutput())     writePost(req,conn.getOutputStream(),mimeBoundary);\n    int status=conn.getResponseCode();\n    res=new Response(previousResponse);\n    res.setupFromConnection(conn,previousResponse);\n    res.req=req;\n    if (res.hasHeader(LOCATION) && req.followRedirects()) {\n      if (status != HTTP_TEMP_REDIR) {\n        req.method(Method.GET);\n        req.data().clear();\n        req.requestBody(null);\n        req.removeHeader(CONTENT_TYPE);\n      }\n      String location=res.header(LOCATION);\n      if (location.startsWith(\"http:/\") && location.charAt(6) != '/')       location=location.substring(6);\n      URL redir=StringUtil.resolve(req.url(),location);\n      req.url(encodeUrl(redir));\n      for (      Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n        req.cookie(cookie.getKey(),cookie.getValue());\n      }\n      return execute(req,res);\n    }\n    if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())     throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n    String contentType=res.contentType();\n    if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n    if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n      if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n        req.parser(Parser.xmlParser());\n      }\n    }\n    res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n    if (conn.getContentLength() != 0 && req.method() != HEAD) {\n      res.bodyStream=null;\n      res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n      if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n        res.bodyStream=new GZIPInputStream(res.bodyStream);\n      }\n else       if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n        res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n      }\n      res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n    }\n else {\n      res.byteData=DataUtil.emptyByteBuffer();\n    }\n  }\n catch (  IOException e) {\n    if (res != null)     res.safeClose();\n    throw e;\n  }\n  res.executed=true;\n  return res;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 536,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 5442,
                        "startLineNumber": 730,
                        "startColumnNumber": 8,
                        "endLineNumber": 825,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "static Response execute(Connection.Request req,Response previousResponse) throws IOException {\n  Validate.notNull(req,\"Request must not be null\");\n  Validate.notNull(req.url(),\"URL must be specified to connect\");\n  String protocol=req.url().getProtocol();\n  if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))   throw new MalformedURLException(\"Only http & https protocols supported\");\n  final boolean methodHasBody=req.method().hasBody();\n  final boolean hasRequestBody=req.requestBody() != null;\n  if (!methodHasBody)   Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n  String mimeBoundary=null;\n  if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))   serialiseRequestUrl(req);\n else   if (methodHasBody)   mimeBoundary=setOutputContentType(req);\n  long startTime=System.nanoTime();\n  HttpURLConnection conn=createConnection(req);\n  Response res=null;\n  try {\n    conn.connect();\n    if (conn.getDoOutput())     writePost(req,conn.getOutputStream(),mimeBoundary);\n    int status=conn.getResponseCode();\n    res=new Response(previousResponse);\n    res.setupFromConnection(conn,previousResponse);\n    res.req=req;\n    if (res.hasHeader(LOCATION) && req.followRedirects()) {\n      if (status != HTTP_TEMP_REDIR) {\n        req.method(Method.GET);\n        req.data().clear();\n        req.requestBody(null);\n        req.removeHeader(CONTENT_TYPE);\n      }\n      String location=res.header(LOCATION);\n      if (location.startsWith(\"http:/\") && location.charAt(6) != '/')       location=location.substring(6);\n      URL redir=StringUtil.resolve(req.url(),location);\n      req.url(encodeUrl(redir));\n      for (      Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n        req.cookie(cookie.getKey(),cookie.getValue());\n      }\n      return execute(req,res);\n    }\n    if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())     throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n    String contentType=res.contentType();\n    if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n    if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n      if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n        req.parser(Parser.xmlParser());\n      }\n    }\n    res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n    if (conn.getContentLength() != 0 && req.method() != HEAD) {\n      res.bodyStream=null;\n      res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n      if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n        res.bodyStream=new GZIPInputStream(res.bodyStream);\n      }\n else       if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n        res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n      }\n      res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n    }\n else {\n      res.byteData=DataUtil.emptyByteBuffer();\n    }\n  }\n catch (  IOException e) {\n    if (res != null)     res.safeClose();\n    throw e;\n  }\n  res.executed=true;\n  return res;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 553,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 71,
                    "startLineNumber": 797,
                    "startColumnNumber": 24,
                    "endLineNumber": 797,
                    "endColumnNumber": 95
                },
                "nodeContext": "req instanceof HttpConnection.Request && !((Request)req).parserDefined",
                "nodeType": "InfixExpression",
                "astNodeNumber": 15,
                "astHeight": 7
            },
            "tokenLength": 1,
            "type": "org.jsoup.Connection.Request"
        },
        {
            "nodeContext": "req",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 798,
                "startColumnNumber": 24,
                "endLineNumber": 798,
                "endColumnNumber": 27
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 30,
                        "startLineNumber": 798,
                        "startColumnNumber": 24,
                        "endLineNumber": 798,
                        "endColumnNumber": 54
                    },
                    "nodeContext": "req.parser(Parser.xmlParser())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 6,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 31,
                        "startLineNumber": 798,
                        "startColumnNumber": 24,
                        "endLineNumber": 798,
                        "endColumnNumber": 55
                    },
                    "nodeContext": "req.parser(Parser.xmlParser());\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 79,
                        "startLineNumber": 797,
                        "startColumnNumber": 97,
                        "endLineNumber": 799,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "{\n  req.parser(Parser.xmlParser());\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 156,
                        "startLineNumber": 797,
                        "startColumnNumber": 20,
                        "endLineNumber": 799,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n  req.parser(Parser.xmlParser());\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 24,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 302,
                        "startLineNumber": 795,
                        "startColumnNumber": 93,
                        "endLineNumber": 800,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n    req.parser(Parser.xmlParser());\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 25,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 379,
                        "startLineNumber": 795,
                        "startColumnNumber": 16,
                        "endLineNumber": 800,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n  if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n    req.parser(Parser.xmlParser());\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 36,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 4035,
                        "startLineNumber": 751,
                        "startColumnNumber": 16,
                        "endLineNumber": 818,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  conn.connect();\n  if (conn.getDoOutput())   writePost(req,conn.getOutputStream(),mimeBoundary);\n  int status=conn.getResponseCode();\n  res=new Response(previousResponse);\n  res.setupFromConnection(conn,previousResponse);\n  res.req=req;\n  if (res.hasHeader(LOCATION) && req.followRedirects()) {\n    if (status != HTTP_TEMP_REDIR) {\n      req.method(Method.GET);\n      req.data().clear();\n      req.requestBody(null);\n      req.removeHeader(CONTENT_TYPE);\n    }\n    String location=res.header(LOCATION);\n    if (location.startsWith(\"http:/\") && location.charAt(6) != '/')     location=location.substring(6);\n    URL redir=StringUtil.resolve(req.url(),location);\n    req.url(encodeUrl(redir));\n    for (    Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n      req.cookie(cookie.getKey(),cookie.getValue());\n    }\n    return execute(req,res);\n  }\n  if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())   throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n  String contentType=res.contentType();\n  if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())   throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n  if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n    if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n      req.parser(Parser.xmlParser());\n    }\n  }\n  res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n  if (conn.getContentLength() != 0 && req.method() != HEAD) {\n    res.bodyStream=null;\n    res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n    if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n      res.bodyStream=new GZIPInputStream(res.bodyStream);\n    }\n else     if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n      res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n    }\n    res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n  }\n else {\n    res.byteData=DataUtil.emptyByteBuffer();\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 383,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4187,
                        "startLineNumber": 751,
                        "startColumnNumber": 12,
                        "endLineNumber": 821,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "try {\n  conn.connect();\n  if (conn.getDoOutput())   writePost(req,conn.getOutputStream(),mimeBoundary);\n  int status=conn.getResponseCode();\n  res=new Response(previousResponse);\n  res.setupFromConnection(conn,previousResponse);\n  res.req=req;\n  if (res.hasHeader(LOCATION) && req.followRedirects()) {\n    if (status != HTTP_TEMP_REDIR) {\n      req.method(Method.GET);\n      req.data().clear();\n      req.requestBody(null);\n      req.removeHeader(CONTENT_TYPE);\n    }\n    String location=res.header(LOCATION);\n    if (location.startsWith(\"http:/\") && location.charAt(6) != '/')     location=location.substring(6);\n    URL redir=StringUtil.resolve(req.url(),location);\n    req.url(encodeUrl(redir));\n    for (    Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n      req.cookie(cookie.getKey(),cookie.getValue());\n    }\n    return execute(req,res);\n  }\n  if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())   throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n  String contentType=res.contentType();\n  if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())   throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n  if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n    if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n      req.parser(Parser.xmlParser());\n    }\n  }\n  res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n  if (conn.getContentLength() != 0 && req.method() != HEAD) {\n    res.bodyStream=null;\n    res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n    if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n      res.bodyStream=new GZIPInputStream(res.bodyStream);\n    }\n else     if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n      res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n    }\n    res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n  }\n else {\n    res.byteData=DataUtil.emptyByteBuffer();\n  }\n}\n catch (IOException e) {\n  if (res != null)   res.safeClose();\n  throw e;\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 400,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 5348,
                        "startLineNumber": 730,
                        "startColumnNumber": 102,
                        "endLineNumber": 825,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  Validate.notNull(req,\"Request must not be null\");\n  Validate.notNull(req.url(),\"URL must be specified to connect\");\n  String protocol=req.url().getProtocol();\n  if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))   throw new MalformedURLException(\"Only http & https protocols supported\");\n  final boolean methodHasBody=req.method().hasBody();\n  final boolean hasRequestBody=req.requestBody() != null;\n  if (!methodHasBody)   Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n  String mimeBoundary=null;\n  if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))   serialiseRequestUrl(req);\n else   if (methodHasBody)   mimeBoundary=setOutputContentType(req);\n  long startTime=System.nanoTime();\n  HttpURLConnection conn=createConnection(req);\n  Response res=null;\n  try {\n    conn.connect();\n    if (conn.getDoOutput())     writePost(req,conn.getOutputStream(),mimeBoundary);\n    int status=conn.getResponseCode();\n    res=new Response(previousResponse);\n    res.setupFromConnection(conn,previousResponse);\n    res.req=req;\n    if (res.hasHeader(LOCATION) && req.followRedirects()) {\n      if (status != HTTP_TEMP_REDIR) {\n        req.method(Method.GET);\n        req.data().clear();\n        req.requestBody(null);\n        req.removeHeader(CONTENT_TYPE);\n      }\n      String location=res.header(LOCATION);\n      if (location.startsWith(\"http:/\") && location.charAt(6) != '/')       location=location.substring(6);\n      URL redir=StringUtil.resolve(req.url(),location);\n      req.url(encodeUrl(redir));\n      for (      Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n        req.cookie(cookie.getKey(),cookie.getValue());\n      }\n      return execute(req,res);\n    }\n    if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())     throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n    String contentType=res.contentType();\n    if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n    if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n      if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n        req.parser(Parser.xmlParser());\n      }\n    }\n    res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n    if (conn.getContentLength() != 0 && req.method() != HEAD) {\n      res.bodyStream=null;\n      res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n      if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n        res.bodyStream=new GZIPInputStream(res.bodyStream);\n      }\n else       if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n        res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n      }\n      res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n    }\n else {\n      res.byteData=DataUtil.emptyByteBuffer();\n    }\n  }\n catch (  IOException e) {\n    if (res != null)     res.safeClose();\n    throw e;\n  }\n  res.executed=true;\n  return res;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 536,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 5442,
                        "startLineNumber": 730,
                        "startColumnNumber": 8,
                        "endLineNumber": 825,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "static Response execute(Connection.Request req,Response previousResponse) throws IOException {\n  Validate.notNull(req,\"Request must not be null\");\n  Validate.notNull(req.url(),\"URL must be specified to connect\");\n  String protocol=req.url().getProtocol();\n  if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))   throw new MalformedURLException(\"Only http & https protocols supported\");\n  final boolean methodHasBody=req.method().hasBody();\n  final boolean hasRequestBody=req.requestBody() != null;\n  if (!methodHasBody)   Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n  String mimeBoundary=null;\n  if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))   serialiseRequestUrl(req);\n else   if (methodHasBody)   mimeBoundary=setOutputContentType(req);\n  long startTime=System.nanoTime();\n  HttpURLConnection conn=createConnection(req);\n  Response res=null;\n  try {\n    conn.connect();\n    if (conn.getDoOutput())     writePost(req,conn.getOutputStream(),mimeBoundary);\n    int status=conn.getResponseCode();\n    res=new Response(previousResponse);\n    res.setupFromConnection(conn,previousResponse);\n    res.req=req;\n    if (res.hasHeader(LOCATION) && req.followRedirects()) {\n      if (status != HTTP_TEMP_REDIR) {\n        req.method(Method.GET);\n        req.data().clear();\n        req.requestBody(null);\n        req.removeHeader(CONTENT_TYPE);\n      }\n      String location=res.header(LOCATION);\n      if (location.startsWith(\"http:/\") && location.charAt(6) != '/')       location=location.substring(6);\n      URL redir=StringUtil.resolve(req.url(),location);\n      req.url(encodeUrl(redir));\n      for (      Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n        req.cookie(cookie.getKey(),cookie.getValue());\n      }\n      return execute(req,res);\n    }\n    if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())     throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n    String contentType=res.contentType();\n    if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n    if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n      if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n        req.parser(Parser.xmlParser());\n      }\n    }\n    res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n    if (conn.getContentLength() != 0 && req.method() != HEAD) {\n      res.bodyStream=null;\n      res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n      if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n        res.bodyStream=new GZIPInputStream(res.bodyStream);\n      }\n else       if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n        res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n      }\n      res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n    }\n else {\n      res.byteData=DataUtil.emptyByteBuffer();\n    }\n  }\n catch (  IOException e) {\n    if (res != null)     res.safeClose();\n    throw e;\n  }\n  res.executed=true;\n  return res;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 553,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 31,
                    "startLineNumber": 798,
                    "startColumnNumber": 24,
                    "endLineNumber": 798,
                    "endColumnNumber": 55
                },
                "nodeContext": "req.parser(Parser.xmlParser());\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 7,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.jsoup.Connection.Request"
        },
        {
            "nodeContext": "req",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 803,
                "startColumnNumber": 52,
                "endLineNumber": 803,
                "endColumnNumber": 55
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 12,
                        "startLineNumber": 803,
                        "startColumnNumber": 52,
                        "endLineNumber": 803,
                        "endColumnNumber": 64
                    },
                    "nodeContext": "req.method()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
                    "nodePosition": {
                        "charLength": 20,
                        "startLineNumber": 803,
                        "startColumnNumber": 52,
                        "endLineNumber": 803,
                        "endColumnNumber": 72
                    },
                    "nodeContext": "req.method() != HEAD",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                    "nodePosition": {
                        "charLength": 52,
                        "startLineNumber": 803,
                        "startColumnNumber": 20,
                        "endLineNumber": 803,
                        "endColumnNumber": 72
                    },
                    "nodeContext": "conn.getContentLength() != 0 && req.method() != HEAD",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1031,
                        "startLineNumber": 803,
                        "startColumnNumber": 16,
                        "endLineNumber": 817,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (conn.getContentLength() != 0 && req.method() != HEAD) {\n  res.bodyStream=null;\n  res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n  if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n    res.bodyStream=new GZIPInputStream(res.bodyStream);\n  }\n else   if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n    res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n  }\n  res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n}\n else {\n  res.byteData=DataUtil.emptyByteBuffer();\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 108,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 4035,
                        "startLineNumber": 751,
                        "startColumnNumber": 16,
                        "endLineNumber": 818,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  conn.connect();\n  if (conn.getDoOutput())   writePost(req,conn.getOutputStream(),mimeBoundary);\n  int status=conn.getResponseCode();\n  res=new Response(previousResponse);\n  res.setupFromConnection(conn,previousResponse);\n  res.req=req;\n  if (res.hasHeader(LOCATION) && req.followRedirects()) {\n    if (status != HTTP_TEMP_REDIR) {\n      req.method(Method.GET);\n      req.data().clear();\n      req.requestBody(null);\n      req.removeHeader(CONTENT_TYPE);\n    }\n    String location=res.header(LOCATION);\n    if (location.startsWith(\"http:/\") && location.charAt(6) != '/')     location=location.substring(6);\n    URL redir=StringUtil.resolve(req.url(),location);\n    req.url(encodeUrl(redir));\n    for (    Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n      req.cookie(cookie.getKey(),cookie.getValue());\n    }\n    return execute(req,res);\n  }\n  if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())   throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n  String contentType=res.contentType();\n  if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())   throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n  if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n    if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n      req.parser(Parser.xmlParser());\n    }\n  }\n  res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n  if (conn.getContentLength() != 0 && req.method() != HEAD) {\n    res.bodyStream=null;\n    res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n    if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n      res.bodyStream=new GZIPInputStream(res.bodyStream);\n    }\n else     if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n      res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n    }\n    res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n  }\n else {\n    res.byteData=DataUtil.emptyByteBuffer();\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 383,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4187,
                        "startLineNumber": 751,
                        "startColumnNumber": 12,
                        "endLineNumber": 821,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "try {\n  conn.connect();\n  if (conn.getDoOutput())   writePost(req,conn.getOutputStream(),mimeBoundary);\n  int status=conn.getResponseCode();\n  res=new Response(previousResponse);\n  res.setupFromConnection(conn,previousResponse);\n  res.req=req;\n  if (res.hasHeader(LOCATION) && req.followRedirects()) {\n    if (status != HTTP_TEMP_REDIR) {\n      req.method(Method.GET);\n      req.data().clear();\n      req.requestBody(null);\n      req.removeHeader(CONTENT_TYPE);\n    }\n    String location=res.header(LOCATION);\n    if (location.startsWith(\"http:/\") && location.charAt(6) != '/')     location=location.substring(6);\n    URL redir=StringUtil.resolve(req.url(),location);\n    req.url(encodeUrl(redir));\n    for (    Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n      req.cookie(cookie.getKey(),cookie.getValue());\n    }\n    return execute(req,res);\n  }\n  if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())   throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n  String contentType=res.contentType();\n  if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())   throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n  if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n    if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n      req.parser(Parser.xmlParser());\n    }\n  }\n  res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n  if (conn.getContentLength() != 0 && req.method() != HEAD) {\n    res.bodyStream=null;\n    res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n    if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n      res.bodyStream=new GZIPInputStream(res.bodyStream);\n    }\n else     if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n      res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n    }\n    res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n  }\n else {\n    res.byteData=DataUtil.emptyByteBuffer();\n  }\n}\n catch (IOException e) {\n  if (res != null)   res.safeClose();\n  throw e;\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 400,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 5348,
                        "startLineNumber": 730,
                        "startColumnNumber": 102,
                        "endLineNumber": 825,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  Validate.notNull(req,\"Request must not be null\");\n  Validate.notNull(req.url(),\"URL must be specified to connect\");\n  String protocol=req.url().getProtocol();\n  if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))   throw new MalformedURLException(\"Only http & https protocols supported\");\n  final boolean methodHasBody=req.method().hasBody();\n  final boolean hasRequestBody=req.requestBody() != null;\n  if (!methodHasBody)   Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n  String mimeBoundary=null;\n  if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))   serialiseRequestUrl(req);\n else   if (methodHasBody)   mimeBoundary=setOutputContentType(req);\n  long startTime=System.nanoTime();\n  HttpURLConnection conn=createConnection(req);\n  Response res=null;\n  try {\n    conn.connect();\n    if (conn.getDoOutput())     writePost(req,conn.getOutputStream(),mimeBoundary);\n    int status=conn.getResponseCode();\n    res=new Response(previousResponse);\n    res.setupFromConnection(conn,previousResponse);\n    res.req=req;\n    if (res.hasHeader(LOCATION) && req.followRedirects()) {\n      if (status != HTTP_TEMP_REDIR) {\n        req.method(Method.GET);\n        req.data().clear();\n        req.requestBody(null);\n        req.removeHeader(CONTENT_TYPE);\n      }\n      String location=res.header(LOCATION);\n      if (location.startsWith(\"http:/\") && location.charAt(6) != '/')       location=location.substring(6);\n      URL redir=StringUtil.resolve(req.url(),location);\n      req.url(encodeUrl(redir));\n      for (      Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n        req.cookie(cookie.getKey(),cookie.getValue());\n      }\n      return execute(req,res);\n    }\n    if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())     throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n    String contentType=res.contentType();\n    if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n    if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n      if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n        req.parser(Parser.xmlParser());\n      }\n    }\n    res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n    if (conn.getContentLength() != 0 && req.method() != HEAD) {\n      res.bodyStream=null;\n      res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n      if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n        res.bodyStream=new GZIPInputStream(res.bodyStream);\n      }\n else       if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n        res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n      }\n      res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n    }\n else {\n      res.byteData=DataUtil.emptyByteBuffer();\n    }\n  }\n catch (  IOException e) {\n    if (res != null)     res.safeClose();\n    throw e;\n  }\n  res.executed=true;\n  return res;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 536,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 5442,
                        "startLineNumber": 730,
                        "startColumnNumber": 8,
                        "endLineNumber": 825,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "static Response execute(Connection.Request req,Response previousResponse) throws IOException {\n  Validate.notNull(req,\"Request must not be null\");\n  Validate.notNull(req.url(),\"URL must be specified to connect\");\n  String protocol=req.url().getProtocol();\n  if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))   throw new MalformedURLException(\"Only http & https protocols supported\");\n  final boolean methodHasBody=req.method().hasBody();\n  final boolean hasRequestBody=req.requestBody() != null;\n  if (!methodHasBody)   Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n  String mimeBoundary=null;\n  if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))   serialiseRequestUrl(req);\n else   if (methodHasBody)   mimeBoundary=setOutputContentType(req);\n  long startTime=System.nanoTime();\n  HttpURLConnection conn=createConnection(req);\n  Response res=null;\n  try {\n    conn.connect();\n    if (conn.getDoOutput())     writePost(req,conn.getOutputStream(),mimeBoundary);\n    int status=conn.getResponseCode();\n    res=new Response(previousResponse);\n    res.setupFromConnection(conn,previousResponse);\n    res.req=req;\n    if (res.hasHeader(LOCATION) && req.followRedirects()) {\n      if (status != HTTP_TEMP_REDIR) {\n        req.method(Method.GET);\n        req.data().clear();\n        req.requestBody(null);\n        req.removeHeader(CONTENT_TYPE);\n      }\n      String location=res.header(LOCATION);\n      if (location.startsWith(\"http:/\") && location.charAt(6) != '/')       location=location.substring(6);\n      URL redir=StringUtil.resolve(req.url(),location);\n      req.url(encodeUrl(redir));\n      for (      Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n        req.cookie(cookie.getKey(),cookie.getValue());\n      }\n      return execute(req,res);\n    }\n    if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())     throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n    String contentType=res.contentType();\n    if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n    if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n      if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n        req.parser(Parser.xmlParser());\n      }\n    }\n    res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n    if (conn.getContentLength() != 0 && req.method() != HEAD) {\n      res.bodyStream=null;\n      res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n      if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n        res.bodyStream=new GZIPInputStream(res.bodyStream);\n      }\n else       if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n        res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n      }\n      res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n    }\n else {\n      res.byteData=DataUtil.emptyByteBuffer();\n    }\n  }\n catch (  IOException e) {\n    if (res != null)     res.safeClose();\n    throw e;\n  }\n  res.executed=true;\n  return res;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 553,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
                "nodePosition": {
                    "charLength": 52,
                    "startLineNumber": 803,
                    "startColumnNumber": 20,
                    "endLineNumber": 803,
                    "endColumnNumber": 72
                },
                "nodeContext": "conn.getContentLength() != 0 && req.method() != HEAD",
                "nodeType": "InfixExpression",
                "astNodeNumber": 11,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "org.jsoup.Connection.Request"
        },
        {
            "nodeContext": "req",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 812,
                "startColumnNumber": 67,
                "endLineNumber": 812,
                "endColumnNumber": 70
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 17,
                        "startLineNumber": 812,
                        "startColumnNumber": 67,
                        "endLineNumber": 812,
                        "endColumnNumber": 84
                    },
                    "nodeContext": "req.maxBodySize()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 110,
                        "startLineNumber": 811,
                        "startColumnNumber": 37,
                        "endLineNumber": 812,
                        "endColumnNumber": 85
                    },
                    "nodeContext": "ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 12,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 169,
                        "startLineNumber": 811,
                        "startColumnNumber": 37,
                        "endLineNumber": 813,
                        "endColumnNumber": 58
                    },
                    "nodeContext": "ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 18,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 186,
                        "startLineNumber": 811,
                        "startColumnNumber": 20,
                        "endLineNumber": 813,
                        "endColumnNumber": 58
                    },
                    "nodeContext": "res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout())",
                    "nodeType": "Assignment",
                    "astNodeNumber": 22,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 208,
                        "startLineNumber": 811,
                        "startColumnNumber": 20,
                        "endLineNumber": 814,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 23,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 885,
                        "startLineNumber": 803,
                        "startColumnNumber": 74,
                        "endLineNumber": 815,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  res.bodyStream=null;\n  res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n  if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n    res.bodyStream=new GZIPInputStream(res.bodyStream);\n  }\n else   if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n    res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n  }\n  res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 87,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1031,
                        "startLineNumber": 803,
                        "startColumnNumber": 16,
                        "endLineNumber": 817,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (conn.getContentLength() != 0 && req.method() != HEAD) {\n  res.bodyStream=null;\n  res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n  if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n    res.bodyStream=new GZIPInputStream(res.bodyStream);\n  }\n else   if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n    res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n  }\n  res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n}\n else {\n  res.byteData=DataUtil.emptyByteBuffer();\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 108,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 4035,
                        "startLineNumber": 751,
                        "startColumnNumber": 16,
                        "endLineNumber": 818,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  conn.connect();\n  if (conn.getDoOutput())   writePost(req,conn.getOutputStream(),mimeBoundary);\n  int status=conn.getResponseCode();\n  res=new Response(previousResponse);\n  res.setupFromConnection(conn,previousResponse);\n  res.req=req;\n  if (res.hasHeader(LOCATION) && req.followRedirects()) {\n    if (status != HTTP_TEMP_REDIR) {\n      req.method(Method.GET);\n      req.data().clear();\n      req.requestBody(null);\n      req.removeHeader(CONTENT_TYPE);\n    }\n    String location=res.header(LOCATION);\n    if (location.startsWith(\"http:/\") && location.charAt(6) != '/')     location=location.substring(6);\n    URL redir=StringUtil.resolve(req.url(),location);\n    req.url(encodeUrl(redir));\n    for (    Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n      req.cookie(cookie.getKey(),cookie.getValue());\n    }\n    return execute(req,res);\n  }\n  if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())   throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n  String contentType=res.contentType();\n  if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())   throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n  if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n    if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n      req.parser(Parser.xmlParser());\n    }\n  }\n  res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n  if (conn.getContentLength() != 0 && req.method() != HEAD) {\n    res.bodyStream=null;\n    res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n    if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n      res.bodyStream=new GZIPInputStream(res.bodyStream);\n    }\n else     if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n      res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n    }\n    res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n  }\n else {\n    res.byteData=DataUtil.emptyByteBuffer();\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 383,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4187,
                        "startLineNumber": 751,
                        "startColumnNumber": 12,
                        "endLineNumber": 821,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "try {\n  conn.connect();\n  if (conn.getDoOutput())   writePost(req,conn.getOutputStream(),mimeBoundary);\n  int status=conn.getResponseCode();\n  res=new Response(previousResponse);\n  res.setupFromConnection(conn,previousResponse);\n  res.req=req;\n  if (res.hasHeader(LOCATION) && req.followRedirects()) {\n    if (status != HTTP_TEMP_REDIR) {\n      req.method(Method.GET);\n      req.data().clear();\n      req.requestBody(null);\n      req.removeHeader(CONTENT_TYPE);\n    }\n    String location=res.header(LOCATION);\n    if (location.startsWith(\"http:/\") && location.charAt(6) != '/')     location=location.substring(6);\n    URL redir=StringUtil.resolve(req.url(),location);\n    req.url(encodeUrl(redir));\n    for (    Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n      req.cookie(cookie.getKey(),cookie.getValue());\n    }\n    return execute(req,res);\n  }\n  if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())   throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n  String contentType=res.contentType();\n  if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())   throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n  if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n    if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n      req.parser(Parser.xmlParser());\n    }\n  }\n  res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n  if (conn.getContentLength() != 0 && req.method() != HEAD) {\n    res.bodyStream=null;\n    res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n    if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n      res.bodyStream=new GZIPInputStream(res.bodyStream);\n    }\n else     if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n      res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n    }\n    res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n  }\n else {\n    res.byteData=DataUtil.emptyByteBuffer();\n  }\n}\n catch (IOException e) {\n  if (res != null)   res.safeClose();\n  throw e;\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 400,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 5348,
                        "startLineNumber": 730,
                        "startColumnNumber": 102,
                        "endLineNumber": 825,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  Validate.notNull(req,\"Request must not be null\");\n  Validate.notNull(req.url(),\"URL must be specified to connect\");\n  String protocol=req.url().getProtocol();\n  if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))   throw new MalformedURLException(\"Only http & https protocols supported\");\n  final boolean methodHasBody=req.method().hasBody();\n  final boolean hasRequestBody=req.requestBody() != null;\n  if (!methodHasBody)   Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n  String mimeBoundary=null;\n  if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))   serialiseRequestUrl(req);\n else   if (methodHasBody)   mimeBoundary=setOutputContentType(req);\n  long startTime=System.nanoTime();\n  HttpURLConnection conn=createConnection(req);\n  Response res=null;\n  try {\n    conn.connect();\n    if (conn.getDoOutput())     writePost(req,conn.getOutputStream(),mimeBoundary);\n    int status=conn.getResponseCode();\n    res=new Response(previousResponse);\n    res.setupFromConnection(conn,previousResponse);\n    res.req=req;\n    if (res.hasHeader(LOCATION) && req.followRedirects()) {\n      if (status != HTTP_TEMP_REDIR) {\n        req.method(Method.GET);\n        req.data().clear();\n        req.requestBody(null);\n        req.removeHeader(CONTENT_TYPE);\n      }\n      String location=res.header(LOCATION);\n      if (location.startsWith(\"http:/\") && location.charAt(6) != '/')       location=location.substring(6);\n      URL redir=StringUtil.resolve(req.url(),location);\n      req.url(encodeUrl(redir));\n      for (      Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n        req.cookie(cookie.getKey(),cookie.getValue());\n      }\n      return execute(req,res);\n    }\n    if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())     throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n    String contentType=res.contentType();\n    if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n    if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n      if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n        req.parser(Parser.xmlParser());\n      }\n    }\n    res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n    if (conn.getContentLength() != 0 && req.method() != HEAD) {\n      res.bodyStream=null;\n      res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n      if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n        res.bodyStream=new GZIPInputStream(res.bodyStream);\n      }\n else       if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n        res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n      }\n      res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n    }\n else {\n      res.byteData=DataUtil.emptyByteBuffer();\n    }\n  }\n catch (  IOException e) {\n    if (res != null)     res.safeClose();\n    throw e;\n  }\n  res.executed=true;\n  return res;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 536,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 5442,
                        "startLineNumber": 730,
                        "startColumnNumber": 8,
                        "endLineNumber": 825,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "static Response execute(Connection.Request req,Response previousResponse) throws IOException {\n  Validate.notNull(req,\"Request must not be null\");\n  Validate.notNull(req.url(),\"URL must be specified to connect\");\n  String protocol=req.url().getProtocol();\n  if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))   throw new MalformedURLException(\"Only http & https protocols supported\");\n  final boolean methodHasBody=req.method().hasBody();\n  final boolean hasRequestBody=req.requestBody() != null;\n  if (!methodHasBody)   Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n  String mimeBoundary=null;\n  if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))   serialiseRequestUrl(req);\n else   if (methodHasBody)   mimeBoundary=setOutputContentType(req);\n  long startTime=System.nanoTime();\n  HttpURLConnection conn=createConnection(req);\n  Response res=null;\n  try {\n    conn.connect();\n    if (conn.getDoOutput())     writePost(req,conn.getOutputStream(),mimeBoundary);\n    int status=conn.getResponseCode();\n    res=new Response(previousResponse);\n    res.setupFromConnection(conn,previousResponse);\n    res.req=req;\n    if (res.hasHeader(LOCATION) && req.followRedirects()) {\n      if (status != HTTP_TEMP_REDIR) {\n        req.method(Method.GET);\n        req.data().clear();\n        req.requestBody(null);\n        req.removeHeader(CONTENT_TYPE);\n      }\n      String location=res.header(LOCATION);\n      if (location.startsWith(\"http:/\") && location.charAt(6) != '/')       location=location.substring(6);\n      URL redir=StringUtil.resolve(req.url(),location);\n      req.url(encodeUrl(redir));\n      for (      Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n        req.cookie(cookie.getKey(),cookie.getValue());\n      }\n      return execute(req,res);\n    }\n    if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())     throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n    String contentType=res.contentType();\n    if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n    if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n      if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n        req.parser(Parser.xmlParser());\n      }\n    }\n    res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n    if (conn.getContentLength() != 0 && req.method() != HEAD) {\n      res.bodyStream=null;\n      res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n      if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n        res.bodyStream=new GZIPInputStream(res.bodyStream);\n      }\n else       if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n        res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n      }\n      res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n    }\n else {\n      res.byteData=DataUtil.emptyByteBuffer();\n    }\n  }\n catch (  IOException e) {\n    if (res != null)     res.safeClose();\n    throw e;\n  }\n  res.executed=true;\n  return res;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 553,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                "nodePosition": {
                    "charLength": 17,
                    "startLineNumber": 812,
                    "startColumnNumber": 67,
                    "endLineNumber": 812,
                    "endColumnNumber": 84
                },
                "nodeContext": "req.maxBodySize()",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 3,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "org.jsoup.Connection.Request"
        },
        {
            "nodeContext": "req",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 813,
                "startColumnNumber": 44,
                "endLineNumber": 813,
                "endColumnNumber": 47
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                    "nodePosition": {
                        "charLength": 13,
                        "startLineNumber": 813,
                        "startColumnNumber": 44,
                        "endLineNumber": 813,
                        "endColumnNumber": 57
                    },
                    "nodeContext": "req.timeout()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 169,
                        "startLineNumber": 811,
                        "startColumnNumber": 37,
                        "endLineNumber": 813,
                        "endColumnNumber": 58
                    },
                    "nodeContext": "ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout())",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 18,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 186,
                        "startLineNumber": 811,
                        "startColumnNumber": 20,
                        "endLineNumber": 813,
                        "endColumnNumber": 58
                    },
                    "nodeContext": "res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout())",
                    "nodeType": "Assignment",
                    "astNodeNumber": 22,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 208,
                        "startLineNumber": 811,
                        "startColumnNumber": 20,
                        "endLineNumber": 814,
                        "endColumnNumber": 21
                    },
                    "nodeContext": "res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 23,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 885,
                        "startLineNumber": 803,
                        "startColumnNumber": 74,
                        "endLineNumber": 815,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  res.bodyStream=null;\n  res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n  if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n    res.bodyStream=new GZIPInputStream(res.bodyStream);\n  }\n else   if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n    res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n  }\n  res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 87,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1031,
                        "startLineNumber": 803,
                        "startColumnNumber": 16,
                        "endLineNumber": 817,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (conn.getContentLength() != 0 && req.method() != HEAD) {\n  res.bodyStream=null;\n  res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n  if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n    res.bodyStream=new GZIPInputStream(res.bodyStream);\n  }\n else   if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n    res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n  }\n  res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n}\n else {\n  res.byteData=DataUtil.emptyByteBuffer();\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 108,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
                    "nodePosition": {
                        "charLength": 4035,
                        "startLineNumber": 751,
                        "startColumnNumber": 16,
                        "endLineNumber": 818,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  conn.connect();\n  if (conn.getDoOutput())   writePost(req,conn.getOutputStream(),mimeBoundary);\n  int status=conn.getResponseCode();\n  res=new Response(previousResponse);\n  res.setupFromConnection(conn,previousResponse);\n  res.req=req;\n  if (res.hasHeader(LOCATION) && req.followRedirects()) {\n    if (status != HTTP_TEMP_REDIR) {\n      req.method(Method.GET);\n      req.data().clear();\n      req.requestBody(null);\n      req.removeHeader(CONTENT_TYPE);\n    }\n    String location=res.header(LOCATION);\n    if (location.startsWith(\"http:/\") && location.charAt(6) != '/')     location=location.substring(6);\n    URL redir=StringUtil.resolve(req.url(),location);\n    req.url(encodeUrl(redir));\n    for (    Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n      req.cookie(cookie.getKey(),cookie.getValue());\n    }\n    return execute(req,res);\n  }\n  if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())   throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n  String contentType=res.contentType();\n  if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())   throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n  if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n    if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n      req.parser(Parser.xmlParser());\n    }\n  }\n  res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n  if (conn.getContentLength() != 0 && req.method() != HEAD) {\n    res.bodyStream=null;\n    res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n    if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n      res.bodyStream=new GZIPInputStream(res.bodyStream);\n    }\n else     if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n      res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n    }\n    res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n  }\n else {\n    res.byteData=DataUtil.emptyByteBuffer();\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 383,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 4187,
                        "startLineNumber": 751,
                        "startColumnNumber": 12,
                        "endLineNumber": 821,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "try {\n  conn.connect();\n  if (conn.getDoOutput())   writePost(req,conn.getOutputStream(),mimeBoundary);\n  int status=conn.getResponseCode();\n  res=new Response(previousResponse);\n  res.setupFromConnection(conn,previousResponse);\n  res.req=req;\n  if (res.hasHeader(LOCATION) && req.followRedirects()) {\n    if (status != HTTP_TEMP_REDIR) {\n      req.method(Method.GET);\n      req.data().clear();\n      req.requestBody(null);\n      req.removeHeader(CONTENT_TYPE);\n    }\n    String location=res.header(LOCATION);\n    if (location.startsWith(\"http:/\") && location.charAt(6) != '/')     location=location.substring(6);\n    URL redir=StringUtil.resolve(req.url(),location);\n    req.url(encodeUrl(redir));\n    for (    Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n      req.cookie(cookie.getKey(),cookie.getValue());\n    }\n    return execute(req,res);\n  }\n  if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())   throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n  String contentType=res.contentType();\n  if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())   throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n  if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n    if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n      req.parser(Parser.xmlParser());\n    }\n  }\n  res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n  if (conn.getContentLength() != 0 && req.method() != HEAD) {\n    res.bodyStream=null;\n    res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n    if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n      res.bodyStream=new GZIPInputStream(res.bodyStream);\n    }\n else     if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n      res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n    }\n    res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n  }\n else {\n    res.byteData=DataUtil.emptyByteBuffer();\n  }\n}\n catch (IOException e) {\n  if (res != null)   res.safeClose();\n  throw e;\n}\n",
                    "nodeType": "TryStatement",
                    "astNodeNumber": 400,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 5348,
                        "startLineNumber": 730,
                        "startColumnNumber": 102,
                        "endLineNumber": 825,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  Validate.notNull(req,\"Request must not be null\");\n  Validate.notNull(req.url(),\"URL must be specified to connect\");\n  String protocol=req.url().getProtocol();\n  if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))   throw new MalformedURLException(\"Only http & https protocols supported\");\n  final boolean methodHasBody=req.method().hasBody();\n  final boolean hasRequestBody=req.requestBody() != null;\n  if (!methodHasBody)   Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n  String mimeBoundary=null;\n  if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))   serialiseRequestUrl(req);\n else   if (methodHasBody)   mimeBoundary=setOutputContentType(req);\n  long startTime=System.nanoTime();\n  HttpURLConnection conn=createConnection(req);\n  Response res=null;\n  try {\n    conn.connect();\n    if (conn.getDoOutput())     writePost(req,conn.getOutputStream(),mimeBoundary);\n    int status=conn.getResponseCode();\n    res=new Response(previousResponse);\n    res.setupFromConnection(conn,previousResponse);\n    res.req=req;\n    if (res.hasHeader(LOCATION) && req.followRedirects()) {\n      if (status != HTTP_TEMP_REDIR) {\n        req.method(Method.GET);\n        req.data().clear();\n        req.requestBody(null);\n        req.removeHeader(CONTENT_TYPE);\n      }\n      String location=res.header(LOCATION);\n      if (location.startsWith(\"http:/\") && location.charAt(6) != '/')       location=location.substring(6);\n      URL redir=StringUtil.resolve(req.url(),location);\n      req.url(encodeUrl(redir));\n      for (      Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n        req.cookie(cookie.getKey(),cookie.getValue());\n      }\n      return execute(req,res);\n    }\n    if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())     throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n    String contentType=res.contentType();\n    if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n    if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n      if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n        req.parser(Parser.xmlParser());\n      }\n    }\n    res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n    if (conn.getContentLength() != 0 && req.method() != HEAD) {\n      res.bodyStream=null;\n      res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n      if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n        res.bodyStream=new GZIPInputStream(res.bodyStream);\n      }\n else       if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n        res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n      }\n      res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n    }\n else {\n      res.byteData=DataUtil.emptyByteBuffer();\n    }\n  }\n catch (  IOException e) {\n    if (res != null)     res.safeClose();\n    throw e;\n  }\n  res.executed=true;\n  return res;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 536,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 5442,
                        "startLineNumber": 730,
                        "startColumnNumber": 8,
                        "endLineNumber": 825,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "static Response execute(Connection.Request req,Response previousResponse) throws IOException {\n  Validate.notNull(req,\"Request must not be null\");\n  Validate.notNull(req.url(),\"URL must be specified to connect\");\n  String protocol=req.url().getProtocol();\n  if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))   throw new MalformedURLException(\"Only http & https protocols supported\");\n  final boolean methodHasBody=req.method().hasBody();\n  final boolean hasRequestBody=req.requestBody() != null;\n  if (!methodHasBody)   Validate.isFalse(hasRequestBody,\"Cannot set a request body for HTTP method \" + req.method());\n  String mimeBoundary=null;\n  if (req.data().size() > 0 && (!methodHasBody || hasRequestBody))   serialiseRequestUrl(req);\n else   if (methodHasBody)   mimeBoundary=setOutputContentType(req);\n  long startTime=System.nanoTime();\n  HttpURLConnection conn=createConnection(req);\n  Response res=null;\n  try {\n    conn.connect();\n    if (conn.getDoOutput())     writePost(req,conn.getOutputStream(),mimeBoundary);\n    int status=conn.getResponseCode();\n    res=new Response(previousResponse);\n    res.setupFromConnection(conn,previousResponse);\n    res.req=req;\n    if (res.hasHeader(LOCATION) && req.followRedirects()) {\n      if (status != HTTP_TEMP_REDIR) {\n        req.method(Method.GET);\n        req.data().clear();\n        req.requestBody(null);\n        req.removeHeader(CONTENT_TYPE);\n      }\n      String location=res.header(LOCATION);\n      if (location.startsWith(\"http:/\") && location.charAt(6) != '/')       location=location.substring(6);\n      URL redir=StringUtil.resolve(req.url(),location);\n      req.url(encodeUrl(redir));\n      for (      Map.Entry<String,String> cookie : res.cookies.entrySet()) {\n        req.cookie(cookie.getKey(),cookie.getValue());\n      }\n      return execute(req,res);\n    }\n    if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())     throw new HttpStatusException(\"HTTP error fetching URL\",status,req.url().toString());\n    String contentType=res.contentType();\n    if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches())     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/*+xml\",contentType,req.url().toString());\n    if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {\n      if (req instanceof HttpConnection.Request && !((Request)req).parserDefined) {\n        req.parser(Parser.xmlParser());\n      }\n    }\n    res.charset=DataUtil.getCharsetFromContentType(res.contentType);\n    if (conn.getContentLength() != 0 && req.method() != HEAD) {\n      res.bodyStream=null;\n      res.bodyStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n      if (res.hasHeaderWithValue(CONTENT_ENCODING,\"gzip\")) {\n        res.bodyStream=new GZIPInputStream(res.bodyStream);\n      }\n else       if (res.hasHeaderWithValue(CONTENT_ENCODING,\"deflate\")) {\n        res.bodyStream=new InflaterInputStream(res.bodyStream,new Inflater(true));\n      }\n      res.bodyStream=ConstrainableInputStream.wrap(res.bodyStream,DataUtil.bufferSize,req.maxBodySize()).timeout(startTime,req.timeout());\n    }\n else {\n      res.byteData=DataUtil.emptyByteBuffer();\n    }\n  }\n catch (  IOException e) {\n    if (res != null)     res.safeClose();\n    throw e;\n  }\n  res.executed=true;\n  return res;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 553,
                    "astHeight": 15
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
                "nodePosition": {
                    "charLength": 13,
                    "startLineNumber": 813,
                    "startColumnNumber": 44,
                    "endLineNumber": 813,
                    "endColumnNumber": 57
                },
                "nodeContext": "req.timeout()",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 3,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "org.jsoup.Connection.Request"
        }
    ],
    "positionList": [
        {
            "charLength": 3,
            "startLineNumber": 731,
            "startColumnNumber": 29,
            "endLineNumber": 731,
            "endColumnNumber": 32
        },
        {
            "charLength": 3,
            "startLineNumber": 732,
            "startColumnNumber": 29,
            "endLineNumber": 732,
            "endColumnNumber": 32
        },
        {
            "charLength": 3,
            "startLineNumber": 733,
            "startColumnNumber": 30,
            "endLineNumber": 733,
            "endColumnNumber": 33
        },
        {
            "charLength": 3,
            "startLineNumber": 736,
            "startColumnNumber": 42,
            "endLineNumber": 736,
            "endColumnNumber": 45
        },
        {
            "charLength": 3,
            "startLineNumber": 737,
            "startColumnNumber": 43,
            "endLineNumber": 737,
            "endColumnNumber": 46
        },
        {
            "charLength": 3,
            "startLineNumber": 739,
            "startColumnNumber": 96,
            "endLineNumber": 739,
            "endColumnNumber": 99
        },
        {
            "charLength": 3,
            "startLineNumber": 743,
            "startColumnNumber": 16,
            "endLineNumber": 743,
            "endColumnNumber": 19
        },
        {
            "charLength": 3,
            "startLineNumber": 744,
            "startColumnNumber": 36,
            "endLineNumber": 744,
            "endColumnNumber": 39
        },
        {
            "charLength": 3,
            "startLineNumber": 746,
            "startColumnNumber": 52,
            "endLineNumber": 746,
            "endColumnNumber": 55
        },
        {
            "charLength": 3,
            "startLineNumber": 749,
            "startColumnNumber": 54,
            "endLineNumber": 749,
            "endColumnNumber": 57
        },
        {
            "charLength": 3,
            "startLineNumber": 754,
            "startColumnNumber": 30,
            "endLineNumber": 754,
            "endColumnNumber": 33
        },
        {
            "charLength": 3,
            "startLineNumber": 759,
            "startColumnNumber": 26,
            "endLineNumber": 759,
            "endColumnNumber": 29
        },
        {
            "charLength": 3,
            "startLineNumber": 762,
            "startColumnNumber": 47,
            "endLineNumber": 762,
            "endColumnNumber": 50
        },
        {
            "charLength": 3,
            "startLineNumber": 764,
            "startColumnNumber": 24,
            "endLineNumber": 764,
            "endColumnNumber": 27
        },
        {
            "charLength": 3,
            "startLineNumber": 765,
            "startColumnNumber": 24,
            "endLineNumber": 765,
            "endColumnNumber": 27
        },
        {
            "charLength": 3,
            "startLineNumber": 766,
            "startColumnNumber": 24,
            "endLineNumber": 766,
            "endColumnNumber": 27
        },
        {
            "charLength": 3,
            "startLineNumber": 767,
            "startColumnNumber": 24,
            "endLineNumber": 767,
            "endColumnNumber": 27
        },
        {
            "charLength": 3,
            "startLineNumber": 773,
            "startColumnNumber": 51,
            "endLineNumber": 773,
            "endColumnNumber": 54
        },
        {
            "charLength": 3,
            "startLineNumber": 774,
            "startColumnNumber": 20,
            "endLineNumber": 774,
            "endColumnNumber": 23
        },
        {
            "charLength": 3,
            "startLineNumber": 777,
            "startColumnNumber": 24,
            "endLineNumber": 777,
            "endColumnNumber": 27
        },
        {
            "charLength": 3,
            "startLineNumber": 779,
            "startColumnNumber": 35,
            "endLineNumber": 779,
            "endColumnNumber": 38
        },
        {
            "charLength": 3,
            "startLineNumber": 781,
            "startColumnNumber": 56,
            "endLineNumber": 781,
            "endColumnNumber": 59
        },
        {
            "charLength": 3,
            "startLineNumber": 782,
            "startColumnNumber": 89,
            "endLineNumber": 782,
            "endColumnNumber": 92
        },
        {
            "charLength": 3,
            "startLineNumber": 787,
            "startColumnNumber": 28,
            "endLineNumber": 787,
            "endColumnNumber": 31
        },
        {
            "charLength": 3,
            "startLineNumber": 792,
            "startColumnNumber": 41,
            "endLineNumber": 792,
            "endColumnNumber": 44
        },
        {
            "charLength": 3,
            "startLineNumber": 797,
            "startColumnNumber": 24,
            "endLineNumber": 797,
            "endColumnNumber": 27
        },
        {
            "charLength": 3,
            "startLineNumber": 797,
            "startColumnNumber": 77,
            "endLineNumber": 797,
            "endColumnNumber": 80
        },
        {
            "charLength": 3,
            "startLineNumber": 798,
            "startColumnNumber": 24,
            "endLineNumber": 798,
            "endColumnNumber": 27
        },
        {
            "charLength": 3,
            "startLineNumber": 803,
            "startColumnNumber": 52,
            "endLineNumber": 803,
            "endColumnNumber": 55
        },
        {
            "charLength": 3,
            "startLineNumber": 812,
            "startColumnNumber": 67,
            "endLineNumber": 812,
            "endColumnNumber": 70
        },
        {
            "charLength": 3,
            "startLineNumber": 813,
            "startColumnNumber": 44,
            "endLineNumber": 813,
            "endColumnNumber": 47
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 16,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 17,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 18,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 19,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 20,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 21,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 22,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 23,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 24,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 25,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 26,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 27,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 28,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 29,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 30,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 18,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 19,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 20,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 21,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 22,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 23,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 24,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 25,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 26,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 27,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 28,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 29,
            "layout": 3
        },
        {
            "firstKey": 1,
            "secondKey": 30,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 14,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 15,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 16,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 18,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 19,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 20,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 21,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 22,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 23,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 24,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 25,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 26,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 27,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 28,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 29,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 30,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 14,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 15,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 16,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 18,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 19,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 20,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 21,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 22,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 23,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 24,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 25,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 26,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 27,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 28,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 29,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 30,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 14,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 15,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 16,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 18,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 19,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 20,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 21,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 22,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 23,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 24,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 25,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 26,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 27,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 28,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 29,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 30,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 8,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 9,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 10,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 11,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 12,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 13,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 14,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 15,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 16,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 17,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 18,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 19,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 20,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 21,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 22,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 23,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 24,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 25,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 26,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 27,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 28,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 29,
            "layout": 5
        },
        {
            "firstKey": 5,
            "secondKey": 30,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 9,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 10,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 11,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 12,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 13,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 14,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 15,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 16,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 17,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 18,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 19,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 20,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 21,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 22,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 23,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 24,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 25,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 26,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 27,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 28,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 29,
            "layout": 5
        },
        {
            "firstKey": 6,
            "secondKey": 30,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 7,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 7,
            "secondKey": 9,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 18,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 19,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 20,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 21,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 22,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 23,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 24,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 25,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 26,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 27,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 28,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 29,
            "layout": 3
        },
        {
            "firstKey": 7,
            "secondKey": 30,
            "layout": 3
        },
        {
            "firstKey": 8,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 9,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 10,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 11,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 12,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 13,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 14,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 15,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 16,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 17,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 18,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 19,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 20,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 21,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 22,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 23,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 24,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 25,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 26,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 27,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 28,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 29,
            "layout": 5
        },
        {
            "firstKey": 8,
            "secondKey": 30,
            "layout": 5
        },
        {
            "firstKey": 9,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 1,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 2,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 4,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 5,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 6,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 7,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 8,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 18,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 19,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 20,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 21,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 22,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 23,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 24,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 25,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 26,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 27,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 28,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 29,
            "layout": 3
        },
        {
            "firstKey": 9,
            "secondKey": 30,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 8,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 9,
            "layout": 5
        },
        {
            "firstKey": 10,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 14,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 17,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 18,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 19,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 20,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 21,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 22,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 23,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 24,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 25,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 26,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 27,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 28,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 29,
            "layout": 3
        },
        {
            "firstKey": 10,
            "secondKey": 30,
            "layout": 3
        },
        {
            "firstKey": 11,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 11,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 11,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 11,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 11,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 11,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 11,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 11,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 11,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 11,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 11,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 16,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 17,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 18,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 19,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 20,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 21,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 22,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 23,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 24,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 25,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 26,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 27,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 28,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 29,
            "layout": 2
        },
        {
            "firstKey": 11,
            "secondKey": 30,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 0,
            "layout": 5
        },
        {
            "firstKey": 12,
            "secondKey": 1,
            "layout": 5
        },
        {
            "firstKey": 12,
            "secondKey": 2,
            "layout": 5
        },
        {
            "firstKey": 12,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 12,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 12,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 12,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 12,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 12,
            "secondKey": 8,
            "layout": 5
        },
        {
            "firstKey": 12,
            "secondKey": 9,
            "layout": 5
        },
        {
            "firstKey": 12,
            "secondKey": 10,
            "layout": 3
        },
        {
            "firstKey": 12,
            "secondKey": 11,
            "layout": 3
        },
        {
            "firstKey": 12,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 16,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 17,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 18,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 19,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 20,
            "layout": 2
        },
        {
            "firstKey": 12,
            "secondKey": 21,
            "layout": 3
        },
        {
            "firstKey": 12,
            "secondKey": 22,
            "layout": 3
        },
        {
            "firstKey": 12,
            "secondKey": 23,
            "layout": 3
        },
        {
            "firstKey": 12,
            "secondKey": 24,
            "layout": 3
        },
        {
            "firstKey": 12,
            "secondKey": 25,
            "layout": 3
        },
        {
            "firstKey": 12,
            "secondKey": 26,
            "layout": 3
        },
        {
            "firstKey": 12,
            "secondKey": 27,
            "layout": 3
        },
        {
            "firstKey": 12,
            "secondKey": 28,
            "layout": 3
        },
        {
            "firstKey": 12,
            "secondKey": 29,
            "layout": 3
        },
        {
            "firstKey": 12,
            "secondKey": 30,
            "layout": 3
        },
        {
            "firstKey": 13,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 13,
            "secondKey": 1,
            "layout": 8
        },
        {
            "firstKey": 13,
            "secondKey": 2,
            "layout": 8
        },
        {
            "firstKey": 13,
            "secondKey": 3,
            "layout": 8
        },
        {
            "firstKey": 13,
            "secondKey": 4,
            "layout": 8
        },
        {
            "firstKey": 13,
            "secondKey": 5,
            "layout": 8
        },
        {
            "firstKey": 13,
            "secondKey": 6,
            "layout": 8
        },
        {
            "firstKey": 13,
            "secondKey": 7,
            "layout": 8
        },
        {
            "firstKey": 13,
            "secondKey": 8,
            "layout": 8
        },
        {
            "firstKey": 13,
            "secondKey": 9,
            "layout": 8
        },
        {
            "firstKey": 13,
            "secondKey": 10,
            "layout": 6
        },
        {
            "firstKey": 13,
            "secondKey": 11,
            "layout": 6
        },
        {
            "firstKey": 13,
            "secondKey": 12,
            "layout": 5
        },
        {
            "firstKey": 13,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 16,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 13,
            "secondKey": 18,
            "layout": 4
        },
        {
            "firstKey": 13,
            "secondKey": 19,
            "layout": 4
        },
        {
            "firstKey": 13,
            "secondKey": 20,
            "layout": 4
        },
        {
            "firstKey": 13,
            "secondKey": 21,
            "layout": 6
        },
        {
            "firstKey": 13,
            "secondKey": 22,
            "layout": 6
        },
        {
            "firstKey": 13,
            "secondKey": 23,
            "layout": 6
        },
        {
            "firstKey": 13,
            "secondKey": 24,
            "layout": 6
        },
        {
            "firstKey": 13,
            "secondKey": 25,
            "layout": 6
        },
        {
            "firstKey": 13,
            "secondKey": 26,
            "layout": 6
        },
        {
            "firstKey": 13,
            "secondKey": 27,
            "layout": 6
        },
        {
            "firstKey": 13,
            "secondKey": 28,
            "layout": 6
        },
        {
            "firstKey": 13,
            "secondKey": 29,
            "layout": 6
        },
        {
            "firstKey": 13,
            "secondKey": 30,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 0,
            "layout": 9
        },
        {
            "firstKey": 14,
            "secondKey": 1,
            "layout": 9
        },
        {
            "firstKey": 14,
            "secondKey": 2,
            "layout": 9
        },
        {
            "firstKey": 14,
            "secondKey": 3,
            "layout": 9
        },
        {
            "firstKey": 14,
            "secondKey": 4,
            "layout": 9
        },
        {
            "firstKey": 14,
            "secondKey": 5,
            "layout": 9
        },
        {
            "firstKey": 14,
            "secondKey": 6,
            "layout": 9
        },
        {
            "firstKey": 14,
            "secondKey": 7,
            "layout": 9
        },
        {
            "firstKey": 14,
            "secondKey": 8,
            "layout": 9
        },
        {
            "firstKey": 14,
            "secondKey": 9,
            "layout": 9
        },
        {
            "firstKey": 14,
            "secondKey": 10,
            "layout": 7
        },
        {
            "firstKey": 14,
            "secondKey": 11,
            "layout": 7
        },
        {
            "firstKey": 14,
            "secondKey": 12,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 13,
            "layout": 3
        },
        {
            "firstKey": 14,
            "secondKey": 15,
            "layout": 3
        },
        {
            "firstKey": 14,
            "secondKey": 16,
            "layout": 3
        },
        {
            "firstKey": 14,
            "secondKey": 17,
            "layout": 5
        },
        {
            "firstKey": 14,
            "secondKey": 18,
            "layout": 5
        },
        {
            "firstKey": 14,
            "secondKey": 19,
            "layout": 5
        },
        {
            "firstKey": 14,
            "secondKey": 20,
            "layout": 5
        },
        {
            "firstKey": 14,
            "secondKey": 21,
            "layout": 7
        },
        {
            "firstKey": 14,
            "secondKey": 22,
            "layout": 7
        },
        {
            "firstKey": 14,
            "secondKey": 23,
            "layout": 7
        },
        {
            "firstKey": 14,
            "secondKey": 24,
            "layout": 7
        },
        {
            "firstKey": 14,
            "secondKey": 25,
            "layout": 7
        },
        {
            "firstKey": 14,
            "secondKey": 26,
            "layout": 7
        },
        {
            "firstKey": 14,
            "secondKey": 27,
            "layout": 7
        },
        {
            "firstKey": 14,
            "secondKey": 28,
            "layout": 7
        },
        {
            "firstKey": 14,
            "secondKey": 29,
            "layout": 7
        },
        {
            "firstKey": 14,
            "secondKey": 30,
            "layout": 7
        },
        {
            "firstKey": 15,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 15,
            "secondKey": 1,
            "layout": 8
        },
        {
            "firstKey": 15,
            "secondKey": 2,
            "layout": 8
        },
        {
            "firstKey": 15,
            "secondKey": 3,
            "layout": 8
        },
        {
            "firstKey": 15,
            "secondKey": 4,
            "layout": 8
        },
        {
            "firstKey": 15,
            "secondKey": 5,
            "layout": 8
        },
        {
            "firstKey": 15,
            "secondKey": 6,
            "layout": 8
        },
        {
            "firstKey": 15,
            "secondKey": 7,
            "layout": 8
        },
        {
            "firstKey": 15,
            "secondKey": 8,
            "layout": 8
        },
        {
            "firstKey": 15,
            "secondKey": 9,
            "layout": 8
        },
        {
            "firstKey": 15,
            "secondKey": 10,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 11,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 12,
            "layout": 5
        },
        {
            "firstKey": 15,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 15,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 15,
            "secondKey": 16,
            "layout": 2
        },
        {
            "firstKey": 15,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 15,
            "secondKey": 18,
            "layout": 4
        },
        {
            "firstKey": 15,
            "secondKey": 19,
            "layout": 4
        },
        {
            "firstKey": 15,
            "secondKey": 20,
            "layout": 4
        },
        {
            "firstKey": 15,
            "secondKey": 21,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 22,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 23,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 24,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 25,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 26,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 27,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 28,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 29,
            "layout": 6
        },
        {
            "firstKey": 15,
            "secondKey": 30,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 16,
            "secondKey": 1,
            "layout": 8
        },
        {
            "firstKey": 16,
            "secondKey": 2,
            "layout": 8
        },
        {
            "firstKey": 16,
            "secondKey": 3,
            "layout": 8
        },
        {
            "firstKey": 16,
            "secondKey": 4,
            "layout": 8
        },
        {
            "firstKey": 16,
            "secondKey": 5,
            "layout": 8
        },
        {
            "firstKey": 16,
            "secondKey": 6,
            "layout": 8
        },
        {
            "firstKey": 16,
            "secondKey": 7,
            "layout": 8
        },
        {
            "firstKey": 16,
            "secondKey": 8,
            "layout": 8
        },
        {
            "firstKey": 16,
            "secondKey": 9,
            "layout": 8
        },
        {
            "firstKey": 16,
            "secondKey": 10,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 11,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 12,
            "layout": 5
        },
        {
            "firstKey": 16,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 16,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 16,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 16,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 18,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 19,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 20,
            "layout": 4
        },
        {
            "firstKey": 16,
            "secondKey": 21,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 22,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 23,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 24,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 25,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 26,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 27,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 28,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 29,
            "layout": 6
        },
        {
            "firstKey": 16,
            "secondKey": 30,
            "layout": 6
        },
        {
            "firstKey": 17,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 17,
            "secondKey": 1,
            "layout": 8
        },
        {
            "firstKey": 17,
            "secondKey": 2,
            "layout": 8
        },
        {
            "firstKey": 17,
            "secondKey": 3,
            "layout": 8
        },
        {
            "firstKey": 17,
            "secondKey": 4,
            "layout": 8
        },
        {
            "firstKey": 17,
            "secondKey": 5,
            "layout": 8
        },
        {
            "firstKey": 17,
            "secondKey": 6,
            "layout": 8
        },
        {
            "firstKey": 17,
            "secondKey": 7,
            "layout": 8
        },
        {
            "firstKey": 17,
            "secondKey": 8,
            "layout": 8
        },
        {
            "firstKey": 17,
            "secondKey": 9,
            "layout": 8
        },
        {
            "firstKey": 17,
            "secondKey": 10,
            "layout": 6
        },
        {
            "firstKey": 17,
            "secondKey": 11,
            "layout": 6
        },
        {
            "firstKey": 17,
            "secondKey": 12,
            "layout": 5
        },
        {
            "firstKey": 17,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 17,
            "secondKey": 14,
            "layout": 4
        },
        {
            "firstKey": 17,
            "secondKey": 15,
            "layout": 4
        },
        {
            "firstKey": 17,
            "secondKey": 16,
            "layout": 4
        },
        {
            "firstKey": 17,
            "secondKey": 18,
            "layout": 4
        },
        {
            "firstKey": 17,
            "secondKey": 19,
            "layout": 4
        },
        {
            "firstKey": 17,
            "secondKey": 20,
            "layout": 4
        },
        {
            "firstKey": 17,
            "secondKey": 21,
            "layout": 6
        },
        {
            "firstKey": 17,
            "secondKey": 22,
            "layout": 6
        },
        {
            "firstKey": 17,
            "secondKey": 23,
            "layout": 6
        },
        {
            "firstKey": 17,
            "secondKey": 24,
            "layout": 6
        },
        {
            "firstKey": 17,
            "secondKey": 25,
            "layout": 6
        },
        {
            "firstKey": 17,
            "secondKey": 26,
            "layout": 6
        },
        {
            "firstKey": 17,
            "secondKey": 27,
            "layout": 6
        },
        {
            "firstKey": 17,
            "secondKey": 28,
            "layout": 6
        },
        {
            "firstKey": 17,
            "secondKey": 29,
            "layout": 6
        },
        {
            "firstKey": 17,
            "secondKey": 30,
            "layout": 6
        },
        {
            "firstKey": 18,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 18,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 18,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 18,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 18,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 18,
            "secondKey": 5,
            "layout": 6
        },
        {
            "firstKey": 18,
            "secondKey": 6,
            "layout": 6
        },
        {
            "firstKey": 18,
            "secondKey": 7,
            "layout": 6
        },
        {
            "firstKey": 18,
            "secondKey": 8,
            "layout": 6
        },
        {
            "firstKey": 18,
            "secondKey": 9,
            "layout": 6
        },
        {
            "firstKey": 18,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 18,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 18,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 18,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 18,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 18,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 18,
            "secondKey": 16,
            "layout": 2
        },
        {
            "firstKey": 18,
            "secondKey": 17,
            "layout": 2
        },
        {
            "firstKey": 18,
            "secondKey": 19,
            "layout": 2
        },
        {
            "firstKey": 18,
            "secondKey": 20,
            "layout": 2
        },
        {
            "firstKey": 18,
            "secondKey": 21,
            "layout": 4
        },
        {
            "firstKey": 18,
            "secondKey": 22,
            "layout": 4
        },
        {
            "firstKey": 18,
            "secondKey": 23,
            "layout": 4
        },
        {
            "firstKey": 18,
            "secondKey": 24,
            "layout": 4
        },
        {
            "firstKey": 18,
            "secondKey": 25,
            "layout": 4
        },
        {
            "firstKey": 18,
            "secondKey": 26,
            "layout": 4
        },
        {
            "firstKey": 18,
            "secondKey": 27,
            "layout": 4
        },
        {
            "firstKey": 18,
            "secondKey": 28,
            "layout": 4
        },
        {
            "firstKey": 18,
            "secondKey": 29,
            "layout": 4
        },
        {
            "firstKey": 18,
            "secondKey": 30,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 19,
            "secondKey": 1,
            "layout": 8
        },
        {
            "firstKey": 19,
            "secondKey": 2,
            "layout": 8
        },
        {
            "firstKey": 19,
            "secondKey": 3,
            "layout": 8
        },
        {
            "firstKey": 19,
            "secondKey": 4,
            "layout": 8
        },
        {
            "firstKey": 19,
            "secondKey": 5,
            "layout": 8
        },
        {
            "firstKey": 19,
            "secondKey": 6,
            "layout": 8
        },
        {
            "firstKey": 19,
            "secondKey": 7,
            "layout": 8
        },
        {
            "firstKey": 19,
            "secondKey": 8,
            "layout": 8
        },
        {
            "firstKey": 19,
            "secondKey": 9,
            "layout": 8
        },
        {
            "firstKey": 19,
            "secondKey": 10,
            "layout": 6
        },
        {
            "firstKey": 19,
            "secondKey": 11,
            "layout": 6
        },
        {
            "firstKey": 19,
            "secondKey": 12,
            "layout": 5
        },
        {
            "firstKey": 19,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 14,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 15,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 16,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 18,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 20,
            "layout": 4
        },
        {
            "firstKey": 19,
            "secondKey": 21,
            "layout": 6
        },
        {
            "firstKey": 19,
            "secondKey": 22,
            "layout": 6
        },
        {
            "firstKey": 19,
            "secondKey": 23,
            "layout": 6
        },
        {
            "firstKey": 19,
            "secondKey": 24,
            "layout": 6
        },
        {
            "firstKey": 19,
            "secondKey": 25,
            "layout": 6
        },
        {
            "firstKey": 19,
            "secondKey": 26,
            "layout": 6
        },
        {
            "firstKey": 19,
            "secondKey": 27,
            "layout": 6
        },
        {
            "firstKey": 19,
            "secondKey": 28,
            "layout": 6
        },
        {
            "firstKey": 19,
            "secondKey": 29,
            "layout": 6
        },
        {
            "firstKey": 19,
            "secondKey": 30,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 5,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 6,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 7,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 8,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 9,
            "layout": 6
        },
        {
            "firstKey": 20,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 20,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 20,
            "secondKey": 12,
            "layout": 3
        },
        {
            "firstKey": 20,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 20,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 20,
            "secondKey": 15,
            "layout": 2
        },
        {
            "firstKey": 20,
            "secondKey": 16,
            "layout": 2
        },
        {
            "firstKey": 20,
            "secondKey": 17,
            "layout": 2
        },
        {
            "firstKey": 20,
            "secondKey": 18,
            "layout": 2
        },
        {
            "firstKey": 20,
            "secondKey": 19,
            "layout": 2
        },
        {
            "firstKey": 20,
            "secondKey": 21,
            "layout": 4
        },
        {
            "firstKey": 20,
            "secondKey": 22,
            "layout": 4
        },
        {
            "firstKey": 20,
            "secondKey": 23,
            "layout": 4
        },
        {
            "firstKey": 20,
            "secondKey": 24,
            "layout": 4
        },
        {
            "firstKey": 20,
            "secondKey": 25,
            "layout": 4
        },
        {
            "firstKey": 20,
            "secondKey": 26,
            "layout": 4
        },
        {
            "firstKey": 20,
            "secondKey": 27,
            "layout": 4
        },
        {
            "firstKey": 20,
            "secondKey": 28,
            "layout": 4
        },
        {
            "firstKey": 20,
            "secondKey": 29,
            "layout": 4
        },
        {
            "firstKey": 20,
            "secondKey": 30,
            "layout": 4
        },
        {
            "firstKey": 21,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 21,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 21,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 21,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 21,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 21,
            "secondKey": 5,
            "layout": 6
        },
        {
            "firstKey": 21,
            "secondKey": 6,
            "layout": 6
        },
        {
            "firstKey": 21,
            "secondKey": 7,
            "layout": 6
        },
        {
            "firstKey": 21,
            "secondKey": 8,
            "layout": 6
        },
        {
            "firstKey": 21,
            "secondKey": 9,
            "layout": 6
        },
        {
            "firstKey": 21,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 21,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 21,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 21,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 21,
            "secondKey": 14,
            "layout": 4
        },
        {
            "firstKey": 21,
            "secondKey": 15,
            "layout": 4
        },
        {
            "firstKey": 21,
            "secondKey": 16,
            "layout": 4
        },
        {
            "firstKey": 21,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 21,
            "secondKey": 18,
            "layout": 4
        },
        {
            "firstKey": 21,
            "secondKey": 19,
            "layout": 4
        },
        {
            "firstKey": 21,
            "secondKey": 20,
            "layout": 4
        },
        {
            "firstKey": 21,
            "secondKey": 22,
            "layout": 3
        },
        {
            "firstKey": 21,
            "secondKey": 23,
            "layout": 4
        },
        {
            "firstKey": 21,
            "secondKey": 24,
            "layout": 4
        },
        {
            "firstKey": 21,
            "secondKey": 25,
            "layout": 4
        },
        {
            "firstKey": 21,
            "secondKey": 26,
            "layout": 4
        },
        {
            "firstKey": 21,
            "secondKey": 27,
            "layout": 4
        },
        {
            "firstKey": 21,
            "secondKey": 28,
            "layout": 4
        },
        {
            "firstKey": 21,
            "secondKey": 29,
            "layout": 4
        },
        {
            "firstKey": 21,
            "secondKey": 30,
            "layout": 4
        },
        {
            "firstKey": 22,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 22,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 22,
            "secondKey": 2,
            "layout": 7
        },
        {
            "firstKey": 22,
            "secondKey": 3,
            "layout": 7
        },
        {
            "firstKey": 22,
            "secondKey": 4,
            "layout": 7
        },
        {
            "firstKey": 22,
            "secondKey": 5,
            "layout": 7
        },
        {
            "firstKey": 22,
            "secondKey": 6,
            "layout": 7
        },
        {
            "firstKey": 22,
            "secondKey": 7,
            "layout": 7
        },
        {
            "firstKey": 22,
            "secondKey": 8,
            "layout": 7
        },
        {
            "firstKey": 22,
            "secondKey": 9,
            "layout": 7
        },
        {
            "firstKey": 22,
            "secondKey": 10,
            "layout": 5
        },
        {
            "firstKey": 22,
            "secondKey": 11,
            "layout": 5
        },
        {
            "firstKey": 22,
            "secondKey": 12,
            "layout": 5
        },
        {
            "firstKey": 22,
            "secondKey": 13,
            "layout": 5
        },
        {
            "firstKey": 22,
            "secondKey": 14,
            "layout": 5
        },
        {
            "firstKey": 22,
            "secondKey": 15,
            "layout": 5
        },
        {
            "firstKey": 22,
            "secondKey": 16,
            "layout": 5
        },
        {
            "firstKey": 22,
            "secondKey": 17,
            "layout": 5
        },
        {
            "firstKey": 22,
            "secondKey": 18,
            "layout": 5
        },
        {
            "firstKey": 22,
            "secondKey": 19,
            "layout": 5
        },
        {
            "firstKey": 22,
            "secondKey": 20,
            "layout": 5
        },
        {
            "firstKey": 22,
            "secondKey": 21,
            "layout": 4
        },
        {
            "firstKey": 22,
            "secondKey": 23,
            "layout": 5
        },
        {
            "firstKey": 22,
            "secondKey": 24,
            "layout": 5
        },
        {
            "firstKey": 22,
            "secondKey": 25,
            "layout": 5
        },
        {
            "firstKey": 22,
            "secondKey": 26,
            "layout": 5
        },
        {
            "firstKey": 22,
            "secondKey": 27,
            "layout": 5
        },
        {
            "firstKey": 22,
            "secondKey": 28,
            "layout": 5
        },
        {
            "firstKey": 22,
            "secondKey": 29,
            "layout": 5
        },
        {
            "firstKey": 22,
            "secondKey": 30,
            "layout": 5
        },
        {
            "firstKey": 23,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 23,
            "secondKey": 1,
            "layout": 8
        },
        {
            "firstKey": 23,
            "secondKey": 2,
            "layout": 8
        },
        {
            "firstKey": 23,
            "secondKey": 3,
            "layout": 8
        },
        {
            "firstKey": 23,
            "secondKey": 4,
            "layout": 8
        },
        {
            "firstKey": 23,
            "secondKey": 5,
            "layout": 8
        },
        {
            "firstKey": 23,
            "secondKey": 6,
            "layout": 8
        },
        {
            "firstKey": 23,
            "secondKey": 7,
            "layout": 8
        },
        {
            "firstKey": 23,
            "secondKey": 8,
            "layout": 8
        },
        {
            "firstKey": 23,
            "secondKey": 9,
            "layout": 8
        },
        {
            "firstKey": 23,
            "secondKey": 10,
            "layout": 6
        },
        {
            "firstKey": 23,
            "secondKey": 11,
            "layout": 6
        },
        {
            "firstKey": 23,
            "secondKey": 12,
            "layout": 6
        },
        {
            "firstKey": 23,
            "secondKey": 13,
            "layout": 6
        },
        {
            "firstKey": 23,
            "secondKey": 14,
            "layout": 6
        },
        {
            "firstKey": 23,
            "secondKey": 15,
            "layout": 6
        },
        {
            "firstKey": 23,
            "secondKey": 16,
            "layout": 6
        },
        {
            "firstKey": 23,
            "secondKey": 17,
            "layout": 6
        },
        {
            "firstKey": 23,
            "secondKey": 18,
            "layout": 6
        },
        {
            "firstKey": 23,
            "secondKey": 19,
            "layout": 6
        },
        {
            "firstKey": 23,
            "secondKey": 20,
            "layout": 6
        },
        {
            "firstKey": 23,
            "secondKey": 21,
            "layout": 6
        },
        {
            "firstKey": 23,
            "secondKey": 22,
            "layout": 6
        },
        {
            "firstKey": 23,
            "secondKey": 24,
            "layout": 5
        },
        {
            "firstKey": 23,
            "secondKey": 25,
            "layout": 6
        },
        {
            "firstKey": 23,
            "secondKey": 26,
            "layout": 6
        },
        {
            "firstKey": 23,
            "secondKey": 27,
            "layout": 6
        },
        {
            "firstKey": 23,
            "secondKey": 28,
            "layout": 6
        },
        {
            "firstKey": 23,
            "secondKey": 29,
            "layout": 6
        },
        {
            "firstKey": 23,
            "secondKey": 30,
            "layout": 6
        },
        {
            "firstKey": 24,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 24,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 24,
            "secondKey": 2,
            "layout": 7
        },
        {
            "firstKey": 24,
            "secondKey": 3,
            "layout": 7
        },
        {
            "firstKey": 24,
            "secondKey": 4,
            "layout": 7
        },
        {
            "firstKey": 24,
            "secondKey": 5,
            "layout": 7
        },
        {
            "firstKey": 24,
            "secondKey": 6,
            "layout": 7
        },
        {
            "firstKey": 24,
            "secondKey": 7,
            "layout": 7
        },
        {
            "firstKey": 24,
            "secondKey": 8,
            "layout": 7
        },
        {
            "firstKey": 24,
            "secondKey": 9,
            "layout": 7
        },
        {
            "firstKey": 24,
            "secondKey": 10,
            "layout": 5
        },
        {
            "firstKey": 24,
            "secondKey": 11,
            "layout": 5
        },
        {
            "firstKey": 24,
            "secondKey": 12,
            "layout": 5
        },
        {
            "firstKey": 24,
            "secondKey": 13,
            "layout": 5
        },
        {
            "firstKey": 24,
            "secondKey": 14,
            "layout": 5
        },
        {
            "firstKey": 24,
            "secondKey": 15,
            "layout": 5
        },
        {
            "firstKey": 24,
            "secondKey": 16,
            "layout": 5
        },
        {
            "firstKey": 24,
            "secondKey": 17,
            "layout": 5
        },
        {
            "firstKey": 24,
            "secondKey": 18,
            "layout": 5
        },
        {
            "firstKey": 24,
            "secondKey": 19,
            "layout": 5
        },
        {
            "firstKey": 24,
            "secondKey": 20,
            "layout": 5
        },
        {
            "firstKey": 24,
            "secondKey": 21,
            "layout": 5
        },
        {
            "firstKey": 24,
            "secondKey": 22,
            "layout": 5
        },
        {
            "firstKey": 24,
            "secondKey": 23,
            "layout": 4
        },
        {
            "firstKey": 24,
            "secondKey": 25,
            "layout": 5
        },
        {
            "firstKey": 24,
            "secondKey": 26,
            "layout": 5
        },
        {
            "firstKey": 24,
            "secondKey": 27,
            "layout": 5
        },
        {
            "firstKey": 24,
            "secondKey": 28,
            "layout": 5
        },
        {
            "firstKey": 24,
            "secondKey": 29,
            "layout": 5
        },
        {
            "firstKey": 24,
            "secondKey": 30,
            "layout": 5
        },
        {
            "firstKey": 25,
            "secondKey": 0,
            "layout": 7
        },
        {
            "firstKey": 25,
            "secondKey": 1,
            "layout": 7
        },
        {
            "firstKey": 25,
            "secondKey": 2,
            "layout": 7
        },
        {
            "firstKey": 25,
            "secondKey": 3,
            "layout": 7
        },
        {
            "firstKey": 25,
            "secondKey": 4,
            "layout": 7
        },
        {
            "firstKey": 25,
            "secondKey": 5,
            "layout": 7
        },
        {
            "firstKey": 25,
            "secondKey": 6,
            "layout": 7
        },
        {
            "firstKey": 25,
            "secondKey": 7,
            "layout": 7
        },
        {
            "firstKey": 25,
            "secondKey": 8,
            "layout": 7
        },
        {
            "firstKey": 25,
            "secondKey": 9,
            "layout": 7
        },
        {
            "firstKey": 25,
            "secondKey": 10,
            "layout": 5
        },
        {
            "firstKey": 25,
            "secondKey": 11,
            "layout": 5
        },
        {
            "firstKey": 25,
            "secondKey": 12,
            "layout": 5
        },
        {
            "firstKey": 25,
            "secondKey": 13,
            "layout": 5
        },
        {
            "firstKey": 25,
            "secondKey": 14,
            "layout": 5
        },
        {
            "firstKey": 25,
            "secondKey": 15,
            "layout": 5
        },
        {
            "firstKey": 25,
            "secondKey": 16,
            "layout": 5
        },
        {
            "firstKey": 25,
            "secondKey": 17,
            "layout": 5
        },
        {
            "firstKey": 25,
            "secondKey": 18,
            "layout": 5
        },
        {
            "firstKey": 25,
            "secondKey": 19,
            "layout": 5
        },
        {
            "firstKey": 25,
            "secondKey": 20,
            "layout": 5
        },
        {
            "firstKey": 25,
            "secondKey": 21,
            "layout": 5
        },
        {
            "firstKey": 25,
            "secondKey": 22,
            "layout": 5
        },
        {
            "firstKey": 25,
            "secondKey": 23,
            "layout": 5
        },
        {
            "firstKey": 25,
            "secondKey": 24,
            "layout": 5
        },
        {
            "firstKey": 25,
            "secondKey": 26,
            "layout": 1
        },
        {
            "firstKey": 25,
            "secondKey": 27,
            "layout": 2
        },
        {
            "firstKey": 25,
            "secondKey": 28,
            "layout": 5
        },
        {
            "firstKey": 25,
            "secondKey": 29,
            "layout": 5
        },
        {
            "firstKey": 25,
            "secondKey": 30,
            "layout": 5
        },
        {
            "firstKey": 26,
            "secondKey": 0,
            "layout": 10
        },
        {
            "firstKey": 26,
            "secondKey": 1,
            "layout": 10
        },
        {
            "firstKey": 26,
            "secondKey": 2,
            "layout": 10
        },
        {
            "firstKey": 26,
            "secondKey": 3,
            "layout": 10
        },
        {
            "firstKey": 26,
            "secondKey": 4,
            "layout": 10
        },
        {
            "firstKey": 26,
            "secondKey": 5,
            "layout": 10
        },
        {
            "firstKey": 26,
            "secondKey": 6,
            "layout": 10
        },
        {
            "firstKey": 26,
            "secondKey": 7,
            "layout": 10
        },
        {
            "firstKey": 26,
            "secondKey": 8,
            "layout": 10
        },
        {
            "firstKey": 26,
            "secondKey": 9,
            "layout": 10
        },
        {
            "firstKey": 26,
            "secondKey": 10,
            "layout": 8
        },
        {
            "firstKey": 26,
            "secondKey": 11,
            "layout": 8
        },
        {
            "firstKey": 26,
            "secondKey": 12,
            "layout": 8
        },
        {
            "firstKey": 26,
            "secondKey": 13,
            "layout": 8
        },
        {
            "firstKey": 26,
            "secondKey": 14,
            "layout": 8
        },
        {
            "firstKey": 26,
            "secondKey": 15,
            "layout": 8
        },
        {
            "firstKey": 26,
            "secondKey": 16,
            "layout": 8
        },
        {
            "firstKey": 26,
            "secondKey": 17,
            "layout": 8
        },
        {
            "firstKey": 26,
            "secondKey": 18,
            "layout": 8
        },
        {
            "firstKey": 26,
            "secondKey": 19,
            "layout": 8
        },
        {
            "firstKey": 26,
            "secondKey": 20,
            "layout": 8
        },
        {
            "firstKey": 26,
            "secondKey": 21,
            "layout": 8
        },
        {
            "firstKey": 26,
            "secondKey": 22,
            "layout": 8
        },
        {
            "firstKey": 26,
            "secondKey": 23,
            "layout": 8
        },
        {
            "firstKey": 26,
            "secondKey": 24,
            "layout": 8
        },
        {
            "firstKey": 26,
            "secondKey": 25,
            "layout": 4
        },
        {
            "firstKey": 26,
            "secondKey": 27,
            "layout": 5
        },
        {
            "firstKey": 26,
            "secondKey": 28,
            "layout": 8
        },
        {
            "firstKey": 26,
            "secondKey": 29,
            "layout": 8
        },
        {
            "firstKey": 26,
            "secondKey": 30,
            "layout": 8
        },
        {
            "firstKey": 27,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 27,
            "secondKey": 1,
            "layout": 8
        },
        {
            "firstKey": 27,
            "secondKey": 2,
            "layout": 8
        },
        {
            "firstKey": 27,
            "secondKey": 3,
            "layout": 8
        },
        {
            "firstKey": 27,
            "secondKey": 4,
            "layout": 8
        },
        {
            "firstKey": 27,
            "secondKey": 5,
            "layout": 8
        },
        {
            "firstKey": 27,
            "secondKey": 6,
            "layout": 8
        },
        {
            "firstKey": 27,
            "secondKey": 7,
            "layout": 8
        },
        {
            "firstKey": 27,
            "secondKey": 8,
            "layout": 8
        },
        {
            "firstKey": 27,
            "secondKey": 9,
            "layout": 8
        },
        {
            "firstKey": 27,
            "secondKey": 10,
            "layout": 6
        },
        {
            "firstKey": 27,
            "secondKey": 11,
            "layout": 6
        },
        {
            "firstKey": 27,
            "secondKey": 12,
            "layout": 6
        },
        {
            "firstKey": 27,
            "secondKey": 13,
            "layout": 6
        },
        {
            "firstKey": 27,
            "secondKey": 14,
            "layout": 6
        },
        {
            "firstKey": 27,
            "secondKey": 15,
            "layout": 6
        },
        {
            "firstKey": 27,
            "secondKey": 16,
            "layout": 6
        },
        {
            "firstKey": 27,
            "secondKey": 17,
            "layout": 6
        },
        {
            "firstKey": 27,
            "secondKey": 18,
            "layout": 6
        },
        {
            "firstKey": 27,
            "secondKey": 19,
            "layout": 6
        },
        {
            "firstKey": 27,
            "secondKey": 20,
            "layout": 6
        },
        {
            "firstKey": 27,
            "secondKey": 21,
            "layout": 6
        },
        {
            "firstKey": 27,
            "secondKey": 22,
            "layout": 6
        },
        {
            "firstKey": 27,
            "secondKey": 23,
            "layout": 6
        },
        {
            "firstKey": 27,
            "secondKey": 24,
            "layout": 6
        },
        {
            "firstKey": 27,
            "secondKey": 25,
            "layout": 3
        },
        {
            "firstKey": 27,
            "secondKey": 26,
            "layout": 3
        },
        {
            "firstKey": 27,
            "secondKey": 28,
            "layout": 6
        },
        {
            "firstKey": 27,
            "secondKey": 29,
            "layout": 6
        },
        {
            "firstKey": 27,
            "secondKey": 30,
            "layout": 6
        },
        {
            "firstKey": 28,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 28,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 28,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 28,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 28,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 28,
            "secondKey": 5,
            "layout": 6
        },
        {
            "firstKey": 28,
            "secondKey": 6,
            "layout": 6
        },
        {
            "firstKey": 28,
            "secondKey": 7,
            "layout": 6
        },
        {
            "firstKey": 28,
            "secondKey": 8,
            "layout": 6
        },
        {
            "firstKey": 28,
            "secondKey": 9,
            "layout": 6
        },
        {
            "firstKey": 28,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 28,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 28,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 28,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 28,
            "secondKey": 14,
            "layout": 4
        },
        {
            "firstKey": 28,
            "secondKey": 15,
            "layout": 4
        },
        {
            "firstKey": 28,
            "secondKey": 16,
            "layout": 4
        },
        {
            "firstKey": 28,
            "secondKey": 17,
            "layout": 4
        },
        {
            "firstKey": 28,
            "secondKey": 18,
            "layout": 4
        },
        {
            "firstKey": 28,
            "secondKey": 19,
            "layout": 4
        },
        {
            "firstKey": 28,
            "secondKey": 20,
            "layout": 4
        },
        {
            "firstKey": 28,
            "secondKey": 21,
            "layout": 4
        },
        {
            "firstKey": 28,
            "secondKey": 22,
            "layout": 4
        },
        {
            "firstKey": 28,
            "secondKey": 23,
            "layout": 4
        },
        {
            "firstKey": 28,
            "secondKey": 24,
            "layout": 4
        },
        {
            "firstKey": 28,
            "secondKey": 25,
            "layout": 4
        },
        {
            "firstKey": 28,
            "secondKey": 26,
            "layout": 4
        },
        {
            "firstKey": 28,
            "secondKey": 27,
            "layout": 4
        },
        {
            "firstKey": 28,
            "secondKey": 29,
            "layout": 3
        },
        {
            "firstKey": 28,
            "secondKey": 30,
            "layout": 3
        },
        {
            "firstKey": 29,
            "secondKey": 0,
            "layout": 9
        },
        {
            "firstKey": 29,
            "secondKey": 1,
            "layout": 9
        },
        {
            "firstKey": 29,
            "secondKey": 2,
            "layout": 9
        },
        {
            "firstKey": 29,
            "secondKey": 3,
            "layout": 9
        },
        {
            "firstKey": 29,
            "secondKey": 4,
            "layout": 9
        },
        {
            "firstKey": 29,
            "secondKey": 5,
            "layout": 9
        },
        {
            "firstKey": 29,
            "secondKey": 6,
            "layout": 9
        },
        {
            "firstKey": 29,
            "secondKey": 7,
            "layout": 9
        },
        {
            "firstKey": 29,
            "secondKey": 8,
            "layout": 9
        },
        {
            "firstKey": 29,
            "secondKey": 9,
            "layout": 9
        },
        {
            "firstKey": 29,
            "secondKey": 10,
            "layout": 7
        },
        {
            "firstKey": 29,
            "secondKey": 11,
            "layout": 7
        },
        {
            "firstKey": 29,
            "secondKey": 12,
            "layout": 7
        },
        {
            "firstKey": 29,
            "secondKey": 13,
            "layout": 7
        },
        {
            "firstKey": 29,
            "secondKey": 14,
            "layout": 7
        },
        {
            "firstKey": 29,
            "secondKey": 15,
            "layout": 7
        },
        {
            "firstKey": 29,
            "secondKey": 16,
            "layout": 7
        },
        {
            "firstKey": 29,
            "secondKey": 17,
            "layout": 7
        },
        {
            "firstKey": 29,
            "secondKey": 18,
            "layout": 7
        },
        {
            "firstKey": 29,
            "secondKey": 19,
            "layout": 7
        },
        {
            "firstKey": 29,
            "secondKey": 20,
            "layout": 7
        },
        {
            "firstKey": 29,
            "secondKey": 21,
            "layout": 7
        },
        {
            "firstKey": 29,
            "secondKey": 22,
            "layout": 7
        },
        {
            "firstKey": 29,
            "secondKey": 23,
            "layout": 7
        },
        {
            "firstKey": 29,
            "secondKey": 24,
            "layout": 7
        },
        {
            "firstKey": 29,
            "secondKey": 25,
            "layout": 7
        },
        {
            "firstKey": 29,
            "secondKey": 26,
            "layout": 7
        },
        {
            "firstKey": 29,
            "secondKey": 27,
            "layout": 7
        },
        {
            "firstKey": 29,
            "secondKey": 28,
            "layout": 6
        },
        {
            "firstKey": 29,
            "secondKey": 30,
            "layout": 2
        },
        {
            "firstKey": 30,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 30,
            "secondKey": 1,
            "layout": 8
        },
        {
            "firstKey": 30,
            "secondKey": 2,
            "layout": 8
        },
        {
            "firstKey": 30,
            "secondKey": 3,
            "layout": 8
        },
        {
            "firstKey": 30,
            "secondKey": 4,
            "layout": 8
        },
        {
            "firstKey": 30,
            "secondKey": 5,
            "layout": 8
        },
        {
            "firstKey": 30,
            "secondKey": 6,
            "layout": 8
        },
        {
            "firstKey": 30,
            "secondKey": 7,
            "layout": 8
        },
        {
            "firstKey": 30,
            "secondKey": 8,
            "layout": 8
        },
        {
            "firstKey": 30,
            "secondKey": 9,
            "layout": 8
        },
        {
            "firstKey": 30,
            "secondKey": 10,
            "layout": 6
        },
        {
            "firstKey": 30,
            "secondKey": 11,
            "layout": 6
        },
        {
            "firstKey": 30,
            "secondKey": 12,
            "layout": 6
        },
        {
            "firstKey": 30,
            "secondKey": 13,
            "layout": 6
        },
        {
            "firstKey": 30,
            "secondKey": 14,
            "layout": 6
        },
        {
            "firstKey": 30,
            "secondKey": 15,
            "layout": 6
        },
        {
            "firstKey": 30,
            "secondKey": 16,
            "layout": 6
        },
        {
            "firstKey": 30,
            "secondKey": 17,
            "layout": 6
        },
        {
            "firstKey": 30,
            "secondKey": 18,
            "layout": 6
        },
        {
            "firstKey": 30,
            "secondKey": 19,
            "layout": 6
        },
        {
            "firstKey": 30,
            "secondKey": 20,
            "layout": 6
        },
        {
            "firstKey": 30,
            "secondKey": 21,
            "layout": 6
        },
        {
            "firstKey": 30,
            "secondKey": 22,
            "layout": 6
        },
        {
            "firstKey": 30,
            "secondKey": 23,
            "layout": 6
        },
        {
            "firstKey": 30,
            "secondKey": 24,
            "layout": 6
        },
        {
            "firstKey": 30,
            "secondKey": 25,
            "layout": 6
        },
        {
            "firstKey": 30,
            "secondKey": 26,
            "layout": 6
        },
        {
            "firstKey": 30,
            "secondKey": 27,
            "layout": 6
        },
        {
            "firstKey": 30,
            "secondKey": 28,
            "layout": 5
        },
        {
            "firstKey": 30,
            "secondKey": 29,
            "layout": 1
        }
    ]
}