{
    "id": 5405,
    "expression": "row",
    "projectName": "commons-math",
    "commitID": "7e7207cd4fa31f8f75b9a8a309c98c12fb672a7b",
    "filePath": "src/java/org/apache/commons/math/linear/RealMatrixImpl.java",
    "occurrences": 15,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "row",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 786,
                "startColumnNumber": 26,
                "endLineNumber": 786,
                "endColumnNumber": 29
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
                    "nodePosition": {
                        "charLength": 11,
                        "startLineNumber": 786,
                        "startColumnNumber": 26,
                        "endLineNumber": 786,
                        "endColumnNumber": 37
                    },
                    "nodeContext": "row < nRows",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 85,
                        "startLineNumber": 786,
                        "startColumnNumber": 8,
                        "endLineNumber": 788,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int row=0; row < nRows; row++) {\n  permutation[row]=row;\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 18,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2284,
                        "startLineNumber": 775,
                        "startColumnNumber": 60,
                        "endLineNumber": 847,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  int nRows=this.getRowDimension();\n  int nCols=this.getColumnDimension();\n  if (nRows != nCols) {\n    throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");\n  }\n  lu=this.getData();\n  permutation=new int[nRows];\n  for (int row=0; row < nRows; row++) {\n    permutation[row]=row;\n  }\n  parity=1;\n  for (int col=0; col < nCols; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < row; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n    }\n    int max=col;\n    double largest=0d;\n    for (int row=col; row < nRows; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < col; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < TOO_SMALL) {\n      lu=null;\n      throw new InvalidMatrixException(\"matrix is singular\");\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < nCols; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=permutation[max];\n      permutation[max]=permutation[col];\n      permutation[col]=temp;\n      parity=-parity;\n    }\n    for (int row=col + 1; row < nRows; row++) {\n      lu[row][col]/=lu[col][col];\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 338,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3223,
                        "startLineNumber": 757,
                        "startColumnNumber": 4,
                        "endLineNumber": 847,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Computes a new <a href=\"http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf\"> LU decomposition</a> for this matrix, storing the result for use by other methods. <p> <strong>Implementation Note</strong>:<br> Uses <a href=\"http://www.damtp.cam.ac.uk/user/fdl/people/sd/lectures/nummeth98/linear.htm\"> Crout's algorithm</a>, with partial pivoting.</p> <p> <strong>Usage Note</strong>:<br> This method should rarely be invoked directly. Its only use is to force recomputation of the LU decomposition when changes have been made to the underlying data using direct array references. Changes made using setXxx methods will trigger recomputation when needed automatically.</p>\n * @throws InvalidMatrixException if the matrix is non-square or singular.\n */\npublic void luDecompose() throws InvalidMatrixException {\n  int nRows=this.getRowDimension();\n  int nCols=this.getColumnDimension();\n  if (nRows != nCols) {\n    throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");\n  }\n  lu=this.getData();\n  permutation=new int[nRows];\n  for (int row=0; row < nRows; row++) {\n    permutation[row]=row;\n  }\n  parity=1;\n  for (int col=0; col < nCols; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < row; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n    }\n    int max=col;\n    double largest=0d;\n    for (int row=col; row < nRows; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < col; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < TOO_SMALL) {\n      lu=null;\n      throw new InvalidMatrixException(\"matrix is singular\");\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < nCols; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=permutation[max];\n      permutation[max]=permutation[col];\n      permutation[col]=temp;\n      parity=-parity;\n    }\n    for (int row=col + 1; row < nRows; row++) {\n      lu[row][col]/=lu[col][col];\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 345,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
                "nodePosition": {
                    "charLength": 11,
                    "startLineNumber": 786,
                    "startColumnNumber": 26,
                    "endLineNumber": 786,
                    "endColumnNumber": 37
                },
                "nodeContext": "row < nRows",
                "nodeType": "InfixExpression",
                "astNodeNumber": 3,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "row",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 787,
                "startColumnNumber": 24,
                "endLineNumber": 787,
                "endColumnNumber": 27
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
                    "nodePosition": {
                        "charLength": 16,
                        "startLineNumber": 787,
                        "startColumnNumber": 12,
                        "endLineNumber": 787,
                        "endColumnNumber": 28
                    },
                    "nodeContext": "permutation[row]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 22,
                        "startLineNumber": 787,
                        "startColumnNumber": 12,
                        "endLineNumber": 787,
                        "endColumnNumber": 34
                    },
                    "nodeContext": "permutation[row]=row",
                    "nodeType": "Assignment",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 23,
                        "startLineNumber": 787,
                        "startColumnNumber": 12,
                        "endLineNumber": 787,
                        "endColumnNumber": 35
                    },
                    "nodeContext": "permutation[row]=row;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 6,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 47,
                        "startLineNumber": 786,
                        "startColumnNumber": 46,
                        "endLineNumber": 788,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  permutation[row]=row;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 7,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 85,
                        "startLineNumber": 786,
                        "startColumnNumber": 8,
                        "endLineNumber": 788,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int row=0; row < nRows; row++) {\n  permutation[row]=row;\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 18,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2284,
                        "startLineNumber": 775,
                        "startColumnNumber": 60,
                        "endLineNumber": 847,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  int nRows=this.getRowDimension();\n  int nCols=this.getColumnDimension();\n  if (nRows != nCols) {\n    throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");\n  }\n  lu=this.getData();\n  permutation=new int[nRows];\n  for (int row=0; row < nRows; row++) {\n    permutation[row]=row;\n  }\n  parity=1;\n  for (int col=0; col < nCols; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < row; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n    }\n    int max=col;\n    double largest=0d;\n    for (int row=col; row < nRows; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < col; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < TOO_SMALL) {\n      lu=null;\n      throw new InvalidMatrixException(\"matrix is singular\");\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < nCols; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=permutation[max];\n      permutation[max]=permutation[col];\n      permutation[col]=temp;\n      parity=-parity;\n    }\n    for (int row=col + 1; row < nRows; row++) {\n      lu[row][col]/=lu[col][col];\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 338,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3223,
                        "startLineNumber": 757,
                        "startColumnNumber": 4,
                        "endLineNumber": 847,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Computes a new <a href=\"http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf\"> LU decomposition</a> for this matrix, storing the result for use by other methods. <p> <strong>Implementation Note</strong>:<br> Uses <a href=\"http://www.damtp.cam.ac.uk/user/fdl/people/sd/lectures/nummeth98/linear.htm\"> Crout's algorithm</a>, with partial pivoting.</p> <p> <strong>Usage Note</strong>:<br> This method should rarely be invoked directly. Its only use is to force recomputation of the LU decomposition when changes have been made to the underlying data using direct array references. Changes made using setXxx methods will trigger recomputation when needed automatically.</p>\n * @throws InvalidMatrixException if the matrix is non-square or singular.\n */\npublic void luDecompose() throws InvalidMatrixException {\n  int nRows=this.getRowDimension();\n  int nCols=this.getColumnDimension();\n  if (nRows != nCols) {\n    throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");\n  }\n  lu=this.getData();\n  permutation=new int[nRows];\n  for (int row=0; row < nRows; row++) {\n    permutation[row]=row;\n  }\n  parity=1;\n  for (int col=0; col < nCols; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < row; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n    }\n    int max=col;\n    double largest=0d;\n    for (int row=col; row < nRows; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < col; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < TOO_SMALL) {\n      lu=null;\n      throw new InvalidMatrixException(\"matrix is singular\");\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < nCols; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=permutation[max];\n      permutation[max]=permutation[col];\n      permutation[col]=temp;\n      parity=-parity;\n    }\n    for (int row=col + 1; row < nRows; row++) {\n      lu[row][col]/=lu[col][col];\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 345,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 23,
                    "startLineNumber": 787,
                    "startColumnNumber": 12,
                    "endLineNumber": 787,
                    "endColumnNumber": 35
                },
                "nodeContext": "permutation[row]=row;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 6,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "row",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 787,
                "startColumnNumber": 31,
                "endLineNumber": 787,
                "endColumnNumber": 34
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 22,
                        "startLineNumber": 787,
                        "startColumnNumber": 12,
                        "endLineNumber": 787,
                        "endColumnNumber": 34
                    },
                    "nodeContext": "permutation[row]=row",
                    "nodeType": "Assignment",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 23,
                        "startLineNumber": 787,
                        "startColumnNumber": 12,
                        "endLineNumber": 787,
                        "endColumnNumber": 35
                    },
                    "nodeContext": "permutation[row]=row;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 6,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 47,
                        "startLineNumber": 786,
                        "startColumnNumber": 46,
                        "endLineNumber": 788,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  permutation[row]=row;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 7,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 85,
                        "startLineNumber": 786,
                        "startColumnNumber": 8,
                        "endLineNumber": 788,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int row=0; row < nRows; row++) {\n  permutation[row]=row;\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 18,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2284,
                        "startLineNumber": 775,
                        "startColumnNumber": 60,
                        "endLineNumber": 847,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  int nRows=this.getRowDimension();\n  int nCols=this.getColumnDimension();\n  if (nRows != nCols) {\n    throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");\n  }\n  lu=this.getData();\n  permutation=new int[nRows];\n  for (int row=0; row < nRows; row++) {\n    permutation[row]=row;\n  }\n  parity=1;\n  for (int col=0; col < nCols; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < row; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n    }\n    int max=col;\n    double largest=0d;\n    for (int row=col; row < nRows; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < col; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < TOO_SMALL) {\n      lu=null;\n      throw new InvalidMatrixException(\"matrix is singular\");\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < nCols; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=permutation[max];\n      permutation[max]=permutation[col];\n      permutation[col]=temp;\n      parity=-parity;\n    }\n    for (int row=col + 1; row < nRows; row++) {\n      lu[row][col]/=lu[col][col];\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 338,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3223,
                        "startLineNumber": 757,
                        "startColumnNumber": 4,
                        "endLineNumber": 847,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Computes a new <a href=\"http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf\"> LU decomposition</a> for this matrix, storing the result for use by other methods. <p> <strong>Implementation Note</strong>:<br> Uses <a href=\"http://www.damtp.cam.ac.uk/user/fdl/people/sd/lectures/nummeth98/linear.htm\"> Crout's algorithm</a>, with partial pivoting.</p> <p> <strong>Usage Note</strong>:<br> This method should rarely be invoked directly. Its only use is to force recomputation of the LU decomposition when changes have been made to the underlying data using direct array references. Changes made using setXxx methods will trigger recomputation when needed automatically.</p>\n * @throws InvalidMatrixException if the matrix is non-square or singular.\n */\npublic void luDecompose() throws InvalidMatrixException {\n  int nRows=this.getRowDimension();\n  int nCols=this.getColumnDimension();\n  if (nRows != nCols) {\n    throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");\n  }\n  lu=this.getData();\n  permutation=new int[nRows];\n  for (int row=0; row < nRows; row++) {\n    permutation[row]=row;\n  }\n  parity=1;\n  for (int col=0; col < nCols; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < row; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n    }\n    int max=col;\n    double largest=0d;\n    for (int row=col; row < nRows; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < col; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < TOO_SMALL) {\n      lu=null;\n      throw new InvalidMatrixException(\"matrix is singular\");\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < nCols; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=permutation[max];\n      permutation[max]=permutation[col];\n      permutation[col]=temp;\n      parity=-parity;\n    }\n    for (int row=col + 1; row < nRows; row++) {\n      lu[row][col]/=lu[col][col];\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 345,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 23,
                    "startLineNumber": 787,
                    "startColumnNumber": 12,
                    "endLineNumber": 787,
                    "endColumnNumber": 35
                },
                "nodeContext": "permutation[row]=row;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 6,
                "astHeight": 4
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "row",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 797,
                "startColumnNumber": 30,
                "endLineNumber": 797,
                "endColumnNumber": 33
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
                    "nodePosition": {
                        "charLength": 9,
                        "startLineNumber": 797,
                        "startColumnNumber": 30,
                        "endLineNumber": 797,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "row < col",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 241,
                        "startLineNumber": 797,
                        "startColumnNumber": 12,
                        "endLineNumber": 803,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (int row=0; row < col; row++) {\n  sum=lu[row][col];\n  for (int i=0; i < row; i++) {\n    sum-=lu[row][i] * lu[i][col];\n  }\n  lu[row][col]=sum;\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 54,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 1733,
                        "startLineNumber": 792,
                        "startColumnNumber": 46,
                        "endLineNumber": 846,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  double sum=0;\n  for (int row=0; row < col; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < row; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n  }\n  int max=col;\n  double largest=0d;\n  for (int row=col; row < nRows; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < col; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n    if (Math.abs(sum) > largest) {\n      largest=Math.abs(sum);\n      max=row;\n    }\n  }\n  if (Math.abs(lu[max][col]) < TOO_SMALL) {\n    lu=null;\n    throw new InvalidMatrixException(\"matrix is singular\");\n  }\n  if (max != col) {\n    double tmp=0;\n    for (int i=0; i < nCols; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=permutation[max];\n    permutation[max]=permutation[col];\n    permutation[col]=temp;\n    parity=-parity;\n  }\n  for (int row=col + 1; row < nRows; row++) {\n    lu[row][col]/=lu[col][col];\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 266,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1771,
                        "startLineNumber": 792,
                        "startColumnNumber": 8,
                        "endLineNumber": 846,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int col=0; col < nCols; col++) {\n  double sum=0;\n  for (int row=0; row < col; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < row; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n  }\n  int max=col;\n  double largest=0d;\n  for (int row=col; row < nRows; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < col; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n    if (Math.abs(sum) > largest) {\n      largest=Math.abs(sum);\n      max=row;\n    }\n  }\n  if (Math.abs(lu[max][col]) < TOO_SMALL) {\n    lu=null;\n    throw new InvalidMatrixException(\"matrix is singular\");\n  }\n  if (max != col) {\n    double tmp=0;\n    for (int i=0; i < nCols; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=permutation[max];\n    permutation[max]=permutation[col];\n    permutation[col]=temp;\n    parity=-parity;\n  }\n  for (int row=col + 1; row < nRows; row++) {\n    lu[row][col]/=lu[col][col];\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 277,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2284,
                        "startLineNumber": 775,
                        "startColumnNumber": 60,
                        "endLineNumber": 847,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  int nRows=this.getRowDimension();\n  int nCols=this.getColumnDimension();\n  if (nRows != nCols) {\n    throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");\n  }\n  lu=this.getData();\n  permutation=new int[nRows];\n  for (int row=0; row < nRows; row++) {\n    permutation[row]=row;\n  }\n  parity=1;\n  for (int col=0; col < nCols; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < row; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n    }\n    int max=col;\n    double largest=0d;\n    for (int row=col; row < nRows; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < col; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < TOO_SMALL) {\n      lu=null;\n      throw new InvalidMatrixException(\"matrix is singular\");\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < nCols; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=permutation[max];\n      permutation[max]=permutation[col];\n      permutation[col]=temp;\n      parity=-parity;\n    }\n    for (int row=col + 1; row < nRows; row++) {\n      lu[row][col]/=lu[col][col];\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 338,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3223,
                        "startLineNumber": 757,
                        "startColumnNumber": 4,
                        "endLineNumber": 847,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Computes a new <a href=\"http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf\"> LU decomposition</a> for this matrix, storing the result for use by other methods. <p> <strong>Implementation Note</strong>:<br> Uses <a href=\"http://www.damtp.cam.ac.uk/user/fdl/people/sd/lectures/nummeth98/linear.htm\"> Crout's algorithm</a>, with partial pivoting.</p> <p> <strong>Usage Note</strong>:<br> This method should rarely be invoked directly. Its only use is to force recomputation of the LU decomposition when changes have been made to the underlying data using direct array references. Changes made using setXxx methods will trigger recomputation when needed automatically.</p>\n * @throws InvalidMatrixException if the matrix is non-square or singular.\n */\npublic void luDecompose() throws InvalidMatrixException {\n  int nRows=this.getRowDimension();\n  int nCols=this.getColumnDimension();\n  if (nRows != nCols) {\n    throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");\n  }\n  lu=this.getData();\n  permutation=new int[nRows];\n  for (int row=0; row < nRows; row++) {\n    permutation[row]=row;\n  }\n  parity=1;\n  for (int col=0; col < nCols; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < row; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n    }\n    int max=col;\n    double largest=0d;\n    for (int row=col; row < nRows; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < col; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < TOO_SMALL) {\n      lu=null;\n      throw new InvalidMatrixException(\"matrix is singular\");\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < nCols; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=permutation[max];\n      permutation[max]=permutation[col];\n      permutation[col]=temp;\n      parity=-parity;\n    }\n    for (int row=col + 1; row < nRows; row++) {\n      lu[row][col]/=lu[col][col];\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 345,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
                "nodePosition": {
                    "charLength": 9,
                    "startLineNumber": 797,
                    "startColumnNumber": 30,
                    "endLineNumber": 797,
                    "endColumnNumber": 39
                },
                "nodeContext": "row < col",
                "nodeType": "InfixExpression",
                "astNodeNumber": 3,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "row",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 798,
                "startColumnNumber": 25,
                "endLineNumber": 798,
                "endColumnNumber": 28
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 798,
                        "startColumnNumber": 22,
                        "endLineNumber": 798,
                        "endColumnNumber": 29
                    },
                    "nodeContext": "lu[row]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 12,
                        "startLineNumber": 798,
                        "startColumnNumber": 22,
                        "endLineNumber": 798,
                        "endColumnNumber": 34
                    },
                    "nodeContext": "lu[row][col]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 18,
                        "startLineNumber": 798,
                        "startColumnNumber": 16,
                        "endLineNumber": 798,
                        "endColumnNumber": 34
                    },
                    "nodeContext": "sum=lu[row][col]",
                    "nodeType": "Assignment",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 19,
                        "startLineNumber": 798,
                        "startColumnNumber": 16,
                        "endLineNumber": 798,
                        "endColumnNumber": 35
                    },
                    "nodeContext": "sum=lu[row][col];\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 205,
                        "startLineNumber": 797,
                        "startColumnNumber": 48,
                        "endLineNumber": 803,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  sum=lu[row][col];\n  for (int i=0; i < row; i++) {\n    sum-=lu[row][i] * lu[i][col];\n  }\n  lu[row][col]=sum;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 43,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 241,
                        "startLineNumber": 797,
                        "startColumnNumber": 12,
                        "endLineNumber": 803,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (int row=0; row < col; row++) {\n  sum=lu[row][col];\n  for (int i=0; i < row; i++) {\n    sum-=lu[row][i] * lu[i][col];\n  }\n  lu[row][col]=sum;\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 54,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 1733,
                        "startLineNumber": 792,
                        "startColumnNumber": 46,
                        "endLineNumber": 846,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  double sum=0;\n  for (int row=0; row < col; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < row; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n  }\n  int max=col;\n  double largest=0d;\n  for (int row=col; row < nRows; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < col; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n    if (Math.abs(sum) > largest) {\n      largest=Math.abs(sum);\n      max=row;\n    }\n  }\n  if (Math.abs(lu[max][col]) < TOO_SMALL) {\n    lu=null;\n    throw new InvalidMatrixException(\"matrix is singular\");\n  }\n  if (max != col) {\n    double tmp=0;\n    for (int i=0; i < nCols; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=permutation[max];\n    permutation[max]=permutation[col];\n    permutation[col]=temp;\n    parity=-parity;\n  }\n  for (int row=col + 1; row < nRows; row++) {\n    lu[row][col]/=lu[col][col];\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 266,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1771,
                        "startLineNumber": 792,
                        "startColumnNumber": 8,
                        "endLineNumber": 846,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int col=0; col < nCols; col++) {\n  double sum=0;\n  for (int row=0; row < col; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < row; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n  }\n  int max=col;\n  double largest=0d;\n  for (int row=col; row < nRows; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < col; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n    if (Math.abs(sum) > largest) {\n      largest=Math.abs(sum);\n      max=row;\n    }\n  }\n  if (Math.abs(lu[max][col]) < TOO_SMALL) {\n    lu=null;\n    throw new InvalidMatrixException(\"matrix is singular\");\n  }\n  if (max != col) {\n    double tmp=0;\n    for (int i=0; i < nCols; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=permutation[max];\n    permutation[max]=permutation[col];\n    permutation[col]=temp;\n    parity=-parity;\n  }\n  for (int row=col + 1; row < nRows; row++) {\n    lu[row][col]/=lu[col][col];\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 277,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2284,
                        "startLineNumber": 775,
                        "startColumnNumber": 60,
                        "endLineNumber": 847,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  int nRows=this.getRowDimension();\n  int nCols=this.getColumnDimension();\n  if (nRows != nCols) {\n    throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");\n  }\n  lu=this.getData();\n  permutation=new int[nRows];\n  for (int row=0; row < nRows; row++) {\n    permutation[row]=row;\n  }\n  parity=1;\n  for (int col=0; col < nCols; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < row; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n    }\n    int max=col;\n    double largest=0d;\n    for (int row=col; row < nRows; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < col; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < TOO_SMALL) {\n      lu=null;\n      throw new InvalidMatrixException(\"matrix is singular\");\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < nCols; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=permutation[max];\n      permutation[max]=permutation[col];\n      permutation[col]=temp;\n      parity=-parity;\n    }\n    for (int row=col + 1; row < nRows; row++) {\n      lu[row][col]/=lu[col][col];\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 338,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3223,
                        "startLineNumber": 757,
                        "startColumnNumber": 4,
                        "endLineNumber": 847,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Computes a new <a href=\"http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf\"> LU decomposition</a> for this matrix, storing the result for use by other methods. <p> <strong>Implementation Note</strong>:<br> Uses <a href=\"http://www.damtp.cam.ac.uk/user/fdl/people/sd/lectures/nummeth98/linear.htm\"> Crout's algorithm</a>, with partial pivoting.</p> <p> <strong>Usage Note</strong>:<br> This method should rarely be invoked directly. Its only use is to force recomputation of the LU decomposition when changes have been made to the underlying data using direct array references. Changes made using setXxx methods will trigger recomputation when needed automatically.</p>\n * @throws InvalidMatrixException if the matrix is non-square or singular.\n */\npublic void luDecompose() throws InvalidMatrixException {\n  int nRows=this.getRowDimension();\n  int nCols=this.getColumnDimension();\n  if (nRows != nCols) {\n    throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");\n  }\n  lu=this.getData();\n  permutation=new int[nRows];\n  for (int row=0; row < nRows; row++) {\n    permutation[row]=row;\n  }\n  parity=1;\n  for (int col=0; col < nCols; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < row; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n    }\n    int max=col;\n    double largest=0d;\n    for (int row=col; row < nRows; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < col; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < TOO_SMALL) {\n      lu=null;\n      throw new InvalidMatrixException(\"matrix is singular\");\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < nCols; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=permutation[max];\n      permutation[max]=permutation[col];\n      permutation[col]=temp;\n      parity=-parity;\n    }\n    for (int row=col + 1; row < nRows; row++) {\n      lu[row][col]/=lu[col][col];\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 345,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 19,
                    "startLineNumber": 798,
                    "startColumnNumber": 16,
                    "endLineNumber": 798,
                    "endColumnNumber": 35
                },
                "nodeContext": "sum=lu[row][col];\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "row",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 799,
                "startColumnNumber": 36,
                "endLineNumber": 799,
                "endColumnNumber": 39
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 799,
                        "startColumnNumber": 32,
                        "endLineNumber": 799,
                        "endColumnNumber": 39
                    },
                    "nodeContext": "i < row",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 101,
                        "startLineNumber": 799,
                        "startColumnNumber": 16,
                        "endLineNumber": 801,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "for (int i=0; i < row; i++) {\n  sum-=lu[row][i] * lu[i][col];\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 26,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 205,
                        "startLineNumber": 797,
                        "startColumnNumber": 48,
                        "endLineNumber": 803,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  sum=lu[row][col];\n  for (int i=0; i < row; i++) {\n    sum-=lu[row][i] * lu[i][col];\n  }\n  lu[row][col]=sum;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 43,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 241,
                        "startLineNumber": 797,
                        "startColumnNumber": 12,
                        "endLineNumber": 803,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (int row=0; row < col; row++) {\n  sum=lu[row][col];\n  for (int i=0; i < row; i++) {\n    sum-=lu[row][i] * lu[i][col];\n  }\n  lu[row][col]=sum;\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 54,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 1733,
                        "startLineNumber": 792,
                        "startColumnNumber": 46,
                        "endLineNumber": 846,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  double sum=0;\n  for (int row=0; row < col; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < row; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n  }\n  int max=col;\n  double largest=0d;\n  for (int row=col; row < nRows; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < col; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n    if (Math.abs(sum) > largest) {\n      largest=Math.abs(sum);\n      max=row;\n    }\n  }\n  if (Math.abs(lu[max][col]) < TOO_SMALL) {\n    lu=null;\n    throw new InvalidMatrixException(\"matrix is singular\");\n  }\n  if (max != col) {\n    double tmp=0;\n    for (int i=0; i < nCols; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=permutation[max];\n    permutation[max]=permutation[col];\n    permutation[col]=temp;\n    parity=-parity;\n  }\n  for (int row=col + 1; row < nRows; row++) {\n    lu[row][col]/=lu[col][col];\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 266,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1771,
                        "startLineNumber": 792,
                        "startColumnNumber": 8,
                        "endLineNumber": 846,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int col=0; col < nCols; col++) {\n  double sum=0;\n  for (int row=0; row < col; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < row; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n  }\n  int max=col;\n  double largest=0d;\n  for (int row=col; row < nRows; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < col; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n    if (Math.abs(sum) > largest) {\n      largest=Math.abs(sum);\n      max=row;\n    }\n  }\n  if (Math.abs(lu[max][col]) < TOO_SMALL) {\n    lu=null;\n    throw new InvalidMatrixException(\"matrix is singular\");\n  }\n  if (max != col) {\n    double tmp=0;\n    for (int i=0; i < nCols; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=permutation[max];\n    permutation[max]=permutation[col];\n    permutation[col]=temp;\n    parity=-parity;\n  }\n  for (int row=col + 1; row < nRows; row++) {\n    lu[row][col]/=lu[col][col];\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 277,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2284,
                        "startLineNumber": 775,
                        "startColumnNumber": 60,
                        "endLineNumber": 847,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  int nRows=this.getRowDimension();\n  int nCols=this.getColumnDimension();\n  if (nRows != nCols) {\n    throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");\n  }\n  lu=this.getData();\n  permutation=new int[nRows];\n  for (int row=0; row < nRows; row++) {\n    permutation[row]=row;\n  }\n  parity=1;\n  for (int col=0; col < nCols; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < row; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n    }\n    int max=col;\n    double largest=0d;\n    for (int row=col; row < nRows; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < col; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < TOO_SMALL) {\n      lu=null;\n      throw new InvalidMatrixException(\"matrix is singular\");\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < nCols; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=permutation[max];\n      permutation[max]=permutation[col];\n      permutation[col]=temp;\n      parity=-parity;\n    }\n    for (int row=col + 1; row < nRows; row++) {\n      lu[row][col]/=lu[col][col];\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 338,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3223,
                        "startLineNumber": 757,
                        "startColumnNumber": 4,
                        "endLineNumber": 847,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Computes a new <a href=\"http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf\"> LU decomposition</a> for this matrix, storing the result for use by other methods. <p> <strong>Implementation Note</strong>:<br> Uses <a href=\"http://www.damtp.cam.ac.uk/user/fdl/people/sd/lectures/nummeth98/linear.htm\"> Crout's algorithm</a>, with partial pivoting.</p> <p> <strong>Usage Note</strong>:<br> This method should rarely be invoked directly. Its only use is to force recomputation of the LU decomposition when changes have been made to the underlying data using direct array references. Changes made using setXxx methods will trigger recomputation when needed automatically.</p>\n * @throws InvalidMatrixException if the matrix is non-square or singular.\n */\npublic void luDecompose() throws InvalidMatrixException {\n  int nRows=this.getRowDimension();\n  int nCols=this.getColumnDimension();\n  if (nRows != nCols) {\n    throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");\n  }\n  lu=this.getData();\n  permutation=new int[nRows];\n  for (int row=0; row < nRows; row++) {\n    permutation[row]=row;\n  }\n  parity=1;\n  for (int col=0; col < nCols; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < row; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n    }\n    int max=col;\n    double largest=0d;\n    for (int row=col; row < nRows; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < col; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < TOO_SMALL) {\n      lu=null;\n      throw new InvalidMatrixException(\"matrix is singular\");\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < nCols; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=permutation[max];\n      permutation[max]=permutation[col];\n      permutation[col]=temp;\n      parity=-parity;\n    }\n    for (int row=col + 1; row < nRows; row++) {\n      lu[row][col]/=lu[col][col];\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 345,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
                "nodePosition": {
                    "charLength": 7,
                    "startLineNumber": 799,
                    "startColumnNumber": 32,
                    "endLineNumber": 799,
                    "endColumnNumber": 39
                },
                "nodeContext": "i < row",
                "nodeType": "InfixExpression",
                "astNodeNumber": 3,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "row",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 800,
                "startColumnNumber": 30,
                "endLineNumber": 800,
                "endColumnNumber": 33
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 800,
                        "startColumnNumber": 27,
                        "endLineNumber": 800,
                        "endColumnNumber": 34
                    },
                    "nodeContext": "lu[row]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 10,
                        "startLineNumber": 800,
                        "startColumnNumber": 27,
                        "endLineNumber": 800,
                        "endColumnNumber": 37
                    },
                    "nodeContext": "lu[row][i]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 23,
                        "startLineNumber": 800,
                        "startColumnNumber": 27,
                        "endLineNumber": 800,
                        "endColumnNumber": 50
                    },
                    "nodeContext": "lu[row][i] * lu[i][col]",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 30,
                        "startLineNumber": 800,
                        "startColumnNumber": 20,
                        "endLineNumber": 800,
                        "endColumnNumber": 50
                    },
                    "nodeContext": "sum-=lu[row][i] * lu[i][col]",
                    "nodeType": "Assignment",
                    "astNodeNumber": 13,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 31,
                        "startLineNumber": 800,
                        "startColumnNumber": 20,
                        "endLineNumber": 800,
                        "endColumnNumber": 51
                    },
                    "nodeContext": "sum-=lu[row][i] * lu[i][col];\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 14,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 71,
                        "startLineNumber": 799,
                        "startColumnNumber": 46,
                        "endLineNumber": 801,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  sum-=lu[row][i] * lu[i][col];\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 15,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 101,
                        "startLineNumber": 799,
                        "startColumnNumber": 16,
                        "endLineNumber": 801,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "for (int i=0; i < row; i++) {\n  sum-=lu[row][i] * lu[i][col];\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 26,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 205,
                        "startLineNumber": 797,
                        "startColumnNumber": 48,
                        "endLineNumber": 803,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  sum=lu[row][col];\n  for (int i=0; i < row; i++) {\n    sum-=lu[row][i] * lu[i][col];\n  }\n  lu[row][col]=sum;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 43,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 241,
                        "startLineNumber": 797,
                        "startColumnNumber": 12,
                        "endLineNumber": 803,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (int row=0; row < col; row++) {\n  sum=lu[row][col];\n  for (int i=0; i < row; i++) {\n    sum-=lu[row][i] * lu[i][col];\n  }\n  lu[row][col]=sum;\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 54,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 1733,
                        "startLineNumber": 792,
                        "startColumnNumber": 46,
                        "endLineNumber": 846,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  double sum=0;\n  for (int row=0; row < col; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < row; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n  }\n  int max=col;\n  double largest=0d;\n  for (int row=col; row < nRows; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < col; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n    if (Math.abs(sum) > largest) {\n      largest=Math.abs(sum);\n      max=row;\n    }\n  }\n  if (Math.abs(lu[max][col]) < TOO_SMALL) {\n    lu=null;\n    throw new InvalidMatrixException(\"matrix is singular\");\n  }\n  if (max != col) {\n    double tmp=0;\n    for (int i=0; i < nCols; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=permutation[max];\n    permutation[max]=permutation[col];\n    permutation[col]=temp;\n    parity=-parity;\n  }\n  for (int row=col + 1; row < nRows; row++) {\n    lu[row][col]/=lu[col][col];\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 266,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1771,
                        "startLineNumber": 792,
                        "startColumnNumber": 8,
                        "endLineNumber": 846,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int col=0; col < nCols; col++) {\n  double sum=0;\n  for (int row=0; row < col; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < row; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n  }\n  int max=col;\n  double largest=0d;\n  for (int row=col; row < nRows; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < col; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n    if (Math.abs(sum) > largest) {\n      largest=Math.abs(sum);\n      max=row;\n    }\n  }\n  if (Math.abs(lu[max][col]) < TOO_SMALL) {\n    lu=null;\n    throw new InvalidMatrixException(\"matrix is singular\");\n  }\n  if (max != col) {\n    double tmp=0;\n    for (int i=0; i < nCols; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=permutation[max];\n    permutation[max]=permutation[col];\n    permutation[col]=temp;\n    parity=-parity;\n  }\n  for (int row=col + 1; row < nRows; row++) {\n    lu[row][col]/=lu[col][col];\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 277,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2284,
                        "startLineNumber": 775,
                        "startColumnNumber": 60,
                        "endLineNumber": 847,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  int nRows=this.getRowDimension();\n  int nCols=this.getColumnDimension();\n  if (nRows != nCols) {\n    throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");\n  }\n  lu=this.getData();\n  permutation=new int[nRows];\n  for (int row=0; row < nRows; row++) {\n    permutation[row]=row;\n  }\n  parity=1;\n  for (int col=0; col < nCols; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < row; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n    }\n    int max=col;\n    double largest=0d;\n    for (int row=col; row < nRows; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < col; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < TOO_SMALL) {\n      lu=null;\n      throw new InvalidMatrixException(\"matrix is singular\");\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < nCols; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=permutation[max];\n      permutation[max]=permutation[col];\n      permutation[col]=temp;\n      parity=-parity;\n    }\n    for (int row=col + 1; row < nRows; row++) {\n      lu[row][col]/=lu[col][col];\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 338,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3223,
                        "startLineNumber": 757,
                        "startColumnNumber": 4,
                        "endLineNumber": 847,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Computes a new <a href=\"http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf\"> LU decomposition</a> for this matrix, storing the result for use by other methods. <p> <strong>Implementation Note</strong>:<br> Uses <a href=\"http://www.damtp.cam.ac.uk/user/fdl/people/sd/lectures/nummeth98/linear.htm\"> Crout's algorithm</a>, with partial pivoting.</p> <p> <strong>Usage Note</strong>:<br> This method should rarely be invoked directly. Its only use is to force recomputation of the LU decomposition when changes have been made to the underlying data using direct array references. Changes made using setXxx methods will trigger recomputation when needed automatically.</p>\n * @throws InvalidMatrixException if the matrix is non-square or singular.\n */\npublic void luDecompose() throws InvalidMatrixException {\n  int nRows=this.getRowDimension();\n  int nCols=this.getColumnDimension();\n  if (nRows != nCols) {\n    throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");\n  }\n  lu=this.getData();\n  permutation=new int[nRows];\n  for (int row=0; row < nRows; row++) {\n    permutation[row]=row;\n  }\n  parity=1;\n  for (int col=0; col < nCols; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < row; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n    }\n    int max=col;\n    double largest=0d;\n    for (int row=col; row < nRows; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < col; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < TOO_SMALL) {\n      lu=null;\n      throw new InvalidMatrixException(\"matrix is singular\");\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < nCols; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=permutation[max];\n      permutation[max]=permutation[col];\n      permutation[col]=temp;\n      parity=-parity;\n    }\n    for (int row=col + 1; row < nRows; row++) {\n      lu[row][col]/=lu[col][col];\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 345,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 31,
                    "startLineNumber": 800,
                    "startColumnNumber": 20,
                    "endLineNumber": 800,
                    "endColumnNumber": 51
                },
                "nodeContext": "sum-=lu[row][i] * lu[i][col];\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 14,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "row",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 802,
                "startColumnNumber": 19,
                "endLineNumber": 802,
                "endColumnNumber": 22
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 802,
                        "startColumnNumber": 16,
                        "endLineNumber": 802,
                        "endColumnNumber": 23
                    },
                    "nodeContext": "lu[row]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
                    "nodePosition": {
                        "charLength": 12,
                        "startLineNumber": 802,
                        "startColumnNumber": 16,
                        "endLineNumber": 802,
                        "endColumnNumber": 28
                    },
                    "nodeContext": "lu[row][col]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 18,
                        "startLineNumber": 802,
                        "startColumnNumber": 16,
                        "endLineNumber": 802,
                        "endColumnNumber": 34
                    },
                    "nodeContext": "lu[row][col]=sum",
                    "nodeType": "Assignment",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 19,
                        "startLineNumber": 802,
                        "startColumnNumber": 16,
                        "endLineNumber": 802,
                        "endColumnNumber": 35
                    },
                    "nodeContext": "lu[row][col]=sum;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 205,
                        "startLineNumber": 797,
                        "startColumnNumber": 48,
                        "endLineNumber": 803,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  sum=lu[row][col];\n  for (int i=0; i < row; i++) {\n    sum-=lu[row][i] * lu[i][col];\n  }\n  lu[row][col]=sum;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 43,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 241,
                        "startLineNumber": 797,
                        "startColumnNumber": 12,
                        "endLineNumber": 803,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (int row=0; row < col; row++) {\n  sum=lu[row][col];\n  for (int i=0; i < row; i++) {\n    sum-=lu[row][i] * lu[i][col];\n  }\n  lu[row][col]=sum;\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 54,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 1733,
                        "startLineNumber": 792,
                        "startColumnNumber": 46,
                        "endLineNumber": 846,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  double sum=0;\n  for (int row=0; row < col; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < row; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n  }\n  int max=col;\n  double largest=0d;\n  for (int row=col; row < nRows; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < col; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n    if (Math.abs(sum) > largest) {\n      largest=Math.abs(sum);\n      max=row;\n    }\n  }\n  if (Math.abs(lu[max][col]) < TOO_SMALL) {\n    lu=null;\n    throw new InvalidMatrixException(\"matrix is singular\");\n  }\n  if (max != col) {\n    double tmp=0;\n    for (int i=0; i < nCols; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=permutation[max];\n    permutation[max]=permutation[col];\n    permutation[col]=temp;\n    parity=-parity;\n  }\n  for (int row=col + 1; row < nRows; row++) {\n    lu[row][col]/=lu[col][col];\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 266,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1771,
                        "startLineNumber": 792,
                        "startColumnNumber": 8,
                        "endLineNumber": 846,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int col=0; col < nCols; col++) {\n  double sum=0;\n  for (int row=0; row < col; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < row; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n  }\n  int max=col;\n  double largest=0d;\n  for (int row=col; row < nRows; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < col; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n    if (Math.abs(sum) > largest) {\n      largest=Math.abs(sum);\n      max=row;\n    }\n  }\n  if (Math.abs(lu[max][col]) < TOO_SMALL) {\n    lu=null;\n    throw new InvalidMatrixException(\"matrix is singular\");\n  }\n  if (max != col) {\n    double tmp=0;\n    for (int i=0; i < nCols; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=permutation[max];\n    permutation[max]=permutation[col];\n    permutation[col]=temp;\n    parity=-parity;\n  }\n  for (int row=col + 1; row < nRows; row++) {\n    lu[row][col]/=lu[col][col];\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 277,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2284,
                        "startLineNumber": 775,
                        "startColumnNumber": 60,
                        "endLineNumber": 847,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  int nRows=this.getRowDimension();\n  int nCols=this.getColumnDimension();\n  if (nRows != nCols) {\n    throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");\n  }\n  lu=this.getData();\n  permutation=new int[nRows];\n  for (int row=0; row < nRows; row++) {\n    permutation[row]=row;\n  }\n  parity=1;\n  for (int col=0; col < nCols; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < row; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n    }\n    int max=col;\n    double largest=0d;\n    for (int row=col; row < nRows; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < col; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < TOO_SMALL) {\n      lu=null;\n      throw new InvalidMatrixException(\"matrix is singular\");\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < nCols; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=permutation[max];\n      permutation[max]=permutation[col];\n      permutation[col]=temp;\n      parity=-parity;\n    }\n    for (int row=col + 1; row < nRows; row++) {\n      lu[row][col]/=lu[col][col];\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 338,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3223,
                        "startLineNumber": 757,
                        "startColumnNumber": 4,
                        "endLineNumber": 847,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Computes a new <a href=\"http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf\"> LU decomposition</a> for this matrix, storing the result for use by other methods. <p> <strong>Implementation Note</strong>:<br> Uses <a href=\"http://www.damtp.cam.ac.uk/user/fdl/people/sd/lectures/nummeth98/linear.htm\"> Crout's algorithm</a>, with partial pivoting.</p> <p> <strong>Usage Note</strong>:<br> This method should rarely be invoked directly. Its only use is to force recomputation of the LU decomposition when changes have been made to the underlying data using direct array references. Changes made using setXxx methods will trigger recomputation when needed automatically.</p>\n * @throws InvalidMatrixException if the matrix is non-square or singular.\n */\npublic void luDecompose() throws InvalidMatrixException {\n  int nRows=this.getRowDimension();\n  int nCols=this.getColumnDimension();\n  if (nRows != nCols) {\n    throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");\n  }\n  lu=this.getData();\n  permutation=new int[nRows];\n  for (int row=0; row < nRows; row++) {\n    permutation[row]=row;\n  }\n  parity=1;\n  for (int col=0; col < nCols; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < row; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n    }\n    int max=col;\n    double largest=0d;\n    for (int row=col; row < nRows; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < col; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < TOO_SMALL) {\n      lu=null;\n      throw new InvalidMatrixException(\"matrix is singular\");\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < nCols; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=permutation[max];\n      permutation[max]=permutation[col];\n      permutation[col]=temp;\n      parity=-parity;\n    }\n    for (int row=col + 1; row < nRows; row++) {\n      lu[row][col]/=lu[col][col];\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 345,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 19,
                    "startLineNumber": 802,
                    "startColumnNumber": 16,
                    "endLineNumber": 802,
                    "endColumnNumber": 35
                },
                "nodeContext": "lu[row][col]=sum;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "row",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 808,
                "startColumnNumber": 32,
                "endLineNumber": 808,
                "endColumnNumber": 35
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
                    "nodePosition": {
                        "charLength": 11,
                        "startLineNumber": 808,
                        "startColumnNumber": 32,
                        "endLineNumber": 808,
                        "endColumnNumber": 43
                    },
                    "nodeContext": "row < nRows",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 439,
                        "startLineNumber": 808,
                        "startColumnNumber": 12,
                        "endLineNumber": 820,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (int row=col; row < nRows; row++) {\n  sum=lu[row][col];\n  for (int i=0; i < col; i++) {\n    sum-=lu[row][i] * lu[i][col];\n  }\n  lu[row][col]=sum;\n  if (Math.abs(sum) > largest) {\n    largest=Math.abs(sum);\n    max=row;\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 73,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 1733,
                        "startLineNumber": 792,
                        "startColumnNumber": 46,
                        "endLineNumber": 846,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  double sum=0;\n  for (int row=0; row < col; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < row; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n  }\n  int max=col;\n  double largest=0d;\n  for (int row=col; row < nRows; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < col; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n    if (Math.abs(sum) > largest) {\n      largest=Math.abs(sum);\n      max=row;\n    }\n  }\n  if (Math.abs(lu[max][col]) < TOO_SMALL) {\n    lu=null;\n    throw new InvalidMatrixException(\"matrix is singular\");\n  }\n  if (max != col) {\n    double tmp=0;\n    for (int i=0; i < nCols; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=permutation[max];\n    permutation[max]=permutation[col];\n    permutation[col]=temp;\n    parity=-parity;\n  }\n  for (int row=col + 1; row < nRows; row++) {\n    lu[row][col]/=lu[col][col];\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 266,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1771,
                        "startLineNumber": 792,
                        "startColumnNumber": 8,
                        "endLineNumber": 846,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int col=0; col < nCols; col++) {\n  double sum=0;\n  for (int row=0; row < col; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < row; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n  }\n  int max=col;\n  double largest=0d;\n  for (int row=col; row < nRows; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < col; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n    if (Math.abs(sum) > largest) {\n      largest=Math.abs(sum);\n      max=row;\n    }\n  }\n  if (Math.abs(lu[max][col]) < TOO_SMALL) {\n    lu=null;\n    throw new InvalidMatrixException(\"matrix is singular\");\n  }\n  if (max != col) {\n    double tmp=0;\n    for (int i=0; i < nCols; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=permutation[max];\n    permutation[max]=permutation[col];\n    permutation[col]=temp;\n    parity=-parity;\n  }\n  for (int row=col + 1; row < nRows; row++) {\n    lu[row][col]/=lu[col][col];\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 277,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2284,
                        "startLineNumber": 775,
                        "startColumnNumber": 60,
                        "endLineNumber": 847,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  int nRows=this.getRowDimension();\n  int nCols=this.getColumnDimension();\n  if (nRows != nCols) {\n    throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");\n  }\n  lu=this.getData();\n  permutation=new int[nRows];\n  for (int row=0; row < nRows; row++) {\n    permutation[row]=row;\n  }\n  parity=1;\n  for (int col=0; col < nCols; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < row; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n    }\n    int max=col;\n    double largest=0d;\n    for (int row=col; row < nRows; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < col; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < TOO_SMALL) {\n      lu=null;\n      throw new InvalidMatrixException(\"matrix is singular\");\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < nCols; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=permutation[max];\n      permutation[max]=permutation[col];\n      permutation[col]=temp;\n      parity=-parity;\n    }\n    for (int row=col + 1; row < nRows; row++) {\n      lu[row][col]/=lu[col][col];\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 338,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3223,
                        "startLineNumber": 757,
                        "startColumnNumber": 4,
                        "endLineNumber": 847,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Computes a new <a href=\"http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf\"> LU decomposition</a> for this matrix, storing the result for use by other methods. <p> <strong>Implementation Note</strong>:<br> Uses <a href=\"http://www.damtp.cam.ac.uk/user/fdl/people/sd/lectures/nummeth98/linear.htm\"> Crout's algorithm</a>, with partial pivoting.</p> <p> <strong>Usage Note</strong>:<br> This method should rarely be invoked directly. Its only use is to force recomputation of the LU decomposition when changes have been made to the underlying data using direct array references. Changes made using setXxx methods will trigger recomputation when needed automatically.</p>\n * @throws InvalidMatrixException if the matrix is non-square or singular.\n */\npublic void luDecompose() throws InvalidMatrixException {\n  int nRows=this.getRowDimension();\n  int nCols=this.getColumnDimension();\n  if (nRows != nCols) {\n    throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");\n  }\n  lu=this.getData();\n  permutation=new int[nRows];\n  for (int row=0; row < nRows; row++) {\n    permutation[row]=row;\n  }\n  parity=1;\n  for (int col=0; col < nCols; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < row; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n    }\n    int max=col;\n    double largest=0d;\n    for (int row=col; row < nRows; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < col; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < TOO_SMALL) {\n      lu=null;\n      throw new InvalidMatrixException(\"matrix is singular\");\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < nCols; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=permutation[max];\n      permutation[max]=permutation[col];\n      permutation[col]=temp;\n      parity=-parity;\n    }\n    for (int row=col + 1; row < nRows; row++) {\n      lu[row][col]/=lu[col][col];\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 345,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
                "nodePosition": {
                    "charLength": 11,
                    "startLineNumber": 808,
                    "startColumnNumber": 32,
                    "endLineNumber": 808,
                    "endColumnNumber": 43
                },
                "nodeContext": "row < nRows",
                "nodeType": "InfixExpression",
                "astNodeNumber": 3,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "row",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 809,
                "startColumnNumber": 25,
                "endLineNumber": 809,
                "endColumnNumber": 28
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 809,
                        "startColumnNumber": 22,
                        "endLineNumber": 809,
                        "endColumnNumber": 29
                    },
                    "nodeContext": "lu[row]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 12,
                        "startLineNumber": 809,
                        "startColumnNumber": 22,
                        "endLineNumber": 809,
                        "endColumnNumber": 34
                    },
                    "nodeContext": "lu[row][col]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 18,
                        "startLineNumber": 809,
                        "startColumnNumber": 16,
                        "endLineNumber": 809,
                        "endColumnNumber": 34
                    },
                    "nodeContext": "sum=lu[row][col]",
                    "nodeType": "Assignment",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 19,
                        "startLineNumber": 809,
                        "startColumnNumber": 16,
                        "endLineNumber": 809,
                        "endColumnNumber": 35
                    },
                    "nodeContext": "sum=lu[row][col];\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 399,
                        "startLineNumber": 808,
                        "startColumnNumber": 52,
                        "endLineNumber": 820,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  sum=lu[row][col];\n  for (int i=0; i < col; i++) {\n    sum-=lu[row][i] * lu[i][col];\n  }\n  lu[row][col]=sum;\n  if (Math.abs(sum) > largest) {\n    largest=Math.abs(sum);\n    max=row;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 62,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 439,
                        "startLineNumber": 808,
                        "startColumnNumber": 12,
                        "endLineNumber": 820,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (int row=col; row < nRows; row++) {\n  sum=lu[row][col];\n  for (int i=0; i < col; i++) {\n    sum-=lu[row][i] * lu[i][col];\n  }\n  lu[row][col]=sum;\n  if (Math.abs(sum) > largest) {\n    largest=Math.abs(sum);\n    max=row;\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 73,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 1733,
                        "startLineNumber": 792,
                        "startColumnNumber": 46,
                        "endLineNumber": 846,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  double sum=0;\n  for (int row=0; row < col; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < row; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n  }\n  int max=col;\n  double largest=0d;\n  for (int row=col; row < nRows; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < col; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n    if (Math.abs(sum) > largest) {\n      largest=Math.abs(sum);\n      max=row;\n    }\n  }\n  if (Math.abs(lu[max][col]) < TOO_SMALL) {\n    lu=null;\n    throw new InvalidMatrixException(\"matrix is singular\");\n  }\n  if (max != col) {\n    double tmp=0;\n    for (int i=0; i < nCols; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=permutation[max];\n    permutation[max]=permutation[col];\n    permutation[col]=temp;\n    parity=-parity;\n  }\n  for (int row=col + 1; row < nRows; row++) {\n    lu[row][col]/=lu[col][col];\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 266,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1771,
                        "startLineNumber": 792,
                        "startColumnNumber": 8,
                        "endLineNumber": 846,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int col=0; col < nCols; col++) {\n  double sum=0;\n  for (int row=0; row < col; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < row; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n  }\n  int max=col;\n  double largest=0d;\n  for (int row=col; row < nRows; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < col; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n    if (Math.abs(sum) > largest) {\n      largest=Math.abs(sum);\n      max=row;\n    }\n  }\n  if (Math.abs(lu[max][col]) < TOO_SMALL) {\n    lu=null;\n    throw new InvalidMatrixException(\"matrix is singular\");\n  }\n  if (max != col) {\n    double tmp=0;\n    for (int i=0; i < nCols; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=permutation[max];\n    permutation[max]=permutation[col];\n    permutation[col]=temp;\n    parity=-parity;\n  }\n  for (int row=col + 1; row < nRows; row++) {\n    lu[row][col]/=lu[col][col];\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 277,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2284,
                        "startLineNumber": 775,
                        "startColumnNumber": 60,
                        "endLineNumber": 847,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  int nRows=this.getRowDimension();\n  int nCols=this.getColumnDimension();\n  if (nRows != nCols) {\n    throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");\n  }\n  lu=this.getData();\n  permutation=new int[nRows];\n  for (int row=0; row < nRows; row++) {\n    permutation[row]=row;\n  }\n  parity=1;\n  for (int col=0; col < nCols; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < row; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n    }\n    int max=col;\n    double largest=0d;\n    for (int row=col; row < nRows; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < col; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < TOO_SMALL) {\n      lu=null;\n      throw new InvalidMatrixException(\"matrix is singular\");\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < nCols; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=permutation[max];\n      permutation[max]=permutation[col];\n      permutation[col]=temp;\n      parity=-parity;\n    }\n    for (int row=col + 1; row < nRows; row++) {\n      lu[row][col]/=lu[col][col];\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 338,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3223,
                        "startLineNumber": 757,
                        "startColumnNumber": 4,
                        "endLineNumber": 847,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Computes a new <a href=\"http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf\"> LU decomposition</a> for this matrix, storing the result for use by other methods. <p> <strong>Implementation Note</strong>:<br> Uses <a href=\"http://www.damtp.cam.ac.uk/user/fdl/people/sd/lectures/nummeth98/linear.htm\"> Crout's algorithm</a>, with partial pivoting.</p> <p> <strong>Usage Note</strong>:<br> This method should rarely be invoked directly. Its only use is to force recomputation of the LU decomposition when changes have been made to the underlying data using direct array references. Changes made using setXxx methods will trigger recomputation when needed automatically.</p>\n * @throws InvalidMatrixException if the matrix is non-square or singular.\n */\npublic void luDecompose() throws InvalidMatrixException {\n  int nRows=this.getRowDimension();\n  int nCols=this.getColumnDimension();\n  if (nRows != nCols) {\n    throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");\n  }\n  lu=this.getData();\n  permutation=new int[nRows];\n  for (int row=0; row < nRows; row++) {\n    permutation[row]=row;\n  }\n  parity=1;\n  for (int col=0; col < nCols; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < row; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n    }\n    int max=col;\n    double largest=0d;\n    for (int row=col; row < nRows; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < col; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < TOO_SMALL) {\n      lu=null;\n      throw new InvalidMatrixException(\"matrix is singular\");\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < nCols; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=permutation[max];\n      permutation[max]=permutation[col];\n      permutation[col]=temp;\n      parity=-parity;\n    }\n    for (int row=col + 1; row < nRows; row++) {\n      lu[row][col]/=lu[col][col];\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 345,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 19,
                    "startLineNumber": 809,
                    "startColumnNumber": 16,
                    "endLineNumber": 809,
                    "endColumnNumber": 35
                },
                "nodeContext": "sum=lu[row][col];\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "row",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 811,
                "startColumnNumber": 30,
                "endLineNumber": 811,
                "endColumnNumber": 33
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 811,
                        "startColumnNumber": 27,
                        "endLineNumber": 811,
                        "endColumnNumber": 34
                    },
                    "nodeContext": "lu[row]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
                    "nodePosition": {
                        "charLength": 10,
                        "startLineNumber": 811,
                        "startColumnNumber": 27,
                        "endLineNumber": 811,
                        "endColumnNumber": 37
                    },
                    "nodeContext": "lu[row][i]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
                    "nodePosition": {
                        "charLength": 23,
                        "startLineNumber": 811,
                        "startColumnNumber": 27,
                        "endLineNumber": 811,
                        "endColumnNumber": 50
                    },
                    "nodeContext": "lu[row][i] * lu[i][col]",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 30,
                        "startLineNumber": 811,
                        "startColumnNumber": 20,
                        "endLineNumber": 811,
                        "endColumnNumber": 50
                    },
                    "nodeContext": "sum-=lu[row][i] * lu[i][col]",
                    "nodeType": "Assignment",
                    "astNodeNumber": 13,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 31,
                        "startLineNumber": 811,
                        "startColumnNumber": 20,
                        "endLineNumber": 811,
                        "endColumnNumber": 51
                    },
                    "nodeContext": "sum-=lu[row][i] * lu[i][col];\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 14,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 71,
                        "startLineNumber": 810,
                        "startColumnNumber": 46,
                        "endLineNumber": 812,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  sum-=lu[row][i] * lu[i][col];\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 15,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 101,
                        "startLineNumber": 810,
                        "startColumnNumber": 16,
                        "endLineNumber": 812,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "for (int i=0; i < col; i++) {\n  sum-=lu[row][i] * lu[i][col];\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 26,
                    "astHeight": 8
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 399,
                        "startLineNumber": 808,
                        "startColumnNumber": 52,
                        "endLineNumber": 820,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  sum=lu[row][col];\n  for (int i=0; i < col; i++) {\n    sum-=lu[row][i] * lu[i][col];\n  }\n  lu[row][col]=sum;\n  if (Math.abs(sum) > largest) {\n    largest=Math.abs(sum);\n    max=row;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 62,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 439,
                        "startLineNumber": 808,
                        "startColumnNumber": 12,
                        "endLineNumber": 820,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (int row=col; row < nRows; row++) {\n  sum=lu[row][col];\n  for (int i=0; i < col; i++) {\n    sum-=lu[row][i] * lu[i][col];\n  }\n  lu[row][col]=sum;\n  if (Math.abs(sum) > largest) {\n    largest=Math.abs(sum);\n    max=row;\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 73,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 1733,
                        "startLineNumber": 792,
                        "startColumnNumber": 46,
                        "endLineNumber": 846,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  double sum=0;\n  for (int row=0; row < col; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < row; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n  }\n  int max=col;\n  double largest=0d;\n  for (int row=col; row < nRows; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < col; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n    if (Math.abs(sum) > largest) {\n      largest=Math.abs(sum);\n      max=row;\n    }\n  }\n  if (Math.abs(lu[max][col]) < TOO_SMALL) {\n    lu=null;\n    throw new InvalidMatrixException(\"matrix is singular\");\n  }\n  if (max != col) {\n    double tmp=0;\n    for (int i=0; i < nCols; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=permutation[max];\n    permutation[max]=permutation[col];\n    permutation[col]=temp;\n    parity=-parity;\n  }\n  for (int row=col + 1; row < nRows; row++) {\n    lu[row][col]/=lu[col][col];\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 266,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1771,
                        "startLineNumber": 792,
                        "startColumnNumber": 8,
                        "endLineNumber": 846,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int col=0; col < nCols; col++) {\n  double sum=0;\n  for (int row=0; row < col; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < row; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n  }\n  int max=col;\n  double largest=0d;\n  for (int row=col; row < nRows; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < col; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n    if (Math.abs(sum) > largest) {\n      largest=Math.abs(sum);\n      max=row;\n    }\n  }\n  if (Math.abs(lu[max][col]) < TOO_SMALL) {\n    lu=null;\n    throw new InvalidMatrixException(\"matrix is singular\");\n  }\n  if (max != col) {\n    double tmp=0;\n    for (int i=0; i < nCols; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=permutation[max];\n    permutation[max]=permutation[col];\n    permutation[col]=temp;\n    parity=-parity;\n  }\n  for (int row=col + 1; row < nRows; row++) {\n    lu[row][col]/=lu[col][col];\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 277,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2284,
                        "startLineNumber": 775,
                        "startColumnNumber": 60,
                        "endLineNumber": 847,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  int nRows=this.getRowDimension();\n  int nCols=this.getColumnDimension();\n  if (nRows != nCols) {\n    throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");\n  }\n  lu=this.getData();\n  permutation=new int[nRows];\n  for (int row=0; row < nRows; row++) {\n    permutation[row]=row;\n  }\n  parity=1;\n  for (int col=0; col < nCols; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < row; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n    }\n    int max=col;\n    double largest=0d;\n    for (int row=col; row < nRows; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < col; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < TOO_SMALL) {\n      lu=null;\n      throw new InvalidMatrixException(\"matrix is singular\");\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < nCols; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=permutation[max];\n      permutation[max]=permutation[col];\n      permutation[col]=temp;\n      parity=-parity;\n    }\n    for (int row=col + 1; row < nRows; row++) {\n      lu[row][col]/=lu[col][col];\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 338,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3223,
                        "startLineNumber": 757,
                        "startColumnNumber": 4,
                        "endLineNumber": 847,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Computes a new <a href=\"http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf\"> LU decomposition</a> for this matrix, storing the result for use by other methods. <p> <strong>Implementation Note</strong>:<br> Uses <a href=\"http://www.damtp.cam.ac.uk/user/fdl/people/sd/lectures/nummeth98/linear.htm\"> Crout's algorithm</a>, with partial pivoting.</p> <p> <strong>Usage Note</strong>:<br> This method should rarely be invoked directly. Its only use is to force recomputation of the LU decomposition when changes have been made to the underlying data using direct array references. Changes made using setXxx methods will trigger recomputation when needed automatically.</p>\n * @throws InvalidMatrixException if the matrix is non-square or singular.\n */\npublic void luDecompose() throws InvalidMatrixException {\n  int nRows=this.getRowDimension();\n  int nCols=this.getColumnDimension();\n  if (nRows != nCols) {\n    throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");\n  }\n  lu=this.getData();\n  permutation=new int[nRows];\n  for (int row=0; row < nRows; row++) {\n    permutation[row]=row;\n  }\n  parity=1;\n  for (int col=0; col < nCols; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < row; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n    }\n    int max=col;\n    double largest=0d;\n    for (int row=col; row < nRows; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < col; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < TOO_SMALL) {\n      lu=null;\n      throw new InvalidMatrixException(\"matrix is singular\");\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < nCols; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=permutation[max];\n      permutation[max]=permutation[col];\n      permutation[col]=temp;\n      parity=-parity;\n    }\n    for (int row=col + 1; row < nRows; row++) {\n      lu[row][col]/=lu[col][col];\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 345,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 31,
                    "startLineNumber": 811,
                    "startColumnNumber": 20,
                    "endLineNumber": 811,
                    "endColumnNumber": 51
                },
                "nodeContext": "sum-=lu[row][i] * lu[i][col];\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 14,
                "astHeight": 6
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "row",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 813,
                "startColumnNumber": 19,
                "endLineNumber": 813,
                "endColumnNumber": 22
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 813,
                        "startColumnNumber": 16,
                        "endLineNumber": 813,
                        "endColumnNumber": 23
                    },
                    "nodeContext": "lu[row]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
                    "nodePosition": {
                        "charLength": 12,
                        "startLineNumber": 813,
                        "startColumnNumber": 16,
                        "endLineNumber": 813,
                        "endColumnNumber": 28
                    },
                    "nodeContext": "lu[row][col]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 18,
                        "startLineNumber": 813,
                        "startColumnNumber": 16,
                        "endLineNumber": 813,
                        "endColumnNumber": 34
                    },
                    "nodeContext": "lu[row][col]=sum",
                    "nodeType": "Assignment",
                    "astNodeNumber": 7,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 19,
                        "startLineNumber": 813,
                        "startColumnNumber": 16,
                        "endLineNumber": 813,
                        "endColumnNumber": 35
                    },
                    "nodeContext": "lu[row][col]=sum;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 8,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 399,
                        "startLineNumber": 808,
                        "startColumnNumber": 52,
                        "endLineNumber": 820,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  sum=lu[row][col];\n  for (int i=0; i < col; i++) {\n    sum-=lu[row][i] * lu[i][col];\n  }\n  lu[row][col]=sum;\n  if (Math.abs(sum) > largest) {\n    largest=Math.abs(sum);\n    max=row;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 62,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 439,
                        "startLineNumber": 808,
                        "startColumnNumber": 12,
                        "endLineNumber": 820,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (int row=col; row < nRows; row++) {\n  sum=lu[row][col];\n  for (int i=0; i < col; i++) {\n    sum-=lu[row][i] * lu[i][col];\n  }\n  lu[row][col]=sum;\n  if (Math.abs(sum) > largest) {\n    largest=Math.abs(sum);\n    max=row;\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 73,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 1733,
                        "startLineNumber": 792,
                        "startColumnNumber": 46,
                        "endLineNumber": 846,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  double sum=0;\n  for (int row=0; row < col; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < row; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n  }\n  int max=col;\n  double largest=0d;\n  for (int row=col; row < nRows; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < col; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n    if (Math.abs(sum) > largest) {\n      largest=Math.abs(sum);\n      max=row;\n    }\n  }\n  if (Math.abs(lu[max][col]) < TOO_SMALL) {\n    lu=null;\n    throw new InvalidMatrixException(\"matrix is singular\");\n  }\n  if (max != col) {\n    double tmp=0;\n    for (int i=0; i < nCols; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=permutation[max];\n    permutation[max]=permutation[col];\n    permutation[col]=temp;\n    parity=-parity;\n  }\n  for (int row=col + 1; row < nRows; row++) {\n    lu[row][col]/=lu[col][col];\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 266,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1771,
                        "startLineNumber": 792,
                        "startColumnNumber": 8,
                        "endLineNumber": 846,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int col=0; col < nCols; col++) {\n  double sum=0;\n  for (int row=0; row < col; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < row; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n  }\n  int max=col;\n  double largest=0d;\n  for (int row=col; row < nRows; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < col; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n    if (Math.abs(sum) > largest) {\n      largest=Math.abs(sum);\n      max=row;\n    }\n  }\n  if (Math.abs(lu[max][col]) < TOO_SMALL) {\n    lu=null;\n    throw new InvalidMatrixException(\"matrix is singular\");\n  }\n  if (max != col) {\n    double tmp=0;\n    for (int i=0; i < nCols; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=permutation[max];\n    permutation[max]=permutation[col];\n    permutation[col]=temp;\n    parity=-parity;\n  }\n  for (int row=col + 1; row < nRows; row++) {\n    lu[row][col]/=lu[col][col];\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 277,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2284,
                        "startLineNumber": 775,
                        "startColumnNumber": 60,
                        "endLineNumber": 847,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  int nRows=this.getRowDimension();\n  int nCols=this.getColumnDimension();\n  if (nRows != nCols) {\n    throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");\n  }\n  lu=this.getData();\n  permutation=new int[nRows];\n  for (int row=0; row < nRows; row++) {\n    permutation[row]=row;\n  }\n  parity=1;\n  for (int col=0; col < nCols; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < row; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n    }\n    int max=col;\n    double largest=0d;\n    for (int row=col; row < nRows; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < col; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < TOO_SMALL) {\n      lu=null;\n      throw new InvalidMatrixException(\"matrix is singular\");\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < nCols; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=permutation[max];\n      permutation[max]=permutation[col];\n      permutation[col]=temp;\n      parity=-parity;\n    }\n    for (int row=col + 1; row < nRows; row++) {\n      lu[row][col]/=lu[col][col];\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 338,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3223,
                        "startLineNumber": 757,
                        "startColumnNumber": 4,
                        "endLineNumber": 847,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Computes a new <a href=\"http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf\"> LU decomposition</a> for this matrix, storing the result for use by other methods. <p> <strong>Implementation Note</strong>:<br> Uses <a href=\"http://www.damtp.cam.ac.uk/user/fdl/people/sd/lectures/nummeth98/linear.htm\"> Crout's algorithm</a>, with partial pivoting.</p> <p> <strong>Usage Note</strong>:<br> This method should rarely be invoked directly. Its only use is to force recomputation of the LU decomposition when changes have been made to the underlying data using direct array references. Changes made using setXxx methods will trigger recomputation when needed automatically.</p>\n * @throws InvalidMatrixException if the matrix is non-square or singular.\n */\npublic void luDecompose() throws InvalidMatrixException {\n  int nRows=this.getRowDimension();\n  int nCols=this.getColumnDimension();\n  if (nRows != nCols) {\n    throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");\n  }\n  lu=this.getData();\n  permutation=new int[nRows];\n  for (int row=0; row < nRows; row++) {\n    permutation[row]=row;\n  }\n  parity=1;\n  for (int col=0; col < nCols; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < row; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n    }\n    int max=col;\n    double largest=0d;\n    for (int row=col; row < nRows; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < col; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < TOO_SMALL) {\n      lu=null;\n      throw new InvalidMatrixException(\"matrix is singular\");\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < nCols; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=permutation[max];\n      permutation[max]=permutation[col];\n      permutation[col]=temp;\n      parity=-parity;\n    }\n    for (int row=col + 1; row < nRows; row++) {\n      lu[row][col]/=lu[col][col];\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 345,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 19,
                    "startLineNumber": 813,
                    "startColumnNumber": 16,
                    "endLineNumber": 813,
                    "endColumnNumber": 35
                },
                "nodeContext": "lu[row][col]=sum;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 8,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "row",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 818,
                "startColumnNumber": 26,
                "endLineNumber": 818,
                "endColumnNumber": 29
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 9,
                        "startLineNumber": 818,
                        "startColumnNumber": 20,
                        "endLineNumber": 818,
                        "endColumnNumber": 29
                    },
                    "nodeContext": "max=row",
                    "nodeType": "Assignment",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 10,
                        "startLineNumber": 818,
                        "startColumnNumber": 20,
                        "endLineNumber": 818,
                        "endColumnNumber": 30
                    },
                    "nodeContext": "max=row;\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 4,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 95,
                        "startLineNumber": 816,
                        "startColumnNumber": 45,
                        "endLineNumber": 819,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  largest=Math.abs(sum);\n  max=row;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 12,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 124,
                        "startLineNumber": 816,
                        "startColumnNumber": 16,
                        "endLineNumber": 819,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (Math.abs(sum) > largest) {\n  largest=Math.abs(sum);\n  max=row;\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 19,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 399,
                        "startLineNumber": 808,
                        "startColumnNumber": 52,
                        "endLineNumber": 820,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  sum=lu[row][col];\n  for (int i=0; i < col; i++) {\n    sum-=lu[row][i] * lu[i][col];\n  }\n  lu[row][col]=sum;\n  if (Math.abs(sum) > largest) {\n    largest=Math.abs(sum);\n    max=row;\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 62,
                    "astHeight": 9
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 439,
                        "startLineNumber": 808,
                        "startColumnNumber": 12,
                        "endLineNumber": 820,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (int row=col; row < nRows; row++) {\n  sum=lu[row][col];\n  for (int i=0; i < col; i++) {\n    sum-=lu[row][i] * lu[i][col];\n  }\n  lu[row][col]=sum;\n  if (Math.abs(sum) > largest) {\n    largest=Math.abs(sum);\n    max=row;\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 73,
                    "astHeight": 10
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 1733,
                        "startLineNumber": 792,
                        "startColumnNumber": 46,
                        "endLineNumber": 846,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  double sum=0;\n  for (int row=0; row < col; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < row; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n  }\n  int max=col;\n  double largest=0d;\n  for (int row=col; row < nRows; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < col; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n    if (Math.abs(sum) > largest) {\n      largest=Math.abs(sum);\n      max=row;\n    }\n  }\n  if (Math.abs(lu[max][col]) < TOO_SMALL) {\n    lu=null;\n    throw new InvalidMatrixException(\"matrix is singular\");\n  }\n  if (max != col) {\n    double tmp=0;\n    for (int i=0; i < nCols; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=permutation[max];\n    permutation[max]=permutation[col];\n    permutation[col]=temp;\n    parity=-parity;\n  }\n  for (int row=col + 1; row < nRows; row++) {\n    lu[row][col]/=lu[col][col];\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 266,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1771,
                        "startLineNumber": 792,
                        "startColumnNumber": 8,
                        "endLineNumber": 846,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int col=0; col < nCols; col++) {\n  double sum=0;\n  for (int row=0; row < col; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < row; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n  }\n  int max=col;\n  double largest=0d;\n  for (int row=col; row < nRows; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < col; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n    if (Math.abs(sum) > largest) {\n      largest=Math.abs(sum);\n      max=row;\n    }\n  }\n  if (Math.abs(lu[max][col]) < TOO_SMALL) {\n    lu=null;\n    throw new InvalidMatrixException(\"matrix is singular\");\n  }\n  if (max != col) {\n    double tmp=0;\n    for (int i=0; i < nCols; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=permutation[max];\n    permutation[max]=permutation[col];\n    permutation[col]=temp;\n    parity=-parity;\n  }\n  for (int row=col + 1; row < nRows; row++) {\n    lu[row][col]/=lu[col][col];\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 277,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2284,
                        "startLineNumber": 775,
                        "startColumnNumber": 60,
                        "endLineNumber": 847,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  int nRows=this.getRowDimension();\n  int nCols=this.getColumnDimension();\n  if (nRows != nCols) {\n    throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");\n  }\n  lu=this.getData();\n  permutation=new int[nRows];\n  for (int row=0; row < nRows; row++) {\n    permutation[row]=row;\n  }\n  parity=1;\n  for (int col=0; col < nCols; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < row; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n    }\n    int max=col;\n    double largest=0d;\n    for (int row=col; row < nRows; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < col; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < TOO_SMALL) {\n      lu=null;\n      throw new InvalidMatrixException(\"matrix is singular\");\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < nCols; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=permutation[max];\n      permutation[max]=permutation[col];\n      permutation[col]=temp;\n      parity=-parity;\n    }\n    for (int row=col + 1; row < nRows; row++) {\n      lu[row][col]/=lu[col][col];\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 338,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3223,
                        "startLineNumber": 757,
                        "startColumnNumber": 4,
                        "endLineNumber": 847,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Computes a new <a href=\"http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf\"> LU decomposition</a> for this matrix, storing the result for use by other methods. <p> <strong>Implementation Note</strong>:<br> Uses <a href=\"http://www.damtp.cam.ac.uk/user/fdl/people/sd/lectures/nummeth98/linear.htm\"> Crout's algorithm</a>, with partial pivoting.</p> <p> <strong>Usage Note</strong>:<br> This method should rarely be invoked directly. Its only use is to force recomputation of the LU decomposition when changes have been made to the underlying data using direct array references. Changes made using setXxx methods will trigger recomputation when needed automatically.</p>\n * @throws InvalidMatrixException if the matrix is non-square or singular.\n */\npublic void luDecompose() throws InvalidMatrixException {\n  int nRows=this.getRowDimension();\n  int nCols=this.getColumnDimension();\n  if (nRows != nCols) {\n    throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");\n  }\n  lu=this.getData();\n  permutation=new int[nRows];\n  for (int row=0; row < nRows; row++) {\n    permutation[row]=row;\n  }\n  parity=1;\n  for (int col=0; col < nCols; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < row; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n    }\n    int max=col;\n    double largest=0d;\n    for (int row=col; row < nRows; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < col; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < TOO_SMALL) {\n      lu=null;\n      throw new InvalidMatrixException(\"matrix is singular\");\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < nCols; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=permutation[max];\n      permutation[max]=permutation[col];\n      permutation[col]=temp;\n      parity=-parity;\n    }\n    for (int row=col + 1; row < nRows; row++) {\n      lu[row][col]/=lu[col][col];\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 345,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 10,
                    "startLineNumber": 818,
                    "startColumnNumber": 20,
                    "endLineNumber": 818,
                    "endColumnNumber": 30
                },
                "nodeContext": "max=row;\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 4,
                "astHeight": 3
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "row",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 843,
                "startColumnNumber": 36,
                "endLineNumber": 843,
                "endColumnNumber": 39
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
                    "nodePosition": {
                        "charLength": 11,
                        "startLineNumber": 843,
                        "startColumnNumber": 36,
                        "endLineNumber": 843,
                        "endColumnNumber": 47
                    },
                    "nodeContext": "row < nRows",
                    "nodeType": "InfixExpression",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 105,
                        "startLineNumber": 843,
                        "startColumnNumber": 12,
                        "endLineNumber": 845,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (int row=col + 1; row < nRows; row++) {\n  lu[row][col]/=lu[col][col];\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 26,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 1733,
                        "startLineNumber": 792,
                        "startColumnNumber": 46,
                        "endLineNumber": 846,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  double sum=0;\n  for (int row=0; row < col; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < row; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n  }\n  int max=col;\n  double largest=0d;\n  for (int row=col; row < nRows; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < col; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n    if (Math.abs(sum) > largest) {\n      largest=Math.abs(sum);\n      max=row;\n    }\n  }\n  if (Math.abs(lu[max][col]) < TOO_SMALL) {\n    lu=null;\n    throw new InvalidMatrixException(\"matrix is singular\");\n  }\n  if (max != col) {\n    double tmp=0;\n    for (int i=0; i < nCols; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=permutation[max];\n    permutation[max]=permutation[col];\n    permutation[col]=temp;\n    parity=-parity;\n  }\n  for (int row=col + 1; row < nRows; row++) {\n    lu[row][col]/=lu[col][col];\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 266,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1771,
                        "startLineNumber": 792,
                        "startColumnNumber": 8,
                        "endLineNumber": 846,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int col=0; col < nCols; col++) {\n  double sum=0;\n  for (int row=0; row < col; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < row; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n  }\n  int max=col;\n  double largest=0d;\n  for (int row=col; row < nRows; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < col; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n    if (Math.abs(sum) > largest) {\n      largest=Math.abs(sum);\n      max=row;\n    }\n  }\n  if (Math.abs(lu[max][col]) < TOO_SMALL) {\n    lu=null;\n    throw new InvalidMatrixException(\"matrix is singular\");\n  }\n  if (max != col) {\n    double tmp=0;\n    for (int i=0; i < nCols; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=permutation[max];\n    permutation[max]=permutation[col];\n    permutation[col]=temp;\n    parity=-parity;\n  }\n  for (int row=col + 1; row < nRows; row++) {\n    lu[row][col]/=lu[col][col];\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 277,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2284,
                        "startLineNumber": 775,
                        "startColumnNumber": 60,
                        "endLineNumber": 847,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  int nRows=this.getRowDimension();\n  int nCols=this.getColumnDimension();\n  if (nRows != nCols) {\n    throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");\n  }\n  lu=this.getData();\n  permutation=new int[nRows];\n  for (int row=0; row < nRows; row++) {\n    permutation[row]=row;\n  }\n  parity=1;\n  for (int col=0; col < nCols; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < row; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n    }\n    int max=col;\n    double largest=0d;\n    for (int row=col; row < nRows; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < col; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < TOO_SMALL) {\n      lu=null;\n      throw new InvalidMatrixException(\"matrix is singular\");\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < nCols; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=permutation[max];\n      permutation[max]=permutation[col];\n      permutation[col]=temp;\n      parity=-parity;\n    }\n    for (int row=col + 1; row < nRows; row++) {\n      lu[row][col]/=lu[col][col];\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 338,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3223,
                        "startLineNumber": 757,
                        "startColumnNumber": 4,
                        "endLineNumber": 847,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Computes a new <a href=\"http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf\"> LU decomposition</a> for this matrix, storing the result for use by other methods. <p> <strong>Implementation Note</strong>:<br> Uses <a href=\"http://www.damtp.cam.ac.uk/user/fdl/people/sd/lectures/nummeth98/linear.htm\"> Crout's algorithm</a>, with partial pivoting.</p> <p> <strong>Usage Note</strong>:<br> This method should rarely be invoked directly. Its only use is to force recomputation of the LU decomposition when changes have been made to the underlying data using direct array references. Changes made using setXxx methods will trigger recomputation when needed automatically.</p>\n * @throws InvalidMatrixException if the matrix is non-square or singular.\n */\npublic void luDecompose() throws InvalidMatrixException {\n  int nRows=this.getRowDimension();\n  int nCols=this.getColumnDimension();\n  if (nRows != nCols) {\n    throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");\n  }\n  lu=this.getData();\n  permutation=new int[nRows];\n  for (int row=0; row < nRows; row++) {\n    permutation[row]=row;\n  }\n  parity=1;\n  for (int col=0; col < nCols; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < row; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n    }\n    int max=col;\n    double largest=0d;\n    for (int row=col; row < nRows; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < col; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < TOO_SMALL) {\n      lu=null;\n      throw new InvalidMatrixException(\"matrix is singular\");\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < nCols; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=permutation[max];\n      permutation[max]=permutation[col];\n      permutation[col]=temp;\n      parity=-parity;\n    }\n    for (int row=col + 1; row < nRows; row++) {\n      lu[row][col]/=lu[col][col];\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 345,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
                "nodePosition": {
                    "charLength": 11,
                    "startLineNumber": 843,
                    "startColumnNumber": 36,
                    "endLineNumber": 843,
                    "endColumnNumber": 47
                },
                "nodeContext": "row < nRows",
                "nodeType": "InfixExpression",
                "astNodeNumber": 3,
                "astHeight": 2
            },
            "tokenLength": 1,
            "type": "int"
        },
        {
            "nodeContext": "row",
            "nodeType": "SimpleName",
            "nodePosition": {
                "charLength": 3,
                "startLineNumber": 844,
                "startColumnNumber": 19,
                "endLineNumber": 844,
                "endColumnNumber": 22
            },
            "astNodeNumber": 1,
            "astHeight": 1,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
                    "nodePosition": {
                        "charLength": 7,
                        "startLineNumber": 844,
                        "startColumnNumber": 16,
                        "endLineNumber": 844,
                        "endColumnNumber": 23
                    },
                    "nodeContext": "lu[row]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 3,
                    "astHeight": 2
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
                    "nodePosition": {
                        "charLength": 12,
                        "startLineNumber": 844,
                        "startColumnNumber": 16,
                        "endLineNumber": 844,
                        "endColumnNumber": 28
                    },
                    "nodeContext": "lu[row][col]",
                    "nodeType": "ArrayAccess",
                    "astNodeNumber": 5,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 28,
                        "startLineNumber": 844,
                        "startColumnNumber": 16,
                        "endLineNumber": 844,
                        "endColumnNumber": 44
                    },
                    "nodeContext": "lu[row][col]/=lu[col][col]",
                    "nodeType": "Assignment",
                    "astNodeNumber": 11,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 29,
                        "startLineNumber": 844,
                        "startColumnNumber": 16,
                        "endLineNumber": 844,
                        "endColumnNumber": 45
                    },
                    "nodeContext": "lu[row][col]/=lu[col][col];\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 12,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 61,
                        "startLineNumber": 843,
                        "startColumnNumber": 56,
                        "endLineNumber": 845,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  lu[row][col]/=lu[col][col];\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 13,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 105,
                        "startLineNumber": 843,
                        "startColumnNumber": 12,
                        "endLineNumber": 845,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "for (int row=col + 1; row < nRows; row++) {\n  lu[row][col]/=lu[col][col];\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 26,
                    "astHeight": 7
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
                    "nodePosition": {
                        "charLength": 1733,
                        "startLineNumber": 792,
                        "startColumnNumber": 46,
                        "endLineNumber": 846,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  double sum=0;\n  for (int row=0; row < col; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < row; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n  }\n  int max=col;\n  double largest=0d;\n  for (int row=col; row < nRows; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < col; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n    if (Math.abs(sum) > largest) {\n      largest=Math.abs(sum);\n      max=row;\n    }\n  }\n  if (Math.abs(lu[max][col]) < TOO_SMALL) {\n    lu=null;\n    throw new InvalidMatrixException(\"matrix is singular\");\n  }\n  if (max != col) {\n    double tmp=0;\n    for (int i=0; i < nCols; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=permutation[max];\n    permutation[max]=permutation[col];\n    permutation[col]=temp;\n    parity=-parity;\n  }\n  for (int row=col + 1; row < nRows; row++) {\n    lu[row][col]/=lu[col][col];\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 266,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1771,
                        "startLineNumber": 792,
                        "startColumnNumber": 8,
                        "endLineNumber": 846,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (int col=0; col < nCols; col++) {\n  double sum=0;\n  for (int row=0; row < col; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < row; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n  }\n  int max=col;\n  double largest=0d;\n  for (int row=col; row < nRows; row++) {\n    sum=lu[row][col];\n    for (int i=0; i < col; i++) {\n      sum-=lu[row][i] * lu[i][col];\n    }\n    lu[row][col]=sum;\n    if (Math.abs(sum) > largest) {\n      largest=Math.abs(sum);\n      max=row;\n    }\n  }\n  if (Math.abs(lu[max][col]) < TOO_SMALL) {\n    lu=null;\n    throw new InvalidMatrixException(\"matrix is singular\");\n  }\n  if (max != col) {\n    double tmp=0;\n    for (int i=0; i < nCols; i++) {\n      tmp=lu[max][i];\n      lu[max][i]=lu[col][i];\n      lu[col][i]=tmp;\n    }\n    int temp=permutation[max];\n    permutation[max]=permutation[col];\n    permutation[col]=temp;\n    parity=-parity;\n  }\n  for (int row=col + 1; row < nRows; row++) {\n    lu[row][col]/=lu[col][col];\n  }\n}\n",
                    "nodeType": "ForStatement",
                    "astNodeNumber": 277,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 2284,
                        "startLineNumber": 775,
                        "startColumnNumber": 60,
                        "endLineNumber": 847,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  int nRows=this.getRowDimension();\n  int nCols=this.getColumnDimension();\n  if (nRows != nCols) {\n    throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");\n  }\n  lu=this.getData();\n  permutation=new int[nRows];\n  for (int row=0; row < nRows; row++) {\n    permutation[row]=row;\n  }\n  parity=1;\n  for (int col=0; col < nCols; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < row; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n    }\n    int max=col;\n    double largest=0d;\n    for (int row=col; row < nRows; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < col; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < TOO_SMALL) {\n      lu=null;\n      throw new InvalidMatrixException(\"matrix is singular\");\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < nCols; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=permutation[max];\n      permutation[max]=permutation[col];\n      permutation[col]=temp;\n      parity=-parity;\n    }\n    for (int row=col + 1; row < nRows; row++) {\n      lu[row][col]/=lu[col][col];\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 338,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 3223,
                        "startLineNumber": 757,
                        "startColumnNumber": 4,
                        "endLineNumber": 847,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "/** \n * Computes a new <a href=\"http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf\"> LU decomposition</a> for this matrix, storing the result for use by other methods. <p> <strong>Implementation Note</strong>:<br> Uses <a href=\"http://www.damtp.cam.ac.uk/user/fdl/people/sd/lectures/nummeth98/linear.htm\"> Crout's algorithm</a>, with partial pivoting.</p> <p> <strong>Usage Note</strong>:<br> This method should rarely be invoked directly. Its only use is to force recomputation of the LU decomposition when changes have been made to the underlying data using direct array references. Changes made using setXxx methods will trigger recomputation when needed automatically.</p>\n * @throws InvalidMatrixException if the matrix is non-square or singular.\n */\npublic void luDecompose() throws InvalidMatrixException {\n  int nRows=this.getRowDimension();\n  int nCols=this.getColumnDimension();\n  if (nRows != nCols) {\n    throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");\n  }\n  lu=this.getData();\n  permutation=new int[nRows];\n  for (int row=0; row < nRows; row++) {\n    permutation[row]=row;\n  }\n  parity=1;\n  for (int col=0; col < nCols; col++) {\n    double sum=0;\n    for (int row=0; row < col; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < row; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n    }\n    int max=col;\n    double largest=0d;\n    for (int row=col; row < nRows; row++) {\n      sum=lu[row][col];\n      for (int i=0; i < col; i++) {\n        sum-=lu[row][i] * lu[i][col];\n      }\n      lu[row][col]=sum;\n      if (Math.abs(sum) > largest) {\n        largest=Math.abs(sum);\n        max=row;\n      }\n    }\n    if (Math.abs(lu[max][col]) < TOO_SMALL) {\n      lu=null;\n      throw new InvalidMatrixException(\"matrix is singular\");\n    }\n    if (max != col) {\n      double tmp=0;\n      for (int i=0; i < nCols; i++) {\n        tmp=lu[max][i];\n        lu[max][i]=lu[col][i];\n        lu[col][i]=tmp;\n      }\n      int temp=permutation[max];\n      permutation[max]=permutation[col];\n      permutation[col]=temp;\n      parity=-parity;\n    }\n    for (int row=col + 1; row < nRows; row++) {\n      lu[row][col]/=lu[col][col];\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 345,
                    "astHeight": 14
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 29,
                    "startLineNumber": 844,
                    "startColumnNumber": 16,
                    "endLineNumber": 844,
                    "endColumnNumber": 45
                },
                "nodeContext": "lu[row][col]/=lu[col][col];\n",
                "nodeType": "ExpressionStatement",
                "astNodeNumber": 12,
                "astHeight": 5
            },
            "tokenLength": 1,
            "type": "int"
        }
    ],
    "positionList": [
        {
            "charLength": 3,
            "startLineNumber": 786,
            "startColumnNumber": 26,
            "endLineNumber": 786,
            "endColumnNumber": 29
        },
        {
            "charLength": 3,
            "startLineNumber": 787,
            "startColumnNumber": 24,
            "endLineNumber": 787,
            "endColumnNumber": 27
        },
        {
            "charLength": 3,
            "startLineNumber": 787,
            "startColumnNumber": 31,
            "endLineNumber": 787,
            "endColumnNumber": 34
        },
        {
            "charLength": 3,
            "startLineNumber": 797,
            "startColumnNumber": 30,
            "endLineNumber": 797,
            "endColumnNumber": 33
        },
        {
            "charLength": 3,
            "startLineNumber": 798,
            "startColumnNumber": 25,
            "endLineNumber": 798,
            "endColumnNumber": 28
        },
        {
            "charLength": 3,
            "startLineNumber": 799,
            "startColumnNumber": 36,
            "endLineNumber": 799,
            "endColumnNumber": 39
        },
        {
            "charLength": 3,
            "startLineNumber": 800,
            "startColumnNumber": 30,
            "endLineNumber": 800,
            "endColumnNumber": 33
        },
        {
            "charLength": 3,
            "startLineNumber": 802,
            "startColumnNumber": 19,
            "endLineNumber": 802,
            "endColumnNumber": 22
        },
        {
            "charLength": 3,
            "startLineNumber": 808,
            "startColumnNumber": 32,
            "endLineNumber": 808,
            "endColumnNumber": 35
        },
        {
            "charLength": 3,
            "startLineNumber": 809,
            "startColumnNumber": 25,
            "endLineNumber": 809,
            "endColumnNumber": 28
        },
        {
            "charLength": 3,
            "startLineNumber": 811,
            "startColumnNumber": 30,
            "endLineNumber": 811,
            "endColumnNumber": 33
        },
        {
            "charLength": 3,
            "startLineNumber": 813,
            "startColumnNumber": 19,
            "endLineNumber": 813,
            "endColumnNumber": 22
        },
        {
            "charLength": 3,
            "startLineNumber": 818,
            "startColumnNumber": 26,
            "endLineNumber": 818,
            "endColumnNumber": 29
        },
        {
            "charLength": 3,
            "startLineNumber": 843,
            "startColumnNumber": 36,
            "endLineNumber": 843,
            "endColumnNumber": 39
        },
        {
            "charLength": 3,
            "startLineNumber": 844,
            "startColumnNumber": 19,
            "endLineNumber": 844,
            "endColumnNumber": 22
        }
    ],
    "layoutRelationDataList": [
        {
            "firstKey": 0,
            "secondKey": 1,
            "layout": 1
        },
        {
            "firstKey": 0,
            "secondKey": 2,
            "layout": 1
        },
        {
            "firstKey": 0,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 0,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 1,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 1,
            "secondKey": 2,
            "layout": 1
        },
        {
            "firstKey": 1,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 1,
            "secondKey": 4,
            "layout": 5
        },
        {
            "firstKey": 1,
            "secondKey": 5,
            "layout": 5
        },
        {
            "firstKey": 1,
            "secondKey": 6,
            "layout": 5
        },
        {
            "firstKey": 1,
            "secondKey": 7,
            "layout": 5
        },
        {
            "firstKey": 1,
            "secondKey": 8,
            "layout": 5
        },
        {
            "firstKey": 1,
            "secondKey": 9,
            "layout": 5
        },
        {
            "firstKey": 1,
            "secondKey": 10,
            "layout": 5
        },
        {
            "firstKey": 1,
            "secondKey": 11,
            "layout": 5
        },
        {
            "firstKey": 1,
            "secondKey": 12,
            "layout": 5
        },
        {
            "firstKey": 1,
            "secondKey": 13,
            "layout": 5
        },
        {
            "firstKey": 1,
            "secondKey": 14,
            "layout": 5
        },
        {
            "firstKey": 2,
            "secondKey": 0,
            "layout": 3
        },
        {
            "firstKey": 2,
            "secondKey": 1,
            "layout": 0
        },
        {
            "firstKey": 2,
            "secondKey": 3,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 2,
            "secondKey": 14,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 3,
            "secondKey": 4,
            "layout": 1
        },
        {
            "firstKey": 3,
            "secondKey": 5,
            "layout": 1
        },
        {
            "firstKey": 3,
            "secondKey": 6,
            "layout": 1
        },
        {
            "firstKey": 3,
            "secondKey": 7,
            "layout": 1
        },
        {
            "firstKey": 3,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 3,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 4,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 4,
            "secondKey": 1,
            "layout": 8
        },
        {
            "firstKey": 4,
            "secondKey": 2,
            "layout": 8
        },
        {
            "firstKey": 4,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 4,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 7,
            "layout": 4
        },
        {
            "firstKey": 4,
            "secondKey": 8,
            "layout": 6
        },
        {
            "firstKey": 4,
            "secondKey": 9,
            "layout": 6
        },
        {
            "firstKey": 4,
            "secondKey": 10,
            "layout": 6
        },
        {
            "firstKey": 4,
            "secondKey": 11,
            "layout": 6
        },
        {
            "firstKey": 4,
            "secondKey": 12,
            "layout": 6
        },
        {
            "firstKey": 4,
            "secondKey": 13,
            "layout": 6
        },
        {
            "firstKey": 4,
            "secondKey": 14,
            "layout": 6
        },
        {
            "firstKey": 5,
            "secondKey": 0,
            "layout": 6
        },
        {
            "firstKey": 5,
            "secondKey": 1,
            "layout": 6
        },
        {
            "firstKey": 5,
            "secondKey": 2,
            "layout": 6
        },
        {
            "firstKey": 5,
            "secondKey": 3,
            "layout": 3
        },
        {
            "firstKey": 5,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 6,
            "layout": 1
        },
        {
            "firstKey": 5,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 5,
            "secondKey": 8,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 13,
            "layout": 4
        },
        {
            "firstKey": 5,
            "secondKey": 14,
            "layout": 4
        },
        {
            "firstKey": 6,
            "secondKey": 0,
            "layout": 11
        },
        {
            "firstKey": 6,
            "secondKey": 1,
            "layout": 11
        },
        {
            "firstKey": 6,
            "secondKey": 2,
            "layout": 11
        },
        {
            "firstKey": 6,
            "secondKey": 3,
            "layout": 8
        },
        {
            "firstKey": 6,
            "secondKey": 4,
            "layout": 7
        },
        {
            "firstKey": 6,
            "secondKey": 5,
            "layout": 6
        },
        {
            "firstKey": 6,
            "secondKey": 7,
            "layout": 7
        },
        {
            "firstKey": 6,
            "secondKey": 8,
            "layout": 9
        },
        {
            "firstKey": 6,
            "secondKey": 9,
            "layout": 9
        },
        {
            "firstKey": 6,
            "secondKey": 10,
            "layout": 9
        },
        {
            "firstKey": 6,
            "secondKey": 11,
            "layout": 9
        },
        {
            "firstKey": 6,
            "secondKey": 12,
            "layout": 9
        },
        {
            "firstKey": 6,
            "secondKey": 13,
            "layout": 9
        },
        {
            "firstKey": 6,
            "secondKey": 14,
            "layout": 9
        },
        {
            "firstKey": 7,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 7,
            "secondKey": 1,
            "layout": 8
        },
        {
            "firstKey": 7,
            "secondKey": 2,
            "layout": 8
        },
        {
            "firstKey": 7,
            "secondKey": 3,
            "layout": 5
        },
        {
            "firstKey": 7,
            "secondKey": 4,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 5,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 6,
            "layout": 4
        },
        {
            "firstKey": 7,
            "secondKey": 8,
            "layout": 6
        },
        {
            "firstKey": 7,
            "secondKey": 9,
            "layout": 6
        },
        {
            "firstKey": 7,
            "secondKey": 10,
            "layout": 6
        },
        {
            "firstKey": 7,
            "secondKey": 11,
            "layout": 6
        },
        {
            "firstKey": 7,
            "secondKey": 12,
            "layout": 6
        },
        {
            "firstKey": 7,
            "secondKey": 13,
            "layout": 6
        },
        {
            "firstKey": 7,
            "secondKey": 14,
            "layout": 6
        },
        {
            "firstKey": 8,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 8,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 8,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 8,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 8,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 8,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 8,
            "secondKey": 9,
            "layout": 1
        },
        {
            "firstKey": 8,
            "secondKey": 10,
            "layout": 1
        },
        {
            "firstKey": 8,
            "secondKey": 11,
            "layout": 1
        },
        {
            "firstKey": 8,
            "secondKey": 12,
            "layout": 1
        },
        {
            "firstKey": 8,
            "secondKey": 13,
            "layout": 2
        },
        {
            "firstKey": 8,
            "secondKey": 14,
            "layout": 2
        },
        {
            "firstKey": 9,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 9,
            "secondKey": 1,
            "layout": 8
        },
        {
            "firstKey": 9,
            "secondKey": 2,
            "layout": 8
        },
        {
            "firstKey": 9,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 9,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 9,
            "secondKey": 5,
            "layout": 6
        },
        {
            "firstKey": 9,
            "secondKey": 6,
            "layout": 6
        },
        {
            "firstKey": 9,
            "secondKey": 7,
            "layout": 6
        },
        {
            "firstKey": 9,
            "secondKey": 8,
            "layout": 5
        },
        {
            "firstKey": 9,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 9,
            "secondKey": 13,
            "layout": 6
        },
        {
            "firstKey": 9,
            "secondKey": 14,
            "layout": 6
        },
        {
            "firstKey": 10,
            "secondKey": 0,
            "layout": 11
        },
        {
            "firstKey": 10,
            "secondKey": 1,
            "layout": 11
        },
        {
            "firstKey": 10,
            "secondKey": 2,
            "layout": 11
        },
        {
            "firstKey": 10,
            "secondKey": 3,
            "layout": 9
        },
        {
            "firstKey": 10,
            "secondKey": 4,
            "layout": 9
        },
        {
            "firstKey": 10,
            "secondKey": 5,
            "layout": 9
        },
        {
            "firstKey": 10,
            "secondKey": 6,
            "layout": 9
        },
        {
            "firstKey": 10,
            "secondKey": 7,
            "layout": 9
        },
        {
            "firstKey": 10,
            "secondKey": 8,
            "layout": 8
        },
        {
            "firstKey": 10,
            "secondKey": 9,
            "layout": 7
        },
        {
            "firstKey": 10,
            "secondKey": 11,
            "layout": 7
        },
        {
            "firstKey": 10,
            "secondKey": 12,
            "layout": 7
        },
        {
            "firstKey": 10,
            "secondKey": 13,
            "layout": 9
        },
        {
            "firstKey": 10,
            "secondKey": 14,
            "layout": 9
        },
        {
            "firstKey": 11,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 11,
            "secondKey": 1,
            "layout": 8
        },
        {
            "firstKey": 11,
            "secondKey": 2,
            "layout": 8
        },
        {
            "firstKey": 11,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 11,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 11,
            "secondKey": 5,
            "layout": 6
        },
        {
            "firstKey": 11,
            "secondKey": 6,
            "layout": 6
        },
        {
            "firstKey": 11,
            "secondKey": 7,
            "layout": 6
        },
        {
            "firstKey": 11,
            "secondKey": 8,
            "layout": 5
        },
        {
            "firstKey": 11,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 11,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 11,
            "secondKey": 12,
            "layout": 4
        },
        {
            "firstKey": 11,
            "secondKey": 13,
            "layout": 6
        },
        {
            "firstKey": 11,
            "secondKey": 14,
            "layout": 6
        },
        {
            "firstKey": 12,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 12,
            "secondKey": 1,
            "layout": 8
        },
        {
            "firstKey": 12,
            "secondKey": 2,
            "layout": 8
        },
        {
            "firstKey": 12,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 12,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 12,
            "secondKey": 5,
            "layout": 6
        },
        {
            "firstKey": 12,
            "secondKey": 6,
            "layout": 6
        },
        {
            "firstKey": 12,
            "secondKey": 7,
            "layout": 6
        },
        {
            "firstKey": 12,
            "secondKey": 8,
            "layout": 5
        },
        {
            "firstKey": 12,
            "secondKey": 9,
            "layout": 4
        },
        {
            "firstKey": 12,
            "secondKey": 10,
            "layout": 4
        },
        {
            "firstKey": 12,
            "secondKey": 11,
            "layout": 4
        },
        {
            "firstKey": 12,
            "secondKey": 13,
            "layout": 6
        },
        {
            "firstKey": 12,
            "secondKey": 14,
            "layout": 6
        },
        {
            "firstKey": 13,
            "secondKey": 0,
            "layout": 4
        },
        {
            "firstKey": 13,
            "secondKey": 1,
            "layout": 4
        },
        {
            "firstKey": 13,
            "secondKey": 2,
            "layout": 4
        },
        {
            "firstKey": 13,
            "secondKey": 3,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 4,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 5,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 6,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 7,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 8,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 9,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 10,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 11,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 12,
            "layout": 2
        },
        {
            "firstKey": 13,
            "secondKey": 14,
            "layout": 1
        },
        {
            "firstKey": 14,
            "secondKey": 0,
            "layout": 8
        },
        {
            "firstKey": 14,
            "secondKey": 1,
            "layout": 8
        },
        {
            "firstKey": 14,
            "secondKey": 2,
            "layout": 8
        },
        {
            "firstKey": 14,
            "secondKey": 3,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 4,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 5,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 6,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 7,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 8,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 9,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 10,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 11,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 12,
            "layout": 6
        },
        {
            "firstKey": 14,
            "secondKey": 13,
            "layout": 5
        }
    ]
}