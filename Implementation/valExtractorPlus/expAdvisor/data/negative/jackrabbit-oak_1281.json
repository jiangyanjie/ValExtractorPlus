{
    "id": 1281,
    "expression": "property.getValue(property.getType())",
    "projectName": "jackrabbit-oak",
    "commitID": "51540109a2f36b2a5ea30a55a657673cc1d4bb1d",
    "filePath": "oak-solr-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/solr/index/SolrIndexEditor.java",
    "occurrences": 1,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "property.getValue(property.getType())",
            "nodeType": "MethodInvocation",
            "nodePosition": {
                "charLength": 37,
                "startLineNumber": 234,
                "startColumnNumber": 39,
                "endLineNumber": 234,
                "endColumnNumber": 76
            },
            "astNodeNumber": 6,
            "astHeight": 3,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                    "nodePosition": {
                        "charLength": 101,
                        "startLineNumber": 233,
                        "startColumnNumber": 20,
                        "endLineNumber": 234,
                        "endColumnNumber": 77
                    },
                    "nodeContext": "inputDocument.addField(fieldName,property.getValue(property.getType()))",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 10,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 102,
                        "startLineNumber": 233,
                        "startColumnNumber": 20,
                        "endLineNumber": 234,
                        "endColumnNumber": 78
                    },
                    "nodeContext": "inputDocument.addField(fieldName,property.getValue(property.getType()));\n",
                    "nodeType": "ExpressionStatement",
                    "astNodeNumber": 11,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 142,
                        "startLineNumber": 232,
                        "startColumnNumber": 39,
                        "endLineNumber": 235,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "{\n  inputDocument.addField(fieldName,property.getValue(property.getType()));\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 12,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 833,
                        "startLineNumber": 232,
                        "startColumnNumber": 16,
                        "endLineNumber": 246,
                        "endColumnNumber": 17
                    },
                    "nodeContext": "if (fieldName != null) {\n  inputDocument.addField(fieldName,property.getValue(property.getType()));\n}\n else {\n  if (Type.BINARY.tag() == property.getType().tag()) {\n    inputDocument.addField(property.getName(),extractTextValues(property,state));\n  }\n else   if (property.isArray()) {\n    for (    String s : property.getValue(Type.STRINGS)) {\n      inputDocument.addField(property.getName(),s);\n    }\n  }\n else {\n    inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 80,
                    "astHeight": 11
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
                    "nodePosition": {
                        "charLength": 1035,
                        "startLineNumber": 229,
                        "startColumnNumber": 91,
                        "endLineNumber": 247,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "{\n  String fieldName=configuration.getFieldNameFor(property.getType());\n  if (fieldName != null) {\n    inputDocument.addField(fieldName,property.getValue(property.getType()));\n  }\n else {\n    if (Type.BINARY.tag() == property.getType().tag()) {\n      inputDocument.addField(property.getName(),extractTextValues(property,state));\n    }\n else     if (property.isArray()) {\n      for (      String s : property.getValue(Type.STRINGS)) {\n        inputDocument.addField(property.getName(),s);\n      }\n    }\n else {\n      inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 92,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1243,
                        "startLineNumber": 228,
                        "startColumnNumber": 12,
                        "endLineNumber": 247,
                        "endColumnNumber": 13
                    },
                    "nodeContext": "if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n  String fieldName=configuration.getFieldNameFor(property.getType());\n  if (fieldName != null) {\n    inputDocument.addField(fieldName,property.getValue(property.getType()));\n  }\n else {\n    if (Type.BINARY.tag() == property.getType().tag()) {\n      inputDocument.addField(property.getName(),extractTextValues(property,state));\n    }\n else     if (property.isArray()) {\n      for (      String s : property.getValue(Type.STRINGS)) {\n        inputDocument.addField(property.getName(),s);\n      }\n    }\n else {\n      inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n    }\n  }\n}\n",
                    "nodeType": "IfStatement",
                    "astNodeNumber": 120,
                    "astHeight": 13
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
                    "nodePosition": {
                        "charLength": 1267,
                        "startLineNumber": 227,
                        "startColumnNumber": 61,
                        "endLineNumber": 248,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "{\n  if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n    String fieldName=configuration.getFieldNameFor(property.getType());\n    if (fieldName != null) {\n      inputDocument.addField(fieldName,property.getValue(property.getType()));\n    }\n else {\n      if (Type.BINARY.tag() == property.getType().tag()) {\n        inputDocument.addField(property.getName(),extractTextValues(property,state));\n      }\n else       if (property.isArray()) {\n        for (        String s : property.getValue(Type.STRINGS)) {\n          inputDocument.addField(property.getName(),s);\n        }\n      }\n else {\n        inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n      }\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 121,
                    "astHeight": 14
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 1320,
                        "startLineNumber": 227,
                        "startColumnNumber": 8,
                        "endLineNumber": 248,
                        "endColumnNumber": 9
                    },
                    "nodeContext": "for (PropertyState property : state.getProperties()) {\n  if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n    String fieldName=configuration.getFieldNameFor(property.getType());\n    if (fieldName != null) {\n      inputDocument.addField(fieldName,property.getValue(property.getType()));\n    }\n else {\n      if (Type.BINARY.tag() == property.getType().tag()) {\n        inputDocument.addField(property.getName(),extractTextValues(property,state));\n      }\n else       if (property.isArray()) {\n        for (        String s : property.getValue(Type.STRINGS)) {\n          inputDocument.addField(property.getName(),s);\n        }\n      }\n else {\n        inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n      }\n    }\n  }\n}\n",
                    "nodeType": "EnhancedForStatement",
                    "astNodeNumber": 129,
                    "astHeight": 15
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1534,
                        "startLineNumber": 223,
                        "startColumnNumber": 60,
                        "endLineNumber": 250,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  SolrInputDocument inputDocument=new SolrInputDocument();\n  String path=getPath();\n  inputDocument.addField(configuration.getPathField(),path);\n  for (  PropertyState property : state.getProperties()) {\n    if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n      String fieldName=configuration.getFieldNameFor(property.getType());\n      if (fieldName != null) {\n        inputDocument.addField(fieldName,property.getValue(property.getType()));\n      }\n else {\n        if (Type.BINARY.tag() == property.getType().tag()) {\n          inputDocument.addField(property.getName(),extractTextValues(property,state));\n        }\n else         if (property.isArray()) {\n          for (          String s : property.getValue(Type.STRINGS)) {\n            inputDocument.addField(property.getName(),s);\n          }\n        }\n else {\n          inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n        }\n      }\n    }\n  }\n  return inputDocument;\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 155,
                    "astHeight": 16
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1590,
                        "startLineNumber": 223,
                        "startColumnNumber": 4,
                        "endLineNumber": 250,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "private SolrInputDocument docFromState(NodeState state){\n  SolrInputDocument inputDocument=new SolrInputDocument();\n  String path=getPath();\n  inputDocument.addField(configuration.getPathField(),path);\n  for (  PropertyState property : state.getProperties()) {\n    if ((configuration.getUsedProperties().size() > 0 && configuration.getUsedProperties().contains(property.getName())) || !configuration.getIgnoredProperties().contains(property.getName())) {\n      String fieldName=configuration.getFieldNameFor(property.getType());\n      if (fieldName != null) {\n        inputDocument.addField(fieldName,property.getValue(property.getType()));\n      }\n else {\n        if (Type.BINARY.tag() == property.getType().tag()) {\n          inputDocument.addField(property.getName(),extractTextValues(property,state));\n        }\n else         if (property.isArray()) {\n          for (          String s : property.getValue(Type.STRINGS)) {\n            inputDocument.addField(property.getName(),s);\n          }\n        }\n else {\n          inputDocument.addField(property.getName(),property.getValue(Type.STRING));\n        }\n      }\n    }\n  }\n  return inputDocument;\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 164,
                    "astHeight": 17
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
                "nodePosition": {
                    "charLength": 101,
                    "startLineNumber": 233,
                    "startColumnNumber": 20,
                    "endLineNumber": 234,
                    "endColumnNumber": 77
                },
                "nodeContext": "inputDocument.addField(fieldName,property.getValue(property.getType()))",
                "nodeType": "MethodInvocation",
                "astNodeNumber": 10,
                "astHeight": 4
            },
            "tokenLength": 4,
            "type": ""
        }
    ],
    "positionList": [
        {
            "charLength": 37,
            "startLineNumber": 234,
            "startColumnNumber": 39,
            "endLineNumber": 234,
            "endColumnNumber": 76
        }
    ],
    "layoutRelationDataList": []
}