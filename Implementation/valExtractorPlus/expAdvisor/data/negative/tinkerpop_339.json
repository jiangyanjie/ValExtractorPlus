{
    "id": 339,
    "expression": "StateKey.SERIALIZER",
    "projectName": "tinkerpop",
    "commitID": "95ff755d6e279c0f19b7be0cabe9eb41df242685",
    "filePath": "gremlin-server/src/main/java/org/apache/tinkerpop/gremlin/server/handler/NioGremlinResponseEncoder.java",
    "occurrences": 1,
    "isArithmeticExpression": 1,
    "isGetTypeMethod": 1,
    "expressionList": [
        {
            "nodeContext": "StateKey.SERIALIZER",
            "nodeType": "QualifiedName",
            "nodePosition": {
                "charLength": 19,
                "startLineNumber": 50,
                "startColumnNumber": 64,
                "endLineNumber": 50,
                "endColumnNumber": 83
            },
            "astNodeNumber": 3,
            "astHeight": 2,
            "parentDataList": [
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
                    "nodePosition": {
                        "charLength": 39,
                        "startLineNumber": 50,
                        "startColumnNumber": 45,
                        "endLineNumber": 50,
                        "endColumnNumber": 84
                    },
                    "nodeContext": "ctx.channel().attr(StateKey.SERIALIZER)",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 8,
                    "astHeight": 3
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
                    "nodePosition": {
                        "charLength": 45,
                        "startLineNumber": 50,
                        "startColumnNumber": 45,
                        "endLineNumber": 50,
                        "endColumnNumber": 90
                    },
                    "nodeContext": "ctx.channel().attr(StateKey.SERIALIZER).get()",
                    "nodeType": "MethodInvocation",
                    "astNodeNumber": 10,
                    "astHeight": 4
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
                    "nodePosition": {
                        "charLength": 58,
                        "startLineNumber": 50,
                        "startColumnNumber": 32,
                        "endLineNumber": 50,
                        "endColumnNumber": 90
                    },
                    "nodeContext": "serializer=ctx.channel().attr(StateKey.SERIALIZER).get()",
                    "nodeType": "VariableDeclarationFragment",
                    "astNodeNumber": 12,
                    "astHeight": 5
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                    "nodePosition": {
                        "charLength": 83,
                        "startLineNumber": 50,
                        "startColumnNumber": 8,
                        "endLineNumber": 50,
                        "endColumnNumber": 91
                    },
                    "nodeContext": "final MessageSerializer serializer=ctx.channel().attr(StateKey.SERIALIZER).get();\n",
                    "nodeType": "VariableDeclarationStatement",
                    "astNodeNumber": 16,
                    "astHeight": 6
                },
                {
                    "locationInParent": "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
                    "nodePosition": {
                        "charLength": 1829,
                        "startLineNumber": 49,
                        "startColumnNumber": 138,
                        "endLineNumber": 80,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "{\n  final MessageSerializer serializer=ctx.channel().attr(StateKey.SERIALIZER).get();\n  final boolean useBinary=ctx.channel().attr(StateKey.USE_BINARY).get();\n  try {\n    if (!responseMessage.getStatus().getCode().isSuccess())     errorMeter.mark();\n    if (useBinary)     byteBuf.writeBytes(serializer.serializeResponseAsBinary(responseMessage,ctx.alloc()));\n else {\n      final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n      byteBuf.writeBytes(textSerializer.serializeResponseAsString(responseMessage).getBytes(UTF8));\n    }\n  }\n catch (  Exception ex) {\n    errorMeter.mark();\n    logger.warn(\"The result [{}] in the request {} could not be serialized and returned.\",responseMessage.getResult(),responseMessage.getRequestId(),ex);\n    final String errorMessage=String.format(\"Error during serialization: %s\",ex.getCause() != null ? ex.getCause().getMessage() : ex.getMessage());\n    final ResponseMessage error=ResponseMessage.build(responseMessage.getRequestId()).statusMessage(errorMessage).code(ResponseStatusCode.SERVER_ERROR_SERIALIZATION).create();\n    if (useBinary) {\n      byteBuf.writeBytes(serializer.serializeResponseAsBinary(error,ctx.alloc()));\n    }\n else {\n      final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n      byteBuf.writeBytes(textSerializer.serializeResponseAsString(error).getBytes(UTF8));\n    }\n  }\n}\n",
                    "nodeType": "Block",
                    "astNodeNumber": 186,
                    "astHeight": 12
                },
                {
                    "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
                    "nodePosition": {
                        "charLength": 1977,
                        "startLineNumber": 48,
                        "startColumnNumber": 4,
                        "endLineNumber": 80,
                        "endColumnNumber": 5
                    },
                    "nodeContext": "@Override protected void encode(final ChannelHandlerContext ctx,final ResponseMessage responseMessage,final ByteBuf byteBuf) throws Exception {\n  final MessageSerializer serializer=ctx.channel().attr(StateKey.SERIALIZER).get();\n  final boolean useBinary=ctx.channel().attr(StateKey.USE_BINARY).get();\n  try {\n    if (!responseMessage.getStatus().getCode().isSuccess())     errorMeter.mark();\n    if (useBinary)     byteBuf.writeBytes(serializer.serializeResponseAsBinary(responseMessage,ctx.alloc()));\n else {\n      final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n      byteBuf.writeBytes(textSerializer.serializeResponseAsString(responseMessage).getBytes(UTF8));\n    }\n  }\n catch (  Exception ex) {\n    errorMeter.mark();\n    logger.warn(\"The result [{}] in the request {} could not be serialized and returned.\",responseMessage.getResult(),responseMessage.getRequestId(),ex);\n    final String errorMessage=String.format(\"Error during serialization: %s\",ex.getCause() != null ? ex.getCause().getMessage() : ex.getMessage());\n    final ResponseMessage error=ResponseMessage.build(responseMessage.getRequestId()).statusMessage(errorMessage).code(ResponseStatusCode.SERVER_ERROR_SERIALIZATION).create();\n    if (useBinary) {\n      byteBuf.writeBytes(serializer.serializeResponseAsBinary(error,ctx.alloc()));\n    }\n else {\n      final MessageTextSerializer textSerializer=(MessageTextSerializer)serializer;\n      byteBuf.writeBytes(textSerializer.serializeResponseAsString(error).getBytes(UTF8));\n    }\n  }\n}\n",
                    "nodeType": "MethodDeclaration",
                    "astNodeNumber": 209,
                    "astHeight": 13
                }
            ],
            "currentLineData": {
                "locationInParent": "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
                "nodePosition": {
                    "charLength": 83,
                    "startLineNumber": 50,
                    "startColumnNumber": 8,
                    "endLineNumber": 50,
                    "endColumnNumber": 91
                },
                "nodeContext": "final MessageSerializer serializer=ctx.channel().attr(StateKey.SERIALIZER).get();\n",
                "nodeType": "VariableDeclarationStatement",
                "astNodeNumber": 16,
                "astHeight": 6
            },
            "tokenLength": 2,
            "type": "org.apache.tinkerpop.gremlin.server.handler.AttributeKey<org.apache.tinkerpop.gremlin.driver.MessageSerializer>"
        }
    ],
    "positionList": [
        {
            "charLength": 19,
            "startLineNumber": 50,
            "startColumnNumber": 64,
            "endLineNumber": 50,
            "endColumnNumber": 83
        }
    ],
    "layoutRelationDataList": []
}